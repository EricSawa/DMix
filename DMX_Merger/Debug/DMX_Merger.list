
DMX_Merger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be84  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800c018  0800c018  0001c018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c0b8  0800c0b8  0001c0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c0c0  0800c0c0  0001c0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c0c4  0800c0c4  0001c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000960  20000000  0800c0c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003768  20000960  0800ca28  00020960  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200040c8  0800ca28  000240c8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020960  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a257  00000000  00000000  00020990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006674  00000000  00000000  0005abe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001ef0  00000000  00000000  00061260  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001bb8  00000000  00000000  00063150  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010ae7  00000000  00000000  00064d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00008b8c  00000000  00000000  000757ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007e37b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007d0c  00000000  00000000  0007e3f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000960 	.word	0x20000960
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800c000 	.word	0x0800c000

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000964 	.word	0x20000964
 80001d0:	0800c000 	.word	0x0800c000

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <app_btn_init>:
static void getOthSwitches(eal_task_Task *self);
static void debounceOthSwitches(eal_task_Task *self);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_btn_init(eal_task_Task *self){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	memset(othButtonState, 0, sizeof(othButtonState));
 80004ec:	2205      	movs	r2, #5
 80004ee:	2100      	movs	r1, #0
 80004f0:	480d      	ldr	r0, [pc, #52]	; (8000528 <app_btn_init+0x44>)
 80004f2:	f00b fd7c 	bl	800bfee <memset>
	memset(othButtonBuffer, 0, sizeof(othButtonBuffer));
 80004f6:	2205      	movs	r2, #5
 80004f8:	2100      	movs	r1, #0
 80004fa:	480c      	ldr	r0, [pc, #48]	; (800052c <app_btn_init+0x48>)
 80004fc:	f00b fd77 	bl	800bfee <memset>
	memset(othButtonTime, 0, sizeof(othButtonTime));
 8000500:	220a      	movs	r2, #10
 8000502:	2100      	movs	r1, #0
 8000504:	480a      	ldr	r0, [pc, #40]	; (8000530 <app_btn_init+0x4c>)
 8000506:	f00b fd72 	bl	800bfee <memset>
	memset(othButtonHoldTimeShort, 0, sizeof(othButtonHoldTimeShort));
 800050a:	220a      	movs	r2, #10
 800050c:	2100      	movs	r1, #0
 800050e:	4809      	ldr	r0, [pc, #36]	; (8000534 <app_btn_init+0x50>)
 8000510:	f00b fd6d 	bl	800bfee <memset>
	memset(othButtonHoldTimeLong, 0, sizeof(othButtonHoldTimeLong));
 8000514:	220a      	movs	r2, #10
 8000516:	2100      	movs	r1, #0
 8000518:	4807      	ldr	r0, [pc, #28]	; (8000538 <app_btn_init+0x54>)
 800051a:	f00b fd68 	bl	800bfee <memset>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	2000097c 	.word	0x2000097c
 800052c:	20000984 	.word	0x20000984
 8000530:	2000098c 	.word	0x2000098c
 8000534:	20000998 	.word	0x20000998
 8000538:	200009a4 	.word	0x200009a4

0800053c <app_btn_process>:

void app_btn_process(eal_task_Task *self){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	f083 0301 	eor.w	r3, r3, #1
 800054c:	b2db      	uxtb	r3, r3
 800054e:	2b00      	cmp	r3, #0
 8000550:	d111      	bne.n	8000576 <app_btn_process+0x3a>
	if(!cyclicFlag) return;
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <app_btn_process+0x48>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	f083 0301 	eor.w	r3, r3, #1
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d10b      	bne.n	800057a <app_btn_process+0x3e>
	getOthSwitches(self);
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f000 f83e 	bl	80005e4 <getOthSwitches>
	debounceOthSwitches(self);
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f000 f8b9 	bl	80006e0 <debounceOthSwitches>
	cyclicFlag = false;
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <app_btn_process+0x48>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	e002      	b.n	800057c <app_btn_process+0x40>
	if(!self->enable) return;
 8000576:	bf00      	nop
 8000578:	e000      	b.n	800057c <app_btn_process+0x40>
	if(!cyclicFlag) return;
 800057a:	bf00      	nop
}
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200009ae 	.word	0x200009ae

08000588 <app_btn_cyclic1ms>:

void app_btn_cyclic1ms(eal_task_Task *self, bool stat){
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <app_btn_cyclic1ms+0x3c>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
	if(internalTimer > 0)--internalTimer;
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <app_btn_cyclic1ms+0x40>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	b21b      	sxth	r3, r3
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dd08      	ble.n	80005b6 <app_btn_cyclic1ms+0x2e>
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <app_btn_cyclic1ms+0x40>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	3b01      	subs	r3, #1
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	b21a      	sxth	r2, r3
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <app_btn_cyclic1ms+0x40>)
 80005b4:	801a      	strh	r2, [r3, #0]
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	200009ae 	.word	0x200009ae
 80005c8:	200009b0 	.word	0x200009b0

080005cc <app_btn_receiveMsg>:

void app_btn_receiveMsg(eal_task_Task *self, msg_Message *message){
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]

}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <getOthSwitches>:

/* Helper ----------------------------------------------------------------------*/
static void getOthSwitches(eal_task_Task *self){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(I_SW2_GPIO_Port, I_SW2_Pin) == 0) 		othButtonBuffer[0] |= (1 << 0); else othButtonBuffer[0] &= ~(1 << 0);
 80005ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f4:	f001 feac 	bl	8002350 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d107      	bne.n	800060e <getOthSwitches+0x2a>
 80005fe:	4b37      	ldr	r3, [pc, #220]	; (80006dc <getOthSwitches+0xf8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <getOthSwitches+0xf8>)
 800060a:	701a      	strb	r2, [r3, #0]
 800060c:	e006      	b.n	800061c <getOthSwitches+0x38>
 800060e:	4b33      	ldr	r3, [pc, #204]	; (80006dc <getOthSwitches+0xf8>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	f023 0301 	bic.w	r3, r3, #1
 8000616:	b2da      	uxtb	r2, r3
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <getOthSwitches+0xf8>)
 800061a:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO1_GPIO_Port, I_GPIO1_Pin) == 0) 	othButtonBuffer[0] |= (1 << 1); else othButtonBuffer[0] &= ~(1 << 1);
 800061c:	2110      	movs	r1, #16
 800061e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000622:	f001 fe95 	bl	8002350 <HAL_GPIO_ReadPin>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d107      	bne.n	800063c <getOthSwitches+0x58>
 800062c:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <getOthSwitches+0xf8>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <getOthSwitches+0xf8>)
 8000638:	701a      	strb	r2, [r3, #0]
 800063a:	e006      	b.n	800064a <getOthSwitches+0x66>
 800063c:	4b27      	ldr	r3, [pc, #156]	; (80006dc <getOthSwitches+0xf8>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	f023 0302 	bic.w	r3, r3, #2
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <getOthSwitches+0xf8>)
 8000648:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO2_GPIO_Port, I_GPIO2_Pin) == 0) 	othButtonBuffer[0] |= (1 << 2); else othButtonBuffer[0] &= ~(1 << 2);
 800064a:	2120      	movs	r1, #32
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f001 fe7e 	bl	8002350 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d107      	bne.n	800066a <getOthSwitches+0x86>
 800065a:	4b20      	ldr	r3, [pc, #128]	; (80006dc <getOthSwitches+0xf8>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	b2da      	uxtb	r2, r3
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <getOthSwitches+0xf8>)
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	e006      	b.n	8000678 <getOthSwitches+0x94>
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <getOthSwitches+0xf8>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	f023 0304 	bic.w	r3, r3, #4
 8000672:	b2da      	uxtb	r2, r3
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <getOthSwitches+0xf8>)
 8000676:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO3_GPIO_Port, I_GPIO3_Pin) == 0) 	othButtonBuffer[0] |= (1 << 3); else othButtonBuffer[0] &= ~(1 << 3);
 8000678:	2140      	movs	r1, #64	; 0x40
 800067a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067e:	f001 fe67 	bl	8002350 <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d107      	bne.n	8000698 <getOthSwitches+0xb4>
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <getOthSwitches+0xf8>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	f043 0308 	orr.w	r3, r3, #8
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <getOthSwitches+0xf8>)
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	e006      	b.n	80006a6 <getOthSwitches+0xc2>
 8000698:	4b10      	ldr	r3, [pc, #64]	; (80006dc <getOthSwitches+0xf8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	f023 0308 	bic.w	r3, r3, #8
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <getOthSwitches+0xf8>)
 80006a4:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO4_GPIO_Port, I_GPIO4_Pin) == 0) 	othButtonBuffer[0] |= (1 << 4); else othButtonBuffer[0] &= ~(1 << 4);
 80006a6:	2180      	movs	r1, #128	; 0x80
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ac:	f001 fe50 	bl	8002350 <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d107      	bne.n	80006c6 <getOthSwitches+0xe2>
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <getOthSwitches+0xf8>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	f043 0310 	orr.w	r3, r3, #16
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <getOthSwitches+0xf8>)
 80006c2:	701a      	strb	r2, [r3, #0]

}
 80006c4:	e006      	b.n	80006d4 <getOthSwitches+0xf0>
	if(HAL_GPIO_ReadPin(I_GPIO4_GPIO_Port, I_GPIO4_Pin) == 0) 	othButtonBuffer[0] |= (1 << 4); else othButtonBuffer[0] &= ~(1 << 4);
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <getOthSwitches+0xf8>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	f023 0310 	bic.w	r3, r3, #16
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	4b02      	ldr	r3, [pc, #8]	; (80006dc <getOthSwitches+0xf8>)
 80006d2:	701a      	strb	r2, [r3, #0]
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000984 	.word	0x20000984

080006e0 <debounceOthSwitches>:

static void debounceOthSwitches(eal_task_Task *self){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	; 0x30
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	static uint8_t swNmbr = 0;
	if(swIndex[swNmbr] != app_btn_NONE){
 80006e8:	4ba3      	ldr	r3, [pc, #652]	; (8000978 <debounceOthSwitches+0x298>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4ba3      	ldr	r3, [pc, #652]	; (800097c <debounceOthSwitches+0x29c>)
 80006f0:	5c9b      	ldrb	r3, [r3, r2]
 80006f2:	2bff      	cmp	r3, #255	; 0xff
 80006f4:	f000 812f 	beq.w	8000956 <debounceOthSwitches+0x276>
		uint16_t msk = 1 << (swIndex[swNmbr]&0xf);
 80006f8:	4b9f      	ldr	r3, [pc, #636]	; (8000978 <debounceOthSwitches+0x298>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b9f      	ldr	r3, [pc, #636]	; (800097c <debounceOthSwitches+0x29c>)
 8000700:	5c9b      	ldrb	r3, [r3, r2]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	2201      	movs	r2, #1
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint8_t  idx = (swIndex[swNmbr]&0xf0) >> 4;
 800070e:	4b9a      	ldr	r3, [pc, #616]	; (8000978 <debounceOthSwitches+0x298>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	4b99      	ldr	r3, [pc, #612]	; (800097c <debounceOthSwitches+0x29c>)
 8000716:	5c9b      	ldrb	r3, [r3, r2]
 8000718:	091b      	lsrs	r3, r3, #4
 800071a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (!(othButtonBuffer[idx] & msk)){ 			/*button is released*/
 800071e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000722:	4a97      	ldr	r2, [pc, #604]	; (8000980 <debounceOthSwitches+0x2a0>)
 8000724:	5cd3      	ldrb	r3, [r2, r3]
 8000726:	461a      	mov	r2, r3
 8000728:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800072a:	4013      	ands	r3, r2
 800072c:	2b00      	cmp	r3, #0
 800072e:	d15d      	bne.n	80007ec <debounceOthSwitches+0x10c>
			if(othButtonTime[swNmbr] > 0){
 8000730:	4b91      	ldr	r3, [pc, #580]	; (8000978 <debounceOthSwitches+0x298>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b93      	ldr	r3, [pc, #588]	; (8000984 <debounceOthSwitches+0x2a4>)
 8000738:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800073c:	2b00      	cmp	r3, #0
 800073e:	f000 80a4 	beq.w	800088a <debounceOthSwitches+0x1aa>
				--othButtonTime[swNmbr];
 8000742:	4b8d      	ldr	r3, [pc, #564]	; (8000978 <debounceOthSwitches+0x298>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4a8f      	ldr	r2, [pc, #572]	; (8000984 <debounceOthSwitches+0x2a4>)
 8000748:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800074c:	3a01      	subs	r2, #1
 800074e:	b291      	uxth	r1, r2
 8000750:	4a8c      	ldr	r2, [pc, #560]	; (8000984 <debounceOthSwitches+0x2a4>)
 8000752:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(othButtonTime[swNmbr] <= 0){
 8000756:	4b88      	ldr	r3, [pc, #544]	; (8000978 <debounceOthSwitches+0x298>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	4b89      	ldr	r3, [pc, #548]	; (8000984 <debounceOthSwitches+0x2a4>)
 800075e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000762:	2b00      	cmp	r3, #0
 8000764:	f040 8091 	bne.w	800088a <debounceOthSwitches+0x1aa>
					if(othButtonState[idx] & msk){
 8000768:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800076c:	4a86      	ldr	r2, [pc, #536]	; (8000988 <debounceOthSwitches+0x2a8>)
 800076e:	5cd3      	ldrb	r3, [r2, r3]
 8000770:	461a      	mov	r2, r3
 8000772:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000774:	4013      	ands	r3, r2
 8000776:	2b00      	cmp	r3, #0
 8000778:	f000 8087 	beq.w	800088a <debounceOthSwitches+0x1aa>
						if(self->sendMsg != NULL){
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d014      	beq.n	80007ae <debounceOthSwitches+0xce>
							msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_RELEASED, 0, 0);
 8000784:	4b7c      	ldr	r3, [pc, #496]	; (8000978 <debounceOthSwitches+0x298>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b29b      	uxth	r3, r3
 800078a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800078c:	2300      	movs	r3, #0
 800078e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000790:	2342      	movs	r3, #66	; 0x42
 8000792:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000796:	2300      	movs	r3, #0
 8000798:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800079c:	2300      	movs	r3, #0
 800079e:	857b      	strh	r3, [r7, #42]	; 0x2a
							self->sendMsg(self, &newMessage);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	695b      	ldr	r3, [r3, #20]
 80007a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80007a8:	4611      	mov	r1, r2
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	4798      	blx	r3
						}
						othButtonState[idx] &=~msk;
 80007ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80007b2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80007b6:	4974      	ldr	r1, [pc, #464]	; (8000988 <debounceOthSwitches+0x2a8>)
 80007b8:	5c8a      	ldrb	r2, [r1, r2]
 80007ba:	b251      	sxtb	r1, r2
 80007bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80007be:	b252      	sxtb	r2, r2
 80007c0:	43d2      	mvns	r2, r2
 80007c2:	b252      	sxtb	r2, r2
 80007c4:	400a      	ands	r2, r1
 80007c6:	b252      	sxtb	r2, r2
 80007c8:	b2d1      	uxtb	r1, r2
 80007ca:	4a6f      	ldr	r2, [pc, #444]	; (8000988 <debounceOthSwitches+0x2a8>)
 80007cc:	54d1      	strb	r1, [r2, r3]
						othButtonHoldTimeShort[swNmbr] = 0;
 80007ce:	4b6a      	ldr	r3, [pc, #424]	; (8000978 <debounceOthSwitches+0x298>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b6d      	ldr	r3, [pc, #436]	; (800098c <debounceOthSwitches+0x2ac>)
 80007d6:	2100      	movs	r1, #0
 80007d8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						othButtonHoldTimeLong[swNmbr] = 0;
 80007dc:	4b66      	ldr	r3, [pc, #408]	; (8000978 <debounceOthSwitches+0x298>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b6b      	ldr	r3, [pc, #428]	; (8000990 <debounceOthSwitches+0x2b0>)
 80007e4:	2100      	movs	r1, #0
 80007e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80007ea:	e04e      	b.n	800088a <debounceOthSwitches+0x1aa>
					}
				}
			}
		}else{					 						/*button is down*/
			if(othButtonTime[swNmbr] < app_cfg_btn_TIME_DEBOUNCE){
 80007ec:	4b62      	ldr	r3, [pc, #392]	; (8000978 <debounceOthSwitches+0x298>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b64      	ldr	r3, [pc, #400]	; (8000984 <debounceOthSwitches+0x2a4>)
 80007f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	d846      	bhi.n	800088a <debounceOthSwitches+0x1aa>
				++othButtonTime[swNmbr];
 80007fc:	4b5e      	ldr	r3, [pc, #376]	; (8000978 <debounceOthSwitches+0x298>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4a60      	ldr	r2, [pc, #384]	; (8000984 <debounceOthSwitches+0x2a4>)
 8000802:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000806:	3201      	adds	r2, #1
 8000808:	b291      	uxth	r1, r2
 800080a:	4a5e      	ldr	r2, [pc, #376]	; (8000984 <debounceOthSwitches+0x2a4>)
 800080c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(othButtonTime[swNmbr] >= app_cfg_btn_TIME_DEBOUNCE){
 8000810:	4b59      	ldr	r3, [pc, #356]	; (8000978 <debounceOthSwitches+0x298>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b5b      	ldr	r3, [pc, #364]	; (8000984 <debounceOthSwitches+0x2a4>)
 8000818:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800081c:	2b03      	cmp	r3, #3
 800081e:	d934      	bls.n	800088a <debounceOthSwitches+0x1aa>
					if(self->sendMsg != NULL){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	695b      	ldr	r3, [r3, #20]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d014      	beq.n	8000852 <debounceOthSwitches+0x172>
						msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_PRESSED, 0, 0);
 8000828:	4b53      	ldr	r3, [pc, #332]	; (8000978 <debounceOthSwitches+0x298>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b29b      	uxth	r3, r3
 800082e:	83bb      	strh	r3, [r7, #28]
 8000830:	2301      	movs	r3, #1
 8000832:	83fb      	strh	r3, [r7, #30]
 8000834:	2342      	movs	r3, #66	; 0x42
 8000836:	f887 3020 	strb.w	r3, [r7, #32]
 800083a:	2300      	movs	r3, #0
 800083c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000840:	2300      	movs	r3, #0
 8000842:	847b      	strh	r3, [r7, #34]	; 0x22
						self->sendMsg(self, &newMessage);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	f107 021c 	add.w	r2, r7, #28
 800084c:	4611      	mov	r1, r2
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	4798      	blx	r3
					}
					othButtonState[idx] |= msk;
 8000852:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000856:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800085a:	494b      	ldr	r1, [pc, #300]	; (8000988 <debounceOthSwitches+0x2a8>)
 800085c:	5c89      	ldrb	r1, [r1, r2]
 800085e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	430a      	orrs	r2, r1
 8000864:	b2d1      	uxtb	r1, r2
 8000866:	4a48      	ldr	r2, [pc, #288]	; (8000988 <debounceOthSwitches+0x2a8>)
 8000868:	54d1      	strb	r1, [r2, r3]
					othButtonHoldTimeShort[swNmbr] = app_cfg_btn_TIME_HOLD_SHORT;
 800086a:	4b43      	ldr	r3, [pc, #268]	; (8000978 <debounceOthSwitches+0x298>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	4b46      	ldr	r3, [pc, #280]	; (800098c <debounceOthSwitches+0x2ac>)
 8000872:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000876:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					othButtonHoldTimeLong[swNmbr] = app_cfg_btn_TIME_HOLD_LONG;
 800087a:	4b3f      	ldr	r3, [pc, #252]	; (8000978 <debounceOthSwitches+0x298>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	4b43      	ldr	r3, [pc, #268]	; (8000990 <debounceOthSwitches+0x2b0>)
 8000882:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000886:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				}
			}
		}
		if(othButtonHoldTimeShort[swNmbr]>0){
 800088a:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <debounceOthSwitches+0x298>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	4b3e      	ldr	r3, [pc, #248]	; (800098c <debounceOthSwitches+0x2ac>)
 8000892:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000896:	2b00      	cmp	r3, #0
 8000898:	dd2a      	ble.n	80008f0 <debounceOthSwitches+0x210>
			--othButtonHoldTimeShort[swNmbr];
 800089a:	4b37      	ldr	r3, [pc, #220]	; (8000978 <debounceOthSwitches+0x298>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	4a3b      	ldr	r2, [pc, #236]	; (800098c <debounceOthSwitches+0x2ac>)
 80008a0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80008a4:	b292      	uxth	r2, r2
 80008a6:	3a01      	subs	r2, #1
 80008a8:	b292      	uxth	r2, r2
 80008aa:	b211      	sxth	r1, r2
 80008ac:	4a37      	ldr	r2, [pc, #220]	; (800098c <debounceOthSwitches+0x2ac>)
 80008ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(othButtonHoldTimeShort[swNmbr] == 0) {
 80008b2:	4b31      	ldr	r3, [pc, #196]	; (8000978 <debounceOthSwitches+0x298>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b34      	ldr	r3, [pc, #208]	; (800098c <debounceOthSwitches+0x2ac>)
 80008ba:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d116      	bne.n	80008f0 <debounceOthSwitches+0x210>
				if(self->sendMsg != NULL){
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d012      	beq.n	80008f0 <debounceOthSwitches+0x210>
					msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_HOLD_SHORT, 0, 0);
 80008ca:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <debounceOthSwitches+0x298>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	82bb      	strh	r3, [r7, #20]
 80008d2:	2302      	movs	r3, #2
 80008d4:	82fb      	strh	r3, [r7, #22]
 80008d6:	2342      	movs	r3, #66	; 0x42
 80008d8:	763b      	strb	r3, [r7, #24]
 80008da:	2300      	movs	r3, #0
 80008dc:	767b      	strb	r3, [r7, #25]
 80008de:	2300      	movs	r3, #0
 80008e0:	837b      	strh	r3, [r7, #26]
					self->sendMsg(self, &newMessage);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f107 0214 	add.w	r2, r7, #20
 80008ea:	4611      	mov	r1, r2
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	4798      	blx	r3
				}
			}
		}
		if(othButtonHoldTimeLong[swNmbr]>0){
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <debounceOthSwitches+0x298>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b26      	ldr	r3, [pc, #152]	; (8000990 <debounceOthSwitches+0x2b0>)
 80008f8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	dd2a      	ble.n	8000956 <debounceOthSwitches+0x276>
			--othButtonHoldTimeLong[swNmbr];
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <debounceOthSwitches+0x298>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4a22      	ldr	r2, [pc, #136]	; (8000990 <debounceOthSwitches+0x2b0>)
 8000906:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800090a:	b292      	uxth	r2, r2
 800090c:	3a01      	subs	r2, #1
 800090e:	b292      	uxth	r2, r2
 8000910:	b211      	sxth	r1, r2
 8000912:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <debounceOthSwitches+0x2b0>)
 8000914:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(othButtonHoldTimeLong[swNmbr] == 0) {
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <debounceOthSwitches+0x298>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <debounceOthSwitches+0x2b0>)
 8000920:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d116      	bne.n	8000956 <debounceOthSwitches+0x276>
				if(self->sendMsg != NULL){
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d012      	beq.n	8000956 <debounceOthSwitches+0x276>
					msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_HOLD_LONG, 0, 0);
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <debounceOthSwitches+0x298>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b29b      	uxth	r3, r3
 8000936:	81bb      	strh	r3, [r7, #12]
 8000938:	2303      	movs	r3, #3
 800093a:	81fb      	strh	r3, [r7, #14]
 800093c:	2342      	movs	r3, #66	; 0x42
 800093e:	743b      	strb	r3, [r7, #16]
 8000940:	2300      	movs	r3, #0
 8000942:	747b      	strb	r3, [r7, #17]
 8000944:	2300      	movs	r3, #0
 8000946:	827b      	strh	r3, [r7, #18]
					self->sendMsg(self, &newMessage);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	f107 020c 	add.w	r2, r7, #12
 8000950:	4611      	mov	r1, r2
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	4798      	blx	r3
				}
			}
		}
	}
	if(++swNmbr >= (app_cfg_NMBR_BTNS))swNmbr = 0;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <debounceOthSwitches+0x298>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <debounceOthSwitches+0x298>)
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <debounceOthSwitches+0x298>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b04      	cmp	r3, #4
 8000968:	d902      	bls.n	8000970 <debounceOthSwitches+0x290>
 800096a:	4b03      	ldr	r3, [pc, #12]	; (8000978 <debounceOthSwitches+0x298>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
}
 8000970:	bf00      	nop
 8000972:	3730      	adds	r7, #48	; 0x30
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200009b2 	.word	0x200009b2
 800097c:	0800c068 	.word	0x0800c068
 8000980:	20000984 	.word	0x20000984
 8000984:	2000098c 	.word	0x2000098c
 8000988:	2000097c 	.word	0x2000097c
 800098c:	20000998 	.word	0x20000998
 8000990:	200009a4 	.word	0x200009a4

08000994 <app_dmx_init>:
app_dmx_Merge dmxMerge = app_dmx_MERGE_ACTIVE;
app_dmx_MergeMode dmxMergeMode = app_dmx_MERGE_MODE_HTP;
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_dmx_init(eal_task_Task *self){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	dmxMerge = app_dmx_MERGE_ACTIVE;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <app_dmx_init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
	dmxMergeMode = app_dmx_MERGE_MODE_HTP;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <app_dmx_init+0x78>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]

	dmx_registerCallback(&dmx1Out, dmx1TransmitterCallback);
 80009a8:	4919      	ldr	r1, [pc, #100]	; (8000a10 <app_dmx_init+0x7c>)
 80009aa:	481a      	ldr	r0, [pc, #104]	; (8000a14 <app_dmx_init+0x80>)
 80009ac:	f007 f843 	bl	8007a36 <dmx_registerCallback>
	dmx_init(&dmx1Out);
 80009b0:	4818      	ldr	r0, [pc, #96]	; (8000a14 <app_dmx_init+0x80>)
 80009b2:	f007 f84f 	bl	8007a54 <dmx_init>
	dmx_txStart(&dmx1Out);
 80009b6:	4817      	ldr	r0, [pc, #92]	; (8000a14 <app_dmx_init+0x80>)
 80009b8:	f007 f922 	bl	8007c00 <dmx_txStart>

	dmx_registerCallback(&dmx2In, dmx2ReceiverCallback);
 80009bc:	4916      	ldr	r1, [pc, #88]	; (8000a18 <app_dmx_init+0x84>)
 80009be:	4817      	ldr	r0, [pc, #92]	; (8000a1c <app_dmx_init+0x88>)
 80009c0:	f007 f839 	bl	8007a36 <dmx_registerCallback>
	if(dmxMerge == app_dmx_MERGE_ACTIVE){
 80009c4:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <app_dmx_init+0x74>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d105      	bne.n	80009d8 <app_dmx_init+0x44>
		dmx_init(&dmx2In);
 80009cc:	4813      	ldr	r0, [pc, #76]	; (8000a1c <app_dmx_init+0x88>)
 80009ce:	f007 f841 	bl	8007a54 <dmx_init>
		dmx_rxStart(&dmx2In);
 80009d2:	4812      	ldr	r0, [pc, #72]	; (8000a1c <app_dmx_init+0x88>)
 80009d4:	f007 f926 	bl	8007c24 <dmx_rxStart>
	}

	HAL_GPIO_WritePin(O_USART1_DIR_GPIO_Port, O_USART1_DIR_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009de:	4810      	ldr	r0, [pc, #64]	; (8000a20 <app_dmx_init+0x8c>)
 80009e0:	f001 fcce 	bl	8002380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(O_USART2_DIR_GPIO_Port, O_USART2_DIR_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2104      	movs	r1, #4
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <app_dmx_init+0x8c>)
 80009ea:	f001 fcc9 	bl	8002380 <HAL_GPIO_WritePin>

	memset(dmxModified, 0, sizeof(dmxModified));
 80009ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f2:	2100      	movs	r1, #0
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <app_dmx_init+0x90>)
 80009f6:	f00b fafa 	bl	800bfee <memset>
	dmxTxComplete = false;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <app_dmx_init+0x94>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000fb9 	.word	0x20000fb9
 8000a0c:	20000fba 	.word	0x20000fba
 8000a10:	08000bc5 	.word	0x08000bc5
 8000a14:	200005e0 	.word	0x200005e0
 8000a18:	08000be9 	.word	0x08000be9
 8000a1c:	2000063c 	.word	0x2000063c
 8000a20:	48000800 	.word	0x48000800
 8000a24:	20000db8 	.word	0x20000db8
 8000a28:	20000fb8 	.word	0x20000fb8

08000a2c <app_dmx_process>:

void app_dmx_process(eal_task_Task *self){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	f083 0301 	eor.w	r3, r3, #1
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d11e      	bne.n	8000a80 <app_dmx_process+0x54>
	if(!cyclicFlag) return;
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <app_dmx_process+0x60>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	f083 0301 	eor.w	r3, r3, #1
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d118      	bne.n	8000a84 <app_dmx_process+0x58>
	/*Do everything what you want to do*/
//	dmx1Out.universe[1] = 255;
//	dmx1Out.universe[3] = 10;
	dmx_loop(&dmx1Out);
 8000a52:	480f      	ldr	r0, [pc, #60]	; (8000a90 <app_dmx_process+0x64>)
 8000a54:	f007 f848 	bl	8007ae8 <dmx_loop>
	/*Receive makes only sense if merge is enabled*/
	if(dmxMerge == app_dmx_MERGE_ACTIVE) dmx_loop(&dmx2In);
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <app_dmx_process+0x68>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <app_dmx_process+0x3a>
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <app_dmx_process+0x6c>)
 8000a62:	f007 f841 	bl	8007ae8 <dmx_loop>

	if(dmxTxComplete){updateDmxOut(); dmxTxComplete = false;}
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <app_dmx_process+0x70>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d004      	beq.n	8000a78 <app_dmx_process+0x4c>
 8000a6e:	f000 f84b 	bl	8000b08 <updateDmxOut>
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <app_dmx_process+0x70>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]

	cyclicFlag = false;
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <app_dmx_process+0x60>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
 8000a7e:	e002      	b.n	8000a86 <app_dmx_process+0x5a>
	if(!self->enable) return;
 8000a80:	bf00      	nop
 8000a82:	e000      	b.n	8000a86 <app_dmx_process+0x5a>
	if(!cyclicFlag) return;
 8000a84:	bf00      	nop
}
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000db4 	.word	0x20000db4
 8000a90:	200005e0 	.word	0x200005e0
 8000a94:	20000fb9 	.word	0x20000fb9
 8000a98:	2000063c 	.word	0x2000063c
 8000a9c:	20000fb8 	.word	0x20000fb8

08000aa0 <app_dmx_cyclic1ms>:

void app_dmx_cyclic1ms(eal_task_Task *self, bool stat){
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <app_dmx_cyclic1ms+0x20>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000db4 	.word	0x20000db4

08000ac4 <app_dmx_receiveMsg>:

void app_dmx_receiveMsg(eal_task_Task *self, msg_Message *message){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	if(message->type == app_cfg_DMX_MSG){
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	791b      	ldrb	r3, [r3, #4]
 8000ad2:	2b44      	cmp	r3, #68	; 0x44
 8000ad4:	d111      	bne.n	8000afa <app_dmx_receiveMsg+0x36>
		/*Action parsing*/
		if(msg_isAction(message)){
 8000ad6:	6838      	ldr	r0, [r7, #0]
 8000ad8:	f007 fbd0 	bl	800827c <msg_isAction>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00b      	beq.n	8000afa <app_dmx_receiveMsg+0x36>
			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000aea:	81fb      	strh	r3, [r7, #14]
			dmxModified[idx] = (uint8_t)message->value;
 8000aec:	89fb      	ldrh	r3, [r7, #14]
 8000aee:	683a      	ldr	r2, [r7, #0]
 8000af0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000af4:	b2d1      	uxtb	r1, r2
 8000af6:	4a03      	ldr	r2, [pc, #12]	; (8000b04 <app_dmx_receiveMsg+0x40>)
 8000af8:	54d1      	strb	r1, [r2, r3]
		}
		/*Event parsing*/
		}else{

		}
}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000db8 	.word	0x20000db8

08000b08 <updateDmxOut>:

/* Helper ---------------------------------------------------------------------*/
static void updateDmxOut(){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
	if(dmxMerge == app_dmx_MERGE_ACTIVE){
 8000b0e:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <updateDmxOut+0xa8>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d13f      	bne.n	8000b96 <updateDmxOut+0x8e>
		for(int i = 0; i < dmx1Out.universeSize; ++i){
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	e034      	b.n	8000b86 <updateDmxOut+0x7e>
			uint8_t dmxRxValue = dmx2In.universe[i]; /*Atomic operation*/
 8000b1c:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <updateDmxOut+0xac>)
 8000b1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4413      	add	r3, r2
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	70fb      	strb	r3, [r7, #3]
			uint8_t dmxModValue = dmxModified[i]; /*Atomic operation*/
 8000b28:	4a23      	ldr	r2, [pc, #140]	; (8000bb8 <updateDmxOut+0xb0>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	70bb      	strb	r3, [r7, #2]
			if(dmxMergeMode == app_dmx_MERGE_MODE_HTP) {	/*Highest takes presence*/
 8000b32:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <updateDmxOut+0xb4>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d111      	bne.n	8000b5e <updateDmxOut+0x56>
				if(dmxRxValue > dmxModValue) dmx1Out.universe[i] = dmxRxValue;
 8000b3a:	78fa      	ldrb	r2, [r7, #3]
 8000b3c:	78bb      	ldrb	r3, [r7, #2]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d906      	bls.n	8000b50 <updateDmxOut+0x48>
 8000b42:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <updateDmxOut+0xb8>)
 8000b44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	78fa      	ldrb	r2, [r7, #3]
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	e017      	b.n	8000b80 <updateDmxOut+0x78>
				else dmx1Out.universe[i] = dmxModValue;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <updateDmxOut+0xb8>)
 8000b52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4413      	add	r3, r2
 8000b58:	78ba      	ldrb	r2, [r7, #2]
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	e010      	b.n	8000b80 <updateDmxOut+0x78>
			}else{								/*Lowest takes presence*/
				if(dmxRxValue < dmxModValue) dmx1Out.universe[i] = dmxRxValue;
 8000b5e:	78fa      	ldrb	r2, [r7, #3]
 8000b60:	78bb      	ldrb	r3, [r7, #2]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d206      	bcs.n	8000b74 <updateDmxOut+0x6c>
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <updateDmxOut+0xb8>)
 8000b68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	78fa      	ldrb	r2, [r7, #3]
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	e005      	b.n	8000b80 <updateDmxOut+0x78>
				else dmx1Out.universe[i] = dmxModValue;
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <updateDmxOut+0xb8>)
 8000b76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	78ba      	ldrb	r2, [r7, #2]
 8000b7e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < dmx1Out.universeSize; ++i){
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3301      	adds	r3, #1
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <updateDmxOut+0xb8>)
 8000b88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dcc3      	bgt.n	8000b1c <updateDmxOut+0x14>
			}
		}
	}else{ /*If merge is disabled just copy the dmxModified data to output*/
		memcpy(dmx1Out.universe, dmxModified, dmx1Out.universeSize);
	}
}
 8000b94:	e008      	b.n	8000ba8 <updateDmxOut+0xa0>
		memcpy(dmx1Out.universe, dmxModified, dmx1Out.universeSize);
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <updateDmxOut+0xb8>)
 8000b98:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <updateDmxOut+0xb8>)
 8000b9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4905      	ldr	r1, [pc, #20]	; (8000bb8 <updateDmxOut+0xb0>)
 8000ba4:	f00b fa18 	bl	800bfd8 <memcpy>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000fb9 	.word	0x20000fb9
 8000bb4:	2000063c 	.word	0x2000063c
 8000bb8:	20000db8 	.word	0x20000db8
 8000bbc:	20000fba 	.word	0x20000fba
 8000bc0:	200005e0 	.word	0x200005e0

08000bc4 <dmx1TransmitterCallback>:

/* Callback's ---------------------------------------------------------------------*/
bool dmx1TransmitterCallback(dmx_cfg_Instance *dmx){
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	bool state = true;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
	dmxTxComplete = true;
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <dmx1TransmitterCallback+0x20>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
	return state;
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	20000fb8 	.word	0x20000fb8

08000be8 <dmx2ReceiverCallback>:

bool dmx2ReceiverCallback(dmx_cfg_Instance *dmx){
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	bool state = true;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
	return state;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <USART1_IRQHandler>:
/* IRQs ---------------------------------------------------------------------*/
void USART1_IRQHandler(void){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	dmx_irqRxInterfaceHandler(&dmx2In);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <USART1_IRQHandler+0x10>)
 8000c0a:	f007 f8ff 	bl	8007e0c <dmx_irqRxInterfaceHandler>
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000063c 	.word	0x2000063c

08000c18 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	dmx_irqTxInterfaceHandler(&dmx1Out);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <USART2_IRQHandler+0x10>)
 8000c1e:	f007 f880 	bl	8007d22 <dmx_irqTxInterfaceHandler>
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200005e0 	.word	0x200005e0

08000c2c <app_dmx_preset_init>:
static volatile bool cyclicFlag = false;
static volatile int16_t internalTimer = 0;
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_dmx_preset_init(eal_task_Task *self){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e061      	b.n	8000cfe <app_dmx_preset_init+0xd2>
		myPresets[i].relTime_ms = 0;
 8000c3a:	4a34      	ldr	r2, [pc, #208]	; (8000d0c <app_dmx_preset_init+0xe0>)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000c42:	fb01 f303 	mul.w	r3, r1, r3
 8000c46:	4413      	add	r3, r2
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
		myPresets[i].trigger = false;
 8000c4e:	4a2f      	ldr	r2, [pc, #188]	; (8000d0c <app_dmx_preset_init+0xe0>)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000c56:	fb01 f303 	mul.w	r3, r1, r3
 8000c5a:	4413      	add	r3, r2
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
		myPresets[i].transitionDoneCnt = 0;
 8000c60:	4a2a      	ldr	r2, [pc, #168]	; (8000d0c <app_dmx_preset_init+0xe0>)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000c68:	fb01 f303 	mul.w	r3, r1, r3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3308      	adds	r3, #8
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
		myPresets[i].transitionEnableSize = 0;
 8000c74:	4a25      	ldr	r2, [pc, #148]	; (8000d0c <app_dmx_preset_init+0xe0>)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000c7c:	fb01 f303 	mul.w	r3, r1, r3
 8000c80:	4413      	add	r3, r2
 8000c82:	330c      	adds	r3, #12
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
		memset(myPresets[i].presetTransitionStatus, 0, sizeof(myPresets[i].presetTransitionStatus));
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8000c8e:	fb02 f303 	mul.w	r3, r2, r3
 8000c92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000c96:	4a1d      	ldr	r2, [pc, #116]	; (8000d0c <app_dmx_preset_init+0xe0>)
 8000c98:	4413      	add	r3, r2
 8000c9a:	2228      	movs	r2, #40	; 0x28
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f00b f9a5 	bl	800bfee <memset>
		for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	e023      	b.n	8000cf2 <app_dmx_preset_init+0xc6>
			if(myPresets[i].presetTransitionSettings[j].enable) ++myPresets[i].transitionEnableSize;
 8000caa:	4918      	ldr	r1, [pc, #96]	; (8000d0c <app_dmx_preset_init+0xe0>)
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8000cb6:	fb00 f303 	mul.w	r3, r0, r3
 8000cba:	4413      	add	r3, r2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	331d      	adds	r3, #29
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d012      	beq.n	8000cec <app_dmx_preset_init+0xc0>
 8000cc6:	4a11      	ldr	r2, [pc, #68]	; (8000d0c <app_dmx_preset_init+0xe0>)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000cce:	fb01 f303 	mul.w	r3, r1, r3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	330c      	adds	r3, #12
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	1c5a      	adds	r2, r3, #1
 8000cda:	490c      	ldr	r1, [pc, #48]	; (8000d0c <app_dmx_preset_init+0xe0>)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8000ce2:	fb00 f303 	mul.w	r3, r0, r3
 8000ce6:	440b      	add	r3, r1
 8000ce8:	330c      	adds	r3, #12
 8000cea:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	2b13      	cmp	r3, #19
 8000cf6:	ddd8      	ble.n	8000caa <app_dmx_preset_init+0x7e>
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	dd9a      	ble.n	8000c3a <app_dmx_preset_init+0xe>
		}
	}
}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000000 	.word	0x20000000

08000d10 <app_dmx_preset_process>:

void app_dmx_preset_process(eal_task_Task *self){
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	f083 0301 	eor.w	r3, r3, #1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 80d9 	bne.w	8000eda <app_dmx_preset_process+0x1ca>
	if(!cyclicFlag) return;
 8000d28:	4b6f      	ldr	r3, [pc, #444]	; (8000ee8 <app_dmx_preset_process+0x1d8>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	f083 0301 	eor.w	r3, r3, #1
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f040 80d2 	bne.w	8000ede <app_dmx_preset_process+0x1ce>
	/*Do everything what you want to do*/
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	e0c4      	b.n	8000eca <app_dmx_preset_process+0x1ba>
		if(myPresets[i].trigger){	/*Preset is triggered and can be executed*/
 8000d40:	4a6a      	ldr	r2, [pc, #424]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000d48:	fb01 f303 	mul.w	r3, r1, r3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 80b7 	beq.w	8000ec4 <app_dmx_preset_process+0x1b4>
			++myPresets[i].relTime_ms;
 8000d56:	4a65      	ldr	r2, [pc, #404]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000d5e:	fb01 f303 	mul.w	r3, r1, r3
 8000d62:	4413      	add	r3, r2
 8000d64:	3304      	adds	r3, #4
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	1c5a      	adds	r2, r3, #1
 8000d6a:	4960      	ldr	r1, [pc, #384]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8000d72:	fb00 f303 	mul.w	r3, r0, r3
 8000d76:	440b      	add	r3, r1
 8000d78:	3304      	adds	r3, #4
 8000d7a:	601a      	str	r2, [r3, #0]
			for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	e05e      	b.n	8000e40 <app_dmx_preset_process+0x130>
				if(myPresets[i].presetTransitionSettings[j].enable){
 8000d82:	495a      	ldr	r1, [pc, #360]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000d84:	68ba      	ldr	r2, [r7, #8]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	0112      	lsls	r2, r2, #4
 8000d8a:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8000d8e:	fb00 f303 	mul.w	r3, r0, r3
 8000d92:	4413      	add	r3, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	331d      	adds	r3, #29
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d04d      	beq.n	8000e3a <app_dmx_preset_process+0x12a>
					if(myPresets[i].presetTransitionStatus[j].transStep == app_dmx_preset_cfg_TRANS_STEP_EXE) performNextTransitionStep(self, i, j);
 8000d9e:	4953      	ldr	r1, [pc, #332]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	22bc      	movs	r2, #188	; 0xbc
 8000da4:	fb02 f203 	mul.w	r2, r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4413      	add	r3, r2
 8000dac:	33a8      	adds	r3, #168	; 0xa8
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	440b      	add	r3, r1
 8000db2:	785b      	ldrb	r3, [r3, #1]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d108      	bne.n	8000dca <app_dmx_preset_process+0xba>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 f964 	bl	8001090 <performNextTransitionStep>
 8000dc8:	e037      	b.n	8000e3a <app_dmx_preset_process+0x12a>
					else if((myPresets[i].relTime_ms >= myPresets[i].presetTransitionSettings[j].transDelay_ms) && (myPresets[i].presetTransitionStatus[j].transStep == app_dmx_preset_cfg_TRANS_STEP_NONE)){
 8000dca:	4a48      	ldr	r2, [pc, #288]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000dd2:	fb01 f303 	mul.w	r3, r1, r3
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3304      	adds	r3, #4
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4843      	ldr	r0, [pc, #268]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000dde:	68b9      	ldr	r1, [r7, #8]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	0109      	lsls	r1, r1, #4
 8000de4:	f44f 74bc 	mov.w	r4, #376	; 0x178
 8000de8:	fb04 f303 	mul.w	r3, r4, r3
 8000dec:	440b      	add	r3, r1
 8000dee:	4403      	add	r3, r0
 8000df0:	3318      	adds	r3, #24
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d320      	bcc.n	8000e3a <app_dmx_preset_process+0x12a>
 8000df8:	493c      	ldr	r1, [pc, #240]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	22bc      	movs	r2, #188	; 0xbc
 8000dfe:	fb02 f203 	mul.w	r2, r2, r3
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	4413      	add	r3, r2
 8000e06:	33a8      	adds	r3, #168	; 0xa8
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	440b      	add	r3, r1
 8000e0c:	785b      	ldrb	r3, [r3, #1]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d113      	bne.n	8000e3a <app_dmx_preset_process+0x12a>
						myPresets[i].presetTransitionStatus[j].transStep = app_dmx_preset_cfg_TRANS_STEP_EXE;
 8000e12:	4936      	ldr	r1, [pc, #216]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	22bc      	movs	r2, #188	; 0xbc
 8000e18:	fb02 f203 	mul.w	r2, r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4413      	add	r3, r2
 8000e20:	33a8      	adds	r3, #168	; 0xa8
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	440b      	add	r3, r1
 8000e26:	2201      	movs	r2, #1
 8000e28:	705a      	strb	r2, [r3, #1]
						performNextTransitionStep(self, i, j);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	4619      	mov	r1, r3
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 f92b 	bl	8001090 <performNextTransitionStep>
			for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	2b13      	cmp	r3, #19
 8000e44:	dd9d      	ble.n	8000d82 <app_dmx_preset_process+0x72>
					}
				}
			}
			if(myPresets[i].transitionDoneCnt >= myPresets[i].transitionEnableSize){	/*All transitions are performed*/
 8000e46:	4a29      	ldr	r2, [pc, #164]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000e4e:	fb01 f303 	mul.w	r3, r1, r3
 8000e52:	4413      	add	r3, r2
 8000e54:	3308      	adds	r3, #8
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4924      	ldr	r1, [pc, #144]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8000e60:	fb00 f303 	mul.w	r3, r0, r3
 8000e64:	440b      	add	r3, r1
 8000e66:	330c      	adds	r3, #12
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d32a      	bcc.n	8000ec4 <app_dmx_preset_process+0x1b4>
				myPresets[i].transitionDoneCnt = 0;
 8000e6e:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000e76:	fb01 f303 	mul.w	r3, r1, r3
 8000e7a:	4413      	add	r3, r2
 8000e7c:	3308      	adds	r3, #8
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
				myPresets[i].trigger = false;
 8000e82:	4a1a      	ldr	r2, [pc, #104]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000e8a:	fb01 f303 	mul.w	r3, r1, r3
 8000e8e:	4413      	add	r3, r2
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
				myPresets[i].relTime_ms = 0;
 8000e94:	4a15      	ldr	r2, [pc, #84]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000e9c:	fb01 f303 	mul.w	r3, r1, r3
 8000ea0:	4413      	add	r3, r2
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
				memset(myPresets[i].presetTransitionStatus, 0, sizeof(myPresets[i].presetTransitionStatus));
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8000eae:	fb02 f303 	mul.w	r3, r2, r3
 8000eb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000eb6:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000eb8:	4413      	add	r3, r2
 8000eba:	2228      	movs	r2, #40	; 0x28
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f00b f895 	bl	800bfee <memset>
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	f77f af37 	ble.w	8000d40 <app_dmx_preset_process+0x30>
			}
		}
	}
	/*End of everything you want to do*/
	cyclicFlag = false;
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <app_dmx_preset_process+0x1d8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	e002      	b.n	8000ee0 <app_dmx_preset_process+0x1d0>
	if(!self->enable) return;
 8000eda:	bf00      	nop
 8000edc:	e000      	b.n	8000ee0 <app_dmx_preset_process+0x1d0>
	if(!cyclicFlag) return;
 8000ede:	bf00      	nop
}
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd90      	pop	{r4, r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000fbb 	.word	0x20000fbb
 8000eec:	20000000 	.word	0x20000000

08000ef0 <app_dmx_preset_cyclic1ms>:

void app_dmx_preset_cyclic1ms(eal_task_Task *self, bool stat){
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <app_dmx_preset_cyclic1ms+0x20>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000fbb 	.word	0x20000fbb

08000f14 <app_dmx_preset_receiveMsg>:

void app_dmx_preset_receiveMsg(eal_task_Task *self, msg_Message *message){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	if(message->type == app_cfg_DMX_PRESET_MSG){
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	791b      	ldrb	r3, [r3, #4]
 8000f22:	2b50      	cmp	r3, #80	; 0x50
 8000f24:	f040 80ad 	bne.w	8001082 <app_dmx_preset_receiveMsg+0x16e>
		/*Action parsing*/
		if(msg_isAction(message)){
 8000f28:	6838      	ldr	r0, [r7, #0]
 8000f2a:	f007 f9a7 	bl	800827c <msg_isAction>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 80a6 	beq.w	8001082 <app_dmx_preset_receiveMsg+0x16e>
			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f3e:	83fb      	strh	r3, [r7, #30]
			if(APP_CFG_IS_INDEX_IN_RANGE(idx, app_cfg_dmx_preset_TRIGGER_PRESET_OFFSET_IDX, app_cfg_dmx_preset_TRIGGER_PRESET4_IDX+1)){
 8000f40:	8bfb      	ldrh	r3, [r7, #30]
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	f200 809d 	bhi.w	8001082 <app_dmx_preset_receiveMsg+0x16e>
				if((message->value == app_cfg_dmx_preset_TRIGGER_ENABLE) && (myPresets[idx].trigger == false)) {	/*Can be triggered only once*/
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f4e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d151      	bne.n	8000ffa <app_dmx_preset_receiveMsg+0xe6>
 8000f56:	8bfb      	ldrh	r3, [r7, #30]
 8000f58:	4a4c      	ldr	r2, [pc, #304]	; (800108c <app_dmx_preset_receiveMsg+0x178>)
 8000f5a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000f5e:	fb01 f303 	mul.w	r3, r1, r3
 8000f62:	4413      	add	r3, r2
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	f083 0301 	eor.w	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d044      	beq.n	8000ffa <app_dmx_preset_receiveMsg+0xe6>
					myPresets[idx].trigger = true;
 8000f70:	8bfb      	ldrh	r3, [r7, #30]
 8000f72:	4a46      	ldr	r2, [pc, #280]	; (800108c <app_dmx_preset_receiveMsg+0x178>)
 8000f74:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000f78:	fb01 f303 	mul.w	r3, r1, r3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
					myPresets[idx].relTime_ms = 0;
 8000f82:	8bfb      	ldrh	r3, [r7, #30]
 8000f84:	4a41      	ldr	r2, [pc, #260]	; (800108c <app_dmx_preset_receiveMsg+0x178>)
 8000f86:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000f8a:	fb01 f303 	mul.w	r3, r1, r3
 8000f8e:	4413      	add	r3, r2
 8000f90:	3304      	adds	r3, #4
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
					myPresets[idx].transitionDoneCnt = 0;
 8000f96:	8bfb      	ldrh	r3, [r7, #30]
 8000f98:	4a3c      	ldr	r2, [pc, #240]	; (800108c <app_dmx_preset_receiveMsg+0x178>)
 8000f9a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000f9e:	fb01 f303 	mul.w	r3, r1, r3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	3308      	adds	r3, #8
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
					memset(myPresets[idx].presetTransitionStatus, 0, sizeof(myPresets[idx].presetTransitionStatus));
 8000faa:	8bfb      	ldrh	r3, [r7, #30]
 8000fac:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
 8000fb4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000fb8:	4a34      	ldr	r2, [pc, #208]	; (800108c <app_dmx_preset_receiveMsg+0x178>)
 8000fba:	4413      	add	r3, r2
 8000fbc:	2228      	movs	r2, #40	; 0x28
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f00b f814 	bl	800bfee <memset>
					if(self->sendMsg != NULL){
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d059      	beq.n	8001082 <app_dmx_preset_receiveMsg+0x16e>
						msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_EVENT(idx), app_cfg_dmx_preset_TRIGGER_ENABLE, 0, 0);
 8000fce:	8bfb      	ldrh	r3, [r7, #30]
 8000fd0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	82bb      	strh	r3, [r7, #20]
 8000fd8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000fdc:	82fb      	strh	r3, [r7, #22]
 8000fde:	2350      	movs	r3, #80	; 0x50
 8000fe0:	763b      	strb	r3, [r7, #24]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	767b      	strb	r3, [r7, #25]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	837b      	strh	r3, [r7, #26]
						self->sendMsg(self, &newMessage);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f107 0214 	add.w	r2, r7, #20
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	4798      	blx	r3
					if(self->sendMsg != NULL){
 8000ff8:	e043      	b.n	8001082 <app_dmx_preset_receiveMsg+0x16e>
					}
				}else{
					myPresets[idx].trigger = false;
 8000ffa:	8bfb      	ldrh	r3, [r7, #30]
 8000ffc:	4a23      	ldr	r2, [pc, #140]	; (800108c <app_dmx_preset_receiveMsg+0x178>)
 8000ffe:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8001002:	fb01 f303 	mul.w	r3, r1, r3
 8001006:	4413      	add	r3, r2
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
					myPresets[idx].relTime_ms = 0;
 800100c:	8bfb      	ldrh	r3, [r7, #30]
 800100e:	4a1f      	ldr	r2, [pc, #124]	; (800108c <app_dmx_preset_receiveMsg+0x178>)
 8001010:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8001014:	fb01 f303 	mul.w	r3, r1, r3
 8001018:	4413      	add	r3, r2
 800101a:	3304      	adds	r3, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
					myPresets[idx].transitionDoneCnt = 0;
 8001020:	8bfb      	ldrh	r3, [r7, #30]
 8001022:	4a1a      	ldr	r2, [pc, #104]	; (800108c <app_dmx_preset_receiveMsg+0x178>)
 8001024:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8001028:	fb01 f303 	mul.w	r3, r1, r3
 800102c:	4413      	add	r3, r2
 800102e:	3308      	adds	r3, #8
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
					memset(myPresets[idx].presetTransitionStatus, 0, sizeof(myPresets[idx].presetTransitionStatus));
 8001034:	8bfb      	ldrh	r3, [r7, #30]
 8001036:	f44f 72bc 	mov.w	r2, #376	; 0x178
 800103a:	fb02 f303 	mul.w	r3, r2, r3
 800103e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <app_dmx_preset_receiveMsg+0x178>)
 8001044:	4413      	add	r3, r2
 8001046:	2228      	movs	r2, #40	; 0x28
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f00a ffcf 	bl	800bfee <memset>
					if(self->sendMsg != NULL){
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d014      	beq.n	8001082 <app_dmx_preset_receiveMsg+0x16e>
						msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_EVENT(idx), app_cfg_dmx_preset_TRIGGER_DISABLE, 0, 0);
 8001058:	8bfb      	ldrh	r3, [r7, #30]
 800105a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800105e:	b29b      	uxth	r3, r3
 8001060:	81bb      	strh	r3, [r7, #12]
 8001062:	2300      	movs	r3, #0
 8001064:	81fb      	strh	r3, [r7, #14]
 8001066:	2350      	movs	r3, #80	; 0x50
 8001068:	743b      	strb	r3, [r7, #16]
 800106a:	2300      	movs	r3, #0
 800106c:	747b      	strb	r3, [r7, #17]
 800106e:	2300      	movs	r3, #0
 8001070:	827b      	strh	r3, [r7, #18]
						self->sendMsg(self, &newMessage);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f107 020c 	add.w	r2, r7, #12
 800107a:	4611      	mov	r1, r2
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	4798      	blx	r3
		/*Event parsing*/
		}else{

		}
	}
}
 8001080:	e7ff      	b.n	8001082 <app_dmx_preset_receiveMsg+0x16e>
 8001082:	bf00      	nop
 8001084:	3720      	adds	r7, #32
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000000 	.word	0x20000000

08001090 <performNextTransitionStep>:

/*Helper*/
static void performNextTransitionStep(eal_task_Task *self, uint8_t preset, uint8_t transition){
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b08b      	sub	sp, #44	; 0x2c
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	460b      	mov	r3, r1
 800109a:	72fb      	strb	r3, [r7, #11]
 800109c:	4613      	mov	r3, r2
 800109e:	72bb      	strb	r3, [r7, #10]
	float actualTransitionTime = (float)(myPresets[preset].relTime_ms - myPresets[preset].presetTransitionSettings[transition].transDelay_ms);
 80010a0:	7afb      	ldrb	r3, [r7, #11]
 80010a2:	4aa5      	ldr	r2, [pc, #660]	; (8001338 <performNextTransitionStep+0x2a8>)
 80010a4:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80010a8:	fb01 f303 	mul.w	r3, r1, r3
 80010ac:	4413      	add	r3, r2
 80010ae:	3304      	adds	r3, #4
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	7afb      	ldrb	r3, [r7, #11]
 80010b4:	7ab9      	ldrb	r1, [r7, #10]
 80010b6:	48a0      	ldr	r0, [pc, #640]	; (8001338 <performNextTransitionStep+0x2a8>)
 80010b8:	0109      	lsls	r1, r1, #4
 80010ba:	f44f 74bc 	mov.w	r4, #376	; 0x178
 80010be:	fb04 f303 	mul.w	r3, r4, r3
 80010c2:	440b      	add	r3, r1
 80010c4:	4403      	add	r3, r0
 80010c6:	3318      	adds	r3, #24
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	ee07 3a90 	vmov	s15, r3
 80010d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d4:	edc7 7a08 	vstr	s15, [r7, #32]
	uint16_t newVal = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(myPresets[preset].presetTransitionSettings[transition].transTime_ms == 0){
 80010dc:	7afb      	ldrb	r3, [r7, #11]
 80010de:	7aba      	ldrb	r2, [r7, #10]
 80010e0:	4995      	ldr	r1, [pc, #596]	; (8001338 <performNextTransitionStep+0x2a8>)
 80010e2:	3201      	adds	r2, #1
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	f44f 70bc 	mov.w	r0, #376	; 0x178
 80010ea:	fb00 f303 	mul.w	r3, r0, r3
 80010ee:	4413      	add	r3, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	3304      	adds	r3, #4
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d12c      	bne.n	8001154 <performNextTransitionStep+0xc4>
		newVal = myPresets[preset].presetTransitionSettings[transition].dmxEndVal;
 80010fa:	7afb      	ldrb	r3, [r7, #11]
 80010fc:	7aba      	ldrb	r2, [r7, #10]
 80010fe:	498e      	ldr	r1, [pc, #568]	; (8001338 <performNextTransitionStep+0x2a8>)
 8001100:	3201      	adds	r2, #1
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8001108:	fb00 f303 	mul.w	r3, r0, r3
 800110c:	4413      	add	r3, r2
 800110e:	440b      	add	r3, r1
 8001110:	3303      	adds	r3, #3
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	84fb      	strh	r3, [r7, #38]	; 0x26
		++myPresets[preset].transitionDoneCnt;
 8001116:	7afb      	ldrb	r3, [r7, #11]
 8001118:	4987      	ldr	r1, [pc, #540]	; (8001338 <performNextTransitionStep+0x2a8>)
 800111a:	f44f 72bc 	mov.w	r2, #376	; 0x178
 800111e:	fb02 f203 	mul.w	r2, r2, r3
 8001122:	440a      	add	r2, r1
 8001124:	3208      	adds	r2, #8
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	3201      	adds	r2, #1
 800112a:	4983      	ldr	r1, [pc, #524]	; (8001338 <performNextTransitionStep+0x2a8>)
 800112c:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8001130:	fb00 f303 	mul.w	r3, r0, r3
 8001134:	440b      	add	r3, r1
 8001136:	3308      	adds	r3, #8
 8001138:	601a      	str	r2, [r3, #0]
		myPresets[preset].presetTransitionStatus[transition].transStep = app_dmx_preset_cfg_TRANS_STEP_DONE;
 800113a:	7afa      	ldrb	r2, [r7, #11]
 800113c:	7abb      	ldrb	r3, [r7, #10]
 800113e:	497e      	ldr	r1, [pc, #504]	; (8001338 <performNextTransitionStep+0x2a8>)
 8001140:	20bc      	movs	r0, #188	; 0xbc
 8001142:	fb00 f202 	mul.w	r2, r0, r2
 8001146:	4413      	add	r3, r2
 8001148:	33a8      	adds	r3, #168	; 0xa8
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	440b      	add	r3, r1
 800114e:	2202      	movs	r2, #2
 8001150:	705a      	strb	r2, [r3, #1]
 8001152:	e098      	b.n	8001286 <performNextTransitionStep+0x1f6>
	}else{
		//TODO: Perform different ramps
		float diff = (float)((float)myPresets[preset].presetTransitionSettings[transition].dmxEndVal - (float)myPresets[preset].presetTransitionSettings[transition].dmxStartVal);
 8001154:	7afb      	ldrb	r3, [r7, #11]
 8001156:	7aba      	ldrb	r2, [r7, #10]
 8001158:	4977      	ldr	r1, [pc, #476]	; (8001338 <performNextTransitionStep+0x2a8>)
 800115a:	3201      	adds	r2, #1
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8001162:	fb00 f303 	mul.w	r3, r0, r3
 8001166:	4413      	add	r3, r2
 8001168:	440b      	add	r3, r1
 800116a:	3303      	adds	r3, #3
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	7aba      	ldrb	r2, [r7, #10]
 800117a:	496f      	ldr	r1, [pc, #444]	; (8001338 <performNextTransitionStep+0x2a8>)
 800117c:	3201      	adds	r2, #1
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8001184:	fb00 f303 	mul.w	r3, r0, r3
 8001188:	4413      	add	r3, r2
 800118a:	440b      	add	r3, r1
 800118c:	3302      	adds	r3, #2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800119c:	edc7 7a07 	vstr	s15, [r7, #28]
		float actualVal = (diff/((float)myPresets[preset].presetTransitionSettings[transition].transTime_ms)*actualTransitionTime) + (float)myPresets[preset].presetTransitionSettings[transition].dmxStartVal;
 80011a0:	7afb      	ldrb	r3, [r7, #11]
 80011a2:	7aba      	ldrb	r2, [r7, #10]
 80011a4:	4964      	ldr	r1, [pc, #400]	; (8001338 <performNextTransitionStep+0x2a8>)
 80011a6:	3201      	adds	r2, #1
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	f44f 70bc 	mov.w	r0, #376	; 0x178
 80011ae:	fb00 f303 	mul.w	r3, r0, r3
 80011b2:	4413      	add	r3, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	3304      	adds	r3, #4
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80011c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80011ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d2:	7afb      	ldrb	r3, [r7, #11]
 80011d4:	7aba      	ldrb	r2, [r7, #10]
 80011d6:	4958      	ldr	r1, [pc, #352]	; (8001338 <performNextTransitionStep+0x2a8>)
 80011d8:	3201      	adds	r2, #1
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	f44f 70bc 	mov.w	r0, #376	; 0x178
 80011e0:	fb00 f303 	mul.w	r3, r0, r3
 80011e4:	4413      	add	r3, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	3302      	adds	r3, #2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f8:	edc7 7a06 	vstr	s15, [r7, #24]
		newVal = (uint16_t)actualVal;
 80011fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001204:	edc7 7a01 	vstr	s15, [r7, #4]
 8001208:	88bb      	ldrh	r3, [r7, #4]
 800120a:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(newVal >= myPresets[preset].presetTransitionSettings[transition].dmxEndVal){
 800120c:	7afb      	ldrb	r3, [r7, #11]
 800120e:	7aba      	ldrb	r2, [r7, #10]
 8001210:	4949      	ldr	r1, [pc, #292]	; (8001338 <performNextTransitionStep+0x2a8>)
 8001212:	3201      	adds	r2, #1
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	f44f 70bc 	mov.w	r0, #376	; 0x178
 800121a:	fb00 f303 	mul.w	r3, r0, r3
 800121e:	4413      	add	r3, r2
 8001220:	440b      	add	r3, r1
 8001222:	3303      	adds	r3, #3
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800122a:	429a      	cmp	r2, r3
 800122c:	d32b      	bcc.n	8001286 <performNextTransitionStep+0x1f6>
			newVal = myPresets[preset].presetTransitionSettings[transition].dmxEndVal;
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	7aba      	ldrb	r2, [r7, #10]
 8001232:	4941      	ldr	r1, [pc, #260]	; (8001338 <performNextTransitionStep+0x2a8>)
 8001234:	3201      	adds	r2, #1
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	f44f 70bc 	mov.w	r0, #376	; 0x178
 800123c:	fb00 f303 	mul.w	r3, r0, r3
 8001240:	4413      	add	r3, r2
 8001242:	440b      	add	r3, r1
 8001244:	3303      	adds	r3, #3
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	84fb      	strh	r3, [r7, #38]	; 0x26
			++myPresets[preset].transitionDoneCnt;
 800124a:	7afb      	ldrb	r3, [r7, #11]
 800124c:	493a      	ldr	r1, [pc, #232]	; (8001338 <performNextTransitionStep+0x2a8>)
 800124e:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8001252:	fb02 f203 	mul.w	r2, r2, r3
 8001256:	440a      	add	r2, r1
 8001258:	3208      	adds	r2, #8
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	3201      	adds	r2, #1
 800125e:	4936      	ldr	r1, [pc, #216]	; (8001338 <performNextTransitionStep+0x2a8>)
 8001260:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8001264:	fb00 f303 	mul.w	r3, r0, r3
 8001268:	440b      	add	r3, r1
 800126a:	3308      	adds	r3, #8
 800126c:	601a      	str	r2, [r3, #0]
			myPresets[preset].presetTransitionStatus[transition].transStep = app_dmx_preset_cfg_TRANS_STEP_DONE;
 800126e:	7afa      	ldrb	r2, [r7, #11]
 8001270:	7abb      	ldrb	r3, [r7, #10]
 8001272:	4931      	ldr	r1, [pc, #196]	; (8001338 <performNextTransitionStep+0x2a8>)
 8001274:	20bc      	movs	r0, #188	; 0xbc
 8001276:	fb00 f202 	mul.w	r2, r0, r2
 800127a:	4413      	add	r3, r2
 800127c:	33a8      	adds	r3, #168	; 0xa8
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	440b      	add	r3, r1
 8001282:	2202      	movs	r2, #2
 8001284:	705a      	strb	r2, [r3, #1]
		}
	}
	//If the if request is enabled 0 values can't be send because the comparison will be never true
//	if(newVal != myPresets[preset].presetTransitionStatus[transition].actualVal) {
		myPresets[preset].presetTransitionStatus[transition].actualVal = newVal;
 8001286:	7afa      	ldrb	r2, [r7, #11]
 8001288:	7abb      	ldrb	r3, [r7, #10]
 800128a:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800128c:	b2cc      	uxtb	r4, r1
 800128e:	492a      	ldr	r1, [pc, #168]	; (8001338 <performNextTransitionStep+0x2a8>)
 8001290:	20bc      	movs	r0, #188	; 0xbc
 8001292:	fb00 f202 	mul.w	r2, r0, r2
 8001296:	4413      	add	r3, r2
 8001298:	33a8      	adds	r3, #168	; 0xa8
 800129a:	4622      	mov	r2, r4
 800129c:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
		if(self->sendMsg != NULL){
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d02a      	beq.n	80012fe <performNextTransitionStep+0x26e>
			msg_Message newMessage = msg_LITERAL(app_cfg_DMX_MSG, msg_ACTION(myPresets[preset].presetTransitionSettings[transition].dmxCh), myPresets[preset].presetTransitionStatus[transition].actualVal, 0, 0);
 80012a8:	7afb      	ldrb	r3, [r7, #11]
 80012aa:	7aba      	ldrb	r2, [r7, #10]
 80012ac:	4922      	ldr	r1, [pc, #136]	; (8001338 <performNextTransitionStep+0x2a8>)
 80012ae:	3201      	adds	r2, #1
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	f44f 70bc 	mov.w	r0, #376	; 0x178
 80012b6:	fb00 f303 	mul.w	r3, r0, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	440b      	add	r3, r1
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80012c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	823b      	strh	r3, [r7, #16]
 80012cc:	7afa      	ldrb	r2, [r7, #11]
 80012ce:	7abb      	ldrb	r3, [r7, #10]
 80012d0:	4919      	ldr	r1, [pc, #100]	; (8001338 <performNextTransitionStep+0x2a8>)
 80012d2:	20bc      	movs	r0, #188	; 0xbc
 80012d4:	fb00 f202 	mul.w	r2, r0, r2
 80012d8:	4413      	add	r3, r2
 80012da:	33a8      	adds	r3, #168	; 0xa8
 80012dc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	827b      	strh	r3, [r7, #18]
 80012e4:	2344      	movs	r3, #68	; 0x44
 80012e6:	753b      	strb	r3, [r7, #20]
 80012e8:	2300      	movs	r3, #0
 80012ea:	757b      	strb	r3, [r7, #21]
 80012ec:	2300      	movs	r3, #0
 80012ee:	82fb      	strh	r3, [r7, #22]
			self->sendMsg(self, &newMessage);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	f107 0210 	add.w	r2, r7, #16
 80012f8:	4611      	mov	r1, r2
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	4798      	blx	r3
		}
		if(myPresets[preset].presetTransitionStatus[transition].transStep == app_dmx_preset_cfg_TRANS_STEP_DONE) myPresets[preset].presetTransitionStatus[transition].actualVal = 0;
 80012fe:	7afa      	ldrb	r2, [r7, #11]
 8001300:	7abb      	ldrb	r3, [r7, #10]
 8001302:	490d      	ldr	r1, [pc, #52]	; (8001338 <performNextTransitionStep+0x2a8>)
 8001304:	20bc      	movs	r0, #188	; 0xbc
 8001306:	fb00 f202 	mul.w	r2, r0, r2
 800130a:	4413      	add	r3, r2
 800130c:	33a8      	adds	r3, #168	; 0xa8
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	440b      	add	r3, r1
 8001312:	785b      	ldrb	r3, [r3, #1]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d10a      	bne.n	800132e <performNextTransitionStep+0x29e>
 8001318:	7afa      	ldrb	r2, [r7, #11]
 800131a:	7abb      	ldrb	r3, [r7, #10]
 800131c:	4906      	ldr	r1, [pc, #24]	; (8001338 <performNextTransitionStep+0x2a8>)
 800131e:	20bc      	movs	r0, #188	; 0xbc
 8001320:	fb00 f202 	mul.w	r2, r0, r2
 8001324:	4413      	add	r3, r2
 8001326:	33a8      	adds	r3, #168	; 0xa8
 8001328:	2200      	movs	r2, #0
 800132a:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
//	}
}
 800132e:	bf00      	nop
 8001330:	372c      	adds	r7, #44	; 0x2c
 8001332:	46bd      	mov	sp, r7
 8001334:	bd90      	pop	{r4, r7, pc}
 8001336:	bf00      	nop
 8001338:	20000000 	.word	0x20000000

0800133c <app_footcontrol_init>:
*******************************************************************************/
static void sendDmxPreset(eal_task_Task *self, app_footcontrol_PresetCfg *preset);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_footcontrol_init(eal_task_Task *self){
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	status = app_footcontrol_ACTIVE;
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <app_footcontrol_init+0x1c>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000fbc 	.word	0x20000fbc

0800135c <app_footcontrol_process>:

void app_footcontrol_process(eal_task_Task *self){
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	f083 0301 	eor.w	r3, r3, #1
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10b      	bne.n	800138a <app_footcontrol_process+0x2e>
	if(!cyclicFlag) return;
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <app_footcontrol_process+0x40>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f083 0301 	eor.w	r3, r3, #1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d105      	bne.n	800138e <app_footcontrol_process+0x32>
	//TODO: logic
	cyclicFlag = false;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <app_footcontrol_process+0x40>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	e002      	b.n	8001390 <app_footcontrol_process+0x34>
	if(!self->enable) return;
 800138a:	bf00      	nop
 800138c:	e000      	b.n	8001390 <app_footcontrol_process+0x34>
	if(!cyclicFlag) return;
 800138e:	bf00      	nop
}
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000fbd 	.word	0x20000fbd

080013a0 <app_footcontrol_receiveMsg>:
void app_footcontrol_cyclic1ms(eal_task_Task *self, bool stat){
	cyclicFlag = true;
	if(internalTimer > 0)--internalTimer;
}

void app_footcontrol_receiveMsg(eal_task_Task *self, msg_Message *message){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	if(status != app_footcontrol_ACTIVE) return;
 80013aa:	4b4c      	ldr	r3, [pc, #304]	; (80014dc <app_footcontrol_receiveMsg+0x13c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f040 808f 	bne.w	80014d2 <app_footcontrol_receiveMsg+0x132>
	/*Button message parsing*/
	if(message->type == app_cfg_BTN_MSG){
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	791b      	ldrb	r3, [r3, #4]
 80013b8:	2b42      	cmp	r3, #66	; 0x42
 80013ba:	f040 808b 	bne.w	80014d4 <app_footcontrol_receiveMsg+0x134>
		/*Action parsing*/
		if(msg_isAction(message)){
 80013be:	6838      	ldr	r0, [r7, #0]
 80013c0:	f006 ff5c 	bl	800827c <msg_isAction>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f040 8084 	bne.w	80014d4 <app_footcontrol_receiveMsg+0x134>
//			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
		}
		/*Event parsing*/
		else{
			uint16_t idx = message->index;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	81fb      	strh	r3, [r7, #14]
			if(myGpios[idx].mode == app_footcontrol_GPIO_INPUT){
 80013d2:	89fa      	ldrh	r2, [r7, #14]
 80013d4:	4942      	ldr	r1, [pc, #264]	; (80014e0 <app_footcontrol_receiveMsg+0x140>)
 80013d6:	4613      	mov	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4413      	add	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	440b      	add	r3, r1
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d176      	bne.n	80014d4 <app_footcontrol_receiveMsg+0x134>
				if((message->value == app_cfg_btn_STAT_RELEASED) && (myGpios[idx].release.presetNr != app_footcontrol_NO_PRESET)) sendDmxPreset(self, &myGpios[idx].release);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d117      	bne.n	8001420 <app_footcontrol_receiveMsg+0x80>
 80013f0:	89fa      	ldrh	r2, [r7, #14]
 80013f2:	493b      	ldr	r1, [pc, #236]	; (80014e0 <app_footcontrol_receiveMsg+0x140>)
 80013f4:	4613      	mov	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4413      	add	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	440b      	add	r3, r1
 80013fe:	3306      	adds	r3, #6
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2bff      	cmp	r3, #255	; 0xff
 8001404:	d00c      	beq.n	8001420 <app_footcontrol_receiveMsg+0x80>
 8001406:	89fa      	ldrh	r2, [r7, #14]
 8001408:	4613      	mov	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	4413      	add	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4a33      	ldr	r2, [pc, #204]	; (80014e0 <app_footcontrol_receiveMsg+0x140>)
 8001412:	4413      	add	r3, r2
 8001414:	3306      	adds	r3, #6
 8001416:	4619      	mov	r1, r3
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f863 	bl	80014e4 <sendDmxPreset>
 800141e:	e059      	b.n	80014d4 <app_footcontrol_receiveMsg+0x134>
				else if((message->value == app_cfg_btn_STAT_PRESSED) && (myGpios[idx].press.presetNr != app_footcontrol_NO_PRESET)) sendDmxPreset(self, &myGpios[idx].press);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d117      	bne.n	800145a <app_footcontrol_receiveMsg+0xba>
 800142a:	89fa      	ldrh	r2, [r7, #14]
 800142c:	492c      	ldr	r1, [pc, #176]	; (80014e0 <app_footcontrol_receiveMsg+0x140>)
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4413      	add	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	440b      	add	r3, r1
 8001438:	3302      	adds	r3, #2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2bff      	cmp	r3, #255	; 0xff
 800143e:	d00c      	beq.n	800145a <app_footcontrol_receiveMsg+0xba>
 8001440:	89fa      	ldrh	r2, [r7, #14]
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4413      	add	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4a25      	ldr	r2, [pc, #148]	; (80014e0 <app_footcontrol_receiveMsg+0x140>)
 800144c:	4413      	add	r3, r2
 800144e:	3302      	adds	r3, #2
 8001450:	4619      	mov	r1, r3
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f846 	bl	80014e4 <sendDmxPreset>
 8001458:	e03c      	b.n	80014d4 <app_footcontrol_receiveMsg+0x134>
				else if((message->value == app_cfg_btn_STAT_HOLD_SHORT) && (myGpios[idx].holdShort.presetNr != app_footcontrol_NO_PRESET)) sendDmxPreset(self, &myGpios[idx].holdShort);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d118      	bne.n	8001496 <app_footcontrol_receiveMsg+0xf6>
 8001464:	89fa      	ldrh	r2, [r7, #14]
 8001466:	491e      	ldr	r1, [pc, #120]	; (80014e0 <app_footcontrol_receiveMsg+0x140>)
 8001468:	4613      	mov	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4413      	add	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	440b      	add	r3, r1
 8001472:	330a      	adds	r3, #10
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2bff      	cmp	r3, #255	; 0xff
 8001478:	d00d      	beq.n	8001496 <app_footcontrol_receiveMsg+0xf6>
 800147a:	89fa      	ldrh	r2, [r7, #14]
 800147c:	4613      	mov	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4413      	add	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	3308      	adds	r3, #8
 8001486:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <app_footcontrol_receiveMsg+0x140>)
 8001488:	4413      	add	r3, r2
 800148a:	3302      	adds	r3, #2
 800148c:	4619      	mov	r1, r3
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f828 	bl	80014e4 <sendDmxPreset>
 8001494:	e01e      	b.n	80014d4 <app_footcontrol_receiveMsg+0x134>
				else if((message->value == app_cfg_btn_STAT_HOLD_LONG) && (myGpios[idx].holdLong.presetNr != app_footcontrol_NO_PRESET)) sendDmxPreset(self, &myGpios[idx].holdLong);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800149c:	2b03      	cmp	r3, #3
 800149e:	d119      	bne.n	80014d4 <app_footcontrol_receiveMsg+0x134>
 80014a0:	89fa      	ldrh	r2, [r7, #14]
 80014a2:	490f      	ldr	r1, [pc, #60]	; (80014e0 <app_footcontrol_receiveMsg+0x140>)
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4413      	add	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	440b      	add	r3, r1
 80014ae:	330e      	adds	r3, #14
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2bff      	cmp	r3, #255	; 0xff
 80014b4:	d00e      	beq.n	80014d4 <app_footcontrol_receiveMsg+0x134>
 80014b6:	89fa      	ldrh	r2, [r7, #14]
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	3308      	adds	r3, #8
 80014c2:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <app_footcontrol_receiveMsg+0x140>)
 80014c4:	4413      	add	r3, r2
 80014c6:	3306      	adds	r3, #6
 80014c8:	4619      	mov	r1, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f80a 	bl	80014e4 <sendDmxPreset>
 80014d0:	e000      	b.n	80014d4 <app_footcontrol_receiveMsg+0x134>
	if(status != app_footcontrol_ACTIVE) return;
 80014d2:	bf00      	nop
			}
		}
	}
}
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000fbc 	.word	0x20000fbc
 80014e0:	200006e4 	.word	0x200006e4

080014e4 <sendDmxPreset>:

/* Helper ----------------------------------------------------------------------*/
static void sendDmxPreset(eal_task_Task *self, app_footcontrol_PresetCfg *preset){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
	if(self->sendMsg == NULL) return;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d01a      	beq.n	800152c <sendDmxPreset+0x48>
	msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_ACTION(preset->presetNr), preset->triggerValue, 0, 0);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001504:	b29b      	uxth	r3, r3
 8001506:	813b      	strh	r3, [r7, #8]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800150e:	817b      	strh	r3, [r7, #10]
 8001510:	2350      	movs	r3, #80	; 0x50
 8001512:	733b      	strb	r3, [r7, #12]
 8001514:	2300      	movs	r3, #0
 8001516:	737b      	strb	r3, [r7, #13]
 8001518:	2300      	movs	r3, #0
 800151a:	81fb      	strh	r3, [r7, #14]
	self->sendMsg(self, &newMessage);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	f107 0208 	add.w	r2, r7, #8
 8001524:	4611      	mov	r1, r2
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	4798      	blx	r3
 800152a:	e000      	b.n	800152e <sendDmxPreset+0x4a>
	if(self->sendMsg == NULL) return;
 800152c:	bf00      	nop
}
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <app_interface_init>:
*******************************************************************************/
static void usbToBluetoothBridge();
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_interface_init(eal_task_Task *self){
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	app_usb_init();
 800153c:	f000 f88e 	bl	800165c <app_usb_init>
	app_usb_rxBufferInit(usbRxData, sizeof(usbRxData));
 8001540:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001544:	480e      	ldr	r0, [pc, #56]	; (8001580 <app_interface_init+0x4c>)
 8001546:	f000 f89d 	bl	8001684 <app_usb_rxBufferInit>
	app_usb_txBufferInit(usbTxData, sizeof(usbTxData));
 800154a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154e:	480d      	ldr	r0, [pc, #52]	; (8001584 <app_interface_init+0x50>)
 8001550:	f000 f8b2 	bl	80016b8 <app_usb_txBufferInit>

	app_uart_bufferInit(&uart4TxBuf, uart4TxData, sizeof(uart4TxData));
 8001554:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001558:	490b      	ldr	r1, [pc, #44]	; (8001588 <app_interface_init+0x54>)
 800155a:	480c      	ldr	r0, [pc, #48]	; (800158c <app_interface_init+0x58>)
 800155c:	f000 f986 	bl	800186c <app_uart_bufferInit>
	app_uart_bufferInit(&uart4RxBuf, uart4RxData, sizeof(uart4RxData));
 8001560:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001564:	490a      	ldr	r1, [pc, #40]	; (8001590 <app_interface_init+0x5c>)
 8001566:	480b      	ldr	r0, [pc, #44]	; (8001594 <app_interface_init+0x60>)
 8001568:	f000 f980 	bl	800186c <app_uart_bufferInit>
	app_uart_enableReceiveInt(huart4.Instance);
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <app_interface_init+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f000 f994 	bl	800189e <app_uart_enableReceiveInt>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20001bc0 	.word	0x20001bc0
 8001584:	200017c0 	.word	0x200017c0
 8001588:	20000fc0 	.word	0x20000fc0
 800158c:	20000740 	.word	0x20000740
 8001590:	200013c0 	.word	0x200013c0
 8001594:	2000074c 	.word	0x2000074c
 8001598:	200026c8 	.word	0x200026c8

0800159c <app_interface_process>:

void app_interface_process(eal_task_Task *self){
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	f083 0301 	eor.w	r3, r3, #1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d105      	bne.n	80015be <app_interface_process+0x22>
//	if(!cyclicFlag) return;
	usbToBluetoothBridge();
 80015b2:	f000 f817 	bl	80015e4 <usbToBluetoothBridge>
	cyclicFlag = false;
 80015b6:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <app_interface_process+0x2c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
 80015bc:	e000      	b.n	80015c0 <app_interface_process+0x24>
	if(!self->enable) return;
 80015be:	bf00      	nop
}
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20001fc0 	.word	0x20001fc0

080015cc <app_interface_receiveMsg>:
void app_interface_cyclic1ms(eal_task_Task *self, bool stat){
	cyclicFlag = true;
	if(internalTimer > 0)--internalTimer;
}

void app_interface_receiveMsg(eal_task_Task *self, msg_Message *message){
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <usbToBluetoothBridge>:

/*Helper --------------------------------------------------------------------*/
static void usbToBluetoothBridge(){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
	char intData;
	if(app_usb_getCharFromRxBuffer(&intData) == ringbuffer_OK) app_uart_writeCharToBuffer(intData, &uart4TxBuf, huart4.Instance);
 80015ea:	1dfb      	adds	r3, r7, #7
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 f8e5 	bl	80017bc <app_usb_getCharFromRxBuffer>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d106      	bne.n	8001606 <usbToBluetoothBridge+0x22>
 80015f8:	79f8      	ldrb	r0, [r7, #7]
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <usbToBluetoothBridge+0x48>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	490b      	ldr	r1, [pc, #44]	; (8001630 <usbToBluetoothBridge+0x4c>)
 8001602:	f000 f96c 	bl	80018de <app_uart_writeCharToBuffer>
	if(app_uart_getCharFromBuffer(&intData, &uart4RxBuf) == ringbuffer_OK) app_usb_writeCharToBuffer(intData);
 8001606:	1dfb      	adds	r3, r7, #7
 8001608:	490a      	ldr	r1, [pc, #40]	; (8001634 <usbToBluetoothBridge+0x50>)
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f957 	bl	80018be <app_uart_getCharFromBuffer>
 8001610:	4603      	mov	r3, r0
 8001612:	2b01      	cmp	r3, #1
 8001614:	d103      	bne.n	800161e <usbToBluetoothBridge+0x3a>
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	4618      	mov	r0, r3
 800161a:	f000 f8f3 	bl	8001804 <app_usb_writeCharToBuffer>
	app_usb_txLoop(); /*Can be called less often*/
 800161e:	f000 f865 	bl	80016ec <app_usb_txLoop>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200026c8 	.word	0x200026c8
 8001630:	20000740 	.word	0x20000740
 8001634:	2000074c 	.word	0x2000074c

08001638 <UART4_IRQHandler>:

/*IRQs ----------------------------------------------------------------------*/
void UART4_IRQHandler(void){
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	app_uart_irqHandler(huart4.Instance, &uart4RxBuf, &uart4TxBuf);
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <UART4_IRQHandler+0x18>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <UART4_IRQHandler+0x1c>)
 8001642:	4905      	ldr	r1, [pc, #20]	; (8001658 <UART4_IRQHandler+0x20>)
 8001644:	4618      	mov	r0, r3
 8001646:	f000 f966 	bl	8001916 <app_uart_irqHandler>
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200026c8 	.word	0x200026c8
 8001654:	20000740 	.word	0x20000740
 8001658:	2000074c 	.word	0x2000074c

0800165c <app_usb_init>:
*******************************************************************************/
void usb_irqRxHandler(char *pData, uint16_t size);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_usb_init(){
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	usb_registerRxCallback(usb_irqRxHandler);
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <app_usb_init+0x1c>)
 8001662:	f009 fff5 	bl	800b650 <usb_registerRxCallback>
	linkStatus = app_usb_LINK_DOWN;
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <app_usb_init+0x20>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
	app_usb_timer = 0;
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <app_usb_init+0x24>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	0800182d 	.word	0x0800182d
 800167c:	20001fdc 	.word	0x20001fdc
 8001680:	20001fe0 	.word	0x20001fe0

08001684 <app_usb_rxBufferInit>:

void app_usb_rxBufferInit(char *data, uint16_t size){
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
	app_usb_rxBuf.in = 0;
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <app_usb_rxBufferInit+0x30>)
 8001692:	2200      	movs	r2, #0
 8001694:	801a      	strh	r2, [r3, #0]
	app_usb_rxBuf.out = 0;
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <app_usb_rxBufferInit+0x30>)
 8001698:	2200      	movs	r2, #0
 800169a:	805a      	strh	r2, [r3, #2]
	app_usb_rxBuf.size = size;
 800169c:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <app_usb_rxBufferInit+0x30>)
 800169e:	887b      	ldrh	r3, [r7, #2]
 80016a0:	8093      	strh	r3, [r2, #4]
	app_usb_rxBuf.data = data;
 80016a2:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <app_usb_rxBufferInit+0x30>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6093      	str	r3, [r2, #8]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	20001fd0 	.word	0x20001fd0

080016b8 <app_usb_txBufferInit>:

void app_usb_txBufferInit(char *data, uint16_t size){
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
	app_usb_txBuf.in = 0;
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <app_usb_txBufferInit+0x30>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	801a      	strh	r2, [r3, #0]
	app_usb_txBuf.out = 0;
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <app_usb_txBufferInit+0x30>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	805a      	strh	r2, [r3, #2]
	app_usb_txBuf.size = size;
 80016d0:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <app_usb_txBufferInit+0x30>)
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	8093      	strh	r3, [r2, #4]
	app_usb_txBuf.data = data;
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <app_usb_txBufferInit+0x30>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6093      	str	r3, [r2, #8]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	20001fc4 	.word	0x20001fc4

080016ec <app_usb_txLoop>:

void app_usb_setLink(usb_app_Link link){
	linkStatus = link;
}
/*Main Loop*/
void app_usb_txLoop(){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
	char usbString[MAX_USB_TX_SIZE] = {0};	//TODO: Check new line
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
	char usbData;
	int size = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
	if(HAL_GPIO_ReadPin(I_USB_VBUS_GPIO_Port, I_USB_VBUS_Pin)) linkStatus = app_usb_LINK_UP;
 8001702:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170a:	f000 fe21 	bl	8002350 <HAL_GPIO_ReadPin>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <app_usb_txLoop+0x30>
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <app_usb_txLoop+0xa4>)
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
 800171a:	e002      	b.n	8001722 <app_usb_txLoop+0x36>
	else linkStatus = app_usb_LINK_DOWN;
 800171c:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <app_usb_txLoop+0xa4>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
	for(size = 0; size < MAX_USB_TX_SIZE; ++size){
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e00f      	b.n	8001748 <app_usb_txLoop+0x5c>
		if(app_usb_getCharFromTxBuffer(&usbData) == ringbuffer_OK){
 8001728:	1cfb      	adds	r3, r7, #3
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f858 	bl	80017e0 <app_usb_getCharFromTxBuffer>
 8001730:	4603      	mov	r3, r0
 8001732:	2b01      	cmp	r3, #1
 8001734:	d10c      	bne.n	8001750 <app_usb_txLoop+0x64>
			usbString[size] = usbData;
 8001736:	78f9      	ldrb	r1, [r7, #3]
 8001738:	1d3a      	adds	r2, r7, #4
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	4413      	add	r3, r2
 800173e:	460a      	mov	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
	for(size = 0; size < MAX_USB_TX_SIZE; ++size){
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2b0f      	cmp	r3, #15
 800174c:	ddec      	ble.n	8001728 <app_usb_txLoop+0x3c>
 800174e:	e000      	b.n	8001752 <app_usb_txLoop+0x66>
		}else break;
 8001750:	bf00      	nop
	}
	if(size > 0) {
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	2b00      	cmp	r3, #0
 8001756:	dd18      	ble.n	800178a <app_usb_txLoop+0x9e>
		if(linkStatus == app_usb_LINK_UP){
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <app_usb_txLoop+0xa4>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d114      	bne.n	800178a <app_usb_txLoop+0x9e>
			app_usb_timer = APP_USB_TIMEOUT;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <app_usb_txLoop+0xa8>)
 8001762:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001766:	601a      	str	r2, [r3, #0]
			while(app_usb_timer){
 8001768:	e009      	b.n	800177e <app_usb_txLoop+0x92>
				if(CDC_Transmit_FS((uint8_t*)usbString, size) == USBD_OK) return;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	b29a      	uxth	r2, r3
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	4611      	mov	r1, r2
 8001772:	4618      	mov	r0, r3
 8001774:	f009 ff46 	bl	800b604 <CDC_Transmit_FS>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d004      	beq.n	8001788 <app_usb_txLoop+0x9c>
			while(app_usb_timer){
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <app_usb_txLoop+0xa8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f1      	bne.n	800176a <app_usb_txLoop+0x7e>
 8001786:	e000      	b.n	800178a <app_usb_txLoop+0x9e>
				if(CDC_Transmit_FS((uint8_t*)usbString, size) == USBD_OK) return;
 8001788:	bf00      	nop
			}
		}
	}
}
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20001fdc 	.word	0x20001fdc
 8001794:	20001fe0 	.word	0x20001fe0

08001798 <app_usb_1ms>:

void app_usb_1ms(){
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
	if(app_usb_timer > 0) --app_usb_timer;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <app_usb_1ms+0x20>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	dd04      	ble.n	80017ae <app_usb_1ms+0x16>
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <app_usb_1ms+0x20>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	4a03      	ldr	r2, [pc, #12]	; (80017b8 <app_usb_1ms+0x20>)
 80017ac:	6013      	str	r3, [r2, #0]
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	20001fe0 	.word	0x20001fe0

080017bc <app_usb_getCharFromRxBuffer>:
uint8_t app_usb_getCharFromRxBuffer(char *data){
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
   uint8_t bufferState = RINGBUFFER_cOut(data, &app_usb_rxBuf);
 80017c4:	4905      	ldr	r1, [pc, #20]	; (80017dc <app_usb_getCharFromRxBuffer+0x20>)
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f006 fda7 	bl	800831a <RINGBUFFER_cOut>
 80017cc:	4603      	mov	r3, r0
 80017ce:	73fb      	strb	r3, [r7, #15]
   if(bufferState == ringbuffer_NO_BUF);//TODO error handling
   return bufferState;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20001fd0 	.word	0x20001fd0

080017e0 <app_usb_getCharFromTxBuffer>:

uint8_t app_usb_getCharFromTxBuffer(char *data){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
   uint8_t bufferState = RINGBUFFER_cOut(data, &app_usb_txBuf);
 80017e8:	4905      	ldr	r1, [pc, #20]	; (8001800 <app_usb_getCharFromTxBuffer+0x20>)
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f006 fd95 	bl	800831a <RINGBUFFER_cOut>
 80017f0:	4603      	mov	r3, r0
 80017f2:	73fb      	strb	r3, [r7, #15]
   if(bufferState == ringbuffer_NO_BUF);//TODO error handling
   return bufferState;
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20001fc4 	.word	0x20001fc4

08001804 <app_usb_writeCharToBuffer>:

uint8_t app_usb_writeCharToBuffer(char data){
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
   uint8_t bufferState = RINGBUFFER_cIn(data, &app_usb_txBuf);
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	4905      	ldr	r1, [pc, #20]	; (8001828 <app_usb_writeCharToBuffer+0x24>)
 8001812:	4618      	mov	r0, r3
 8001814:	f006 fd44 	bl	80082a0 <RINGBUFFER_cIn>
 8001818:	4603      	mov	r3, r0
 800181a:	73fb      	strb	r3, [r7, #15]
   if(bufferState != ringbuffer_OK); 		//TODO: Error Handling
   if(bufferState != ringbuffer_NO_BUF);	//TODO: Error Handling
   return bufferState;
 800181c:	7bfb      	ldrb	r3, [r7, #15]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20001fc4 	.word	0x20001fc4

0800182c <usb_irqRxHandler>:
	return bufferState;
}


/* IRQ Handler*/
void usb_irqRxHandler(char *pData, uint16_t size){
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
	char buffer_state;
	for(uint16_t x = 0; x < size; x++) buffer_state = RINGBUFFER_cIn(pData[x], &app_usb_rxBuf);
 8001838:	2300      	movs	r3, #0
 800183a:	81fb      	strh	r3, [r7, #14]
 800183c:	e00c      	b.n	8001858 <usb_irqRxHandler+0x2c>
 800183e:	89fb      	ldrh	r3, [r7, #14]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	4413      	add	r3, r2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <usb_irqRxHandler+0x3c>)
 8001848:	4618      	mov	r0, r3
 800184a:	f006 fd29 	bl	80082a0 <RINGBUFFER_cIn>
 800184e:	4603      	mov	r3, r0
 8001850:	737b      	strb	r3, [r7, #13]
 8001852:	89fb      	ldrh	r3, [r7, #14]
 8001854:	3301      	adds	r3, #1
 8001856:	81fb      	strh	r3, [r7, #14]
 8001858:	89fa      	ldrh	r2, [r7, #14]
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	429a      	cmp	r2, r3
 800185e:	d3ee      	bcc.n	800183e <usb_irqRxHandler+0x12>
	if(buffer_state != ringbuffer_OK); //TODO: Error Handling
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20001fd0 	.word	0x20001fd0

0800186c <app_uart_bufferInit>:
 */
#include "app_uart.h"
#include "string.h"


void app_uart_bufferInit(stRingBuf *buf, char *data, uint16_t size){
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	4613      	mov	r3, r2
 8001878:	80fb      	strh	r3, [r7, #6]
	buf->in = 0;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	801a      	strh	r2, [r3, #0]
	buf->out = 0;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	805a      	strh	r2, [r3, #2]
	buf->size = size;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	88fa      	ldrh	r2, [r7, #6]
 800188a:	809a      	strh	r2, [r3, #4]
	buf->data = data;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	609a      	str	r2, [r3, #8]
}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <app_uart_enableReceiveInt>:
void app_uart_enableReceiveInt(USART_TypeDef *uartHandler){
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
	uartHandler->CR1 |= USART_CR1_RXNEIE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f043 0220 	orr.w	r2, r3, #32
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	601a      	str	r2, [r3, #0]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <app_uart_getCharFromBuffer>:
uint8_t app_uart_getCharFromBuffer(char *data, stRingBuf *buf){
 80018be:	b580      	push	{r7, lr}
 80018c0:	b084      	sub	sp, #16
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
   uint8_t bufferState = RINGBUFFER_cOut(data, buf);
 80018c8:	6839      	ldr	r1, [r7, #0]
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f006 fd25 	bl	800831a <RINGBUFFER_cOut>
 80018d0:	4603      	mov	r3, r0
 80018d2:	73fb      	strb	r3, [r7, #15]
   if(bufferState == ringbuffer_NO_BUF){
	   //TODO error handling
   }
   return bufferState;
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <app_uart_writeCharToBuffer>:
uint8_t app_uart_writeCharToBuffer(char data, stRingBuf *buf, USART_TypeDef *uartHandler){
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	73fb      	strb	r3, [r7, #15]
   uint8_t bufferState = RINGBUFFER_cIn(data, buf);
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	68b9      	ldr	r1, [r7, #8]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f006 fcd5 	bl	80082a0 <RINGBUFFER_cIn>
 80018f6:	4603      	mov	r3, r0
 80018f8:	75fb      	strb	r3, [r7, #23]
   if(bufferState != ringbuffer_OK){
	   //TODO error handling
   }
   if(bufferState != ringbuffer_NO_BUF) uartHandler->CR1 |= USART_CR1_TXEIE;
 80018fa:	7dfb      	ldrb	r3, [r7, #23]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <app_uart_writeCharToBuffer+0x2e>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	601a      	str	r2, [r3, #0]
   return bufferState;
 800190c:	7dfb      	ldrb	r3, [r7, #23]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <app_uart_irqHandler>:
	}
	return bufferState;
}


void app_uart_irqHandler(USART_TypeDef *uartHandler, stRingBuf *rxBuf, stRingBuf *txBuf){
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
		volatile uint16_t ISR;
		char bufferState;

		ISR = uartHandler->ISR;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	b29b      	uxth	r3, r3
 8001928:	82bb      	strh	r3, [r7, #20]
		if(ISR & USART_ISR_RXNE){ //Bit 5 = Read Data Register Not Empty in SR
 800192a:	8abb      	ldrh	r3, [r7, #20]
 800192c:	b29b      	uxth	r3, r3
 800192e:	f003 0320 	and.w	r3, r3, #32
 8001932:	2b00      	cmp	r3, #0
 8001934:	d009      	beq.n	800194a <app_uart_irqHandler+0x34>
			bufferState = RINGBUFFER_cIn(uartHandler->RDR, rxBuf);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800193a:	b29b      	uxth	r3, r3
 800193c:	b2db      	uxtb	r3, r3
 800193e:	68b9      	ldr	r1, [r7, #8]
 8001940:	4618      	mov	r0, r3
 8001942:	f006 fcad 	bl	80082a0 <RINGBUFFER_cIn>
 8001946:	4603      	mov	r3, r0
 8001948:	75fb      	strb	r3, [r7, #23]
			if(bufferState != ringbuffer_OK){
				//TODO Error handling
			}
		}
		if(ISR & USART_ISR_TXE){
 800194a:	8abb      	ldrh	r3, [r7, #20]
 800194c:	b29b      	uxth	r3, r3
 800194e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001952:	2b00      	cmp	r3, #0
 8001954:	d01e      	beq.n	8001994 <app_uart_irqHandler+0x7e>
			uartHandler->ISR &= ~USART_ISR_TXE;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	61da      	str	r2, [r3, #28]
			char data;
			bufferState = RINGBUFFER_cOut(&data, txBuf);
 8001962:	f107 0313 	add.w	r3, r7, #19
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	f006 fcd6 	bl	800831a <RINGBUFFER_cOut>
 800196e:	4603      	mov	r3, r0
 8001970:	75fb      	strb	r3, [r7, #23]
			if(bufferState == ringbuffer_EMPTY){
 8001972:	7dfb      	ldrb	r3, [r7, #23]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d106      	bne.n	8001986 <app_uart_irqHandler+0x70>
				uartHandler->CR1 &= ~USART_CR1_TXEIE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	e006      	b.n	8001994 <app_uart_irqHandler+0x7e>
			}else if (bufferState == ringbuffer_NO_BUF){
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <app_uart_irqHandler+0x7e>

			}else{
				uartHandler->TDR = data;
 800198c:	7cfb      	ldrb	r3, [r7, #19]
 800198e:	b29a      	uxth	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	851a      	strh	r2, [r3, #40]	; 0x28
			}
		}
		if(ISR & USART_ISR_ORE){
 8001994:	8abb      	ldrh	r3, [r7, #20]
 8001996:	b29b      	uxth	r3, r3
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <app_uart_irqHandler+0x96>
			uartHandler->ICR |= USART_ICR_ORECF;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	f043 0208 	orr.w	r2, r3, #8
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	621a      	str	r2, [r3, #32]
		}
	}
 80019ac:	bf00      	nop
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <app_main>:
};
/******************************************************************************
* Function Definitions
*******************************************************************************/
#define SOFT_I2C	1
void app_main(){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	msgTask.enable = true;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <app_main+0x44>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
	msgTask.init(&msgTask);
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <app_main+0x44>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	480d      	ldr	r0, [pc, #52]	; (80019f8 <app_main+0x44>)
 80019c4:	4798      	blx	r3
	while (1){
		msgTask.mainLoop(&msgTask);
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <app_main+0x44>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	480b      	ldr	r0, [pc, #44]	; (80019f8 <app_main+0x44>)
 80019cc:	4798      	blx	r3
		btnTask.mainLoop(&btnTask);
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <app_main+0x48>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	480a      	ldr	r0, [pc, #40]	; (80019fc <app_main+0x48>)
 80019d4:	4798      	blx	r3
		footcontrolTask.mainLoop(&footcontrolTask);
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <app_main+0x4c>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	4809      	ldr	r0, [pc, #36]	; (8001a00 <app_main+0x4c>)
 80019dc:	4798      	blx	r3

		dmxTask.mainLoop(&dmxTask);
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <app_main+0x50>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	4808      	ldr	r0, [pc, #32]	; (8001a04 <app_main+0x50>)
 80019e4:	4798      	blx	r3
		dmxPresetTask.mainLoop(&dmxPresetTask);
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <app_main+0x54>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	4807      	ldr	r0, [pc, #28]	; (8001a08 <app_main+0x54>)
 80019ec:	4798      	blx	r3
		interfaceTask.mainLoop(&interfaceTask);
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <app_main+0x58>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	4806      	ldr	r0, [pc, #24]	; (8001a0c <app_main+0x58>)
 80019f4:	4798      	blx	r3
		msgTask.mainLoop(&msgTask);
 80019f6:	e7e6      	b.n	80019c6 <app_main+0x12>
 80019f8:	20000768 	.word	0x20000768
 80019fc:	200007b0 	.word	0x200007b0
 8001a00:	200007c8 	.word	0x200007c8
 8001a04:	20000798 	.word	0x20000798
 8001a08:	20000780 	.word	0x20000780
 8001a0c:	200007e0 	.word	0x200007e0

08001a10 <app_1ms>:
	 }
}

void app_1ms(){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	static uint16_t timer100ms = 0;
	static uint16_t timer500ms = 0;
	app_usb_1ms();
 8001a14:	f7ff fec0 	bl	8001798 <app_usb_1ms>
	dmx_1ms(&dmx1Out);
 8001a18:	481d      	ldr	r0, [pc, #116]	; (8001a90 <app_1ms+0x80>)
 8001a1a:	f006 f89f 	bl	8007b5c <dmx_1ms>
	if(dmxTask.timer) dmxTask.timer(&dmxTask, true);
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <app_1ms+0x84>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d004      	beq.n	8001a30 <app_1ms+0x20>
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <app_1ms+0x84>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	4819      	ldr	r0, [pc, #100]	; (8001a94 <app_1ms+0x84>)
 8001a2e:	4798      	blx	r3
	if(dmxPresetTask.timer) dmxPresetTask.timer(&dmxPresetTask, true);
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <app_1ms+0x88>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d004      	beq.n	8001a42 <app_1ms+0x32>
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <app_1ms+0x88>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	4816      	ldr	r0, [pc, #88]	; (8001a98 <app_1ms+0x88>)
 8001a40:	4798      	blx	r3
	if(btnTask.timer) btnTask.timer(&btnTask, true);
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <app_1ms+0x8c>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <app_1ms+0x44>
 8001a4a:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <app_1ms+0x8c>)
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	2101      	movs	r1, #1
 8001a50:	4812      	ldr	r0, [pc, #72]	; (8001a9c <app_1ms+0x8c>)
 8001a52:	4798      	blx	r3
	if(++timer100ms >= 100){
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <app_1ms+0x90>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <app_1ms+0x90>)
 8001a5e:	801a      	strh	r2, [r3, #0]
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <app_1ms+0x90>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	2b63      	cmp	r3, #99	; 0x63
 8001a66:	d902      	bls.n	8001a6e <app_1ms+0x5e>
		timer100ms = 0;
 8001a68:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <app_1ms+0x90>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	801a      	strh	r2, [r3, #0]
	}
	if(++timer500ms >= 500){
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <app_1ms+0x94>)
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	3301      	adds	r3, #1
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <app_1ms+0x94>)
 8001a78:	801a      	strh	r2, [r3, #0]
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <app_1ms+0x94>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a82:	d302      	bcc.n	8001a8a <app_1ms+0x7a>
		timer500ms = 0;
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <app_1ms+0x94>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	801a      	strh	r2, [r3, #0]
	}

}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200005e0 	.word	0x200005e0
 8001a94:	20000798 	.word	0x20000798
 8001a98:	20000780 	.word	0x20000780
 8001a9c:	200007b0 	.word	0x200007b0
 8001aa0:	200021e6 	.word	0x200021e6
 8001aa4:	200021e8 	.word	0x200021e8

08001aa8 <app_process>:
/* Application Task ------------------------------------------------------------*/
static void app_process(eal_task_Task *self){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	msg_Message buffer = {0};
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
	msg_Message *newMessage = msg_getNext(&buffer, &msgBuf);
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	4908      	ldr	r1, [pc, #32]	; (8001ae0 <app_process+0x38>)
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f006 fb3e 	bl	8008142 <msg_getNext>
 8001ac6:	6178      	str	r0, [r7, #20]
	if(newMessage != NULL){
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d004      	beq.n	8001ad8 <app_process+0x30>
		self->receiveMsg(self, newMessage);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	6979      	ldr	r1, [r7, #20]
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	4798      	blx	r3
	}
}
 8001ad8:	bf00      	nop
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000758 	.word	0x20000758

08001ae4 <app_receiveMsg>:
static void app_receiveMsg(eal_task_Task *self, msg_Message *message){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
	dmxTask.receiveMsg(&dmxTask, message);
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <app_receiveMsg+0x44>)
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	6839      	ldr	r1, [r7, #0]
 8001af4:	480c      	ldr	r0, [pc, #48]	; (8001b28 <app_receiveMsg+0x44>)
 8001af6:	4798      	blx	r3
	dmxPresetTask.receiveMsg(&dmxPresetTask, message);
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <app_receiveMsg+0x48>)
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	6839      	ldr	r1, [r7, #0]
 8001afe:	480b      	ldr	r0, [pc, #44]	; (8001b2c <app_receiveMsg+0x48>)
 8001b00:	4798      	blx	r3
	btnTask.receiveMsg(&btnTask, message);
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <app_receiveMsg+0x4c>)
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	6839      	ldr	r1, [r7, #0]
 8001b08:	4809      	ldr	r0, [pc, #36]	; (8001b30 <app_receiveMsg+0x4c>)
 8001b0a:	4798      	blx	r3
	footcontrolTask.receiveMsg(&footcontrolTask, message);
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <app_receiveMsg+0x50>)
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	6839      	ldr	r1, [r7, #0]
 8001b12:	4808      	ldr	r0, [pc, #32]	; (8001b34 <app_receiveMsg+0x50>)
 8001b14:	4798      	blx	r3
	interfaceTask.receiveMsg(&interfaceTask, message);
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <app_receiveMsg+0x54>)
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	6839      	ldr	r1, [r7, #0]
 8001b1c:	4806      	ldr	r0, [pc, #24]	; (8001b38 <app_receiveMsg+0x54>)
 8001b1e:	4798      	blx	r3
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000798 	.word	0x20000798
 8001b2c:	20000780 	.word	0x20000780
 8001b30:	200007b0 	.word	0x200007b0
 8001b34:	200007c8 	.word	0x200007c8
 8001b38:	200007e0 	.word	0x200007e0

08001b3c <app_init>:

static void app_init(eal_task_Task *self){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	i2c_soft_init(&softI2C2);
 8001b44:	4822      	ldr	r0, [pc, #136]	; (8001bd0 <app_init+0x94>)
 8001b46:	f006 fd3f 	bl	80085c8 <i2c_soft_init>
	eeprom_registerCallback(&eepromDev1, eepromCallback);
 8001b4a:	4922      	ldr	r1, [pc, #136]	; (8001bd4 <app_init+0x98>)
 8001b4c:	4822      	ldr	r0, [pc, #136]	; (8001bd8 <app_init+0x9c>)
 8001b4e:	f006 f9d5 	bl	8007efc <eeprom_registerCallback>
	eeprom_init(&eepromDev1);
 8001b52:	4821      	ldr	r0, [pc, #132]	; (8001bd8 <app_init+0x9c>)
 8001b54:	f006 f9e0 	bl	8007f18 <eeprom_init>
	dmxTask.enable = true;
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <app_init+0xa0>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
	if(dmxTask.init) dmxTask.init(&dmxTask);
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <app_init+0xa0>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <app_init+0x32>
 8001b66:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <app_init+0xa0>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	481c      	ldr	r0, [pc, #112]	; (8001bdc <app_init+0xa0>)
 8001b6c:	4798      	blx	r3
	dmxPresetTask.enable = true;
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <app_init+0xa4>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	701a      	strb	r2, [r3, #0]
	if(dmxPresetTask.init) dmxPresetTask.init(&dmxPresetTask);
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <app_init+0xa4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <app_init+0x48>
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <app_init+0xa4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4817      	ldr	r0, [pc, #92]	; (8001be0 <app_init+0xa4>)
 8001b82:	4798      	blx	r3
	btnTask.enable = true;
 8001b84:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <app_init+0xa8>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
	if(btnTask.init) btnTask.init(&btnTask);
 8001b8a:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <app_init+0xa8>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <app_init+0x5e>
 8001b92:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <app_init+0xa8>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4813      	ldr	r0, [pc, #76]	; (8001be4 <app_init+0xa8>)
 8001b98:	4798      	blx	r3
	footcontrolTask.enable = true;
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <app_init+0xac>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]
	if(footcontrolTask.init) footcontrolTask.init(&footcontrolTask);
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <app_init+0xac>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <app_init+0x74>
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <app_init+0xac>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	480e      	ldr	r0, [pc, #56]	; (8001be8 <app_init+0xac>)
 8001bae:	4798      	blx	r3
	interfaceTask.enable = true;
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <app_init+0xb0>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
	if(interfaceTask.init) interfaceTask.init(&interfaceTask);
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <app_init+0xb0>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <app_init+0x8a>
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <app_init+0xb0>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	480a      	ldr	r0, [pc, #40]	; (8001bec <app_init+0xb0>)
 8001bc4:	4798      	blx	r3

}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200006bc 	.word	0x200006bc
 8001bd4:	08001c59 	.word	0x08001c59
 8001bd8:	20000698 	.word	0x20000698
 8001bdc:	20000798 	.word	0x20000798
 8001be0:	20000780 	.word	0x20000780
 8001be4:	200007b0 	.word	0x200007b0
 8001be8:	200007c8 	.word	0x200007c8
 8001bec:	200007e0 	.word	0x200007e0

08001bf0 <sendMessage>:

/* Messages --------------------------------------------------------------------*/
static void sendMessage(eal_task_Task *self, msg_Message *message){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
	uint8_t msgBufState = 1;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	73fb      	strb	r3, [r7, #15]
	if(msg_isAction(message))msgBufState = msg_writeAction(message, &msgBuf);
 8001bfe:	6838      	ldr	r0, [r7, #0]
 8001c00:	f006 fb3c 	bl	800827c <msg_isAction>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d006      	beq.n	8001c18 <sendMessage+0x28>
 8001c0a:	490c      	ldr	r1, [pc, #48]	; (8001c3c <sendMessage+0x4c>)
 8001c0c:	6838      	ldr	r0, [r7, #0]
 8001c0e:	f006 fa7f 	bl	8008110 <msg_writeAction>
 8001c12:	4603      	mov	r3, r0
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	e005      	b.n	8001c24 <sendMessage+0x34>
	else msgBufState = msg_writeEvent(message, &msgBuf);
 8001c18:	4908      	ldr	r1, [pc, #32]	; (8001c3c <sendMessage+0x4c>)
 8001c1a:	6838      	ldr	r0, [r7, #0]
 8001c1c:	f006 fa61 	bl	80080e2 <msg_writeEvent>
 8001c20:	4603      	mov	r3, r0
 8001c22:	73fb      	strb	r3, [r7, #15]
	if(msgBufState != 1) messageBufferError(msgBufState);
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d003      	beq.n	8001c32 <sendMessage+0x42>
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 f807 	bl	8001c40 <messageBufferError>
}
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000758 	.word	0x20000758

08001c40 <messageBufferError>:
static void messageBufferError(uint8_t state){
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
//	if(state == NO_BUF) USART3_WriteStringToBuffer("ERROR: MSG NO BUF\r\n", 18);
//	else if(state == FULL) USART3_WriteStringToBuffer("ERROR: MSG BUF OVR\r\n", 19);
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <eepromCallback>:

/* Callback's ---------------------------------------------------------------------*/
uint8_t eepromCallback(eeprom_cfg_Config *config){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af02      	add	r7, sp, #8
 8001c5e:	6078      	str	r0, [r7, #4]
	uint8_t state = 1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
	if(config->callbackType == EEPROM_CFG_CALL_TX_START){
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7a9b      	ldrb	r3, [r3, #10]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d115      	bne.n	8001c98 <eepromCallback+0x40>
		if(i2c_soft_mem_write(&softI2C2, config->devAddr, config->memAddr, I2C_MEMADD_SIZE_16BIT, config->txBuffer, config->dataSize) != soft_i2c_RETURN_OK) state = 0;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	4618      	mov	r0, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6952      	ldr	r2, [r2, #20]
 8001c80:	9201      	str	r2, [sp, #4]
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2302      	movs	r3, #2
 8001c86:	4602      	mov	r2, r0
 8001c88:	481c      	ldr	r0, [pc, #112]	; (8001cfc <eepromCallback+0xa4>)
 8001c8a:	f006 fd9d 	bl	80087c8 <i2c_soft_mem_write>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <eepromCallback+0x40>
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]
	}
	if(config->callbackType == EEPROM_CFG_CALL_RX_START){
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7a9b      	ldrb	r3, [r3, #10]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d115      	bne.n	8001ccc <eepromCallback+0x74>
		if(i2c_soft_mem_read(&softI2C2, config->devAddr, config->memAddr, I2C_MEMADD_SIZE_16BIT, config->rxBuffer, config->dataSize) != soft_i2c_RETURN_OK) state = 0;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	4618      	mov	r0, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6952      	ldr	r2, [r2, #20]
 8001cb4:	9201      	str	r2, [sp, #4]
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2302      	movs	r3, #2
 8001cba:	4602      	mov	r2, r0
 8001cbc:	480f      	ldr	r0, [pc, #60]	; (8001cfc <eepromCallback+0xa4>)
 8001cbe:	f006 fcb6 	bl	800862e <i2c_soft_mem_read>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <eepromCallback+0x74>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]
	}
	if(config->callbackType == EEPROM_CFG_CALL_CHECK_TX_STATE){
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7a9b      	ldrb	r3, [r3, #10]
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d10e      	bne.n	8001cf2 <eepromCallback+0x9a>
		if(i2c_soft_write(&softI2C2, config->devAddr, config->rxBuffer, config->dataSize) != soft_i2c_RETURN_OK) state = 0;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1a      	ldr	r2, [r3, #32]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	4806      	ldr	r0, [pc, #24]	; (8001cfc <eepromCallback+0xa4>)
 8001ce4:	f006 fd2b 	bl	800873e <i2c_soft_write>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <eepromCallback+0x9a>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]
	}
	return state;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	200006bc 	.word	0x200006bc

08001d00 <HAL_TIM_PeriodElapsedCallback>:

/* IRQs ---------------------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	if(htim->Instance == dmx1Out.txTimer) dmx_irqTxTimerHandler(&dmx1Out);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d102      	bne.n	8001d1a <HAL_TIM_PeriodElapsedCallback+0x1a>
 8001d14:	4803      	ldr	r0, [pc, #12]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001d16:	f005 ff9b 	bl	8007c50 <dmx_irqTxTimerHandler>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200005e0 	.word	0x200005e0

08001d28 <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  if (__HAL_TIM_GET_FLAG(&htim16, TIM_FLAG_UPDATE) != RESET){
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d107      	bne.n	8001d4a <TIM1_UP_TIM16_IRQHandler+0x22>
	  __HAL_TIM_CLEAR_IT(&htim16, TIM_IT_UPDATE);
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f06f 0201 	mvn.w	r2, #1
 8001d42:	611a      	str	r2, [r3, #16]
	  i2c_soft_timer_us(&softI2C2);
 8001d44:	4803      	ldr	r0, [pc, #12]	; (8001d54 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8001d46:	f006 fc5f 	bl	8008608 <i2c_soft_timer_us>
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20002610 	.word	0x20002610
 8001d54:	200006bc 	.word	0x200006bc

08001d58 <HAL_GPIO_EXTI_Callback>:

bool usbConnected = false;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == I_USB_VBUS_Pin) {
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d68:	d10f      	bne.n	8001d8a <HAL_GPIO_EXTI_Callback+0x32>
		if(HAL_GPIO_ReadPin(I_USB_VBUS_GPIO_Port, I_USB_VBUS_Pin)) usbConnected = true;
 8001d6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d72:	f000 faed 	bl	8002350 <HAL_GPIO_ReadPin>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_EXTI_Callback+0x2c>
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
		else usbConnected = false;
	}
}
 8001d82:	e002      	b.n	8001d8a <HAL_GPIO_EXTI_Callback+0x32>
		else usbConnected = false;
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200021e4 	.word	0x200021e4

08001d98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da2:	2003      	movs	r0, #3
 8001da4:	f000 f918 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001da8:	2000      	movs	r0, #0
 8001daa:	f000 f80d 	bl	8001dc8 <HAL_InitTick>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	71fb      	strb	r3, [r7, #7]
 8001db8:	e001      	b.n	8001dbe <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dba:	f008 fcf9 	bl	800a7b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_InitTick+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <HAL_InitTick+0x44>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	099b      	lsrs	r3, r3, #6
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 f92e 	bl	8002042 <HAL_SYSTICK_Config>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <HAL_InitTick+0x2a>
  {
    status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
 8001df0:	e005      	b.n	8001dfe <HAL_InitTick+0x36>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfa:	f000 f8f8 	bl	8001fee <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000908 	.word	0x20000908
 8001e0c:	10624dd3 	.word	0x10624dd3

08001e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick++;
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <HAL_IncTick+0x18>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	4a03      	ldr	r2, [pc, #12]	; (8001e28 <HAL_IncTick+0x18>)
 8001e1c:	6013      	str	r3, [r2, #0]
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	20002410 	.word	0x20002410

08001e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_GetTick+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20002410 	.word	0x20002410

08001e44 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <NVIC_SetPriorityGrouping+0x44>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e60:	4013      	ands	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e76:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <NVIC_SetPriorityGrouping+0x44>)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	60d3      	str	r3, [r2, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e90:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <NVIC_GetPriorityGrouping+0x18>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	f003 0307 	and.w	r3, r3, #7
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001eb2:	4909      	ldr	r1, [pc, #36]	; (8001ed8 <NVIC_EnableIRQ+0x30>)
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	095b      	lsrs	r3, r3, #5
 8001eba:	79fa      	ldrb	r2, [r7, #7]
 8001ebc:	f002 021f 	and.w	r2, r2, #31
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000e100 	.word	0xe000e100

08001edc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	da0b      	bge.n	8001f08 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef0:	490d      	ldr	r1, [pc, #52]	; (8001f28 <NVIC_SetPriority+0x4c>)
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	3b04      	subs	r3, #4
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	440b      	add	r3, r1
 8001f04:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f06:	e009      	b.n	8001f1c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	4908      	ldr	r1, [pc, #32]	; (8001f2c <NVIC_SetPriority+0x50>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00
 8001f2c:	e000e100 	.word	0xe000e100

08001f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f1c3 0307 	rsb	r3, r3, #7
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	bf28      	it	cs
 8001f4e:	2304      	movcs	r3, #4
 8001f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3304      	adds	r3, #4
 8001f56:	2b06      	cmp	r3, #6
 8001f58:	d902      	bls.n	8001f60 <NVIC_EncodePriority+0x30>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3b03      	subs	r3, #3
 8001f5e:	e000      	b.n	8001f62 <NVIC_EncodePriority+0x32>
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	2201      	movs	r2, #1
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	1e5a      	subs	r2, r3, #1
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	401a      	ands	r2, r3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f76:	2101      	movs	r1, #1
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	1e59      	subs	r1, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
         );
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	; 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa4:	d301      	bcc.n	8001faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00f      	b.n	8001fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <SysTick_Config+0x40>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb2:	210f      	movs	r1, #15
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	f7ff ff90 	bl	8001edc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <SysTick_Config+0x40>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <SysTick_Config+0x40>)
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	e000e010 	.word	0xe000e010

08001fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff2f 	bl	8001e44 <NVIC_SetPriorityGrouping>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002000:	f7ff ff44 	bl	8001e8c <NVIC_GetPriorityGrouping>
 8002004:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	6978      	ldr	r0, [r7, #20]
 800200c:	f7ff ff90 	bl	8001f30 <NVIC_EncodePriority>
 8002010:	4602      	mov	r2, r0
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff5f 	bl	8001edc <NVIC_SetPriority>
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff37 	bl	8001ea8 <NVIC_EnableIRQ>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ffa2 	bl	8001f94 <SysTick_Config>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800205c:	b480      	push	{r7}
 800205e:	b087      	sub	sp, #28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206a:	e154      	b.n	8002316 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2101      	movs	r1, #1
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	fa01 f303 	lsl.w	r3, r1, r3
 8002078:	4013      	ands	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8146 	beq.w	8002310 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x38>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b12      	cmp	r3, #18
 8002092:	d123      	bne.n	80020dc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	08da      	lsrs	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3208      	adds	r2, #8
 800209c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	220f      	movs	r2, #15
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	08da      	lsrs	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3208      	adds	r2, #8
 80020d6:	6939      	ldr	r1, [r7, #16]
 80020d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	2203      	movs	r2, #3
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0203 	and.w	r2, r3, #3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d00b      	beq.n	8002130 <HAL_GPIO_Init+0xd4>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d007      	beq.n	8002130 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002124:	2b11      	cmp	r3, #17
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b12      	cmp	r3, #18
 800212e:	d130      	bne.n	8002192 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002166:	2201      	movs	r2, #1
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4013      	ands	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	f003 0201 	and.w	r2, r3, #1
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	2203      	movs	r2, #3
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 80a0 	beq.w	8002310 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d0:	4a58      	ldr	r2, [pc, #352]	; (8002334 <HAL_GPIO_Init+0x2d8>)
 80021d2:	4b58      	ldr	r3, [pc, #352]	; (8002334 <HAL_GPIO_Init+0x2d8>)
 80021d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6613      	str	r3, [r2, #96]	; 0x60
 80021dc:	4b55      	ldr	r3, [pc, #340]	; (8002334 <HAL_GPIO_Init+0x2d8>)
 80021de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021e8:	4a53      	ldr	r2, [pc, #332]	; (8002338 <HAL_GPIO_Init+0x2dc>)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	089b      	lsrs	r3, r3, #2
 80021ee:	3302      	adds	r3, #2
 80021f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	220f      	movs	r2, #15
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002212:	d019      	beq.n	8002248 <HAL_GPIO_Init+0x1ec>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a49      	ldr	r2, [pc, #292]	; (800233c <HAL_GPIO_Init+0x2e0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d013      	beq.n	8002244 <HAL_GPIO_Init+0x1e8>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a48      	ldr	r2, [pc, #288]	; (8002340 <HAL_GPIO_Init+0x2e4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d00d      	beq.n	8002240 <HAL_GPIO_Init+0x1e4>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a47      	ldr	r2, [pc, #284]	; (8002344 <HAL_GPIO_Init+0x2e8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d007      	beq.n	800223c <HAL_GPIO_Init+0x1e0>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a46      	ldr	r2, [pc, #280]	; (8002348 <HAL_GPIO_Init+0x2ec>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d101      	bne.n	8002238 <HAL_GPIO_Init+0x1dc>
 8002234:	2304      	movs	r3, #4
 8002236:	e008      	b.n	800224a <HAL_GPIO_Init+0x1ee>
 8002238:	2307      	movs	r3, #7
 800223a:	e006      	b.n	800224a <HAL_GPIO_Init+0x1ee>
 800223c:	2303      	movs	r3, #3
 800223e:	e004      	b.n	800224a <HAL_GPIO_Init+0x1ee>
 8002240:	2302      	movs	r3, #2
 8002242:	e002      	b.n	800224a <HAL_GPIO_Init+0x1ee>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_GPIO_Init+0x1ee>
 8002248:	2300      	movs	r3, #0
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	f002 0203 	and.w	r2, r2, #3
 8002250:	0092      	lsls	r2, r2, #2
 8002252:	4093      	lsls	r3, r2
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800225a:	4937      	ldr	r1, [pc, #220]	; (8002338 <HAL_GPIO_Init+0x2dc>)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3302      	adds	r3, #2
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002268:	4b38      	ldr	r3, [pc, #224]	; (800234c <HAL_GPIO_Init+0x2f0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800228c:	4a2f      	ldr	r2, [pc, #188]	; (800234c <HAL_GPIO_Init+0x2f0>)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002292:	4b2e      	ldr	r3, [pc, #184]	; (800234c <HAL_GPIO_Init+0x2f0>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022b6:	4a25      	ldr	r2, [pc, #148]	; (800234c <HAL_GPIO_Init+0x2f0>)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022bc:	4b23      	ldr	r3, [pc, #140]	; (800234c <HAL_GPIO_Init+0x2f0>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022e0:	4a1a      	ldr	r2, [pc, #104]	; (800234c <HAL_GPIO_Init+0x2f0>)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022e6:	4b19      	ldr	r3, [pc, #100]	; (800234c <HAL_GPIO_Init+0x2f0>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800230a:	4a10      	ldr	r2, [pc, #64]	; (800234c <HAL_GPIO_Init+0x2f0>)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	3301      	adds	r3, #1
 8002314:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	f47f aea3 	bne.w	800206c <HAL_GPIO_Init+0x10>
  }
}
 8002326:	bf00      	nop
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	40010000 	.word	0x40010000
 800233c:	48000400 	.word	0x48000400
 8002340:	48000800 	.word	0x48000800
 8002344:	48000c00 	.word	0x48000c00
 8002348:	48001000 	.word	0x48001000
 800234c:	40010400 	.word	0x40010400

08002350 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	887b      	ldrh	r3, [r7, #2]
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	e001      	b.n	8002372 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002372:	7bfb      	ldrb	r3, [r7, #15]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]
 800238c:	4613      	mov	r3, r2
 800238e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002390:	787b      	ldrb	r3, [r7, #1]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002396:	887a      	ldrh	r2, [r7, #2]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800239c:	e002      	b.n	80023a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d006      	beq.n	80023d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023c6:	4a05      	ldr	r2, [pc, #20]	; (80023dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fcc2 	bl	8001d58 <HAL_GPIO_EXTI_Callback>
  }
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40010400 	.word	0x40010400

080023e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e080      	b.n	80024f4 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f008 f83e 	bl	800a488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2224      	movs	r2, #36	; 0x24
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	f022 0201 	bic.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6852      	ldr	r2, [r2, #4]
 800242c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002430:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	6892      	ldr	r2, [r2, #8]
 800243c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002440:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d107      	bne.n	800245a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6892      	ldr	r2, [r2, #8]
 8002452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	e006      	b.n	8002468 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6892      	ldr	r2, [r2, #8]
 8002462:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002466:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b02      	cmp	r3, #2
 800246e:	d104      	bne.n	800247a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002478:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800248c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	68d2      	ldr	r2, [r2, #12]
 8002498:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800249c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6911      	ldr	r1, [r2, #16]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6952      	ldr	r2, [r2, #20]
 80024aa:	4311      	orrs	r1, r2
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6992      	ldr	r2, [r2, #24]
 80024b0:	0212      	lsls	r2, r2, #8
 80024b2:	430a      	orrs	r2, r1
 80024b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	69d1      	ldr	r1, [r2, #28]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6a12      	ldr	r2, [r2, #32]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	f042 0201 	orr.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b20      	cmp	r3, #32
 8002510:	d138      	bne.n	8002584 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800251c:	2302      	movs	r3, #2
 800251e:	e032      	b.n	8002586 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2224      	movs	r2, #36	; 0x24
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	6812      	ldr	r2, [r2, #0]
 800253a:	f022 0201 	bic.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800254e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	6811      	ldr	r1, [r2, #0]
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	e000      	b.n	8002586 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002584:	2302      	movs	r3, #2
  }
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d139      	bne.n	800261c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e033      	b.n	800261e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2224      	movs	r2, #36	; 0x24
 80025c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	f022 0201 	bic.w	r2, r2, #1
 80025d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	e000      	b.n	800261e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800261c:	2302      	movs	r3, #2
  }
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim: LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_LPTIM_Init+0x16>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e076      	b.n	8002730 <HAL_LPTIM_Init+0x104>

#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_LPTIM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f007 ffb2 	bl	800a5c0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d103      	bne.n	800267c <HAL_LPTIM_Init+0x50>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 031e 	bic.w	r3, r3, #30
 800267a:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002684:	4293      	cmp	r3, r2
 8002686:	d005      	beq.n	8002694 <HAL_LPTIM_Init+0x68>
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800268e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002692:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4b28      	ldr	r3, [pc, #160]	; (8002738 <HAL_LPTIM_Init+0x10c>)
 8002698:	4013      	ands	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80026a4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80026aa:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80026b0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80026b6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d107      	bne.n	80026d6 <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 80026ce:	4313      	orrs	r3, r2
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00a      	beq.n	80026f8 <HAL_LPTIM_Init+0xcc>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80026ea:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80026f0:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0d      	ldr	r2, [pc, #52]	; (800273c <HAL_LPTIM_Init+0x110>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d108      	bne.n	800271c <HAL_LPTIM_Init+0xf0>
    /* Check LPTIM1 Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));

    /* Configure LPTIM1 Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002716:	430a      	orrs	r2, r1
 8002718:	621a      	str	r2, [r3, #32]
 800271a:	e004      	b.n	8002726 <HAL_LPTIM_Init+0xfa>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002724:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	ff19f1fe 	.word	0xff19f1fe
 800273c:	40007c00 	.word	0x40007c00

08002740 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim: LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d10d      	bne.n	8002772 <HAL_LPTIM_IRQHandler+0x32>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	d106      	bne.n	8002772 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2201      	movs	r2, #1
 800276a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f882 	bl	8002876 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b02      	cmp	r3, #2
 800277e:	d10d      	bne.n	800279c <HAL_LPTIM_IRQHandler+0x5c>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b02      	cmp	r3, #2
 800278c:	d106      	bne.n	800279c <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2202      	movs	r2, #2
 8002794:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f877 	bl	800288a <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d10d      	bne.n	80027c6 <HAL_LPTIM_IRQHandler+0x86>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d106      	bne.n	80027c6 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2204      	movs	r2, #4
 80027be:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f86c 	bl	800289e <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d10d      	bne.n	80027f0 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d106      	bne.n	80027f0 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2208      	movs	r2, #8
 80027e8:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f861 	bl	80028b2 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b10      	cmp	r3, #16
 80027fc:	d10d      	bne.n	800281a <HAL_LPTIM_IRQHandler+0xda>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b10      	cmp	r3, #16
 800280a:	d106      	bne.n	800281a <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2210      	movs	r2, #16
 8002812:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f856 	bl	80028c6 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b20      	cmp	r3, #32
 8002826:	d10d      	bne.n	8002844 <HAL_LPTIM_IRQHandler+0x104>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	2b20      	cmp	r3, #32
 8002834:	d106      	bne.n	8002844 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2220      	movs	r2, #32
 800283c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f84b 	bl	80028da <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284e:	2b40      	cmp	r3, #64	; 0x40
 8002850:	d10d      	bne.n	800286e <HAL_LPTIM_IRQHandler+0x12e>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285c:	2b40      	cmp	r3, #64	; 0x40
 800285e:	d106      	bne.n	800286e <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2240      	movs	r2, #64	; 0x40
 8002866:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f840 	bl	80028ee <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */      
    }
  }
#endif
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002902:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002904:	b08b      	sub	sp, #44	; 0x2c
 8002906:	af06      	add	r7, sp, #24
 8002908:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0cb      	b.n	8002aac <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d106      	bne.n	800292e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f008 fea1 	bl	800b670 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2203      	movs	r2, #3
 8002932:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f003 ff44 	bl	80067c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	603b      	str	r3, [r7, #0]
 8002946:	687e      	ldr	r6, [r7, #4]
 8002948:	466d      	mov	r5, sp
 800294a:	f106 0410 	add.w	r4, r6, #16
 800294e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	602b      	str	r3, [r5, #0]
 8002956:	1d33      	adds	r3, r6, #4
 8002958:	cb0e      	ldmia	r3, {r1, r2, r3}
 800295a:	6838      	ldr	r0, [r7, #0]
 800295c:	f003 ff0b 	bl	8006776 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2100      	movs	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f003 ff4b 	bl	8006802 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
 800296c:	2300      	movs	r3, #0
 800296e:	73fb      	strb	r3, [r7, #15]
 8002970:	e035      	b.n	80029de <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	015b      	lsls	r3, r3, #5
 8002978:	4413      	add	r3, r2
 800297a:	3329      	adds	r3, #41	; 0x29
 800297c:	2201      	movs	r2, #1
 800297e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	015b      	lsls	r3, r3, #5
 8002986:	4413      	add	r3, r2
 8002988:	3328      	adds	r3, #40	; 0x28
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	b291      	uxth	r1, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	015b      	lsls	r3, r3, #5
 8002998:	4413      	add	r3, r2
 800299a:	3336      	adds	r3, #54	; 0x36
 800299c:	460a      	mov	r2, r1
 800299e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	015b      	lsls	r3, r3, #5
 80029a6:	4413      	add	r3, r2
 80029a8:	332b      	adds	r3, #43	; 0x2b
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	015b      	lsls	r3, r3, #5
 80029b4:	4413      	add	r3, r2
 80029b6:	3338      	adds	r3, #56	; 0x38
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	015b      	lsls	r3, r3, #5
 80029c2:	4413      	add	r3, r2
 80029c4:	333c      	adds	r3, #60	; 0x3c
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	3302      	adds	r3, #2
 80029d0:	015b      	lsls	r3, r3, #5
 80029d2:	4413      	add	r3, r2
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < 15U; i++)
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	3301      	adds	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	2b0e      	cmp	r3, #14
 80029e2:	d9c6      	bls.n	8002972 <HAL_PCD_Init+0x70>
  }

  for (i = 0U; i < 15U; i++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]
 80029e8:	e031      	b.n	8002a4e <HAL_PCD_Init+0x14c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	015b      	lsls	r3, r3, #5
 80029f0:	4413      	add	r3, r2
 80029f2:	f203 2329 	addw	r3, r3, #553	; 0x229
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	015b      	lsls	r3, r3, #5
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	015b      	lsls	r3, r3, #5
 8002a10:	4413      	add	r3, r2
 8002a12:	f203 232b 	addw	r3, r3, #555	; 0x22b
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	015b      	lsls	r3, r3, #5
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	015b      	lsls	r3, r3, #5
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	3312      	adds	r3, #18
 8002a40:	015b      	lsls	r3, r3, #5
 8002a42:	4413      	add	r3, r2
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < 15U; i++)
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	2b0e      	cmp	r3, #14
 8002a52:	d9ca      	bls.n	80029ea <HAL_PCD_Init+0xe8>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	687e      	ldr	r6, [r7, #4]
 8002a5c:	466d      	mov	r5, sp
 8002a5e:	f106 0410 	add.w	r4, r6, #16
 8002a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	602b      	str	r3, [r5, #0]
 8002a6a:	1d33      	adds	r3, r6, #4
 8002a6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a6e:	6838      	ldr	r0, [r7, #0]
 8002a70:	f003 fed4 	bl	800681c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d102      	bne.n	8002a92 <HAL_PCD_Init+0x190>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 fe5e 	bl	800374e <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d102      	bne.n	8002aa0 <HAL_PCD_Init+0x19e>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fe31 	bl	8003702 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f004 ff04 	bl	80078b2 <USB_DevDisconnect>

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ab4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_PCD_Start+0x16>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e012      	b.n	8002af0 <HAL_PCD_Start+0x3c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_DevConnect(hpcd->Instance);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f004 fed4 	bl	8007884 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f003 fe59 	bl	8006798 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f004 fee9 	bl	80078dc <USB_ReadInterrupts>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b14:	d102      	bne.n	8002b1c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fb40 	bl	800319c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f004 fedb 	bl	80078dc <USB_ReadInterrupts>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b30:	d112      	bne.n	8002b58 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002b3e:	b292      	uxth	r2, r2
 8002b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b44:	b292      	uxth	r2, r2
 8002b46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f008 fe17 	bl	800b77e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002b50:	2100      	movs	r1, #0
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f929 	bl	8002daa <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f004 febd 	bl	80078dc <USB_ReadInterrupts>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b6c:	d10b      	bne.n	8002b86 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002b7a:	b292      	uxth	r2, r2
 8002b7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b80:	b292      	uxth	r2, r2
 8002b82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f004 fea6 	bl	80078dc <USB_ReadInterrupts>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002ba8:	b292      	uxth	r2, r2
 8002baa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bae:	b292      	uxth	r2, r2
 8002bb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f004 fe8f 	bl	80078dc <USB_ReadInterrupts>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc8:	d133      	bne.n	8002c32 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002bd6:	b292      	uxth	r2, r2
 8002bd8:	f022 0204 	bic.w	r2, r2, #4
 8002bdc:	b292      	uxth	r2, r2
 8002bde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002bee:	b292      	uxth	r2, r2
 8002bf0:	f022 0208 	bic.w	r2, r2, #8
 8002bf4:	b292      	uxth	r2, r2
 8002bf6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d107      	bne.n	8002c14 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f009 f868 	bl	800bce4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f008 fdef 	bl	800b7f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002c26:	b292      	uxth	r2, r2
 8002c28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c2c:	b292      	uxth	r2, r2
 8002c2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f004 fe50 	bl	80078dc <USB_ReadInterrupts>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c46:	d131      	bne.n	8002cac <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002c54:	b292      	uxth	r2, r2
 8002c56:	f042 0208 	orr.w	r2, r2, #8
 8002c5a:	b292      	uxth	r2, r2
 8002c5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002c6c:	b292      	uxth	r2, r2
 8002c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c72:	b292      	uxth	r2, r2
 8002c74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002c84:	b292      	uxth	r2, r2
 8002c86:	f042 0204 	orr.w	r2, r2, #4
 8002c8a:	b292      	uxth	r2, r2
 8002c8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f004 fe21 	bl	80078dc <USB_ReadInterrupts>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca4:	d002      	beq.n	8002cac <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f008 fd8c 	bl	800b7c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f004 fe13 	bl	80078dc <USB_ReadInterrupts>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cbc:	2b80      	cmp	r3, #128	; 0x80
 8002cbe:	d13f      	bne.n	8002d40 <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002ccc:	b292      	uxth	r2, r2
 8002cce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cd2:	b292      	uxth	r2, r2
 8002cd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d12b      	bne.n	8002d3a <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002cee:	b292      	uxth	r2, r2
 8002cf0:	f042 0204 	orr.w	r2, r2, #4
 8002cf4:	b292      	uxth	r2, r2
 8002cf6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002d06:	b292      	uxth	r2, r2
 8002d08:	f042 0208 	orr.w	r2, r2, #8
 8002d0c:	b292      	uxth	r2, r2
 8002d0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	089b      	lsrs	r3, r3, #2
 8002d26:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002d30:	2101      	movs	r1, #1
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f008 ffd6 	bl	800bce4 <HAL_PCDEx_LPM_Callback>
 8002d38:	e002      	b.n	8002d40 <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f008 fd42 	bl	800b7c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f004 fdc9 	bl	80078dc <USB_ReadInterrupts>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d54:	d10e      	bne.n	8002d74 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002d62:	b292      	uxth	r2, r2
 8002d64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d68:	b292      	uxth	r2, r2
 8002d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f008 fcf7 	bl	800b762 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f004 fdaf 	bl	80078dc <USB_ReadInterrupts>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d88:	d10b      	bne.n	8002da2 <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6812      	ldr	r2, [r2, #0]
 8002d92:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002d96:	b292      	uxth	r2, r2
 8002d98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d9c:	b292      	uxth	r2, r2
 8002d9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	460b      	mov	r3, r1
 8002db4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_PCD_SetAddress+0x1a>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e013      	b.n	8002dec <HAL_PCD_SetAddress+0x42>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f004 fd3d 	bl	800785c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	4608      	mov	r0, r1
 8002dfe:	4611      	mov	r1, r2
 8002e00:	461a      	mov	r2, r3
 8002e02:	4603      	mov	r3, r0
 8002e04:	70fb      	strb	r3, [r7, #3]
 8002e06:	460b      	mov	r3, r1
 8002e08:	803b      	strh	r3, [r7, #0]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	da0b      	bge.n	8002e32 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8002e1a:	78fb      	ldrb	r3, [r7, #3]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	015b      	lsls	r3, r3, #5
 8002e22:	3328      	adds	r3, #40	; 0x28
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	4413      	add	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	705a      	strb	r2, [r3, #1]
 8002e30:	e00b      	b.n	8002e4a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	f003 030f 	and.w	r3, r3, #15
 8002e38:	015b      	lsls	r3, r3, #5
 8002e3a:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & 0xFU;
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e56:	883a      	ldrh	r2, [r7, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	78ba      	ldrb	r2, [r7, #2]
 8002e60:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	785b      	ldrb	r3, [r3, #1]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e74:	78bb      	ldrb	r3, [r7, #2]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d102      	bne.n	8002e80 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_PCD_EP_Open+0x9a>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e00e      	b.n	8002eac <HAL_PCD_EP_Open+0xb8>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68f9      	ldr	r1, [r7, #12]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 fce1 	bl	8006864 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return ret;
 8002eaa:	7afb      	ldrb	r3, [r7, #11]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ec0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	da0b      	bge.n	8002ee0 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	015b      	lsls	r3, r3, #5
 8002ed0:	3328      	adds	r3, #40	; 0x28
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2201      	movs	r2, #1
 8002edc:	705a      	strb	r2, [r3, #1]
 8002ede:	e00b      	b.n	8002ef8 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	015b      	lsls	r3, r3, #5
 8002ee8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	4413      	add	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & 0xFU;
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_PCD_EP_Close+0x5e>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e00e      	b.n	8002f30 <HAL_PCD_EP_Close+0x7c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68f9      	ldr	r1, [r7, #12]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f003 ff81 	bl	8006e28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	460b      	mov	r3, r1
 8002f46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8002f48:	7afb      	ldrb	r3, [r7, #11]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	015b      	lsls	r3, r3, #5
 8002f50:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4413      	add	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0xFU;
 8002f72:	7afb      	ldrb	r3, [r7, #11]
 8002f74:	f003 030f 	and.w	r3, r3, #15
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0xFU) == 0U)
 8002f7e:	7afb      	ldrb	r3, [r7, #11]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d106      	bne.n	8002f96 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6979      	ldr	r1, [r7, #20]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f004 f8e0 	bl	8007154 <USB_EPStartXfer>
 8002f94:	e005      	b.n	8002fa2 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6979      	ldr	r1, [r7, #20]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f004 f8d9 	bl	8007154 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	70fb      	strb	r3, [r7, #3]
  return (uint16_t)hpcd->OUT_ep[ep_addr & 0xFU].xfer_count;
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	3312      	adds	r3, #18
 8002fc2:	015b      	lsls	r3, r3, #5
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	b29b      	uxth	r3, r3
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8002fe8:	7afb      	ldrb	r3, [r7, #11]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	015b      	lsls	r3, r3, #5
 8002ff0:	3328      	adds	r3, #40	; 0x28
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2200      	movs	r2, #0
 8003008:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2201      	movs	r2, #1
 800300e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0xFU;
 8003010:	7afb      	ldrb	r3, [r7, #11]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	b2da      	uxtb	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0xFU) == 0U)
 800301c:	7afb      	ldrb	r3, [r7, #11]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6979      	ldr	r1, [r7, #20]
 800302c:	4618      	mov	r0, r3
 800302e:	f004 f891 	bl	8007154 <USB_EPStartXfer>
 8003032:	e005      	b.n	8003040 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6979      	ldr	r1, [r7, #20]
 800303a:	4618      	mov	r0, r3
 800303c:	f004 f88a 	bl	8007154 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	429a      	cmp	r2, r3
 8003062:	d901      	bls.n	8003068 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e046      	b.n	80030f6 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800306c:	2b00      	cmp	r3, #0
 800306e:	da0b      	bge.n	8003088 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	015b      	lsls	r3, r3, #5
 8003078:	3328      	adds	r3, #40	; 0x28
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	705a      	strb	r2, [r3, #1]
 8003086:	e009      	b.n	800309c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	015b      	lsls	r3, r3, #5
 800308c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_PCD_EP_SetStall+0x72>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e01c      	b.n	80030f6 <HAL_PCD_EP_SetStall+0xac>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68f9      	ldr	r1, [r7, #12]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f004 faf6 	bl	80076bc <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d108      	bne.n	80030ec <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 80030e4:	4619      	mov	r1, r3
 80030e6:	4610      	mov	r0, r2
 80030e8:	f004 fc08 	bl	80078fc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	460b      	mov	r3, r1
 8003108:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	f003 020f 	and.w	r2, r3, #15
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	429a      	cmp	r2, r3
 8003116:	d901      	bls.n	800311c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e03a      	b.n	8003192 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800311c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003120:	2b00      	cmp	r3, #0
 8003122:	da0b      	bge.n	800313c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	015b      	lsls	r3, r3, #5
 800312c:	3328      	adds	r3, #40	; 0x28
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	705a      	strb	r2, [r3, #1]
 800313a:	e00b      	b.n	8003154 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	015b      	lsls	r3, r3, #5
 8003144:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	4413      	add	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 800315a:	78fb      	ldrb	r3, [r7, #3]
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	b2da      	uxtb	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_PCD_EP_ClrStall+0x76>
 8003170:	2302      	movs	r3, #2
 8003172:	e00e      	b.n	8003192 <HAL_PCD_EP_ClrStall+0x94>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68f9      	ldr	r1, [r7, #12]
 8003182:	4618      	mov	r0, r3
 8003184:	f004 fadc 	bl	8007740 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800319c:	b590      	push	{r4, r7, lr}
 800319e:	b089      	sub	sp, #36	; 0x24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80031a4:	e25e      	b.n	8003664 <PCD_EP_ISR_Handler+0x4c8>
  {
    wIstr = hpcd->Instance->ISTR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031ae:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80031b0:	8afb      	ldrh	r3, [r7, #22]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80031ba:	7d7b      	ldrb	r3, [r7, #21]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f040 812c 	bne.w	800341a <PCD_EP_ISR_Handler+0x27e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80031c2:	8afb      	ldrh	r3, [r7, #22]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d14b      	bne.n	8003264 <PCD_EP_ISR_Handler+0xc8>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80031d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031dc:	b29c      	uxth	r4, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4622      	mov	r2, r4
 80031e4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3328      	adds	r3, #40	; 0x28
 80031ea:	613b      	str	r3, [r7, #16]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	461a      	mov	r2, r3
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	4413      	add	r3, r2
 8003206:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	441a      	add	r2, r3
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003222:	2100      	movs	r1, #0
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f008 fa85 	bl	800b734 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 8216 	beq.w	8003664 <PCD_EP_ISR_Handler+0x4c8>
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	2b00      	cmp	r3, #0
 800323e:	f040 8211 	bne.w	8003664 <PCD_EP_ISR_Handler+0x4c8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	b292      	uxth	r2, r2
 8003256:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003262:	e1ff      	b.n	8003664 <PCD_EP_ISR_Handler+0x4c8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800326a:	613b      	str	r3, [r7, #16]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	81fb      	strh	r3, [r7, #14]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003274:	89fb      	ldrh	r3, [r7, #14]
 8003276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800327a:	2b00      	cmp	r3, #0
 800327c:	d02f      	beq.n	80032de <PCD_EP_ISR_Handler+0x142>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003286:	b29b      	uxth	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	4413      	add	r3, r2
 8003298:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f503 6186 	add.w	r1, r3, #1072	; 0x430
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	88da      	ldrh	r2, [r3, #6]
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	f004 fb6c 	bl	8007996 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80032ca:	4013      	ands	r3, r2
 80032cc:	b29c      	uxth	r4, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4622      	mov	r2, r4
 80032d4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f008 fa02 	bl	800b6e0 <HAL_PCD_SetupStageCallback>
 80032dc:	e1c2      	b.n	8003664 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80032de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f280 81be 	bge.w	8003664 <PCD_EP_ISR_Handler+0x4c8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80032f4:	4013      	ands	r3, r2
 80032f6:	b29c      	uxth	r4, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4622      	mov	r2, r4
 80032fe:	801a      	strh	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003308:	b29b      	uxth	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4413      	add	r3, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	4413      	add	r3, r2
 800331a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 0U)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d011      	beq.n	8003354 <PCD_EP_ISR_Handler+0x1b8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6818      	ldr	r0, [r3, #0]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	6959      	ldr	r1, [r3, #20]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	88da      	ldrh	r2, [r3, #6]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	b29b      	uxth	r3, r3
 8003342:	f004 fb28 	bl	8007996 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	441a      	add	r2, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	615a      	str	r2, [r3, #20]

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003354:	2100      	movs	r1, #0
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f008 f9d4 	bl	800b704 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	461c      	mov	r4, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800336a:	b29b      	uxth	r3, r3
 800336c:	441c      	add	r4, r3
 800336e:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d111      	bne.n	80033a0 <PCD_EP_ISR_Handler+0x204>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	881a      	ldrh	r2, [r3, #0]
 8003380:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8003384:	4013      	ands	r3, r2
 8003386:	b29a      	uxth	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	801a      	strh	r2, [r3, #0]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003398:	b29a      	uxth	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	801a      	strh	r2, [r3, #0]
 800339e:	e026      	b.n	80033ee <PCD_EP_ISR_Handler+0x252>
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	2b3d      	cmp	r3, #61	; 0x3d
 80033a6:	d813      	bhi.n	80033d0 <PCD_EP_ISR_Handler+0x234>
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	085b      	lsrs	r3, r3, #1
 80033ae:	61bb      	str	r3, [r7, #24]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <PCD_EP_ISR_Handler+0x226>
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	3301      	adds	r3, #1
 80033c0:	61bb      	str	r3, [r7, #24]
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	029b      	lsls	r3, r3, #10
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	801a      	strh	r2, [r3, #0]
 80033ce:	e00e      	b.n	80033ee <PCD_EP_ISR_Handler+0x252>
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	095b      	lsrs	r3, r3, #5
 80033d6:	61bb      	str	r3, [r7, #24]
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	029b      	lsls	r3, r3, #10
 80033de:	b29b      	uxth	r3, r3
 80033e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fe:	b29c      	uxth	r4, r3
 8003400:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003404:	b29c      	uxth	r4, r3
 8003406:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800340a:	b29c      	uxth	r4, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b9b      	ldr	r3, [pc, #620]	; (8003680 <PCD_EP_ISR_Handler+0x4e4>)
 8003412:	4323      	orrs	r3, r4
 8003414:	b29b      	uxth	r3, r3
 8003416:	8013      	strh	r3, [r2, #0]
 8003418:	e124      	b.n	8003664 <PCD_EP_ISR_Handler+0x4c8>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	7d7b      	ldrb	r3, [r7, #21]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	81fb      	strh	r3, [r7, #14]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800342a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f280 80c9 	bge.w	80035c6 <PCD_EP_ISR_Handler+0x42a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	7d7b      	ldrb	r3, [r7, #21]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	b29a      	uxth	r2, r3
 8003444:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003448:	4013      	ands	r3, r2
 800344a:	b29c      	uxth	r4, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	7d7b      	ldrb	r3, [r7, #21]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	4622      	mov	r2, r4
 800345a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800345c:	7d7b      	ldrb	r3, [r7, #21]
 800345e:	015b      	lsls	r3, r3, #5
 8003460:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	4413      	add	r3, r2
 8003468:	613b      	str	r3, [r7, #16]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	7b1b      	ldrb	r3, [r3, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d11f      	bne.n	80034b2 <PCD_EP_ISR_Handler+0x316>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800347a:	b29b      	uxth	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	4413      	add	r3, r2
 800348c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003496:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003498:	8bfb      	ldrh	r3, [r7, #30]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d06e      	beq.n	800357c <PCD_EP_ISR_Handler+0x3e0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	6959      	ldr	r1, [r3, #20]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	88da      	ldrh	r2, [r3, #6]
 80034aa:	8bfb      	ldrh	r3, [r7, #30]
 80034ac:	f004 fa73 	bl	8007996 <USB_ReadPMA>
 80034b0:	e064      	b.n	800357c <PCD_EP_ISR_Handler+0x3e0>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01f      	beq.n	800350c <PCD_EP_ISR_Handler+0x370>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	461a      	mov	r2, r3
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	4413      	add	r3, r2
 80034e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034f0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80034f2:	8bfb      	ldrh	r3, [r7, #30]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d028      	beq.n	800354a <PCD_EP_ISR_Handler+0x3ae>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	6959      	ldr	r1, [r3, #20]
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	891a      	ldrh	r2, [r3, #8]
 8003504:	8bfb      	ldrh	r3, [r7, #30]
 8003506:	f004 fa46 	bl	8007996 <USB_ReadPMA>
 800350a:	e01e      	b.n	800354a <PCD_EP_ISR_Handler+0x3ae>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003514:	b29b      	uxth	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4413      	add	r3, r2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	4413      	add	r3, r2
 8003526:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003530:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003532:	8bfb      	ldrh	r3, [r7, #30]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <PCD_EP_ISR_Handler+0x3ae>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6818      	ldr	r0, [r3, #0]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	6959      	ldr	r1, [r3, #20]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	895a      	ldrh	r2, [r3, #10]
 8003544:	8bfb      	ldrh	r3, [r7, #30]
 8003546:	f004 fa26 	bl	8007996 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	b29b      	uxth	r3, r3
 800355c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003564:	b29c      	uxth	r4, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	441a      	add	r2, r3
 8003574:	4b43      	ldr	r3, [pc, #268]	; (8003684 <PCD_EP_ISR_Handler+0x4e8>)
 8003576:	4323      	orrs	r3, r4
 8003578:	b29b      	uxth	r3, r3
 800357a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	69da      	ldr	r2, [r3, #28]
 8003580:	8bfb      	ldrh	r3, [r7, #30]
 8003582:	441a      	add	r2, r3
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	8bfb      	ldrh	r3, [r7, #30]
 800358e:	441a      	add	r2, r3
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d004      	beq.n	80035a6 <PCD_EP_ISR_Handler+0x40a>
 800359c:	8bfa      	ldrh	r2, [r7, #30]
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d206      	bcs.n	80035b4 <PCD_EP_ISR_Handler+0x418>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	4619      	mov	r1, r3
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f008 f8a9 	bl	800b704 <HAL_PCD_DataOutStageCallback>
 80035b2:	e008      	b.n	80035c6 <PCD_EP_ISR_Handler+0x42a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	7819      	ldrb	r1, [r3, #0]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff fcb9 	bl	8002f38 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80035c6:	89fb      	ldrh	r3, [r7, #14]
 80035c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d049      	beq.n	8003664 <PCD_EP_ISR_Handler+0x4c8>
      {
        ep = &hpcd->IN_ep[epindex];
 80035d0:	7d7b      	ldrb	r3, [r7, #21]
 80035d2:	015b      	lsls	r3, r3, #5
 80035d4:	3328      	adds	r3, #40	; 0x28
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	4413      	add	r3, r2
 80035da:	613b      	str	r3, [r7, #16]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	7d7b      	ldrb	r3, [r7, #21]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80035f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f4:	b29c      	uxth	r4, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	7d7b      	ldrb	r3, [r7, #21]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	4622      	mov	r2, r4
 8003604:	801a      	strh	r2, [r3, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800360e:	b29b      	uxth	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4413      	add	r3, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	4413      	add	r3, r2
 8003620:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	441a      	add	r2, r3
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d106      	bne.n	8003652 <PCD_EP_ISR_Handler+0x4b6>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	4619      	mov	r1, r3
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f008 f872 	bl	800b734 <HAL_PCD_DataInStageCallback>
 8003650:	e008      	b.n	8003664 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	7819      	ldrb	r1, [r3, #0]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff fcba 	bl	8002fd8 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800366c:	b29b      	uxth	r3, r3
 800366e:	b21b      	sxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	f6ff ad98 	blt.w	80031a6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3724      	adds	r7, #36	; 0x24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd90      	pop	{r4, r7, pc}
 8003680:	ffff8080 	.word	0xffff8080
 8003684:	ffff80c0 	.word	0xffff80c0

08003688 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	607b      	str	r3, [r7, #4]
 8003692:	460b      	mov	r3, r1
 8003694:	817b      	strh	r3, [r7, #10]
 8003696:	4613      	mov	r3, r2
 8003698:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800369a:	897b      	ldrh	r3, [r7, #10]
 800369c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d008      	beq.n	80036b8 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80036a6:	897b      	ldrh	r3, [r7, #10]
 80036a8:	f003 030f 	and.w	r3, r3, #15
 80036ac:	015b      	lsls	r3, r3, #5
 80036ae:	3328      	adds	r3, #40	; 0x28
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	e006      	b.n	80036c6 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036b8:	897b      	ldrh	r3, [r7, #10]
 80036ba:	015b      	lsls	r3, r3, #5
 80036bc:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80036c6:	893b      	ldrh	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d107      	bne.n	80036dc <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2200      	movs	r2, #0
 80036d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	80da      	strh	r2, [r3, #6]
 80036da:	e00b      	b.n	80036f4 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2201      	movs	r2, #1
 80036e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	0c1b      	lsrs	r3, r3, #16
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800371e:	b29b      	uxth	r3, r3
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003732:	b29b      	uxth	r3, r3
 8003734:	f043 0302 	orr.w	r3, r3, #2
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800374e:	b480      	push	{r7}
 8003750:	b085      	sub	sp, #20
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
  hpcd->LPM_State = LPM_L0;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003772:	b29b      	uxth	r3, r3
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003786:	b29b      	uxth	r3, r3
 8003788:	f043 0302 	orr.w	r3, r3, #2
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
	...

080037a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037a8:	4b04      	ldr	r3, [pc, #16]	; (80037bc <HAL_PWREx_GetVoltageRange+0x18>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40007000 	.word	0x40007000

080037c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ce:	d130      	bne.n	8003832 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037d0:	4b23      	ldr	r3, [pc, #140]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037dc:	d038      	beq.n	8003850 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037de:	4a20      	ldr	r2, [pc, #128]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e0:	4b1f      	ldr	r3, [pc, #124]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037ee:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2232      	movs	r2, #50	; 0x32
 80037f4:	fb02 f303 	mul.w	r3, r2, r3
 80037f8:	4a1b      	ldr	r2, [pc, #108]	; (8003868 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	0c9b      	lsrs	r3, r3, #18
 8003800:	3301      	adds	r3, #1
 8003802:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003804:	e002      	b.n	800380c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3b01      	subs	r3, #1
 800380a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800380c:	4b14      	ldr	r3, [pc, #80]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003818:	d102      	bne.n	8003820 <HAL_PWREx_ControlVoltageScaling+0x60>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f2      	bne.n	8003806 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800382c:	d110      	bne.n	8003850 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e00f      	b.n	8003852 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003832:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800383a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383e:	d007      	beq.n	8003850 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003840:	4a07      	ldr	r2, [pc, #28]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003842:	4b07      	ldr	r3, [pc, #28]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800384a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800384e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40007000 	.word	0x40007000
 8003864:	20000908 	.word	0x20000908
 8003868:	431bde83 	.word	0x431bde83

0800386c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003870:	4a05      	ldr	r2, [pc, #20]	; (8003888 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800387a:	6053      	str	r3, [r2, #4]
}
 800387c:	bf00      	nop
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40007000 	.word	0x40007000

0800388c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_oscsource;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e395      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800389e:	4ba3      	ldr	r3, [pc, #652]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038a8:	4ba0      	ldr	r3, [pc, #640]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0303 	and.w	r3, r3, #3
 80038b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 80df 	beq.w	8003a7e <HAL_RCC_OscConfig+0x1f2>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d007      	beq.n	80038d6 <HAL_RCC_OscConfig+0x4a>
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	2b0c      	cmp	r3, #12
 80038ca:	f040 8086 	bne.w	80039da <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	f040 8082 	bne.w	80039da <HAL_RCC_OscConfig+0x14e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038d6:	4b95      	ldr	r3, [pc, #596]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <HAL_RCC_OscConfig+0x62>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e36d      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1a      	ldr	r2, [r3, #32]
 80038f2:	4b8e      	ldr	r3, [pc, #568]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d004      	beq.n	8003908 <HAL_RCC_OscConfig+0x7c>
 80038fe:	4b8b      	ldr	r3, [pc, #556]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003906:	e005      	b.n	8003914 <HAL_RCC_OscConfig+0x88>
 8003908:	4b88      	ldr	r3, [pc, #544]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 800390a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800390e:	091b      	lsrs	r3, r3, #4
 8003910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003914:	429a      	cmp	r2, r3
 8003916:	d923      	bls.n	8003960 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fd0d 	bl	800433c <RCC_SetFlashLatencyFromMSIRange>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e34e      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800392c:	4a7f      	ldr	r2, [pc, #508]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 800392e:	4b7f      	ldr	r3, [pc, #508]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f043 0308 	orr.w	r3, r3, #8
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	497c      	ldr	r1, [pc, #496]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 800393a:	4b7c      	ldr	r3, [pc, #496]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800394a:	4978      	ldr	r1, [pc, #480]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 800394c:	4b77      	ldr	r3, [pc, #476]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	4313      	orrs	r3, r2
 800395c:	604b      	str	r3, [r1, #4]
 800395e:	e022      	b.n	80039a6 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003960:	4a72      	ldr	r2, [pc, #456]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003962:	4b72      	ldr	r3, [pc, #456]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f043 0308 	orr.w	r3, r3, #8
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	496f      	ldr	r1, [pc, #444]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 800396e:	4b6f      	ldr	r3, [pc, #444]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	4313      	orrs	r3, r2
 800397c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800397e:	496b      	ldr	r1, [pc, #428]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003980:	4b6a      	ldr	r3, [pc, #424]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	4313      	orrs	r3, r2
 8003990:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fcd0 	bl	800433c <RCC_SetFlashLatencyFromMSIRange>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e311      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039a6:	f000 fbf5 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 80039aa:	4601      	mov	r1, r0
 80039ac:	4b5f      	ldr	r3, [pc, #380]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	4a5e      	ldr	r2, [pc, #376]	; (8003b30 <HAL_RCC_OscConfig+0x2a4>)
 80039b8:	5cd3      	ldrb	r3, [r2, r3]
 80039ba:	f003 031f 	and.w	r3, r3, #31
 80039be:	fa21 f303 	lsr.w	r3, r1, r3
 80039c2:	4a5c      	ldr	r2, [pc, #368]	; (8003b34 <HAL_RCC_OscConfig+0x2a8>)
 80039c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80039c6:	2000      	movs	r0, #0
 80039c8:	f7fe f9fe 	bl	8001dc8 <HAL_InitTick>
 80039cc:	4603      	mov	r3, r0
 80039ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d052      	beq.n	8003a7c <HAL_RCC_OscConfig+0x1f0>
        {
          return status;
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	e2f7      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d032      	beq.n	8003a48 <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039e2:	4a52      	ldr	r2, [pc, #328]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 80039e4:	4b51      	ldr	r3, [pc, #324]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039ee:	f7fe fa1d 	bl	8001e2c <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039f6:	f7fe fa19 	bl	8001e2c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e2e0      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a08:	4b48      	ldr	r3, [pc, #288]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0f0      	beq.n	80039f6 <HAL_RCC_OscConfig+0x16a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a14:	4a45      	ldr	r2, [pc, #276]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003a16:	4b45      	ldr	r3, [pc, #276]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f043 0308 	orr.w	r3, r3, #8
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	4942      	ldr	r1, [pc, #264]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003a22:	4b42      	ldr	r3, [pc, #264]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a32:	493e      	ldr	r1, [pc, #248]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003a34:	4b3d      	ldr	r3, [pc, #244]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	021b      	lsls	r3, r3, #8
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]
 8003a46:	e01a      	b.n	8003a7e <HAL_RCC_OscConfig+0x1f2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a48:	4a38      	ldr	r2, [pc, #224]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003a4a:	4b38      	ldr	r3, [pc, #224]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 0301 	bic.w	r3, r3, #1
 8003a52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a54:	f7fe f9ea 	bl	8001e2c <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a5c:	f7fe f9e6 	bl	8001e2c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e2ad      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a6e:	4b2f      	ldr	r3, [pc, #188]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0x1d0>
 8003a7a:	e000      	b.n	8003a7e <HAL_RCC_OscConfig+0x1f2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d072      	beq.n	8003b70 <HAL_RCC_OscConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_OscConfig+0x210>
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b0c      	cmp	r3, #12
 8003a94:	d10e      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x228>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d10b      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x228>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a9c:	4b23      	ldr	r3, [pc, #140]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d062      	beq.n	8003b6e <HAL_RCC_OscConfig+0x2e2>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d15e      	bne.n	8003b6e <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e28a      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003abc:	d106      	bne.n	8003acc <HAL_RCC_OscConfig+0x240>
 8003abe:	4a1b      	ldr	r2, [pc, #108]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003ac0:	4b1a      	ldr	r3, [pc, #104]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e01d      	b.n	8003b08 <HAL_RCC_OscConfig+0x27c>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ad4:	d10c      	bne.n	8003af0 <HAL_RCC_OscConfig+0x264>
 8003ad6:	4a15      	ldr	r2, [pc, #84]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003ad8:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	4a12      	ldr	r2, [pc, #72]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003ae4:	4b11      	ldr	r3, [pc, #68]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	e00b      	b.n	8003b08 <HAL_RCC_OscConfig+0x27c>
 8003af0:	4a0e      	ldr	r2, [pc, #56]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003af2:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	4a0b      	ldr	r2, [pc, #44]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003afe:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCC_OscConfig+0x2a0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d01a      	beq.n	8003b46 <HAL_RCC_OscConfig+0x2ba>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7fe f98c 	bl	8001e2c <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b16:	e00f      	b.n	8003b38 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b18:	f7fe f988 	bl	8001e2c <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b64      	cmp	r3, #100	; 0x64
 8003b24:	d908      	bls.n	8003b38 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e24f      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	0800c070 	.word	0x0800c070
 8003b34:	20000908 	.word	0x20000908
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b38:	4bae      	ldr	r3, [pc, #696]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0e9      	beq.n	8003b18 <HAL_RCC_OscConfig+0x28c>
 8003b44:	e014      	b.n	8003b70 <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b46:	f7fe f971 	bl	8001e2c <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x2d4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b4e:	f7fe f96d 	bl	8001e2c <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b64      	cmp	r3, #100	; 0x64
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e234      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b60:	4ba4      	ldr	r3, [pc, #656]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f0      	bne.n	8003b4e <HAL_RCC_OscConfig+0x2c2>
 8003b6c:	e000      	b.n	8003b70 <HAL_RCC_OscConfig+0x2e4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d060      	beq.n	8003c3e <HAL_RCC_OscConfig+0x3b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d005      	beq.n	8003b8e <HAL_RCC_OscConfig+0x302>
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b0c      	cmp	r3, #12
 8003b86:	d119      	bne.n	8003bbc <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d116      	bne.n	8003bbc <HAL_RCC_OscConfig+0x330>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b8e:	4b99      	ldr	r3, [pc, #612]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x31a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e211      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba6:	4993      	ldr	r1, [pc, #588]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003ba8:	4b92      	ldr	r3, [pc, #584]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	061b      	lsls	r3, r3, #24
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bba:	e040      	b.n	8003c3e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d023      	beq.n	8003c0c <HAL_RCC_OscConfig+0x380>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bc4:	4a8b      	ldr	r2, [pc, #556]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003bc6:	4b8b      	ldr	r3, [pc, #556]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fe f92c 	bl	8001e2c <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd8:	f7fe f928 	bl	8001e2c <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e1ef      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bea:	4b82      	ldr	r3, [pc, #520]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x34c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf6:	497f      	ldr	r1, [pc, #508]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003bf8:	4b7e      	ldr	r3, [pc, #504]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	061b      	lsls	r3, r3, #24
 8003c06:	4313      	orrs	r3, r2
 8003c08:	604b      	str	r3, [r1, #4]
 8003c0a:	e018      	b.n	8003c3e <HAL_RCC_OscConfig+0x3b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c0c:	4a79      	ldr	r2, [pc, #484]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003c0e:	4b79      	ldr	r3, [pc, #484]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fe f908 	bl	8001e2c <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c20:	f7fe f904 	bl	8001e2c <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e1cb      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c32:	4b70      	ldr	r3, [pc, #448]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x394>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d03c      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d01c      	beq.n	8003c8c <HAL_RCC_OscConfig+0x400>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c52:	4a68      	ldr	r2, [pc, #416]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003c54:	4b67      	ldr	r3, [pc, #412]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c62:	f7fe f8e3 	bl	8001e2c <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c6a:	f7fe f8df 	bl	8001e2c <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e1a6      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c7c:	4b5d      	ldr	r3, [pc, #372]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0ef      	beq.n	8003c6a <HAL_RCC_OscConfig+0x3de>
 8003c8a:	e01b      	b.n	8003cc4 <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c8c:	4a59      	ldr	r2, [pc, #356]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003c8e:	4b59      	ldr	r3, [pc, #356]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c94:	f023 0301 	bic.w	r3, r3, #1
 8003c98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7fe f8c6 	bl	8001e2c <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca4:	f7fe f8c2 	bl	8001e2c <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e189      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cb6:	4b4f      	ldr	r3, [pc, #316]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1ef      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80a5 	beq.w	8003e1c <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003cd6:	4b47      	ldr	r3, [pc, #284]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10d      	bne.n	8003cfe <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce2:	4a44      	ldr	r2, [pc, #272]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003ce4:	4b43      	ldr	r3, [pc, #268]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cec:	6593      	str	r3, [r2, #88]	; 0x58
 8003cee:	4b41      	ldr	r3, [pc, #260]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cfe:	4b3e      	ldr	r3, [pc, #248]	; (8003df8 <HAL_RCC_OscConfig+0x56c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d118      	bne.n	8003d3c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d0a:	4a3b      	ldr	r2, [pc, #236]	; (8003df8 <HAL_RCC_OscConfig+0x56c>)
 8003d0c:	4b3a      	ldr	r3, [pc, #232]	; (8003df8 <HAL_RCC_OscConfig+0x56c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d16:	f7fe f889 	bl	8001e2c <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1e:	f7fe f885 	bl	8001e2c <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e14c      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d30:	4b31      	ldr	r3, [pc, #196]	; (8003df8 <HAL_RCC_OscConfig+0x56c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x492>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d108      	bne.n	8003d56 <HAL_RCC_OscConfig+0x4ca>
 8003d44:	4a2b      	ldr	r2, [pc, #172]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003d46:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d54:	e024      	b.n	8003da0 <HAL_RCC_OscConfig+0x514>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	2b05      	cmp	r3, #5
 8003d5c:	d110      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4f4>
 8003d5e:	4a25      	ldr	r2, [pc, #148]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003d60:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d66:	f043 0304 	orr.w	r3, r3, #4
 8003d6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d6e:	4a21      	ldr	r2, [pc, #132]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003d70:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d7e:	e00f      	b.n	8003da0 <HAL_RCC_OscConfig+0x514>
 8003d80:	4a1c      	ldr	r2, [pc, #112]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003d82:	4b1c      	ldr	r3, [pc, #112]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d88:	f023 0301 	bic.w	r3, r3, #1
 8003d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d90:	4a18      	ldr	r2, [pc, #96]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003d92:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d98:	f023 0304 	bic.w	r3, r3, #4
 8003d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d016      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da8:	f7fe f840 	bl	8001e2c <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dae:	e00a      	b.n	8003dc6 <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db0:	f7fe f83c 	bl	8001e2c <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e101      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_RCC_OscConfig+0x568>)
 8003dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ed      	beq.n	8003db0 <HAL_RCC_OscConfig+0x524>
 8003dd4:	e019      	b.n	8003e0a <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd6:	f7fe f829 	bl	8001e2c <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ddc:	e00e      	b.n	8003dfc <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dde:	f7fe f825 	bl	8001e2c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d905      	bls.n	8003dfc <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e0ea      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dfc:	4b75      	ldr	r3, [pc, #468]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1e9      	bne.n	8003dde <HAL_RCC_OscConfig+0x552>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e0a:	7ffb      	ldrb	r3, [r7, #31]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e10:	4a70      	ldr	r2, [pc, #448]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003e12:	4b70      	ldr	r3, [pc, #448]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d03c      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x616>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01c      	beq.n	8003e6a <HAL_RCC_OscConfig+0x5de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e30:	4a68      	ldr	r2, [pc, #416]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003e32:	4b68      	ldr	r3, [pc, #416]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003e34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e40:	f7fd fff4 	bl	8001e2c <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x5ce>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e48:	f7fd fff0 	bl	8001e2c <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e0b7      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e5a:	4b5e      	ldr	r3, [pc, #376]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003e5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0ef      	beq.n	8003e48 <HAL_RCC_OscConfig+0x5bc>
 8003e68:	e01b      	b.n	8003ea2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e6a:	4a5a      	ldr	r2, [pc, #360]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003e6c:	4b59      	ldr	r3, [pc, #356]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003e6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e72:	f023 0301 	bic.w	r3, r3, #1
 8003e76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7a:	f7fd ffd7 	bl	8001e2c <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e82:	f7fd ffd3 	bl	8001e2c <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e09a      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e94:	4b4f      	ldr	r3, [pc, #316]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1ef      	bne.n	8003e82 <HAL_RCC_OscConfig+0x5f6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 808e 	beq.w	8003fc8 <HAL_RCC_OscConfig+0x73c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b0c      	cmp	r3, #12
 8003eb0:	f000 8088 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x738>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d155      	bne.n	8003f68 <HAL_RCC_OscConfig+0x6dc>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ebc:	4a45      	ldr	r2, [pc, #276]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003ebe:	4b45      	ldr	r3, [pc, #276]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fd ffb0 	bl	8001e2c <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fd ffac 	bl	8001e2c <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e073      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee2:	4b3c      	ldr	r3, [pc, #240]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x644>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eee:	4939      	ldr	r1, [pc, #228]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	011a      	lsls	r2, r3, #4
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0a:	085b      	lsrs	r3, r3, #1
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	055b      	lsls	r3, r3, #21
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	085b      	lsrs	r3, r3, #1
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	065b      	lsls	r3, r3, #25
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	06db      	lsls	r3, r3, #27
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f28:	4a2a      	ldr	r2, [pc, #168]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003f2a:	4b2a      	ldr	r3, [pc, #168]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f34:	4a27      	ldr	r2, [pc, #156]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003f36:	4b27      	ldr	r3, [pc, #156]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fd ff74 	bl	8001e2c <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x6ce>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f48:	f7fd ff70 	bl	8001e2c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x6ce>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e037      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f5a:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0x6bc>
 8003f66:	e02f      	b.n	8003fc8 <HAL_RCC_OscConfig+0x73c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f68:	4a1a      	ldr	r2, [pc, #104]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003f6a:	4b1a      	ldr	r3, [pc, #104]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f72:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f74:	4b17      	ldr	r3, [pc, #92]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d105      	bne.n	8003f8c <HAL_RCC_OscConfig+0x700>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f80:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003f82:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f023 0303 	bic.w	r3, r3, #3
 8003f8a:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f8c:	4a11      	ldr	r2, [pc, #68]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003f8e:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f9a:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fd ff46 	bl	8001e2c <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x72a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa4:	f7fd ff42 	bl	8001e2c <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x72a>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e009      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb6:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <HAL_RCC_OscConfig+0x748>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x718>
 8003fc2:	e001      	b.n	8003fc8 <HAL_RCC_OscConfig+0x73c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <HAL_RCC_OscConfig+0x73e>
    }
  }
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3720      	adds	r7, #32
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40021000 	.word	0x40021000

08003fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0c6      	b.n	800417a <HAL_RCC_ClockConfig+0x1a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fec:	4b65      	ldr	r3, [pc, #404]	; (8004184 <HAL_RCC_ClockConfig+0x1ac>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0207 	and.w	r2, r3, #7
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d210      	bcs.n	800401c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffa:	4962      	ldr	r1, [pc, #392]	; (8004184 <HAL_RCC_ClockConfig+0x1ac>)
 8003ffc:	4b61      	ldr	r3, [pc, #388]	; (8004184 <HAL_RCC_ClockConfig+0x1ac>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f023 0207 	bic.w	r2, r3, #7
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b5e      	ldr	r3, [pc, #376]	; (8004184 <HAL_RCC_ClockConfig+0x1ac>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0207 	and.w	r2, r3, #7
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0ae      	b.n	800417a <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d04c      	beq.n	80040c2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b03      	cmp	r3, #3
 800402e:	d107      	bne.n	8004040 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004030:	4b55      	ldr	r3, [pc, #340]	; (8004188 <HAL_RCC_ClockConfig+0x1b0>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d121      	bne.n	8004080 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e09c      	b.n	800417a <HAL_RCC_ClockConfig+0x1a2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d107      	bne.n	8004058 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004048:	4b4f      	ldr	r3, [pc, #316]	; (8004188 <HAL_RCC_ClockConfig+0x1b0>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d115      	bne.n	8004080 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e090      	b.n	800417a <HAL_RCC_ClockConfig+0x1a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d107      	bne.n	8004070 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004060:	4b49      	ldr	r3, [pc, #292]	; (8004188 <HAL_RCC_ClockConfig+0x1b0>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d109      	bne.n	8004080 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e084      	b.n	800417a <HAL_RCC_ClockConfig+0x1a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004070:	4b45      	ldr	r3, [pc, #276]	; (8004188 <HAL_RCC_ClockConfig+0x1b0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e07c      	b.n	800417a <HAL_RCC_ClockConfig+0x1a2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004080:	4941      	ldr	r1, [pc, #260]	; (8004188 <HAL_RCC_ClockConfig+0x1b0>)
 8004082:	4b41      	ldr	r3, [pc, #260]	; (8004188 <HAL_RCC_ClockConfig+0x1b0>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f023 0203 	bic.w	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4313      	orrs	r3, r2
 8004090:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004092:	f7fd fecb 	bl	8001e2c <HAL_GetTick>
 8004096:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004098:	e00a      	b.n	80040b0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409a:	f7fd fec7 	bl	8001e2c <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e064      	b.n	800417a <HAL_RCC_ClockConfig+0x1a2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b0:	4b35      	ldr	r3, [pc, #212]	; (8004188 <HAL_RCC_ClockConfig+0x1b0>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 020c 	and.w	r2, r3, #12
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	429a      	cmp	r2, r3
 80040c0:	d1eb      	bne.n	800409a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d008      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ce:	492e      	ldr	r1, [pc, #184]	; (8004188 <HAL_RCC_ClockConfig+0x1b0>)
 80040d0:	4b2d      	ldr	r3, [pc, #180]	; (8004188 <HAL_RCC_ClockConfig+0x1b0>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	4313      	orrs	r3, r2
 80040de:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040e0:	4b28      	ldr	r3, [pc, #160]	; (8004184 <HAL_RCC_ClockConfig+0x1ac>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0207 	and.w	r2, r3, #7
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d910      	bls.n	8004110 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ee:	4925      	ldr	r1, [pc, #148]	; (8004184 <HAL_RCC_ClockConfig+0x1ac>)
 80040f0:	4b24      	ldr	r3, [pc, #144]	; (8004184 <HAL_RCC_ClockConfig+0x1ac>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f023 0207 	bic.w	r2, r3, #7
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fe:	4b21      	ldr	r3, [pc, #132]	; (8004184 <HAL_RCC_ClockConfig+0x1ac>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0207 	and.w	r2, r3, #7
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d001      	beq.n	8004110 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e034      	b.n	800417a <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800411c:	491a      	ldr	r1, [pc, #104]	; (8004188 <HAL_RCC_ClockConfig+0x1b0>)
 800411e:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <HAL_RCC_ClockConfig+0x1b0>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d009      	beq.n	800414e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800413a:	4913      	ldr	r1, [pc, #76]	; (8004188 <HAL_RCC_ClockConfig+0x1b0>)
 800413c:	4b12      	ldr	r3, [pc, #72]	; (8004188 <HAL_RCC_ClockConfig+0x1b0>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	4313      	orrs	r3, r2
 800414c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800414e:	f000 f821 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 8004152:	4601      	mov	r1, r0
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <HAL_RCC_ClockConfig+0x1b0>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	4a0b      	ldr	r2, [pc, #44]	; (800418c <HAL_RCC_ClockConfig+0x1b4>)
 8004160:	5cd3      	ldrb	r3, [r2, r3]
 8004162:	f003 031f 	and.w	r3, r3, #31
 8004166:	fa21 f303 	lsr.w	r3, r1, r3
 800416a:	4a09      	ldr	r2, [pc, #36]	; (8004190 <HAL_RCC_ClockConfig+0x1b8>)
 800416c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800416e:	2000      	movs	r0, #0
 8004170:	f7fd fe2a 	bl	8001dc8 <HAL_InitTick>
 8004174:	4603      	mov	r3, r0
 8004176:	72fb      	strb	r3, [r7, #11]

  return status;
 8004178:	7afb      	ldrb	r3, [r7, #11]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40022000 	.word	0x40022000
 8004188:	40021000 	.word	0x40021000
 800418c:	0800c070 	.word	0x0800c070
 8004190:	20000908 	.word	0x20000908

08004194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004194:	b480      	push	{r7}
 8004196:	b089      	sub	sp, #36	; 0x24
 8004198:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	2300      	movs	r3, #0
 80041a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041a2:	4b46      	ldr	r3, [pc, #280]	; (80042bc <HAL_RCC_GetSysClockFreq+0x128>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041ac:	4b43      	ldr	r3, [pc, #268]	; (80042bc <HAL_RCC_GetSysClockFreq+0x128>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <HAL_RCC_GetSysClockFreq+0x34>
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	2b0c      	cmp	r3, #12
 80041c0:	d121      	bne.n	8004206 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d11e      	bne.n	8004206 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041c8:	4b3c      	ldr	r3, [pc, #240]	; (80042bc <HAL_RCC_GetSysClockFreq+0x128>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d107      	bne.n	80041e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041d4:	4b39      	ldr	r3, [pc, #228]	; (80042bc <HAL_RCC_GetSysClockFreq+0x128>)
 80041d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041da:	0a1b      	lsrs	r3, r3, #8
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	e005      	b.n	80041f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041e4:	4b35      	ldr	r3, [pc, #212]	; (80042bc <HAL_RCC_GetSysClockFreq+0x128>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041f0:	4a33      	ldr	r2, [pc, #204]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10d      	bne.n	800421c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004204:	e00a      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b04      	cmp	r3, #4
 800420a:	d102      	bne.n	8004212 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800420c:	4b2d      	ldr	r3, [pc, #180]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x130>)
 800420e:	61bb      	str	r3, [r7, #24]
 8004210:	e004      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	2b08      	cmp	r3, #8
 8004216:	d101      	bne.n	800421c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004218:	4b2b      	ldr	r3, [pc, #172]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x134>)
 800421a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2b0c      	cmp	r3, #12
 8004220:	d145      	bne.n	80042ae <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004222:	4b26      	ldr	r3, [pc, #152]	; (80042bc <HAL_RCC_GetSysClockFreq+0x128>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800422c:	4b23      	ldr	r3, [pc, #140]	; (80042bc <HAL_RCC_GetSysClockFreq+0x128>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	3301      	adds	r3, #1
 8004238:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d002      	beq.n	8004246 <HAL_RCC_GetSysClockFreq+0xb2>
 8004240:	2b03      	cmp	r3, #3
 8004242:	d00d      	beq.n	8004260 <HAL_RCC_GetSysClockFreq+0xcc>
 8004244:	e019      	b.n	800427a <HAL_RCC_GetSysClockFreq+0xe6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004246:	4a1f      	ldr	r2, [pc, #124]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x130>)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	fbb2 f3f3 	udiv	r3, r2, r3
 800424e:	4a1b      	ldr	r2, [pc, #108]	; (80042bc <HAL_RCC_GetSysClockFreq+0x128>)
 8004250:	68d2      	ldr	r2, [r2, #12]
 8004252:	0a12      	lsrs	r2, r2, #8
 8004254:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004258:	fb02 f303 	mul.w	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]
      break;
 800425e:	e019      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004260:	4a19      	ldr	r2, [pc, #100]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x134>)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	4a14      	ldr	r2, [pc, #80]	; (80042bc <HAL_RCC_GetSysClockFreq+0x128>)
 800426a:	68d2      	ldr	r2, [r2, #12]
 800426c:	0a12      	lsrs	r2, r2, #8
 800426e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	617b      	str	r3, [r7, #20]
      break;
 8004278:	e00c      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004282:	4a0e      	ldr	r2, [pc, #56]	; (80042bc <HAL_RCC_GetSysClockFreq+0x128>)
 8004284:	68d2      	ldr	r2, [r2, #12]
 8004286:	0a12      	lsrs	r2, r2, #8
 8004288:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800428c:	fb02 f303 	mul.w	r3, r2, r3
 8004290:	617b      	str	r3, [r7, #20]
      break;
 8004292:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004294:	4b09      	ldr	r3, [pc, #36]	; (80042bc <HAL_RCC_GetSysClockFreq+0x128>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	0e5b      	lsrs	r3, r3, #25
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	3301      	adds	r3, #1
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco/pllr;
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042ae:	69bb      	ldr	r3, [r7, #24]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3724      	adds	r7, #36	; 0x24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	40021000 	.word	0x40021000
 80042c0:	0800c088 	.word	0x0800c088
 80042c4:	00f42400 	.word	0x00f42400
 80042c8:	007a1200 	.word	0x007a1200

080042cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042d0:	4b03      	ldr	r3, [pc, #12]	; (80042e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042d2:	681b      	ldr	r3, [r3, #0]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000908 	.word	0x20000908

080042e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042e8:	f7ff fff0 	bl	80042cc <HAL_RCC_GetHCLKFreq>
 80042ec:	4601      	mov	r1, r0
 80042ee:	4b06      	ldr	r3, [pc, #24]	; (8004308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	0a1b      	lsrs	r3, r3, #8
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	4a04      	ldr	r2, [pc, #16]	; (800430c <HAL_RCC_GetPCLK1Freq+0x28>)
 80042fa:	5cd3      	ldrb	r3, [r2, r3]
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004304:	4618      	mov	r0, r3
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40021000 	.word	0x40021000
 800430c:	0800c080 	.word	0x0800c080

08004310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004314:	f7ff ffda 	bl	80042cc <HAL_RCC_GetHCLKFreq>
 8004318:	4601      	mov	r1, r0
 800431a:	4b06      	ldr	r3, [pc, #24]	; (8004334 <HAL_RCC_GetPCLK2Freq+0x24>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	0adb      	lsrs	r3, r3, #11
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	4a04      	ldr	r2, [pc, #16]	; (8004338 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004326:	5cd3      	ldrb	r3, [r2, r3]
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004330:	4618      	mov	r0, r3
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40021000 	.word	0x40021000
 8004338:	0800c080 	.word	0x0800c080

0800433c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004344:	2300      	movs	r3, #0
 8004346:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004348:	4b2a      	ldr	r3, [pc, #168]	; (80043f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800434a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004354:	f7ff fa26 	bl	80037a4 <HAL_PWREx_GetVoltageRange>
 8004358:	6178      	str	r0, [r7, #20]
 800435a:	e014      	b.n	8004386 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800435c:	4a25      	ldr	r2, [pc, #148]	; (80043f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800435e:	4b25      	ldr	r3, [pc, #148]	; (80043f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004366:	6593      	str	r3, [r2, #88]	; 0x58
 8004368:	4b22      	ldr	r3, [pc, #136]	; (80043f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800436a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004374:	f7ff fa16 	bl	80037a4 <HAL_PWREx_GetVoltageRange>
 8004378:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800437a:	4a1e      	ldr	r2, [pc, #120]	; (80043f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800437c:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800437e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004384:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800438c:	d10b      	bne.n	80043a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b80      	cmp	r3, #128	; 0x80
 8004392:	d919      	bls.n	80043c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2ba0      	cmp	r3, #160	; 0xa0
 8004398:	d902      	bls.n	80043a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800439a:	2302      	movs	r3, #2
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	e013      	b.n	80043c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043a0:	2301      	movs	r3, #1
 80043a2:	613b      	str	r3, [r7, #16]
 80043a4:	e010      	b.n	80043c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b80      	cmp	r3, #128	; 0x80
 80043aa:	d902      	bls.n	80043b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80043ac:	2303      	movs	r3, #3
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	e00a      	b.n	80043c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b80      	cmp	r3, #128	; 0x80
 80043b6:	d102      	bne.n	80043be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043b8:	2302      	movs	r3, #2
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	e004      	b.n	80043c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b70      	cmp	r3, #112	; 0x70
 80043c2:	d101      	bne.n	80043c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043c4:	2301      	movs	r3, #1
 80043c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043c8:	490b      	ldr	r1, [pc, #44]	; (80043f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ca:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f023 0207 	bic.w	r2, r3, #7
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043d8:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0207 	and.w	r2, r3, #7
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d001      	beq.n	80043ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40021000 	.word	0x40021000
 80043f8:	40022000 	.word	0x40022000

080043fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004404:	2300      	movs	r3, #0
 8004406:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004408:	2300      	movs	r3, #0
 800440a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004414:	2b00      	cmp	r3, #0
 8004416:	d02f      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004420:	d005      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004422:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004426:	d015      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d007      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800442c:	e00f      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800442e:	4a5d      	ldr	r2, [pc, #372]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004430:	4b5c      	ldr	r3, [pc, #368]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004438:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800443a:	e00c      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3304      	adds	r3, #4
 8004440:	2100      	movs	r1, #0
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fa44 	bl	80048d0 <RCCEx_PLLSAI1_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800444c:	e003      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	74fb      	strb	r3, [r7, #19]
      break;
 8004452:	e000      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8004454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004456:	7cfb      	ldrb	r3, [r7, #19]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10b      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800445c:	4951      	ldr	r1, [pc, #324]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800445e:	4b51      	ldr	r3, [pc, #324]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004464:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004472:	e001      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004474:	7cfb      	ldrb	r3, [r7, #19]
 8004476:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 809e 	beq.w	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004486:	2300      	movs	r3, #0
 8004488:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800448a:	4b46      	ldr	r3, [pc, #280]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800448c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800449a:	2300      	movs	r3, #0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00d      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a0:	4a40      	ldr	r2, [pc, #256]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044a2:	4b40      	ldr	r3, [pc, #256]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044aa:	6593      	str	r3, [r2, #88]	; 0x58
 80044ac:	4b3d      	ldr	r3, [pc, #244]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b8:	2301      	movs	r3, #1
 80044ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044bc:	4a3a      	ldr	r2, [pc, #232]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044be:	4b3a      	ldr	r3, [pc, #232]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044c8:	f7fd fcb0 	bl	8001e2c <HAL_GetTick>
 80044cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044ce:	e009      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d0:	f7fd fcac 	bl	8001e2c <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d902      	bls.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	74fb      	strb	r3, [r7, #19]
        break;
 80044e2:	e005      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044e4:	4b30      	ldr	r3, [pc, #192]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0ef      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80044f0:	7cfb      	ldrb	r3, [r7, #19]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d15a      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044f6:	4b2b      	ldr	r3, [pc, #172]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004500:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01e      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	429a      	cmp	r2, r3
 8004510:	d019      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004512:	4b24      	ldr	r3, [pc, #144]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800451e:	4a21      	ldr	r2, [pc, #132]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004520:	4b20      	ldr	r3, [pc, #128]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800452e:	4a1d      	ldr	r2, [pc, #116]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004530:	4b1c      	ldr	r3, [pc, #112]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800453a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800453e:	4a19      	ldr	r2, [pc, #100]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d016      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fd fc6c 	bl	8001e2c <HAL_GetTick>
 8004554:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004556:	e00b      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004558:	f7fd fc68 	bl	8001e2c <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	f241 3288 	movw	r2, #5000	; 0x1388
 8004566:	4293      	cmp	r3, r2
 8004568:	d902      	bls.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	74fb      	strb	r3, [r7, #19]
            break;
 800456e:	e006      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0ec      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800457e:	7cfb      	ldrb	r3, [r7, #19]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004584:	4907      	ldr	r1, [pc, #28]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004586:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800459a:	e009      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800459c:	7cfb      	ldrb	r3, [r7, #19]
 800459e:	74bb      	strb	r3, [r7, #18]
 80045a0:	e006      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80045a2:	bf00      	nop
 80045a4:	40021000 	.word	0x40021000
 80045a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	7cfb      	ldrb	r3, [r7, #19]
 80045ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045b0:	7c7b      	ldrb	r3, [r7, #17]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d105      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b6:	4a9e      	ldr	r2, [pc, #632]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80045b8:	4b9d      	ldr	r3, [pc, #628]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80045ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ce:	4998      	ldr	r1, [pc, #608]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80045d0:	4b97      	ldr	r3, [pc, #604]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d6:	f023 0203 	bic.w	r2, r3, #3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045f0:	498f      	ldr	r1, [pc, #572]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80045f2:	4b8f      	ldr	r3, [pc, #572]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f8:	f023 020c 	bic.w	r2, r3, #12
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004612:	4987      	ldr	r1, [pc, #540]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004614:	4b86      	ldr	r3, [pc, #536]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004634:	497e      	ldr	r1, [pc, #504]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004636:	4b7e      	ldr	r3, [pc, #504]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004656:	4976      	ldr	r1, [pc, #472]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004658:	4b75      	ldr	r3, [pc, #468]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004678:	496d      	ldr	r1, [pc, #436]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800467a:	4b6d      	ldr	r3, [pc, #436]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004680:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800469a:	4965      	ldr	r1, [pc, #404]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800469c:	4b64      	ldr	r3, [pc, #400]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046bc:	495c      	ldr	r1, [pc, #368]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80046be:	4b5c      	ldr	r3, [pc, #368]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046de:	4954      	ldr	r1, [pc, #336]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80046e0:	4b53      	ldr	r3, [pc, #332]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004700:	494b      	ldr	r1, [pc, #300]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004702:	4b4b      	ldr	r3, [pc, #300]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004708:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004710:	4313      	orrs	r3, r2
 8004712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004722:	4943      	ldr	r1, [pc, #268]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004724:	4b42      	ldr	r3, [pc, #264]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004726:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800472a:	f023 0203 	bic.w	r2, r3, #3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d028      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004744:	493a      	ldr	r1, [pc, #232]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004746:	4b3a      	ldr	r3, [pc, #232]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004762:	d106      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004764:	4a32      	ldr	r2, [pc, #200]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004766:	4b32      	ldr	r3, [pc, #200]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800476e:	60d3      	str	r3, [r2, #12]
 8004770:	e011      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004776:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800477a:	d10c      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3304      	adds	r3, #4
 8004780:	2101      	movs	r1, #1
 8004782:	4618      	mov	r0, r3
 8004784:	f000 f8a4 	bl	80048d0 <RCCEx_PLLSAI1_Config>
 8004788:	4603      	mov	r3, r0
 800478a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800478c:	7cfb      	ldrb	r3, [r7, #19]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8004792:	7cfb      	ldrb	r3, [r7, #19]
 8004794:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d028      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047a2:	4923      	ldr	r1, [pc, #140]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80047a4:	4b22      	ldr	r3, [pc, #136]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c0:	d106      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047c2:	4a1b      	ldr	r2, [pc, #108]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80047c4:	4b1a      	ldr	r3, [pc, #104]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047cc:	60d3      	str	r3, [r2, #12]
 80047ce:	e011      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047d8:	d10c      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3304      	adds	r3, #4
 80047de:	2101      	movs	r1, #1
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 f875 	bl	80048d0 <RCCEx_PLLSAI1_Config>
 80047e6:	4603      	mov	r3, r0
 80047e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ea:	7cfb      	ldrb	r3, [r7, #19]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 80047f0:	7cfb      	ldrb	r3, [r7, #19]
 80047f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d02b      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004800:	490b      	ldr	r1, [pc, #44]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004802:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004808:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800481e:	d109      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004820:	4a03      	ldr	r2, [pc, #12]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004822:	4b03      	ldr	r3, [pc, #12]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800482a:	60d3      	str	r3, [r2, #12]
 800482c:	e014      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 800482e:	bf00      	nop
 8004830:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004838:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800483c:	d10c      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3304      	adds	r3, #4
 8004842:	2101      	movs	r1, #1
 8004844:	4618      	mov	r0, r3
 8004846:	f000 f843 	bl	80048d0 <RCCEx_PLLSAI1_Config>
 800484a:	4603      	mov	r3, r0
 800484c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800484e:	7cfb      	ldrb	r3, [r7, #19]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8004854:	7cfb      	ldrb	r3, [r7, #19]
 8004856:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d01c      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004864:	4919      	ldr	r1, [pc, #100]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004866:	4b19      	ldr	r3, [pc, #100]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004882:	d10c      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3304      	adds	r3, #4
 8004888:	2102      	movs	r1, #2
 800488a:	4618      	mov	r0, r3
 800488c:	f000 f820 	bl	80048d0 <RCCEx_PLLSAI1_Config>
 8004890:	4603      	mov	r3, r0
 8004892:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004894:	7cfb      	ldrb	r3, [r7, #19]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 800489a:	7cfb      	ldrb	r3, [r7, #19]
 800489c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048aa:	4908      	ldr	r1, [pc, #32]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80048ac:	4b07      	ldr	r3, [pc, #28]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000

080048d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048de:	4b73      	ldr	r3, [pc, #460]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d018      	beq.n	800491c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048ea:	4b70      	ldr	r3, [pc, #448]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f003 0203 	and.w	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d10d      	bne.n	8004916 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
       ||
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d009      	beq.n	8004916 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004902:	4b6a      	ldr	r3, [pc, #424]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	091b      	lsrs	r3, r3, #4
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
       ||
 8004912:	429a      	cmp	r2, r3
 8004914:	d044      	beq.n	80049a0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	73fb      	strb	r3, [r7, #15]
 800491a:	e041      	b.n	80049a0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b02      	cmp	r3, #2
 8004922:	d00c      	beq.n	800493e <RCCEx_PLLSAI1_Config+0x6e>
 8004924:	2b03      	cmp	r3, #3
 8004926:	d013      	beq.n	8004950 <RCCEx_PLLSAI1_Config+0x80>
 8004928:	2b01      	cmp	r3, #1
 800492a:	d120      	bne.n	800496e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800492c:	4b5f      	ldr	r3, [pc, #380]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d11d      	bne.n	8004974 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800493c:	e01a      	b.n	8004974 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800493e:	4b5b      	ldr	r3, [pc, #364]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004946:	2b00      	cmp	r3, #0
 8004948:	d116      	bne.n	8004978 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800494e:	e013      	b.n	8004978 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004950:	4b56      	ldr	r3, [pc, #344]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10f      	bne.n	800497c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800495c:	4b53      	ldr	r3, [pc, #332]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d109      	bne.n	800497c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800496c:	e006      	b.n	800497c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	73fb      	strb	r3, [r7, #15]
      break;
 8004972:	e004      	b.n	800497e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004974:	bf00      	nop
 8004976:	e002      	b.n	800497e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004978:	bf00      	nop
 800497a:	e000      	b.n	800497e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800497c:	bf00      	nop
    }

    if(status == HAL_OK)
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10d      	bne.n	80049a0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004984:	4849      	ldr	r0, [pc, #292]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004986:	4b49      	ldr	r3, [pc, #292]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6819      	ldr	r1, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	3b01      	subs	r3, #1
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	430b      	orrs	r3, r1
 800499c:	4313      	orrs	r3, r2
 800499e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d17c      	bne.n	8004aa0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049a6:	4a41      	ldr	r2, [pc, #260]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 80049a8:	4b40      	ldr	r3, [pc, #256]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b2:	f7fd fa3b 	bl	8001e2c <HAL_GetTick>
 80049b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049b8:	e009      	b.n	80049ce <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049ba:	f7fd fa37 	bl	8001e2c <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d902      	bls.n	80049ce <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	73fb      	strb	r3, [r7, #15]
        break;
 80049cc:	e005      	b.n	80049da <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049ce:	4b37      	ldr	r3, [pc, #220]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1ef      	bne.n	80049ba <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d15f      	bne.n	8004aa0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d110      	bne.n	8004a08 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049e6:	4831      	ldr	r0, [pc, #196]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 80049e8:	4b30      	ldr	r3, [pc, #192]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80049f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6892      	ldr	r2, [r2, #8]
 80049f8:	0211      	lsls	r1, r2, #8
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	68d2      	ldr	r2, [r2, #12]
 80049fe:	06d2      	lsls	r2, r2, #27
 8004a00:	430a      	orrs	r2, r1
 8004a02:	4313      	orrs	r3, r2
 8004a04:	6103      	str	r3, [r0, #16]
 8004a06:	e027      	b.n	8004a58 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d112      	bne.n	8004a34 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a0e:	4827      	ldr	r0, [pc, #156]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a10:	4b26      	ldr	r3, [pc, #152]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6892      	ldr	r2, [r2, #8]
 8004a20:	0211      	lsls	r1, r2, #8
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6912      	ldr	r2, [r2, #16]
 8004a26:	0852      	lsrs	r2, r2, #1
 8004a28:	3a01      	subs	r2, #1
 8004a2a:	0552      	lsls	r2, r2, #21
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	6103      	str	r3, [r0, #16]
 8004a32:	e011      	b.n	8004a58 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a34:	481d      	ldr	r0, [pc, #116]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a36:	4b1d      	ldr	r3, [pc, #116]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6892      	ldr	r2, [r2, #8]
 8004a46:	0211      	lsls	r1, r2, #8
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6952      	ldr	r2, [r2, #20]
 8004a4c:	0852      	lsrs	r2, r2, #1
 8004a4e:	3a01      	subs	r2, #1
 8004a50:	0652      	lsls	r2, r2, #25
 8004a52:	430a      	orrs	r2, r1
 8004a54:	4313      	orrs	r3, r2
 8004a56:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a58:	4a14      	ldr	r2, [pc, #80]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a5a:	4b14      	ldr	r3, [pc, #80]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a64:	f7fd f9e2 	bl	8001e2c <HAL_GetTick>
 8004a68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a6a:	e009      	b.n	8004a80 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a6c:	f7fd f9de 	bl	8001e2c <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d902      	bls.n	8004a80 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a7e:	e005      	b.n	8004a8c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a80:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0ef      	beq.n	8004a6c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a92:	4906      	ldr	r1, [pc, #24]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a94:	4b05      	ldr	r3, [pc, #20]	; (8004aac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40021000 	.word	0x40021000

08004ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e01d      	b.n	8004afe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f006 fa72 	bl	800afc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3304      	adds	r3, #4
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f000 fc26 	bl	8005340 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b082      	sub	sp, #8
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e01d      	b.n	8004b54 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d106      	bne.n	8004b32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f006 f987 	bl	800ae40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2202      	movs	r2, #2
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3304      	adds	r3, #4
 8004b42:	4619      	mov	r1, r3
 8004b44:	4610      	mov	r0, r2
 8004b46:	f000 fbfb 	bl	8005340 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e01d      	b.n	8004baa <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f006 f99a 	bl	800aebc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3304      	adds	r3, #4
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f000 fbd0 	bl	8005340 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d122      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d11b      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f06f 0202 	mvn.w	r2, #2
 8004bde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 fb84 	bl	8005302 <HAL_TIM_IC_CaptureCallback>
 8004bfa:	e005      	b.n	8004c08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fb76 	bl	80052ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fb87 	bl	8005316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d122      	bne.n	8004c62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d11b      	bne.n	8004c62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f06f 0204 	mvn.w	r2, #4
 8004c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fb5a 	bl	8005302 <HAL_TIM_IC_CaptureCallback>
 8004c4e:	e005      	b.n	8004c5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fb4c 	bl	80052ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fb5d 	bl	8005316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d122      	bne.n	8004cb6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d11b      	bne.n	8004cb6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f06f 0208 	mvn.w	r2, #8
 8004c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	f003 0303 	and.w	r3, r3, #3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fb30 	bl	8005302 <HAL_TIM_IC_CaptureCallback>
 8004ca2:	e005      	b.n	8004cb0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fb22 	bl	80052ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fb33 	bl	8005316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	f003 0310 	and.w	r3, r3, #16
 8004cc0:	2b10      	cmp	r3, #16
 8004cc2:	d122      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0310 	and.w	r3, r3, #16
 8004cce:	2b10      	cmp	r3, #16
 8004cd0:	d11b      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f06f 0210 	mvn.w	r2, #16
 8004cda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2208      	movs	r2, #8
 8004ce0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fb06 	bl	8005302 <HAL_TIM_IC_CaptureCallback>
 8004cf6:	e005      	b.n	8004d04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 faf8 	bl	80052ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fb09 	bl	8005316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d10e      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d107      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f06f 0201 	mvn.w	r2, #1
 8004d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7fc ffe5 	bl	8001d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d40:	2b80      	cmp	r3, #128	; 0x80
 8004d42:	d10e      	bne.n	8004d62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4e:	2b80      	cmp	r3, #128	; 0x80
 8004d50:	d107      	bne.n	8004d62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f001 f85f 	bl	8005e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d70:	d10e      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7c:	2b80      	cmp	r3, #128	; 0x80
 8004d7e:	d107      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f001 f852 	bl	8005e34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9a:	2b40      	cmp	r3, #64	; 0x40
 8004d9c:	d10e      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da8:	2b40      	cmp	r3, #64	; 0x40
 8004daa:	d107      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fab7 	bl	800532a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d10e      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d107      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0220 	mvn.w	r2, #32
 8004de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f001 f812 	bl	8005e0c <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004de8:	bf00      	nop
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_TIM_IC_ConfigChannel+0x1a>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e08a      	b.n	8004f20 <HAL_TIM_IC_ConfigChannel+0x130>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2202      	movs	r2, #2
 8004e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d11b      	bne.n	8004e58 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	6819      	ldr	r1, [r3, #0]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f000 fd72 	bl	8005918 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	6992      	ldr	r2, [r2, #24]
 8004e3e:	f022 020c 	bic.w	r2, r2, #12
 8004e42:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	6812      	ldr	r2, [r2, #0]
 8004e4c:	6991      	ldr	r1, [r2, #24]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	6892      	ldr	r2, [r2, #8]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	619a      	str	r2, [r3, #24]
 8004e56:	e05a      	b.n	8004f0e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d11c      	bne.n	8004e98 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	6819      	ldr	r1, [r3, #0]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f000 fdde 	bl	8005a2e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	6992      	ldr	r2, [r2, #24]
 8004e7c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e80:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	6812      	ldr	r2, [r2, #0]
 8004e8a:	6991      	ldr	r1, [r2, #24]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	6892      	ldr	r2, [r2, #8]
 8004e90:	0212      	lsls	r2, r2, #8
 8004e92:	430a      	orrs	r2, r1
 8004e94:	619a      	str	r2, [r3, #24]
 8004e96:	e03a      	b.n	8004f0e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d11b      	bne.n	8004ed6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	6819      	ldr	r1, [r3, #0]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f000 fe2b 	bl	8005b08 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	69d2      	ldr	r2, [r2, #28]
 8004ebc:	f022 020c 	bic.w	r2, r2, #12
 8004ec0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	6812      	ldr	r2, [r2, #0]
 8004eca:	69d1      	ldr	r1, [r2, #28]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	6892      	ldr	r2, [r2, #8]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	61da      	str	r2, [r3, #28]
 8004ed4:	e01b      	b.n	8004f0e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	6819      	ldr	r1, [r3, #0]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f000 fe4b 	bl	8005b80 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	6812      	ldr	r2, [r2, #0]
 8004ef2:	69d2      	ldr	r2, [r2, #28]
 8004ef4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ef8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	6812      	ldr	r2, [r2, #0]
 8004f02:	69d1      	ldr	r1, [r2, #28]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	6892      	ldr	r2, [r2, #8]
 8004f08:	0212      	lsls	r2, r2, #8
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d101      	bne.n	8004f42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e105      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x226>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b14      	cmp	r3, #20
 8004f56:	f200 80f0 	bhi.w	800513a <HAL_TIM_PWM_ConfigChannel+0x212>
 8004f5a:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f60:	08004fb5 	.word	0x08004fb5
 8004f64:	0800513b 	.word	0x0800513b
 8004f68:	0800513b 	.word	0x0800513b
 8004f6c:	0800513b 	.word	0x0800513b
 8004f70:	08004ff5 	.word	0x08004ff5
 8004f74:	0800513b 	.word	0x0800513b
 8004f78:	0800513b 	.word	0x0800513b
 8004f7c:	0800513b 	.word	0x0800513b
 8004f80:	08005037 	.word	0x08005037
 8004f84:	0800513b 	.word	0x0800513b
 8004f88:	0800513b 	.word	0x0800513b
 8004f8c:	0800513b 	.word	0x0800513b
 8004f90:	08005077 	.word	0x08005077
 8004f94:	0800513b 	.word	0x0800513b
 8004f98:	0800513b 	.word	0x0800513b
 8004f9c:	0800513b 	.word	0x0800513b
 8004fa0:	080050b9 	.word	0x080050b9
 8004fa4:	0800513b 	.word	0x0800513b
 8004fa8:	0800513b 	.word	0x0800513b
 8004fac:	0800513b 	.word	0x0800513b
 8004fb0:	080050f9 	.word	0x080050f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fa2e 	bl	800541c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	6992      	ldr	r2, [r2, #24]
 8004fca:	f042 0208 	orr.w	r2, r2, #8
 8004fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	6992      	ldr	r2, [r2, #24]
 8004fda:	f022 0204 	bic.w	r2, r2, #4
 8004fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	6812      	ldr	r2, [r2, #0]
 8004fe8:	6991      	ldr	r1, [r2, #24]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	6912      	ldr	r2, [r2, #16]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	619a      	str	r2, [r3, #24]
      break;
 8004ff2:	e0a3      	b.n	800513c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fa8a 	bl	8005514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	6812      	ldr	r2, [r2, #0]
 8005008:	6992      	ldr	r2, [r2, #24]
 800500a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800500e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	6992      	ldr	r2, [r2, #24]
 800501a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800501e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	6812      	ldr	r2, [r2, #0]
 8005028:	6991      	ldr	r1, [r2, #24]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	6912      	ldr	r2, [r2, #16]
 800502e:	0212      	lsls	r2, r2, #8
 8005030:	430a      	orrs	r2, r1
 8005032:	619a      	str	r2, [r3, #24]
      break;
 8005034:	e082      	b.n	800513c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fae3 	bl	8005608 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	69d2      	ldr	r2, [r2, #28]
 800504c:	f042 0208 	orr.w	r2, r2, #8
 8005050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	69d2      	ldr	r2, [r2, #28]
 800505c:	f022 0204 	bic.w	r2, r2, #4
 8005060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	69d1      	ldr	r1, [r2, #28]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	6912      	ldr	r2, [r2, #16]
 8005070:	430a      	orrs	r2, r1
 8005072:	61da      	str	r2, [r3, #28]
      break;
 8005074:	e062      	b.n	800513c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68b9      	ldr	r1, [r7, #8]
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fb3b 	bl	80056f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	6812      	ldr	r2, [r2, #0]
 800508a:	69d2      	ldr	r2, [r2, #28]
 800508c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005090:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	6812      	ldr	r2, [r2, #0]
 800509a:	69d2      	ldr	r2, [r2, #28]
 800509c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	69d1      	ldr	r1, [r2, #28]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	6912      	ldr	r2, [r2, #16]
 80050b0:	0212      	lsls	r2, r2, #8
 80050b2:	430a      	orrs	r2, r1
 80050b4:	61da      	str	r2, [r3, #28]
      break;
 80050b6:	e041      	b.n	800513c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68b9      	ldr	r1, [r7, #8]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fb78 	bl	80057b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80050ce:	f042 0208 	orr.w	r2, r2, #8
 80050d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80050de:	f022 0204 	bic.w	r2, r2, #4
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	6912      	ldr	r2, [r2, #16]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050f6:	e021      	b.n	800513c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fbb0 	bl	8005864 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	6812      	ldr	r2, [r2, #0]
 800510c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800510e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005112:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	6812      	ldr	r2, [r2, #0]
 800511c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800511e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005122:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	6812      	ldr	r2, [r2, #0]
 800512c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	6912      	ldr	r2, [r2, #16]
 8005132:	0212      	lsls	r2, r2, #8
 8005134:	430a      	orrs	r2, r1
 8005136:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005138:	e000      	b.n	800513c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800513a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop

08005158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_TIM_ConfigClockSource+0x18>
 800516c:	2302      	movs	r3, #2
 800516e:	e0ba      	b.n	80052e6 <HAL_TIM_ConfigClockSource+0x18e>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800518e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005192:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800519a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b40      	cmp	r3, #64	; 0x40
 80051aa:	d07a      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0x14a>
 80051ac:	2b40      	cmp	r3, #64	; 0x40
 80051ae:	d80d      	bhi.n	80051cc <HAL_TIM_ConfigClockSource+0x74>
 80051b0:	2b10      	cmp	r3, #16
 80051b2:	f000 8086 	beq.w	80052c2 <HAL_TIM_ConfigClockSource+0x16a>
 80051b6:	2b10      	cmp	r3, #16
 80051b8:	d803      	bhi.n	80051c2 <HAL_TIM_ConfigClockSource+0x6a>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 8081 	beq.w	80052c2 <HAL_TIM_ConfigClockSource+0x16a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80051c0:	e088      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d07d      	beq.n	80052c2 <HAL_TIM_ConfigClockSource+0x16a>
 80051c6:	2b30      	cmp	r3, #48	; 0x30
 80051c8:	d07b      	beq.n	80052c2 <HAL_TIM_ConfigClockSource+0x16a>
      break;
 80051ca:	e083      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 80051cc:	2b70      	cmp	r3, #112	; 0x70
 80051ce:	d018      	beq.n	8005202 <HAL_TIM_ConfigClockSource+0xaa>
 80051d0:	2b70      	cmp	r3, #112	; 0x70
 80051d2:	d804      	bhi.n	80051de <HAL_TIM_ConfigClockSource+0x86>
 80051d4:	2b50      	cmp	r3, #80	; 0x50
 80051d6:	d044      	beq.n	8005262 <HAL_TIM_ConfigClockSource+0x10a>
 80051d8:	2b60      	cmp	r3, #96	; 0x60
 80051da:	d052      	beq.n	8005282 <HAL_TIM_ConfigClockSource+0x12a>
      break;
 80051dc:	e07a      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 80051de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e2:	d003      	beq.n	80051ec <HAL_TIM_ConfigClockSource+0x94>
 80051e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051e8:	d028      	beq.n	800523c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 80051ea:	e073      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x17c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051fa:	f023 0307 	bic.w	r3, r3, #7
 80051fe:	6093      	str	r3, [r2, #8]
      break;
 8005200:	e068      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	6899      	ldr	r1, [r3, #8]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f000 fd0d 	bl	8005c30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005224:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005228:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005230:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	609a      	str	r2, [r3, #8]
      break;
 800523a:	e04b      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	6899      	ldr	r1, [r3, #8]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f000 fcf0 	bl	8005c30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	6892      	ldr	r2, [r2, #8]
 800525a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800525e:	609a      	str	r2, [r3, #8]
      break;
 8005260:	e038      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6818      	ldr	r0, [r3, #0]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	6859      	ldr	r1, [r3, #4]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	461a      	mov	r2, r3
 8005270:	f000 fbae 	bl	80059d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2150      	movs	r1, #80	; 0x50
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fcbd 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 8005280:	e028      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6859      	ldr	r1, [r3, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	461a      	mov	r2, r3
 8005290:	f000 fc0a 	bl	8005aa8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2160      	movs	r1, #96	; 0x60
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fcad 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 80052a0:	e018      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6859      	ldr	r1, [r3, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	461a      	mov	r2, r3
 80052b0:	f000 fb8e 	bl	80059d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2140      	movs	r1, #64	; 0x40
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fc9d 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 80052c0:	e008      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4619      	mov	r1, r3
 80052cc:	4610      	mov	r0, r2
 80052ce:	f000 fc94 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 80052d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
	...

08005340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a2e      	ldr	r2, [pc, #184]	; (800540c <TIM_Base_SetConfig+0xcc>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d007      	beq.n	8005368 <TIM_Base_SetConfig+0x28>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535e:	d003      	beq.n	8005368 <TIM_Base_SetConfig+0x28>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a2b      	ldr	r2, [pc, #172]	; (8005410 <TIM_Base_SetConfig+0xd0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d108      	bne.n	800537a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a23      	ldr	r2, [pc, #140]	; (800540c <TIM_Base_SetConfig+0xcc>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00f      	beq.n	80053a2 <TIM_Base_SetConfig+0x62>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005388:	d00b      	beq.n	80053a2 <TIM_Base_SetConfig+0x62>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a20      	ldr	r2, [pc, #128]	; (8005410 <TIM_Base_SetConfig+0xd0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d007      	beq.n	80053a2 <TIM_Base_SetConfig+0x62>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a1f      	ldr	r2, [pc, #124]	; (8005414 <TIM_Base_SetConfig+0xd4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d003      	beq.n	80053a2 <TIM_Base_SetConfig+0x62>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a1e      	ldr	r2, [pc, #120]	; (8005418 <TIM_Base_SetConfig+0xd8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d108      	bne.n	80053b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a0c      	ldr	r2, [pc, #48]	; (800540c <TIM_Base_SetConfig+0xcc>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d007      	beq.n	80053f0 <TIM_Base_SetConfig+0xb0>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a0c      	ldr	r2, [pc, #48]	; (8005414 <TIM_Base_SetConfig+0xd4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d003      	beq.n	80053f0 <TIM_Base_SetConfig+0xb0>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a0b      	ldr	r2, [pc, #44]	; (8005418 <TIM_Base_SetConfig+0xd8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d103      	bne.n	80053f8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	691a      	ldr	r2, [r3, #16]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	615a      	str	r2, [r3, #20]
}
 80053fe:	bf00      	nop
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40012c00 	.word	0x40012c00
 8005410:	40000400 	.word	0x40000400
 8005414:	40014000 	.word	0x40014000
 8005418:	40014400 	.word	0x40014400

0800541c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	f023 0201 	bic.w	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800544a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0303 	bic.w	r3, r3, #3
 8005456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f023 0302 	bic.w	r3, r3, #2
 8005468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a24      	ldr	r2, [pc, #144]	; (8005508 <TIM_OC1_SetConfig+0xec>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d007      	beq.n	800548c <TIM_OC1_SetConfig+0x70>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a23      	ldr	r2, [pc, #140]	; (800550c <TIM_OC1_SetConfig+0xf0>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d003      	beq.n	800548c <TIM_OC1_SetConfig+0x70>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a22      	ldr	r2, [pc, #136]	; (8005510 <TIM_OC1_SetConfig+0xf4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d10c      	bne.n	80054a6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f023 0308 	bic.w	r3, r3, #8
 8005492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f023 0304 	bic.w	r3, r3, #4
 80054a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a17      	ldr	r2, [pc, #92]	; (8005508 <TIM_OC1_SetConfig+0xec>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d007      	beq.n	80054be <TIM_OC1_SetConfig+0xa2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a16      	ldr	r2, [pc, #88]	; (800550c <TIM_OC1_SetConfig+0xf0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d003      	beq.n	80054be <TIM_OC1_SetConfig+0xa2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a15      	ldr	r2, [pc, #84]	; (8005510 <TIM_OC1_SetConfig+0xf4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d111      	bne.n	80054e2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	621a      	str	r2, [r3, #32]
}
 80054fc:	bf00      	nop
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40014000 	.word	0x40014000
 8005510:	40014400 	.word	0x40014400

08005514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f023 0210 	bic.w	r2, r3, #16
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f023 0320 	bic.w	r3, r3, #32
 8005562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4313      	orrs	r3, r2
 800556e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a22      	ldr	r2, [pc, #136]	; (80055fc <TIM_OC2_SetConfig+0xe8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d10d      	bne.n	8005594 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800557e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005592:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a19      	ldr	r2, [pc, #100]	; (80055fc <TIM_OC2_SetConfig+0xe8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d007      	beq.n	80055ac <TIM_OC2_SetConfig+0x98>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a18      	ldr	r2, [pc, #96]	; (8005600 <TIM_OC2_SetConfig+0xec>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d003      	beq.n	80055ac <TIM_OC2_SetConfig+0x98>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a17      	ldr	r2, [pc, #92]	; (8005604 <TIM_OC2_SetConfig+0xf0>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d113      	bne.n	80055d4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	621a      	str	r2, [r3, #32]
}
 80055ee:	bf00      	nop
 80055f0:	371c      	adds	r7, #28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40012c00 	.word	0x40012c00
 8005600:	40014000 	.word	0x40014000
 8005604:	40014400 	.word	0x40014400

08005608 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0303 	bic.w	r3, r3, #3
 8005642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a21      	ldr	r2, [pc, #132]	; (80056ec <TIM_OC3_SetConfig+0xe4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d10d      	bne.n	8005686 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a18      	ldr	r2, [pc, #96]	; (80056ec <TIM_OC3_SetConfig+0xe4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d007      	beq.n	800569e <TIM_OC3_SetConfig+0x96>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a17      	ldr	r2, [pc, #92]	; (80056f0 <TIM_OC3_SetConfig+0xe8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d003      	beq.n	800569e <TIM_OC3_SetConfig+0x96>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a16      	ldr	r2, [pc, #88]	; (80056f4 <TIM_OC3_SetConfig+0xec>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d113      	bne.n	80056c6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	621a      	str	r2, [r3, #32]
}
 80056e0:	bf00      	nop
 80056e2:	371c      	adds	r7, #28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	40012c00 	.word	0x40012c00
 80056f0:	40014000 	.word	0x40014000
 80056f4:	40014400 	.word	0x40014400

080056f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800572a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	021b      	lsls	r3, r3, #8
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	031b      	lsls	r3, r3, #12
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a14      	ldr	r2, [pc, #80]	; (80057a8 <TIM_OC4_SetConfig+0xb0>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d007      	beq.n	800576c <TIM_OC4_SetConfig+0x74>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a13      	ldr	r2, [pc, #76]	; (80057ac <TIM_OC4_SetConfig+0xb4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <TIM_OC4_SetConfig+0x74>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a12      	ldr	r2, [pc, #72]	; (80057b0 <TIM_OC4_SetConfig+0xb8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d109      	bne.n	8005780 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005772:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	019b      	lsls	r3, r3, #6
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	621a      	str	r2, [r3, #32]
}
 800579a:	bf00      	nop
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40012c00 	.word	0x40012c00
 80057ac:	40014000 	.word	0x40014000
 80057b0:	40014400 	.word	0x40014400

080057b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80057f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	041b      	lsls	r3, r3, #16
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a13      	ldr	r2, [pc, #76]	; (8005858 <TIM_OC5_SetConfig+0xa4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d007      	beq.n	800581e <TIM_OC5_SetConfig+0x6a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a12      	ldr	r2, [pc, #72]	; (800585c <TIM_OC5_SetConfig+0xa8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d003      	beq.n	800581e <TIM_OC5_SetConfig+0x6a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a11      	ldr	r2, [pc, #68]	; (8005860 <TIM_OC5_SetConfig+0xac>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d109      	bne.n	8005832 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005824:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	021b      	lsls	r3, r3, #8
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	621a      	str	r2, [r3, #32]
}
 800584c:	bf00      	nop
 800584e:	371c      	adds	r7, #28
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	40012c00 	.word	0x40012c00
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400

08005864 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	021b      	lsls	r3, r3, #8
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	051b      	lsls	r3, r3, #20
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a14      	ldr	r2, [pc, #80]	; (800590c <TIM_OC6_SetConfig+0xa8>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d007      	beq.n	80058d0 <TIM_OC6_SetConfig+0x6c>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a13      	ldr	r2, [pc, #76]	; (8005910 <TIM_OC6_SetConfig+0xac>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_OC6_SetConfig+0x6c>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a12      	ldr	r2, [pc, #72]	; (8005914 <TIM_OC6_SetConfig+0xb0>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d109      	bne.n	80058e4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	029b      	lsls	r3, r3, #10
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	621a      	str	r2, [r3, #32]
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40012c00 	.word	0x40012c00
 8005910:	40014000 	.word	0x40014000
 8005914:	40014400 	.word	0x40014400

08005918 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	f023 0201 	bic.w	r2, r3, #1
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4a20      	ldr	r2, [pc, #128]	; (80059c4 <TIM_TI1_SetConfig+0xac>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00b      	beq.n	800595e <TIM_TI1_SetConfig+0x46>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594c:	d007      	beq.n	800595e <TIM_TI1_SetConfig+0x46>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4a1d      	ldr	r2, [pc, #116]	; (80059c8 <TIM_TI1_SetConfig+0xb0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d003      	beq.n	800595e <TIM_TI1_SetConfig+0x46>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	4a1c      	ldr	r2, [pc, #112]	; (80059cc <TIM_TI1_SetConfig+0xb4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d101      	bne.n	8005962 <TIM_TI1_SetConfig+0x4a>
 800595e:	2301      	movs	r3, #1
 8005960:	e000      	b.n	8005964 <TIM_TI1_SetConfig+0x4c>
 8005962:	2300      	movs	r3, #0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d008      	beq.n	800597a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f023 0303 	bic.w	r3, r3, #3
 800596e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e003      	b.n	8005982 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f043 0301 	orr.w	r3, r3, #1
 8005980:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005988:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	b2db      	uxtb	r3, r3
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	4313      	orrs	r3, r2
 8005994:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f023 030a 	bic.w	r3, r3, #10
 800599c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f003 030a 	and.w	r3, r3, #10
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	621a      	str	r2, [r3, #32]
}
 80059b6:	bf00      	nop
 80059b8:	371c      	adds	r7, #28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	40012c00 	.word	0x40012c00
 80059c8:	40000400 	.word	0x40000400
 80059cc:	40014000 	.word	0x40014000

080059d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	f023 0201 	bic.w	r2, r3, #1
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f023 030a 	bic.w	r3, r3, #10
 8005a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	621a      	str	r2, [r3, #32]
}
 8005a22:	bf00      	nop
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b087      	sub	sp, #28
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	607a      	str	r2, [r7, #4]
 8005a3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f023 0210 	bic.w	r2, r3, #16
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	031b      	lsls	r3, r3, #12
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	621a      	str	r2, [r3, #32]
}
 8005a9c:	bf00      	nop
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	f023 0210 	bic.w	r2, r3, #16
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ad2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	031b      	lsls	r3, r3, #12
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ae4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	621a      	str	r2, [r3, #32]
}
 8005afc:	bf00      	nop
 8005afe:	371c      	adds	r7, #28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f023 0303 	bic.w	r3, r3, #3
 8005b34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	011b      	lsls	r3, r3, #4
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005b58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	621a      	str	r2, [r3, #32]
}
 8005b74:	bf00      	nop
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	031b      	lsls	r3, r3, #12
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005bd2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	031b      	lsls	r3, r3, #12
 8005bd8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	621a      	str	r2, [r3, #32]
}
 8005bee:	bf00      	nop
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	f043 0307 	orr.w	r3, r3, #7
 8005c1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	609a      	str	r2, [r3, #8]
}
 8005c24:	bf00      	nop
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	021a      	lsls	r2, r3, #8
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	609a      	str	r2, [r3, #8]
}
 8005c64:	bf00      	nop
 8005c66:	371c      	adds	r7, #28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c84:	2302      	movs	r3, #2
 8005c86:	e040      	b.n	8005d0a <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1a      	ldr	r2, [pc, #104]	; (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d108      	bne.n	8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cdc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40012c00 	.word	0x40012c00

08005d1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e060      	b.n	8005dfa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	041b      	lsls	r3, r3, #16
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a14      	ldr	r2, [pc, #80]	; (8005e08 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d115      	bne.n	8005de8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	051b      	lsls	r3, r3, #20
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40012c00 	.word	0x40012c00

08005e0c <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e043      	b.n	8005ee2 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d106      	bne.n	8005e74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f005 fa4a 	bl	800b308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2224      	movs	r2, #36	; 0x24
 8005e78:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6812      	ldr	r2, [r2, #0]
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	f022 0201 	bic.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f82d 	bl	8005eec <UART_SetConfig>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e022      	b.n	8005ee2 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fb31 	bl	800650c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6812      	ldr	r2, [r2, #0]
 8005eb2:	6852      	ldr	r2, [r2, #4]
 8005eb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6812      	ldr	r2, [r2, #0]
 8005ec2:	6892      	ldr	r2, [r2, #8]
 8005ec4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ec8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	6812      	ldr	r2, [r2, #0]
 8005ed2:	6812      	ldr	r2, [r2, #0]
 8005ed4:	f042 0201 	orr.w	r2, r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fbb8 	bl	8006650 <UART_CheckIdleState>
 8005ee0:	4603      	mov	r3, r0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005eec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ef0:	b088      	sub	sp, #32
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005efa:	2310      	movs	r3, #16
 8005efc:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6819      	ldr	r1, [r3, #0]
 8005f30:	4bad      	ldr	r3, [pc, #692]	; (80061e8 <UART_SetConfig+0x2fc>)
 8005f32:	400b      	ands	r3, r1
 8005f34:	69f9      	ldr	r1, [r7, #28]
 8005f36:	430b      	orrs	r3, r1
 8005f38:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	6812      	ldr	r2, [r2, #0]
 8005f42:	6852      	ldr	r2, [r2, #4]
 8005f44:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	68d2      	ldr	r2, [r2, #12]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4aa4      	ldr	r2, [pc, #656]	; (80061ec <UART_SetConfig+0x300>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d004      	beq.n	8005f6a <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	69fa      	ldr	r2, [r7, #28]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6812      	ldr	r2, [r2, #0]
 8005f72:	6892      	ldr	r2, [r2, #8]
 8005f74:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8005f78:	69fa      	ldr	r2, [r7, #28]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a9b      	ldr	r2, [pc, #620]	; (80061f0 <UART_SetConfig+0x304>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d121      	bne.n	8005fcc <UART_SetConfig+0xe0>
 8005f88:	4b9a      	ldr	r3, [pc, #616]	; (80061f4 <UART_SetConfig+0x308>)
 8005f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	2b03      	cmp	r3, #3
 8005f94:	d816      	bhi.n	8005fc4 <UART_SetConfig+0xd8>
 8005f96:	a201      	add	r2, pc, #4	; (adr r2, 8005f9c <UART_SetConfig+0xb0>)
 8005f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9c:	08005fad 	.word	0x08005fad
 8005fa0:	08005fb9 	.word	0x08005fb9
 8005fa4:	08005fb3 	.word	0x08005fb3
 8005fa8:	08005fbf 	.word	0x08005fbf
 8005fac:	2301      	movs	r3, #1
 8005fae:	76fb      	strb	r3, [r7, #27]
 8005fb0:	e0ba      	b.n	8006128 <UART_SetConfig+0x23c>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	76fb      	strb	r3, [r7, #27]
 8005fb6:	e0b7      	b.n	8006128 <UART_SetConfig+0x23c>
 8005fb8:	2304      	movs	r3, #4
 8005fba:	76fb      	strb	r3, [r7, #27]
 8005fbc:	e0b4      	b.n	8006128 <UART_SetConfig+0x23c>
 8005fbe:	2308      	movs	r3, #8
 8005fc0:	76fb      	strb	r3, [r7, #27]
 8005fc2:	e0b1      	b.n	8006128 <UART_SetConfig+0x23c>
 8005fc4:	2310      	movs	r3, #16
 8005fc6:	76fb      	strb	r3, [r7, #27]
 8005fc8:	bf00      	nop
 8005fca:	e0ad      	b.n	8006128 <UART_SetConfig+0x23c>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a89      	ldr	r2, [pc, #548]	; (80061f8 <UART_SetConfig+0x30c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d134      	bne.n	8006040 <UART_SetConfig+0x154>
 8005fd6:	4b87      	ldr	r3, [pc, #540]	; (80061f4 <UART_SetConfig+0x308>)
 8005fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fdc:	f003 030c 	and.w	r3, r3, #12
 8005fe0:	2b0c      	cmp	r3, #12
 8005fe2:	d829      	bhi.n	8006038 <UART_SetConfig+0x14c>
 8005fe4:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <UART_SetConfig+0x100>)
 8005fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fea:	bf00      	nop
 8005fec:	08006021 	.word	0x08006021
 8005ff0:	08006039 	.word	0x08006039
 8005ff4:	08006039 	.word	0x08006039
 8005ff8:	08006039 	.word	0x08006039
 8005ffc:	0800602d 	.word	0x0800602d
 8006000:	08006039 	.word	0x08006039
 8006004:	08006039 	.word	0x08006039
 8006008:	08006039 	.word	0x08006039
 800600c:	08006027 	.word	0x08006027
 8006010:	08006039 	.word	0x08006039
 8006014:	08006039 	.word	0x08006039
 8006018:	08006039 	.word	0x08006039
 800601c:	08006033 	.word	0x08006033
 8006020:	2300      	movs	r3, #0
 8006022:	76fb      	strb	r3, [r7, #27]
 8006024:	e080      	b.n	8006128 <UART_SetConfig+0x23c>
 8006026:	2302      	movs	r3, #2
 8006028:	76fb      	strb	r3, [r7, #27]
 800602a:	e07d      	b.n	8006128 <UART_SetConfig+0x23c>
 800602c:	2304      	movs	r3, #4
 800602e:	76fb      	strb	r3, [r7, #27]
 8006030:	e07a      	b.n	8006128 <UART_SetConfig+0x23c>
 8006032:	2308      	movs	r3, #8
 8006034:	76fb      	strb	r3, [r7, #27]
 8006036:	e077      	b.n	8006128 <UART_SetConfig+0x23c>
 8006038:	2310      	movs	r3, #16
 800603a:	76fb      	strb	r3, [r7, #27]
 800603c:	bf00      	nop
 800603e:	e073      	b.n	8006128 <UART_SetConfig+0x23c>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a6d      	ldr	r2, [pc, #436]	; (80061fc <UART_SetConfig+0x310>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d120      	bne.n	800608c <UART_SetConfig+0x1a0>
 800604a:	4b6a      	ldr	r3, [pc, #424]	; (80061f4 <UART_SetConfig+0x308>)
 800604c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006050:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006054:	2b10      	cmp	r3, #16
 8006056:	d00f      	beq.n	8006078 <UART_SetConfig+0x18c>
 8006058:	2b10      	cmp	r3, #16
 800605a:	d802      	bhi.n	8006062 <UART_SetConfig+0x176>
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <UART_SetConfig+0x180>
 8006060:	e010      	b.n	8006084 <UART_SetConfig+0x198>
 8006062:	2b20      	cmp	r3, #32
 8006064:	d005      	beq.n	8006072 <UART_SetConfig+0x186>
 8006066:	2b30      	cmp	r3, #48	; 0x30
 8006068:	d009      	beq.n	800607e <UART_SetConfig+0x192>
 800606a:	e00b      	b.n	8006084 <UART_SetConfig+0x198>
 800606c:	2300      	movs	r3, #0
 800606e:	76fb      	strb	r3, [r7, #27]
 8006070:	e05a      	b.n	8006128 <UART_SetConfig+0x23c>
 8006072:	2302      	movs	r3, #2
 8006074:	76fb      	strb	r3, [r7, #27]
 8006076:	e057      	b.n	8006128 <UART_SetConfig+0x23c>
 8006078:	2304      	movs	r3, #4
 800607a:	76fb      	strb	r3, [r7, #27]
 800607c:	e054      	b.n	8006128 <UART_SetConfig+0x23c>
 800607e:	2308      	movs	r3, #8
 8006080:	76fb      	strb	r3, [r7, #27]
 8006082:	e051      	b.n	8006128 <UART_SetConfig+0x23c>
 8006084:	2310      	movs	r3, #16
 8006086:	76fb      	strb	r3, [r7, #27]
 8006088:	bf00      	nop
 800608a:	e04d      	b.n	8006128 <UART_SetConfig+0x23c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a5b      	ldr	r2, [pc, #364]	; (8006200 <UART_SetConfig+0x314>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d120      	bne.n	80060d8 <UART_SetConfig+0x1ec>
 8006096:	4b57      	ldr	r3, [pc, #348]	; (80061f4 <UART_SetConfig+0x308>)
 8006098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060a0:	2b40      	cmp	r3, #64	; 0x40
 80060a2:	d00f      	beq.n	80060c4 <UART_SetConfig+0x1d8>
 80060a4:	2b40      	cmp	r3, #64	; 0x40
 80060a6:	d802      	bhi.n	80060ae <UART_SetConfig+0x1c2>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d005      	beq.n	80060b8 <UART_SetConfig+0x1cc>
 80060ac:	e010      	b.n	80060d0 <UART_SetConfig+0x1e4>
 80060ae:	2b80      	cmp	r3, #128	; 0x80
 80060b0:	d005      	beq.n	80060be <UART_SetConfig+0x1d2>
 80060b2:	2bc0      	cmp	r3, #192	; 0xc0
 80060b4:	d009      	beq.n	80060ca <UART_SetConfig+0x1de>
 80060b6:	e00b      	b.n	80060d0 <UART_SetConfig+0x1e4>
 80060b8:	2300      	movs	r3, #0
 80060ba:	76fb      	strb	r3, [r7, #27]
 80060bc:	e034      	b.n	8006128 <UART_SetConfig+0x23c>
 80060be:	2302      	movs	r3, #2
 80060c0:	76fb      	strb	r3, [r7, #27]
 80060c2:	e031      	b.n	8006128 <UART_SetConfig+0x23c>
 80060c4:	2304      	movs	r3, #4
 80060c6:	76fb      	strb	r3, [r7, #27]
 80060c8:	e02e      	b.n	8006128 <UART_SetConfig+0x23c>
 80060ca:	2308      	movs	r3, #8
 80060cc:	76fb      	strb	r3, [r7, #27]
 80060ce:	e02b      	b.n	8006128 <UART_SetConfig+0x23c>
 80060d0:	2310      	movs	r3, #16
 80060d2:	76fb      	strb	r3, [r7, #27]
 80060d4:	bf00      	nop
 80060d6:	e027      	b.n	8006128 <UART_SetConfig+0x23c>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a43      	ldr	r2, [pc, #268]	; (80061ec <UART_SetConfig+0x300>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d123      	bne.n	800612a <UART_SetConfig+0x23e>
 80060e2:	4b44      	ldr	r3, [pc, #272]	; (80061f4 <UART_SetConfig+0x308>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f0:	d012      	beq.n	8006118 <UART_SetConfig+0x22c>
 80060f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f6:	d802      	bhi.n	80060fe <UART_SetConfig+0x212>
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d007      	beq.n	800610c <UART_SetConfig+0x220>
 80060fc:	e012      	b.n	8006124 <UART_SetConfig+0x238>
 80060fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006102:	d006      	beq.n	8006112 <UART_SetConfig+0x226>
 8006104:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006108:	d009      	beq.n	800611e <UART_SetConfig+0x232>
 800610a:	e00b      	b.n	8006124 <UART_SetConfig+0x238>
 800610c:	2300      	movs	r3, #0
 800610e:	76fb      	strb	r3, [r7, #27]
 8006110:	e00a      	b.n	8006128 <UART_SetConfig+0x23c>
 8006112:	2302      	movs	r3, #2
 8006114:	76fb      	strb	r3, [r7, #27]
 8006116:	e007      	b.n	8006128 <UART_SetConfig+0x23c>
 8006118:	2304      	movs	r3, #4
 800611a:	76fb      	strb	r3, [r7, #27]
 800611c:	e004      	b.n	8006128 <UART_SetConfig+0x23c>
 800611e:	2308      	movs	r3, #8
 8006120:	76fb      	strb	r3, [r7, #27]
 8006122:	e001      	b.n	8006128 <UART_SetConfig+0x23c>
 8006124:	2310      	movs	r3, #16
 8006126:	76fb      	strb	r3, [r7, #27]
 8006128:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a2f      	ldr	r2, [pc, #188]	; (80061ec <UART_SetConfig+0x300>)
 8006130:	4293      	cmp	r3, r2
 8006132:	f040 80ea 	bne.w	800630a <UART_SetConfig+0x41e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006136:	7efb      	ldrb	r3, [r7, #27]
 8006138:	2b08      	cmp	r3, #8
 800613a:	d824      	bhi.n	8006186 <UART_SetConfig+0x29a>
 800613c:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <UART_SetConfig+0x258>)
 800613e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006142:	bf00      	nop
 8006144:	08006169 	.word	0x08006169
 8006148:	08006187 	.word	0x08006187
 800614c:	08006171 	.word	0x08006171
 8006150:	08006187 	.word	0x08006187
 8006154:	08006177 	.word	0x08006177
 8006158:	08006187 	.word	0x08006187
 800615c:	08006187 	.word	0x08006187
 8006160:	08006187 	.word	0x08006187
 8006164:	0800617f 	.word	0x0800617f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006168:	f7fe f8bc 	bl	80042e4 <HAL_RCC_GetPCLK1Freq>
 800616c:	60f8      	str	r0, [r7, #12]
#endif
        break;
 800616e:	e00d      	b.n	800618c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006170:	4b24      	ldr	r3, [pc, #144]	; (8006204 <UART_SetConfig+0x318>)
 8006172:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8006174:	e00a      	b.n	800618c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006176:	f7fe f80d 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 800617a:	60f8      	str	r0, [r7, #12]
#endif
        break;
 800617c:	e006      	b.n	800618c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800617e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006182:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8006184:	e002      	b.n	800618c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	74fb      	strb	r3, [r7, #19]
        break;
 800618a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 81ad 	beq.w	80064ee <UART_SetConfig+0x602>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	4613      	mov	r3, r2
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	441a      	add	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d805      	bhi.n	80061b0 <UART_SetConfig+0x2c4>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d202      	bcs.n	80061b6 <UART_SetConfig+0x2ca>
      {
        ret = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	74fb      	strb	r3, [r7, #19]
 80061b4:	e19b      	b.n	80064ee <UART_SetConfig+0x602>
      }
      else
      {
        switch (clocksource)
 80061b6:	7efb      	ldrb	r3, [r7, #27]
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	f200 8093 	bhi.w	80062e4 <UART_SetConfig+0x3f8>
 80061be:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <UART_SetConfig+0x2d8>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	08006209 	.word	0x08006209
 80061c8:	080062e5 	.word	0x080062e5
 80061cc:	08006249 	.word	0x08006249
 80061d0:	080062e5 	.word	0x080062e5
 80061d4:	0800627d 	.word	0x0800627d
 80061d8:	080062e5 	.word	0x080062e5
 80061dc:	080062e5 	.word	0x080062e5
 80061e0:	080062e5 	.word	0x080062e5
 80061e4:	080062bb 	.word	0x080062bb
 80061e8:	efff69f3 	.word	0xefff69f3
 80061ec:	40008000 	.word	0x40008000
 80061f0:	40013800 	.word	0x40013800
 80061f4:	40021000 	.word	0x40021000
 80061f8:	40004400 	.word	0x40004400
 80061fc:	40004800 	.word	0x40004800
 8006200:	40004c00 	.word	0x40004c00
 8006204:	00f42400 	.word	0x00f42400
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006208:	f7fe f86c 	bl	80042e4 <HAL_RCC_GetPCLK1Freq>
 800620c:	4603      	mov	r3, r0
 800620e:	f04f 0400 	mov.w	r4, #0
 8006212:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8006216:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 800621a:	ea4f 2803 	mov.w	r8, r3, lsl #8
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	085b      	lsrs	r3, r3, #1
 8006224:	f04f 0400 	mov.w	r4, #0
 8006228:	eb18 0003 	adds.w	r0, r8, r3
 800622c:	eb49 0104 	adc.w	r1, r9, r4
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f04f 0400 	mov.w	r4, #0
 8006238:	461a      	mov	r2, r3
 800623a:	4623      	mov	r3, r4
 800623c:	f7f9 ffca 	bl	80001d4 <__aeabi_uldivmod>
 8006240:	4603      	mov	r3, r0
 8006242:	460c      	mov	r4, r1
 8006244:	617b      	str	r3, [r7, #20]
#endif
            break;
 8006246:	e050      	b.n	80062ea <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	085b      	lsrs	r3, r3, #1
 800624e:	f04f 0400 	mov.w	r4, #0
 8006252:	49ad      	ldr	r1, [pc, #692]	; (8006508 <UART_SetConfig+0x61c>)
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	eb13 0801 	adds.w	r8, r3, r1
 800625c:	eb44 0902 	adc.w	r9, r4, r2
 8006260:	4640      	mov	r0, r8
 8006262:	4649      	mov	r1, r9
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f04f 0400 	mov.w	r4, #0
 800626c:	461a      	mov	r2, r3
 800626e:	4623      	mov	r3, r4
 8006270:	f7f9 ffb0 	bl	80001d4 <__aeabi_uldivmod>
 8006274:	4603      	mov	r3, r0
 8006276:	460c      	mov	r4, r1
 8006278:	617b      	str	r3, [r7, #20]
#endif
            break;
 800627a:	e036      	b.n	80062ea <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800627c:	f7fd ff8a 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 8006280:	4603      	mov	r3, r0
 8006282:	461a      	mov	r2, r3
 8006284:	f04f 0300 	mov.w	r3, #0
 8006288:	021d      	lsls	r5, r3, #8
 800628a:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 800628e:	0214      	lsls	r4, r2, #8
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	085b      	lsrs	r3, r3, #1
 8006296:	461a      	mov	r2, r3
 8006298:	f04f 0300 	mov.w	r3, #0
 800629c:	18a0      	adds	r0, r4, r2
 800629e:	eb45 0103 	adc.w	r1, r5, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f04f 0400 	mov.w	r4, #0
 80062aa:	461a      	mov	r2, r3
 80062ac:	4623      	mov	r3, r4
 80062ae:	f7f9 ff91 	bl	80001d4 <__aeabi_uldivmod>
 80062b2:	4603      	mov	r3, r0
 80062b4:	460c      	mov	r4, r1
 80062b6:	617b      	str	r3, [r7, #20]
#endif
            break;
 80062b8:	e017      	b.n	80062ea <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	085b      	lsrs	r3, r3, #1
 80062c0:	f04f 0400 	mov.w	r4, #0
 80062c4:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80062c8:	f144 0100 	adc.w	r1, r4, #0
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f04f 0400 	mov.w	r4, #0
 80062d4:	461a      	mov	r2, r3
 80062d6:	4623      	mov	r3, r4
 80062d8:	f7f9 ff7c 	bl	80001d4 <__aeabi_uldivmod>
 80062dc:	4603      	mov	r3, r0
 80062de:	460c      	mov	r4, r1
 80062e0:	617b      	str	r3, [r7, #20]
#endif
            break;
 80062e2:	e002      	b.n	80062ea <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	74fb      	strb	r3, [r7, #19]
            break;
 80062e8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062f0:	d308      	bcc.n	8006304 <UART_SetConfig+0x418>
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062f8:	d204      	bcs.n	8006304 <UART_SetConfig+0x418>
        {
          huart->Instance->BRR = usartdiv;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	60da      	str	r2, [r3, #12]
 8006302:	e0f4      	b.n	80064ee <UART_SetConfig+0x602>
        }
        else
        {
          ret = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	74fb      	strb	r3, [r7, #19]
 8006308:	e0f1      	b.n	80064ee <UART_SetConfig+0x602>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006312:	d17e      	bne.n	8006412 <UART_SetConfig+0x526>
  {
    switch (clocksource)
 8006314:	7efb      	ldrb	r3, [r7, #27]
 8006316:	2b08      	cmp	r3, #8
 8006318:	d85b      	bhi.n	80063d2 <UART_SetConfig+0x4e6>
 800631a:	a201      	add	r2, pc, #4	; (adr r2, 8006320 <UART_SetConfig+0x434>)
 800631c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006320:	08006345 	.word	0x08006345
 8006324:	08006363 	.word	0x08006363
 8006328:	08006381 	.word	0x08006381
 800632c:	080063d3 	.word	0x080063d3
 8006330:	0800639d 	.word	0x0800639d
 8006334:	080063d3 	.word	0x080063d3
 8006338:	080063d3 	.word	0x080063d3
 800633c:	080063d3 	.word	0x080063d3
 8006340:	080063bb 	.word	0x080063bb
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006344:	f7fd ffce 	bl	80042e4 <HAL_RCC_GetPCLK1Freq>
 8006348:	4603      	mov	r3, r0
 800634a:	005a      	lsls	r2, r3, #1
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	085b      	lsrs	r3, r3, #1
 8006352:	441a      	add	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	fbb2 f3f3 	udiv	r3, r2, r3
 800635c:	b29b      	uxth	r3, r3
 800635e:	617b      	str	r3, [r7, #20]
#endif
        break;
 8006360:	e03a      	b.n	80063d8 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006362:	f7fd ffd5 	bl	8004310 <HAL_RCC_GetPCLK2Freq>
 8006366:	4603      	mov	r3, r0
 8006368:	005a      	lsls	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	085b      	lsrs	r3, r3, #1
 8006370:	441a      	add	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	fbb2 f3f3 	udiv	r3, r2, r3
 800637a:	b29b      	uxth	r3, r3
 800637c:	617b      	str	r3, [r7, #20]
#endif
        break;
 800637e:	e02b      	b.n	80063d8 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	085b      	lsrs	r3, r3, #1
 8006386:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800638a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	6852      	ldr	r2, [r2, #4]
 8006392:	fbb3 f3f2 	udiv	r3, r3, r2
 8006396:	b29b      	uxth	r3, r3
 8006398:	617b      	str	r3, [r7, #20]
#endif
        break;
 800639a:	e01d      	b.n	80063d8 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800639c:	f7fd fefa 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 80063a0:	4603      	mov	r3, r0
 80063a2:	005a      	lsls	r2, r3, #1
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	085b      	lsrs	r3, r3, #1
 80063aa:	441a      	add	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	617b      	str	r3, [r7, #20]
#endif
        break;
 80063b8:	e00e      	b.n	80063d8 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	085b      	lsrs	r3, r3, #1
 80063c0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	617b      	str	r3, [r7, #20]
#endif
        break;
 80063d0:	e002      	b.n	80063d8 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	74fb      	strb	r3, [r7, #19]
        break;
 80063d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2b0f      	cmp	r3, #15
 80063dc:	d916      	bls.n	800640c <UART_SetConfig+0x520>
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e4:	d212      	bcs.n	800640c <UART_SetConfig+0x520>
    {
      brrtemp = usartdiv & 0xFFF0U;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f023 030f 	bic.w	r3, r3, #15
 80063ee:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	085b      	lsrs	r3, r3, #1
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	897b      	ldrh	r3, [r7, #10]
 80063fe:	4313      	orrs	r3, r2
 8006400:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	897a      	ldrh	r2, [r7, #10]
 8006408:	60da      	str	r2, [r3, #12]
 800640a:	e070      	b.n	80064ee <UART_SetConfig+0x602>
    }
    else
    {
      ret = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	74fb      	strb	r3, [r7, #19]
 8006410:	e06d      	b.n	80064ee <UART_SetConfig+0x602>
    }
  }
  else
  {
    switch (clocksource)
 8006412:	7efb      	ldrb	r3, [r7, #27]
 8006414:	2b08      	cmp	r3, #8
 8006416:	d859      	bhi.n	80064cc <UART_SetConfig+0x5e0>
 8006418:	a201      	add	r2, pc, #4	; (adr r2, 8006420 <UART_SetConfig+0x534>)
 800641a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641e:	bf00      	nop
 8006420:	08006445 	.word	0x08006445
 8006424:	08006461 	.word	0x08006461
 8006428:	0800647d 	.word	0x0800647d
 800642c:	080064cd 	.word	0x080064cd
 8006430:	08006499 	.word	0x08006499
 8006434:	080064cd 	.word	0x080064cd
 8006438:	080064cd 	.word	0x080064cd
 800643c:	080064cd 	.word	0x080064cd
 8006440:	080064b5 	.word	0x080064b5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006444:	f7fd ff4e 	bl	80042e4 <HAL_RCC_GetPCLK1Freq>
 8006448:	4602      	mov	r2, r0
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	085b      	lsrs	r3, r3, #1
 8006450:	441a      	add	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	fbb2 f3f3 	udiv	r3, r2, r3
 800645a:	b29b      	uxth	r3, r3
 800645c:	617b      	str	r3, [r7, #20]
#endif
        break;
 800645e:	e038      	b.n	80064d2 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006460:	f7fd ff56 	bl	8004310 <HAL_RCC_GetPCLK2Freq>
 8006464:	4602      	mov	r2, r0
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	085b      	lsrs	r3, r3, #1
 800646c:	441a      	add	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	fbb2 f3f3 	udiv	r3, r2, r3
 8006476:	b29b      	uxth	r3, r3
 8006478:	617b      	str	r3, [r7, #20]
#endif
        break;
 800647a:	e02a      	b.n	80064d2 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	085b      	lsrs	r3, r3, #1
 8006482:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006486:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	6852      	ldr	r2, [r2, #4]
 800648e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006492:	b29b      	uxth	r3, r3
 8006494:	617b      	str	r3, [r7, #20]
#endif
        break;
 8006496:	e01c      	b.n	80064d2 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006498:	f7fd fe7c 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 800649c:	4602      	mov	r2, r0
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	085b      	lsrs	r3, r3, #1
 80064a4:	441a      	add	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	617b      	str	r3, [r7, #20]
#endif
        break;
 80064b2:	e00e      	b.n	80064d2 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	085b      	lsrs	r3, r3, #1
 80064ba:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	617b      	str	r3, [r7, #20]
#endif
        break;
 80064ca:	e002      	b.n	80064d2 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	74fb      	strb	r3, [r7, #19]
        break;
 80064d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b0f      	cmp	r3, #15
 80064d6:	d908      	bls.n	80064ea <UART_SetConfig+0x5fe>
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064de:	d204      	bcs.n	80064ea <UART_SetConfig+0x5fe>
    {
      huart->Instance->BRR = usartdiv;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	60da      	str	r2, [r3, #12]
 80064e8:	e001      	b.n	80064ee <UART_SetConfig+0x602>
    }
    else
    {
      ret = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80064fa:	7cfb      	ldrb	r3, [r7, #19]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3720      	adds	r7, #32
 8006500:	46bd      	mov	sp, r7
 8006502:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006506:	bf00      	nop
 8006508:	f4240000 	.word	0xf4240000

0800650c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00a      	beq.n	8006536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6812      	ldr	r2, [r2, #0]
 8006528:	6852      	ldr	r2, [r2, #4]
 800652a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006532:	430a      	orrs	r2, r1
 8006534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00a      	beq.n	8006558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	6812      	ldr	r2, [r2, #0]
 800654a:	6852      	ldr	r2, [r2, #4]
 800654c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006554:	430a      	orrs	r2, r1
 8006556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00a      	beq.n	800657a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6812      	ldr	r2, [r2, #0]
 800656c:	6852      	ldr	r2, [r2, #4]
 800656e:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006576:	430a      	orrs	r2, r1
 8006578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	f003 0308 	and.w	r3, r3, #8
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6812      	ldr	r2, [r2, #0]
 800658e:	6852      	ldr	r2, [r2, #4]
 8006590:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006598:	430a      	orrs	r2, r1
 800659a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	f003 0310 	and.w	r3, r3, #16
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00a      	beq.n	80065be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	6892      	ldr	r2, [r2, #8]
 80065b2:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065ba:	430a      	orrs	r2, r1
 80065bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	f003 0320 	and.w	r3, r3, #32
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	6812      	ldr	r2, [r2, #0]
 80065d2:	6892      	ldr	r2, [r2, #8]
 80065d4:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80065dc:	430a      	orrs	r2, r1
 80065de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01a      	beq.n	8006622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6812      	ldr	r2, [r2, #0]
 80065f4:	6852      	ldr	r2, [r2, #4]
 80065f6:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80065fe:	430a      	orrs	r2, r1
 8006600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800660a:	d10a      	bne.n	8006622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6812      	ldr	r2, [r2, #0]
 8006614:	6852      	ldr	r2, [r2, #4]
 8006616:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800661e:	430a      	orrs	r2, r1
 8006620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	6812      	ldr	r2, [r2, #0]
 8006636:	6852      	ldr	r2, [r2, #4]
 8006638:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006640:	430a      	orrs	r2, r1
 8006642:	605a      	str	r2, [r3, #4]
  }
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af02      	add	r7, sp, #8
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006662:	f7fb fbe3 	bl	8001e2c <HAL_GetTick>
 8006666:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0308 	and.w	r3, r3, #8
 8006672:	2b08      	cmp	r3, #8
 8006674:	d10e      	bne.n	8006694 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006676:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f82c 	bl	80066e2 <UART_WaitOnFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e022      	b.n	80066da <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0304 	and.w	r3, r3, #4
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d10e      	bne.n	80066c0 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f816 	bl	80066e2 <UART_WaitOnFlagUntilTimeout>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e00c      	b.n	80066da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	603b      	str	r3, [r7, #0]
 80066ee:	4613      	mov	r3, r2
 80066f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066f2:	e02c      	b.n	800674e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fa:	d028      	beq.n	800674e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d007      	beq.n	8006712 <UART_WaitOnFlagUntilTimeout+0x30>
 8006702:	f7fb fb93 	bl	8001e2c <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	1ad2      	subs	r2, r2, r3
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	429a      	cmp	r2, r3
 8006710:	d91d      	bls.n	800674e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	6812      	ldr	r2, [r2, #0]
 800671c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006720:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	6812      	ldr	r2, [r2, #0]
 800672a:	6892      	ldr	r2, [r2, #8]
 800672c:	f022 0201 	bic.w	r2, r2, #1
 8006730:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2220      	movs	r2, #32
 8006736:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2220      	movs	r2, #32
 800673e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e00f      	b.n	800676e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69da      	ldr	r2, [r3, #28]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	401a      	ands	r2, r3
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	429a      	cmp	r2, r3
 800675c:	bf0c      	ite	eq
 800675e:	2301      	moveq	r3, #1
 8006760:	2300      	movne	r3, #0
 8006762:	b2db      	uxtb	r3, r3
 8006764:	461a      	mov	r2, r3
 8006766:	79fb      	ldrb	r3, [r7, #7]
 8006768:	429a      	cmp	r2, r3
 800676a:	d0c3      	beq.n	80066f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006776:	b084      	sub	sp, #16
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	f107 0014 	add.w	r0, r7, #20
 8006784:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	b004      	add	sp, #16
 8006796:	4770      	bx	lr

08006798 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80067a0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80067a4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	89fb      	ldrh	r3, [r7, #14]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80067d0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80067d4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80067dc:	b29b      	uxth	r3, r3
 80067de:	b21a      	sxth	r2, r3
 80067e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80067e4:	43db      	mvns	r3, r3
 80067e6:	b21b      	sxth	r3, r3
 80067e8:	4013      	ands	r3, r2
 80067ea:	b21b      	sxth	r3, r3
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800681c:	b084      	sub	sp, #16
 800681e:	b580      	push	{r7, lr}
 8006820:	b082      	sub	sp, #8
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	f107 0014 	add.w	r0, r7, #20
 800682a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff ffa2 	bl	8006798 <USB_EnableGlobalInt>

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006860:	b004      	add	sp, #16
 8006862:	4770      	bx	lr

08006864 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006864:	b490      	push	{r4, r7}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	b29b      	uxth	r3, r3
 8006880:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006888:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	78db      	ldrb	r3, [r3, #3]
 800688e:	2b03      	cmp	r3, #3
 8006890:	d819      	bhi.n	80068c6 <USB_ActivateEndpoint+0x62>
 8006892:	a201      	add	r2, pc, #4	; (adr r2, 8006898 <USB_ActivateEndpoint+0x34>)
 8006894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006898:	080068a9 	.word	0x080068a9
 800689c:	080068bd 	.word	0x080068bd
 80068a0:	080068cd 	.word	0x080068cd
 80068a4:	080068b3 	.word	0x080068b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80068a8:	8abb      	ldrh	r3, [r7, #20]
 80068aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068ae:	82bb      	strh	r3, [r7, #20]
      break;
 80068b0:	e00d      	b.n	80068ce <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80068b2:	8abb      	ldrh	r3, [r7, #20]
 80068b4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80068b8:	82bb      	strh	r3, [r7, #20]
      break;
 80068ba:	e008      	b.n	80068ce <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80068bc:	8abb      	ldrh	r3, [r7, #20]
 80068be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068c2:	82bb      	strh	r3, [r7, #20]
      break;
 80068c4:	e003      	b.n	80068ce <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	75fb      	strb	r3, [r7, #23]
      break;
 80068ca:	e000      	b.n	80068ce <USB_ActivateEndpoint+0x6a>
      break;
 80068cc:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal);
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	8aba      	ldrh	r2, [r7, #20]
 80068da:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	b21b      	sxth	r3, r3
 80068ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f4:	b21a      	sxth	r2, r3
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	b21b      	sxth	r3, r3
 80068fc:	4313      	orrs	r3, r2
 80068fe:	b21b      	sxth	r3, r3
 8006900:	b29c      	uxth	r4, r3
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	441a      	add	r2, r3
 800690c:	4b87      	ldr	r3, [pc, #540]	; (8006b2c <USB_ActivateEndpoint+0x2c8>)
 800690e:	4323      	orrs	r3, r4
 8006910:	b29b      	uxth	r3, r3
 8006912:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	7b1b      	ldrb	r3, [r3, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	f040 810d 	bne.w	8006b38 <USB_ActivateEndpoint+0x2d4>
  {
    if (ep->is_in != 0U)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	785b      	ldrb	r3, [r3, #1]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d067      	beq.n	80069f6 <USB_ActivateEndpoint+0x192>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006926:	687c      	ldr	r4, [r7, #4]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800692e:	b29b      	uxth	r3, r3
 8006930:	441c      	add	r4, r3
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	4423      	add	r3, r4
 800693a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800693e:	461c      	mov	r4, r3
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	88db      	ldrh	r3, [r3, #6]
 8006944:	085b      	lsrs	r3, r3, #1
 8006946:	b29b      	uxth	r3, r3
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	b29b      	uxth	r3, r3
 800694c:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b29c      	uxth	r4, r3
 800695c:	4623      	mov	r3, r4
 800695e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006962:	2b00      	cmp	r3, #0
 8006964:	d014      	beq.n	8006990 <USB_ActivateEndpoint+0x12c>
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697c:	b29c      	uxth	r4, r3
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	441a      	add	r2, r3
 8006988:	4b69      	ldr	r3, [pc, #420]	; (8006b30 <USB_ActivateEndpoint+0x2cc>)
 800698a:	4323      	orrs	r3, r4
 800698c:	b29b      	uxth	r3, r3
 800698e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	78db      	ldrb	r3, [r3, #3]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d018      	beq.n	80069ca <USB_ActivateEndpoint+0x166>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ae:	b29c      	uxth	r4, r3
 80069b0:	f084 0320 	eor.w	r3, r4, #32
 80069b4:	b29c      	uxth	r4, r3
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	441a      	add	r2, r3
 80069c0:	4b5a      	ldr	r3, [pc, #360]	; (8006b2c <USB_ActivateEndpoint+0x2c8>)
 80069c2:	4323      	orrs	r3, r4
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	8013      	strh	r3, [r2, #0]
 80069c8:	e226      	b.n	8006e18 <USB_ActivateEndpoint+0x5b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e0:	b29c      	uxth	r4, r3
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	441a      	add	r2, r3
 80069ec:	4b4f      	ldr	r3, [pc, #316]	; (8006b2c <USB_ActivateEndpoint+0x2c8>)
 80069ee:	4323      	orrs	r3, r4
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	8013      	strh	r3, [r2, #0]
 80069f4:	e210      	b.n	8006e18 <USB_ActivateEndpoint+0x5b4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80069f6:	687c      	ldr	r4, [r7, #4]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	441c      	add	r4, r3
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	4423      	add	r3, r4
 8006a0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a0e:	461c      	mov	r4, r3
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	88db      	ldrh	r3, [r3, #6]
 8006a14:	085b      	lsrs	r3, r3, #1
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006a1e:	687c      	ldr	r4, [r7, #4]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	441c      	add	r4, r3
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	4423      	add	r3, r4
 8006a32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d111      	bne.n	8006a64 <USB_ActivateEndpoint+0x200>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	881a      	ldrh	r2, [r3, #0]
 8006a44:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8006a48:	4013      	ands	r3, r2
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	801a      	strh	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	801a      	strh	r2, [r3, #0]
 8006a62:	e026      	b.n	8006ab2 <USB_ActivateEndpoint+0x24e>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	2b3d      	cmp	r3, #61	; 0x3d
 8006a6a:	d813      	bhi.n	8006a94 <USB_ActivateEndpoint+0x230>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	085b      	lsrs	r3, r3, #1
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <USB_ActivateEndpoint+0x222>
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	3301      	adds	r3, #1
 8006a84:	613b      	str	r3, [r7, #16]
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	029b      	lsls	r3, r3, #10
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	801a      	strh	r2, [r3, #0]
 8006a92:	e00e      	b.n	8006ab2 <USB_ActivateEndpoint+0x24e>
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	095b      	lsrs	r3, r3, #5
 8006a9a:	613b      	str	r3, [r7, #16]
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	029b      	lsls	r3, r3, #10
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	b29c      	uxth	r4, r3
 8006ac0:	4623      	mov	r3, r4
 8006ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d014      	beq.n	8006af4 <USB_ActivateEndpoint+0x290>
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae0:	b29c      	uxth	r4, r3
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	441a      	add	r2, r3
 8006aec:	4b11      	ldr	r3, [pc, #68]	; (8006b34 <USB_ActivateEndpoint+0x2d0>)
 8006aee:	4323      	orrs	r3, r4
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0a:	b29c      	uxth	r4, r3
 8006b0c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006b10:	b29c      	uxth	r4, r3
 8006b12:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006b16:	b29c      	uxth	r4, r3
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	441a      	add	r2, r3
 8006b22:	4b02      	ldr	r3, [pc, #8]	; (8006b2c <USB_ActivateEndpoint+0x2c8>)
 8006b24:	4323      	orrs	r3, r4
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	8013      	strh	r3, [r2, #0]
 8006b2a:	e175      	b.n	8006e18 <USB_ActivateEndpoint+0x5b4>
 8006b2c:	ffff8080 	.word	0xffff8080
 8006b30:	ffff80c0 	.word	0xffff80c0
 8006b34:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	881b      	ldrh	r3, [r3, #0]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4e:	b29c      	uxth	r4, r3
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	441a      	add	r2, r3
 8006b5a:	4b96      	ldr	r3, [pc, #600]	; (8006db4 <USB_ActivateEndpoint+0x550>)
 8006b5c:	4323      	orrs	r3, r4
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006b62:	687c      	ldr	r4, [r7, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	441c      	add	r4, r3
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	4423      	add	r3, r4
 8006b76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b7a:	461c      	mov	r4, r3
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	891b      	ldrh	r3, [r3, #8]
 8006b80:	085b      	lsrs	r3, r3, #1
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	8023      	strh	r3, [r4, #0]
 8006b8a:	687c      	ldr	r4, [r7, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	441c      	add	r4, r3
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	4423      	add	r3, r4
 8006b9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ba2:	461c      	mov	r4, r3
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	895b      	ldrh	r3, [r3, #10]
 8006ba8:	085b      	lsrs	r3, r3, #1
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	005b      	lsls	r3, r3, #1
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	785b      	ldrb	r3, [r3, #1]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f040 8088 	bne.w	8006ccc <USB_ActivateEndpoint+0x468>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29c      	uxth	r4, r3
 8006bca:	4623      	mov	r3, r4
 8006bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d014      	beq.n	8006bfe <USB_ActivateEndpoint+0x39a>
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bea:	b29c      	uxth	r4, r3
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	441a      	add	r2, r3
 8006bf6:	4b70      	ldr	r3, [pc, #448]	; (8006db8 <USB_ActivateEndpoint+0x554>)
 8006bf8:	4323      	orrs	r3, r4
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	b29c      	uxth	r4, r3
 8006c0c:	4623      	mov	r3, r4
 8006c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d014      	beq.n	8006c40 <USB_ActivateEndpoint+0x3dc>
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2c:	b29c      	uxth	r4, r3
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	441a      	add	r2, r3
 8006c38:	4b60      	ldr	r3, [pc, #384]	; (8006dbc <USB_ActivateEndpoint+0x558>)
 8006c3a:	4323      	orrs	r3, r4
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c56:	b29c      	uxth	r4, r3
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	441a      	add	r2, r3
 8006c62:	4b56      	ldr	r3, [pc, #344]	; (8006dbc <USB_ActivateEndpoint+0x558>)
 8006c64:	4323      	orrs	r3, r4
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c80:	b29c      	uxth	r4, r3
 8006c82:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006c86:	b29c      	uxth	r4, r3
 8006c88:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006c8c:	b29c      	uxth	r4, r3
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	441a      	add	r2, r3
 8006c98:	4b49      	ldr	r3, [pc, #292]	; (8006dc0 <USB_ActivateEndpoint+0x55c>)
 8006c9a:	4323      	orrs	r3, r4
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb6:	b29c      	uxth	r4, r3
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	441a      	add	r2, r3
 8006cc2:	4b3f      	ldr	r3, [pc, #252]	; (8006dc0 <USB_ActivateEndpoint+0x55c>)
 8006cc4:	4323      	orrs	r3, r4
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	8013      	strh	r3, [r2, #0]
 8006cca:	e0a5      	b.n	8006e18 <USB_ActivateEndpoint+0x5b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	b29c      	uxth	r4, r3
 8006cda:	4623      	mov	r3, r4
 8006cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d014      	beq.n	8006d0e <USB_ActivateEndpoint+0x4aa>
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfa:	b29c      	uxth	r4, r3
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	441a      	add	r2, r3
 8006d06:	4b2c      	ldr	r3, [pc, #176]	; (8006db8 <USB_ActivateEndpoint+0x554>)
 8006d08:	4323      	orrs	r3, r4
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29c      	uxth	r4, r3
 8006d1c:	4623      	mov	r3, r4
 8006d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d014      	beq.n	8006d50 <USB_ActivateEndpoint+0x4ec>
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3c:	b29c      	uxth	r4, r3
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	441a      	add	r2, r3
 8006d48:	4b1c      	ldr	r3, [pc, #112]	; (8006dbc <USB_ActivateEndpoint+0x558>)
 8006d4a:	4323      	orrs	r3, r4
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d66:	b29c      	uxth	r4, r3
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	441a      	add	r2, r3
 8006d72:	4b11      	ldr	r3, [pc, #68]	; (8006db8 <USB_ActivateEndpoint+0x554>)
 8006d74:	4323      	orrs	r3, r4
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	78db      	ldrb	r3, [r3, #3]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d020      	beq.n	8006dc4 <USB_ActivateEndpoint+0x560>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d98:	b29c      	uxth	r4, r3
 8006d9a:	f084 0320 	eor.w	r3, r4, #32
 8006d9e:	b29c      	uxth	r4, r3
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	441a      	add	r2, r3
 8006daa:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <USB_ActivateEndpoint+0x55c>)
 8006dac:	4323      	orrs	r3, r4
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	8013      	strh	r3, [r2, #0]
 8006db2:	e01c      	b.n	8006dee <USB_ActivateEndpoint+0x58a>
 8006db4:	ffff8180 	.word	0xffff8180
 8006db8:	ffffc080 	.word	0xffffc080
 8006dbc:	ffff80c0 	.word	0xffff80c0
 8006dc0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dda:	b29c      	uxth	r4, r3
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	441a      	add	r2, r3
 8006de6:	4b0f      	ldr	r3, [pc, #60]	; (8006e24 <USB_ActivateEndpoint+0x5c0>)
 8006de8:	4323      	orrs	r3, r4
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e04:	b29c      	uxth	r4, r3
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	441a      	add	r2, r3
 8006e10:	4b04      	ldr	r3, [pc, #16]	; (8006e24 <USB_ActivateEndpoint+0x5c0>)
 8006e12:	4323      	orrs	r3, r4
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bc90      	pop	{r4, r7}
 8006e22:	4770      	bx	lr
 8006e24:	ffff8080 	.word	0xffff8080

08006e28 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e28:	b490      	push	{r4, r7}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	7b1b      	ldrb	r3, [r3, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d171      	bne.n	8006f1e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	785b      	ldrb	r3, [r3, #1]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d036      	beq.n	8006eb0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	b29c      	uxth	r4, r3
 8006e50:	4623      	mov	r3, r4
 8006e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d014      	beq.n	8006e84 <USB_DeactivateEndpoint+0x5c>
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e70:	b29c      	uxth	r4, r3
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	441a      	add	r2, r3
 8006e7c:	4b6b      	ldr	r3, [pc, #428]	; (800702c <USB_DeactivateEndpoint+0x204>)
 8006e7e:	4323      	orrs	r3, r4
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9a:	b29c      	uxth	r4, r3
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	441a      	add	r2, r3
 8006ea6:	4b62      	ldr	r3, [pc, #392]	; (8007030 <USB_DeactivateEndpoint+0x208>)
 8006ea8:	4323      	orrs	r3, r4
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	8013      	strh	r3, [r2, #0]
 8006eae:	e144      	b.n	800713a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	881b      	ldrh	r3, [r3, #0]
 8006ebc:	b29c      	uxth	r4, r3
 8006ebe:	4623      	mov	r3, r4
 8006ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d014      	beq.n	8006ef2 <USB_DeactivateEndpoint+0xca>
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4413      	add	r3, r2
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ede:	b29c      	uxth	r4, r3
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	441a      	add	r2, r3
 8006eea:	4b52      	ldr	r3, [pc, #328]	; (8007034 <USB_DeactivateEndpoint+0x20c>)
 8006eec:	4323      	orrs	r3, r4
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f08:	b29c      	uxth	r4, r3
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	441a      	add	r2, r3
 8006f14:	4b46      	ldr	r3, [pc, #280]	; (8007030 <USB_DeactivateEndpoint+0x208>)
 8006f16:	4323      	orrs	r3, r4
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	8013      	strh	r3, [r2, #0]
 8006f1c:	e10d      	b.n	800713a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	785b      	ldrb	r3, [r3, #1]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f040 8088 	bne.w	8007038 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	b29c      	uxth	r4, r3
 8006f36:	4623      	mov	r3, r4
 8006f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d014      	beq.n	8006f6a <USB_DeactivateEndpoint+0x142>
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f56:	b29c      	uxth	r4, r3
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	441a      	add	r2, r3
 8006f62:	4b34      	ldr	r3, [pc, #208]	; (8007034 <USB_DeactivateEndpoint+0x20c>)
 8006f64:	4323      	orrs	r3, r4
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	b29c      	uxth	r4, r3
 8006f78:	4623      	mov	r3, r4
 8006f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d014      	beq.n	8006fac <USB_DeactivateEndpoint+0x184>
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f98:	b29c      	uxth	r4, r3
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	441a      	add	r2, r3
 8006fa4:	4b21      	ldr	r3, [pc, #132]	; (800702c <USB_DeactivateEndpoint+0x204>)
 8006fa6:	4323      	orrs	r3, r4
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc2:	b29c      	uxth	r4, r3
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	441a      	add	r2, r3
 8006fce:	4b17      	ldr	r3, [pc, #92]	; (800702c <USB_DeactivateEndpoint+0x204>)
 8006fd0:	4323      	orrs	r3, r4
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fec:	b29c      	uxth	r4, r3
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	441a      	add	r2, r3
 8006ff8:	4b0d      	ldr	r3, [pc, #52]	; (8007030 <USB_DeactivateEndpoint+0x208>)
 8006ffa:	4323      	orrs	r3, r4
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	b29b      	uxth	r3, r3
 800700e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007016:	b29c      	uxth	r4, r3
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	441a      	add	r2, r3
 8007022:	4b03      	ldr	r3, [pc, #12]	; (8007030 <USB_DeactivateEndpoint+0x208>)
 8007024:	4323      	orrs	r3, r4
 8007026:	b29b      	uxth	r3, r3
 8007028:	8013      	strh	r3, [r2, #0]
 800702a:	e086      	b.n	800713a <USB_DeactivateEndpoint+0x312>
 800702c:	ffff80c0 	.word	0xffff80c0
 8007030:	ffff8080 	.word	0xffff8080
 8007034:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	b29c      	uxth	r4, r3
 8007046:	4623      	mov	r3, r4
 8007048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d014      	beq.n	800707a <USB_DeactivateEndpoint+0x252>
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	881b      	ldrh	r3, [r3, #0]
 800705c:	b29b      	uxth	r3, r3
 800705e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007066:	b29c      	uxth	r4, r3
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	441a      	add	r2, r3
 8007072:	4b35      	ldr	r3, [pc, #212]	; (8007148 <USB_DeactivateEndpoint+0x320>)
 8007074:	4323      	orrs	r3, r4
 8007076:	b29b      	uxth	r3, r3
 8007078:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	b29c      	uxth	r4, r3
 8007088:	4623      	mov	r3, r4
 800708a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708e:	2b00      	cmp	r3, #0
 8007090:	d014      	beq.n	80070bc <USB_DeactivateEndpoint+0x294>
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	881b      	ldrh	r3, [r3, #0]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a8:	b29c      	uxth	r4, r3
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	441a      	add	r2, r3
 80070b4:	4b25      	ldr	r3, [pc, #148]	; (800714c <USB_DeactivateEndpoint+0x324>)
 80070b6:	4323      	orrs	r3, r4
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d2:	b29c      	uxth	r4, r3
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	441a      	add	r2, r3
 80070de:	4b1a      	ldr	r3, [pc, #104]	; (8007148 <USB_DeactivateEndpoint+0x320>)
 80070e0:	4323      	orrs	r3, r4
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070fc:	b29c      	uxth	r4, r3
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	441a      	add	r2, r3
 8007108:	4b11      	ldr	r3, [pc, #68]	; (8007150 <USB_DeactivateEndpoint+0x328>)
 800710a:	4323      	orrs	r3, r4
 800710c:	b29b      	uxth	r3, r3
 800710e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	881b      	ldrh	r3, [r3, #0]
 800711c:	b29b      	uxth	r3, r3
 800711e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007126:	b29c      	uxth	r4, r3
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	441a      	add	r2, r3
 8007132:	4b07      	ldr	r3, [pc, #28]	; (8007150 <USB_DeactivateEndpoint+0x328>)
 8007134:	4323      	orrs	r3, r4
 8007136:	b29b      	uxth	r3, r3
 8007138:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bc90      	pop	{r4, r7}
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	ffffc080 	.word	0xffffc080
 800714c:	ffff80c0 	.word	0xffff80c0
 8007150:	ffff8080 	.word	0xffff8080

08007154 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007154:	b590      	push	{r4, r7, lr}
 8007156:	b095      	sub	sp, #84	; 0x54
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len = ep->xfer_len;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	64bb      	str	r3, [r7, #72]	; 0x48

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	785b      	ldrb	r3, [r3, #1]
 8007168:	2b01      	cmp	r3, #1
 800716a:	f040 815f 	bne.w	800742c <USB_EPStartXfer+0x2d8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	429a      	cmp	r2, r3
 8007178:	d909      	bls.n	800718e <USB_EPStartXfer+0x3a>
    {
      len = ep->maxpacket;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	699a      	ldr	r2, [r3, #24]
 8007184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007186:	1ad2      	subs	r2, r2, r3
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	619a      	str	r2, [r3, #24]
 800718c:	e005      	b.n	800719a <USB_EPStartXfer+0x46>
    }
    else
    {
      len = ep->xfer_len;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	2200      	movs	r2, #0
 8007198:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	7b1b      	ldrb	r3, [r3, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d11a      	bne.n	80071d8 <USB_EPStartXfer+0x84>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	6959      	ldr	r1, [r3, #20]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	88da      	ldrh	r2, [r3, #6]
 80071aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fbb0 	bl	8007914 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80071b4:	687c      	ldr	r4, [r7, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071bc:	b29b      	uxth	r3, r3
 80071be:	441c      	add	r4, r3
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	4423      	add	r3, r4
 80071c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071cc:	633b      	str	r3, [r7, #48]	; 0x30
 80071ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	801a      	strh	r2, [r3, #0]
 80071d6:	e10d      	b.n	80073f4 <USB_EPStartXfer+0x2a0>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d063      	beq.n	80072b6 <USB_EPStartXfer+0x162>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071ee:	687c      	ldr	r4, [r7, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	785b      	ldrb	r3, [r3, #1]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d145      	bne.n	8007284 <USB_EPStartXfer+0x130>
 80071f8:	687c      	ldr	r4, [r7, #4]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007200:	b29b      	uxth	r3, r3
 8007202:	441c      	add	r4, r3
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	00db      	lsls	r3, r3, #3
 800720a:	4423      	add	r3, r4
 800720c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007214:	2b00      	cmp	r3, #0
 8007216:	d111      	bne.n	800723c <USB_EPStartXfer+0xe8>
 8007218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721a:	881a      	ldrh	r2, [r3, #0]
 800721c:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8007220:	4013      	ands	r3, r2
 8007222:	b29a      	uxth	r2, r3
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007226:	801a      	strh	r2, [r3, #0]
 8007228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007234:	b29a      	uxth	r2, r3
 8007236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007238:	801a      	strh	r2, [r3, #0]
 800723a:	e037      	b.n	80072ac <USB_EPStartXfer+0x158>
 800723c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800723e:	2b3d      	cmp	r3, #61	; 0x3d
 8007240:	d811      	bhi.n	8007266 <USB_EPStartXfer+0x112>
 8007242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007244:	085b      	lsrs	r3, r3, #1
 8007246:	647b      	str	r3, [r7, #68]	; 0x44
 8007248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	d002      	beq.n	8007258 <USB_EPStartXfer+0x104>
 8007252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007254:	3301      	adds	r3, #1
 8007256:	647b      	str	r3, [r7, #68]	; 0x44
 8007258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800725a:	b29b      	uxth	r3, r3
 800725c:	029b      	lsls	r3, r3, #10
 800725e:	b29a      	uxth	r2, r3
 8007260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007262:	801a      	strh	r2, [r3, #0]
 8007264:	e022      	b.n	80072ac <USB_EPStartXfer+0x158>
 8007266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007268:	095b      	lsrs	r3, r3, #5
 800726a:	647b      	str	r3, [r7, #68]	; 0x44
 800726c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800726e:	b29b      	uxth	r3, r3
 8007270:	029b      	lsls	r3, r3, #10
 8007272:	b29b      	uxth	r3, r3
 8007274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800727c:	b29a      	uxth	r2, r3
 800727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007280:	801a      	strh	r2, [r3, #0]
 8007282:	e013      	b.n	80072ac <USB_EPStartXfer+0x158>
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	785b      	ldrb	r3, [r3, #1]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d10f      	bne.n	80072ac <USB_EPStartXfer+0x158>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007292:	b29b      	uxth	r3, r3
 8007294:	441c      	add	r4, r3
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	4423      	add	r3, r4
 800729e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80072a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072aa:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	895b      	ldrh	r3, [r3, #10]
 80072b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80072b4:	e062      	b.n	800737c <USB_EPStartXfer+0x228>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	785b      	ldrb	r3, [r3, #1]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d145      	bne.n	800734a <USB_EPStartXfer+0x1f6>
 80072be:	687c      	ldr	r4, [r7, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	441c      	add	r4, r3
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	4423      	add	r3, r4
 80072d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072d6:	627b      	str	r3, [r7, #36]	; 0x24
 80072d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d111      	bne.n	8007302 <USB_EPStartXfer+0x1ae>
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	881a      	ldrh	r2, [r3, #0]
 80072e2:	f243 33ff 	movw	r3, #13311	; 0x33ff
 80072e6:	4013      	ands	r3, r2
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	801a      	strh	r2, [r3, #0]
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	801a      	strh	r2, [r3, #0]
 8007300:	e038      	b.n	8007374 <USB_EPStartXfer+0x220>
 8007302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007304:	2b3d      	cmp	r3, #61	; 0x3d
 8007306:	d811      	bhi.n	800732c <USB_EPStartXfer+0x1d8>
 8007308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800730a:	085b      	lsrs	r3, r3, #1
 800730c:	643b      	str	r3, [r7, #64]	; 0x40
 800730e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	d002      	beq.n	800731e <USB_EPStartXfer+0x1ca>
 8007318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800731a:	3301      	adds	r3, #1
 800731c:	643b      	str	r3, [r7, #64]	; 0x40
 800731e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007320:	b29b      	uxth	r3, r3
 8007322:	029b      	lsls	r3, r3, #10
 8007324:	b29a      	uxth	r2, r3
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	801a      	strh	r2, [r3, #0]
 800732a:	e023      	b.n	8007374 <USB_EPStartXfer+0x220>
 800732c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800732e:	095b      	lsrs	r3, r3, #5
 8007330:	643b      	str	r3, [r7, #64]	; 0x40
 8007332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007334:	b29b      	uxth	r3, r3
 8007336:	029b      	lsls	r3, r3, #10
 8007338:	b29b      	uxth	r3, r3
 800733a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800733e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007342:	b29a      	uxth	r2, r3
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	801a      	strh	r2, [r3, #0]
 8007348:	e014      	b.n	8007374 <USB_EPStartXfer+0x220>
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	785b      	ldrb	r3, [r3, #1]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d110      	bne.n	8007374 <USB_EPStartXfer+0x220>
 8007352:	687c      	ldr	r4, [r7, #4]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800735a:	b29b      	uxth	r3, r3
 800735c:	441c      	add	r4, r3
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	4423      	add	r3, r4
 8007366:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800736a:	623b      	str	r3, [r7, #32]
 800736c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800736e:	b29a      	uxth	r2, r3
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	891b      	ldrh	r3, [r3, #8]
 8007378:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	6959      	ldr	r1, [r3, #20]
 8007380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007382:	b29b      	uxth	r3, r3
 8007384:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fac3 	bl	8007914 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	785b      	ldrb	r3, [r3, #1]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d115      	bne.n	80073c2 <USB_EPStartXfer+0x26e>
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ac:	b29c      	uxth	r4, r3
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	441a      	add	r2, r3
 80073b8:	4b9a      	ldr	r3, [pc, #616]	; (8007624 <USB_EPStartXfer+0x4d0>)
 80073ba:	4323      	orrs	r3, r4
 80073bc:	b29b      	uxth	r3, r3
 80073be:	8013      	strh	r3, [r2, #0]
 80073c0:	e018      	b.n	80073f4 <USB_EPStartXfer+0x2a0>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	785b      	ldrb	r3, [r3, #1]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d114      	bne.n	80073f4 <USB_EPStartXfer+0x2a0>
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e0:	b29c      	uxth	r4, r3
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	441a      	add	r2, r3
 80073ec:	4b8e      	ldr	r3, [pc, #568]	; (8007628 <USB_EPStartXfer+0x4d4>)
 80073ee:	4323      	orrs	r3, r4
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	b29b      	uxth	r3, r3
 8007402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800740a:	b29c      	uxth	r4, r3
 800740c:	f084 0310 	eor.w	r3, r4, #16
 8007410:	b29c      	uxth	r4, r3
 8007412:	f084 0320 	eor.w	r3, r4, #32
 8007416:	b29c      	uxth	r4, r3
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	441a      	add	r2, r3
 8007422:	4b82      	ldr	r3, [pc, #520]	; (800762c <USB_EPStartXfer+0x4d8>)
 8007424:	4323      	orrs	r3, r4
 8007426:	b29b      	uxth	r3, r3
 8007428:	8013      	strh	r3, [r2, #0]
 800742a:	e13f      	b.n	80076ac <USB_EPStartXfer+0x558>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	699a      	ldr	r2, [r3, #24]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	429a      	cmp	r2, r3
 8007436:	d909      	bls.n	800744c <USB_EPStartXfer+0x2f8>
    {
      len = ep->maxpacket;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	699a      	ldr	r2, [r3, #24]
 8007442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007444:	1ad2      	subs	r2, r2, r3
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	619a      	str	r2, [r3, #24]
 800744a:	e005      	b.n	8007458 <USB_EPStartXfer+0x304>
    }
    else
    {
      len = ep->xfer_len;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2200      	movs	r2, #0
 8007456:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	7b1b      	ldrb	r3, [r3, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d145      	bne.n	80074ec <USB_EPStartXfer+0x398>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007460:	687c      	ldr	r4, [r7, #4]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007468:	b29b      	uxth	r3, r3
 800746a:	441c      	add	r4, r3
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	00db      	lsls	r3, r3, #3
 8007472:	4423      	add	r3, r4
 8007474:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007478:	61fb      	str	r3, [r7, #28]
 800747a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800747c:	2b00      	cmp	r3, #0
 800747e:	d111      	bne.n	80074a4 <USB_EPStartXfer+0x350>
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	881a      	ldrh	r2, [r3, #0]
 8007484:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8007488:	4013      	ands	r3, r2
 800748a:	b29a      	uxth	r2, r3
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	801a      	strh	r2, [r3, #0]
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800749c:	b29a      	uxth	r2, r3
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	801a      	strh	r2, [r3, #0]
 80074a2:	e0e8      	b.n	8007676 <USB_EPStartXfer+0x522>
 80074a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a6:	2b3d      	cmp	r3, #61	; 0x3d
 80074a8:	d811      	bhi.n	80074ce <USB_EPStartXfer+0x37a>
 80074aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074ac:	085b      	lsrs	r3, r3, #1
 80074ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <USB_EPStartXfer+0x36c>
 80074ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074bc:	3301      	adds	r3, #1
 80074be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	029b      	lsls	r3, r3, #10
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	801a      	strh	r2, [r3, #0]
 80074cc:	e0d3      	b.n	8007676 <USB_EPStartXfer+0x522>
 80074ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074d0:	095b      	lsrs	r3, r3, #5
 80074d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	029b      	lsls	r3, r3, #10
 80074da:	b29b      	uxth	r3, r3
 80074dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	801a      	strh	r2, [r3, #0]
 80074ea:	e0c4      	b.n	8007676 <USB_EPStartXfer+0x522>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d145      	bne.n	8007580 <USB_EPStartXfer+0x42c>
 80074f4:	687c      	ldr	r4, [r7, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	441c      	add	r4, r3
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	4423      	add	r3, r4
 8007508:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800750c:	61bb      	str	r3, [r7, #24]
 800750e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007510:	2b00      	cmp	r3, #0
 8007512:	d111      	bne.n	8007538 <USB_EPStartXfer+0x3e4>
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	881a      	ldrh	r2, [r3, #0]
 8007518:	f243 33ff 	movw	r3, #13311	; 0x33ff
 800751c:	4013      	ands	r3, r2
 800751e:	b29a      	uxth	r2, r3
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	801a      	strh	r2, [r3, #0]
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800752c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007530:	b29a      	uxth	r2, r3
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	801a      	strh	r2, [r3, #0]
 8007536:	e038      	b.n	80075aa <USB_EPStartXfer+0x456>
 8007538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800753a:	2b3d      	cmp	r3, #61	; 0x3d
 800753c:	d811      	bhi.n	8007562 <USB_EPStartXfer+0x40e>
 800753e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007540:	085b      	lsrs	r3, r3, #1
 8007542:	63bb      	str	r3, [r7, #56]	; 0x38
 8007544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <USB_EPStartXfer+0x400>
 800754e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007550:	3301      	adds	r3, #1
 8007552:	63bb      	str	r3, [r7, #56]	; 0x38
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	b29b      	uxth	r3, r3
 8007558:	029b      	lsls	r3, r3, #10
 800755a:	b29a      	uxth	r2, r3
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	801a      	strh	r2, [r3, #0]
 8007560:	e023      	b.n	80075aa <USB_EPStartXfer+0x456>
 8007562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007564:	095b      	lsrs	r3, r3, #5
 8007566:	63bb      	str	r3, [r7, #56]	; 0x38
 8007568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756a:	b29b      	uxth	r3, r3
 800756c:	029b      	lsls	r3, r3, #10
 800756e:	b29b      	uxth	r3, r3
 8007570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007578:	b29a      	uxth	r2, r3
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	801a      	strh	r2, [r3, #0]
 800757e:	e014      	b.n	80075aa <USB_EPStartXfer+0x456>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	785b      	ldrb	r3, [r3, #1]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d110      	bne.n	80075aa <USB_EPStartXfer+0x456>
 8007588:	687c      	ldr	r4, [r7, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007590:	b29b      	uxth	r3, r3
 8007592:	441c      	add	r4, r3
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	4423      	add	r3, r4
 800759c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075a0:	617b      	str	r3, [r7, #20]
 80075a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	801a      	strh	r2, [r3, #0]
 80075aa:	687c      	ldr	r4, [r7, #4]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	785b      	ldrb	r3, [r3, #1]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d14c      	bne.n	800764e <USB_EPStartXfer+0x4fa>
 80075b4:	687c      	ldr	r4, [r7, #4]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075bc:	b29b      	uxth	r3, r3
 80075be:	441c      	add	r4, r3
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	4423      	add	r3, r4
 80075c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075cc:	613b      	str	r3, [r7, #16]
 80075ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d111      	bne.n	80075f8 <USB_EPStartXfer+0x4a4>
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	881a      	ldrh	r2, [r3, #0]
 80075d8:	f243 33ff 	movw	r3, #13311	; 0x33ff
 80075dc:	4013      	ands	r3, r2
 80075de:	b29a      	uxth	r2, r3
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	801a      	strh	r2, [r3, #0]
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	801a      	strh	r2, [r3, #0]
 80075f6:	e03e      	b.n	8007676 <USB_EPStartXfer+0x522>
 80075f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075fa:	2b3d      	cmp	r3, #61	; 0x3d
 80075fc:	d818      	bhi.n	8007630 <USB_EPStartXfer+0x4dc>
 80075fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007600:	085b      	lsrs	r3, r3, #1
 8007602:	637b      	str	r3, [r7, #52]	; 0x34
 8007604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <USB_EPStartXfer+0x4c0>
 800760e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007610:	3301      	adds	r3, #1
 8007612:	637b      	str	r3, [r7, #52]	; 0x34
 8007614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007616:	b29b      	uxth	r3, r3
 8007618:	029b      	lsls	r3, r3, #10
 800761a:	b29a      	uxth	r2, r3
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	801a      	strh	r2, [r3, #0]
 8007620:	e029      	b.n	8007676 <USB_EPStartXfer+0x522>
 8007622:	bf00      	nop
 8007624:	ffff80c0 	.word	0xffff80c0
 8007628:	ffffc080 	.word	0xffffc080
 800762c:	ffff8080 	.word	0xffff8080
 8007630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007632:	095b      	lsrs	r3, r3, #5
 8007634:	637b      	str	r3, [r7, #52]	; 0x34
 8007636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007638:	b29b      	uxth	r3, r3
 800763a:	029b      	lsls	r3, r3, #10
 800763c:	b29b      	uxth	r3, r3
 800763e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007646:	b29a      	uxth	r2, r3
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	801a      	strh	r2, [r3, #0]
 800764c:	e013      	b.n	8007676 <USB_EPStartXfer+0x522>
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	785b      	ldrb	r3, [r3, #1]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d10f      	bne.n	8007676 <USB_EPStartXfer+0x522>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800765c:	b29b      	uxth	r3, r3
 800765e:	441c      	add	r4, r3
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	00db      	lsls	r3, r3, #3
 8007666:	4423      	add	r3, r4
 8007668:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007670:	b29a      	uxth	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4413      	add	r3, r2
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	b29b      	uxth	r3, r3
 8007684:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800768c:	b29c      	uxth	r4, r3
 800768e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007692:	b29c      	uxth	r4, r3
 8007694:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007698:	b29c      	uxth	r4, r3
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	441a      	add	r2, r3
 80076a4:	4b04      	ldr	r3, [pc, #16]	; (80076b8 <USB_EPStartXfer+0x564>)
 80076a6:	4323      	orrs	r3, r4
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3754      	adds	r7, #84	; 0x54
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd90      	pop	{r4, r7, pc}
 80076b6:	bf00      	nop
 80076b8:	ffff8080 	.word	0xffff8080

080076bc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076bc:	b490      	push	{r4, r7}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	785b      	ldrb	r3, [r3, #1]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d018      	beq.n	8007700 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	881b      	ldrh	r3, [r3, #0]
 80076da:	b29b      	uxth	r3, r3
 80076dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076e4:	b29c      	uxth	r4, r3
 80076e6:	f084 0310 	eor.w	r3, r4, #16
 80076ea:	b29c      	uxth	r4, r3
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	441a      	add	r2, r3
 80076f6:	4b11      	ldr	r3, [pc, #68]	; (800773c <USB_EPSetStall+0x80>)
 80076f8:	4323      	orrs	r3, r4
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	8013      	strh	r3, [r2, #0]
 80076fe:	e017      	b.n	8007730 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	b29b      	uxth	r3, r3
 800770e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007716:	b29c      	uxth	r4, r3
 8007718:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800771c:	b29c      	uxth	r4, r3
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	441a      	add	r2, r3
 8007728:	4b04      	ldr	r3, [pc, #16]	; (800773c <USB_EPSetStall+0x80>)
 800772a:	4323      	orrs	r3, r4
 800772c:	b29b      	uxth	r3, r3
 800772e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bc90      	pop	{r4, r7}
 800773a:	4770      	bx	lr
 800773c:	ffff8080 	.word	0xffff8080

08007740 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007740:	b490      	push	{r4, r7}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	785b      	ldrb	r3, [r3, #1]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d03c      	beq.n	80077cc <USB_EPClearStall+0x8c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29c      	uxth	r4, r3
 8007760:	4623      	mov	r3, r4
 8007762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007766:	2b00      	cmp	r3, #0
 8007768:	d014      	beq.n	8007794 <USB_EPClearStall+0x54>
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007780:	b29c      	uxth	r4, r3
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	441a      	add	r2, r3
 800778c:	4b30      	ldr	r3, [pc, #192]	; (8007850 <USB_EPClearStall+0x110>)
 800778e:	4323      	orrs	r3, r4
 8007790:	b29b      	uxth	r3, r3
 8007792:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077aa:	b29c      	uxth	r4, r3
 80077ac:	f084 0310 	eor.w	r3, r4, #16
 80077b0:	b29c      	uxth	r4, r3
 80077b2:	f084 0320 	eor.w	r3, r4, #32
 80077b6:	b29c      	uxth	r4, r3
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	441a      	add	r2, r3
 80077c2:	4b24      	ldr	r3, [pc, #144]	; (8007854 <USB_EPClearStall+0x114>)
 80077c4:	4323      	orrs	r3, r4
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	8013      	strh	r3, [r2, #0]
 80077ca:	e03b      	b.n	8007844 <USB_EPClearStall+0x104>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	b29c      	uxth	r4, r3
 80077da:	4623      	mov	r3, r4
 80077dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d014      	beq.n	800780e <USB_EPClearStall+0xce>
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	881b      	ldrh	r3, [r3, #0]
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fa:	b29c      	uxth	r4, r3
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	441a      	add	r2, r3
 8007806:	4b14      	ldr	r3, [pc, #80]	; (8007858 <USB_EPClearStall+0x118>)
 8007808:	4323      	orrs	r3, r4
 800780a:	b29b      	uxth	r3, r3
 800780c:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	b29b      	uxth	r3, r3
 800781c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007824:	b29c      	uxth	r4, r3
 8007826:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800782a:	b29c      	uxth	r4, r3
 800782c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007830:	b29c      	uxth	r4, r3
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	441a      	add	r2, r3
 800783c:	4b05      	ldr	r3, [pc, #20]	; (8007854 <USB_EPClearStall+0x114>)
 800783e:	4323      	orrs	r3, r4
 8007840:	b29b      	uxth	r3, r3
 8007842:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bc90      	pop	{r4, r7}
 800784e:	4770      	bx	lr
 8007850:	ffff80c0 	.word	0xffff80c0
 8007854:	ffff8080 	.word	0xffff8080
 8007858:	ffffc080 	.word	0xffffc080

0800785c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007868:	78fb      	ldrb	r3, [r7, #3]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d103      	bne.n	8007876 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2280      	movs	r2, #128	; 0x80
 8007872:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007892:	b29b      	uxth	r3, r3
 8007894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800789c:	b29a      	uxth	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80078ee:	68fb      	ldr	r3, [r7, #12]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007914:	b480      	push	{r7}
 8007916:	b08d      	sub	sp, #52	; 0x34
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	4611      	mov	r1, r2
 8007920:	461a      	mov	r2, r3
 8007922:	460b      	mov	r3, r1
 8007924:	80fb      	strh	r3, [r7, #6]
 8007926:	4613      	mov	r3, r2
 8007928:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800792a:	88bb      	ldrh	r3, [r7, #4]
 800792c:	3301      	adds	r3, #1
 800792e:	085b      	lsrs	r3, r3, #1
 8007930:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800793a:	88fa      	ldrh	r2, [r7, #6]
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	4413      	add	r3, r2
 8007940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007944:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800794a:	e01b      	b.n	8007984 <USB_WritePMA+0x70>
  {
    temp1 = (uint16_t) * pBuf;
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	3301      	adds	r3, #1
 8007956:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	b29b      	uxth	r3, r3
 800795e:	021b      	lsls	r3, r3, #8
 8007960:	b29b      	uxth	r3, r3
 8007962:	461a      	mov	r2, r3
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	4313      	orrs	r3, r2
 8007968:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	b29a      	uxth	r2, r3
 800796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007970:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007974:	3302      	adds	r3, #2
 8007976:	62bb      	str	r3, [r7, #40]	; 0x28

    if (PMA_ACCESS > 1U)
    {
      pdwVal++;
    }
    pBuf++;
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	3301      	adds	r3, #1
 800797c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007980:	3b01      	subs	r3, #1
 8007982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1e0      	bne.n	800794c <USB_WritePMA+0x38>
  }
}
 800798a:	bf00      	nop
 800798c:	3734      	adds	r7, #52	; 0x34
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007996:	b480      	push	{r7}
 8007998:	b08b      	sub	sp, #44	; 0x2c
 800799a:	af00      	add	r7, sp, #0
 800799c:	60f8      	str	r0, [r7, #12]
 800799e:	60b9      	str	r1, [r7, #8]
 80079a0:	4611      	mov	r1, r2
 80079a2:	461a      	mov	r2, r3
 80079a4:	460b      	mov	r3, r1
 80079a6:	80fb      	strh	r3, [r7, #6]
 80079a8:	4613      	mov	r3, r2
 80079aa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80079ac:	88bb      	ldrh	r3, [r7, #4]
 80079ae:	085b      	lsrs	r3, r3, #1
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079bc:	88fa      	ldrh	r2, [r7, #6]
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079c6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	627b      	str	r3, [r7, #36]	; 0x24
 80079cc:	e017      	b.n	80079fe <USB_ReadPMA+0x68>
  {
    temp = *pdwVal;
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	3302      	adds	r3, #2
 80079d8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	3301      	adds	r3, #1
 80079e6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	0a1b      	lsrs	r3, r3, #8
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	3301      	adds	r3, #1
 80079f6:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	3b01      	subs	r3, #1
 80079fc:	627b      	str	r3, [r7, #36]	; 0x24
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1e4      	bne.n	80079ce <USB_ReadPMA+0x38>
    {
      pdwVal++;
    }
  }

  if ((wNBytes % 2U) != 0U)
 8007a04:	88bb      	ldrh	r3, [r7, #4]
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00c      	beq.n	8007a2a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	881b      	ldrh	r3, [r3, #0]
 8007a14:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	3302      	adds	r3, #2
 8007a1a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	3301      	adds	r3, #1
 8007a28:	61fb      	str	r3, [r7, #28]
  }
}
 8007a2a:	bf00      	nop
 8007a2c:	372c      	adds	r7, #44	; 0x2c
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <dmx_registerCallback>:
* Variable Declarations
*******************************************************************************/
/******************************************************************************
* Function Definitions
*******************************************************************************/
void dmx_registerCallback(dmx_cfg_Instance *dmx, dmx_cfg_callback callback){
 8007a36:	b480      	push	{r7}
 8007a38:	b083      	sub	sp, #12
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	6039      	str	r1, [r7, #0]
	dmx->callback = callback;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	655a      	str	r2, [r3, #84]	; 0x54
}
 8007a46:	bf00      	nop
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
	...

08007a54 <dmx_init>:

void dmx_init(dmx_cfg_Instance *dmx){
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
	if(dmx->type == dmx_cfg_TYPE_TRANSMITTER){
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d126      	bne.n	8007ab2 <dmx_init+0x5e>
		gpio_ConfigureToFloating(dmx->txBreakPort, dmx->txBreakPin);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	891b      	ldrh	r3, [r3, #8]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4610      	mov	r0, r2
 8007a70:	f002 fc86 	bl	800a380 <gpio_ConfigureToFloating>
		dmx->txState = dmx_cfg_TX_STATE_NONE;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	705a      	strb	r2, [r3, #1]
		dmx->txBreakToBreakCnt = 0;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	621a      	str	r2, [r3, #32]
		dmx->txBreakToBreakTime_ms = dmx->txBreakToBreakTime_ms + (dmx->txBreakTime_us + dmx->txMarkAfterBreakTime_us + dmx->txMarkBetweenTime_us*dmx->universeSize)/1000;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	69da      	ldr	r2, [r3, #28]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6919      	ldr	r1, [r3, #16]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	695b      	ldr	r3, [r3, #20]
 8007a8c:	4419      	add	r1, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
 8007a98:	fb00 f303 	mul.w	r3, r0, r3
 8007a9c:	440b      	add	r3, r1
 8007a9e:	4911      	ldr	r1, [pc, #68]	; (8007ae4 <dmx_init+0x90>)
 8007aa0:	fb81 0103 	smull	r0, r1, r1, r3
 8007aa4:	1189      	asrs	r1, r1, #6
 8007aa6:	17db      	asrs	r3, r3, #31
 8007aa8:	1acb      	subs	r3, r1, r3
 8007aaa:	441a      	add	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	61da      	str	r2, [r3, #28]
 8007ab0:	e010      	b.n	8007ad4 <dmx_init+0x80>
	}else if(dmx->type == dmx_cfg_TYPE_RECEIVER){
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d10c      	bne.n	8007ad4 <dmx_init+0x80>
		dmx->rxState = dmx_cfg_RX_STATE_NONE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		dmx->rxFallingTime = 0;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	631a      	str	r2, [r3, #48]	; 0x30
		dmx->rxRisingTime = 0;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	635a      	str	r2, [r3, #52]	; 0x34
		dmx->rxTimerUpdateCnt = 0;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	641a      	str	r2, [r3, #64]	; 0x40
	}
	dmx->universeCnt = 0;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8007adc:	bf00      	nop
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	10624dd3 	.word	0x10624dd3

08007ae8 <dmx_loop>:

void dmx_loop(dmx_cfg_Instance *dmx){
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
	if(dmx->type == dmx_cfg_TYPE_TRANSMITTER){
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d10e      	bne.n	8007b16 <dmx_loop+0x2e>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	785b      	ldrb	r3, [r3, #1]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d029      	beq.n	8007b54 <dmx_loop+0x6c>
		if(dmx->txBreakToBreakCnt == 0){
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d106      	bne.n	8007b16 <dmx_loop+0x2e>
			dmx_sendStart(dmx);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f83a 	bl	8007b82 <dmx_sendStart>
			dmx->txBreakToBreakCnt = dmx->txBreakToBreakTime_ms;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69da      	ldr	r2, [r3, #28]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	621a      	str	r2, [r3, #32]
		}
	}else if(dmx->type == dmx_cfg_TYPE_RECEIVER){
	}
	/*Loop flags*/
	if(dmx->universeComplete){
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d01a      	beq.n	8007b56 <dmx_loop+0x6e>
		dmx->universeComplete = false;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
		if(dmx->type == dmx_cfg_TYPE_TRANSMITTER) dmx->callbackType = dmx_cfg_CALL_TX_COMPLETE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d104      	bne.n	8007b3a <dmx_loop+0x52>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007b38:	e003      	b.n	8007b42 <dmx_loop+0x5a>
		else dmx->callbackType = dmx_cfg_CALL_RX_COMPLETE;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		if(dmx->callback) dmx->callback(dmx);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d005      	beq.n	8007b56 <dmx_loop+0x6e>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	4798      	blx	r3
 8007b52:	e000      	b.n	8007b56 <dmx_loop+0x6e>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8007b54:	bf00      	nop
	}
}
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <dmx_1ms>:

void dmx_1ms(dmx_cfg_Instance *dmx){
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
	if(dmx->txBreakToBreakCnt > 0) --dmx->txBreakToBreakCnt;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	dd04      	ble.n	8007b76 <dmx_1ms+0x1a>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	1e5a      	subs	r2, r3, #1
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	621a      	str	r2, [r3, #32]
}
 8007b76:	bf00      	nop
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <dmx_sendStart>:

void dmx_sendStart(dmx_cfg_Instance *dmx){
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b082      	sub	sp, #8
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d130      	bne.n	8007bf4 <dmx_sendStart+0x72>
	if(dmx->universe == NULL) return;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d02e      	beq.n	8007bf8 <dmx_sendStart+0x76>
	if(dmx->txBreakToBreakTime_ms < dmx_cfg_MIN_BREAK_TO_BREAK_TIME_MS) dmx->txBreakToBreakTime_ms = dmx_cfg_MIN_BREAK_TO_BREAK_TIME_MS;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	2b18      	cmp	r3, #24
 8007ba0:	dc02      	bgt.n	8007ba8 <dmx_sendStart+0x26>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2219      	movs	r2, #25
 8007ba6:	61da      	str	r2, [r3, #28]
	if(dmx->txBreakTime_us < dmx_cfg_MIN_BREAK_TIME_US) dmx->txBreakTime_us = dmx_cfg_MIN_BREAK_TIME_US;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	2b5f      	cmp	r3, #95	; 0x5f
 8007bae:	dc02      	bgt.n	8007bb6 <dmx_sendStart+0x34>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2260      	movs	r2, #96	; 0x60
 8007bb4:	611a      	str	r2, [r3, #16]
	if(dmx->txMarkAfterBreakTime_us < dmx_cfg_MIN_MARK_AFTER_BREAK_TIME_US) dmx->txMarkAfterBreakTime_us = dmx_cfg_MIN_MARK_AFTER_BREAK_TIME_US;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	2b0b      	cmp	r3, #11
 8007bbc:	dc02      	bgt.n	8007bc4 <dmx_sendStart+0x42>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	220c      	movs	r2, #12
 8007bc2:	615a      	str	r2, [r3, #20]
	dmx->universeComplete = false;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	dmx->txState = dmx_cfg_TX_STATE_SEND_BREAK;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	705a      	strb	r2, [r3, #1]
	tim_setNewTimeAndStart(dmx->txTimer, dmx->txBreakTime_us);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68da      	ldr	r2, [r3, #12]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	4610      	mov	r0, r2
 8007bde:	f003 faab 	bl	800b138 <tim_setNewTimeAndStart>
	gpio_ConfigureToPushPull(dmx->txBreakPort, dmx->txBreakPin);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	891b      	ldrh	r3, [r3, #8]
 8007bea:	4619      	mov	r1, r3
 8007bec:	4610      	mov	r0, r2
 8007bee:	f002 fbe5 	bl	800a3bc <gpio_ConfigureToPushPull>
 8007bf2:	e002      	b.n	8007bfa <dmx_sendStart+0x78>
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 8007bf4:	bf00      	nop
 8007bf6:	e000      	b.n	8007bfa <dmx_sendStart+0x78>
	if(dmx->universe == NULL) return;
 8007bf8:	bf00      	nop
}
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <dmx_txStart>:
	else if(timeIdx == dmx_cfg_TIME_MARK_AFTER_BREAK) dmx->txMarkAfterBreakTime_us = time_us;
	else if(timeIdx == dmx_cfg_TIME_MARK_BETWEEN) dmx->txMarkBetweenTime_us = time_us;
	else if(timeIdx == dmx_cfg_TIME_BREAK_TO_BREAK) dmx->txBreakToBreakTime_ms = (time_us + dmx->txBreakTime_us + dmx->txMarkAfterBreakTime_us + dmx->txMarkBetweenTime_us*dmx->universeSize)/1000;
}

void dmx_txStart(dmx_cfg_Instance *dmx){
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d103      	bne.n	8007c18 <dmx_txStart+0x18>
	dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	705a      	strb	r2, [r3, #1]
 8007c16:	e000      	b.n	8007c1a <dmx_txStart+0x1a>
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 8007c18:	bf00      	nop
}
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <dmx_rxStart>:
void dmx_txStop(dmx_cfg_Instance *dmx){
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
	dmx->txState = dmx_cfg_TX_STATE_NONE;
}

void dmx_rxStart(dmx_cfg_Instance *dmx){
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_RECEIVER) return;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d109      	bne.n	8007c48 <dmx_rxStart+0x24>
	app_uart_enableReceiveInt(dmx->uart);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7f9 fe30 	bl	800189e <app_uart_enableReceiveInt>
	dmx->rxState = dmx_cfg_RX_STATE_WAIT_FOR_BREAK;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007c46:	e000      	b.n	8007c4a <dmx_rxStart+0x26>
	if(dmx->type != dmx_cfg_TYPE_RECEIVER) return;
 8007c48:	bf00      	nop
}
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <dmx_irqTxTimerHandler>:
void dmx_incrementRxUpdateCnt(dmx_cfg_Instance *dmx){
	++dmx->rxTimerUpdateCnt;
}

/*Transmit IRQs*/
void dmx_irqTxTimerHandler(dmx_cfg_Instance *dmx){
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
	if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	785b      	ldrb	r3, [r3, #1]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d05c      	beq.n	8007d1a <dmx_irqTxTimerHandler+0xca>
	if(dmx->txState == dmx_cfg_TX_STATE_SEND_BREAK){
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	785b      	ldrb	r3, [r3, #1]
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d113      	bne.n	8007c90 <dmx_irqTxTimerHandler+0x40>
		gpio_ConfigureToFloating(dmx->txBreakPort, dmx->txBreakPin);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	891b      	ldrh	r3, [r3, #8]
 8007c70:	4619      	mov	r1, r3
 8007c72:	4610      	mov	r0, r2
 8007c74:	f002 fb84 	bl	800a380 <gpio_ConfigureToFloating>
		tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkAfterBreakTime_us);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68da      	ldr	r2, [r3, #12]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	695b      	ldr	r3, [r3, #20]
 8007c80:	4619      	mov	r1, r3
 8007c82:	4610      	mov	r0, r2
 8007c84:	f003 fa58 	bl	800b138 <tim_setNewTimeAndStart>
		dmx->txState = dmx_cfg_TX_STATE_SEND_MARK;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2203      	movs	r2, #3
 8007c8c:	705a      	strb	r2, [r3, #1]
 8007c8e:	e045      	b.n	8007d1c <dmx_irqTxTimerHandler+0xcc>
	}else if(dmx->txState == dmx_cfg_TX_STATE_SEND_MARK){
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	785b      	ldrb	r3, [r3, #1]
 8007c94:	2b03      	cmp	r3, #3
 8007c96:	d133      	bne.n	8007d00 <dmx_irqTxTimerHandler+0xb0>
		dmx->universeCnt = 0;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		dmx->uart->CR1 &= ~USART_CR1_TXEIE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007ca8:	6812      	ldr	r2, [r2, #0]
 8007caa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cae:	601a      	str	r2, [r3, #0]
		dmx->uart->TDR = dmx->universeStartCode;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007cba:	b292      	uxth	r2, r2
 8007cbc:	851a      	strh	r2, [r3, #40]	; 0x28
		if(dmx->txMarkBetweenTime_us == 0) {
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d110      	bne.n	8007ce8 <dmx_irqTxTimerHandler+0x98>
			dmx->uart->CR1 |= USART_CR1_TXEIE;		//start with transmission --> enable transmitbuffer empty interrupt
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007cce:	6812      	ldr	r2, [r2, #0]
 8007cd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cd4:	601a      	str	r2, [r3, #0]
			tim_stop(dmx->txTimer);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f003 fa64 	bl	800b1a8 <tim_stop>
			dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;	//The whole universe can be transmitted as fast as possible
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	705a      	strb	r2, [r3, #1]
 8007ce6:	e019      	b.n	8007d1c <dmx_irqTxTimerHandler+0xcc>
		}
		else{
			tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkBetweenTime_us);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68da      	ldr	r2, [r3, #12]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	f003 fa20 	bl	800b138 <tim_setNewTimeAndStart>
			dmx->txState = dmx_cfg_TX_STATE_SEND_UNIVERSE;	//The universe can be transmitted with defined delay between all data bytes
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2205      	movs	r2, #5
 8007cfc:	705a      	strb	r2, [r3, #1]
 8007cfe:	e00d      	b.n	8007d1c <dmx_irqTxTimerHandler+0xcc>
		}
	}else if(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE){
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	785b      	ldrb	r3, [r3, #1]
 8007d04:	2b05      	cmp	r3, #5
 8007d06:	d109      	bne.n	8007d1c <dmx_irqTxTimerHandler+0xcc>
		dmx->uart->CR1 |= USART_CR1_TXEIE;		//start with transmission --> enable transmitbuffer empty interrupt
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007d10:	6812      	ldr	r2, [r2, #0]
 8007d12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	e000      	b.n	8007d1c <dmx_irqTxTimerHandler+0xcc>
	if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8007d1a:	bf00      	nop
	}
}
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <dmx_irqTxInterfaceHandler>:

void dmx_irqTxInterfaceHandler(dmx_cfg_Instance *dmx){
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b082      	sub	sp, #8
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
	if (dmx->uart->ISR & USART_ISR_TXE){				//transmit dmx values
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2e:	69db      	ldr	r3, [r3, #28]
 8007d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d066      	beq.n	8007e06 <dmx_irqTxInterfaceHandler+0xe4>
		dmx->uart->ISR &= ~USART_ISR_TXE; //Kill transmit-buffer empty flag
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007d40:	69d2      	ldr	r2, [r2, #28]
 8007d42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d46:	61da      	str	r2, [r3, #28]
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	785b      	ldrb	r3, [r3, #1]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d059      	beq.n	8007e04 <dmx_irqTxInterfaceHandler+0xe2>
		if((dmx->txState == dmx_cfg_TX_STATE_WAIT_FOR_BREAK)||(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE)){
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	785b      	ldrb	r3, [r3, #1]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d003      	beq.n	8007d60 <dmx_irqTxInterfaceHandler+0x3e>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	785b      	ldrb	r3, [r3, #1]
 8007d5c:	2b05      	cmp	r3, #5
 8007d5e:	d152      	bne.n	8007e06 <dmx_irqTxInterfaceHandler+0xe4>
			if(dmx->universeCnt < dmx->universeSize){
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d230      	bcs.n	8007dd2 <dmx_irqTxInterfaceHandler+0xb0>
				dmx->uart->CR1 &= ~USART_CR1_TXEIE;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007d78:	6812      	ldr	r2, [r2, #0]
 8007d7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d7e:	601a      	str	r2, [r3, #0]
				dmx->uart->TDR = dmx->universe[dmx->universeCnt];
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	f8b1 1050 	ldrh.w	r1, [r1, #80]	; 0x50
 8007d8e:	440a      	add	r2, r1
 8007d90:	7812      	ldrb	r2, [r2, #0]
 8007d92:	b292      	uxth	r2, r2
 8007d94:	851a      	strh	r2, [r3, #40]	; 0x28
				dmx->universeCnt++;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				if(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE) tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkBetweenTime_us);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	785b      	ldrb	r3, [r3, #1]
 8007daa:	2b05      	cmp	r3, #5
 8007dac:	d108      	bne.n	8007dc0 <dmx_irqTxInterfaceHandler+0x9e>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68da      	ldr	r2, [r3, #12]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	4619      	mov	r1, r3
 8007db8:	4610      	mov	r0, r2
 8007dba:	f003 f9bd 	bl	800b138 <tim_setNewTimeAndStart>
 8007dbe:	e022      	b.n	8007e06 <dmx_irqTxInterfaceHandler+0xe4>
				else dmx->uart->CR1 |= USART_CR1_TXEIE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007dc8:	6812      	ldr	r2, [r2, #0]
 8007dca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	e019      	b.n	8007e06 <dmx_irqTxInterfaceHandler+0xe4>
			}else{
				dmx->universeCnt = 0;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				dmx->uart->CR1 &= ~USART_CR1_TXEIE;	//disable transmit-buffer empty interrupt
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007de2:	6812      	ldr	r2, [r2, #0]
 8007de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007de8:	601a      	str	r2, [r3, #0]
				dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	705a      	strb	r2, [r3, #1]
				tim_stop(dmx->txTimer);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f003 f9d7 	bl	800b1a8 <tim_stop>
				dmx->universeComplete = true;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007e02:	e000      	b.n	8007e06 <dmx_irqTxInterfaceHandler+0xe4>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8007e04:	bf00      	nop
			}
		}

	}
}
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <dmx_irqRxInterfaceHandler>:
/*Receive IRQs*/
void dmx_irqRxTimerHandler(dmx_cfg_Instance *dmx){
//TODO: Add measurement of break
}

void dmx_irqRxInterfaceHandler(dmx_cfg_Instance *dmx){
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
	uint32_t sr = dmx->uart->ISR;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	60fb      	str	r3, [r7, #12]
	if (sr & USART_ISR_RXNE){
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f003 0320 	and.w	r3, r3, #32
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d065      	beq.n	8007ef2 <dmx_irqRxInterfaceHandler+0xe6>
		if(sr & USART_ISR_ORE) dmx->uart->ICR |= USART_ICR_ORECF; /*Kill overrun error*/
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f003 0308 	and.w	r3, r3, #8
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d007      	beq.n	8007e40 <dmx_irqRxInterfaceHandler+0x34>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007e38:	6a12      	ldr	r2, [r2, #32]
 8007e3a:	f042 0208 	orr.w	r2, r2, #8
 8007e3e:	621a      	str	r2, [r3, #32]
		uint8_t  dmxByte = (uint8_t)dmx->uart->RDR;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	72fb      	strb	r3, [r7, #11]
		if(dmx->rxState == dmx_cfg_RX_STATE_NONE) return;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d04d      	beq.n	8007ef0 <dmx_irqRxInterfaceHandler+0xe4>
		if(sr & USART_ISR_FE){	/*Frame error*/
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f003 0302 	and.w	r3, r3, #2
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d014      	beq.n	8007e88 <dmx_irqRxInterfaceHandler+0x7c>
			dmx->uart->ICR |= USART_ICR_FECF; /*Kill frame error*/
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007e66:	6a12      	ldr	r2, [r2, #32]
 8007e68:	f042 0202 	orr.w	r2, r2, #2
 8007e6c:	621a      	str	r2, [r3, #32]
			dmx->universeCnt = 0;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			dmx->rxState = dmx_cfg_RX_STATE_RECEIVE_START_CODE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2203      	movs	r2, #3
 8007e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			dmx->universeComplete = false;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007e86:	e034      	b.n	8007ef2 <dmx_irqRxInterfaceHandler+0xe6>
		}else if(dmx->rxState == dmx_cfg_RX_STATE_RECEIVE_START_CODE){
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d108      	bne.n	8007ea4 <dmx_irqRxInterfaceHandler+0x98>
			dmx->rxState = dmx_cfg_RX_STATE_RECEIVE_UNIVERSE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2204      	movs	r2, #4
 8007e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			dmx->universeStartCode = dmxByte;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	7afa      	ldrb	r2, [r7, #11]
 8007e9e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8007ea2:	e026      	b.n	8007ef2 <dmx_irqRxInterfaceHandler+0xe6>
		}else if(dmx->rxState == dmx_cfg_RX_STATE_RECEIVE_UNIVERSE){
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d121      	bne.n	8007ef2 <dmx_irqRxInterfaceHandler+0xe6>
			dmx->universe[dmx->universeCnt] = dmxByte;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8007eb8:	4413      	add	r3, r2
 8007eba:	7afa      	ldrb	r2, [r7, #11]
 8007ebc:	701a      	strb	r2, [r3, #0]
			dmx->universeCnt++;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			if(dmx->universeCnt >= dmx->universeSize){
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d309      	bcc.n	8007ef2 <dmx_irqRxInterfaceHandler+0xe6>
				dmx->universeComplete = true;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
				dmx->rxState = dmx_cfg_RX_STATE_WAIT_FOR_BREAK;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007eee:	e000      	b.n	8007ef2 <dmx_irqRxInterfaceHandler+0xe6>
		if(dmx->rxState == dmx_cfg_RX_STATE_NONE) return;
 8007ef0:	bf00      	nop
			}
		}
	}
}
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <eeprom_registerCallback>:
static inline void readData(eeprom_cfg_Config *config, uint8_t *data, uint16_t dataSize);
static inline void callbackError(uint8_t type);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void eeprom_registerCallback(eeprom_cfg_Config *config, eeprom_cfg_callback callback){
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
	config->callback = callback;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	60da      	str	r2, [r3, #12]
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <eeprom_init>:
void eeprom_init(eeprom_cfg_Config *config){
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
	if(config->callback != NULL){
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d004      	beq.n	8007f32 <eeprom_init+0x1a>
		config->maxAddress = config->memorySize >> 3; /*Convert Bit to Byte*/
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	08da      	lsrs	r2, r3, #3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	611a      	str	r2, [r3, #16]
	}
}
 8007f32:	bf00      	nop
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <isSimilarToLast>:
	message->origin = 0;
	message->value = 0;
	message->ctx = 0;
}

static inline uint8_t isSimilarToLast(msg_Message *message, msg_Buffer *buf){
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b084      	sub	sp, #16
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	6039      	str	r1, [r7, #0]
	char type;
	uint16_t idx;
	if(RINGBUFFER_isEmpty(&buf->buffer)) return 0;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 fa16 	bl	800837c <RINGBUFFER_isEmpty>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <isSimilarToLast+0x1c>
 8007f56:	2300      	movs	r3, #0
 8007f58:	e039      	b.n	8007fce <isSimilarToLast+0x90>
	uint16_t lastTmp = buf->lastMsg;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	899b      	ldrh	r3, [r3, #12]
 8007f5e:	81fb      	strh	r3, [r7, #14]
	type = buf->buffer.data[lastTmp];
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	89fb      	ldrh	r3, [r7, #14]
 8007f66:	4413      	add	r3, r2
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	737b      	strb	r3, [r7, #13]
	if(++lastTmp >= buf->buffer.size) lastTmp = 0;
 8007f6c:	89fb      	ldrh	r3, [r7, #14]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	81fb      	strh	r3, [r7, #14]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	889b      	ldrh	r3, [r3, #4]
 8007f76:	89fa      	ldrh	r2, [r7, #14]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d301      	bcc.n	8007f80 <isSimilarToLast+0x42>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	81fb      	strh	r3, [r7, #14]
	idx = (buf->buffer.data[lastTmp] << 8) & 0xFF00;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	689a      	ldr	r2, [r3, #8]
 8007f84:	89fb      	ldrh	r3, [r7, #14]
 8007f86:	4413      	add	r3, r2
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	021b      	lsls	r3, r3, #8
 8007f8c:	817b      	strh	r3, [r7, #10]
	if(++lastTmp >= buf->buffer.size) lastTmp = 0;
 8007f8e:	89fb      	ldrh	r3, [r7, #14]
 8007f90:	3301      	adds	r3, #1
 8007f92:	81fb      	strh	r3, [r7, #14]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	889b      	ldrh	r3, [r3, #4]
 8007f98:	89fa      	ldrh	r2, [r7, #14]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d301      	bcc.n	8007fa2 <isSimilarToLast+0x64>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	81fb      	strh	r3, [r7, #14]
	idx |= (buf->buffer.data[lastTmp] << 0) & 0xFF;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	689a      	ldr	r2, [r3, #8]
 8007fa6:	89fb      	ldrh	r3, [r7, #14]
 8007fa8:	4413      	add	r3, r2
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	897b      	ldrh	r3, [r7, #10]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	817b      	strh	r3, [r7, #10]
	if((type == message->type) && (idx == message->index)) return 1;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	791b      	ldrb	r3, [r3, #4]
 8007fb8:	7b7a      	ldrb	r2, [r7, #13]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d106      	bne.n	8007fcc <isSimilarToLast+0x8e>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	881b      	ldrh	r3, [r3, #0]
 8007fc2:	897a      	ldrh	r2, [r7, #10]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d101      	bne.n	8007fcc <isSimilarToLast+0x8e>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e000      	b.n	8007fce <isSimilarToLast+0x90>
	else return 0;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <writeMsg>:

static inline uint8_t writeMsg(msg_Message *message, msg_Buffer *buf){
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b084      	sub	sp, #16
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	6039      	str	r1, [r7, #0]
	uint8_t bufferState =  ringbuffer_NO_BUF;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	73fb      	strb	r3, [r7, #15]
	uint8_t isSimilarActive = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	73bb      	strb	r3, [r7, #14]
	uint16_t nextMsgTmp = buf->buffer.in;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	881b      	ldrh	r3, [r3, #0]
 8007fec:	81bb      	strh	r3, [r7, #12]
	if(message != NULL){
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d064      	beq.n	80080be <writeMsg+0xe8>
		if(isSimilarToLast(message, buf)){
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7ff ffa1 	bl	8007f3e <isSimilarToLast>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d005      	beq.n	800800e <writeMsg+0x38>
			buf->buffer.in = buf->lastMsg;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	899a      	ldrh	r2, [r3, #12]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	801a      	strh	r2, [r3, #0]
			isSimilarActive = 1;
 800800a:	2301      	movs	r3, #1
 800800c:	73bb      	strb	r3, [r7, #14]
		}
		bufferState = RINGBUFFER_cIn(message->type, &buf->buffer);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	791b      	ldrb	r3, [r3, #4]
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	4611      	mov	r1, r2
 8008016:	4618      	mov	r0, r3
 8008018:	f000 f942 	bl	80082a0 <RINGBUFFER_cIn>
 800801c:	4603      	mov	r3, r0
 800801e:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->index >> 8), &buf->buffer);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	881b      	ldrh	r3, [r3, #0]
 8008024:	0a1b      	lsrs	r3, r3, #8
 8008026:	b29b      	uxth	r3, r3
 8008028:	b2db      	uxtb	r3, r3
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	4611      	mov	r1, r2
 800802e:	4618      	mov	r0, r3
 8008030:	f000 f936 	bl	80082a0 <RINGBUFFER_cIn>
 8008034:	4603      	mov	r3, r0
 8008036:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->index), &buf->buffer);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	b2db      	uxtb	r3, r3
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	4611      	mov	r1, r2
 8008042:	4618      	mov	r0, r3
 8008044:	f000 f92c 	bl	80082a0 <RINGBUFFER_cIn>
 8008048:	4603      	mov	r3, r0
 800804a:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->value >> 8), &buf->buffer);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008052:	121b      	asrs	r3, r3, #8
 8008054:	b21b      	sxth	r3, r3
 8008056:	b2db      	uxtb	r3, r3
 8008058:	683a      	ldr	r2, [r7, #0]
 800805a:	4611      	mov	r1, r2
 800805c:	4618      	mov	r0, r3
 800805e:	f000 f91f 	bl	80082a0 <RINGBUFFER_cIn>
 8008062:	4603      	mov	r3, r0
 8008064:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->value), &buf->buffer);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800806c:	b2db      	uxtb	r3, r3
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	4611      	mov	r1, r2
 8008072:	4618      	mov	r0, r3
 8008074:	f000 f914 	bl	80082a0 <RINGBUFFER_cIn>
 8008078:	4603      	mov	r3, r0
 800807a:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->ctx >> 8), &buf->buffer);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008082:	121b      	asrs	r3, r3, #8
 8008084:	b21b      	sxth	r3, r3
 8008086:	b2db      	uxtb	r3, r3
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	4611      	mov	r1, r2
 800808c:	4618      	mov	r0, r3
 800808e:	f000 f907 	bl	80082a0 <RINGBUFFER_cIn>
 8008092:	4603      	mov	r3, r0
 8008094:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->ctx), &buf->buffer);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800809c:	b2db      	uxtb	r3, r3
 800809e:	683a      	ldr	r2, [r7, #0]
 80080a0:	4611      	mov	r1, r2
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 f8fc 	bl	80082a0 <RINGBUFFER_cIn>
 80080a8:	4603      	mov	r3, r0
 80080aa:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn(message->origin, &buf->buffer);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	795b      	ldrb	r3, [r3, #5]
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	4611      	mov	r1, r2
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 f8f3 	bl	80082a0 <RINGBUFFER_cIn>
 80080ba:	4603      	mov	r3, r0
 80080bc:	73fb      	strb	r3, [r7, #15]
	}
	if(bufferState ==  ringbuffer_FULL) buf->buffer.in = nextMsgTmp;
 80080be:	7bfb      	ldrb	r3, [r7, #15]
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d103      	bne.n	80080cc <writeMsg+0xf6>
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	89ba      	ldrh	r2, [r7, #12]
 80080c8:	801a      	strh	r2, [r3, #0]
 80080ca:	e005      	b.n	80080d8 <writeMsg+0x102>
	else if(!isSimilarActive) buf->lastMsg = nextMsgTmp;
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d102      	bne.n	80080d8 <writeMsg+0x102>
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	89ba      	ldrh	r2, [r7, #12]
 80080d6:	819a      	strh	r2, [r3, #12]
	return bufferState;
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <msg_writeEvent>:
	msgBuffer.out = 0;
	msgBuffer.size = size;
	msgBuffer.data = pData;
}

uint8_t msg_writeEvent(msg_Message *message, msg_Buffer *buf){
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	6039      	str	r1, [r7, #0]
	message->index = CAST_MSG_TO_EVENT(message->index);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	801a      	strh	r2, [r3, #0]
	uint8_t bufferState = writeMsg(message, buf);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff ff6a 	bl	8007fd6 <writeMsg>
 8008102:	4603      	mov	r3, r0
 8008104:	73fb      	strb	r3, [r7, #15]
	return bufferState;
 8008106:	7bfb      	ldrb	r3, [r7, #15]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <msg_writeAction>:

uint8_t msg_writeAction(msg_Message *message, msg_Buffer *buf){
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
	message->index = CAST_MSG_TO_ACTION(message->index);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008126:	b29a      	uxth	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	801a      	strh	r2, [r3, #0]
	uint8_t bufferState = writeMsg(message, buf);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7ff ff51 	bl	8007fd6 <writeMsg>
 8008134:	4603      	mov	r3, r0
 8008136:	73fb      	strb	r3, [r7, #15]
	return bufferState;
 8008138:	7bfb      	ldrb	r3, [r7, #15]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <msg_getNext>:

msg_Message *msg_getNext(msg_Message *message, msg_Buffer *buf){
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
	uint8_t bufferState =  ringbuffer_OK;
 800814c:	2301      	movs	r3, #1
 800814e:	73fb      	strb	r3, [r7, #15]
	char tmp = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	73bb      	strb	r3, [r7, #14]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	f107 030e 	add.w	r3, r7, #14
 800815a:	4611      	mov	r1, r2
 800815c:	4618      	mov	r0, r3
 800815e:	f000 f8dc 	bl	800831a <RINGBUFFER_cOut>
 8008162:	4603      	mov	r3, r0
 8008164:	73fb      	strb	r3, [r7, #15]
	message->type = tmp;
 8008166:	7bba      	ldrb	r2, [r7, #14]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	711a      	strb	r2, [r3, #4]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 800816c:	683a      	ldr	r2, [r7, #0]
 800816e:	f107 030e 	add.w	r3, r7, #14
 8008172:	4611      	mov	r1, r2
 8008174:	4618      	mov	r0, r3
 8008176:	f000 f8d0 	bl	800831a <RINGBUFFER_cOut>
 800817a:	4603      	mov	r3, r0
 800817c:	73fb      	strb	r3, [r7, #15]
	message->index |= (uint16_t)((tmp & 0xFF) << 8);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	881a      	ldrh	r2, [r3, #0]
 8008182:	7bbb      	ldrb	r3, [r7, #14]
 8008184:	b29b      	uxth	r3, r3
 8008186:	021b      	lsls	r3, r3, #8
 8008188:	b29b      	uxth	r3, r3
 800818a:	4313      	orrs	r3, r2
 800818c:	b29a      	uxth	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	801a      	strh	r2, [r3, #0]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	f107 030e 	add.w	r3, r7, #14
 8008198:	4611      	mov	r1, r2
 800819a:	4618      	mov	r0, r3
 800819c:	f000 f8bd 	bl	800831a <RINGBUFFER_cOut>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]
	message->index |= (uint16_t)(tmp & 0xFF);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	881a      	ldrh	r2, [r3, #0]
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	4313      	orrs	r3, r2
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	801a      	strh	r2, [r3, #0]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	f107 030e 	add.w	r3, r7, #14
 80081ba:	4611      	mov	r1, r2
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 f8ac 	bl	800831a <RINGBUFFER_cOut>
 80081c2:	4603      	mov	r3, r0
 80081c4:	73fb      	strb	r3, [r7, #15]
	message->value |= (uint16_t)((tmp & 0xFF) << 8);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80081cc:	7bbb      	ldrb	r3, [r7, #14]
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	021b      	lsls	r3, r3, #8
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	b21b      	sxth	r3, r3
 80081d6:	4313      	orrs	r3, r2
 80081d8:	b21a      	sxth	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	805a      	strh	r2, [r3, #2]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	f107 030e 	add.w	r3, r7, #14
 80081e4:	4611      	mov	r1, r2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 f897 	bl	800831a <RINGBUFFER_cOut>
 80081ec:	4603      	mov	r3, r0
 80081ee:	73fb      	strb	r3, [r7, #15]
	message->value |= (uint16_t)(tmp & 0xFF);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
 80081f8:	b21b      	sxth	r3, r3
 80081fa:	4313      	orrs	r3, r2
 80081fc:	b21a      	sxth	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	805a      	strh	r2, [r3, #2]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	f107 030e 	add.w	r3, r7, #14
 8008208:	4611      	mov	r1, r2
 800820a:	4618      	mov	r0, r3
 800820c:	f000 f885 	bl	800831a <RINGBUFFER_cOut>
 8008210:	4603      	mov	r3, r0
 8008212:	73fb      	strb	r3, [r7, #15]
	message->ctx |= (uint16_t)((tmp & 0xFF) << 8);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	b29b      	uxth	r3, r3
 800821e:	021b      	lsls	r3, r3, #8
 8008220:	b29b      	uxth	r3, r3
 8008222:	b21b      	sxth	r3, r3
 8008224:	4313      	orrs	r3, r2
 8008226:	b21a      	sxth	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	80da      	strh	r2, [r3, #6]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	f107 030e 	add.w	r3, r7, #14
 8008232:	4611      	mov	r1, r2
 8008234:	4618      	mov	r0, r3
 8008236:	f000 f870 	bl	800831a <RINGBUFFER_cOut>
 800823a:	4603      	mov	r3, r0
 800823c:	73fb      	strb	r3, [r7, #15]
	message->ctx |= (uint16_t)(tmp & 0xFF);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	b21b      	sxth	r3, r3
 8008248:	4313      	orrs	r3, r2
 800824a:	b21a      	sxth	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	80da      	strh	r2, [r3, #6]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	f107 030e 	add.w	r3, r7, #14
 8008256:	4611      	mov	r1, r2
 8008258:	4618      	mov	r0, r3
 800825a:	f000 f85e 	bl	800831a <RINGBUFFER_cOut>
 800825e:	4603      	mov	r3, r0
 8008260:	73fb      	strb	r3, [r7, #15]
	message->origin = tmp;
 8008262:	7bba      	ldrb	r2, [r7, #14]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	715a      	strb	r2, [r3, #5]
	if(bufferState ==  ringbuffer_OK)return message;
 8008268:	7bfb      	ldrb	r3, [r7, #15]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d101      	bne.n	8008272 <msg_getNext+0x130>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	e000      	b.n	8008274 <msg_getNext+0x132>
	else return NULL;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <msg_isAction>:

uint8_t msg_isAction(msg_Message *message){
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
	if((message->index & ACTION_MSK) == ACTION_MSK) return TRUE;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	881b      	ldrh	r3, [r3, #0]
 8008288:	b21b      	sxth	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	da01      	bge.n	8008292 <msg_isAction+0x16>
 800828e:	2301      	movs	r3, #1
 8008290:	e000      	b.n	8008294 <msg_isAction+0x18>
	else return FALSE;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <RINGBUFFER_cIn>:
 *  Created on: 15.01.2018
 *      Author: sawadee
 */
#include "ringbuffer.h"

uint8_t RINGBUFFER_cIn(char data, stRingBuf *pBuf){
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	4603      	mov	r3, r0
 80082a8:	6039      	str	r1, [r7, #0]
 80082aa:	71fb      	strb	r3, [r7, #7]
	if(pBuf->data != NULL){
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d02b      	beq.n	800830c <RINGBUFFER_cIn+0x6c>
		if ( ( pBuf->in + 1 == pBuf->out ) || ( pBuf->out == 0 && pBuf->in + 1 == pBuf->size ) ) return ringbuffer_FULL;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	881b      	ldrh	r3, [r3, #0]
 80082b8:	3301      	adds	r3, #1
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	8852      	ldrh	r2, [r2, #2]
 80082be:	4293      	cmp	r3, r2
 80082c0:	d00a      	beq.n	80082d8 <RINGBUFFER_cIn+0x38>
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	885b      	ldrh	r3, [r3, #2]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d108      	bne.n	80082dc <RINGBUFFER_cIn+0x3c>
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	3301      	adds	r3, #1
 80082d0:	683a      	ldr	r2, [r7, #0]
 80082d2:	8892      	ldrh	r2, [r2, #4]
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d101      	bne.n	80082dc <RINGBUFFER_cIn+0x3c>
 80082d8:	2303      	movs	r3, #3
 80082da:	e018      	b.n	800830e <RINGBUFFER_cIn+0x6e>
		pBuf->data[pBuf->in] = data;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	8812      	ldrh	r2, [r2, #0]
 80082e4:	4413      	add	r3, r2
 80082e6:	79fa      	ldrb	r2, [r7, #7]
 80082e8:	701a      	strb	r2, [r3, #0]
		pBuf->in++;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	881b      	ldrh	r3, [r3, #0]
 80082ee:	3301      	adds	r3, #1
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	801a      	strh	r2, [r3, #0]
		if (pBuf->in >= pBuf->size) pBuf->in = 0;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	881a      	ldrh	r2, [r3, #0]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	889b      	ldrh	r3, [r3, #4]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d302      	bcc.n	8008308 <RINGBUFFER_cIn+0x68>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2200      	movs	r2, #0
 8008306:	801a      	strh	r2, [r3, #0]
		return ringbuffer_OK;
 8008308:	2301      	movs	r3, #1
 800830a:	e000      	b.n	800830e <RINGBUFFER_cIn+0x6e>
	}else return ringbuffer_NO_BUF;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <RINGBUFFER_cOut>:
uint8_t RINGBUFFER_cOut(char *pData, stRingBuf *pBuf){
 800831a:	b480      	push	{r7}
 800831c:	b083      	sub	sp, #12
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	6039      	str	r1, [r7, #0]
	if(pBuf->data != NULL){
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d020      	beq.n	800836e <RINGBUFFER_cOut+0x54>
		if (pBuf->out == pBuf->in) return ringbuffer_EMPTY;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	885a      	ldrh	r2, [r3, #2]
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	881b      	ldrh	r3, [r3, #0]
 8008334:	429a      	cmp	r2, r3
 8008336:	d101      	bne.n	800833c <RINGBUFFER_cOut+0x22>
 8008338:	2302      	movs	r3, #2
 800833a:	e019      	b.n	8008370 <RINGBUFFER_cOut+0x56>
		*pData = pBuf->data[pBuf->out];
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	683a      	ldr	r2, [r7, #0]
 8008342:	8852      	ldrh	r2, [r2, #2]
 8008344:	4413      	add	r3, r2
 8008346:	781a      	ldrb	r2, [r3, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	701a      	strb	r2, [r3, #0]
		pBuf->out++;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	885b      	ldrh	r3, [r3, #2]
 8008350:	3301      	adds	r3, #1
 8008352:	b29a      	uxth	r2, r3
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	805a      	strh	r2, [r3, #2]
		if (pBuf->out >= pBuf->size)
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	885a      	ldrh	r2, [r3, #2]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	889b      	ldrh	r3, [r3, #4]
 8008360:	429a      	cmp	r2, r3
 8008362:	d302      	bcc.n	800836a <RINGBUFFER_cOut+0x50>
		  pBuf->out = 0;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2200      	movs	r2, #0
 8008368:	805a      	strh	r2, [r3, #2]
		return ringbuffer_OK;
 800836a:	2301      	movs	r3, #1
 800836c:	e000      	b.n	8008370 <RINGBUFFER_cOut+0x56>
	}else return ringbuffer_NO_BUF;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <RINGBUFFER_isEmpty>:

uint8_t RINGBUFFER_isEmpty(stRingBuf *pBuf){
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
	if(pBuf->out == pBuf->in) return 1;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	885a      	ldrh	r2, [r3, #2]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	429a      	cmp	r2, r3
 800838e:	d101      	bne.n	8008394 <RINGBUFFER_isEmpty+0x18>
 8008390:	2301      	movs	r3, #1
 8008392:	e000      	b.n	8008396 <RINGBUFFER_isEmpty+0x1a>
	else return 0;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <soft_i2c_bsp_gpioInit>:

#define soft_i2c_bsp_GPIO_MODE_MSK 			0x03
#define soft_i2c_bsp_GPIO_MODE_INPUT_FLOAT 	0x00
#define soft_i2c_bsp_GPIO_MODE_OUTPUT_OD 	0x01

static inline void soft_i2c_bsp_gpioInit(soft_i2c_bsp_pin_device *pin){
 80083a2:	b480      	push	{r7}
 80083a4:	b083      	sub	sp, #12
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
	/*Enable open drain output*/
	pin->GPIOx->OTYPER |= pin->GPIO_Pin;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	6812      	ldr	r2, [r2, #0]
 80083b2:	6852      	ldr	r2, [r2, #4]
 80083b4:	6879      	ldr	r1, [r7, #4]
 80083b6:	8889      	ldrh	r1, [r1, #4]
 80083b8:	430a      	orrs	r2, r1
 80083ba:	605a      	str	r2, [r3, #4]
	/*Set as input*/
	pin->GPIOx->MODER &= ~(soft_i2c_bsp_GPIO_MODE_MSK << (pin->GPIO_Pin_BitPos << 1));
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	6812      	ldr	r2, [r2, #0]
 80083c4:	6812      	ldr	r2, [r2, #0]
 80083c6:	6879      	ldr	r1, [r7, #4]
 80083c8:	7989      	ldrb	r1, [r1, #6]
 80083ca:	0049      	lsls	r1, r1, #1
 80083cc:	2003      	movs	r0, #3
 80083ce:	fa00 f101 	lsl.w	r1, r0, r1
 80083d2:	43c9      	mvns	r1, r1
 80083d4:	400a      	ands	r2, r1
 80083d6:	601a      	str	r2, [r3, #0]
	pin->GPIOx->MODER |= (soft_i2c_bsp_GPIO_MODE_INPUT_FLOAT << (pin->GPIO_Pin_BitPos << 1));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	6812      	ldr	r2, [r2, #0]
 80083e0:	6812      	ldr	r2, [r2, #0]
 80083e2:	601a      	str	r2, [r3, #0]
	/*Disable all pull ups or pull downs*/
	pin->GPIOx->PUPDR &= ~(soft_i2c_bsp_GPIO_PULL_MSK << (pin->GPIO_Pin_BitPos << 1));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	6812      	ldr	r2, [r2, #0]
 80083ec:	68d2      	ldr	r2, [r2, #12]
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	7989      	ldrb	r1, [r1, #6]
 80083f2:	0049      	lsls	r1, r1, #1
 80083f4:	2003      	movs	r0, #3
 80083f6:	fa00 f101 	lsl.w	r1, r0, r1
 80083fa:	43c9      	mvns	r1, r1
 80083fc:	400a      	ands	r2, r1
 80083fe:	60da      	str	r2, [r3, #12]
	pin->GPIOx->PUPDR |= (soft_i2c_bsp_GPIO_PULL_NONE << (pin->GPIO_Pin_BitPos << 1));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	6812      	ldr	r2, [r2, #0]
 8008408:	68d2      	ldr	r2, [r2, #12]
 800840a:	60da      	str	r2, [r3, #12]
	/*Set gpio speed as high as possible*/
	pin->GPIOx->OSPEEDR &= ~(soft_i2c_bsp_GPIO_SPEED_MSK << (pin->GPIO_Pin_BitPos << 1));
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	6812      	ldr	r2, [r2, #0]
 8008414:	6892      	ldr	r2, [r2, #8]
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	7989      	ldrb	r1, [r1, #6]
 800841a:	0049      	lsls	r1, r1, #1
 800841c:	2003      	movs	r0, #3
 800841e:	fa00 f101 	lsl.w	r1, r0, r1
 8008422:	43c9      	mvns	r1, r1
 8008424:	400a      	ands	r2, r1
 8008426:	609a      	str	r2, [r3, #8]
	pin->GPIOx->OSPEEDR |= soft_i2c_bsp_GPIO_SPEED_VERY_HIGH << (pin->GPIO_Pin_BitPos << 1);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	6812      	ldr	r2, [r2, #0]
 8008430:	6892      	ldr	r2, [r2, #8]
 8008432:	6879      	ldr	r1, [r7, #4]
 8008434:	7989      	ldrb	r1, [r1, #6]
 8008436:	0049      	lsls	r1, r1, #1
 8008438:	2003      	movs	r0, #3
 800843a:	fa00 f101 	lsl.w	r1, r0, r1
 800843e:	430a      	orrs	r2, r1
 8008440:	609a      	str	r2, [r3, #8]
	/*Set gpio output level always to low*/
	pin->GPIOx->ODR &= ~pin->GPIO_Pin;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	6812      	ldr	r2, [r2, #0]
 800844a:	6952      	ldr	r2, [r2, #20]
 800844c:	6879      	ldr	r1, [r7, #4]
 800844e:	8889      	ldrh	r1, [r1, #4]
 8008450:	43c9      	mvns	r1, r1
 8008452:	400a      	ands	r2, r1
 8008454:	615a      	str	r2, [r3, #20]
}
 8008456:	bf00      	nop
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <soft_i2c_bsp_setGpioMode>:


static inline void soft_i2c_bsp_setGpioMode(i2c_bsp_GpioMode mode, soft_i2c_bsp_pin_device *pin){
 8008462:	b480      	push	{r7}
 8008464:	b083      	sub	sp, #12
 8008466:	af00      	add	r7, sp, #0
 8008468:	4603      	mov	r3, r0
 800846a:	6039      	str	r1, [r7, #0]
 800846c:	71fb      	strb	r3, [r7, #7]
	if(mode == soft_i2c_bsp_GPIO_MODE_INPUT){
 800846e:	79fb      	ldrb	r3, [r7, #7]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d114      	bne.n	800849e <soft_i2c_bsp_setGpioMode+0x3c>
		pin->GPIOx->MODER &= ~(soft_i2c_bsp_GPIO_MODE_MSK << (pin->GPIO_Pin_BitPos << 1));
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	6812      	ldr	r2, [r2, #0]
 800847c:	6812      	ldr	r2, [r2, #0]
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	7989      	ldrb	r1, [r1, #6]
 8008482:	0049      	lsls	r1, r1, #1
 8008484:	2003      	movs	r0, #3
 8008486:	fa00 f101 	lsl.w	r1, r0, r1
 800848a:	43c9      	mvns	r1, r1
 800848c:	400a      	ands	r2, r1
 800848e:	601a      	str	r2, [r3, #0]
		pin->GPIOx->MODER |= (soft_i2c_bsp_GPIO_MODE_INPUT_FLOAT << (pin->GPIO_Pin_BitPos << 1));
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	6812      	ldr	r2, [r2, #0]
 8008498:	6812      	ldr	r2, [r2, #0]
 800849a:	601a      	str	r2, [r3, #0]
	}else{
		pin->GPIOx->MODER &= ~(soft_i2c_bsp_GPIO_MODE_MSK << (pin->GPIO_Pin_BitPos << 1));
		pin->GPIOx->MODER |= (soft_i2c_bsp_GPIO_MODE_OUTPUT_OD << (pin->GPIO_Pin_BitPos << 1));
	}
}
 800849c:	e01a      	b.n	80084d4 <soft_i2c_bsp_setGpioMode+0x72>
		pin->GPIOx->MODER &= ~(soft_i2c_bsp_GPIO_MODE_MSK << (pin->GPIO_Pin_BitPos << 1));
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	6812      	ldr	r2, [r2, #0]
 80084a6:	6812      	ldr	r2, [r2, #0]
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	7989      	ldrb	r1, [r1, #6]
 80084ac:	0049      	lsls	r1, r1, #1
 80084ae:	2003      	movs	r0, #3
 80084b0:	fa00 f101 	lsl.w	r1, r0, r1
 80084b4:	43c9      	mvns	r1, r1
 80084b6:	400a      	ands	r2, r1
 80084b8:	601a      	str	r2, [r3, #0]
		pin->GPIOx->MODER |= (soft_i2c_bsp_GPIO_MODE_OUTPUT_OD << (pin->GPIO_Pin_BitPos << 1));
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	6812      	ldr	r2, [r2, #0]
 80084c2:	6812      	ldr	r2, [r2, #0]
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	7989      	ldrb	r1, [r1, #6]
 80084c8:	0049      	lsls	r1, r1, #1
 80084ca:	2001      	movs	r0, #1
 80084cc:	fa00 f101 	lsl.w	r1, r0, r1
 80084d0:	430a      	orrs	r2, r1
 80084d2:	601a      	str	r2, [r3, #0]
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <soft_i2c_bsp_readGpio>:

static inline bool soft_i2c_bsp_readGpio(soft_i2c_bsp_pin_device *pin){
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
	//TODO: remove HAL
	return HAL_GPIO_ReadPin(pin->GPIOx, pin->GPIO_Pin);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	889b      	ldrh	r3, [r3, #4]
 80084f0:	4619      	mov	r1, r3
 80084f2:	4610      	mov	r0, r2
 80084f4:	f7f9 ff2c 	bl	8002350 <HAL_GPIO_ReadPin>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	bf14      	ite	ne
 80084fe:	2301      	movne	r3, #1
 8008500:	2300      	moveq	r3, #0
 8008502:	b2db      	uxtb	r3, r3
}
 8008504:	4618      	mov	r0, r3
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <soft_i2c_bsp_timInit>:

static inline void soft_i2c_bsp_timInit(soft_i2c_bsp_tim_device *tim){
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
	tim->TIMx->CR1 &= ~TIM_CR1_CEN;		//Stop counter
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	6812      	ldr	r2, [r2, #0]
 800851c:	6812      	ldr	r2, [r2, #0]
 800851e:	f022 0201 	bic.w	r2, r2, #1
 8008522:	601a      	str	r2, [r3, #0]
	tim->TIMx->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	6812      	ldr	r2, [r2, #0]
 800852c:	6812      	ldr	r2, [r2, #0]
 800852e:	f042 0202 	orr.w	r2, r2, #2
 8008532:	601a      	str	r2, [r3, #0]
	tim->TIMx->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	6812      	ldr	r2, [r2, #0]
 800853c:	6912      	ldr	r2, [r2, #16]
 800853e:	f022 0201 	bic.w	r2, r2, #1
 8008542:	611a      	str	r2, [r3, #16]
	tim->TIMx->EGR |= TIM_EGR_UG;		//Force reload of shadow register -> Start from beginning
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6812      	ldr	r2, [r2, #0]
 800854c:	6952      	ldr	r2, [r2, #20]
 800854e:	f042 0201 	orr.w	r2, r2, #1
 8008552:	615a      	str	r2, [r3, #20]
	tim->TIMx->DIER |= TIM_DIER_UIE;	//Enable update interrupts
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	6812      	ldr	r2, [r2, #0]
 800855c:	68d2      	ldr	r2, [r2, #12]
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	60da      	str	r2, [r3, #12]
	tim->TIMx->CR1 |= TIM_CR1_CEN;		//Enable counter
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	6812      	ldr	r2, [r2, #0]
 800856c:	6812      	ldr	r2, [r2, #0]
 800856e:	f042 0201 	orr.w	r2, r2, #1
 8008572:	601a      	str	r2, [r3, #0]
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <soft_i2c_bsp_timStart>:

static inline void soft_i2c_bsp_timStart(soft_i2c_bsp_tim_device *tim){
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
//	tim->TIMx->CR1 |= TIM_CR1_CEN;		//Enable counter
	tim->TIMx->CR1 &= ~TIM_CR1_UDIS;	//Allow that update can be triggered
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	6812      	ldr	r2, [r2, #0]
 8008590:	6812      	ldr	r2, [r2, #0]
 8008592:	f022 0202 	bic.w	r2, r2, #2
 8008596:	601a      	str	r2, [r3, #0]
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <soft_i2c_bsp_timStop>:

static inline void soft_i2c_bsp_timStop(soft_i2c_bsp_tim_device *tim){
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
//	tim->TIMx->CR1 &= ~TIM_CR1_CEN;		//Enable counter
	tim->TIMx->CR1 |= TIM_CR1_UDIS;		//Avoid that update can be triggered
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	6812      	ldr	r2, [r2, #0]
 80085b4:	6812      	ldr	r2, [r2, #0]
 80085b6:	f042 0202 	orr.w	r2, r2, #2
 80085ba:	601a      	str	r2, [r3, #0]
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <i2c_soft_init>:
static int write_byte(soft_i2c_cfg_Config *self, uint8_t byte);
static int read_byte(soft_i2c_cfg_Config *self, uint8_t *byte_p, int ack);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void i2c_soft_init(soft_i2c_cfg_Config *self){
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
    self->baudrate_us = (1000000L / 2L / self->baudrate);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	695b      	ldr	r3, [r3, #20]
 80085d4:	4a0b      	ldr	r2, [pc, #44]	; (8008604 <i2c_soft_init+0x3c>)
 80085d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	619a      	str	r2, [r3, #24]
    soft_i2c_bsp_gpioInit(&self->scl_pin);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7ff fede 	bl	80083a2 <soft_i2c_bsp_gpioInit>
    soft_i2c_bsp_gpioInit(&self->sda_pin);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3308      	adds	r3, #8
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7ff fed9 	bl	80083a2 <soft_i2c_bsp_gpioInit>
    soft_i2c_bsp_timInit(&self->timer);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3310      	adds	r3, #16
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7ff ff89 	bl	800850c <soft_i2c_bsp_timInit>
}
 80085fa:	bf00      	nop
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	0007a120 	.word	0x0007a120

08008608 <i2c_soft_timer_us>:

void i2c_soft_timer_us(soft_i2c_cfg_Config *self){
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
	if(self->timer_us > 0) --self->timer_us;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008614:	2b00      	cmp	r3, #0
 8008616:	dd04      	ble.n	8008622 <i2c_soft_timer_us+0x1a>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861c:	1e5a      	subs	r2, r3, #1
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008622:	bf00      	nop
 8008624:	370c      	adds	r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <i2c_soft_mem_read>:
	/*4. Send the stop condition. */
	status = stop_cond(self);
	return status;
}

int i2c_soft_mem_read(soft_i2c_cfg_Config *self, int address, int memAddr, int memAddrSize, uint8_t *data, int size){
 800862e:	b580      	push	{r7, lr}
 8008630:	b088      	sub	sp, #32
 8008632:	af00      	add	r7, sp, #0
 8008634:	60f8      	str	r0, [r7, #12]
 8008636:	60b9      	str	r1, [r7, #8]
 8008638:	607a      	str	r2, [r7, #4]
 800863a:	603b      	str	r3, [r7, #0]
	int i;
	int ack;
	int status = soft_i2c_RETURN_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	61bb      	str	r3, [r7, #24]
	/*** Write part ***/
	/* 1. Send the start condition. */
	status = start_cond(self);
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f000 f964 	bl	800890e <start_cond>
 8008646:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) return status;
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <i2c_soft_mem_read+0x24>
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	e071      	b.n	8008736 <i2c_soft_mem_read+0x108>
	/* 2. Write the address with the direction bit set to 0.*/
	status = write_byte(self, address);
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	b2db      	uxtb	r3, r3
 8008656:	4619      	mov	r1, r3
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 fa45 	bl	8008ae8 <write_byte>
 800865e:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) {
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d004      	beq.n	8008670 <i2c_soft_mem_read+0x42>
		stop_cond(self);	/*Ignore the possible error of stop condition*/
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 f984 	bl	8008974 <stop_cond>
		return status;
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	e062      	b.n	8008736 <i2c_soft_mem_read+0x108>
	}
	/* 3. Write the mem address. */
	for (i = memAddrSize; i > 0; i--) {
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	61fb      	str	r3, [r7, #28]
 8008674:	e017      	b.n	80086a6 <i2c_soft_mem_read+0x78>
		uint8_t addressPart = ((memAddr >> ((i-1) << 3)) & 0xFF);
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	3b01      	subs	r3, #1
 800867a:	00db      	lsls	r3, r3, #3
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	fa42 f303 	asr.w	r3, r2, r3
 8008682:	75fb      	strb	r3, [r7, #23]
		status = write_byte(self, addressPart);
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	4619      	mov	r1, r3
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 fa2d 	bl	8008ae8 <write_byte>
 800868e:	61b8      	str	r0, [r7, #24]
		if (status != soft_i2c_RETURN_OK) {
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d004      	beq.n	80086a0 <i2c_soft_mem_read+0x72>
			stop_cond(self); /*Ignore the possible error of stop condition*/
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f000 f96c 	bl	8008974 <stop_cond>
			return status;
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	e04a      	b.n	8008736 <i2c_soft_mem_read+0x108>
	for (i = memAddrSize; i > 0; i--) {
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	3b01      	subs	r3, #1
 80086a4:	61fb      	str	r3, [r7, #28]
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	dce4      	bgt.n	8008676 <i2c_soft_mem_read+0x48>
		}
	}
	/*** Read part ***/
	/* 4. Send the start condition. */
	status = start_cond(self);
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 f92e 	bl	800890e <start_cond>
 80086b2:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) return status;
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d001      	beq.n	80086be <i2c_soft_mem_read+0x90>
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	e03b      	b.n	8008736 <i2c_soft_mem_read+0x108>
	/* 5. Write the address with the direction bit set to 1.*/
	status = write_byte(self, ((address) | 0x1));
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	b25b      	sxtb	r3, r3
 80086c2:	f043 0301 	orr.w	r3, r3, #1
 80086c6:	b25b      	sxtb	r3, r3
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	4619      	mov	r1, r3
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 fa0b 	bl	8008ae8 <write_byte>
 80086d2:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) {
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d004      	beq.n	80086e4 <i2c_soft_mem_read+0xb6>
		stop_cond(self); /*Ignore the possible error of stop condition*/
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f000 f94a 	bl	8008974 <stop_cond>
		return status;
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	e028      	b.n	8008736 <i2c_soft_mem_read+0x108>
	}
	/* 6. Read the data. */
	for (i = 0; i < size; i++) {
 80086e4:	2300      	movs	r3, #0
 80086e6:	61fb      	str	r3, [r7, #28]
 80086e8:	e01c      	b.n	8008724 <i2c_soft_mem_read+0xf6>
		/* ACK all but last read byte. */
		ack = (i + 1 != size);
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	1c5a      	adds	r2, r3, #1
 80086ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f0:	429a      	cmp	r2, r3
 80086f2:	bf14      	ite	ne
 80086f4:	2301      	movne	r3, #1
 80086f6:	2300      	moveq	r3, #0
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	613b      	str	r3, [r7, #16]
		status = read_byte(self, &data[i], ack);
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008700:	4413      	add	r3, r2
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	4619      	mov	r1, r3
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f000 fa28 	bl	8008b5c <read_byte>
 800870c:	61b8      	str	r0, [r7, #24]
		if (status != soft_i2c_RETURN_OK) {
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d004      	beq.n	800871e <i2c_soft_mem_read+0xf0>
			stop_cond(self); /*Ignore the possible error of stop condition*/
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f000 f92d 	bl	8008974 <stop_cond>
			return status;
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	e00b      	b.n	8008736 <i2c_soft_mem_read+0x108>
	for (i = 0; i < size; i++) {
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	3301      	adds	r3, #1
 8008722:	61fb      	str	r3, [r7, #28]
 8008724:	69fa      	ldr	r2, [r7, #28]
 8008726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008728:	429a      	cmp	r2, r3
 800872a:	dbde      	blt.n	80086ea <i2c_soft_mem_read+0xbc>
		}
	}
	/*7. Send the stop condition. */
	status = stop_cond(self);
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 f921 	bl	8008974 <stop_cond>
 8008732:	61b8      	str	r0, [r7, #24]
	return status;
 8008734:	69bb      	ldr	r3, [r7, #24]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3720      	adds	r7, #32
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <i2c_soft_write>:

int i2c_soft_write(soft_i2c_cfg_Config *self, int address, const uint8_t *data, int size){
 800873e:	b580      	push	{r7, lr}
 8008740:	b086      	sub	sp, #24
 8008742:	af00      	add	r7, sp, #0
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	607a      	str	r2, [r7, #4]
 800874a:	603b      	str	r3, [r7, #0]
	int i;
	int status = soft_i2c_RETURN_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	613b      	str	r3, [r7, #16]
	/* 1. Send the start condition. */
	status = start_cond(self);
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f000 f8dc 	bl	800890e <start_cond>
 8008756:	6138      	str	r0, [r7, #16]
	if (status != soft_i2c_RETURN_OK) return status;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <i2c_soft_write+0x24>
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	e02e      	b.n	80087c0 <i2c_soft_write+0x82>
	/* 2. Write the address with the direction bit set to 0. */
	status = write_byte(self, address);
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	b2db      	uxtb	r3, r3
 8008766:	4619      	mov	r1, r3
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f000 f9bd 	bl	8008ae8 <write_byte>
 800876e:	6138      	str	r0, [r7, #16]
	if (status != soft_i2c_RETURN_OK) {
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d004      	beq.n	8008780 <i2c_soft_write+0x42>
		stop_cond(self);	/*Ignore the possible error of stop condition*/
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 f8fc 	bl	8008974 <stop_cond>
		return status;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	e01f      	b.n	80087c0 <i2c_soft_write+0x82>
	}
	/* 3. Write the data. */
	for (i = 0; i < size; i++) {
 8008780:	2300      	movs	r3, #0
 8008782:	617b      	str	r3, [r7, #20]
 8008784:	e013      	b.n	80087ae <i2c_soft_write+0x70>
		status = write_byte(self, data[i]);
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	4413      	add	r3, r2
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	4619      	mov	r1, r3
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f000 f9a9 	bl	8008ae8 <write_byte>
 8008796:	6138      	str	r0, [r7, #16]
		if (status != soft_i2c_RETURN_OK) {
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d004      	beq.n	80087a8 <i2c_soft_write+0x6a>
			stop_cond(self); /*Ignore the possible error of stop condition*/
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 f8e8 	bl	8008974 <stop_cond>
			return status;
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	e00b      	b.n	80087c0 <i2c_soft_write+0x82>
	for (i = 0; i < size; i++) {
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	3301      	adds	r3, #1
 80087ac:	617b      	str	r3, [r7, #20]
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	dbe7      	blt.n	8008786 <i2c_soft_write+0x48>
		}
	}
	/*4. Send the stop condition. */
	status = stop_cond(self);
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 f8dc 	bl	8008974 <stop_cond>
 80087bc:	6138      	str	r0, [r7, #16]
	return status;
 80087be:	693b      	ldr	r3, [r7, #16]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3718      	adds	r7, #24
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <i2c_soft_mem_write>:

int i2c_soft_mem_write(soft_i2c_cfg_Config *self, int address, int memAddr, int memAddrSize, const uint8_t *data, int size){
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
 80087d4:	603b      	str	r3, [r7, #0]
	int i;
	int status = soft_i2c_RETURN_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	61bb      	str	r3, [r7, #24]
	/* 1. Send the start condition. */
	status = start_cond(self);
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f000 f897 	bl	800890e <start_cond>
 80087e0:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) return status;
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d001      	beq.n	80087ec <i2c_soft_mem_write+0x24>
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	e04c      	b.n	8008886 <i2c_soft_mem_write+0xbe>
	/* 2. Write the address with the direction bit set to 0. */
	status = write_byte(self, address);
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	4619      	mov	r1, r3
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f000 f978 	bl	8008ae8 <write_byte>
 80087f8:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) {
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d004      	beq.n	800880a <i2c_soft_mem_write+0x42>
		stop_cond(self);	/*Ignore the possible error of stop condition*/
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f000 f8b7 	bl	8008974 <stop_cond>
		return status;
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	e03d      	b.n	8008886 <i2c_soft_mem_write+0xbe>
	}
	/* 3. Write the mem address. */
	for (i = memAddrSize; i > 0; i--) {
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	61fb      	str	r3, [r7, #28]
 800880e:	e017      	b.n	8008840 <i2c_soft_mem_write+0x78>
		uint8_t addressPart = ((memAddr >> ((i-1) << 3)) & 0xFF);
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	3b01      	subs	r3, #1
 8008814:	00db      	lsls	r3, r3, #3
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	fa42 f303 	asr.w	r3, r2, r3
 800881c:	75fb      	strb	r3, [r7, #23]
		status = write_byte(self, addressPart);
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	4619      	mov	r1, r3
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 f960 	bl	8008ae8 <write_byte>
 8008828:	61b8      	str	r0, [r7, #24]
		if (status != soft_i2c_RETURN_OK) {
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d004      	beq.n	800883a <i2c_soft_mem_write+0x72>
			stop_cond(self); /*Ignore the possible error of stop condition*/
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f000 f89f 	bl	8008974 <stop_cond>
			return status;
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	e025      	b.n	8008886 <i2c_soft_mem_write+0xbe>
	for (i = memAddrSize; i > 0; i--) {
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	3b01      	subs	r3, #1
 800883e:	61fb      	str	r3, [r7, #28]
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	2b00      	cmp	r3, #0
 8008844:	dce4      	bgt.n	8008810 <i2c_soft_mem_write+0x48>
		}
	}
	/* 4. Write the data. */
	for (i = 0; i < size; i++) {
 8008846:	2300      	movs	r3, #0
 8008848:	61fb      	str	r3, [r7, #28]
 800884a:	e013      	b.n	8008874 <i2c_soft_mem_write+0xac>
		status = write_byte(self, data[i]);
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008850:	4413      	add	r3, r2
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	4619      	mov	r1, r3
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f000 f946 	bl	8008ae8 <write_byte>
 800885c:	61b8      	str	r0, [r7, #24]
		if (status != soft_i2c_RETURN_OK) {
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d004      	beq.n	800886e <i2c_soft_mem_write+0xa6>
			stop_cond(self); /*Ignore the possible error of stop condition*/
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f000 f885 	bl	8008974 <stop_cond>
			return status;
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	e00b      	b.n	8008886 <i2c_soft_mem_write+0xbe>
	for (i = 0; i < size; i++) {
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	3301      	adds	r3, #1
 8008872:	61fb      	str	r3, [r7, #28]
 8008874:	69fa      	ldr	r2, [r7, #28]
 8008876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008878:	429a      	cmp	r2, r3
 800887a:	dbe7      	blt.n	800884c <i2c_soft_mem_write+0x84>
		}
	}
	/*5. Send the stop condition. */
	status = stop_cond(self);
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f000 f879 	bl	8008974 <stop_cond>
 8008882:	61b8      	str	r0, [r7, #24]
	return status;
 8008884:	69bb      	ldr	r3, [r7, #24]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3720      	adds	r7, #32
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <busy_wait_us>:
    if (status != soft_i2c_RETURN_OK) return status;
    return res;
}

/* Helper ----------------------------------------------------------------------*/
static void busy_wait_us(soft_i2c_cfg_Config *self, uint32_t time_us){
 800888e:	b580      	push	{r7, lr}
 8008890:	b082      	sub	sp, #8
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	6039      	str	r1, [r7, #0]
	self->timer_us = time_us;
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	625a      	str	r2, [r3, #36]	; 0x24
	//TODO: Enable timer
	soft_i2c_bsp_timStart(&self->timer);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	3310      	adds	r3, #16
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7ff fe6c 	bl	8008580 <soft_i2c_bsp_timStart>
//	htim16.Instance->CR1 &= ~TIM_CR1_UDIS;
	while(self->timer_us > 0);
 80088a8:	bf00      	nop
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	dcfb      	bgt.n	80088aa <busy_wait_us+0x1c>
	//TODO: stop timer
	soft_i2c_bsp_timStop(&self->timer);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	3310      	adds	r3, #16
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7ff fe74 	bl	80085a4 <soft_i2c_bsp_timStop>
//	htim16.Instance->CR1 |= TIM_CR1_UDIS;

}
 80088bc:	bf00      	nop
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <wait_for_clock_stretching_end>:

static int wait_for_clock_stretching_end(soft_i2c_cfg_Config *self){
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
    uint32_t clock_stretching_us = 0;
 80088cc:	2300      	movs	r3, #0
 80088ce:	60fb      	str	r3, [r7, #12]
    do {
        if (soft_i2c_bsp_readGpio(&self->scl_pin) == 1) {
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7ff fe04 	bl	80084e0 <soft_i2c_bsp_readGpio>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d001      	beq.n	80088e2 <wait_for_clock_stretching_end+0x1e>
            return soft_i2c_RETURN_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	e011      	b.n	8008906 <wait_for_clock_stretching_end+0x42>
        }
        busy_wait_us(self, self->clock_stretching_sleep_us);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	4619      	mov	r1, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7ff ffd0 	bl	800888e <busy_wait_us>
        clock_stretching_us += self->clock_stretching_sleep_us;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	4413      	add	r3, r2
 80088f6:	60fb      	str	r3, [r7, #12]
    } while (clock_stretching_us < self->max_clock_stretching_us);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	69da      	ldr	r2, [r3, #28]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d8e6      	bhi.n	80088d0 <wait_for_clock_stretching_end+0xc>
    return soft_i2c_RETURN_CLOCK_STRETCH;
 8008902:	f06f 0302 	mvn.w	r3, #2
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <start_cond>:

static int start_cond(soft_i2c_cfg_Config *self){
 800890e:	b580      	push	{r7, lr}
 8008910:	b082      	sub	sp, #8
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
	soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_INPUT, &self->scl_pin);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4619      	mov	r1, r3
 800891a:	2000      	movs	r0, #0
 800891c:	f7ff fda1 	bl	8008462 <soft_i2c_bsp_setGpioMode>
	/* The line is busy if SDA is low. */
	soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_INPUT, &self->sda_pin);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	3308      	adds	r3, #8
 8008924:	4619      	mov	r1, r3
 8008926:	2000      	movs	r0, #0
 8008928:	f7ff fd9b 	bl	8008462 <soft_i2c_bsp_setGpioMode>
    if (soft_i2c_bsp_readGpio(&self->sda_pin) == 0) {
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3308      	adds	r3, #8
 8008930:	4618      	mov	r0, r3
 8008932:	f7ff fdd5 	bl	80084e0 <soft_i2c_bsp_readGpio>
 8008936:	4603      	mov	r3, r0
 8008938:	f083 0301 	eor.w	r3, r3, #1
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d002      	beq.n	8008948 <start_cond+0x3a>
        return soft_i2c_RETURN_BUSY;
 8008942:	f06f 0301 	mvn.w	r3, #1
 8008946:	e011      	b.n	800896c <start_cond+0x5e>
    }
    /* SCL is high, set SDA from 1 to 0. */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_OUTPUT, &self->sda_pin);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	3308      	adds	r3, #8
 800894c:	4619      	mov	r1, r3
 800894e:	2001      	movs	r0, #1
 8008950:	f7ff fd87 	bl	8008462 <soft_i2c_bsp_setGpioMode>
    busy_wait_us(self, self->baudrate_us);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	4619      	mov	r1, r3
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7ff ff97 	bl	800888e <busy_wait_us>
    /* Set SCL low as preparation for the first transfer. */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_OUTPUT, &self->scl_pin);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4619      	mov	r1, r3
 8008964:	2001      	movs	r0, #1
 8008966:	f7ff fd7c 	bl	8008462 <soft_i2c_bsp_setGpioMode>
    return soft_i2c_RETURN_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <stop_cond>:

static int stop_cond(soft_i2c_cfg_Config *self){
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
    /* Set SDA to 0. */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_OUTPUT, &self->sda_pin);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	3308      	adds	r3, #8
 8008980:	4619      	mov	r1, r3
 8008982:	2001      	movs	r0, #1
 8008984:	f7ff fd6d 	bl	8008462 <soft_i2c_bsp_setGpioMode>
    busy_wait_us(self, self->baudrate_us);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7ff ff7d 	bl	800888e <busy_wait_us>
    /* SDA to 1. */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_INPUT, &self->scl_pin);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4619      	mov	r1, r3
 8008998:	2000      	movs	r0, #0
 800899a:	f7ff fd62 	bl	8008462 <soft_i2c_bsp_setGpioMode>
    /* Clock stretching. */
    if (wait_for_clock_stretching_end(self) != soft_i2c_RETURN_OK) {
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7ff ff90 	bl	80088c4 <wait_for_clock_stretching_end>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d002      	beq.n	80089b0 <stop_cond+0x3c>
        return soft_i2c_RETURN_CLOCK_STRETCH;
 80089aa:	f06f 0302 	mvn.w	r3, #2
 80089ae:	e026      	b.n	80089fe <stop_cond+0x8a>
    }
    /* Stop bit setup time, minimum 4us. */
    busy_wait_us(self, self->baudrate_us);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	4619      	mov	r1, r3
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7ff ff69 	bl	800888e <busy_wait_us>
    /* SCL is high, set SDA from 0 to 1. */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_INPUT, &self->sda_pin);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	3308      	adds	r3, #8
 80089c0:	4619      	mov	r1, r3
 80089c2:	2000      	movs	r0, #0
 80089c4:	f7ff fd4d 	bl	8008462 <soft_i2c_bsp_setGpioMode>
    busy_wait_us(self, self->baudrate_us);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7ff ff5d 	bl	800888e <busy_wait_us>
    /* Make sure no device is pulling SDA low. */
    if (soft_i2c_bsp_readGpio(&self->sda_pin) == 0) {
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	3308      	adds	r3, #8
 80089d8:	4618      	mov	r0, r3
 80089da:	f7ff fd81 	bl	80084e0 <soft_i2c_bsp_readGpio>
 80089de:	4603      	mov	r3, r0
 80089e0:	f083 0301 	eor.w	r3, r3, #1
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <stop_cond+0x7c>
        return soft_i2c_RETURN_BUSY;
 80089ea:	f06f 0301 	mvn.w	r3, #1
 80089ee:	e006      	b.n	80089fe <stop_cond+0x8a>
    }
    busy_wait_us(self, self->baudrate_us);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7ff ff49 	bl	800888e <busy_wait_us>
    return soft_i2c_RETURN_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <write_bit>:

static int write_bit(soft_i2c_cfg_Config *self, int value){
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b082      	sub	sp, #8
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	6039      	str	r1, [r7, #0]
    if (value == 1) soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_INPUT, &self->sda_pin);
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d106      	bne.n	8008a24 <write_bit+0x1e>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	3308      	adds	r3, #8
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	f7ff fd20 	bl	8008462 <soft_i2c_bsp_setGpioMode>
 8008a22:	e005      	b.n	8008a30 <write_bit+0x2a>
    else soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_OUTPUT, &self->sda_pin);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	3308      	adds	r3, #8
 8008a28:	4619      	mov	r1, r3
 8008a2a:	2001      	movs	r0, #1
 8008a2c:	f7ff fd19 	bl	8008462 <soft_i2c_bsp_setGpioMode>
    /* SDA change propagation delay. */
    busy_wait_us(self, self->baudrate_us);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	4619      	mov	r1, r3
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f7ff ff29 	bl	800888e <busy_wait_us>
    /* Set SCL high to indicate a new valid SDA value is available */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_INPUT, &self->scl_pin);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4619      	mov	r1, r3
 8008a40:	2000      	movs	r0, #0
 8008a42:	f7ff fd0e 	bl	8008462 <soft_i2c_bsp_setGpioMode>
    /* Wait for SDA value to be read by slave, minimum of 4us for
       standard mode. */
    busy_wait_us(self, self->baudrate_us);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7ff ff1e 	bl	800888e <busy_wait_us>
    /* Clock stretching */
    if (wait_for_clock_stretching_end(self) != soft_i2c_RETURN_OK) {
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7ff ff36 	bl	80088c4 <wait_for_clock_stretching_end>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d002      	beq.n	8008a64 <write_bit+0x5e>
        return soft_i2c_RETURN_CLOCK_STRETCH;
 8008a5e:	f06f 0302 	mvn.w	r3, #2
 8008a62:	e005      	b.n	8008a70 <write_bit+0x6a>
    }
    /* Clear the SCL to low in preparation for next change. */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_OUTPUT, &self->scl_pin);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4619      	mov	r1, r3
 8008a68:	2001      	movs	r0, #1
 8008a6a:	f7ff fcfa 	bl	8008462 <soft_i2c_bsp_setGpioMode>
    return soft_i2c_RETURN_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <read_bit>:

static int read_bit(soft_i2c_cfg_Config *self, uint8_t *value_p){
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
    /* Let the slave drive data. */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_INPUT, &self->sda_pin);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	3308      	adds	r3, #8
 8008a86:	4619      	mov	r1, r3
 8008a88:	2000      	movs	r0, #0
 8008a8a:	f7ff fcea 	bl	8008462 <soft_i2c_bsp_setGpioMode>
    /* Wait for SDA value to be written by slave, minimum of 4us for
       standard mode. */
    busy_wait_us(self, self->baudrate_us);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7ff fefa 	bl	800888e <busy_wait_us>
    /* Set SCL high to indicate a new valid SDA value is available. */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_INPUT, &self->scl_pin);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	f7ff fcdf 	bl	8008462 <soft_i2c_bsp_setGpioMode>
    /* Clock stretching. */
    if (wait_for_clock_stretching_end(self) != soft_i2c_RETURN_OK) {
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7ff ff0d 	bl	80088c4 <wait_for_clock_stretching_end>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d002      	beq.n	8008ab6 <read_bit+0x3e>
        return soft_i2c_RETURN_CLOCK_STRETCH;
 8008ab0:	f06f 0302 	mvn.w	r3, #2
 8008ab4:	e014      	b.n	8008ae0 <read_bit+0x68>
    }
    /* Wait for SDA value to be written by slave, minimum of 4us for
       standard mode. */
    busy_wait_us(self, self->baudrate_us);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7ff fee6 	bl	800888e <busy_wait_us>
    /* SCL is high, read out bit. */
    *value_p = soft_i2c_bsp_readGpio(&self->sda_pin);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	3308      	adds	r3, #8
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7ff fd0a 	bl	80084e0 <soft_i2c_bsp_readGpio>
 8008acc:	4603      	mov	r3, r0
 8008ace:	461a      	mov	r2, r3
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	701a      	strb	r2, [r3, #0]
    /* Set SCL low in preparation for next operation. */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_OUTPUT, &self->scl_pin);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	2001      	movs	r0, #1
 8008ada:	f7ff fcc2 	bl	8008462 <soft_i2c_bsp_setGpioMode>
    return soft_i2c_RETURN_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <write_byte>:

static int write_byte(soft_i2c_cfg_Config *self, uint8_t byte){
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	460b      	mov	r3, r1
 8008af2:	70fb      	strb	r3, [r7, #3]
    uint8_t data;
    int status = soft_i2c_RETURN_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 8; i++) {
 8008af8:	2300      	movs	r3, #0
 8008afa:	617b      	str	r3, [r7, #20]
 8008afc:	e014      	b.n	8008b28 <write_byte+0x40>
    	status = write_bit(self, (byte & 0x80) != 0);
 8008afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	09db      	lsrs	r3, r3, #7
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7ff ff7b 	bl	8008a06 <write_bit>
 8008b10:	6138      	str	r0, [r7, #16]
        if (status != soft_i2c_RETURN_OK) return status;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d001      	beq.n	8008b1c <write_byte+0x34>
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	e01b      	b.n	8008b54 <write_byte+0x6c>
        byte <<= 1;
 8008b1c:	78fb      	ldrb	r3, [r7, #3]
 8008b1e:	005b      	lsls	r3, r3, #1
 8008b20:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 8; i++) {
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	3301      	adds	r3, #1
 8008b26:	617b      	str	r3, [r7, #20]
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	2b07      	cmp	r3, #7
 8008b2c:	dde7      	ble.n	8008afe <write_byte+0x16>
    }
    status = read_bit(self, &data);
 8008b2e:	f107 030f 	add.w	r3, r7, #15
 8008b32:	4619      	mov	r1, r3
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f7ff ff9f 	bl	8008a78 <read_bit>
 8008b3a:	6138      	str	r0, [r7, #16]
    if (status != soft_i2c_RETURN_OK) return status;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <write_byte+0x5e>
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	e006      	b.n	8008b54 <write_byte+0x6c>
    if(data == 0) return soft_i2c_RETURN_OK;
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <write_byte+0x68>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	e001      	b.n	8008b54 <write_byte+0x6c>
    else return soft_i2c_RETURN_NACK;
 8008b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <read_byte>:

static int read_byte(soft_i2c_cfg_Config *self, uint8_t *byte_p, int ack){
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b088      	sub	sp, #32
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
    uint8_t bit = 0;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	75fb      	strb	r3, [r7, #23]
    *byte_p = 0;
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	701a      	strb	r2, [r3, #0]
    int status = soft_i2c_RETURN_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < 8; i++) {
 8008b76:	2300      	movs	r3, #0
 8008b78:	61fb      	str	r3, [r7, #28]
 8008b7a:	e019      	b.n	8008bb0 <read_byte+0x54>
    	status = read_bit(self, &bit);
 8008b7c:	f107 0317 	add.w	r3, r7, #23
 8008b80:	4619      	mov	r1, r3
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f7ff ff78 	bl	8008a78 <read_bit>
 8008b88:	61b8      	str	r0, [r7, #24]
        if (status != 0) return status;
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <read_byte+0x38>
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	e021      	b.n	8008bd8 <read_byte+0x7c>
        *byte_p = ((*byte_p << 1 ) | bit);
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	b25a      	sxtb	r2, r3
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
 8008b9e:	b25b      	sxtb	r3, r3
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	b25b      	sxtb	r3, r3
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	3301      	adds	r3, #1
 8008bae:	61fb      	str	r3, [r7, #28]
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	2b07      	cmp	r3, #7
 8008bb4:	dde2      	ble.n	8008b7c <read_byte+0x20>
    }
    /* Acknowledge that the byte was successfully received. */
    status = write_bit(self, !ack);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	bf0c      	ite	eq
 8008bbc:	2301      	moveq	r3, #1
 8008bbe:	2300      	movne	r3, #0
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f7ff ff1e 	bl	8008a06 <write_bit>
 8008bca:	61b8      	str	r0, [r7, #24]
    if (status != soft_i2c_RETURN_OK) return status;
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <read_byte+0x7a>
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	e000      	b.n	8008bd8 <read_byte+0x7c>
    return soft_i2c_RETURN_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3720      	adds	r7, #32
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	460b      	mov	r3, r1
 8008bea:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008bec:	2300      	movs	r3, #0
 8008bee:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	7c1b      	ldrb	r3, [r3, #16]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d115      	bne.n	8008c24 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	2181      	movs	r1, #129	; 0x81
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f002 feab 	bl	800b95c <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c10:	2202      	movs	r2, #2
 8008c12:	2101      	movs	r1, #1
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f002 fea1 	bl	800b95c <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8008c22:	e012      	b.n	8008c4a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c24:	2340      	movs	r3, #64	; 0x40
 8008c26:	2202      	movs	r2, #2
 8008c28:	2181      	movs	r1, #129	; 0x81
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f002 fe96 	bl	800b95c <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c36:	2340      	movs	r3, #64	; 0x40
 8008c38:	2202      	movs	r2, #2
 8008c3a:	2101      	movs	r1, #1
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f002 fe8d 	bl	800b95c <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2201      	movs	r2, #1
 8008c46:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c4a:	2308      	movs	r3, #8
 8008c4c:	2203      	movs	r2, #3
 8008c4e:	2182      	movs	r1, #130	; 0x82
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f002 fe83 	bl	800b95c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8008c5c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008c60:	f003 f876 	bl	800bd50 <USBD_static_malloc>
 8008c64:	4602      	mov	r2, r0
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d102      	bne.n	8008c7c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008c76:	2301      	movs	r3, #1
 8008c78:	73fb      	strb	r3, [r7, #15]
 8008c7a:	e026      	b.n	8008cca <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008c82:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	7c1b      	ldrb	r3, [r3, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d109      	bne.n	8008cba <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cb0:	2101      	movs	r1, #1
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f002 ffc8 	bl	800bc48 <USBD_LL_PrepareReceive>
 8008cb8:	e007      	b.n	8008cca <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008cc0:	2340      	movs	r3, #64	; 0x40
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f002 ffbf 	bl	800bc48 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008ce4:	2181      	movs	r1, #129	; 0x81
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f002 fe76 	bl	800b9d8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008cf2:	2101      	movs	r1, #1
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f002 fe6f 	bl	800b9d8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008d02:	2182      	movs	r1, #130	; 0x82
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f002 fe67 	bl	800b9d8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00e      	beq.n	8008d38 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f003 f81e 	bl	800bd6c <USBD_static_free>
    pdev->pClassData = NULL;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b086      	sub	sp, #24
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008d52:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d039      	beq.n	8008de0 <USBD_CDC_Setup+0x9e>
 8008d6c:	2b20      	cmp	r3, #32
 8008d6e:	d17c      	bne.n	8008e6a <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	88db      	ldrh	r3, [r3, #6]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d029      	beq.n	8008dcc <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	b25b      	sxtb	r3, r3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	da11      	bge.n	8008da6 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8008d8e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d90:	683a      	ldr	r2, [r7, #0]
 8008d92:	88d2      	ldrh	r2, [r2, #6]
 8008d94:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008d96:	6939      	ldr	r1, [r7, #16]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	88db      	ldrh	r3, [r3, #6]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f001 f9a2 	bl	800a0e8 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8008da4:	e068      	b.n	8008e78 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	785a      	ldrb	r2, [r3, #1]
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	88db      	ldrh	r3, [r3, #6]
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008dbc:	6939      	ldr	r1, [r7, #16]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	88db      	ldrh	r3, [r3, #6]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f001 f9bd 	bl	800a144 <USBD_CtlPrepareRx>
    break;
 8008dca:	e055      	b.n	8008e78 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	7850      	ldrb	r0, [r2, #1]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	4798      	blx	r3
    break;
 8008dde:	e04b      	b.n	8008e78 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	785b      	ldrb	r3, [r3, #1]
 8008de4:	2b0a      	cmp	r3, #10
 8008de6:	d017      	beq.n	8008e18 <USBD_CDC_Setup+0xd6>
 8008de8:	2b0b      	cmp	r3, #11
 8008dea:	d029      	beq.n	8008e40 <USBD_CDC_Setup+0xfe>
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d133      	bne.n	8008e58 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008df6:	2b03      	cmp	r3, #3
 8008df8:	d107      	bne.n	8008e0a <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8008dfa:	f107 030c 	add.w	r3, r7, #12
 8008dfe:	2202      	movs	r2, #2
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f001 f970 	bl	800a0e8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008e08:	e02e      	b.n	8008e68 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f001 f900 	bl	800a012 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008e12:	2302      	movs	r3, #2
 8008e14:	75fb      	strb	r3, [r7, #23]
      break;
 8008e16:	e027      	b.n	8008e68 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008e1e:	2b03      	cmp	r3, #3
 8008e20:	d107      	bne.n	8008e32 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8008e22:	f107 030f 	add.w	r3, r7, #15
 8008e26:	2201      	movs	r2, #1
 8008e28:	4619      	mov	r1, r3
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f001 f95c 	bl	800a0e8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008e30:	e01a      	b.n	8008e68 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f001 f8ec 	bl	800a012 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008e3a:	2302      	movs	r3, #2
 8008e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8008e3e:	e013      	b.n	8008e68 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d00d      	beq.n	8008e66 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8008e4a:	6839      	ldr	r1, [r7, #0]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f001 f8e0 	bl	800a012 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008e52:	2302      	movs	r3, #2
 8008e54:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008e56:	e006      	b.n	8008e66 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 f8d9 	bl	800a012 <USBD_CtlError>
      ret = USBD_FAIL;
 8008e60:	2302      	movs	r3, #2
 8008e62:	75fb      	strb	r3, [r7, #23]
      break;
 8008e64:	e000      	b.n	8008e68 <USBD_CDC_Setup+0x126>
      break;
 8008e66:	bf00      	nop
    }
    break;
 8008e68:	e006      	b.n	8008e78 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8008e6a:	6839      	ldr	r1, [r7, #0]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f001 f8d0 	bl	800a012 <USBD_CtlError>
    ret = USBD_FAIL;
 8008e72:	2302      	movs	r3, #2
 8008e74:	75fb      	strb	r3, [r7, #23]
    break;
 8008e76:	bf00      	nop
  }

  return ret;
 8008e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3718      	adds	r7, #24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008e94:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008e9c:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d037      	beq.n	8008f18 <USBD_CDC_DataIn+0x96>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008ea8:	78fa      	ldrb	r2, [r7, #3]
 8008eaa:	6879      	ldr	r1, [r7, #4]
 8008eac:	4613      	mov	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	4413      	add	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	440b      	add	r3, r1
 8008eb6:	331c      	adds	r3, #28
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d026      	beq.n	8008f0c <USBD_CDC_DataIn+0x8a>
 8008ebe:	78fa      	ldrb	r2, [r7, #3]
 8008ec0:	6879      	ldr	r1, [r7, #4]
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4413      	add	r3, r2
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	440b      	add	r3, r1
 8008ecc:	331c      	adds	r3, #28
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	78fa      	ldrb	r2, [r7, #3]
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	0152      	lsls	r2, r2, #5
 8008ed6:	440a      	add	r2, r1
 8008ed8:	3238      	adds	r2, #56	; 0x38
 8008eda:	6812      	ldr	r2, [r2, #0]
 8008edc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ee0:	fb02 f201 	mul.w	r2, r2, r1
 8008ee4:	1a9b      	subs	r3, r3, r2
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d110      	bne.n	8008f0c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008eea:	78fa      	ldrb	r2, [r7, #3]
 8008eec:	6879      	ldr	r1, [r7, #4]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4413      	add	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	440b      	add	r3, r1
 8008ef8:	331c      	adds	r3, #28
 8008efa:	2200      	movs	r2, #0
 8008efc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8008efe:	78f9      	ldrb	r1, [r7, #3]
 8008f00:	2300      	movs	r3, #0
 8008f02:	2200      	movs	r2, #0
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f002 fe65 	bl	800bbd4 <USBD_LL_Transmit>
 8008f0a:	e003      	b.n	8008f14 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	e000      	b.n	8008f1a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8008f18:	2302      	movs	r3, #2
  }
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008f34:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8008f36:	78fb      	ldrb	r3, [r7, #3]
 8008f38:	4619      	mov	r1, r3
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f002 febe 	bl	800bcbc <USBD_LL_GetRxDataSize>
 8008f40:	4602      	mov	r2, r0
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00d      	beq.n	8008f6e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008f66:	4611      	mov	r1, r2
 8008f68:	4798      	blx	r3

    return USBD_OK;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	e000      	b.n	8008f70 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008f6e:	2302      	movs	r3, #2
  }
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008f86:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d015      	beq.n	8008fbe <USBD_CDC_EP0_RxReady+0x46>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008f98:	2bff      	cmp	r3, #255	; 0xff
 8008f9a:	d010      	beq.n	8008fbe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008faa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008fb2:	b292      	uxth	r2, r2
 8008fb4:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	22ff      	movs	r2, #255	; 0xff
 8008fba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2243      	movs	r2, #67	; 0x43
 8008fd4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008fd6:	4b03      	ldr	r3, [pc, #12]	; (8008fe4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	20000880 	.word	0x20000880

08008fe8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2243      	movs	r2, #67	; 0x43
 8008ff4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008ff6:	4b03      	ldr	r3, [pc, #12]	; (8009004 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	2000083c 	.word	0x2000083c

08009008 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2243      	movs	r2, #67	; 0x43
 8009014:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009016:	4b03      	ldr	r3, [pc, #12]	; (8009024 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009018:	4618      	mov	r0, r3
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr
 8009024:	200008c4 	.word	0x200008c4

08009028 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	220a      	movs	r2, #10
 8009034:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009036:	4b03      	ldr	r3, [pc, #12]	; (8009044 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009038:	4618      	mov	r0, r3
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	200007f8 	.word	0x200007f8

08009048 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009052:	2302      	movs	r3, #2
 8009054:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009068:	7bfb      	ldrb	r3, [r7, #15]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8009076:	b480      	push	{r7}
 8009078:	b087      	sub	sp, #28
 800907a:	af00      	add	r7, sp, #0
 800907c:	60f8      	str	r0, [r7, #12]
 800907e:	60b9      	str	r1, [r7, #8]
 8009080:	4613      	mov	r3, r2
 8009082:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800908a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009094:	88fa      	ldrh	r2, [r7, #6]
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	371c      	adds	r7, #28
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80090aa:	b480      	push	{r7}
 80090ac:	b085      	sub	sp, #20
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80090ba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	683a      	ldr	r2, [r7, #0]
 80090c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b084      	sub	sp, #16
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80090e0:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d01c      	beq.n	8009126 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d115      	bne.n	8009122 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009114:	b29b      	uxth	r3, r3
 8009116:	2181      	movs	r1, #129	; 0x81
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f002 fd5b 	bl	800bbd4 <USBD_LL_Transmit>

      return USBD_OK;
 800911e:	2300      	movs	r3, #0
 8009120:	e002      	b.n	8009128 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009122:	2301      	movs	r3, #1
 8009124:	e000      	b.n	8009128 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009126:	2302      	movs	r3, #2
  }
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800913e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009146:	2b00      	cmp	r3, #0
 8009148:	d017      	beq.n	800917a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	7c1b      	ldrb	r3, [r3, #16]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d109      	bne.n	8009166 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800915c:	2101      	movs	r1, #1
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f002 fd72 	bl	800bc48 <USBD_LL_PrepareReceive>
 8009164:	e007      	b.n	8009176 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800916c:	2340      	movs	r3, #64	; 0x40
 800916e:	2101      	movs	r1, #1
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f002 fd69 	bl	800bc48 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	e000      	b.n	800917c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800917a:	2302      	movs	r3, #2
  }
}
 800917c:	4618      	mov	r0, r3
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	4613      	mov	r3, r2
 8009190:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d101      	bne.n	800919c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009198:	2302      	movs	r3, #2
 800919a:	e01a      	b.n	80091d2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d003      	beq.n	80091ae <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	68ba      	ldr	r2, [r7, #8]
 80091b8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	79fa      	ldrb	r2, [r7, #7]
 80091c8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f002 fb30 	bl	800b830 <USBD_LL_Init>

  return USBD_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091da:	b480      	push	{r7}
 80091dc:	b085      	sub	sp, #20
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d006      	beq.n	80091fc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	73fb      	strb	r3, [r7, #15]
 80091fa:	e001      	b.n	8009200 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80091fc:	2302      	movs	r3, #2
 80091fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009200:	7bfb      	ldrb	r3, [r7, #15]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3714      	adds	r7, #20
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b082      	sub	sp, #8
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f002 fb6e 	bl	800b8f8 <USBD_LL_Start>

  return USBD_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8009226:	b480      	push	{r7}
 8009228:	b083      	sub	sp, #12
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8009248:	2302      	movs	r3, #2
 800924a:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00c      	beq.n	8009270 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	78fa      	ldrb	r2, [r7, #3]
 8009260:	4611      	mov	r1, r2
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	4798      	blx	r3
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009270:	7bfb      	ldrb	r3, [r7, #15]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b082      	sub	sp, #8
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	460b      	mov	r3, r1
 8009284:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	78fa      	ldrb	r2, [r7, #3]
 8009290:	4611      	mov	r1, r2
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	4798      	blx	r3
  return USBD_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 fe70 	bl	8009f98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80092c6:	461a      	mov	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80092d4:	f003 031f 	and.w	r3, r3, #31
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d00c      	beq.n	80092f6 <USBD_LL_SetupStage+0x56>
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d302      	bcc.n	80092e6 <USBD_LL_SetupStage+0x46>
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d010      	beq.n	8009306 <USBD_LL_SetupStage+0x66>
 80092e4:	e017      	b.n	8009316 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f9c4 	bl	800967c <USBD_StdDevReq>
    break;
 80092f4:	e01a      	b.n	800932c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80092fc:	4619      	mov	r1, r3
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fa26 	bl	8009750 <USBD_StdItfReq>
    break;
 8009304:	e012      	b.n	800932c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fa64 	bl	80097dc <USBD_StdEPReq>
    break;
 8009314:	e00a      	b.n	800932c <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800931c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009320:	b2db      	uxtb	r3, r3
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f002 fb8d 	bl	800ba44 <USBD_LL_StallEP>
    break;
 800932a:	bf00      	nop
  }

  return USBD_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b086      	sub	sp, #24
 800933a:	af00      	add	r7, sp, #0
 800933c:	60f8      	str	r0, [r7, #12]
 800933e:	460b      	mov	r3, r1
 8009340:	607a      	str	r2, [r7, #4]
 8009342:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8009344:	7afb      	ldrb	r3, [r7, #11]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d147      	bne.n	80093da <USBD_LL_DataOutStage+0xa4>
  {
    pep = &pdev->ep_out[0];
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009350:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009358:	2b03      	cmp	r3, #3
 800935a:	d134      	bne.n	80093c6 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	68da      	ldr	r2, [r3, #12]
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	429a      	cmp	r2, r3
 8009366:	d919      	bls.n	800939c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	68da      	ldr	r2, [r3, #12]
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	1ad2      	subs	r2, r2, r3
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	68da      	ldr	r2, [r3, #12]
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800937e:	429a      	cmp	r2, r3
 8009380:	d203      	bcs.n	800938a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8009386:	b29b      	uxth	r3, r3
 8009388:	e002      	b.n	8009390 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800938e:	b29b      	uxth	r3, r3
 8009390:	461a      	mov	r2, r3
 8009392:	6879      	ldr	r1, [r7, #4]
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 fef3 	bl	800a180 <USBD_CtlContinueRx>
 800939a:	e034      	b.n	8009406 <USBD_LL_DataOutStage+0xd0>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00a      	beq.n	80093be <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d105      	bne.n	80093be <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f000 fef0 	bl	800a1a4 <USBD_CtlSendStatus>
 80093c4:	e01f      	b.n	8009406 <USBD_LL_DataOutStage+0xd0>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80093cc:	2b05      	cmp	r3, #5
 80093ce:	d11a      	bne.n	8009406 <USBD_LL_DataOutStage+0xd0>
      {
        USBD_LL_StallEP(pdev, 0U);
 80093d0:	2100      	movs	r1, #0
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f002 fb36 	bl	800ba44 <USBD_LL_StallEP>
 80093d8:	e015      	b.n	8009406 <USBD_LL_DataOutStage+0xd0>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00d      	beq.n	8009402 <USBD_LL_DataOutStage+0xcc>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80093ec:	2b03      	cmp	r3, #3
 80093ee:	d108      	bne.n	8009402 <USBD_LL_DataOutStage+0xcc>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	7afa      	ldrb	r2, [r7, #11]
 80093fa:	4611      	mov	r1, r2
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	4798      	blx	r3
 8009400:	e001      	b.n	8009406 <USBD_LL_DataOutStage+0xd0>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009402:	2302      	movs	r3, #2
 8009404:	e000      	b.n	8009408 <USBD_LL_DataOutStage+0xd2>
  }

  return USBD_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3718      	adds	r7, #24
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	460b      	mov	r3, r1
 800941a:	607a      	str	r2, [r7, #4]
 800941c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800941e:	7afb      	ldrb	r3, [r7, #11]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d17f      	bne.n	8009524 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	3314      	adds	r3, #20
 8009428:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009430:	2b02      	cmp	r3, #2
 8009432:	d15c      	bne.n	80094ee <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	68da      	ldr	r2, [r3, #12]
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	429a      	cmp	r2, r3
 800943e:	d915      	bls.n	800946c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	68da      	ldr	r2, [r3, #12]
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	1ad2      	subs	r2, r2, r3
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	b29b      	uxth	r3, r3
 8009454:	461a      	mov	r2, r3
 8009456:	6879      	ldr	r1, [r7, #4]
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f000 fe61 	bl	800a120 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800945e:	2300      	movs	r3, #0
 8009460:	2200      	movs	r2, #0
 8009462:	2100      	movs	r1, #0
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f002 fbef 	bl	800bc48 <USBD_LL_PrepareReceive>
 800946a:	e04e      	b.n	800950a <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	697a      	ldr	r2, [r7, #20]
 8009472:	6912      	ldr	r2, [r2, #16]
 8009474:	fbb3 f1f2 	udiv	r1, r3, r2
 8009478:	fb02 f201 	mul.w	r2, r2, r1
 800947c:	1a9b      	subs	r3, r3, r2
 800947e:	2b00      	cmp	r3, #0
 8009480:	d11c      	bne.n	80094bc <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	689a      	ldr	r2, [r3, #8]
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800948a:	429a      	cmp	r2, r3
 800948c:	d316      	bcc.n	80094bc <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	689a      	ldr	r2, [r3, #8]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8009498:	429a      	cmp	r2, r3
 800949a:	d20f      	bcs.n	80094bc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800949c:	2200      	movs	r2, #0
 800949e:	2100      	movs	r1, #0
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 fe3d 	bl	800a120 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80094ae:	2300      	movs	r3, #0
 80094b0:	2200      	movs	r2, #0
 80094b2:	2100      	movs	r1, #0
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f002 fbc7 	bl	800bc48 <USBD_LL_PrepareReceive>
 80094ba:	e026      	b.n	800950a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00a      	beq.n	80094de <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d105      	bne.n	80094de <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80094de:	2180      	movs	r1, #128	; 0x80
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f002 faaf 	bl	800ba44 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 fe6f 	bl	800a1ca <USBD_CtlReceiveStatus>
 80094ec:	e00d      	b.n	800950a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80094f4:	2b04      	cmp	r3, #4
 80094f6:	d004      	beq.n	8009502 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d103      	bne.n	800950a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009502:	2180      	movs	r1, #128	; 0x80
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f002 fa9d 	bl	800ba44 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8009510:	2b01      	cmp	r3, #1
 8009512:	d11d      	bne.n	8009550 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f7ff fe86 	bl	8009226 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8009522:	e015      	b.n	8009550 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00d      	beq.n	800954c <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8009536:	2b03      	cmp	r3, #3
 8009538:	d108      	bne.n	800954c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009540:	695b      	ldr	r3, [r3, #20]
 8009542:	7afa      	ldrb	r2, [r7, #11]
 8009544:	4611      	mov	r1, r2
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	4798      	blx	r3
 800954a:	e001      	b.n	8009550 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800954c:	2302      	movs	r3, #2
 800954e:	e000      	b.n	8009552 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3718      	adds	r7, #24
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b082      	sub	sp, #8
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009562:	2340      	movs	r3, #64	; 0x40
 8009564:	2200      	movs	r2, #0
 8009566:	2100      	movs	r1, #0
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f002 f9f7 	bl	800b95c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2240      	movs	r2, #64	; 0x40
 800957a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800957e:	2340      	movs	r3, #64	; 0x40
 8009580:	2200      	movs	r2, #0
 8009582:	2180      	movs	r1, #128	; 0x80
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f002 f9e9 	bl	800b95c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2240      	movs	r2, #64	; 0x40
 8009594:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d009      	beq.n	80095d2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	6852      	ldr	r2, [r2, #4]
 80095ca:	b2d2      	uxtb	r2, r2
 80095cc:	4611      	mov	r1, r2
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	4798      	blx	r3
  }

  return USBD_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	78fa      	ldrb	r2, [r7, #3]
 80095ec:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2204      	movs	r2, #4
 8009614:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8009626:	b480      	push	{r7}
 8009628:	b083      	sub	sp, #12
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009656:	2b03      	cmp	r3, #3
 8009658:	d10b      	bne.n	8009672 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009660:	69db      	ldr	r3, [r3, #28]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d005      	beq.n	8009672 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800966c:	69db      	ldr	r3, [r3, #28]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009692:	2b20      	cmp	r3, #32
 8009694:	d004      	beq.n	80096a0 <USBD_StdDevReq+0x24>
 8009696:	2b40      	cmp	r3, #64	; 0x40
 8009698:	d002      	beq.n	80096a0 <USBD_StdDevReq+0x24>
 800969a:	2b00      	cmp	r3, #0
 800969c:	d008      	beq.n	80096b0 <USBD_StdDevReq+0x34>
 800969e:	e04c      	b.n	800973a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	6839      	ldr	r1, [r7, #0]
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	4798      	blx	r3
    break;
 80096ae:	e049      	b.n	8009744 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	785b      	ldrb	r3, [r3, #1]
 80096b4:	2b09      	cmp	r3, #9
 80096b6:	d83a      	bhi.n	800972e <USBD_StdDevReq+0xb2>
 80096b8:	a201      	add	r2, pc, #4	; (adr r2, 80096c0 <USBD_StdDevReq+0x44>)
 80096ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096be:	bf00      	nop
 80096c0:	08009711 	.word	0x08009711
 80096c4:	08009725 	.word	0x08009725
 80096c8:	0800972f 	.word	0x0800972f
 80096cc:	0800971b 	.word	0x0800971b
 80096d0:	0800972f 	.word	0x0800972f
 80096d4:	080096f3 	.word	0x080096f3
 80096d8:	080096e9 	.word	0x080096e9
 80096dc:	0800972f 	.word	0x0800972f
 80096e0:	08009707 	.word	0x08009707
 80096e4:	080096fd 	.word	0x080096fd
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f9d2 	bl	8009a94 <USBD_GetDescriptor>
      break;
 80096f0:	e022      	b.n	8009738 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80096f2:	6839      	ldr	r1, [r7, #0]
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fae3 	bl	8009cc0 <USBD_SetAddress>
      break;
 80096fa:	e01d      	b.n	8009738 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fb20 	bl	8009d44 <USBD_SetConfig>
      break;
 8009704:	e018      	b.n	8009738 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fba9 	bl	8009e60 <USBD_GetConfig>
      break;
 800970e:	e013      	b.n	8009738 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fbd8 	bl	8009ec8 <USBD_GetStatus>
      break;
 8009718:	e00e      	b.n	8009738 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fc06 	bl	8009f2e <USBD_SetFeature>
      break;
 8009722:	e009      	b.n	8009738 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fc15 	bl	8009f56 <USBD_ClrFeature>
      break;
 800972c:	e004      	b.n	8009738 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fc6e 	bl	800a012 <USBD_CtlError>
      break;
 8009736:	bf00      	nop
    }
    break;
 8009738:	e004      	b.n	8009744 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800973a:	6839      	ldr	r1, [r7, #0]
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fc68 	bl	800a012 <USBD_CtlError>
    break;
 8009742:	bf00      	nop
  }

  return ret;
 8009744:	7bfb      	ldrb	r3, [r7, #15]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop

08009750 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009766:	2b20      	cmp	r3, #32
 8009768:	d003      	beq.n	8009772 <USBD_StdItfReq+0x22>
 800976a:	2b40      	cmp	r3, #64	; 0x40
 800976c:	d001      	beq.n	8009772 <USBD_StdItfReq+0x22>
 800976e:	2b00      	cmp	r3, #0
 8009770:	d12a      	bne.n	80097c8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009778:	3b01      	subs	r3, #1
 800977a:	2b02      	cmp	r3, #2
 800977c:	d81d      	bhi.n	80097ba <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	889b      	ldrh	r3, [r3, #4]
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b01      	cmp	r3, #1
 8009786:	d813      	bhi.n	80097b0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	6839      	ldr	r1, [r7, #0]
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	4798      	blx	r3
 8009796:	4603      	mov	r3, r0
 8009798:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	88db      	ldrh	r3, [r3, #6]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d110      	bne.n	80097c4 <USBD_StdItfReq+0x74>
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10d      	bne.n	80097c4 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 fcfb 	bl	800a1a4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80097ae:	e009      	b.n	80097c4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fc2d 	bl	800a012 <USBD_CtlError>
      break;
 80097b8:	e004      	b.n	80097c4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fc28 	bl	800a012 <USBD_CtlError>
      break;
 80097c2:	e000      	b.n	80097c6 <USBD_StdItfReq+0x76>
      break;
 80097c4:	bf00      	nop
    }
    break;
 80097c6:	e004      	b.n	80097d2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fc21 	bl	800a012 <USBD_CtlError>
    break;
 80097d0:	bf00      	nop
  }

  return USBD_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	889b      	ldrh	r3, [r3, #4]
 80097ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097f8:	2b20      	cmp	r3, #32
 80097fa:	d004      	beq.n	8009806 <USBD_StdEPReq+0x2a>
 80097fc:	2b40      	cmp	r3, #64	; 0x40
 80097fe:	d002      	beq.n	8009806 <USBD_StdEPReq+0x2a>
 8009800:	2b00      	cmp	r3, #0
 8009802:	d008      	beq.n	8009816 <USBD_StdEPReq+0x3a>
 8009804:	e13b      	b.n	8009a7e <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	4798      	blx	r3
    break;
 8009814:	e138      	b.n	8009a88 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800981e:	2b20      	cmp	r3, #32
 8009820:	d10a      	bne.n	8009838 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	6839      	ldr	r1, [r7, #0]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	4798      	blx	r3
 8009830:	4603      	mov	r3, r0
 8009832:	73fb      	strb	r3, [r7, #15]

      return ret;
 8009834:	7bfb      	ldrb	r3, [r7, #15]
 8009836:	e128      	b.n	8009a8a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	785b      	ldrb	r3, [r3, #1]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d03e      	beq.n	80098be <USBD_StdEPReq+0xe2>
 8009840:	2b03      	cmp	r3, #3
 8009842:	d002      	beq.n	800984a <USBD_StdEPReq+0x6e>
 8009844:	2b00      	cmp	r3, #0
 8009846:	d070      	beq.n	800992a <USBD_StdEPReq+0x14e>
 8009848:	e113      	b.n	8009a72 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009850:	2b02      	cmp	r3, #2
 8009852:	d002      	beq.n	800985a <USBD_StdEPReq+0x7e>
 8009854:	2b03      	cmp	r3, #3
 8009856:	d015      	beq.n	8009884 <USBD_StdEPReq+0xa8>
 8009858:	e02b      	b.n	80098b2 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800985a:	7bbb      	ldrb	r3, [r7, #14]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00c      	beq.n	800987a <USBD_StdEPReq+0x9e>
 8009860:	7bbb      	ldrb	r3, [r7, #14]
 8009862:	2b80      	cmp	r3, #128	; 0x80
 8009864:	d009      	beq.n	800987a <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8009866:	7bbb      	ldrb	r3, [r7, #14]
 8009868:	4619      	mov	r1, r3
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f002 f8ea 	bl	800ba44 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009870:	2180      	movs	r1, #128	; 0x80
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f002 f8e6 	bl	800ba44 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009878:	e020      	b.n	80098bc <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800987a:	6839      	ldr	r1, [r7, #0]
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fbc8 	bl	800a012 <USBD_CtlError>
        break;
 8009882:	e01b      	b.n	80098bc <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	885b      	ldrh	r3, [r3, #2]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10e      	bne.n	80098aa <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800988c:	7bbb      	ldrb	r3, [r7, #14]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00b      	beq.n	80098aa <USBD_StdEPReq+0xce>
 8009892:	7bbb      	ldrb	r3, [r7, #14]
 8009894:	2b80      	cmp	r3, #128	; 0x80
 8009896:	d008      	beq.n	80098aa <USBD_StdEPReq+0xce>
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	88db      	ldrh	r3, [r3, #6]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d104      	bne.n	80098aa <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80098a0:	7bbb      	ldrb	r3, [r7, #14]
 80098a2:	4619      	mov	r1, r3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f002 f8cd 	bl	800ba44 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fc7a 	bl	800a1a4 <USBD_CtlSendStatus>

        break;
 80098b0:	e004      	b.n	80098bc <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80098b2:	6839      	ldr	r1, [r7, #0]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fbac 	bl	800a012 <USBD_CtlError>
        break;
 80098ba:	bf00      	nop
      }
      break;
 80098bc:	e0de      	b.n	8009a7c <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d002      	beq.n	80098ce <USBD_StdEPReq+0xf2>
 80098c8:	2b03      	cmp	r3, #3
 80098ca:	d015      	beq.n	80098f8 <USBD_StdEPReq+0x11c>
 80098cc:	e026      	b.n	800991c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098ce:	7bbb      	ldrb	r3, [r7, #14]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00c      	beq.n	80098ee <USBD_StdEPReq+0x112>
 80098d4:	7bbb      	ldrb	r3, [r7, #14]
 80098d6:	2b80      	cmp	r3, #128	; 0x80
 80098d8:	d009      	beq.n	80098ee <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80098da:	7bbb      	ldrb	r3, [r7, #14]
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f002 f8b0 	bl	800ba44 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80098e4:	2180      	movs	r1, #128	; 0x80
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f002 f8ac 	bl	800ba44 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80098ec:	e01c      	b.n	8009928 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80098ee:	6839      	ldr	r1, [r7, #0]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 fb8e 	bl	800a012 <USBD_CtlError>
        break;
 80098f6:	e017      	b.n	8009928 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	885b      	ldrh	r3, [r3, #2]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d112      	bne.n	8009926 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009900:	7bbb      	ldrb	r3, [r7, #14]
 8009902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009906:	2b00      	cmp	r3, #0
 8009908:	d004      	beq.n	8009914 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800990a:	7bbb      	ldrb	r3, [r7, #14]
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f002 f8ce 	bl	800bab0 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fc45 	bl	800a1a4 <USBD_CtlSendStatus>
        }
        break;
 800991a:	e004      	b.n	8009926 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fb77 	bl	800a012 <USBD_CtlError>
        break;
 8009924:	e000      	b.n	8009928 <USBD_StdEPReq+0x14c>
        break;
 8009926:	bf00      	nop
      }
      break;
 8009928:	e0a8      	b.n	8009a7c <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009930:	2b02      	cmp	r3, #2
 8009932:	d002      	beq.n	800993a <USBD_StdEPReq+0x15e>
 8009934:	2b03      	cmp	r3, #3
 8009936:	d031      	beq.n	800999c <USBD_StdEPReq+0x1c0>
 8009938:	e095      	b.n	8009a66 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800993a:	7bbb      	ldrb	r3, [r7, #14]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d007      	beq.n	8009950 <USBD_StdEPReq+0x174>
 8009940:	7bbb      	ldrb	r3, [r7, #14]
 8009942:	2b80      	cmp	r3, #128	; 0x80
 8009944:	d004      	beq.n	8009950 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fb62 	bl	800a012 <USBD_CtlError>
          break;
 800994e:	e08f      	b.n	8009a70 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009950:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009954:	2b00      	cmp	r3, #0
 8009956:	da0b      	bge.n	8009970 <USBD_StdEPReq+0x194>
 8009958:	7bbb      	ldrb	r3, [r7, #14]
 800995a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800995e:	4613      	mov	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	3310      	adds	r3, #16
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	4413      	add	r3, r2
 800996c:	3304      	adds	r3, #4
 800996e:	e00a      	b.n	8009986 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009976:	4613      	mov	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	4413      	add	r3, r2
 8009986:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	2200      	movs	r2, #0
 800998c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	2202      	movs	r2, #2
 8009992:	4619      	mov	r1, r3
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fba7 	bl	800a0e8 <USBD_CtlSendData>
          break;
 800999a:	e069      	b.n	8009a70 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800999c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	da11      	bge.n	80099c8 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80099a4:	7bbb      	ldrb	r3, [r7, #14]
 80099a6:	f003 020f 	and.w	r2, r3, #15
 80099aa:	6879      	ldr	r1, [r7, #4]
 80099ac:	4613      	mov	r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4413      	add	r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	440b      	add	r3, r1
 80099b6:	3318      	adds	r3, #24
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d117      	bne.n	80099ee <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fb26 	bl	800a012 <USBD_CtlError>
            break;
 80099c6:	e053      	b.n	8009a70 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
 80099ca:	f003 020f 	and.w	r2, r3, #15
 80099ce:	6879      	ldr	r1, [r7, #4]
 80099d0:	4613      	mov	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	440b      	add	r3, r1
 80099da:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d104      	bne.n	80099ee <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fb13 	bl	800a012 <USBD_CtlError>
            break;
 80099ec:	e040      	b.n	8009a70 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80099ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	da0b      	bge.n	8009a0e <USBD_StdEPReq+0x232>
 80099f6:	7bbb      	ldrb	r3, [r7, #14]
 80099f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099fc:	4613      	mov	r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4413      	add	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	3310      	adds	r3, #16
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	4413      	add	r3, r2
 8009a0a:	3304      	adds	r3, #4
 8009a0c:	e00a      	b.n	8009a24 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009a0e:	7bbb      	ldrb	r3, [r7, #14]
 8009a10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009a14:	4613      	mov	r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	4413      	add	r3, r2
 8009a24:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a26:	7bbb      	ldrb	r3, [r7, #14]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d002      	beq.n	8009a32 <USBD_StdEPReq+0x256>
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
 8009a2e:	2b80      	cmp	r3, #128	; 0x80
 8009a30:	d103      	bne.n	8009a3a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2200      	movs	r2, #0
 8009a36:	601a      	str	r2, [r3, #0]
 8009a38:	e00e      	b.n	8009a58 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f002 f86c 	bl	800bb1c <USBD_LL_IsStallEP>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d003      	beq.n	8009a52 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	601a      	str	r2, [r3, #0]
 8009a50:	e002      	b.n	8009a58 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	2200      	movs	r2, #0
 8009a56:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fb42 	bl	800a0e8 <USBD_CtlSendData>
          break;
 8009a64:	e004      	b.n	8009a70 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fad2 	bl	800a012 <USBD_CtlError>
        break;
 8009a6e:	bf00      	nop
      }
      break;
 8009a70:	e004      	b.n	8009a7c <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 facc 	bl	800a012 <USBD_CtlError>
      break;
 8009a7a:	bf00      	nop
    }
    break;
 8009a7c:	e004      	b.n	8009a88 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fac6 	bl	800a012 <USBD_CtlError>
    break;
 8009a86:	bf00      	nop
  }

  return ret;
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
	...

08009a94 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	885b      	ldrh	r3, [r3, #2]
 8009aa2:	0a1b      	lsrs	r3, r3, #8
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	2b0e      	cmp	r3, #14
 8009aaa:	f200 80e5 	bhi.w	8009c78 <USBD_GetDescriptor+0x1e4>
 8009aae:	a201      	add	r2, pc, #4	; (adr r2, 8009ab4 <USBD_GetDescriptor+0x20>)
 8009ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab4:	08009b09 	.word	0x08009b09
 8009ab8:	08009b21 	.word	0x08009b21
 8009abc:	08009b61 	.word	0x08009b61
 8009ac0:	08009c79 	.word	0x08009c79
 8009ac4:	08009c79 	.word	0x08009c79
 8009ac8:	08009c25 	.word	0x08009c25
 8009acc:	08009c4b 	.word	0x08009c4b
 8009ad0:	08009c79 	.word	0x08009c79
 8009ad4:	08009c79 	.word	0x08009c79
 8009ad8:	08009c79 	.word	0x08009c79
 8009adc:	08009c79 	.word	0x08009c79
 8009ae0:	08009c79 	.word	0x08009c79
 8009ae4:	08009c79 	.word	0x08009c79
 8009ae8:	08009c79 	.word	0x08009c79
 8009aec:	08009af1 	.word	0x08009af1
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009af6:	69db      	ldr	r3, [r3, #28]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	7c12      	ldrb	r2, [r2, #16]
 8009afc:	f107 010a 	add.w	r1, r7, #10
 8009b00:	4610      	mov	r0, r2
 8009b02:	4798      	blx	r3
 8009b04:	60f8      	str	r0, [r7, #12]
    break;
 8009b06:	e0bc      	b.n	8009c82 <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	7c12      	ldrb	r2, [r2, #16]
 8009b14:	f107 010a 	add.w	r1, r7, #10
 8009b18:	4610      	mov	r0, r2
 8009b1a:	4798      	blx	r3
 8009b1c:	60f8      	str	r0, [r7, #12]
    break;
 8009b1e:	e0b0      	b.n	8009c82 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	7c1b      	ldrb	r3, [r3, #16]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10d      	bne.n	8009b44 <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b30:	f107 020a 	add.w	r2, r7, #10
 8009b34:	4610      	mov	r0, r2
 8009b36:	4798      	blx	r3
 8009b38:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	2202      	movs	r2, #2
 8009b40:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009b42:	e09e      	b.n	8009c82 <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4c:	f107 020a 	add.w	r2, r7, #10
 8009b50:	4610      	mov	r0, r2
 8009b52:	4798      	blx	r3
 8009b54:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	701a      	strb	r2, [r3, #0]
    break;
 8009b5e:	e090      	b.n	8009c82 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	885b      	ldrh	r3, [r3, #2]
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	2b05      	cmp	r3, #5
 8009b68:	d856      	bhi.n	8009c18 <USBD_GetDescriptor+0x184>
 8009b6a:	a201      	add	r2, pc, #4	; (adr r2, 8009b70 <USBD_GetDescriptor+0xdc>)
 8009b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b70:	08009b89 	.word	0x08009b89
 8009b74:	08009ba1 	.word	0x08009ba1
 8009b78:	08009bb9 	.word	0x08009bb9
 8009b7c:	08009bd1 	.word	0x08009bd1
 8009b80:	08009be9 	.word	0x08009be9
 8009b84:	08009c01 	.word	0x08009c01
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	7c12      	ldrb	r2, [r2, #16]
 8009b94:	f107 010a 	add.w	r1, r7, #10
 8009b98:	4610      	mov	r0, r2
 8009b9a:	4798      	blx	r3
 8009b9c:	60f8      	str	r0, [r7, #12]
      break;
 8009b9e:	e040      	b.n	8009c22 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	7c12      	ldrb	r2, [r2, #16]
 8009bac:	f107 010a 	add.w	r1, r7, #10
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	4798      	blx	r3
 8009bb4:	60f8      	str	r0, [r7, #12]
      break;
 8009bb6:	e034      	b.n	8009c22 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	7c12      	ldrb	r2, [r2, #16]
 8009bc4:	f107 010a 	add.w	r1, r7, #10
 8009bc8:	4610      	mov	r0, r2
 8009bca:	4798      	blx	r3
 8009bcc:	60f8      	str	r0, [r7, #12]
      break;
 8009bce:	e028      	b.n	8009c22 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	7c12      	ldrb	r2, [r2, #16]
 8009bdc:	f107 010a 	add.w	r1, r7, #10
 8009be0:	4610      	mov	r0, r2
 8009be2:	4798      	blx	r3
 8009be4:	60f8      	str	r0, [r7, #12]
      break;
 8009be6:	e01c      	b.n	8009c22 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	7c12      	ldrb	r2, [r2, #16]
 8009bf4:	f107 010a 	add.w	r1, r7, #10
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	4798      	blx	r3
 8009bfc:	60f8      	str	r0, [r7, #12]
      break;
 8009bfe:	e010      	b.n	8009c22 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	7c12      	ldrb	r2, [r2, #16]
 8009c0c:	f107 010a 	add.w	r1, r7, #10
 8009c10:	4610      	mov	r0, r2
 8009c12:	4798      	blx	r3
 8009c14:	60f8      	str	r0, [r7, #12]
      break;
 8009c16:	e004      	b.n	8009c22 <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8009c18:	6839      	ldr	r1, [r7, #0]
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 f9f9 	bl	800a012 <USBD_CtlError>
      return;
 8009c20:	e04b      	b.n	8009cba <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 8009c22:	e02e      	b.n	8009c82 <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	7c1b      	ldrb	r3, [r3, #16]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d109      	bne.n	8009c40 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c34:	f107 020a 	add.w	r2, r7, #10
 8009c38:	4610      	mov	r0, r2
 8009c3a:	4798      	blx	r3
 8009c3c:	60f8      	str	r0, [r7, #12]
      break;
 8009c3e:	e020      	b.n	8009c82 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f9e5 	bl	800a012 <USBD_CtlError>
      return;
 8009c48:	e037      	b.n	8009cba <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	7c1b      	ldrb	r3, [r3, #16]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10d      	bne.n	8009c6e <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c5a:	f107 020a 	add.w	r2, r7, #10
 8009c5e:	4610      	mov	r0, r2
 8009c60:	4798      	blx	r3
 8009c62:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	3301      	adds	r3, #1
 8009c68:	2207      	movs	r2, #7
 8009c6a:	701a      	strb	r2, [r3, #0]
      break;
 8009c6c:	e009      	b.n	8009c82 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 f9ce 	bl	800a012 <USBD_CtlError>
      return;
 8009c76:	e020      	b.n	8009cba <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f9c9 	bl	800a012 <USBD_CtlError>
    return;
 8009c80:	e01b      	b.n	8009cba <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 8009c82:	897b      	ldrh	r3, [r7, #10]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d011      	beq.n	8009cac <USBD_GetDescriptor+0x218>
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	88db      	ldrh	r3, [r3, #6]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00d      	beq.n	8009cac <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	88da      	ldrh	r2, [r3, #6]
 8009c94:	897b      	ldrh	r3, [r7, #10]
 8009c96:	4293      	cmp	r3, r2
 8009c98:	bf28      	it	cs
 8009c9a:	4613      	movcs	r3, r2
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8009ca0:	897b      	ldrh	r3, [r7, #10]
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	68f9      	ldr	r1, [r7, #12]
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fa1e 	bl	800a0e8 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	88db      	ldrh	r3, [r3, #6]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d102      	bne.n	8009cba <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fa75 	bl	800a1a4 <USBD_CtlSendStatus>
  }
}
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	889b      	ldrh	r3, [r3, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d130      	bne.n	8009d34 <USBD_SetAddress+0x74>
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	88db      	ldrh	r3, [r3, #6]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d12c      	bne.n	8009d34 <USBD_SetAddress+0x74>
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	885b      	ldrh	r3, [r3, #2]
 8009cde:	2b7f      	cmp	r3, #127	; 0x7f
 8009ce0:	d828      	bhi.n	8009d34 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	885b      	ldrh	r3, [r3, #2]
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009cf4:	2b03      	cmp	r3, #3
 8009cf6:	d104      	bne.n	8009d02 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8009cf8:	6839      	ldr	r1, [r7, #0]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f989 	bl	800a012 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d00:	e01c      	b.n	8009d3c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	7bfa      	ldrb	r2, [r7, #15]
 8009d06:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f001 ff2a 	bl	800bb68 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fa45 	bl	800a1a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d004      	beq.n	8009d2a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2202      	movs	r2, #2
 8009d24:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d28:	e008      	b.n	8009d3c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d32:	e003      	b.n	8009d3c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d34:	6839      	ldr	r1, [r7, #0]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 f96b 	bl	800a012 <USBD_CtlError>
  }
}
 8009d3c:	bf00      	nop
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	885b      	ldrh	r3, [r3, #2]
 8009d52:	b2da      	uxtb	r2, r3
 8009d54:	4b41      	ldr	r3, [pc, #260]	; (8009e5c <USBD_SetConfig+0x118>)
 8009d56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d58:	4b40      	ldr	r3, [pc, #256]	; (8009e5c <USBD_SetConfig+0x118>)
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d904      	bls.n	8009d6a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f955 	bl	800a012 <USBD_CtlError>
 8009d68:	e075      	b.n	8009e56 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	d002      	beq.n	8009d7a <USBD_SetConfig+0x36>
 8009d74:	2b03      	cmp	r3, #3
 8009d76:	d023      	beq.n	8009dc0 <USBD_SetConfig+0x7c>
 8009d78:	e062      	b.n	8009e40 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8009d7a:	4b38      	ldr	r3, [pc, #224]	; (8009e5c <USBD_SetConfig+0x118>)
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d01a      	beq.n	8009db8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8009d82:	4b36      	ldr	r3, [pc, #216]	; (8009e5c <USBD_SetConfig+0x118>)
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	461a      	mov	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2203      	movs	r2, #3
 8009d90:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009d94:	4b31      	ldr	r3, [pc, #196]	; (8009e5c <USBD_SetConfig+0x118>)
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7ff fa4e 	bl	800923c <USBD_SetClassConfig>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d104      	bne.n	8009db0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8009da6:	6839      	ldr	r1, [r7, #0]
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f932 	bl	800a012 <USBD_CtlError>
          return;
 8009dae:	e052      	b.n	8009e56 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f9f7 	bl	800a1a4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009db6:	e04e      	b.n	8009e56 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f9f3 	bl	800a1a4 <USBD_CtlSendStatus>
      break;
 8009dbe:	e04a      	b.n	8009e56 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009dc0:	4b26      	ldr	r3, [pc, #152]	; (8009e5c <USBD_SetConfig+0x118>)
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d112      	bne.n	8009dee <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8009dd0:	4b22      	ldr	r3, [pc, #136]	; (8009e5c <USBD_SetConfig+0x118>)
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8009dda:	4b20      	ldr	r3, [pc, #128]	; (8009e5c <USBD_SetConfig+0x118>)
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	4619      	mov	r1, r3
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f7ff fa4a 	bl	800927a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f9dc 	bl	800a1a4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009dec:	e033      	b.n	8009e56 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8009dee:	4b1b      	ldr	r3, [pc, #108]	; (8009e5c <USBD_SetConfig+0x118>)
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	461a      	mov	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d01d      	beq.n	8009e38 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	4619      	mov	r1, r3
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f7ff fa38 	bl	800927a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009e0a:	4b14      	ldr	r3, [pc, #80]	; (8009e5c <USBD_SetConfig+0x118>)
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e14:	4b11      	ldr	r3, [pc, #68]	; (8009e5c <USBD_SetConfig+0x118>)
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f7ff fa0e 	bl	800923c <USBD_SetClassConfig>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d104      	bne.n	8009e30 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f8f2 	bl	800a012 <USBD_CtlError>
          return;
 8009e2e:	e012      	b.n	8009e56 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f9b7 	bl	800a1a4 <USBD_CtlSendStatus>
      break;
 8009e36:	e00e      	b.n	8009e56 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 f9b3 	bl	800a1a4 <USBD_CtlSendStatus>
      break;
 8009e3e:	e00a      	b.n	8009e56 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f8e5 	bl	800a012 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009e48:	4b04      	ldr	r3, [pc, #16]	; (8009e5c <USBD_SetConfig+0x118>)
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7ff fa13 	bl	800927a <USBD_ClrClassConfig>
      break;
 8009e54:	bf00      	nop
    }
  }
}
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	200021ea 	.word	0x200021ea

08009e60 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	88db      	ldrh	r3, [r3, #6]
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d004      	beq.n	8009e7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8009e72:	6839      	ldr	r1, [r7, #0]
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 f8cc 	bl	800a012 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8009e7a:	e021      	b.n	8009ec0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	db17      	blt.n	8009eb6 <USBD_GetConfig+0x56>
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	dd02      	ble.n	8009e90 <USBD_GetConfig+0x30>
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	d00b      	beq.n	8009ea6 <USBD_GetConfig+0x46>
 8009e8e:	e012      	b.n	8009eb6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	3308      	adds	r3, #8
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 f922 	bl	800a0e8 <USBD_CtlSendData>
      break;
 8009ea4:	e00c      	b.n	8009ec0 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	3304      	adds	r3, #4
 8009eaa:	2201      	movs	r2, #1
 8009eac:	4619      	mov	r1, r3
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f91a 	bl	800a0e8 <USBD_CtlSendData>
      break;
 8009eb4:	e004      	b.n	8009ec0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 f8aa 	bl	800a012 <USBD_CtlError>
      break;
 8009ebe:	bf00      	nop
}
 8009ec0:	bf00      	nop
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d81e      	bhi.n	8009f1c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	88db      	ldrh	r3, [r3, #6]
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d004      	beq.n	8009ef0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 f892 	bl	800a012 <USBD_CtlError>
      break;
 8009eee:	e01a      	b.n	8009f26 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d005      	beq.n	8009f0c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	f043 0202 	orr.w	r2, r3, #2
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	330c      	adds	r3, #12
 8009f10:	2202      	movs	r2, #2
 8009f12:	4619      	mov	r1, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f8e7 	bl	800a0e8 <USBD_CtlSendData>
    break;
 8009f1a:	e004      	b.n	8009f26 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8009f1c:	6839      	ldr	r1, [r7, #0]
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f877 	bl	800a012 <USBD_CtlError>
    break;
 8009f24:	bf00      	nop
  }
}
 8009f26:	bf00      	nop
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b082      	sub	sp, #8
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	885b      	ldrh	r3, [r3, #2]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d106      	bne.n	8009f4e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2201      	movs	r2, #1
 8009f44:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f92b 	bl	800a1a4 <USBD_CtlSendStatus>
  }

}
 8009f4e:	bf00      	nop
 8009f50:	3708      	adds	r7, #8
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b082      	sub	sp, #8
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009f66:	3b01      	subs	r3, #1
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	d80b      	bhi.n	8009f84 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	885b      	ldrh	r3, [r3, #2]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d10c      	bne.n	8009f8e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 f911 	bl	800a1a4 <USBD_CtlSendStatus>
    }
    break;
 8009f82:	e004      	b.n	8009f8e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8009f84:	6839      	ldr	r1, [r7, #0]
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f843 	bl	800a012 <USBD_CtlError>
    break;
 8009f8c:	e000      	b.n	8009f90 <USBD_ClrFeature+0x3a>
    break;
 8009f8e:	bf00      	nop
  }
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	781a      	ldrb	r2, [r3, #0]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	785a      	ldrb	r2, [r3, #1]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	3302      	adds	r3, #2
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	3303      	adds	r3, #3
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	021b      	lsls	r3, r3, #8
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	4413      	add	r3, r2
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	3304      	adds	r3, #4
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	3305      	adds	r3, #5
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	021b      	lsls	r3, r3, #8
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	4413      	add	r3, r2
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	3306      	adds	r3, #6
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	3307      	adds	r3, #7
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	021b      	lsls	r3, r3, #8
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	4413      	add	r3, r2
 800a000:	b29a      	uxth	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	80da      	strh	r2, [r3, #6]

}
 800a006:	bf00      	nop
 800a008:	370c      	adds	r7, #12
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr

0800a012 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b082      	sub	sp, #8
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800a01c:	2180      	movs	r1, #128	; 0x80
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f001 fd10 	bl	800ba44 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800a024:	2100      	movs	r1, #0
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f001 fd0c 	bl	800ba44 <USBD_LL_StallEP>
}
 800a02c:	bf00      	nop
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a040:	2300      	movs	r3, #0
 800a042:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d032      	beq.n	800a0b0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	f000 f834 	bl	800a0b8 <USBD_GetLen>
 800a050:	4603      	mov	r3, r0
 800a052:	3301      	adds	r3, #1
 800a054:	b29b      	uxth	r3, r3
 800a056:	005b      	lsls	r3, r3, #1
 800a058:	b29a      	uxth	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a05e:	7dfb      	ldrb	r3, [r7, #23]
 800a060:	1c5a      	adds	r2, r3, #1
 800a062:	75fa      	strb	r2, [r7, #23]
 800a064:	461a      	mov	r2, r3
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	4413      	add	r3, r2
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	7812      	ldrb	r2, [r2, #0]
 800a06e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a070:	7dfb      	ldrb	r3, [r7, #23]
 800a072:	1c5a      	adds	r2, r3, #1
 800a074:	75fa      	strb	r2, [r7, #23]
 800a076:	461a      	mov	r2, r3
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	4413      	add	r3, r2
 800a07c:	2203      	movs	r2, #3
 800a07e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a080:	e012      	b.n	800a0a8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a082:	7dfb      	ldrb	r3, [r7, #23]
 800a084:	1c5a      	adds	r2, r3, #1
 800a086:	75fa      	strb	r2, [r7, #23]
 800a088:	461a      	mov	r2, r3
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	441a      	add	r2, r3
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	1c59      	adds	r1, r3, #1
 800a092:	60f9      	str	r1, [r7, #12]
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a098:	7dfb      	ldrb	r3, [r7, #23]
 800a09a:	1c5a      	adds	r2, r3, #1
 800a09c:	75fa      	strb	r2, [r7, #23]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1e8      	bne.n	800a082 <USBD_GetString+0x4e>
    }
  }
}
 800a0b0:	bf00      	nop
 800a0b2:	3718      	adds	r7, #24
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800a0c4:	e005      	b.n	800a0d2 <USBD_GetLen+0x1a>
    {
        len++;
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	73fb      	strb	r3, [r7, #15]
        buf++;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1f5      	bne.n	800a0c6 <USBD_GetLen+0xe>
    }

    return len;
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3714      	adds	r7, #20
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2202      	movs	r2, #2
 800a0fa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800a0fe:	88fa      	ldrh	r2, [r7, #6]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a104:	88fa      	ldrh	r2, [r7, #6]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800a10a:	88fb      	ldrh	r3, [r7, #6]
 800a10c:	68ba      	ldr	r2, [r7, #8]
 800a10e:	2100      	movs	r1, #0
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f001 fd5f 	bl	800bbd4 <USBD_LL_Transmit>

  return USBD_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	4613      	mov	r3, r2
 800a12c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800a12e:	88fb      	ldrh	r3, [r7, #6]
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	2100      	movs	r1, #0
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f001 fd4d 	bl	800bbd4 <USBD_LL_Transmit>

  return USBD_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3710      	adds	r7, #16
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	4613      	mov	r3, r2
 800a150:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2203      	movs	r2, #3
 800a156:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800a15a:	88fa      	ldrh	r2, [r7, #6]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800a162:	88fa      	ldrh	r2, [r7, #6]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800a16a:	88fb      	ldrh	r3, [r7, #6]
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	2100      	movs	r1, #0
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f001 fd69 	bl	800bc48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	4613      	mov	r3, r2
 800a18c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a18e:	88fb      	ldrh	r3, [r7, #6]
 800a190:	68ba      	ldr	r2, [r7, #8]
 800a192:	2100      	movs	r1, #0
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f001 fd57 	bl	800bc48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2204      	movs	r2, #4
 800a1b0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f001 fd0a 	bl	800bbd4 <USBD_LL_Transmit>

  return USBD_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b082      	sub	sp, #8
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2205      	movs	r2, #5
 800a1d6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a1da:	2300      	movs	r3, #0
 800a1dc:	2200      	movs	r2, #0
 800a1de:	2100      	movs	r1, #0
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f001 fd31 	bl	800bc48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b08a      	sub	sp, #40	; 0x28
 800a1f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1f6:	f107 0314 	add.w	r3, r7, #20
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	601a      	str	r2, [r3, #0]
 800a1fe:	605a      	str	r2, [r3, #4]
 800a200:	609a      	str	r2, [r3, #8]
 800a202:	60da      	str	r2, [r3, #12]
 800a204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a206:	4a5a      	ldr	r2, [pc, #360]	; (800a370 <MX_GPIO_Init+0x180>)
 800a208:	4b59      	ldr	r3, [pc, #356]	; (800a370 <MX_GPIO_Init+0x180>)
 800a20a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a20c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a210:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a212:	4b57      	ldr	r3, [pc, #348]	; (800a370 <MX_GPIO_Init+0x180>)
 800a214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a21a:	613b      	str	r3, [r7, #16]
 800a21c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a21e:	4a54      	ldr	r2, [pc, #336]	; (800a370 <MX_GPIO_Init+0x180>)
 800a220:	4b53      	ldr	r3, [pc, #332]	; (800a370 <MX_GPIO_Init+0x180>)
 800a222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a224:	f043 0304 	orr.w	r3, r3, #4
 800a228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a22a:	4b51      	ldr	r3, [pc, #324]	; (800a370 <MX_GPIO_Init+0x180>)
 800a22c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a22e:	f003 0304 	and.w	r3, r3, #4
 800a232:	60fb      	str	r3, [r7, #12]
 800a234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a236:	4a4e      	ldr	r2, [pc, #312]	; (800a370 <MX_GPIO_Init+0x180>)
 800a238:	4b4d      	ldr	r3, [pc, #308]	; (800a370 <MX_GPIO_Init+0x180>)
 800a23a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a23c:	f043 0301 	orr.w	r3, r3, #1
 800a240:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a242:	4b4b      	ldr	r3, [pc, #300]	; (800a370 <MX_GPIO_Init+0x180>)
 800a244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a246:	f003 0301 	and.w	r3, r3, #1
 800a24a:	60bb      	str	r3, [r7, #8]
 800a24c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a24e:	4a48      	ldr	r2, [pc, #288]	; (800a370 <MX_GPIO_Init+0x180>)
 800a250:	4b47      	ldr	r3, [pc, #284]	; (800a370 <MX_GPIO_Init+0x180>)
 800a252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a254:	f043 0302 	orr.w	r3, r3, #2
 800a258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a25a:	4b45      	ldr	r3, [pc, #276]	; (800a370 <MX_GPIO_Init+0x180>)
 800a25c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a25e:	f003 0302 	and.w	r3, r3, #2
 800a262:	607b      	str	r3, [r7, #4]
 800a264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a266:	4a42      	ldr	r2, [pc, #264]	; (800a370 <MX_GPIO_Init+0x180>)
 800a268:	4b41      	ldr	r3, [pc, #260]	; (800a370 <MX_GPIO_Init+0x180>)
 800a26a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a26c:	f043 0308 	orr.w	r3, r3, #8
 800a270:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a272:	4b3f      	ldr	r3, [pc, #252]	; (800a370 <MX_GPIO_Init+0x180>)
 800a274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a276:	f003 0308 	and.w	r3, r3, #8
 800a27a:	603b      	str	r3, [r7, #0]
 800a27c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, O_USART2_DIR_Pin|O_USART1_DIR_Pin, GPIO_PIN_RESET);
 800a27e:	2200      	movs	r2, #0
 800a280:	f241 0104 	movw	r1, #4100	; 0x1004
 800a284:	483b      	ldr	r0, [pc, #236]	; (800a374 <MX_GPIO_Init+0x184>)
 800a286:	f7f8 f87b 	bl	8002380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O_BT_PWR_GPIO_Port, O_BT_PWR_Pin, GPIO_PIN_SET);
 800a28a:	2201      	movs	r2, #1
 800a28c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a294:	f7f8 f874 	bl	8002380 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = O_USART2_DIR_Pin|O_USART1_DIR_Pin;
 800a298:	f241 0304 	movw	r3, #4100	; 0x1004
 800a29c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a2aa:	f107 0314 	add.w	r3, r7, #20
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	4830      	ldr	r0, [pc, #192]	; (800a374 <MX_GPIO_Init+0x184>)
 800a2b2:	f7f7 fed3 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_USART2_BREAK_Pin;
 800a2b6:	2308      	movs	r3, #8
 800a2b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(O_USART2_BREAK_GPIO_Port, &GPIO_InitStruct);
 800a2c2:	f107 0314 	add.w	r3, r7, #20
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	482a      	ldr	r0, [pc, #168]	; (800a374 <MX_GPIO_Init+0x184>)
 800a2ca:	f7f7 fec7 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = I_GPIO1_Pin|I_GPIO2_Pin|I_GPIO3_Pin|I_GPIO4_Pin;
 800a2ce:	23f0      	movs	r3, #240	; 0xf0
 800a2d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2da:	f107 0314 	add.w	r3, r7, #20
 800a2de:	4619      	mov	r1, r3
 800a2e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a2e4:	f7f7 feba 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_USB_VBUS_Pin;
 800a2e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800a2ee:	4b22      	ldr	r3, [pc, #136]	; (800a378 <MX_GPIO_Init+0x188>)
 800a2f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I_USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a2f6:	f107 0314 	add.w	r3, r7, #20
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a300:	f7f7 feac 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_SW2_Pin;
 800a304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a30a:	2300      	movs	r3, #0
 800a30c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a30e:	2301      	movs	r3, #1
 800a310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I_SW2_GPIO_Port, &GPIO_InitStruct);
 800a312:	f107 0314 	add.w	r3, r7, #20
 800a316:	4619      	mov	r1, r3
 800a318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a31c:	f7f7 fe9e 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_BT_PWR_Pin;
 800a320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a326:	2301      	movs	r3, #1
 800a328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a32a:	2300      	movs	r3, #0
 800a32c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a32e:	2300      	movs	r3, #0
 800a330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(O_BT_PWR_GPIO_Port, &GPIO_InitStruct);
 800a332:	f107 0314 	add.w	r3, r7, #20
 800a336:	4619      	mov	r1, r3
 800a338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a33c:	f7f7 fe8e 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_USART1_BREAK_Pin;
 800a340:	2304      	movs	r3, #4
 800a342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a344:	2300      	movs	r3, #0
 800a346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a348:	2300      	movs	r3, #0
 800a34a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(O_USART1_BREAK_GPIO_Port, &GPIO_InitStruct);
 800a34c:	f107 0314 	add.w	r3, r7, #20
 800a350:	4619      	mov	r1, r3
 800a352:	480a      	ldr	r0, [pc, #40]	; (800a37c <MX_GPIO_Init+0x18c>)
 800a354:	f7f7 fe82 	bl	800205c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800a358:	2200      	movs	r2, #0
 800a35a:	2101      	movs	r1, #1
 800a35c:	2017      	movs	r0, #23
 800a35e:	f7f7 fe46 	bl	8001fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a362:	2017      	movs	r0, #23
 800a364:	f7f7 fe5f 	bl	8002026 <HAL_NVIC_EnableIRQ>

}
 800a368:	bf00      	nop
 800a36a:	3728      	adds	r7, #40	; 0x28
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	40021000 	.word	0x40021000
 800a374:	48000800 	.word	0x48000800
 800a378:	10310000 	.word	0x10310000
 800a37c:	48000c00 	.word	0x48000c00

0800a380 <gpio_ConfigureToFloating>:

/* USER CODE BEGIN 2 */
void gpio_ConfigureToFloating(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 800a380:	b580      	push	{r7, lr}
 800a382:	b088      	sub	sp, #32
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	460b      	mov	r3, r1
 800a38a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a38c:	f107 030c 	add.w	r3, r7, #12
 800a390:	2200      	movs	r2, #0
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	605a      	str	r2, [r3, #4]
 800a396:	609a      	str	r2, [r3, #8]
 800a398:	60da      	str	r2, [r3, #12]
 800a39a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800a39c:	887b      	ldrh	r3, [r7, #2]
 800a39e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800a3a8:	f107 030c 	add.w	r3, r7, #12
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7f7 fe54 	bl	800205c <HAL_GPIO_Init>
}
 800a3b4:	bf00      	nop
 800a3b6:	3720      	adds	r7, #32
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <gpio_ConfigureToPushPull>:
void gpio_ConfigureToPushPull(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b088      	sub	sp, #32
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3c8:	f107 030c 	add.w	r3, r7, #12
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	605a      	str	r2, [r3, #4]
 800a3d2:	609a      	str	r2, [r3, #8]
 800a3d4:	60da      	str	r2, [r3, #12]
 800a3d6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800a3d8:	887b      	ldrh	r3, [r7, #2]
 800a3da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800a3e8:	f107 030c 	add.w	r3, r7, #12
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7f7 fe34 	bl	800205c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800a3f4:	887b      	ldrh	r3, [r7, #2]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7f7 ffc0 	bl	8002380 <HAL_GPIO_WritePin>
}
 800a400:	bf00      	nop
 800a402:	3720      	adds	r7, #32
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800a40c:	4b1b      	ldr	r3, [pc, #108]	; (800a47c <MX_I2C2_Init+0x74>)
 800a40e:	4a1c      	ldr	r2, [pc, #112]	; (800a480 <MX_I2C2_Init+0x78>)
 800a410:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800a412:	4b1a      	ldr	r3, [pc, #104]	; (800a47c <MX_I2C2_Init+0x74>)
 800a414:	4a1b      	ldr	r2, [pc, #108]	; (800a484 <MX_I2C2_Init+0x7c>)
 800a416:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800a418:	4b18      	ldr	r3, [pc, #96]	; (800a47c <MX_I2C2_Init+0x74>)
 800a41a:	2200      	movs	r2, #0
 800a41c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a41e:	4b17      	ldr	r3, [pc, #92]	; (800a47c <MX_I2C2_Init+0x74>)
 800a420:	2201      	movs	r2, #1
 800a422:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a424:	4b15      	ldr	r3, [pc, #84]	; (800a47c <MX_I2C2_Init+0x74>)
 800a426:	2200      	movs	r2, #0
 800a428:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800a42a:	4b14      	ldr	r3, [pc, #80]	; (800a47c <MX_I2C2_Init+0x74>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a430:	4b12      	ldr	r3, [pc, #72]	; (800a47c <MX_I2C2_Init+0x74>)
 800a432:	2200      	movs	r2, #0
 800a434:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a436:	4b11      	ldr	r3, [pc, #68]	; (800a47c <MX_I2C2_Init+0x74>)
 800a438:	2200      	movs	r2, #0
 800a43a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a43c:	4b0f      	ldr	r3, [pc, #60]	; (800a47c <MX_I2C2_Init+0x74>)
 800a43e:	2200      	movs	r2, #0
 800a440:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a442:	480e      	ldr	r0, [pc, #56]	; (800a47c <MX_I2C2_Init+0x74>)
 800a444:	f7f7 ffcc 	bl	80023e0 <HAL_I2C_Init>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d001      	beq.n	800a452 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800a44e:	f000 f9a7 	bl	800a7a0 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a452:	2100      	movs	r1, #0
 800a454:	4809      	ldr	r0, [pc, #36]	; (800a47c <MX_I2C2_Init+0x74>)
 800a456:	f7f8 f851 	bl	80024fc <HAL_I2CEx_ConfigAnalogFilter>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d001      	beq.n	800a464 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800a460:	f000 f99e 	bl	800a7a0 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a464:	2100      	movs	r1, #0
 800a466:	4805      	ldr	r0, [pc, #20]	; (800a47c <MX_I2C2_Init+0x74>)
 800a468:	f7f8 f893 	bl	8002592 <HAL_I2CEx_ConfigDigitalFilter>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800a472:	f000 f995 	bl	800a7a0 <Error_Handler>
  }

}
 800a476:	bf00      	nop
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	20002414 	.word	0x20002414
 800a480:	40005800 	.word	0x40005800
 800a484:	10909cec 	.word	0x10909cec

0800a488 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08a      	sub	sp, #40	; 0x28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a490:	f107 0314 	add.w	r3, r7, #20
 800a494:	2200      	movs	r2, #0
 800a496:	601a      	str	r2, [r3, #0]
 800a498:	605a      	str	r2, [r3, #4]
 800a49a:	609a      	str	r2, [r3, #8]
 800a49c:	60da      	str	r2, [r3, #12]
 800a49e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a17      	ldr	r2, [pc, #92]	; (800a504 <HAL_I2C_MspInit+0x7c>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d128      	bne.n	800a4fc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4aa:	4a17      	ldr	r2, [pc, #92]	; (800a508 <HAL_I2C_MspInit+0x80>)
 800a4ac:	4b16      	ldr	r3, [pc, #88]	; (800a508 <HAL_I2C_MspInit+0x80>)
 800a4ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4b0:	f043 0302 	orr.w	r3, r3, #2
 800a4b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a4b6:	4b14      	ldr	r3, [pc, #80]	; (800a508 <HAL_I2C_MspInit+0x80>)
 800a4b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ba:	f003 0302 	and.w	r3, r3, #2
 800a4be:	613b      	str	r3, [r7, #16]
 800a4c0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a4c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a4c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a4c8:	2312      	movs	r3, #18
 800a4ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4d0:	2303      	movs	r3, #3
 800a4d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a4d4:	2304      	movs	r3, #4
 800a4d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4d8:	f107 0314 	add.w	r3, r7, #20
 800a4dc:	4619      	mov	r1, r3
 800a4de:	480b      	ldr	r0, [pc, #44]	; (800a50c <HAL_I2C_MspInit+0x84>)
 800a4e0:	f7f7 fdbc 	bl	800205c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a4e4:	4a08      	ldr	r2, [pc, #32]	; (800a508 <HAL_I2C_MspInit+0x80>)
 800a4e6:	4b08      	ldr	r3, [pc, #32]	; (800a508 <HAL_I2C_MspInit+0x80>)
 800a4e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a4ee:	6593      	str	r3, [r2, #88]	; 0x58
 800a4f0:	4b05      	ldr	r3, [pc, #20]	; (800a508 <HAL_I2C_MspInit+0x80>)
 800a4f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4f8:	60fb      	str	r3, [r7, #12]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800a4fc:	bf00      	nop
 800a4fe:	3728      	adds	r7, #40	; 0x28
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	40005800 	.word	0x40005800
 800a508:	40021000 	.word	0x40021000
 800a50c:	48000400 	.word	0x48000400

0800a510 <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim1;
LPTIM_HandleTypeDef hlptim2;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	af00      	add	r7, sp, #0

  hlptim1.Instance = LPTIM1;
 800a514:	4b12      	ldr	r3, [pc, #72]	; (800a560 <MX_LPTIM1_Init+0x50>)
 800a516:	4a13      	ldr	r2, [pc, #76]	; (800a564 <MX_LPTIM1_Init+0x54>)
 800a518:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800a51a:	4b11      	ldr	r3, [pc, #68]	; (800a560 <MX_LPTIM1_Init+0x50>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800a520:	4b0f      	ldr	r3, [pc, #60]	; (800a560 <MX_LPTIM1_Init+0x50>)
 800a522:	2200      	movs	r2, #0
 800a524:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800a526:	4b0e      	ldr	r3, [pc, #56]	; (800a560 <MX_LPTIM1_Init+0x50>)
 800a528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a52c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800a52e:	4b0c      	ldr	r3, [pc, #48]	; (800a560 <MX_LPTIM1_Init+0x50>)
 800a530:	2200      	movs	r2, #0
 800a532:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800a534:	4b0a      	ldr	r3, [pc, #40]	; (800a560 <MX_LPTIM1_Init+0x50>)
 800a536:	2200      	movs	r2, #0
 800a538:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800a53a:	4b09      	ldr	r3, [pc, #36]	; (800a560 <MX_LPTIM1_Init+0x50>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800a540:	4b07      	ldr	r3, [pc, #28]	; (800a560 <MX_LPTIM1_Init+0x50>)
 800a542:	2200      	movs	r2, #0
 800a544:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800a546:	4b06      	ldr	r3, [pc, #24]	; (800a560 <MX_LPTIM1_Init+0x50>)
 800a548:	2200      	movs	r2, #0
 800a54a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800a54c:	4804      	ldr	r0, [pc, #16]	; (800a560 <MX_LPTIM1_Init+0x50>)
 800a54e:	f7f8 f86d 	bl	800262c <HAL_LPTIM_Init>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d001      	beq.n	800a55c <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 800a558:	f000 f922 	bl	800a7a0 <Error_Handler>
  }

}
 800a55c:	bf00      	nop
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	20002498 	.word	0x20002498
 800a564:	40007c00 	.word	0x40007c00

0800a568 <MX_LPTIM2_Init>:
/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	af00      	add	r7, sp, #0

  hlptim2.Instance = LPTIM2;
 800a56c:	4b12      	ldr	r3, [pc, #72]	; (800a5b8 <MX_LPTIM2_Init+0x50>)
 800a56e:	4a13      	ldr	r2, [pc, #76]	; (800a5bc <MX_LPTIM2_Init+0x54>)
 800a570:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800a572:	4b11      	ldr	r3, [pc, #68]	; (800a5b8 <MX_LPTIM2_Init+0x50>)
 800a574:	2200      	movs	r2, #0
 800a576:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800a578:	4b0f      	ldr	r3, [pc, #60]	; (800a5b8 <MX_LPTIM2_Init+0x50>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800a57e:	4b0e      	ldr	r3, [pc, #56]	; (800a5b8 <MX_LPTIM2_Init+0x50>)
 800a580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a584:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800a586:	4b0c      	ldr	r3, [pc, #48]	; (800a5b8 <MX_LPTIM2_Init+0x50>)
 800a588:	2200      	movs	r2, #0
 800a58a:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800a58c:	4b0a      	ldr	r3, [pc, #40]	; (800a5b8 <MX_LPTIM2_Init+0x50>)
 800a58e:	2200      	movs	r2, #0
 800a590:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800a592:	4b09      	ldr	r3, [pc, #36]	; (800a5b8 <MX_LPTIM2_Init+0x50>)
 800a594:	2200      	movs	r2, #0
 800a596:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800a598:	4b07      	ldr	r3, [pc, #28]	; (800a5b8 <MX_LPTIM2_Init+0x50>)
 800a59a:	2200      	movs	r2, #0
 800a59c:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800a59e:	4b06      	ldr	r3, [pc, #24]	; (800a5b8 <MX_LPTIM2_Init+0x50>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 800a5a4:	4804      	ldr	r0, [pc, #16]	; (800a5b8 <MX_LPTIM2_Init+0x50>)
 800a5a6:	f7f8 f841 	bl	800262c <HAL_LPTIM_Init>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d001      	beq.n	800a5b4 <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 800a5b0:	f000 f8f6 	bl	800a7a0 <Error_Handler>
  }

}
 800a5b4:	bf00      	nop
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	20002460 	.word	0x20002460
 800a5bc:	40009400 	.word	0x40009400

0800a5c0 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]

  if(lptimHandle->Instance==LPTIM1)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a1a      	ldr	r2, [pc, #104]	; (800a638 <HAL_LPTIM_MspInit+0x78>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d114      	bne.n	800a5fc <HAL_LPTIM_MspInit+0x3c>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800a5d2:	4a1a      	ldr	r2, [pc, #104]	; (800a63c <HAL_LPTIM_MspInit+0x7c>)
 800a5d4:	4b19      	ldr	r3, [pc, #100]	; (800a63c <HAL_LPTIM_MspInit+0x7c>)
 800a5d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5dc:	6593      	str	r3, [r2, #88]	; 0x58
 800a5de:	4b17      	ldr	r3, [pc, #92]	; (800a63c <HAL_LPTIM_MspInit+0x7c>)
 800a5e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5e6:	60fb      	str	r3, [r7, #12]
 800a5e8:	68fb      	ldr	r3, [r7, #12]

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	2041      	movs	r0, #65	; 0x41
 800a5f0:	f7f7 fcfd 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800a5f4:	2041      	movs	r0, #65	; 0x41
 800a5f6:	f7f7 fd16 	bl	8002026 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }
}
 800a5fa:	e018      	b.n	800a62e <HAL_LPTIM_MspInit+0x6e>
  else if(lptimHandle->Instance==LPTIM2)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a0f      	ldr	r2, [pc, #60]	; (800a640 <HAL_LPTIM_MspInit+0x80>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d113      	bne.n	800a62e <HAL_LPTIM_MspInit+0x6e>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800a606:	4a0d      	ldr	r2, [pc, #52]	; (800a63c <HAL_LPTIM_MspInit+0x7c>)
 800a608:	4b0c      	ldr	r3, [pc, #48]	; (800a63c <HAL_LPTIM_MspInit+0x7c>)
 800a60a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a60c:	f043 0320 	orr.w	r3, r3, #32
 800a610:	65d3      	str	r3, [r2, #92]	; 0x5c
 800a612:	4b0a      	ldr	r3, [pc, #40]	; (800a63c <HAL_LPTIM_MspInit+0x7c>)
 800a614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a616:	f003 0320 	and.w	r3, r3, #32
 800a61a:	60bb      	str	r3, [r7, #8]
 800a61c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 800a61e:	2200      	movs	r2, #0
 800a620:	2100      	movs	r1, #0
 800a622:	2042      	movs	r0, #66	; 0x42
 800a624:	f7f7 fce3 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 800a628:	2042      	movs	r0, #66	; 0x42
 800a62a:	f7f7 fcfc 	bl	8002026 <HAL_NVIC_EnableIRQ>
}
 800a62e:	bf00      	nop
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	40007c00 	.word	0x40007c00
 800a63c:	40021000 	.word	0x40021000
 800a640:	40009400 	.word	0x40009400

0800a644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a648:	f7f7 fba6 	bl	8001d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a64c:	f000 f81f 	bl	800a68e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a650:	f7ff fdce 	bl	800a1f0 <MX_GPIO_Init>
  MX_I2C2_Init();
 800a654:	f7ff fed8 	bl	800a408 <MX_I2C2_Init>
  MX_LPTIM1_Init();
 800a658:	f7ff ff5a 	bl	800a510 <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 800a65c:	f7ff ff84 	bl	800a568 <MX_LPTIM2_Init>
  MX_TIM1_Init();
 800a660:	f000 f996 	bl	800a990 <MX_TIM1_Init>
  MX_TIM2_Init();
 800a664:	f000 fa22 	bl	800aaac <MX_TIM2_Init>
  MX_TIM3_Init();
 800a668:	f000 fa80 	bl	800ab6c <MX_TIM3_Init>
  MX_TIM6_Init();
 800a66c:	f000 fade 	bl	800ac2c <MX_TIM6_Init>
  MX_TIM15_Init();
 800a670:	f000 fb12 	bl	800ac98 <MX_TIM15_Init>
  MX_TIM16_Init();
 800a674:	f000 fbbe 	bl	800adf4 <MX_TIM16_Init>
  MX_UART4_Init();
 800a678:	f000 fdb2 	bl	800b1e0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800a67c:	f000 fde0 	bl	800b240 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800a680:	f000 fe10 	bl	800b2a4 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800a684:	f000 ff00 	bl	800b488 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
//  TIM15->CCR4 = 255;
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
  app_main();
 800a688:	f7f7 f994 	bl	80019b4 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a68c:	e7fe      	b.n	800a68c <main+0x48>

0800a68e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b0b0      	sub	sp, #192	; 0xc0
 800a692:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a694:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800a698:	2244      	movs	r2, #68	; 0x44
 800a69a:	2100      	movs	r1, #0
 800a69c:	4618      	mov	r0, r3
 800a69e:	f001 fca6 	bl	800bfee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a6a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	601a      	str	r2, [r3, #0]
 800a6aa:	605a      	str	r2, [r3, #4]
 800a6ac:	609a      	str	r2, [r3, #8]
 800a6ae:	60da      	str	r2, [r3, #12]
 800a6b0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a6b2:	463b      	mov	r3, r7
 800a6b4:	2268      	movs	r2, #104	; 0x68
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f001 fc98 	bl	800bfee <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a6c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a6c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a6ca:	2302      	movs	r3, #2
 800a6cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a6d0:	2303      	movs	r3, #3
 800a6d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 20;
 800a6dc:	2314      	movs	r3, #20
 800a6de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800a6e2:	2307      	movs	r3, #7
 800a6e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a6e8:	2302      	movs	r3, #2
 800a6ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a6f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7f9 f8c7 	bl	800388c <HAL_RCC_OscConfig>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d001      	beq.n	800a708 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800a704:	f000 f84c 	bl	800a7a0 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a708:	230f      	movs	r3, #15
 800a70a:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a70c:	2303      	movs	r3, #3
 800a70e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a710:	2300      	movs	r3, #0
 800a712:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a714:	2300      	movs	r3, #0
 800a716:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a718:	2300      	movs	r3, #0
 800a71a:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a71c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a720:	2104      	movs	r1, #4
 800a722:	4618      	mov	r0, r3
 800a724:	f7f9 fc58 	bl	8003fd8 <HAL_RCC_ClockConfig>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d001      	beq.n	800a732 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800a72e:	f000 f837 	bl	800a7a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800a732:	f242 638b 	movw	r3, #9867	; 0x268b
 800a736:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_LPTIM1
                              |RCC_PERIPHCLK_LPTIM2|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a738:	2300      	movs	r3, #0
 800a73a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a73c:	2300      	movs	r3, #0
 800a73e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800a740:	2300      	movs	r3, #0
 800a742:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800a744:	2300      	movs	r3, #0
 800a746:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800a748:	2300      	movs	r3, #0
 800a74a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 800a74c:	2300      	movs	r3, #0
 800a74e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800a750:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a754:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800a756:	2303      	movs	r3, #3
 800a758:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800a75a:	2301      	movs	r3, #1
 800a75c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800a75e:	230c      	movs	r3, #12
 800a760:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800a762:	2307      	movs	r3, #7
 800a764:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800a766:	2302      	movs	r3, #2
 800a768:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800a76a:	2302      	movs	r3, #2
 800a76c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800a76e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a772:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a774:	463b      	mov	r3, r7
 800a776:	4618      	mov	r0, r3
 800a778:	f7f9 fe40 	bl	80043fc <HAL_RCCEx_PeriphCLKConfig>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d001      	beq.n	800a786 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800a782:	f000 f80d 	bl	800a7a0 <Error_Handler>
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800a786:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a78a:	f7f9 f819 	bl	80037c0 <HAL_PWREx_ControlVoltageScaling>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800a794:	f000 f804 	bl	800a7a0 <Error_Handler>
  }
}
 800a798:	bf00      	nop
 800a79a:	37c0      	adds	r7, #192	; 0xc0
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a7a4:	bf00      	nop
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
	...

0800a7b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a7b6:	4a0f      	ldr	r2, [pc, #60]	; (800a7f4 <HAL_MspInit+0x44>)
 800a7b8:	4b0e      	ldr	r3, [pc, #56]	; (800a7f4 <HAL_MspInit+0x44>)
 800a7ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7bc:	f043 0301 	orr.w	r3, r3, #1
 800a7c0:	6613      	str	r3, [r2, #96]	; 0x60
 800a7c2:	4b0c      	ldr	r3, [pc, #48]	; (800a7f4 <HAL_MspInit+0x44>)
 800a7c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7c6:	f003 0301 	and.w	r3, r3, #1
 800a7ca:	607b      	str	r3, [r7, #4]
 800a7cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a7ce:	4a09      	ldr	r2, [pc, #36]	; (800a7f4 <HAL_MspInit+0x44>)
 800a7d0:	4b08      	ldr	r3, [pc, #32]	; (800a7f4 <HAL_MspInit+0x44>)
 800a7d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7d8:	6593      	str	r3, [r2, #88]	; 0x58
 800a7da:	4b06      	ldr	r3, [pc, #24]	; (800a7f4 <HAL_MspInit+0x44>)
 800a7dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7e2:	603b      	str	r3, [r7, #0]
 800a7e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a7e6:	bf00      	nop
 800a7e8:	370c      	adds	r7, #12
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	40021000 	.word	0x40021000

0800a7f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a7fc:	bf00      	nop
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr

0800a806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a806:	b480      	push	{r7}
 800a808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a80a:	e7fe      	b.n	800a80a <HardFault_Handler+0x4>

0800a80c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a80c:	b480      	push	{r7}
 800a80e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a810:	e7fe      	b.n	800a810 <MemManage_Handler+0x4>

0800a812 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a812:	b480      	push	{r7}
 800a814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a816:	e7fe      	b.n	800a816 <BusFault_Handler+0x4>

0800a818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a818:	b480      	push	{r7}
 800a81a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a81c:	e7fe      	b.n	800a81c <UsageFault_Handler+0x4>

0800a81e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a81e:	b480      	push	{r7}
 800a820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a822:	bf00      	nop
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a82c:	b480      	push	{r7}
 800a82e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a830:	bf00      	nop
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a83a:	b480      	push	{r7}
 800a83c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a83e:	bf00      	nop
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a84c:	f7f7 fae0 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  app_1ms();
 800a850:	f7f7 f8de 	bl	8001a10 <app_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 800a854:	bf00      	nop
 800a856:	bd80      	pop	{r7, pc}

0800a858 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800a85c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a860:	f7f7 fda6 	bl	80023b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800a864:	bf00      	nop
 800a866:	bd80      	pop	{r7, pc}

0800a868 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a86c:	4803      	ldr	r0, [pc, #12]	; (800a87c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800a86e:	f7fa f9a0 	bl	8004bb2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800a872:	4803      	ldr	r0, [pc, #12]	; (800a880 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800a874:	f7fa f99d 	bl	8004bb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800a878:	bf00      	nop
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	20002590 	.word	0x20002590
 800a880:	200024d0 	.word	0x200024d0

0800a884 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a888:	4802      	ldr	r0, [pc, #8]	; (800a894 <TIM1_TRG_COM_IRQHandler+0x10>)
 800a88a:	f7fa f992 	bl	8004bb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800a88e:	bf00      	nop
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	20002590 	.word	0x20002590

0800a898 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a89c:	4802      	ldr	r0, [pc, #8]	; (800a8a8 <TIM1_CC_IRQHandler+0x10>)
 800a89e:	f7fa f988 	bl	8004bb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800a8a2:	bf00      	nop
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20002590 	.word	0x20002590

0800a8ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a8b0:	4802      	ldr	r0, [pc, #8]	; (800a8bc <TIM2_IRQHandler+0x10>)
 800a8b2:	f7fa f97e 	bl	8004bb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a8b6:	bf00      	nop
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	200025d0 	.word	0x200025d0

0800a8c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a8c4:	4802      	ldr	r0, [pc, #8]	; (800a8d0 <TIM3_IRQHandler+0x10>)
 800a8c6:	f7fa f974 	bl	8004bb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a8ca:	bf00      	nop
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	20002510 	.word	0x20002510

0800a8d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a8d8:	4802      	ldr	r0, [pc, #8]	; (800a8e4 <TIM6_DAC_IRQHandler+0x10>)
 800a8da:	f7fa f96a 	bl	8004bb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a8de:	bf00      	nop
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20002550 	.word	0x20002550

0800a8e8 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800a8ec:	4802      	ldr	r0, [pc, #8]	; (800a8f8 <LPTIM1_IRQHandler+0x10>)
 800a8ee:	f7f7 ff27 	bl	8002740 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800a8f2:	bf00      	nop
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	20002498 	.word	0x20002498

0800a8fc <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 800a900:	4802      	ldr	r0, [pc, #8]	; (800a90c <LPTIM2_IRQHandler+0x10>)
 800a902:	f7f7 ff1d 	bl	8002740 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 800a906:	bf00      	nop
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	20002460 	.word	0x20002460

0800a910 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800a914:	4802      	ldr	r0, [pc, #8]	; (800a920 <USB_IRQHandler+0x10>)
 800a916:	f7f8 f8ef 	bl	8002af8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800a91a:	bf00      	nop
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	20003a54 	.word	0x20003a54

0800a924 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800a924:	b480      	push	{r7}
 800a926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a928:	4a17      	ldr	r2, [pc, #92]	; (800a988 <SystemInit+0x64>)
 800a92a:	4b17      	ldr	r3, [pc, #92]	; (800a988 <SystemInit+0x64>)
 800a92c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800a938:	4a14      	ldr	r2, [pc, #80]	; (800a98c <SystemInit+0x68>)
 800a93a:	4b14      	ldr	r3, [pc, #80]	; (800a98c <SystemInit+0x68>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f043 0301 	orr.w	r3, r3, #1
 800a942:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800a944:	4b11      	ldr	r3, [pc, #68]	; (800a98c <SystemInit+0x68>)
 800a946:	2200      	movs	r2, #0
 800a948:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800a94a:	4a10      	ldr	r2, [pc, #64]	; (800a98c <SystemInit+0x68>)
 800a94c:	4b0f      	ldr	r3, [pc, #60]	; (800a98c <SystemInit+0x68>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800a954:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800a958:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800a95a:	4b0c      	ldr	r3, [pc, #48]	; (800a98c <SystemInit+0x68>)
 800a95c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a960:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a962:	4a0a      	ldr	r2, [pc, #40]	; (800a98c <SystemInit+0x68>)
 800a964:	4b09      	ldr	r3, [pc, #36]	; (800a98c <SystemInit+0x68>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a96c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800a96e:	4b07      	ldr	r3, [pc, #28]	; (800a98c <SystemInit+0x68>)
 800a970:	2200      	movs	r2, #0
 800a972:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a974:	4b04      	ldr	r3, [pc, #16]	; (800a988 <SystemInit+0x64>)
 800a976:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a97a:	609a      	str	r2, [r3, #8]
#endif
}
 800a97c:	bf00      	nop
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	e000ed00 	.word	0xe000ed00
 800a98c:	40021000 	.word	0x40021000

0800a990 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b096      	sub	sp, #88	; 0x58
 800a994:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a996:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a99a:	2200      	movs	r2, #0
 800a99c:	601a      	str	r2, [r3, #0]
 800a99e:	605a      	str	r2, [r3, #4]
 800a9a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a9a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	601a      	str	r2, [r3, #0]
 800a9aa:	605a      	str	r2, [r3, #4]
 800a9ac:	609a      	str	r2, [r3, #8]
 800a9ae:	60da      	str	r2, [r3, #12]
 800a9b0:	611a      	str	r2, [r3, #16]
 800a9b2:	615a      	str	r2, [r3, #20]
 800a9b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a9b6:	1d3b      	adds	r3, r7, #4
 800a9b8:	222c      	movs	r2, #44	; 0x2c
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f001 fb16 	bl	800bfee <memset>

  htim1.Instance = TIM1;
 800a9c2:	4b38      	ldr	r3, [pc, #224]	; (800aaa4 <MX_TIM1_Init+0x114>)
 800a9c4:	4a38      	ldr	r2, [pc, #224]	; (800aaa8 <MX_TIM1_Init+0x118>)
 800a9c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a9c8:	4b36      	ldr	r3, [pc, #216]	; (800aaa4 <MX_TIM1_Init+0x114>)
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a9ce:	4b35      	ldr	r3, [pc, #212]	; (800aaa4 <MX_TIM1_Init+0x114>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800a9d4:	4b33      	ldr	r3, [pc, #204]	; (800aaa4 <MX_TIM1_Init+0x114>)
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a9da:	4b32      	ldr	r3, [pc, #200]	; (800aaa4 <MX_TIM1_Init+0x114>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a9e0:	4b30      	ldr	r3, [pc, #192]	; (800aaa4 <MX_TIM1_Init+0x114>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a9e6:	4b2f      	ldr	r3, [pc, #188]	; (800aaa4 <MX_TIM1_Init+0x114>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a9ec:	482d      	ldr	r0, [pc, #180]	; (800aaa4 <MX_TIM1_Init+0x114>)
 800a9ee:	f7fa f88a 	bl	8004b06 <HAL_TIM_PWM_Init>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800a9f8:	f7ff fed2 	bl	800a7a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800aa00:	2300      	movs	r3, #0
 800aa02:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aa04:	2300      	movs	r3, #0
 800aa06:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800aa08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	4825      	ldr	r0, [pc, #148]	; (800aaa4 <MX_TIM1_Init+0x114>)
 800aa10:	f7fb f92e 	bl	8005c70 <HAL_TIMEx_MasterConfigSynchronization>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d001      	beq.n	800aa1e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800aa1a:	f7ff fec1 	bl	800a7a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800aa1e:	2360      	movs	r3, #96	; 0x60
 800aa20:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800aa22:	2300      	movs	r3, #0
 800aa24:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800aa26:	2300      	movs	r3, #0
 800aa28:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800aa32:	2300      	movs	r3, #0
 800aa34:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800aa36:	2300      	movs	r3, #0
 800aa38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800aa3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa3e:	2200      	movs	r2, #0
 800aa40:	4619      	mov	r1, r3
 800aa42:	4818      	ldr	r0, [pc, #96]	; (800aaa4 <MX_TIM1_Init+0x114>)
 800aa44:	f7fa fa70 	bl	8004f28 <HAL_TIM_PWM_ConfigChannel>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d001      	beq.n	800aa52 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800aa4e:	f7ff fea7 	bl	800a7a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800aa52:	2300      	movs	r3, #0
 800aa54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800aa56:	2300      	movs	r3, #0
 800aa58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800aa62:	2300      	movs	r3, #0
 800aa64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800aa66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800aa70:	2300      	movs	r3, #0
 800aa72:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800aa74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aa78:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800aa82:	1d3b      	adds	r3, r7, #4
 800aa84:	4619      	mov	r1, r3
 800aa86:	4807      	ldr	r0, [pc, #28]	; (800aaa4 <MX_TIM1_Init+0x114>)
 800aa88:	f7fb f948 	bl	8005d1c <HAL_TIMEx_ConfigBreakDeadTime>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800aa92:	f7ff fe85 	bl	800a7a0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800aa96:	4803      	ldr	r0, [pc, #12]	; (800aaa4 <MX_TIM1_Init+0x114>)
 800aa98:	f000 faf0 	bl	800b07c <HAL_TIM_MspPostInit>

}
 800aa9c:	bf00      	nop
 800aa9e:	3758      	adds	r7, #88	; 0x58
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	20002590 	.word	0x20002590
 800aaa8:	40012c00 	.word	0x40012c00

0800aaac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b088      	sub	sp, #32
 800aab0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aab2:	f107 0314 	add.w	r3, r7, #20
 800aab6:	2200      	movs	r2, #0
 800aab8:	601a      	str	r2, [r3, #0]
 800aaba:	605a      	str	r2, [r3, #4]
 800aabc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800aabe:	1d3b      	adds	r3, r7, #4
 800aac0:	2200      	movs	r2, #0
 800aac2:	601a      	str	r2, [r3, #0]
 800aac4:	605a      	str	r2, [r3, #4]
 800aac6:	609a      	str	r2, [r3, #8]
 800aac8:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800aaca:	4b27      	ldr	r3, [pc, #156]	; (800ab68 <MX_TIM2_Init+0xbc>)
 800aacc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800aad0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800aad2:	4b25      	ldr	r3, [pc, #148]	; (800ab68 <MX_TIM2_Init+0xbc>)
 800aad4:	2200      	movs	r2, #0
 800aad6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aad8:	4b23      	ldr	r3, [pc, #140]	; (800ab68 <MX_TIM2_Init+0xbc>)
 800aada:	2200      	movs	r2, #0
 800aadc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800aade:	4b22      	ldr	r3, [pc, #136]	; (800ab68 <MX_TIM2_Init+0xbc>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aae4:	4b20      	ldr	r3, [pc, #128]	; (800ab68 <MX_TIM2_Init+0xbc>)
 800aae6:	2200      	movs	r2, #0
 800aae8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aaea:	4b1f      	ldr	r3, [pc, #124]	; (800ab68 <MX_TIM2_Init+0xbc>)
 800aaec:	2200      	movs	r2, #0
 800aaee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800aaf0:	481d      	ldr	r0, [pc, #116]	; (800ab68 <MX_TIM2_Init+0xbc>)
 800aaf2:	f7fa f833 	bl	8004b5c <HAL_TIM_IC_Init>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d001      	beq.n	800ab00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800aafc:	f7ff fe50 	bl	800a7a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ab00:	2300      	movs	r3, #0
 800ab02:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ab04:	2300      	movs	r3, #0
 800ab06:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ab08:	f107 0314 	add.w	r3, r7, #20
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	4816      	ldr	r0, [pc, #88]	; (800ab68 <MX_TIM2_Init+0xbc>)
 800ab10:	f7fb f8ae 	bl	8005c70 <HAL_TIMEx_MasterConfigSynchronization>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d001      	beq.n	800ab1e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800ab1a:	f7ff fe41 	bl	800a7a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ab22:	2301      	movs	r3, #1
 800ab24:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ab26:	2300      	movs	r3, #0
 800ab28:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ab2e:	1d3b      	adds	r3, r7, #4
 800ab30:	2200      	movs	r2, #0
 800ab32:	4619      	mov	r1, r3
 800ab34:	480c      	ldr	r0, [pc, #48]	; (800ab68 <MX_TIM2_Init+0xbc>)
 800ab36:	f7fa f95b 	bl	8004df0 <HAL_TIM_IC_ConfigChannel>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800ab40:	f7ff fe2e 	bl	800a7a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800ab44:	2302      	movs	r3, #2
 800ab46:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800ab48:	1d3b      	adds	r3, r7, #4
 800ab4a:	2204      	movs	r2, #4
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	4806      	ldr	r0, [pc, #24]	; (800ab68 <MX_TIM2_Init+0xbc>)
 800ab50:	f7fa f94e 	bl	8004df0 <HAL_TIM_IC_ConfigChannel>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d001      	beq.n	800ab5e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800ab5a:	f7ff fe21 	bl	800a7a0 <Error_Handler>
  }

}
 800ab5e:	bf00      	nop
 800ab60:	3720      	adds	r7, #32
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	200025d0 	.word	0x200025d0

0800ab6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b088      	sub	sp, #32
 800ab70:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ab72:	f107 0314 	add.w	r3, r7, #20
 800ab76:	2200      	movs	r2, #0
 800ab78:	601a      	str	r2, [r3, #0]
 800ab7a:	605a      	str	r2, [r3, #4]
 800ab7c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800ab7e:	1d3b      	adds	r3, r7, #4
 800ab80:	2200      	movs	r2, #0
 800ab82:	601a      	str	r2, [r3, #0]
 800ab84:	605a      	str	r2, [r3, #4]
 800ab86:	609a      	str	r2, [r3, #8]
 800ab88:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 800ab8a:	4b26      	ldr	r3, [pc, #152]	; (800ac24 <MX_TIM3_Init+0xb8>)
 800ab8c:	4a26      	ldr	r2, [pc, #152]	; (800ac28 <MX_TIM3_Init+0xbc>)
 800ab8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800ab90:	4b24      	ldr	r3, [pc, #144]	; (800ac24 <MX_TIM3_Init+0xb8>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab96:	4b23      	ldr	r3, [pc, #140]	; (800ac24 <MX_TIM3_Init+0xb8>)
 800ab98:	2200      	movs	r2, #0
 800ab9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800ab9c:	4b21      	ldr	r3, [pc, #132]	; (800ac24 <MX_TIM3_Init+0xb8>)
 800ab9e:	2200      	movs	r2, #0
 800aba0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aba2:	4b20      	ldr	r3, [pc, #128]	; (800ac24 <MX_TIM3_Init+0xb8>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aba8:	4b1e      	ldr	r3, [pc, #120]	; (800ac24 <MX_TIM3_Init+0xb8>)
 800abaa:	2200      	movs	r2, #0
 800abac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800abae:	481d      	ldr	r0, [pc, #116]	; (800ac24 <MX_TIM3_Init+0xb8>)
 800abb0:	f7f9 ffd4 	bl	8004b5c <HAL_TIM_IC_Init>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d001      	beq.n	800abbe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800abba:	f7ff fdf1 	bl	800a7a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800abbe:	2300      	movs	r3, #0
 800abc0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800abc2:	2300      	movs	r3, #0
 800abc4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800abc6:	f107 0314 	add.w	r3, r7, #20
 800abca:	4619      	mov	r1, r3
 800abcc:	4815      	ldr	r0, [pc, #84]	; (800ac24 <MX_TIM3_Init+0xb8>)
 800abce:	f7fb f84f 	bl	8005c70 <HAL_TIMEx_MasterConfigSynchronization>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800abd8:	f7ff fde2 	bl	800a7a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800abdc:	2300      	movs	r3, #0
 800abde:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800abe0:	2301      	movs	r3, #1
 800abe2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800abe4:	2300      	movs	r3, #0
 800abe6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800abe8:	2300      	movs	r3, #0
 800abea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800abec:	1d3b      	adds	r3, r7, #4
 800abee:	2200      	movs	r2, #0
 800abf0:	4619      	mov	r1, r3
 800abf2:	480c      	ldr	r0, [pc, #48]	; (800ac24 <MX_TIM3_Init+0xb8>)
 800abf4:	f7fa f8fc 	bl	8004df0 <HAL_TIM_IC_ConfigChannel>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d001      	beq.n	800ac02 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800abfe:	f7ff fdcf 	bl	800a7a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800ac02:	2302      	movs	r3, #2
 800ac04:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800ac06:	1d3b      	adds	r3, r7, #4
 800ac08:	2204      	movs	r2, #4
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	4805      	ldr	r0, [pc, #20]	; (800ac24 <MX_TIM3_Init+0xb8>)
 800ac0e:	f7fa f8ef 	bl	8004df0 <HAL_TIM_IC_ConfigChannel>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d001      	beq.n	800ac1c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800ac18:	f7ff fdc2 	bl	800a7a0 <Error_Handler>
  }

}
 800ac1c:	bf00      	nop
 800ac1e:	3720      	adds	r7, #32
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	20002510 	.word	0x20002510
 800ac28:	40000400 	.word	0x40000400

0800ac2c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ac32:	1d3b      	adds	r3, r7, #4
 800ac34:	2200      	movs	r2, #0
 800ac36:	601a      	str	r2, [r3, #0]
 800ac38:	605a      	str	r2, [r3, #4]
 800ac3a:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 800ac3c:	4b14      	ldr	r3, [pc, #80]	; (800ac90 <MX_TIM6_Init+0x64>)
 800ac3e:	4a15      	ldr	r2, [pc, #84]	; (800ac94 <MX_TIM6_Init+0x68>)
 800ac40:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80;
 800ac42:	4b13      	ldr	r3, [pc, #76]	; (800ac90 <MX_TIM6_Init+0x64>)
 800ac44:	2250      	movs	r2, #80	; 0x50
 800ac46:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac48:	4b11      	ldr	r3, [pc, #68]	; (800ac90 <MX_TIM6_Init+0x64>)
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 92;
 800ac4e:	4b10      	ldr	r3, [pc, #64]	; (800ac90 <MX_TIM6_Init+0x64>)
 800ac50:	225c      	movs	r2, #92	; 0x5c
 800ac52:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac54:	4b0e      	ldr	r3, [pc, #56]	; (800ac90 <MX_TIM6_Init+0x64>)
 800ac56:	2200      	movs	r2, #0
 800ac58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800ac5a:	480d      	ldr	r0, [pc, #52]	; (800ac90 <MX_TIM6_Init+0x64>)
 800ac5c:	f7f9 ff28 	bl	8004ab0 <HAL_TIM_Base_Init>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d001      	beq.n	800ac6a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800ac66:	f7ff fd9b 	bl	800a7a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800ac72:	1d3b      	adds	r3, r7, #4
 800ac74:	4619      	mov	r1, r3
 800ac76:	4806      	ldr	r0, [pc, #24]	; (800ac90 <MX_TIM6_Init+0x64>)
 800ac78:	f7fa fffa 	bl	8005c70 <HAL_TIMEx_MasterConfigSynchronization>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d001      	beq.n	800ac86 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800ac82:	f7ff fd8d 	bl	800a7a0 <Error_Handler>
  }

}
 800ac86:	bf00      	nop
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	20002550 	.word	0x20002550
 800ac94:	40001000 	.word	0x40001000

0800ac98 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b09a      	sub	sp, #104	; 0x68
 800ac9c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ac9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aca2:	2200      	movs	r2, #0
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	605a      	str	r2, [r3, #4]
 800aca8:	609a      	str	r2, [r3, #8]
 800acaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800acac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800acb0:	2200      	movs	r2, #0
 800acb2:	601a      	str	r2, [r3, #0]
 800acb4:	605a      	str	r2, [r3, #4]
 800acb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800acb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800acbc:	2200      	movs	r2, #0
 800acbe:	601a      	str	r2, [r3, #0]
 800acc0:	605a      	str	r2, [r3, #4]
 800acc2:	609a      	str	r2, [r3, #8]
 800acc4:	60da      	str	r2, [r3, #12]
 800acc6:	611a      	str	r2, [r3, #16]
 800acc8:	615a      	str	r2, [r3, #20]
 800acca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800accc:	1d3b      	adds	r3, r7, #4
 800acce:	222c      	movs	r2, #44	; 0x2c
 800acd0:	2100      	movs	r1, #0
 800acd2:	4618      	mov	r0, r3
 800acd4:	f001 f98b 	bl	800bfee <memset>

  htim15.Instance = TIM15;
 800acd8:	4b44      	ldr	r3, [pc, #272]	; (800adec <MX_TIM15_Init+0x154>)
 800acda:	4a45      	ldr	r2, [pc, #276]	; (800adf0 <MX_TIM15_Init+0x158>)
 800acdc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80;
 800acde:	4b43      	ldr	r3, [pc, #268]	; (800adec <MX_TIM15_Init+0x154>)
 800ace0:	2250      	movs	r2, #80	; 0x50
 800ace2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ace4:	4b41      	ldr	r3, [pc, #260]	; (800adec <MX_TIM15_Init+0x154>)
 800ace6:	2200      	movs	r2, #0
 800ace8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 0;
 800acea:	4b40      	ldr	r3, [pc, #256]	; (800adec <MX_TIM15_Init+0x154>)
 800acec:	2200      	movs	r2, #0
 800acee:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800acf0:	4b3e      	ldr	r3, [pc, #248]	; (800adec <MX_TIM15_Init+0x154>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800acf6:	4b3d      	ldr	r3, [pc, #244]	; (800adec <MX_TIM15_Init+0x154>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800acfc:	4b3b      	ldr	r3, [pc, #236]	; (800adec <MX_TIM15_Init+0x154>)
 800acfe:	2200      	movs	r2, #0
 800ad00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800ad02:	483a      	ldr	r0, [pc, #232]	; (800adec <MX_TIM15_Init+0x154>)
 800ad04:	f7f9 fed4 	bl	8004ab0 <HAL_TIM_Base_Init>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d001      	beq.n	800ad12 <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 800ad0e:	f7ff fd47 	bl	800a7a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ad12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad16:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800ad18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	4833      	ldr	r0, [pc, #204]	; (800adec <MX_TIM15_Init+0x154>)
 800ad20:	f7fa fa1a 	bl	8005158 <HAL_TIM_ConfigClockSource>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d001      	beq.n	800ad2e <MX_TIM15_Init+0x96>
  {
    Error_Handler();
 800ad2a:	f7ff fd39 	bl	800a7a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800ad2e:	482f      	ldr	r0, [pc, #188]	; (800adec <MX_TIM15_Init+0x154>)
 800ad30:	f7f9 fee9 	bl	8004b06 <HAL_TIM_PWM_Init>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d001      	beq.n	800ad3e <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 800ad3a:	f7ff fd31 	bl	800a7a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ad42:	2300      	movs	r3, #0
 800ad44:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800ad46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	4827      	ldr	r0, [pc, #156]	; (800adec <MX_TIM15_Init+0x154>)
 800ad4e:	f7fa ff8f 	bl	8005c70 <HAL_TIMEx_MasterConfigSynchronization>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d001      	beq.n	800ad5c <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 800ad58:	f7ff fd22 	bl	800a7a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ad5c:	2360      	movs	r3, #96	; 0x60
 800ad5e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ad64:	2300      	movs	r3, #0
 800ad66:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ad70:	2300      	movs	r3, #0
 800ad72:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800ad74:	2300      	movs	r3, #0
 800ad76:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ad78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	4619      	mov	r1, r3
 800ad80:	481a      	ldr	r0, [pc, #104]	; (800adec <MX_TIM15_Init+0x154>)
 800ad82:	f7fa f8d1 	bl	8004f28 <HAL_TIM_PWM_ConfigChannel>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d001      	beq.n	800ad90 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 800ad8c:	f7ff fd08 	bl	800a7a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ad90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad94:	2204      	movs	r2, #4
 800ad96:	4619      	mov	r1, r3
 800ad98:	4814      	ldr	r0, [pc, #80]	; (800adec <MX_TIM15_Init+0x154>)
 800ad9a:	f7fa f8c5 	bl	8004f28 <HAL_TIM_PWM_ConfigChannel>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d001      	beq.n	800ada8 <MX_TIM15_Init+0x110>
  {
    Error_Handler();
 800ada4:	f7ff fcfc 	bl	800a7a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800ada8:	2300      	movs	r3, #0
 800adaa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800adac:	2300      	movs	r3, #0
 800adae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800adb0:	2300      	movs	r3, #0
 800adb2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800adb4:	2300      	movs	r3, #0
 800adb6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800adb8:	2300      	movs	r3, #0
 800adba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800adbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800adc0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800adc2:	2300      	movs	r3, #0
 800adc4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800adc6:	2300      	movs	r3, #0
 800adc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800adca:	1d3b      	adds	r3, r7, #4
 800adcc:	4619      	mov	r1, r3
 800adce:	4807      	ldr	r0, [pc, #28]	; (800adec <MX_TIM15_Init+0x154>)
 800add0:	f7fa ffa4 	bl	8005d1c <HAL_TIMEx_ConfigBreakDeadTime>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d001      	beq.n	800adde <MX_TIM15_Init+0x146>
  {
    Error_Handler();
 800adda:	f7ff fce1 	bl	800a7a0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim15);
 800adde:	4803      	ldr	r0, [pc, #12]	; (800adec <MX_TIM15_Init+0x154>)
 800ade0:	f000 f94c 	bl	800b07c <HAL_TIM_MspPostInit>

}
 800ade4:	bf00      	nop
 800ade6:	3768      	adds	r7, #104	; 0x68
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	200024d0 	.word	0x200024d0
 800adf0:	40014000 	.word	0x40014000

0800adf4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800adf8:	4b0f      	ldr	r3, [pc, #60]	; (800ae38 <MX_TIM16_Init+0x44>)
 800adfa:	4a10      	ldr	r2, [pc, #64]	; (800ae3c <MX_TIM16_Init+0x48>)
 800adfc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800adfe:	4b0e      	ldr	r3, [pc, #56]	; (800ae38 <MX_TIM16_Init+0x44>)
 800ae00:	2200      	movs	r2, #0
 800ae02:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ae04:	4b0c      	ldr	r3, [pc, #48]	; (800ae38 <MX_TIM16_Init+0x44>)
 800ae06:	2200      	movs	r2, #0
 800ae08:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 800ae0a:	4b0b      	ldr	r3, [pc, #44]	; (800ae38 <MX_TIM16_Init+0x44>)
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ae10:	4b09      	ldr	r3, [pc, #36]	; (800ae38 <MX_TIM16_Init+0x44>)
 800ae12:	2200      	movs	r2, #0
 800ae14:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800ae16:	4b08      	ldr	r3, [pc, #32]	; (800ae38 <MX_TIM16_Init+0x44>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ae1c:	4b06      	ldr	r3, [pc, #24]	; (800ae38 <MX_TIM16_Init+0x44>)
 800ae1e:	2200      	movs	r2, #0
 800ae20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800ae22:	4805      	ldr	r0, [pc, #20]	; (800ae38 <MX_TIM16_Init+0x44>)
 800ae24:	f7f9 fe44 	bl	8004ab0 <HAL_TIM_Base_Init>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d001      	beq.n	800ae32 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800ae2e:	f7ff fcb7 	bl	800a7a0 <Error_Handler>
  }

}
 800ae32:	bf00      	nop
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	20002610 	.word	0x20002610
 800ae3c:	40014400 	.word	0x40014400

0800ae40 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a19      	ldr	r2, [pc, #100]	; (800aeb4 <HAL_TIM_PWM_MspInit+0x74>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d12b      	bne.n	800aeaa <HAL_TIM_PWM_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800ae52:	4a19      	ldr	r2, [pc, #100]	; (800aeb8 <HAL_TIM_PWM_MspInit+0x78>)
 800ae54:	4b18      	ldr	r3, [pc, #96]	; (800aeb8 <HAL_TIM_PWM_MspInit+0x78>)
 800ae56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ae5c:	6613      	str	r3, [r2, #96]	; 0x60
 800ae5e:	4b16      	ldr	r3, [pc, #88]	; (800aeb8 <HAL_TIM_PWM_MspInit+0x78>)
 800ae60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae66:	60fb      	str	r3, [r7, #12]
 800ae68:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	2018      	movs	r0, #24
 800ae70:	f7f7 f8bd 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800ae74:	2018      	movs	r0, #24
 800ae76:	f7f7 f8d6 	bl	8002026 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	2019      	movs	r0, #25
 800ae80:	f7f7 f8b5 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800ae84:	2019      	movs	r0, #25
 800ae86:	f7f7 f8ce 	bl	8002026 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	201a      	movs	r0, #26
 800ae90:	f7f7 f8ad 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800ae94:	201a      	movs	r0, #26
 800ae96:	f7f7 f8c6 	bl	8002026 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	201b      	movs	r0, #27
 800aea0:	f7f7 f8a5 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800aea4:	201b      	movs	r0, #27
 800aea6:	f7f7 f8be 	bl	8002026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800aeaa:	bf00      	nop
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	40012c00 	.word	0x40012c00
 800aeb8:	40021000 	.word	0x40021000

0800aebc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b08c      	sub	sp, #48	; 0x30
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aec4:	f107 031c 	add.w	r3, r7, #28
 800aec8:	2200      	movs	r2, #0
 800aeca:	601a      	str	r2, [r3, #0]
 800aecc:	605a      	str	r2, [r3, #4]
 800aece:	609a      	str	r2, [r3, #8]
 800aed0:	60da      	str	r2, [r3, #12]
 800aed2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aedc:	d131      	bne.n	800af42 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800aede:	4a35      	ldr	r2, [pc, #212]	; (800afb4 <HAL_TIM_IC_MspInit+0xf8>)
 800aee0:	4b34      	ldr	r3, [pc, #208]	; (800afb4 <HAL_TIM_IC_MspInit+0xf8>)
 800aee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aee4:	f043 0301 	orr.w	r3, r3, #1
 800aee8:	6593      	str	r3, [r2, #88]	; 0x58
 800aeea:	4b32      	ldr	r3, [pc, #200]	; (800afb4 <HAL_TIM_IC_MspInit+0xf8>)
 800aeec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeee:	f003 0301 	and.w	r3, r3, #1
 800aef2:	61bb      	str	r3, [r7, #24]
 800aef4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aef6:	4a2f      	ldr	r2, [pc, #188]	; (800afb4 <HAL_TIM_IC_MspInit+0xf8>)
 800aef8:	4b2e      	ldr	r3, [pc, #184]	; (800afb4 <HAL_TIM_IC_MspInit+0xf8>)
 800aefa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aefc:	f043 0301 	orr.w	r3, r3, #1
 800af00:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af02:	4b2c      	ldr	r3, [pc, #176]	; (800afb4 <HAL_TIM_IC_MspInit+0xf8>)
 800af04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	617b      	str	r3, [r7, #20]
 800af0c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800af0e:	2303      	movs	r3, #3
 800af10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af12:	2302      	movs	r3, #2
 800af14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af16:	2300      	movs	r3, #0
 800af18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af1a:	2300      	movs	r3, #0
 800af1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800af1e:	2301      	movs	r3, #1
 800af20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af22:	f107 031c 	add.w	r3, r7, #28
 800af26:	4619      	mov	r1, r3
 800af28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af2c:	f7f7 f896 	bl	800205c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800af30:	2200      	movs	r2, #0
 800af32:	2100      	movs	r1, #0
 800af34:	201c      	movs	r0, #28
 800af36:	f7f7 f85a 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800af3a:	201c      	movs	r0, #28
 800af3c:	f7f7 f873 	bl	8002026 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800af40:	e034      	b.n	800afac <HAL_TIM_IC_MspInit+0xf0>
  else if(tim_icHandle->Instance==TIM3)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a1c      	ldr	r2, [pc, #112]	; (800afb8 <HAL_TIM_IC_MspInit+0xfc>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d12f      	bne.n	800afac <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800af4c:	4a19      	ldr	r2, [pc, #100]	; (800afb4 <HAL_TIM_IC_MspInit+0xf8>)
 800af4e:	4b19      	ldr	r3, [pc, #100]	; (800afb4 <HAL_TIM_IC_MspInit+0xf8>)
 800af50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af52:	f043 0302 	orr.w	r3, r3, #2
 800af56:	6593      	str	r3, [r2, #88]	; 0x58
 800af58:	4b16      	ldr	r3, [pc, #88]	; (800afb4 <HAL_TIM_IC_MspInit+0xf8>)
 800af5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af5c:	f003 0302 	and.w	r3, r3, #2
 800af60:	613b      	str	r3, [r7, #16]
 800af62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af64:	4a13      	ldr	r2, [pc, #76]	; (800afb4 <HAL_TIM_IC_MspInit+0xf8>)
 800af66:	4b13      	ldr	r3, [pc, #76]	; (800afb4 <HAL_TIM_IC_MspInit+0xf8>)
 800af68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af6a:	f043 0302 	orr.w	r3, r3, #2
 800af6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af70:	4b10      	ldr	r3, [pc, #64]	; (800afb4 <HAL_TIM_IC_MspInit+0xf8>)
 800af72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af74:	f003 0302 	and.w	r3, r3, #2
 800af78:	60fb      	str	r3, [r7, #12]
 800af7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800af7c:	2330      	movs	r3, #48	; 0x30
 800af7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af80:	2302      	movs	r3, #2
 800af82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af84:	2300      	movs	r3, #0
 800af86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af88:	2300      	movs	r3, #0
 800af8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800af8c:	2302      	movs	r3, #2
 800af8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af90:	f107 031c 	add.w	r3, r7, #28
 800af94:	4619      	mov	r1, r3
 800af96:	4809      	ldr	r0, [pc, #36]	; (800afbc <HAL_TIM_IC_MspInit+0x100>)
 800af98:	f7f7 f860 	bl	800205c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800af9c:	2200      	movs	r2, #0
 800af9e:	2100      	movs	r1, #0
 800afa0:	201d      	movs	r0, #29
 800afa2:	f7f7 f824 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800afa6:	201d      	movs	r0, #29
 800afa8:	f7f7 f83d 	bl	8002026 <HAL_NVIC_EnableIRQ>
}
 800afac:	bf00      	nop
 800afae:	3730      	adds	r7, #48	; 0x30
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	40021000 	.word	0x40021000
 800afb8:	40000400 	.word	0x40000400
 800afbc:	48000400 	.word	0x48000400

0800afc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a27      	ldr	r2, [pc, #156]	; (800b06c <HAL_TIM_Base_MspInit+0xac>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d114      	bne.n	800affc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800afd2:	4a27      	ldr	r2, [pc, #156]	; (800b070 <HAL_TIM_Base_MspInit+0xb0>)
 800afd4:	4b26      	ldr	r3, [pc, #152]	; (800b070 <HAL_TIM_Base_MspInit+0xb0>)
 800afd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afd8:	f043 0310 	orr.w	r3, r3, #16
 800afdc:	6593      	str	r3, [r2, #88]	; 0x58
 800afde:	4b24      	ldr	r3, [pc, #144]	; (800b070 <HAL_TIM_Base_MspInit+0xb0>)
 800afe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afe2:	f003 0310 	and.w	r3, r3, #16
 800afe6:	617b      	str	r3, [r7, #20]
 800afe8:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800afea:	2200      	movs	r2, #0
 800afec:	2100      	movs	r1, #0
 800afee:	2036      	movs	r0, #54	; 0x36
 800aff0:	f7f6 fffd 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800aff4:	2036      	movs	r0, #54	; 0x36
 800aff6:	f7f7 f816 	bl	8002026 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800affa:	e032      	b.n	800b062 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM15)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a1c      	ldr	r2, [pc, #112]	; (800b074 <HAL_TIM_Base_MspInit+0xb4>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d114      	bne.n	800b030 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800b006:	4a1a      	ldr	r2, [pc, #104]	; (800b070 <HAL_TIM_Base_MspInit+0xb0>)
 800b008:	4b19      	ldr	r3, [pc, #100]	; (800b070 <HAL_TIM_Base_MspInit+0xb0>)
 800b00a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b00c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b010:	6613      	str	r3, [r2, #96]	; 0x60
 800b012:	4b17      	ldr	r3, [pc, #92]	; (800b070 <HAL_TIM_Base_MspInit+0xb0>)
 800b014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b01a:	613b      	str	r3, [r7, #16]
 800b01c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800b01e:	2200      	movs	r2, #0
 800b020:	2100      	movs	r1, #0
 800b022:	2018      	movs	r0, #24
 800b024:	f7f6 ffe3 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800b028:	2018      	movs	r0, #24
 800b02a:	f7f6 fffc 	bl	8002026 <HAL_NVIC_EnableIRQ>
}
 800b02e:	e018      	b.n	800b062 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM16)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a10      	ldr	r2, [pc, #64]	; (800b078 <HAL_TIM_Base_MspInit+0xb8>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d113      	bne.n	800b062 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800b03a:	4a0d      	ldr	r2, [pc, #52]	; (800b070 <HAL_TIM_Base_MspInit+0xb0>)
 800b03c:	4b0c      	ldr	r3, [pc, #48]	; (800b070 <HAL_TIM_Base_MspInit+0xb0>)
 800b03e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b044:	6613      	str	r3, [r2, #96]	; 0x60
 800b046:	4b0a      	ldr	r3, [pc, #40]	; (800b070 <HAL_TIM_Base_MspInit+0xb0>)
 800b048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b04a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b04e:	60fb      	str	r3, [r7, #12]
 800b050:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800b052:	2200      	movs	r2, #0
 800b054:	2100      	movs	r1, #0
 800b056:	2019      	movs	r0, #25
 800b058:	f7f6 ffc9 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800b05c:	2019      	movs	r0, #25
 800b05e:	f7f6 ffe2 	bl	8002026 <HAL_NVIC_EnableIRQ>
}
 800b062:	bf00      	nop
 800b064:	3718      	adds	r7, #24
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	40001000 	.word	0x40001000
 800b070:	40021000 	.word	0x40021000
 800b074:	40014000 	.word	0x40014000
 800b078:	40014400 	.word	0x40014400

0800b07c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b08a      	sub	sp, #40	; 0x28
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b084:	f107 0314 	add.w	r3, r7, #20
 800b088:	2200      	movs	r2, #0
 800b08a:	601a      	str	r2, [r3, #0]
 800b08c:	605a      	str	r2, [r3, #4]
 800b08e:	609a      	str	r2, [r3, #8]
 800b090:	60da      	str	r2, [r3, #12]
 800b092:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a23      	ldr	r2, [pc, #140]	; (800b128 <HAL_TIM_MspPostInit+0xac>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d11e      	bne.n	800b0dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b09e:	4a23      	ldr	r2, [pc, #140]	; (800b12c <HAL_TIM_MspPostInit+0xb0>)
 800b0a0:	4b22      	ldr	r3, [pc, #136]	; (800b12c <HAL_TIM_MspPostInit+0xb0>)
 800b0a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0a4:	f043 0301 	orr.w	r3, r3, #1
 800b0a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b0aa:	4b20      	ldr	r3, [pc, #128]	; (800b12c <HAL_TIM_MspPostInit+0xb0>)
 800b0ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	613b      	str	r3, [r7, #16]
 800b0b4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = O_PWM_LED3_Pin;
 800b0b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0bc:	2302      	movs	r3, #2
 800b0be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(O_PWM_LED3_GPIO_Port, &GPIO_InitStruct);
 800b0cc:	f107 0314 	add.w	r3, r7, #20
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b0d6:	f7f6 ffc1 	bl	800205c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800b0da:	e021      	b.n	800b120 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM15)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a13      	ldr	r2, [pc, #76]	; (800b130 <HAL_TIM_MspPostInit+0xb4>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d11c      	bne.n	800b120 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b0e6:	4a11      	ldr	r2, [pc, #68]	; (800b12c <HAL_TIM_MspPostInit+0xb0>)
 800b0e8:	4b10      	ldr	r3, [pc, #64]	; (800b12c <HAL_TIM_MspPostInit+0xb0>)
 800b0ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0ec:	f043 0302 	orr.w	r3, r3, #2
 800b0f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b0f2:	4b0e      	ldr	r3, [pc, #56]	; (800b12c <HAL_TIM_MspPostInit+0xb0>)
 800b0f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0f6:	f003 0302 	and.w	r3, r3, #2
 800b0fa:	60fb      	str	r3, [r7, #12]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = O_PWM_LED2_Pin|O_PWM_LED1_Pin;
 800b0fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800b102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b104:	2302      	movs	r3, #2
 800b106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b108:	2300      	movs	r3, #0
 800b10a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b10c:	2300      	movs	r3, #0
 800b10e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800b110:	230e      	movs	r3, #14
 800b112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b114:	f107 0314 	add.w	r3, r7, #20
 800b118:	4619      	mov	r1, r3
 800b11a:	4806      	ldr	r0, [pc, #24]	; (800b134 <HAL_TIM_MspPostInit+0xb8>)
 800b11c:	f7f6 ff9e 	bl	800205c <HAL_GPIO_Init>
}
 800b120:	bf00      	nop
 800b122:	3728      	adds	r7, #40	; 0x28
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	40012c00 	.word	0x40012c00
 800b12c:	40021000 	.word	0x40021000
 800b130:	40014000 	.word	0x40014000
 800b134:	48000400 	.word	0x48000400

0800b138 <tim_setNewTimeAndStart>:
  /* USER CODE END TIM16_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void tim_setNewTimeAndStart(TIM_TypeDef *tim, uint32_t time){
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
	tim->CR1 &= ~TIM_CR1_CEN;	//Stop counter
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f023 0201 	bic.w	r2, r3, #1
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	601a      	str	r2, [r3, #0]
	tim->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f043 0202 	orr.w	r2, r3, #2
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	601a      	str	r2, [r3, #0]
	tim->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	f023 0201 	bic.w	r2, r3, #1
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	611a      	str	r2, [r3, #16]
	tim->ARR = time;				//Load new time
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	683a      	ldr	r2, [r7, #0]
 800b16a:	62da      	str	r2, [r3, #44]	; 0x2c
	tim->EGR |= TIM_EGR_UG;		//Force reload of shadow register -> Start from beginning
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	695b      	ldr	r3, [r3, #20]
 800b170:	f043 0201 	orr.w	r2, r3, #1
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	615a      	str	r2, [r3, #20]
	tim->CR1 &= ~TIM_CR1_UDIS;	//Allow new updates to be triggered
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f023 0202 	bic.w	r2, r3, #2
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	601a      	str	r2, [r3, #0]
	tim->DIER |= TIM_DIER_UIE;	//Enable update interrupts
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	f043 0201 	orr.w	r2, r3, #1
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	60da      	str	r2, [r3, #12]
	tim->CR1 |= TIM_CR1_CEN;		//Enable counter
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f043 0201 	orr.w	r2, r3, #1
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	601a      	str	r2, [r3, #0]
}
 800b19c:	bf00      	nop
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <tim_stop>:
void tim_stop(TIM_TypeDef *tim){
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
	tim->CR1 &= ~TIM_CR1_CEN;	//Stop counter
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f023 0201 	bic.w	r2, r3, #1
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	601a      	str	r2, [r3, #0]
	tim->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f043 0202 	orr.w	r2, r3, #2
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	601a      	str	r2, [r3, #0]
	tim->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	f023 0201 	bic.w	r2, r3, #1
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	611a      	str	r2, [r3, #16]
}
 800b1d4:	bf00      	nop
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b1e4:	4b14      	ldr	r3, [pc, #80]	; (800b238 <MX_UART4_Init+0x58>)
 800b1e6:	4a15      	ldr	r2, [pc, #84]	; (800b23c <MX_UART4_Init+0x5c>)
 800b1e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b1ea:	4b13      	ldr	r3, [pc, #76]	; (800b238 <MX_UART4_Init+0x58>)
 800b1ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b1f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b1f2:	4b11      	ldr	r3, [pc, #68]	; (800b238 <MX_UART4_Init+0x58>)
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b1f8:	4b0f      	ldr	r3, [pc, #60]	; (800b238 <MX_UART4_Init+0x58>)
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b1fe:	4b0e      	ldr	r3, [pc, #56]	; (800b238 <MX_UART4_Init+0x58>)
 800b200:	2200      	movs	r2, #0
 800b202:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b204:	4b0c      	ldr	r3, [pc, #48]	; (800b238 <MX_UART4_Init+0x58>)
 800b206:	220c      	movs	r2, #12
 800b208:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b20a:	4b0b      	ldr	r3, [pc, #44]	; (800b238 <MX_UART4_Init+0x58>)
 800b20c:	2200      	movs	r2, #0
 800b20e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b210:	4b09      	ldr	r3, [pc, #36]	; (800b238 <MX_UART4_Init+0x58>)
 800b212:	2200      	movs	r2, #0
 800b214:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b216:	4b08      	ldr	r3, [pc, #32]	; (800b238 <MX_UART4_Init+0x58>)
 800b218:	2200      	movs	r2, #0
 800b21a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b21c:	4b06      	ldr	r3, [pc, #24]	; (800b238 <MX_UART4_Init+0x58>)
 800b21e:	2200      	movs	r2, #0
 800b220:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b222:	4805      	ldr	r0, [pc, #20]	; (800b238 <MX_UART4_Init+0x58>)
 800b224:	f7fa fe10 	bl	8005e48 <HAL_UART_Init>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800b22e:	f7ff fab7 	bl	800a7a0 <Error_Handler>
  }

}
 800b232:	bf00      	nop
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	200026c8 	.word	0x200026c8
 800b23c:	40004c00 	.word	0x40004c00

0800b240 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800b244:	4b14      	ldr	r3, [pc, #80]	; (800b298 <MX_USART1_UART_Init+0x58>)
 800b246:	4a15      	ldr	r2, [pc, #84]	; (800b29c <MX_USART1_UART_Init+0x5c>)
 800b248:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 800b24a:	4b13      	ldr	r3, [pc, #76]	; (800b298 <MX_USART1_UART_Init+0x58>)
 800b24c:	4a14      	ldr	r2, [pc, #80]	; (800b2a0 <MX_USART1_UART_Init+0x60>)
 800b24e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b250:	4b11      	ldr	r3, [pc, #68]	; (800b298 <MX_USART1_UART_Init+0x58>)
 800b252:	2200      	movs	r2, #0
 800b254:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 800b256:	4b10      	ldr	r3, [pc, #64]	; (800b298 <MX_USART1_UART_Init+0x58>)
 800b258:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b25c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b25e:	4b0e      	ldr	r3, [pc, #56]	; (800b298 <MX_USART1_UART_Init+0x58>)
 800b260:	2200      	movs	r2, #0
 800b262:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b264:	4b0c      	ldr	r3, [pc, #48]	; (800b298 <MX_USART1_UART_Init+0x58>)
 800b266:	220c      	movs	r2, #12
 800b268:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b26a:	4b0b      	ldr	r3, [pc, #44]	; (800b298 <MX_USART1_UART_Init+0x58>)
 800b26c:	2200      	movs	r2, #0
 800b26e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b270:	4b09      	ldr	r3, [pc, #36]	; (800b298 <MX_USART1_UART_Init+0x58>)
 800b272:	2200      	movs	r2, #0
 800b274:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b276:	4b08      	ldr	r3, [pc, #32]	; (800b298 <MX_USART1_UART_Init+0x58>)
 800b278:	2200      	movs	r2, #0
 800b27a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b27c:	4b06      	ldr	r3, [pc, #24]	; (800b298 <MX_USART1_UART_Init+0x58>)
 800b27e:	2200      	movs	r2, #0
 800b280:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b282:	4805      	ldr	r0, [pc, #20]	; (800b298 <MX_USART1_UART_Init+0x58>)
 800b284:	f7fa fde0 	bl	8005e48 <HAL_UART_Init>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d001      	beq.n	800b292 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800b28e:	f7ff fa87 	bl	800a7a0 <Error_Handler>
  }

}
 800b292:	bf00      	nop
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	20002650 	.word	0x20002650
 800b29c:	40013800 	.word	0x40013800
 800b2a0:	0003d090 	.word	0x0003d090

0800b2a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800b2a8:	4b14      	ldr	r3, [pc, #80]	; (800b2fc <MX_USART2_UART_Init+0x58>)
 800b2aa:	4a15      	ldr	r2, [pc, #84]	; (800b300 <MX_USART2_UART_Init+0x5c>)
 800b2ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 800b2ae:	4b13      	ldr	r3, [pc, #76]	; (800b2fc <MX_USART2_UART_Init+0x58>)
 800b2b0:	4a14      	ldr	r2, [pc, #80]	; (800b304 <MX_USART2_UART_Init+0x60>)
 800b2b2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b2b4:	4b11      	ldr	r3, [pc, #68]	; (800b2fc <MX_USART2_UART_Init+0x58>)
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800b2ba:	4b10      	ldr	r3, [pc, #64]	; (800b2fc <MX_USART2_UART_Init+0x58>)
 800b2bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b2c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b2c2:	4b0e      	ldr	r3, [pc, #56]	; (800b2fc <MX_USART2_UART_Init+0x58>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b2c8:	4b0c      	ldr	r3, [pc, #48]	; (800b2fc <MX_USART2_UART_Init+0x58>)
 800b2ca:	220c      	movs	r2, #12
 800b2cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b2ce:	4b0b      	ldr	r3, [pc, #44]	; (800b2fc <MX_USART2_UART_Init+0x58>)
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b2d4:	4b09      	ldr	r3, [pc, #36]	; (800b2fc <MX_USART2_UART_Init+0x58>)
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b2da:	4b08      	ldr	r3, [pc, #32]	; (800b2fc <MX_USART2_UART_Init+0x58>)
 800b2dc:	2200      	movs	r2, #0
 800b2de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b2e0:	4b06      	ldr	r3, [pc, #24]	; (800b2fc <MX_USART2_UART_Init+0x58>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b2e6:	4805      	ldr	r0, [pc, #20]	; (800b2fc <MX_USART2_UART_Init+0x58>)
 800b2e8:	f7fa fdae 	bl	8005e48 <HAL_UART_Init>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d001      	beq.n	800b2f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800b2f2:	f7ff fa55 	bl	800a7a0 <Error_Handler>
  }

}
 800b2f6:	bf00      	nop
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	20002740 	.word	0x20002740
 800b300:	40004400 	.word	0x40004400
 800b304:	0003d090 	.word	0x0003d090

0800b308 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b08e      	sub	sp, #56	; 0x38
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b314:	2200      	movs	r2, #0
 800b316:	601a      	str	r2, [r3, #0]
 800b318:	605a      	str	r2, [r3, #4]
 800b31a:	609a      	str	r2, [r3, #8]
 800b31c:	60da      	str	r2, [r3, #12]
 800b31e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a52      	ldr	r2, [pc, #328]	; (800b470 <HAL_UART_MspInit+0x168>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d131      	bne.n	800b38e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b32a:	4a52      	ldr	r2, [pc, #328]	; (800b474 <HAL_UART_MspInit+0x16c>)
 800b32c:	4b51      	ldr	r3, [pc, #324]	; (800b474 <HAL_UART_MspInit+0x16c>)
 800b32e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b330:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b334:	6593      	str	r3, [r2, #88]	; 0x58
 800b336:	4b4f      	ldr	r3, [pc, #316]	; (800b474 <HAL_UART_MspInit+0x16c>)
 800b338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b33a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b33e:	623b      	str	r3, [r7, #32]
 800b340:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b342:	4a4c      	ldr	r2, [pc, #304]	; (800b474 <HAL_UART_MspInit+0x16c>)
 800b344:	4b4b      	ldr	r3, [pc, #300]	; (800b474 <HAL_UART_MspInit+0x16c>)
 800b346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b348:	f043 0304 	orr.w	r3, r3, #4
 800b34c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b34e:	4b49      	ldr	r3, [pc, #292]	; (800b474 <HAL_UART_MspInit+0x16c>)
 800b350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b352:	f003 0304 	and.w	r3, r3, #4
 800b356:	61fb      	str	r3, [r7, #28]
 800b358:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b35a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b35e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b360:	2302      	movs	r3, #2
 800b362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b364:	2300      	movs	r3, #0
 800b366:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b368:	2303      	movs	r3, #3
 800b36a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b36c:	2308      	movs	r3, #8
 800b36e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b374:	4619      	mov	r1, r3
 800b376:	4840      	ldr	r0, [pc, #256]	; (800b478 <HAL_UART_MspInit+0x170>)
 800b378:	f7f6 fe70 	bl	800205c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800b37c:	2200      	movs	r2, #0
 800b37e:	2100      	movs	r1, #0
 800b380:	2034      	movs	r0, #52	; 0x34
 800b382:	f7f6 fe34 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b386:	2034      	movs	r0, #52	; 0x34
 800b388:	f7f6 fe4d 	bl	8002026 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800b38c:	e06b      	b.n	800b466 <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART1)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4a3a      	ldr	r2, [pc, #232]	; (800b47c <HAL_UART_MspInit+0x174>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d130      	bne.n	800b3fa <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 800b398:	4a36      	ldr	r2, [pc, #216]	; (800b474 <HAL_UART_MspInit+0x16c>)
 800b39a:	4b36      	ldr	r3, [pc, #216]	; (800b474 <HAL_UART_MspInit+0x16c>)
 800b39c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b39e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b3a2:	6613      	str	r3, [r2, #96]	; 0x60
 800b3a4:	4b33      	ldr	r3, [pc, #204]	; (800b474 <HAL_UART_MspInit+0x16c>)
 800b3a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3ac:	61bb      	str	r3, [r7, #24]
 800b3ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b3b0:	4a30      	ldr	r2, [pc, #192]	; (800b474 <HAL_UART_MspInit+0x16c>)
 800b3b2:	4b30      	ldr	r3, [pc, #192]	; (800b474 <HAL_UART_MspInit+0x16c>)
 800b3b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3b6:	f043 0302 	orr.w	r3, r3, #2
 800b3ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b3bc:	4b2d      	ldr	r3, [pc, #180]	; (800b474 <HAL_UART_MspInit+0x16c>)
 800b3be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3c0:	f003 0302 	and.w	r3, r3, #2
 800b3c4:	617b      	str	r3, [r7, #20]
 800b3c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b3c8:	23c0      	movs	r3, #192	; 0xc0
 800b3ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3cc:	2302      	movs	r3, #2
 800b3ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3d4:	2303      	movs	r3, #3
 800b3d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b3d8:	2307      	movs	r3, #7
 800b3da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b3dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	4827      	ldr	r0, [pc, #156]	; (800b480 <HAL_UART_MspInit+0x178>)
 800b3e4:	f7f6 fe3a 	bl	800205c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	2025      	movs	r0, #37	; 0x25
 800b3ee:	f7f6 fdfe 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b3f2:	2025      	movs	r0, #37	; 0x25
 800b3f4:	f7f6 fe17 	bl	8002026 <HAL_NVIC_EnableIRQ>
}
 800b3f8:	e035      	b.n	800b466 <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART2)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a21      	ldr	r2, [pc, #132]	; (800b484 <HAL_UART_MspInit+0x17c>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d130      	bne.n	800b466 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800b404:	4a1b      	ldr	r2, [pc, #108]	; (800b474 <HAL_UART_MspInit+0x16c>)
 800b406:	4b1b      	ldr	r3, [pc, #108]	; (800b474 <HAL_UART_MspInit+0x16c>)
 800b408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b40a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b40e:	6593      	str	r3, [r2, #88]	; 0x58
 800b410:	4b18      	ldr	r3, [pc, #96]	; (800b474 <HAL_UART_MspInit+0x16c>)
 800b412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b418:	613b      	str	r3, [r7, #16]
 800b41a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b41c:	4a15      	ldr	r2, [pc, #84]	; (800b474 <HAL_UART_MspInit+0x16c>)
 800b41e:	4b15      	ldr	r3, [pc, #84]	; (800b474 <HAL_UART_MspInit+0x16c>)
 800b420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b422:	f043 0301 	orr.w	r3, r3, #1
 800b426:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b428:	4b12      	ldr	r3, [pc, #72]	; (800b474 <HAL_UART_MspInit+0x16c>)
 800b42a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b42c:	f003 0301 	and.w	r3, r3, #1
 800b430:	60fb      	str	r3, [r7, #12]
 800b432:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800b434:	230c      	movs	r3, #12
 800b436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b438:	2302      	movs	r3, #2
 800b43a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b43c:	2300      	movs	r3, #0
 800b43e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b440:	2303      	movs	r3, #3
 800b442:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b444:	2307      	movs	r3, #7
 800b446:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b44c:	4619      	mov	r1, r3
 800b44e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b452:	f7f6 fe03 	bl	800205c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800b456:	2200      	movs	r2, #0
 800b458:	2100      	movs	r1, #0
 800b45a:	2026      	movs	r0, #38	; 0x26
 800b45c:	f7f6 fdc7 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800b460:	2026      	movs	r0, #38	; 0x26
 800b462:	f7f6 fde0 	bl	8002026 <HAL_NVIC_EnableIRQ>
}
 800b466:	bf00      	nop
 800b468:	3738      	adds	r7, #56	; 0x38
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	40004c00 	.word	0x40004c00
 800b474:	40021000 	.word	0x40021000
 800b478:	48000800 	.word	0x48000800
 800b47c:	40013800 	.word	0x40013800
 800b480:	48000400 	.word	0x48000400
 800b484:	40004400 	.word	0x40004400

0800b488 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800b48c:	2200      	movs	r2, #0
 800b48e:	490b      	ldr	r1, [pc, #44]	; (800b4bc <MX_USB_DEVICE_Init+0x34>)
 800b490:	480b      	ldr	r0, [pc, #44]	; (800b4c0 <MX_USB_DEVICE_Init+0x38>)
 800b492:	f7fd fe77 	bl	8009184 <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 800b496:	490b      	ldr	r1, [pc, #44]	; (800b4c4 <MX_USB_DEVICE_Init+0x3c>)
 800b498:	4809      	ldr	r0, [pc, #36]	; (800b4c0 <MX_USB_DEVICE_Init+0x38>)
 800b49a:	f7fd fe9e 	bl	80091da <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800b49e:	490a      	ldr	r1, [pc, #40]	; (800b4c8 <MX_USB_DEVICE_Init+0x40>)
 800b4a0:	4807      	ldr	r0, [pc, #28]	; (800b4c0 <MX_USB_DEVICE_Init+0x38>)
 800b4a2:	f7fd fdd1 	bl	8009048 <USBD_CDC_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 800b4a6:	4806      	ldr	r0, [pc, #24]	; (800b4c0 <MX_USB_DEVICE_Init+0x38>)
 800b4a8:	f000 fc70 	bl	800bd8c <USBD_LL_BatteryCharging>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d002      	beq.n	800b4b8 <MX_USB_DEVICE_Init+0x30>
  USBD_Start(&hUsbDeviceFS);
 800b4b2:	4803      	ldr	r0, [pc, #12]	; (800b4c0 <MX_USB_DEVICE_Init+0x38>)
 800b4b4:	f7fd feab 	bl	800920e <USBD_Start>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b4b8:	bf00      	nop
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	2000091c 	.word	0x2000091c
 800b4c0:	200027b8 	.word	0x200027b8
 800b4c4:	20000804 	.word	0x20000804
 800b4c8:	2000090c 	.word	0x2000090c

0800b4cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	4905      	ldr	r1, [pc, #20]	; (800b4e8 <CDC_Init_FS+0x1c>)
 800b4d4:	4805      	ldr	r0, [pc, #20]	; (800b4ec <CDC_Init_FS+0x20>)
 800b4d6:	f7fd fdce 	bl	8009076 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b4da:	4905      	ldr	r1, [pc, #20]	; (800b4f0 <CDC_Init_FS+0x24>)
 800b4dc:	4803      	ldr	r0, [pc, #12]	; (800b4ec <CDC_Init_FS+0x20>)
 800b4de:	f7fd fde4 	bl	80090aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b4e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	20003254 	.word	0x20003254
 800b4ec:	200027b8 	.word	0x200027b8
 800b4f0:	20002a54 	.word	0x20002a54

0800b4f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b4f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	4603      	mov	r3, r0
 800b50c:	6039      	str	r1, [r7, #0]
 800b50e:	71fb      	strb	r3, [r7, #7]
 800b510:	4613      	mov	r3, r2
 800b512:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b514:	79fb      	ldrb	r3, [r7, #7]
 800b516:	2b23      	cmp	r3, #35	; 0x23
 800b518:	d84a      	bhi.n	800b5b0 <CDC_Control_FS+0xac>
 800b51a:	a201      	add	r2, pc, #4	; (adr r2, 800b520 <CDC_Control_FS+0x1c>)
 800b51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b520:	0800b5b1 	.word	0x0800b5b1
 800b524:	0800b5b1 	.word	0x0800b5b1
 800b528:	0800b5b1 	.word	0x0800b5b1
 800b52c:	0800b5b1 	.word	0x0800b5b1
 800b530:	0800b5b1 	.word	0x0800b5b1
 800b534:	0800b5b1 	.word	0x0800b5b1
 800b538:	0800b5b1 	.word	0x0800b5b1
 800b53c:	0800b5b1 	.word	0x0800b5b1
 800b540:	0800b5b1 	.word	0x0800b5b1
 800b544:	0800b5b1 	.word	0x0800b5b1
 800b548:	0800b5b1 	.word	0x0800b5b1
 800b54c:	0800b5b1 	.word	0x0800b5b1
 800b550:	0800b5b1 	.word	0x0800b5b1
 800b554:	0800b5b1 	.word	0x0800b5b1
 800b558:	0800b5b1 	.word	0x0800b5b1
 800b55c:	0800b5b1 	.word	0x0800b5b1
 800b560:	0800b5b1 	.word	0x0800b5b1
 800b564:	0800b5b1 	.word	0x0800b5b1
 800b568:	0800b5b1 	.word	0x0800b5b1
 800b56c:	0800b5b1 	.word	0x0800b5b1
 800b570:	0800b5b1 	.word	0x0800b5b1
 800b574:	0800b5b1 	.word	0x0800b5b1
 800b578:	0800b5b1 	.word	0x0800b5b1
 800b57c:	0800b5b1 	.word	0x0800b5b1
 800b580:	0800b5b1 	.word	0x0800b5b1
 800b584:	0800b5b1 	.word	0x0800b5b1
 800b588:	0800b5b1 	.word	0x0800b5b1
 800b58c:	0800b5b1 	.word	0x0800b5b1
 800b590:	0800b5b1 	.word	0x0800b5b1
 800b594:	0800b5b1 	.word	0x0800b5b1
 800b598:	0800b5b1 	.word	0x0800b5b1
 800b59c:	0800b5b1 	.word	0x0800b5b1
 800b5a0:	0800b5b1 	.word	0x0800b5b1
 800b5a4:	0800b5b1 	.word	0x0800b5b1
 800b5a8:	0800b5b1 	.word	0x0800b5b1
 800b5ac:	0800b5b1 	.word	0x0800b5b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b5b0:	bf00      	nop
  }

  return (USBD_OK);
 800b5b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(myUSBRxCallback) myUSBRxCallback((char *)Buf, *Len);
 800b5ca:	4b0c      	ldr	r3, [pc, #48]	; (800b5fc <CDC_Receive_FS+0x3c>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d007      	beq.n	800b5e2 <CDC_Receive_FS+0x22>
 800b5d2:	4b0a      	ldr	r3, [pc, #40]	; (800b5fc <CDC_Receive_FS+0x3c>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	683a      	ldr	r2, [r7, #0]
 800b5d8:	6812      	ldr	r2, [r2, #0]
 800b5da:	b292      	uxth	r2, r2
 800b5dc:	4611      	mov	r1, r2
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	4798      	blx	r3
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b5e2:	6879      	ldr	r1, [r7, #4]
 800b5e4:	4806      	ldr	r0, [pc, #24]	; (800b600 <CDC_Receive_FS+0x40>)
 800b5e6:	f7fd fd60 	bl	80090aa <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b5ea:	4805      	ldr	r0, [pc, #20]	; (800b600 <CDC_Receive_FS+0x40>)
 800b5ec:	f7fd fda0 	bl	8009130 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800b5f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	200021ec 	.word	0x200021ec
 800b600:	200027b8 	.word	0x200027b8

0800b604 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	460b      	mov	r3, r1
 800b60e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b610:	2300      	movs	r3, #0
 800b612:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b614:	4b0d      	ldr	r3, [pc, #52]	; (800b64c <CDC_Transmit_FS+0x48>)
 800b616:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b61a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b622:	2b00      	cmp	r3, #0
 800b624:	d001      	beq.n	800b62a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b626:	2301      	movs	r3, #1
 800b628:	e00b      	b.n	800b642 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b62a:	887b      	ldrh	r3, [r7, #2]
 800b62c:	461a      	mov	r2, r3
 800b62e:	6879      	ldr	r1, [r7, #4]
 800b630:	4806      	ldr	r0, [pc, #24]	; (800b64c <CDC_Transmit_FS+0x48>)
 800b632:	f7fd fd20 	bl	8009076 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b636:	4805      	ldr	r0, [pc, #20]	; (800b64c <CDC_Transmit_FS+0x48>)
 800b638:	f7fd fd4b 	bl	80090d2 <USBD_CDC_TransmitPacket>
 800b63c:	4603      	mov	r3, r0
 800b63e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b640:	7bfb      	ldrb	r3, [r7, #15]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	200027b8 	.word	0x200027b8

0800b650 <usb_registerRxCallback>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void usb_registerRxCallback(usb_rxCallback callback){
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
	myUSBRxCallback = callback;
 800b658:	4a04      	ldr	r2, [pc, #16]	; (800b66c <usb_registerRxCallback+0x1c>)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6013      	str	r3, [r2, #0]
}
 800b65e:	bf00      	nop
 800b660:	370c      	adds	r7, #12
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr
 800b66a:	bf00      	nop
 800b66c:	200021ec 	.word	0x200021ec

0800b670 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b088      	sub	sp, #32
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4a16      	ldr	r2, [pc, #88]	; (800b6d8 <HAL_PCD_MspInit+0x68>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d125      	bne.n	800b6ce <HAL_PCD_MspInit+0x5e>
  
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b682:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b686:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b688:	2302      	movs	r3, #2
 800b68a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b68c:	2300      	movs	r3, #0
 800b68e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b690:	2303      	movs	r3, #3
 800b692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800b694:	230a      	movs	r3, #10
 800b696:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b698:	f107 030c 	add.w	r3, r7, #12
 800b69c:	4619      	mov	r1, r3
 800b69e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b6a2:	f7f6 fcdb 	bl	800205c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b6a6:	4a0d      	ldr	r2, [pc, #52]	; (800b6dc <HAL_PCD_MspInit+0x6c>)
 800b6a8:	4b0c      	ldr	r3, [pc, #48]	; (800b6dc <HAL_PCD_MspInit+0x6c>)
 800b6aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b6b0:	6593      	str	r3, [r2, #88]	; 0x58
 800b6b2:	4b0a      	ldr	r3, [pc, #40]	; (800b6dc <HAL_PCD_MspInit+0x6c>)
 800b6b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b6ba:	60bb      	str	r3, [r7, #8]
 800b6bc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b6be:	2200      	movs	r2, #0
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	2043      	movs	r0, #67	; 0x43
 800b6c4:	f7f6 fc93 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b6c8:	2043      	movs	r0, #67	; 0x43
 800b6ca:	f7f6 fcac 	bl	8002026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b6ce:	bf00      	nop
 800b6d0:	3720      	adds	r7, #32
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	40006800 	.word	0x40006800
 800b6dc:	40021000 	.word	0x40021000

0800b6e0 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	4610      	mov	r0, r2
 800b6f8:	f7fd fdd2 	bl	80092a0 <USBD_LL_SetupStage>
}
 800b6fc:	bf00      	nop
 800b6fe:	3708      	adds	r7, #8
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	460b      	mov	r3, r1
 800b70e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 0470 	ldr.w	r0, [r3, #1136]	; 0x470
 800b716:	78fb      	ldrb	r3, [r7, #3]
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	015b      	lsls	r3, r3, #5
 800b71c:	4413      	add	r3, r2
 800b71e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	78fb      	ldrb	r3, [r7, #3]
 800b726:	4619      	mov	r1, r3
 800b728:	f7fd fe05 	bl	8009336 <USBD_LL_DataOutStage>
}
 800b72c:	bf00      	nop
 800b72e:	3708      	adds	r7, #8
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	460b      	mov	r3, r1
 800b73e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 0470 	ldr.w	r0, [r3, #1136]	; 0x470
 800b746:	78fb      	ldrb	r3, [r7, #3]
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	015b      	lsls	r3, r3, #5
 800b74c:	4413      	add	r3, r2
 800b74e:	333c      	adds	r3, #60	; 0x3c
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	78fb      	ldrb	r3, [r7, #3]
 800b754:	4619      	mov	r1, r3
 800b756:	f7fd fe5b 	bl	8009410 <USBD_LL_DataInStage>
}
 800b75a:	bf00      	nop
 800b75c:	3708      	adds	r7, #8
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}

0800b762 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800b762:	b580      	push	{r7, lr}
 800b764:	b082      	sub	sp, #8
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b770:	4618      	mov	r0, r3
 800b772:	f7fd ff69 	bl	8009648 <USBD_LL_SOF>
}
 800b776:	bf00      	nop
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800b77e:	b580      	push	{r7, lr}
 800b780:	b084      	sub	sp, #16
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b786:	2301      	movs	r3, #1
 800b788:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	2b02      	cmp	r3, #2
 800b790:	d102      	bne.n	800b798 <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800b792:	2301      	movs	r3, #1
 800b794:	73fb      	strb	r3, [r7, #15]
    break;
 800b796:	e002      	b.n	800b79e <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;
 800b798:	2301      	movs	r3, #1
 800b79a:	73fb      	strb	r3, [r7, #15]
    break;    
 800b79c:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b7a4:	7bfa      	ldrb	r2, [r7, #15]
 800b7a6:	4611      	mov	r1, r2
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7fd ff17 	bl	80095dc <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7fd fed0 	bl	800955a <USBD_LL_Reset>
}
 800b7ba:	bf00      	nop
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
	...

0800b7c4 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f7fd ff12 	bl	80095fc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	699b      	ldr	r3, [r3, #24]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d005      	beq.n	800b7ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b7e0:	4a04      	ldr	r2, [pc, #16]	; (800b7f4 <HAL_PCD_SuspendCallback+0x30>)
 800b7e2:	4b04      	ldr	r3, [pc, #16]	; (800b7f4 <HAL_PCD_SuspendCallback+0x30>)
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	f043 0306 	orr.w	r3, r3, #6
 800b7ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b7ec:	bf00      	nop
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	e000ed00 	.word	0xe000ed00

0800b7f8 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d007      	beq.n	800b818 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b808:	4a08      	ldr	r2, [pc, #32]	; (800b82c <HAL_PCD_ResumeCallback+0x34>)
 800b80a:	4b08      	ldr	r3, [pc, #32]	; (800b82c <HAL_PCD_ResumeCallback+0x34>)
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	f023 0306 	bic.w	r3, r3, #6
 800b812:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b814:	f000 fab4 	bl	800bd80 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fd ff01 	bl	8009626 <USBD_LL_Resume>
}
 800b824:	bf00      	nop
 800b826:	3708      	adds	r7, #8
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	e000ed00 	.word	0xe000ed00

0800b830 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800b838:	f7f8 f818 	bl	800386c <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b83c:	4a2c      	ldr	r2, [pc, #176]	; (800b8f0 <USBD_LL_Init+0xc0>)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
  pdev->pData = &hpcd_USB_FS;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	4a2a      	ldr	r2, [pc, #168]	; (800b8f0 <USBD_LL_Init+0xc0>)
 800b848:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800b84c:	4b28      	ldr	r3, [pc, #160]	; (800b8f0 <USBD_LL_Init+0xc0>)
 800b84e:	4a29      	ldr	r2, [pc, #164]	; (800b8f4 <USBD_LL_Init+0xc4>)
 800b850:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b852:	4b27      	ldr	r3, [pc, #156]	; (800b8f0 <USBD_LL_Init+0xc0>)
 800b854:	2208      	movs	r2, #8
 800b856:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b858:	4b25      	ldr	r3, [pc, #148]	; (800b8f0 <USBD_LL_Init+0xc0>)
 800b85a:	2202      	movs	r2, #2
 800b85c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800b85e:	4b24      	ldr	r3, [pc, #144]	; (800b8f0 <USBD_LL_Init+0xc0>)
 800b860:	2200      	movs	r2, #0
 800b862:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b864:	4b22      	ldr	r3, [pc, #136]	; (800b8f0 <USBD_LL_Init+0xc0>)
 800b866:	2202      	movs	r2, #2
 800b868:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b86a:	4b21      	ldr	r3, [pc, #132]	; (800b8f0 <USBD_LL_Init+0xc0>)
 800b86c:	2200      	movs	r2, #0
 800b86e:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b870:	4b1f      	ldr	r3, [pc, #124]	; (800b8f0 <USBD_LL_Init+0xc0>)
 800b872:	2200      	movs	r2, #0
 800b874:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b876:	4b1e      	ldr	r3, [pc, #120]	; (800b8f0 <USBD_LL_Init+0xc0>)
 800b878:	2200      	movs	r2, #0
 800b87a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b87c:	4b1c      	ldr	r3, [pc, #112]	; (800b8f0 <USBD_LL_Init+0xc0>)
 800b87e:	2200      	movs	r2, #0
 800b880:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b882:	481b      	ldr	r0, [pc, #108]	; (800b8f0 <USBD_LL_Init+0xc0>)
 800b884:	f7f7 f83d 	bl	8002902 <HAL_PCD_Init>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d001      	beq.n	800b892 <USBD_LL_Init+0x62>
  {
    Error_Handler( );
 800b88e:	f7fe ff87 	bl	800a7a0 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b898:	2318      	movs	r3, #24
 800b89a:	2200      	movs	r2, #0
 800b89c:	2100      	movs	r1, #0
 800b89e:	f7f7 fef3 	bl	8003688 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b8a8:	2358      	movs	r3, #88	; 0x58
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	2180      	movs	r1, #128	; 0x80
 800b8ae:	f7f7 feeb 	bl	8003688 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b8b8:	23c0      	movs	r3, #192	; 0xc0
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	2181      	movs	r1, #129	; 0x81
 800b8be:	f7f7 fee3 	bl	8003688 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b8c8:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	2101      	movs	r1, #1
 800b8d0:	f7f7 feda 	bl	8003688 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b8da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8de:	2200      	movs	r2, #0
 800b8e0:	2182      	movs	r1, #130	; 0x82
 800b8e2:	f7f7 fed1 	bl	8003688 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3708      	adds	r7, #8
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	20003a54 	.word	0x20003a54
 800b8f4:	40006800 	.word	0x40006800

0800b8f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b900:	2300      	movs	r3, #0
 800b902:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b904:	2300      	movs	r3, #0
 800b906:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b90e:	4618      	mov	r0, r3
 800b910:	f7f7 f8d0 	bl	8002ab4 <HAL_PCD_Start>
 800b914:	4603      	mov	r3, r0
 800b916:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800b918:	7bbb      	ldrb	r3, [r7, #14]
 800b91a:	2b03      	cmp	r3, #3
 800b91c:	d816      	bhi.n	800b94c <USBD_LL_Start+0x54>
 800b91e:	a201      	add	r2, pc, #4	; (adr r2, 800b924 <USBD_LL_Start+0x2c>)
 800b920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b924:	0800b935 	.word	0x0800b935
 800b928:	0800b93b 	.word	0x0800b93b
 800b92c:	0800b941 	.word	0x0800b941
 800b930:	0800b947 	.word	0x0800b947
    case HAL_OK :
      usb_status = USBD_OK;
 800b934:	2300      	movs	r3, #0
 800b936:	73fb      	strb	r3, [r7, #15]
    break;
 800b938:	e00b      	b.n	800b952 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b93a:	2302      	movs	r3, #2
 800b93c:	73fb      	strb	r3, [r7, #15]
    break;
 800b93e:	e008      	b.n	800b952 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b940:	2301      	movs	r3, #1
 800b942:	73fb      	strb	r3, [r7, #15]
    break;
 800b944:	e005      	b.n	800b952 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b946:	2302      	movs	r3, #2
 800b948:	73fb      	strb	r3, [r7, #15]
    break;
 800b94a:	e002      	b.n	800b952 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b94c:	2302      	movs	r3, #2
 800b94e:	73fb      	strb	r3, [r7, #15]
    break;
 800b950:	bf00      	nop
  }
  return usb_status;
 800b952:	7bfb      	ldrb	r3, [r7, #15]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3710      	adds	r7, #16
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	4608      	mov	r0, r1
 800b966:	4611      	mov	r1, r2
 800b968:	461a      	mov	r2, r3
 800b96a:	4603      	mov	r3, r0
 800b96c:	70fb      	strb	r3, [r7, #3]
 800b96e:	460b      	mov	r3, r1
 800b970:	70bb      	strb	r3, [r7, #2]
 800b972:	4613      	mov	r3, r2
 800b974:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b976:	2300      	movs	r3, #0
 800b978:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b97a:	2300      	movs	r3, #0
 800b97c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b984:	78bb      	ldrb	r3, [r7, #2]
 800b986:	883a      	ldrh	r2, [r7, #0]
 800b988:	78f9      	ldrb	r1, [r7, #3]
 800b98a:	f7f7 fa33 	bl	8002df4 <HAL_PCD_EP_Open>
 800b98e:	4603      	mov	r3, r0
 800b990:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b992:	7bbb      	ldrb	r3, [r7, #14]
 800b994:	2b03      	cmp	r3, #3
 800b996:	d817      	bhi.n	800b9c8 <USBD_LL_OpenEP+0x6c>
 800b998:	a201      	add	r2, pc, #4	; (adr r2, 800b9a0 <USBD_LL_OpenEP+0x44>)
 800b99a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b99e:	bf00      	nop
 800b9a0:	0800b9b1 	.word	0x0800b9b1
 800b9a4:	0800b9b7 	.word	0x0800b9b7
 800b9a8:	0800b9bd 	.word	0x0800b9bd
 800b9ac:	0800b9c3 	.word	0x0800b9c3
    case HAL_OK :
      usb_status = USBD_OK;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b9b4:	e00b      	b.n	800b9ce <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9b6:	2302      	movs	r3, #2
 800b9b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b9ba:	e008      	b.n	800b9ce <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	73fb      	strb	r3, [r7, #15]
    break;
 800b9c0:	e005      	b.n	800b9ce <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b9c2:	2302      	movs	r3, #2
 800b9c4:	73fb      	strb	r3, [r7, #15]
    break;
 800b9c6:	e002      	b.n	800b9ce <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b9c8:	2302      	movs	r3, #2
 800b9ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b9cc:	bf00      	nop
  }
  return usb_status;
 800b9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3710      	adds	r7, #16
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b9f2:	78fa      	ldrb	r2, [r7, #3]
 800b9f4:	4611      	mov	r1, r2
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7f7 fa5c 	bl	8002eb4 <HAL_PCD_EP_Close>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800ba00:	7bbb      	ldrb	r3, [r7, #14]
 800ba02:	2b03      	cmp	r3, #3
 800ba04:	d816      	bhi.n	800ba34 <USBD_LL_CloseEP+0x5c>
 800ba06:	a201      	add	r2, pc, #4	; (adr r2, 800ba0c <USBD_LL_CloseEP+0x34>)
 800ba08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba0c:	0800ba1d 	.word	0x0800ba1d
 800ba10:	0800ba23 	.word	0x0800ba23
 800ba14:	0800ba29 	.word	0x0800ba29
 800ba18:	0800ba2f 	.word	0x0800ba2f
    case HAL_OK :
      usb_status = USBD_OK;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba20:	e00b      	b.n	800ba3a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba22:	2302      	movs	r3, #2
 800ba24:	73fb      	strb	r3, [r7, #15]
    break;
 800ba26:	e008      	b.n	800ba3a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba28:	2301      	movs	r3, #1
 800ba2a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba2c:	e005      	b.n	800ba3a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba2e:	2302      	movs	r3, #2
 800ba30:	73fb      	strb	r3, [r7, #15]
    break;
 800ba32:	e002      	b.n	800ba3a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ba34:	2302      	movs	r3, #2
 800ba36:	73fb      	strb	r3, [r7, #15]
    break;
 800ba38:	bf00      	nop
  }
  return usb_status;  
 800ba3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3710      	adds	r7, #16
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba50:	2300      	movs	r3, #0
 800ba52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba54:	2300      	movs	r3, #0
 800ba56:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ba5e:	78fa      	ldrb	r2, [r7, #3]
 800ba60:	4611      	mov	r1, r2
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7f7 faf1 	bl	800304a <HAL_PCD_EP_SetStall>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ba6c:	7bbb      	ldrb	r3, [r7, #14]
 800ba6e:	2b03      	cmp	r3, #3
 800ba70:	d816      	bhi.n	800baa0 <USBD_LL_StallEP+0x5c>
 800ba72:	a201      	add	r2, pc, #4	; (adr r2, 800ba78 <USBD_LL_StallEP+0x34>)
 800ba74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba78:	0800ba89 	.word	0x0800ba89
 800ba7c:	0800ba8f 	.word	0x0800ba8f
 800ba80:	0800ba95 	.word	0x0800ba95
 800ba84:	0800ba9b 	.word	0x0800ba9b
    case HAL_OK :
      usb_status = USBD_OK;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba8c:	e00b      	b.n	800baa6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba8e:	2302      	movs	r3, #2
 800ba90:	73fb      	strb	r3, [r7, #15]
    break;
 800ba92:	e008      	b.n	800baa6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba94:	2301      	movs	r3, #1
 800ba96:	73fb      	strb	r3, [r7, #15]
    break;
 800ba98:	e005      	b.n	800baa6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba9a:	2302      	movs	r3, #2
 800ba9c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba9e:	e002      	b.n	800baa6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800baa0:	2302      	movs	r3, #2
 800baa2:	73fb      	strb	r3, [r7, #15]
    break;
 800baa4:	bf00      	nop
  }
  return usb_status;  
 800baa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3710      	adds	r7, #16
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	460b      	mov	r3, r1
 800baba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800babc:	2300      	movs	r3, #0
 800babe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bac0:	2300      	movs	r3, #0
 800bac2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800baca:	78fa      	ldrb	r2, [r7, #3]
 800bacc:	4611      	mov	r1, r2
 800bace:	4618      	mov	r0, r3
 800bad0:	f7f7 fb15 	bl	80030fe <HAL_PCD_EP_ClrStall>
 800bad4:	4603      	mov	r3, r0
 800bad6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800bad8:	7bbb      	ldrb	r3, [r7, #14]
 800bada:	2b03      	cmp	r3, #3
 800badc:	d816      	bhi.n	800bb0c <USBD_LL_ClearStallEP+0x5c>
 800bade:	a201      	add	r2, pc, #4	; (adr r2, 800bae4 <USBD_LL_ClearStallEP+0x34>)
 800bae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae4:	0800baf5 	.word	0x0800baf5
 800bae8:	0800bafb 	.word	0x0800bafb
 800baec:	0800bb01 	.word	0x0800bb01
 800baf0:	0800bb07 	.word	0x0800bb07
    case HAL_OK :
      usb_status = USBD_OK;
 800baf4:	2300      	movs	r3, #0
 800baf6:	73fb      	strb	r3, [r7, #15]
    break;
 800baf8:	e00b      	b.n	800bb12 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bafa:	2302      	movs	r3, #2
 800bafc:	73fb      	strb	r3, [r7, #15]
    break;
 800bafe:	e008      	b.n	800bb12 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb00:	2301      	movs	r3, #1
 800bb02:	73fb      	strb	r3, [r7, #15]
    break;
 800bb04:	e005      	b.n	800bb12 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb06:	2302      	movs	r3, #2
 800bb08:	73fb      	strb	r3, [r7, #15]
    break;
 800bb0a:	e002      	b.n	800bb12 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bb0c:	2302      	movs	r3, #2
 800bb0e:	73fb      	strb	r3, [r7, #15]
    break;
 800bb10:	bf00      	nop
  }
  return usb_status; 
 800bb12:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3710      	adds	r7, #16
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b085      	sub	sp, #20
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	460b      	mov	r3, r1
 800bb26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bb2e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800bb30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	da08      	bge.n	800bb4a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800bb38:	78fb      	ldrb	r3, [r7, #3]
 800bb3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb3e:	68fa      	ldr	r2, [r7, #12]
 800bb40:	015b      	lsls	r3, r3, #5
 800bb42:	4413      	add	r3, r2
 800bb44:	332a      	adds	r3, #42	; 0x2a
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	e008      	b.n	800bb5c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800bb4a:	78fb      	ldrb	r3, [r7, #3]
 800bb4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	015b      	lsls	r3, r3, #5
 800bb54:	4413      	add	r3, r2
 800bb56:	f203 232a 	addw	r3, r3, #554	; 0x22a
 800bb5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3714      	adds	r7, #20
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	460b      	mov	r3, r1
 800bb72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb74:	2300      	movs	r3, #0
 800bb76:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bb82:	78fa      	ldrb	r2, [r7, #3]
 800bb84:	4611      	mov	r1, r2
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7f7 f90f 	bl	8002daa <HAL_PCD_SetAddress>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800bb90:	7bbb      	ldrb	r3, [r7, #14]
 800bb92:	2b03      	cmp	r3, #3
 800bb94:	d816      	bhi.n	800bbc4 <USBD_LL_SetUSBAddress+0x5c>
 800bb96:	a201      	add	r2, pc, #4	; (adr r2, 800bb9c <USBD_LL_SetUSBAddress+0x34>)
 800bb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9c:	0800bbad 	.word	0x0800bbad
 800bba0:	0800bbb3 	.word	0x0800bbb3
 800bba4:	0800bbb9 	.word	0x0800bbb9
 800bba8:	0800bbbf 	.word	0x0800bbbf
    case HAL_OK :
      usb_status = USBD_OK;
 800bbac:	2300      	movs	r3, #0
 800bbae:	73fb      	strb	r3, [r7, #15]
    break;
 800bbb0:	e00b      	b.n	800bbca <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbb2:	2302      	movs	r3, #2
 800bbb4:	73fb      	strb	r3, [r7, #15]
    break;
 800bbb6:	e008      	b.n	800bbca <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	73fb      	strb	r3, [r7, #15]
    break;
 800bbbc:	e005      	b.n	800bbca <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbbe:	2302      	movs	r3, #2
 800bbc0:	73fb      	strb	r3, [r7, #15]
    break;
 800bbc2:	e002      	b.n	800bbca <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bbc4:	2302      	movs	r3, #2
 800bbc6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbc8:	bf00      	nop
  }
  return usb_status;  
 800bbca:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3710      	adds	r7, #16
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	607a      	str	r2, [r7, #4]
 800bbde:	461a      	mov	r2, r3
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	72fb      	strb	r3, [r7, #11]
 800bbe4:	4613      	mov	r3, r2
 800bbe6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbec:	2300      	movs	r3, #0
 800bbee:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bbf6:	893b      	ldrh	r3, [r7, #8]
 800bbf8:	7af9      	ldrb	r1, [r7, #11]
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	f7f7 f9ec 	bl	8002fd8 <HAL_PCD_EP_Transmit>
 800bc00:	4603      	mov	r3, r0
 800bc02:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800bc04:	7dbb      	ldrb	r3, [r7, #22]
 800bc06:	2b03      	cmp	r3, #3
 800bc08:	d816      	bhi.n	800bc38 <USBD_LL_Transmit+0x64>
 800bc0a:	a201      	add	r2, pc, #4	; (adr r2, 800bc10 <USBD_LL_Transmit+0x3c>)
 800bc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc10:	0800bc21 	.word	0x0800bc21
 800bc14:	0800bc27 	.word	0x0800bc27
 800bc18:	0800bc2d 	.word	0x0800bc2d
 800bc1c:	0800bc33 	.word	0x0800bc33
    case HAL_OK :
      usb_status = USBD_OK;
 800bc20:	2300      	movs	r3, #0
 800bc22:	75fb      	strb	r3, [r7, #23]
    break;
 800bc24:	e00b      	b.n	800bc3e <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc26:	2302      	movs	r3, #2
 800bc28:	75fb      	strb	r3, [r7, #23]
    break;
 800bc2a:	e008      	b.n	800bc3e <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	75fb      	strb	r3, [r7, #23]
    break;
 800bc30:	e005      	b.n	800bc3e <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc32:	2302      	movs	r3, #2
 800bc34:	75fb      	strb	r3, [r7, #23]
    break;
 800bc36:	e002      	b.n	800bc3e <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800bc38:	2302      	movs	r3, #2
 800bc3a:	75fb      	strb	r3, [r7, #23]
    break;
 800bc3c:	bf00      	nop
  }
  return usb_status;    
 800bc3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3718      	adds	r7, #24
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b086      	sub	sp, #24
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	607a      	str	r2, [r7, #4]
 800bc52:	461a      	mov	r2, r3
 800bc54:	460b      	mov	r3, r1
 800bc56:	72fb      	strb	r3, [r7, #11]
 800bc58:	4613      	mov	r3, r2
 800bc5a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc60:	2300      	movs	r3, #0
 800bc62:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bc6a:	893b      	ldrh	r3, [r7, #8]
 800bc6c:	7af9      	ldrb	r1, [r7, #11]
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	f7f7 f962 	bl	8002f38 <HAL_PCD_EP_Receive>
 800bc74:	4603      	mov	r3, r0
 800bc76:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800bc78:	7dbb      	ldrb	r3, [r7, #22]
 800bc7a:	2b03      	cmp	r3, #3
 800bc7c:	d816      	bhi.n	800bcac <USBD_LL_PrepareReceive+0x64>
 800bc7e:	a201      	add	r2, pc, #4	; (adr r2, 800bc84 <USBD_LL_PrepareReceive+0x3c>)
 800bc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc84:	0800bc95 	.word	0x0800bc95
 800bc88:	0800bc9b 	.word	0x0800bc9b
 800bc8c:	0800bca1 	.word	0x0800bca1
 800bc90:	0800bca7 	.word	0x0800bca7
    case HAL_OK :
      usb_status = USBD_OK;
 800bc94:	2300      	movs	r3, #0
 800bc96:	75fb      	strb	r3, [r7, #23]
    break;
 800bc98:	e00b      	b.n	800bcb2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc9a:	2302      	movs	r3, #2
 800bc9c:	75fb      	strb	r3, [r7, #23]
    break;
 800bc9e:	e008      	b.n	800bcb2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bca0:	2301      	movs	r3, #1
 800bca2:	75fb      	strb	r3, [r7, #23]
    break;
 800bca4:	e005      	b.n	800bcb2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bca6:	2302      	movs	r3, #2
 800bca8:	75fb      	strb	r3, [r7, #23]
    break;
 800bcaa:	e002      	b.n	800bcb2 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800bcac:	2302      	movs	r3, #2
 800bcae:	75fb      	strb	r3, [r7, #23]
    break;
 800bcb0:	bf00      	nop
  }
  return usb_status; 
 800bcb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3718      	adds	r7, #24
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bcce:	78fa      	ldrb	r2, [r7, #3]
 800bcd0:	4611      	mov	r1, r2
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7f7 f96a 	bl	8002fac <HAL_PCD_EP_GetRxCount>
 800bcd8:	4603      	mov	r3, r0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3708      	adds	r7, #8
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
	...

0800bce4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	460b      	mov	r3, r1
 800bcee:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bcf0:	78fb      	ldrb	r3, [r7, #3]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d002      	beq.n	800bcfc <HAL_PCDEx_LPM_Callback+0x18>
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d013      	beq.n	800bd22 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800bcfa:	e023      	b.n	800bd44 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	699b      	ldr	r3, [r3, #24]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d007      	beq.n	800bd14 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800bd04:	f7fe fcc3 	bl	800a68e <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd08:	4a10      	ldr	r2, [pc, #64]	; (800bd4c <HAL_PCDEx_LPM_Callback+0x68>)
 800bd0a:	4b10      	ldr	r3, [pc, #64]	; (800bd4c <HAL_PCDEx_LPM_Callback+0x68>)
 800bd0c:	691b      	ldr	r3, [r3, #16]
 800bd0e:	f023 0306 	bic.w	r3, r3, #6
 800bd12:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7fd fc83 	bl	8009626 <USBD_LL_Resume>
    break;
 800bd20:	e010      	b.n	800bd44 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fd fc67 	bl	80095fc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	699b      	ldr	r3, [r3, #24]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d005      	beq.n	800bd42 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd36:	4a05      	ldr	r2, [pc, #20]	; (800bd4c <HAL_PCDEx_LPM_Callback+0x68>)
 800bd38:	4b04      	ldr	r3, [pc, #16]	; (800bd4c <HAL_PCDEx_LPM_Callback+0x68>)
 800bd3a:	691b      	ldr	r3, [r3, #16]
 800bd3c:	f043 0306 	orr.w	r3, r3, #6
 800bd40:	6113      	str	r3, [r2, #16]
    break;   
 800bd42:	bf00      	nop
}
 800bd44:	bf00      	nop
 800bd46:	3708      	adds	r7, #8
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	e000ed00 	.word	0xe000ed00

0800bd50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bd58:	4b03      	ldr	r3, [pc, #12]	; (800bd68 <USBD_static_malloc+0x18>)
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	370c      	adds	r7, #12
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr
 800bd66:	bf00      	nop
 800bd68:	200021f0 	.word	0x200021f0

0800bd6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]

}
 800bd74:	bf00      	nop
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bd84:	f7fe fc83 	bl	800a68e <SystemClock_Config>
}
 800bd88:	bf00      	nop
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <USBD_LL_BatteryCharging>:
  *         else return USBD_FAIL if false
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bd9a:	60fb      	str	r3, [r7, #12]
  if (hpcd->Init.battery_charging_enable == ENABLE)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6a1b      	ldr	r3, [r3, #32]
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d101      	bne.n	800bda8 <USBD_LL_BatteryCharging+0x1c>
  {
    return USBD_OK;
 800bda4:	2300      	movs	r3, #0
 800bda6:	e000      	b.n	800bdaa <USBD_LL_BatteryCharging+0x1e>
  }
  else
  {
    return USBD_FAIL;
 800bda8:	2302      	movs	r3, #2
  }
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3714      	adds	r7, #20
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr
	...

0800bdb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	6039      	str	r1, [r7, #0]
 800bdc2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	2212      	movs	r2, #18
 800bdc8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bdca:	4b03      	ldr	r3, [pc, #12]	; (800bdd8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr
 800bdd8:	2000093c 	.word	0x2000093c

0800bddc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	4603      	mov	r3, r0
 800bde4:	6039      	str	r1, [r7, #0]
 800bde6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	2204      	movs	r2, #4
 800bdec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bdee:	4b03      	ldr	r3, [pc, #12]	; (800bdfc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	2000095c 	.word	0x2000095c

0800be00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	4603      	mov	r3, r0
 800be08:	6039      	str	r1, [r7, #0]
 800be0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be0c:	79fb      	ldrb	r3, [r7, #7]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d105      	bne.n	800be1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be12:	683a      	ldr	r2, [r7, #0]
 800be14:	4907      	ldr	r1, [pc, #28]	; (800be34 <USBD_FS_ProductStrDescriptor+0x34>)
 800be16:	4808      	ldr	r0, [pc, #32]	; (800be38 <USBD_FS_ProductStrDescriptor+0x38>)
 800be18:	f7fe f90c 	bl	800a034 <USBD_GetString>
 800be1c:	e004      	b.n	800be28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be1e:	683a      	ldr	r2, [r7, #0]
 800be20:	4904      	ldr	r1, [pc, #16]	; (800be34 <USBD_FS_ProductStrDescriptor+0x34>)
 800be22:	4805      	ldr	r0, [pc, #20]	; (800be38 <USBD_FS_ProductStrDescriptor+0x38>)
 800be24:	f7fe f906 	bl	800a034 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be28:	4b02      	ldr	r3, [pc, #8]	; (800be34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3708      	adds	r7, #8
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	20003ec8 	.word	0x20003ec8
 800be38:	0800c018 	.word	0x0800c018

0800be3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	4603      	mov	r3, r0
 800be44:	6039      	str	r1, [r7, #0]
 800be46:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be48:	683a      	ldr	r2, [r7, #0]
 800be4a:	4904      	ldr	r1, [pc, #16]	; (800be5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800be4c:	4804      	ldr	r0, [pc, #16]	; (800be60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be4e:	f7fe f8f1 	bl	800a034 <USBD_GetString>
  return USBD_StrDesc;
 800be52:	4b02      	ldr	r3, [pc, #8]	; (800be5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be54:	4618      	mov	r0, r3
 800be56:	3708      	adds	r7, #8
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	20003ec8 	.word	0x20003ec8
 800be60:	0800c028 	.word	0x0800c028

0800be64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
 800be6a:	4603      	mov	r3, r0
 800be6c:	6039      	str	r1, [r7, #0]
 800be6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be70:	79fb      	ldrb	r3, [r7, #7]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d105      	bne.n	800be82 <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800be76:	683a      	ldr	r2, [r7, #0]
 800be78:	4907      	ldr	r1, [pc, #28]	; (800be98 <USBD_FS_SerialStrDescriptor+0x34>)
 800be7a:	4808      	ldr	r0, [pc, #32]	; (800be9c <USBD_FS_SerialStrDescriptor+0x38>)
 800be7c:	f7fe f8da 	bl	800a034 <USBD_GetString>
 800be80:	e004      	b.n	800be8c <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800be82:	683a      	ldr	r2, [r7, #0]
 800be84:	4904      	ldr	r1, [pc, #16]	; (800be98 <USBD_FS_SerialStrDescriptor+0x34>)
 800be86:	4805      	ldr	r0, [pc, #20]	; (800be9c <USBD_FS_SerialStrDescriptor+0x38>)
 800be88:	f7fe f8d4 	bl	800a034 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be8c:	4b02      	ldr	r3, [pc, #8]	; (800be98 <USBD_FS_SerialStrDescriptor+0x34>)
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3708      	adds	r7, #8
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	20003ec8 	.word	0x20003ec8
 800be9c:	0800c03c 	.word	0x0800c03c

0800bea0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	4603      	mov	r3, r0
 800bea8:	6039      	str	r1, [r7, #0]
 800beaa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800beac:	79fb      	ldrb	r3, [r7, #7]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d105      	bne.n	800bebe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800beb2:	683a      	ldr	r2, [r7, #0]
 800beb4:	4907      	ldr	r1, [pc, #28]	; (800bed4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800beb6:	4808      	ldr	r0, [pc, #32]	; (800bed8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800beb8:	f7fe f8bc 	bl	800a034 <USBD_GetString>
 800bebc:	e004      	b.n	800bec8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bebe:	683a      	ldr	r2, [r7, #0]
 800bec0:	4904      	ldr	r1, [pc, #16]	; (800bed4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bec2:	4805      	ldr	r0, [pc, #20]	; (800bed8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bec4:	f7fe f8b6 	bl	800a034 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bec8:	4b02      	ldr	r3, [pc, #8]	; (800bed4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800beca:	4618      	mov	r0, r3
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	20003ec8 	.word	0x20003ec8
 800bed8:	0800c04c 	.word	0x0800c04c

0800bedc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	4603      	mov	r3, r0
 800bee4:	6039      	str	r1, [r7, #0]
 800bee6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bee8:	79fb      	ldrb	r3, [r7, #7]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d105      	bne.n	800befa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800beee:	683a      	ldr	r2, [r7, #0]
 800bef0:	4907      	ldr	r1, [pc, #28]	; (800bf10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bef2:	4808      	ldr	r0, [pc, #32]	; (800bf14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bef4:	f7fe f89e 	bl	800a034 <USBD_GetString>
 800bef8:	e004      	b.n	800bf04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800befa:	683a      	ldr	r2, [r7, #0]
 800befc:	4904      	ldr	r1, [pc, #16]	; (800bf10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800befe:	4805      	ldr	r0, [pc, #20]	; (800bf14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf00:	f7fe f898 	bl	800a034 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf04:	4b02      	ldr	r3, [pc, #8]	; (800bf10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3708      	adds	r7, #8
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	20003ec8 	.word	0x20003ec8
 800bf14:	0800c058 	.word	0x0800c058

0800bf18 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	4603      	mov	r3, r0
 800bf20:	6039      	str	r1, [r7, #0]
 800bf22:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_BOSDesc);
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	220c      	movs	r2, #12
 800bf28:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800bf2a:	4b03      	ldr	r3, [pc, #12]	; (800bf38 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr
 800bf38:	20000950 	.word	0x20000950

0800bf3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800bf3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bf74 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800bf40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800bf42:	e003      	b.n	800bf4c <LoopCopyDataInit>

0800bf44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800bf44:	4b0c      	ldr	r3, [pc, #48]	; (800bf78 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800bf46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800bf48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800bf4a:	3104      	adds	r1, #4

0800bf4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800bf4c:	480b      	ldr	r0, [pc, #44]	; (800bf7c <LoopForever+0xa>)
	ldr	r3, =_edata
 800bf4e:	4b0c      	ldr	r3, [pc, #48]	; (800bf80 <LoopForever+0xe>)
	adds	r2, r0, r1
 800bf50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800bf52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800bf54:	d3f6      	bcc.n	800bf44 <CopyDataInit>
	ldr	r2, =_sbss
 800bf56:	4a0b      	ldr	r2, [pc, #44]	; (800bf84 <LoopForever+0x12>)
	b	LoopFillZerobss
 800bf58:	e002      	b.n	800bf60 <LoopFillZerobss>

0800bf5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800bf5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800bf5c:	f842 3b04 	str.w	r3, [r2], #4

0800bf60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800bf60:	4b09      	ldr	r3, [pc, #36]	; (800bf88 <LoopForever+0x16>)
	cmp	r2, r3
 800bf62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800bf64:	d3f9      	bcc.n	800bf5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800bf66:	f7fe fcdd 	bl	800a924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bf6a:	f000 f811 	bl	800bf90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800bf6e:	f7fe fb69 	bl	800a644 <main>

0800bf72 <LoopForever>:

LoopForever:
    b LoopForever
 800bf72:	e7fe      	b.n	800bf72 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800bf74:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 800bf78:	0800c0c8 	.word	0x0800c0c8
	ldr	r0, =_sdata
 800bf7c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800bf80:	20000960 	.word	0x20000960
	ldr	r2, =_sbss
 800bf84:	20000960 	.word	0x20000960
	ldr	r3, = _ebss
 800bf88:	200040c8 	.word	0x200040c8

0800bf8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800bf8c:	e7fe      	b.n	800bf8c <ADC1_IRQHandler>
	...

0800bf90 <__libc_init_array>:
 800bf90:	b570      	push	{r4, r5, r6, lr}
 800bf92:	4e0d      	ldr	r6, [pc, #52]	; (800bfc8 <__libc_init_array+0x38>)
 800bf94:	4c0d      	ldr	r4, [pc, #52]	; (800bfcc <__libc_init_array+0x3c>)
 800bf96:	1ba4      	subs	r4, r4, r6
 800bf98:	10a4      	asrs	r4, r4, #2
 800bf9a:	2500      	movs	r5, #0
 800bf9c:	42a5      	cmp	r5, r4
 800bf9e:	d109      	bne.n	800bfb4 <__libc_init_array+0x24>
 800bfa0:	4e0b      	ldr	r6, [pc, #44]	; (800bfd0 <__libc_init_array+0x40>)
 800bfa2:	4c0c      	ldr	r4, [pc, #48]	; (800bfd4 <__libc_init_array+0x44>)
 800bfa4:	f000 f82c 	bl	800c000 <_init>
 800bfa8:	1ba4      	subs	r4, r4, r6
 800bfaa:	10a4      	asrs	r4, r4, #2
 800bfac:	2500      	movs	r5, #0
 800bfae:	42a5      	cmp	r5, r4
 800bfb0:	d105      	bne.n	800bfbe <__libc_init_array+0x2e>
 800bfb2:	bd70      	pop	{r4, r5, r6, pc}
 800bfb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bfb8:	4798      	blx	r3
 800bfba:	3501      	adds	r5, #1
 800bfbc:	e7ee      	b.n	800bf9c <__libc_init_array+0xc>
 800bfbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bfc2:	4798      	blx	r3
 800bfc4:	3501      	adds	r5, #1
 800bfc6:	e7f2      	b.n	800bfae <__libc_init_array+0x1e>
 800bfc8:	0800c0c0 	.word	0x0800c0c0
 800bfcc:	0800c0c0 	.word	0x0800c0c0
 800bfd0:	0800c0c0 	.word	0x0800c0c0
 800bfd4:	0800c0c4 	.word	0x0800c0c4

0800bfd8 <memcpy>:
 800bfd8:	b510      	push	{r4, lr}
 800bfda:	1e43      	subs	r3, r0, #1
 800bfdc:	440a      	add	r2, r1
 800bfde:	4291      	cmp	r1, r2
 800bfe0:	d100      	bne.n	800bfe4 <memcpy+0xc>
 800bfe2:	bd10      	pop	{r4, pc}
 800bfe4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfe8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfec:	e7f7      	b.n	800bfde <memcpy+0x6>

0800bfee <memset>:
 800bfee:	4402      	add	r2, r0
 800bff0:	4603      	mov	r3, r0
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d100      	bne.n	800bff8 <memset+0xa>
 800bff6:	4770      	bx	lr
 800bff8:	f803 1b01 	strb.w	r1, [r3], #1
 800bffc:	e7f9      	b.n	800bff2 <memset+0x4>
	...

0800c000 <_init>:
 800c000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c002:	bf00      	nop
 800c004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c006:	bc08      	pop	{r3}
 800c008:	469e      	mov	lr, r3
 800c00a:	4770      	bx	lr

0800c00c <_fini>:
 800c00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c00e:	bf00      	nop
 800c010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c012:	bc08      	pop	{r3}
 800c014:	469e      	mov	lr, r3
 800c016:	4770      	bx	lr
