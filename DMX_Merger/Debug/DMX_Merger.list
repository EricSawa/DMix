
DMX_Merger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d434  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800d5d4  0800d5d4  0001d5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d844  0800d844  0001d844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d84c  0800d84c  0001d84c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d850  0800d850  0001d850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000014c4  20000000  0800d854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000abd0  200014c4  0800ed18  000214c4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000c094  0800ed18  0002c094  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000214c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a24c  00000000  00000000  000214f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000675e  00000000  00000000  0005b740  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001f68  00000000  00000000  00061ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001c68  00000000  00000000  00063e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010c8a  00000000  00000000  00065a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00008f30  00000000  00000000  000766fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007f62a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000841c  00000000  00000000  0007f6a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200014c4 	.word	0x200014c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d5bc 	.word	0x0800d5bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200014c8 	.word	0x200014c8
 80001dc:	0800d5bc 	.word	0x0800d5bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <app_btn_init>:
static void getOthSwitches(eal_task_Task *self);
static void debounceOthSwitches(eal_task_Task *self);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_btn_init(eal_task_Task *self){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	memset(othButtonState, 0, sizeof(othButtonState));
 80005a8:	2205      	movs	r2, #5
 80005aa:	2100      	movs	r1, #0
 80005ac:	480d      	ldr	r0, [pc, #52]	; (80005e4 <app_btn_init+0x44>)
 80005ae:	f00c fafe 	bl	800cbae <memset>
	memset(othButtonBuffer, 0, sizeof(othButtonBuffer));
 80005b2:	2205      	movs	r2, #5
 80005b4:	2100      	movs	r1, #0
 80005b6:	480c      	ldr	r0, [pc, #48]	; (80005e8 <app_btn_init+0x48>)
 80005b8:	f00c faf9 	bl	800cbae <memset>
	memset(othButtonTime, 0, sizeof(othButtonTime));
 80005bc:	220a      	movs	r2, #10
 80005be:	2100      	movs	r1, #0
 80005c0:	480a      	ldr	r0, [pc, #40]	; (80005ec <app_btn_init+0x4c>)
 80005c2:	f00c faf4 	bl	800cbae <memset>
	memset(othButtonHoldTimeShort, 0, sizeof(othButtonHoldTimeShort));
 80005c6:	220a      	movs	r2, #10
 80005c8:	2100      	movs	r1, #0
 80005ca:	4809      	ldr	r0, [pc, #36]	; (80005f0 <app_btn_init+0x50>)
 80005cc:	f00c faef 	bl	800cbae <memset>
	memset(othButtonHoldTimeLong, 0, sizeof(othButtonHoldTimeLong));
 80005d0:	220a      	movs	r2, #10
 80005d2:	2100      	movs	r1, #0
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <app_btn_init+0x54>)
 80005d6:	f00c faea 	bl	800cbae <memset>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200014e0 	.word	0x200014e0
 80005e8:	200014e8 	.word	0x200014e8
 80005ec:	200014f0 	.word	0x200014f0
 80005f0:	200014fc 	.word	0x200014fc
 80005f4:	20001508 	.word	0x20001508

080005f8 <app_btn_process>:

void app_btn_process(eal_task_Task *self){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	f083 0301 	eor.w	r3, r3, #1
 8000608:	b2db      	uxtb	r3, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	d111      	bne.n	8000632 <app_btn_process+0x3a>
	if(!cyclicFlag) return;
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <app_btn_process+0x48>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	f083 0301 	eor.w	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d10b      	bne.n	8000636 <app_btn_process+0x3e>
	getOthSwitches(self);
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f83e 	bl	80006a0 <getOthSwitches>
	debounceOthSwitches(self);
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f8b9 	bl	800079c <debounceOthSwitches>
	cyclicFlag = false;
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <app_btn_process+0x48>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	e002      	b.n	8000638 <app_btn_process+0x40>
	if(!self->enable) return;
 8000632:	bf00      	nop
 8000634:	e000      	b.n	8000638 <app_btn_process+0x40>
	if(!cyclicFlag) return;
 8000636:	bf00      	nop
}
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20001512 	.word	0x20001512

08000644 <app_btn_cyclic1ms>:

void app_btn_cyclic1ms(eal_task_Task *self, bool stat){
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <app_btn_cyclic1ms+0x3c>)
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
	if(internalTimer > 0)--internalTimer;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <app_btn_cyclic1ms+0x40>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	b21b      	sxth	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	dd08      	ble.n	8000672 <app_btn_cyclic1ms+0x2e>
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <app_btn_cyclic1ms+0x40>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	b21b      	sxth	r3, r3
 8000666:	b29b      	uxth	r3, r3
 8000668:	3b01      	subs	r3, #1
 800066a:	b29b      	uxth	r3, r3
 800066c:	b21a      	sxth	r2, r3
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <app_btn_cyclic1ms+0x40>)
 8000670:	801a      	strh	r2, [r3, #0]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20001512 	.word	0x20001512
 8000684:	20001514 	.word	0x20001514

08000688 <app_btn_receiveMsg>:

void app_btn_receiveMsg(eal_task_Task *self, msg_Message *message){
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]

}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
	...

080006a0 <getOthSwitches>:

/* Helper ----------------------------------------------------------------------*/
static void getOthSwitches(eal_task_Task *self){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(I_GPIO1_GPIO_Port, I_GPIO1_Pin) == 0) 	othButtonBuffer[0] |= (1 << 0); else othButtonBuffer[0] &= ~(1 << 0);
 80006a8:	2110      	movs	r1, #16
 80006aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ae:	f003 f941 	bl	8003934 <HAL_GPIO_ReadPin>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d107      	bne.n	80006c8 <getOthSwitches+0x28>
 80006b8:	4b37      	ldr	r3, [pc, #220]	; (8000798 <getOthSwitches+0xf8>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b35      	ldr	r3, [pc, #212]	; (8000798 <getOthSwitches+0xf8>)
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	e006      	b.n	80006d6 <getOthSwitches+0x36>
 80006c8:	4b33      	ldr	r3, [pc, #204]	; (8000798 <getOthSwitches+0xf8>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	f023 0301 	bic.w	r3, r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b31      	ldr	r3, [pc, #196]	; (8000798 <getOthSwitches+0xf8>)
 80006d4:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO2_GPIO_Port, I_GPIO2_Pin) == 0) 	othButtonBuffer[0] |= (1 << 1); else othButtonBuffer[0] &= ~(1 << 1);
 80006d6:	2120      	movs	r1, #32
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006dc:	f003 f92a 	bl	8003934 <HAL_GPIO_ReadPin>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d107      	bne.n	80006f6 <getOthSwitches+0x56>
 80006e6:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <getOthSwitches+0xf8>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	f043 0302 	orr.w	r3, r3, #2
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <getOthSwitches+0xf8>)
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	e006      	b.n	8000704 <getOthSwitches+0x64>
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <getOthSwitches+0xf8>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	f023 0302 	bic.w	r3, r3, #2
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b25      	ldr	r3, [pc, #148]	; (8000798 <getOthSwitches+0xf8>)
 8000702:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO3_GPIO_Port, I_GPIO3_Pin) == 0) 	othButtonBuffer[0] |= (1 << 2); else othButtonBuffer[0] &= ~(1 << 2);
 8000704:	2140      	movs	r1, #64	; 0x40
 8000706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070a:	f003 f913 	bl	8003934 <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d107      	bne.n	8000724 <getOthSwitches+0x84>
 8000714:	4b20      	ldr	r3, [pc, #128]	; (8000798 <getOthSwitches+0xf8>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <getOthSwitches+0xf8>)
 8000720:	701a      	strb	r2, [r3, #0]
 8000722:	e006      	b.n	8000732 <getOthSwitches+0x92>
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <getOthSwitches+0xf8>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	f023 0304 	bic.w	r3, r3, #4
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <getOthSwitches+0xf8>)
 8000730:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO4_GPIO_Port, I_GPIO4_Pin) == 0) 	othButtonBuffer[0] |= (1 << 3); else othButtonBuffer[0] &= ~(1 << 3);
 8000732:	2180      	movs	r1, #128	; 0x80
 8000734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000738:	f003 f8fc 	bl	8003934 <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d107      	bne.n	8000752 <getOthSwitches+0xb2>
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <getOthSwitches+0xf8>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	f043 0308 	orr.w	r3, r3, #8
 800074a:	b2da      	uxtb	r2, r3
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <getOthSwitches+0xf8>)
 800074e:	701a      	strb	r2, [r3, #0]
 8000750:	e006      	b.n	8000760 <getOthSwitches+0xc0>
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <getOthSwitches+0xf8>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	f023 0308 	bic.w	r3, r3, #8
 800075a:	b2da      	uxtb	r2, r3
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <getOthSwitches+0xf8>)
 800075e:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_SW2_GPIO_Port, I_SW2_Pin) == 0) 		othButtonBuffer[0] |= (1 << 4); else othButtonBuffer[0] &= ~(1 << 4);
 8000760:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000768:	f003 f8e4 	bl	8003934 <HAL_GPIO_ReadPin>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d107      	bne.n	8000782 <getOthSwitches+0xe2>
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <getOthSwitches+0xf8>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	f043 0310 	orr.w	r3, r3, #16
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <getOthSwitches+0xf8>)
 800077e:	701a      	strb	r2, [r3, #0]

}
 8000780:	e006      	b.n	8000790 <getOthSwitches+0xf0>
	if(HAL_GPIO_ReadPin(I_SW2_GPIO_Port, I_SW2_Pin) == 0) 		othButtonBuffer[0] |= (1 << 4); else othButtonBuffer[0] &= ~(1 << 4);
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <getOthSwitches+0xf8>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	f023 0310 	bic.w	r3, r3, #16
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b02      	ldr	r3, [pc, #8]	; (8000798 <getOthSwitches+0xf8>)
 800078e:	701a      	strb	r2, [r3, #0]
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200014e8 	.word	0x200014e8

0800079c <debounceOthSwitches>:

static void debounceOthSwitches(eal_task_Task *self){
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	; 0x30
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	static uint8_t swNmbr = 0;
	if(swIndex[swNmbr] != app_btn_NONE){
 80007a4:	4ba3      	ldr	r3, [pc, #652]	; (8000a34 <debounceOthSwitches+0x298>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4ba3      	ldr	r3, [pc, #652]	; (8000a38 <debounceOthSwitches+0x29c>)
 80007ac:	5c9b      	ldrb	r3, [r3, r2]
 80007ae:	2bff      	cmp	r3, #255	; 0xff
 80007b0:	f000 812f 	beq.w	8000a12 <debounceOthSwitches+0x276>
		uint16_t msk = 1 << (swIndex[swNmbr]&0xf);
 80007b4:	4b9f      	ldr	r3, [pc, #636]	; (8000a34 <debounceOthSwitches+0x298>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b9f      	ldr	r3, [pc, #636]	; (8000a38 <debounceOthSwitches+0x29c>)
 80007bc:	5c9b      	ldrb	r3, [r3, r2]
 80007be:	f003 030f 	and.w	r3, r3, #15
 80007c2:	2201      	movs	r2, #1
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint8_t  idx = (swIndex[swNmbr]&0xf0) >> 4;
 80007ca:	4b9a      	ldr	r3, [pc, #616]	; (8000a34 <debounceOthSwitches+0x298>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b99      	ldr	r3, [pc, #612]	; (8000a38 <debounceOthSwitches+0x29c>)
 80007d2:	5c9b      	ldrb	r3, [r3, r2]
 80007d4:	091b      	lsrs	r3, r3, #4
 80007d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (!(othButtonBuffer[idx] & msk)){ 			/*button is released*/
 80007da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80007de:	4a97      	ldr	r2, [pc, #604]	; (8000a3c <debounceOthSwitches+0x2a0>)
 80007e0:	5cd3      	ldrb	r3, [r2, r3]
 80007e2:	461a      	mov	r2, r3
 80007e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007e6:	4013      	ands	r3, r2
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d15d      	bne.n	80008a8 <debounceOthSwitches+0x10c>
			if(othButtonTime[swNmbr] > 0){
 80007ec:	4b91      	ldr	r3, [pc, #580]	; (8000a34 <debounceOthSwitches+0x298>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b93      	ldr	r3, [pc, #588]	; (8000a40 <debounceOthSwitches+0x2a4>)
 80007f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	f000 80a4 	beq.w	8000946 <debounceOthSwitches+0x1aa>
				--othButtonTime[swNmbr];
 80007fe:	4b8d      	ldr	r3, [pc, #564]	; (8000a34 <debounceOthSwitches+0x298>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	4a8f      	ldr	r2, [pc, #572]	; (8000a40 <debounceOthSwitches+0x2a4>)
 8000804:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000808:	3a01      	subs	r2, #1
 800080a:	b291      	uxth	r1, r2
 800080c:	4a8c      	ldr	r2, [pc, #560]	; (8000a40 <debounceOthSwitches+0x2a4>)
 800080e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(othButtonTime[swNmbr] <= 0){
 8000812:	4b88      	ldr	r3, [pc, #544]	; (8000a34 <debounceOthSwitches+0x298>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	4b89      	ldr	r3, [pc, #548]	; (8000a40 <debounceOthSwitches+0x2a4>)
 800081a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800081e:	2b00      	cmp	r3, #0
 8000820:	f040 8091 	bne.w	8000946 <debounceOthSwitches+0x1aa>
					if(othButtonState[idx] & msk){
 8000824:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000828:	4a86      	ldr	r2, [pc, #536]	; (8000a44 <debounceOthSwitches+0x2a8>)
 800082a:	5cd3      	ldrb	r3, [r2, r3]
 800082c:	461a      	mov	r2, r3
 800082e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000830:	4013      	ands	r3, r2
 8000832:	2b00      	cmp	r3, #0
 8000834:	f000 8087 	beq.w	8000946 <debounceOthSwitches+0x1aa>
						if(self->sendMsg != NULL){
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d014      	beq.n	800086a <debounceOthSwitches+0xce>
							msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_RELEASED, 0, 0);
 8000840:	4b7c      	ldr	r3, [pc, #496]	; (8000a34 <debounceOthSwitches+0x298>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b29b      	uxth	r3, r3
 8000846:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000848:	2300      	movs	r3, #0
 800084a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800084c:	2342      	movs	r3, #66	; 0x42
 800084e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000852:	2300      	movs	r3, #0
 8000854:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000858:	2300      	movs	r3, #0
 800085a:	857b      	strh	r3, [r7, #42]	; 0x2a
							self->sendMsg(self, &newMessage);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	695b      	ldr	r3, [r3, #20]
 8000860:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000864:	4611      	mov	r1, r2
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	4798      	blx	r3
						}
						othButtonState[idx] &=~msk;
 800086a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800086e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000872:	4974      	ldr	r1, [pc, #464]	; (8000a44 <debounceOthSwitches+0x2a8>)
 8000874:	5c8a      	ldrb	r2, [r1, r2]
 8000876:	b251      	sxtb	r1, r2
 8000878:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800087a:	b252      	sxtb	r2, r2
 800087c:	43d2      	mvns	r2, r2
 800087e:	b252      	sxtb	r2, r2
 8000880:	400a      	ands	r2, r1
 8000882:	b252      	sxtb	r2, r2
 8000884:	b2d1      	uxtb	r1, r2
 8000886:	4a6f      	ldr	r2, [pc, #444]	; (8000a44 <debounceOthSwitches+0x2a8>)
 8000888:	54d1      	strb	r1, [r2, r3]
						othButtonHoldTimeShort[swNmbr] = 0;
 800088a:	4b6a      	ldr	r3, [pc, #424]	; (8000a34 <debounceOthSwitches+0x298>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	4b6d      	ldr	r3, [pc, #436]	; (8000a48 <debounceOthSwitches+0x2ac>)
 8000892:	2100      	movs	r1, #0
 8000894:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						othButtonHoldTimeLong[swNmbr] = 0;
 8000898:	4b66      	ldr	r3, [pc, #408]	; (8000a34 <debounceOthSwitches+0x298>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	4b6b      	ldr	r3, [pc, #428]	; (8000a4c <debounceOthSwitches+0x2b0>)
 80008a0:	2100      	movs	r1, #0
 80008a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80008a6:	e04e      	b.n	8000946 <debounceOthSwitches+0x1aa>
					}
				}
			}
		}else{					 						/*button is down*/
			if(othButtonTime[swNmbr] < app_cfg_btn_TIME_DEBOUNCE){
 80008a8:	4b62      	ldr	r3, [pc, #392]	; (8000a34 <debounceOthSwitches+0x298>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b64      	ldr	r3, [pc, #400]	; (8000a40 <debounceOthSwitches+0x2a4>)
 80008b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	d846      	bhi.n	8000946 <debounceOthSwitches+0x1aa>
				++othButtonTime[swNmbr];
 80008b8:	4b5e      	ldr	r3, [pc, #376]	; (8000a34 <debounceOthSwitches+0x298>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4a60      	ldr	r2, [pc, #384]	; (8000a40 <debounceOthSwitches+0x2a4>)
 80008be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80008c2:	3201      	adds	r2, #1
 80008c4:	b291      	uxth	r1, r2
 80008c6:	4a5e      	ldr	r2, [pc, #376]	; (8000a40 <debounceOthSwitches+0x2a4>)
 80008c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(othButtonTime[swNmbr] >= app_cfg_btn_TIME_DEBOUNCE){
 80008cc:	4b59      	ldr	r3, [pc, #356]	; (8000a34 <debounceOthSwitches+0x298>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b5b      	ldr	r3, [pc, #364]	; (8000a40 <debounceOthSwitches+0x2a4>)
 80008d4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80008d8:	2b03      	cmp	r3, #3
 80008da:	d934      	bls.n	8000946 <debounceOthSwitches+0x1aa>
					if(self->sendMsg != NULL){
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d014      	beq.n	800090e <debounceOthSwitches+0x172>
						msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_PRESSED, 0, 0);
 80008e4:	4b53      	ldr	r3, [pc, #332]	; (8000a34 <debounceOthSwitches+0x298>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	83bb      	strh	r3, [r7, #28]
 80008ec:	2301      	movs	r3, #1
 80008ee:	83fb      	strh	r3, [r7, #30]
 80008f0:	2342      	movs	r3, #66	; 0x42
 80008f2:	f887 3020 	strb.w	r3, [r7, #32]
 80008f6:	2300      	movs	r3, #0
 80008f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80008fc:	2300      	movs	r3, #0
 80008fe:	847b      	strh	r3, [r7, #34]	; 0x22
						self->sendMsg(self, &newMessage);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	f107 021c 	add.w	r2, r7, #28
 8000908:	4611      	mov	r1, r2
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	4798      	blx	r3
					}
					othButtonState[idx] |= msk;
 800090e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000912:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000916:	494b      	ldr	r1, [pc, #300]	; (8000a44 <debounceOthSwitches+0x2a8>)
 8000918:	5c89      	ldrb	r1, [r1, r2]
 800091a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800091c:	b2d2      	uxtb	r2, r2
 800091e:	430a      	orrs	r2, r1
 8000920:	b2d1      	uxtb	r1, r2
 8000922:	4a48      	ldr	r2, [pc, #288]	; (8000a44 <debounceOthSwitches+0x2a8>)
 8000924:	54d1      	strb	r1, [r2, r3]
					othButtonHoldTimeShort[swNmbr] = app_cfg_btn_TIME_HOLD_SHORT;
 8000926:	4b43      	ldr	r3, [pc, #268]	; (8000a34 <debounceOthSwitches+0x298>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	461a      	mov	r2, r3
 800092c:	4b46      	ldr	r3, [pc, #280]	; (8000a48 <debounceOthSwitches+0x2ac>)
 800092e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000932:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					othButtonHoldTimeLong[swNmbr] = app_cfg_btn_TIME_HOLD_LONG;
 8000936:	4b3f      	ldr	r3, [pc, #252]	; (8000a34 <debounceOthSwitches+0x298>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <debounceOthSwitches+0x2b0>)
 800093e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000942:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				}
			}
		}
		if(othButtonHoldTimeShort[swNmbr]>0){
 8000946:	4b3b      	ldr	r3, [pc, #236]	; (8000a34 <debounceOthSwitches+0x298>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	4b3e      	ldr	r3, [pc, #248]	; (8000a48 <debounceOthSwitches+0x2ac>)
 800094e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000952:	2b00      	cmp	r3, #0
 8000954:	dd2a      	ble.n	80009ac <debounceOthSwitches+0x210>
			--othButtonHoldTimeShort[swNmbr];
 8000956:	4b37      	ldr	r3, [pc, #220]	; (8000a34 <debounceOthSwitches+0x298>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4a3b      	ldr	r2, [pc, #236]	; (8000a48 <debounceOthSwitches+0x2ac>)
 800095c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000960:	b292      	uxth	r2, r2
 8000962:	3a01      	subs	r2, #1
 8000964:	b292      	uxth	r2, r2
 8000966:	b211      	sxth	r1, r2
 8000968:	4a37      	ldr	r2, [pc, #220]	; (8000a48 <debounceOthSwitches+0x2ac>)
 800096a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(othButtonHoldTimeShort[swNmbr] == 0) {
 800096e:	4b31      	ldr	r3, [pc, #196]	; (8000a34 <debounceOthSwitches+0x298>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <debounceOthSwitches+0x2ac>)
 8000976:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d116      	bne.n	80009ac <debounceOthSwitches+0x210>
				if(self->sendMsg != NULL){
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d012      	beq.n	80009ac <debounceOthSwitches+0x210>
					msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_HOLD_SHORT, 0, 0);
 8000986:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <debounceOthSwitches+0x298>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b29b      	uxth	r3, r3
 800098c:	82bb      	strh	r3, [r7, #20]
 800098e:	2302      	movs	r3, #2
 8000990:	82fb      	strh	r3, [r7, #22]
 8000992:	2342      	movs	r3, #66	; 0x42
 8000994:	763b      	strb	r3, [r7, #24]
 8000996:	2300      	movs	r3, #0
 8000998:	767b      	strb	r3, [r7, #25]
 800099a:	2300      	movs	r3, #0
 800099c:	837b      	strh	r3, [r7, #26]
					self->sendMsg(self, &newMessage);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f107 0214 	add.w	r2, r7, #20
 80009a6:	4611      	mov	r1, r2
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	4798      	blx	r3
				}
			}
		}
		if(othButtonHoldTimeLong[swNmbr]>0){
 80009ac:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <debounceOthSwitches+0x298>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <debounceOthSwitches+0x2b0>)
 80009b4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	dd2a      	ble.n	8000a12 <debounceOthSwitches+0x276>
			--othButtonHoldTimeLong[swNmbr];
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <debounceOthSwitches+0x298>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <debounceOthSwitches+0x2b0>)
 80009c2:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80009c6:	b292      	uxth	r2, r2
 80009c8:	3a01      	subs	r2, #1
 80009ca:	b292      	uxth	r2, r2
 80009cc:	b211      	sxth	r1, r2
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <debounceOthSwitches+0x2b0>)
 80009d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(othButtonHoldTimeLong[swNmbr] == 0) {
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <debounceOthSwitches+0x298>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <debounceOthSwitches+0x2b0>)
 80009dc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d116      	bne.n	8000a12 <debounceOthSwitches+0x276>
				if(self->sendMsg != NULL){
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d012      	beq.n	8000a12 <debounceOthSwitches+0x276>
					msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_HOLD_LONG, 0, 0);
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <debounceOthSwitches+0x298>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	81bb      	strh	r3, [r7, #12]
 80009f4:	2303      	movs	r3, #3
 80009f6:	81fb      	strh	r3, [r7, #14]
 80009f8:	2342      	movs	r3, #66	; 0x42
 80009fa:	743b      	strb	r3, [r7, #16]
 80009fc:	2300      	movs	r3, #0
 80009fe:	747b      	strb	r3, [r7, #17]
 8000a00:	2300      	movs	r3, #0
 8000a02:	827b      	strh	r3, [r7, #18]
					self->sendMsg(self, &newMessage);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	695b      	ldr	r3, [r3, #20]
 8000a08:	f107 020c 	add.w	r2, r7, #12
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	4798      	blx	r3
				}
			}
		}
	}
	if(++swNmbr >= (app_cfg_NMBR_BTNS))swNmbr = 0;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <debounceOthSwitches+0x298>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <debounceOthSwitches+0x298>)
 8000a1c:	701a      	strb	r2, [r3, #0]
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <debounceOthSwitches+0x298>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	d902      	bls.n	8000a2c <debounceOthSwitches+0x290>
 8000a26:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <debounceOthSwitches+0x298>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	3730      	adds	r7, #48	; 0x30
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20001516 	.word	0x20001516
 8000a38:	0800d6b4 	.word	0x0800d6b4
 8000a3c:	200014e8 	.word	0x200014e8
 8000a40:	200014f0 	.word	0x200014f0
 8000a44:	200014e0 	.word	0x200014e0
 8000a48:	200014fc 	.word	0x200014fc
 8000a4c:	20001508 	.word	0x20001508

08000a50 <app_dmx_init>:
app_dmx_Merge dmxMerge = app_dmx_MERGE_ACTIVE;
app_dmx_MergeMode dmxMergeMode = app_dmx_MERGE_MODE_HTP;
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_dmx_init(eal_task_Task *self){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	dmxMerge = app_dmx_MERGE_ACTIVE;
 8000a58:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <app_dmx_init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
	dmxMergeMode = app_dmx_MERGE_MODE_HTP;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <app_dmx_init+0x78>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]

	dmx_registerCallback(&dmx1Out, dmx1TransmitterCallback);
 8000a64:	4919      	ldr	r1, [pc, #100]	; (8000acc <app_dmx_init+0x7c>)
 8000a66:	481a      	ldr	r0, [pc, #104]	; (8000ad0 <app_dmx_init+0x80>)
 8000a68:	f008 fa87 	bl	8008f7a <dmx_registerCallback>
	dmx_init(&dmx1Out);
 8000a6c:	4818      	ldr	r0, [pc, #96]	; (8000ad0 <app_dmx_init+0x80>)
 8000a6e:	f008 fa93 	bl	8008f98 <dmx_init>
	dmx_txStart(&dmx1Out);
 8000a72:	4817      	ldr	r0, [pc, #92]	; (8000ad0 <app_dmx_init+0x80>)
 8000a74:	f008 fb66 	bl	8009144 <dmx_txStart>

	dmx_registerCallback(&dmx2In, dmx2ReceiverCallback);
 8000a78:	4916      	ldr	r1, [pc, #88]	; (8000ad4 <app_dmx_init+0x84>)
 8000a7a:	4817      	ldr	r0, [pc, #92]	; (8000ad8 <app_dmx_init+0x88>)
 8000a7c:	f008 fa7d 	bl	8008f7a <dmx_registerCallback>
	if(dmxMerge == app_dmx_MERGE_ACTIVE){
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <app_dmx_init+0x74>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d105      	bne.n	8000a94 <app_dmx_init+0x44>
		dmx_init(&dmx2In);
 8000a88:	4813      	ldr	r0, [pc, #76]	; (8000ad8 <app_dmx_init+0x88>)
 8000a8a:	f008 fa85 	bl	8008f98 <dmx_init>
		dmx_rxStart(&dmx2In);
 8000a8e:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <app_dmx_init+0x88>)
 8000a90:	f008 fb6a 	bl	8009168 <dmx_rxStart>
	}

	HAL_GPIO_WritePin(O_USART1_DIR_GPIO_Port, O_USART1_DIR_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9a:	4810      	ldr	r0, [pc, #64]	; (8000adc <app_dmx_init+0x8c>)
 8000a9c:	f002 ff62 	bl	8003964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(O_USART2_DIR_GPIO_Port, O_USART2_DIR_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2104      	movs	r1, #4
 8000aa4:	480d      	ldr	r0, [pc, #52]	; (8000adc <app_dmx_init+0x8c>)
 8000aa6:	f002 ff5d 	bl	8003964 <HAL_GPIO_WritePin>

	memset(dmxModified, 0, sizeof(dmxModified));
 8000aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aae:	2100      	movs	r1, #0
 8000ab0:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <app_dmx_init+0x90>)
 8000ab2:	f00c f87c 	bl	800cbae <memset>
	dmxTxComplete = false;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <app_dmx_init+0x94>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20001b1d 	.word	0x20001b1d
 8000ac8:	20001b1e 	.word	0x20001b1e
 8000acc:	08000c81 	.word	0x08000c81
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	08000ca5 	.word	0x08000ca5
 8000ad8:	2000005c 	.word	0x2000005c
 8000adc:	48000800 	.word	0x48000800
 8000ae0:	2000191c 	.word	0x2000191c
 8000ae4:	20001b1c 	.word	0x20001b1c

08000ae8 <app_dmx_process>:

void app_dmx_process(eal_task_Task *self){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	f083 0301 	eor.w	r3, r3, #1
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d11e      	bne.n	8000b3c <app_dmx_process+0x54>
	if(!cyclicFlag) return;
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <app_dmx_process+0x60>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	f083 0301 	eor.w	r3, r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d118      	bne.n	8000b40 <app_dmx_process+0x58>
	/*Do everything what you want to do*/
	dmx_loop(&dmx1Out);
 8000b0e:	480f      	ldr	r0, [pc, #60]	; (8000b4c <app_dmx_process+0x64>)
 8000b10:	f008 fa8c 	bl	800902c <dmx_loop>
	/*Receive makes only sense if merge is enabled*/
	if(dmxMerge == app_dmx_MERGE_ACTIVE) dmx_loop(&dmx2In);
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <app_dmx_process+0x68>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <app_dmx_process+0x3a>
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <app_dmx_process+0x6c>)
 8000b1e:	f008 fa85 	bl	800902c <dmx_loop>

	if(dmxTxComplete){updateDmxOut(); dmxTxComplete = false;}
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <app_dmx_process+0x70>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d004      	beq.n	8000b34 <app_dmx_process+0x4c>
 8000b2a:	f000 f84b 	bl	8000bc4 <updateDmxOut>
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <app_dmx_process+0x70>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]

	cyclicFlag = false;
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <app_dmx_process+0x60>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
 8000b3a:	e002      	b.n	8000b42 <app_dmx_process+0x5a>
	if(!self->enable) return;
 8000b3c:	bf00      	nop
 8000b3e:	e000      	b.n	8000b42 <app_dmx_process+0x5a>
	if(!cyclicFlag) return;
 8000b40:	bf00      	nop
}
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20001918 	.word	0x20001918
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20001b1d 	.word	0x20001b1d
 8000b54:	2000005c 	.word	0x2000005c
 8000b58:	20001b1c 	.word	0x20001b1c

08000b5c <app_dmx_cyclic1ms>:

void app_dmx_cyclic1ms(eal_task_Task *self, bool stat){
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <app_dmx_cyclic1ms+0x20>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20001918 	.word	0x20001918

08000b80 <app_dmx_receiveMsg>:

void app_dmx_receiveMsg(eal_task_Task *self, msg_Message *message){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	if(message->type == app_cfg_DMX_MSG){
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	791b      	ldrb	r3, [r3, #4]
 8000b8e:	2b44      	cmp	r3, #68	; 0x44
 8000b90:	d111      	bne.n	8000bb6 <app_dmx_receiveMsg+0x36>
		/*Action parsing*/
		if(msg_isAction(message)){
 8000b92:	6838      	ldr	r0, [r7, #0]
 8000b94:	f008 ff1f 	bl	80099d6 <msg_isAction>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d00b      	beq.n	8000bb6 <app_dmx_receiveMsg+0x36>
			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ba6:	81fb      	strh	r3, [r7, #14]
			dmxModified[idx] = (uint8_t)message->value;
 8000ba8:	89fb      	ldrh	r3, [r7, #14]
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000bb0:	b2d1      	uxtb	r1, r2
 8000bb2:	4a03      	ldr	r2, [pc, #12]	; (8000bc0 <app_dmx_receiveMsg+0x40>)
 8000bb4:	54d1      	strb	r1, [r2, r3]
		}
		/*Event parsing*/
		}else{

		}
}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2000191c 	.word	0x2000191c

08000bc4 <updateDmxOut>:

/* Helper ---------------------------------------------------------------------*/
static void updateDmxOut(){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
	if(dmxMerge == app_dmx_MERGE_ACTIVE){
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <updateDmxOut+0xa8>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d13f      	bne.n	8000c52 <updateDmxOut+0x8e>
		for(int i = 0; i < dmx1Out.universeSize; ++i){
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	e034      	b.n	8000c42 <updateDmxOut+0x7e>
			uint8_t dmxRxValue = dmx2In.universe[i]; /*Atomic operation*/
 8000bd8:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <updateDmxOut+0xac>)
 8000bda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4413      	add	r3, r2
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	70fb      	strb	r3, [r7, #3]
			uint8_t dmxModValue = dmxModified[i]; /*Atomic operation*/
 8000be4:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <updateDmxOut+0xb0>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	70bb      	strb	r3, [r7, #2]
			if(dmxMergeMode == app_dmx_MERGE_MODE_HTP) {	/*Highest takes presence*/
 8000bee:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <updateDmxOut+0xb4>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d111      	bne.n	8000c1a <updateDmxOut+0x56>
				if(dmxRxValue > dmxModValue) dmx1Out.universe[i] = dmxRxValue;
 8000bf6:	78fa      	ldrb	r2, [r7, #3]
 8000bf8:	78bb      	ldrb	r3, [r7, #2]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d906      	bls.n	8000c0c <updateDmxOut+0x48>
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <updateDmxOut+0xb8>)
 8000c00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	78fa      	ldrb	r2, [r7, #3]
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	e017      	b.n	8000c3c <updateDmxOut+0x78>
				else dmx1Out.universe[i] = dmxModValue;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <updateDmxOut+0xb8>)
 8000c0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4413      	add	r3, r2
 8000c14:	78ba      	ldrb	r2, [r7, #2]
 8000c16:	701a      	strb	r2, [r3, #0]
 8000c18:	e010      	b.n	8000c3c <updateDmxOut+0x78>
			}else{								/*Lowest takes presence*/
				if(dmxRxValue < dmxModValue) dmx1Out.universe[i] = dmxRxValue;
 8000c1a:	78fa      	ldrb	r2, [r7, #3]
 8000c1c:	78bb      	ldrb	r3, [r7, #2]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d206      	bcs.n	8000c30 <updateDmxOut+0x6c>
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <updateDmxOut+0xb8>)
 8000c24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	78fa      	ldrb	r2, [r7, #3]
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	e005      	b.n	8000c3c <updateDmxOut+0x78>
				else dmx1Out.universe[i] = dmxModValue;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <updateDmxOut+0xb8>)
 8000c32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4413      	add	r3, r2
 8000c38:	78ba      	ldrb	r2, [r7, #2]
 8000c3a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < dmx1Out.universeSize; ++i){
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <updateDmxOut+0xb8>)
 8000c44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000c48:	461a      	mov	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	dcc3      	bgt.n	8000bd8 <updateDmxOut+0x14>
			}
		}
	}else{ /*If merge is disabled just copy the dmxModified data to output*/
		memcpy(dmx1Out.universe, dmxModified, dmx1Out.universeSize);
	}
}
 8000c50:	e008      	b.n	8000c64 <updateDmxOut+0xa0>
		memcpy(dmx1Out.universe, dmxModified, dmx1Out.universeSize);
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <updateDmxOut+0xb8>)
 8000c54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <updateDmxOut+0xb8>)
 8000c58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4905      	ldr	r1, [pc, #20]	; (8000c74 <updateDmxOut+0xb0>)
 8000c60:	f00b ff9a 	bl	800cb98 <memcpy>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20001b1d 	.word	0x20001b1d
 8000c70:	2000005c 	.word	0x2000005c
 8000c74:	2000191c 	.word	0x2000191c
 8000c78:	20001b1e 	.word	0x20001b1e
 8000c7c:	20000000 	.word	0x20000000

08000c80 <dmx1TransmitterCallback>:

/* Callback's ---------------------------------------------------------------------*/
bool dmx1TransmitterCallback(dmx_cfg_Instance *dmx){
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	bool state = true;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	73fb      	strb	r3, [r7, #15]
	dmxTxComplete = true;
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <dmx1TransmitterCallback+0x20>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
	return state;
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	20001b1c 	.word	0x20001b1c

08000ca4 <dmx2ReceiverCallback>:

bool dmx2ReceiverCallback(dmx_cfg_Instance *dmx){
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	bool state = true;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
	return state;
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <USART1_IRQHandler>:
/* IRQs ---------------------------------------------------------------------*/
void USART1_IRQHandler(void){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	dmx_irqRxInterfaceHandler(&dmx2In);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <USART1_IRQHandler+0x10>)
 8000cc6:	f008 fb43 	bl	8009350 <dmx_irqRxInterfaceHandler>
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000005c 	.word	0x2000005c

08000cd4 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	dmx_irqTxInterfaceHandler(&dmx1Out);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <USART2_IRQHandler+0x10>)
 8000cda:	f008 fac4 	bl	8009266 <dmx_irqTxInterfaceHandler>
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000000 	.word	0x20000000

08000ce8 <app_dmx_preset_init>:
static volatile bool cyclicFlag = false;
static volatile int16_t internalTimer = 0;
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_dmx_preset_init(eal_task_Task *self){
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	e020      	b.n	8000d38 <app_dmx_preset_init+0x50>
		app_model_model.presets[i].relTime_ms = 0;
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <app_dmx_preset_init+0x64>)
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000d00:	fb01 f303 	mul.w	r3, r1, r3
 8000d04:	4413      	add	r3, r2
 8000d06:	2200      	movs	r2, #0
 8000d08:	615a      	str	r2, [r3, #20]
		app_model_model.presets[i].trigger = false;
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <app_dmx_preset_init+0x64>)
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000d14:	fb01 f303 	mul.w	r3, r1, r3
 8000d18:	4413      	add	r3, r2
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	74da      	strb	r2, [r3, #19]
		app_model_model.presets[i].transitionDoneCnt = 0;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <app_dmx_preset_init+0x64>)
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000d28:	fb01 f303 	mul.w	r3, r1, r3
 8000d2c:	4413      	add	r3, r2
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	3301      	adds	r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b09      	cmp	r3, #9
 8000d3c:	dddb      	ble.n	8000cf6 <app_dmx_preset_init+0xe>
	}
}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	200010c0 	.word	0x200010c0

08000d50 <app_dmx_preset_process>:

void app_dmx_preset_process(eal_task_Task *self){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	f083 0301 	eor.w	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 80dc 	bne.w	8000f20 <app_dmx_preset_process+0x1d0>
	if(!cyclicFlag) return;
 8000d68:	4b70      	ldr	r3, [pc, #448]	; (8000f2c <app_dmx_preset_process+0x1dc>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	f083 0301 	eor.w	r3, r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f040 80d5 	bne.w	8000f24 <app_dmx_preset_process+0x1d4>
	/*Do everything what you want to do*/
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	e0c7      	b.n	8000f10 <app_dmx_preset_process+0x1c0>
		if(app_model_model.presets[i].trigger){	/*Preset is triggered and can be executed*/
 8000d80:	4b6b      	ldr	r3, [pc, #428]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000d8a:	fb01 f303 	mul.w	r3, r1, r3
 8000d8e:	4413      	add	r3, r2
 8000d90:	7cdb      	ldrb	r3, [r3, #19]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 80b9 	beq.w	8000f0a <app_dmx_preset_process+0x1ba>
			++app_model_model.presets[i].relTime_ms;
 8000d98:	4b65      	ldr	r3, [pc, #404]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000da2:	fb01 f303 	mul.w	r3, r1, r3
 8000da6:	4413      	add	r3, r2
 8000da8:	695a      	ldr	r2, [r3, #20]
 8000daa:	3201      	adds	r2, #1
 8000dac:	615a      	str	r2, [r3, #20]
			for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	e066      	b.n	8000e82 <app_dmx_preset_process+0x132>
				if(app_model_model.presets[i].presetTransitionSettings[j].enable){
 8000db4:	4b5e      	ldr	r3, [pc, #376]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000dbe:	fb01 f303 	mul.w	r3, r1, r3
 8000dc2:	441a      	add	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	4413      	add	r3, r2
 8000dca:	332d      	adds	r3, #45	; 0x2d
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d054      	beq.n	8000e7c <app_dmx_preset_process+0x12c>
					if(app_model_model.presets[i].presetTransitionStatus[j].transStep == app_dmx_preset_cfg_TRANS_STEP_EXE) performNextTransitionStep(self, i, j);
 8000dd2:	4b57      	ldr	r3, [pc, #348]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000ddc:	fb01 f303 	mul.w	r3, r1, r3
 8000de0:	441a      	add	r2, r3
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	33b0      	adds	r3, #176	; 0xb0
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	4413      	add	r3, r2
 8000dea:	785b      	ldrb	r3, [r3, #1]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d108      	bne.n	8000e02 <app_dmx_preset_process+0xb2>
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	68ba      	ldr	r2, [r7, #8]
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 f924 	bl	8001048 <performNextTransitionStep>
 8000e00:	e03c      	b.n	8000e7c <app_dmx_preset_process+0x12c>
					else if((app_model_model.presets[i].relTime_ms >= app_model_model.presets[i].presetTransitionSettings[j].transDelay_ms) && (app_model_model.presets[i].presetTransitionStatus[j].transStep == app_dmx_preset_cfg_TRANS_STEP_NONE)){
 8000e02:	4b4b      	ldr	r3, [pc, #300]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000e0c:	fb01 f303 	mul.w	r3, r1, r3
 8000e10:	4413      	add	r3, r2
 8000e12:	695a      	ldr	r2, [r3, #20]
 8000e14:	4b46      	ldr	r3, [pc, #280]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000e16:	6859      	ldr	r1, [r3, #4]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8000e1e:	fb00 f303 	mul.w	r3, r0, r3
 8000e22:	4419      	add	r1, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	440b      	add	r3, r1
 8000e2a:	3328      	adds	r3, #40	; 0x28
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d324      	bcc.n	8000e7c <app_dmx_preset_process+0x12c>
 8000e32:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000e3c:	fb01 f303 	mul.w	r3, r1, r3
 8000e40:	441a      	add	r2, r3
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	33b0      	adds	r3, #176	; 0xb0
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	785b      	ldrb	r3, [r3, #1]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d115      	bne.n	8000e7c <app_dmx_preset_process+0x12c>
						app_model_model.presets[i].presetTransitionStatus[j].transStep = app_dmx_preset_cfg_TRANS_STEP_EXE;
 8000e50:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000e5a:	fb01 f303 	mul.w	r3, r1, r3
 8000e5e:	441a      	add	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	33b0      	adds	r3, #176	; 0xb0
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4413      	add	r3, r2
 8000e68:	2201      	movs	r2, #1
 8000e6a:	705a      	strb	r2, [r3, #1]
						performNextTransitionStep(self, i, j);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 f8e6 	bl	8001048 <performNextTransitionStep>
			for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	2b13      	cmp	r3, #19
 8000e86:	dd95      	ble.n	8000db4 <app_dmx_preset_process+0x64>
					}
				}
			}
			if(app_model_model.presets[i].transitionDoneCnt >= app_model_model.presets[i].transitionEnableSize){	/*All transitions are performed*/
 8000e88:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000e92:	fb01 f303 	mul.w	r3, r1, r3
 8000e96:	4413      	add	r3, r2
 8000e98:	699a      	ldr	r2, [r3, #24]
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000e9c:	6859      	ldr	r1, [r3, #4]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8000ea4:	fb00 f303 	mul.w	r3, r0, r3
 8000ea8:	440b      	add	r3, r1
 8000eaa:	69db      	ldr	r3, [r3, #28]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d32c      	bcc.n	8000f0a <app_dmx_preset_process+0x1ba>
				app_model_model.presets[i].transitionDoneCnt = 0;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000eba:	fb01 f303 	mul.w	r3, r1, r3
 8000ebe:	4413      	add	r3, r2
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
				app_model_model.presets[i].trigger = false;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000ece:	fb01 f303 	mul.w	r3, r1, r3
 8000ed2:	4413      	add	r3, r2
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	74da      	strb	r2, [r3, #19]
				app_model_model.presets[i].relTime_ms = 0;
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000ee2:	fb01 f303 	mul.w	r3, r1, r3
 8000ee6:	4413      	add	r3, r2
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
				memset(app_model_model.presets[i].presetTransitionStatus, 0, sizeof(app_model_model.presets[i].presetTransitionStatus));
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000ef6:	fb01 f303 	mul.w	r3, r1, r3
 8000efa:	4413      	add	r3, r2
 8000efc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000f00:	2228      	movs	r2, #40	; 0x28
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f00b fe52 	bl	800cbae <memset>
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b09      	cmp	r3, #9
 8000f14:	f77f af34 	ble.w	8000d80 <app_dmx_preset_process+0x30>
			}
		}
	}
	/*End of everything you want to do*/
	cyclicFlag = false;
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <app_dmx_preset_process+0x1dc>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	e002      	b.n	8000f26 <app_dmx_preset_process+0x1d6>
	if(!self->enable) return;
 8000f20:	bf00      	nop
 8000f22:	e000      	b.n	8000f26 <app_dmx_preset_process+0x1d6>
	if(!cyclicFlag) return;
 8000f24:	bf00      	nop
}
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20001b1f 	.word	0x20001b1f
 8000f30:	200010c0 	.word	0x200010c0

08000f34 <app_dmx_preset_cyclic1ms>:

void app_dmx_preset_cyclic1ms(eal_task_Task *self, bool stat){
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <app_dmx_preset_cyclic1ms+0x20>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20001b1f 	.word	0x20001b1f

08000f58 <app_dmx_preset_receiveMsg>:

void app_dmx_preset_receiveMsg(eal_task_Task *self, msg_Message *message){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	if(message->type == app_cfg_DMX_PRESET_MSG){
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	791b      	ldrb	r3, [r3, #4]
 8000f66:	2b50      	cmp	r3, #80	; 0x50
 8000f68:	d168      	bne.n	800103c <app_dmx_preset_receiveMsg+0xe4>
		/*Action parsing*/
		if(msg_isAction(message)){
 8000f6a:	6838      	ldr	r0, [r7, #0]
 8000f6c:	f008 fd33 	bl	80099d6 <msg_isAction>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d062      	beq.n	800103c <app_dmx_preset_receiveMsg+0xe4>
			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f7e:	82fb      	strh	r3, [r7, #22]
			if(APP_CFG_IS_INDEX_IN_RANGE(idx, app_cfg_dmx_preset_TRIGGER_PRESET_OFFSET_IDX, app_cfg_dmx_preset_TRIGGER_PRESET_OFFSET_IDX+app_cfg_NMBR_PRESETS)){
 8000f80:	8afb      	ldrh	r3, [r7, #22]
 8000f82:	2b09      	cmp	r3, #9
 8000f84:	d85a      	bhi.n	800103c <app_dmx_preset_receiveMsg+0xe4>
				if((message->value == app_cfg_dmx_preset_TRIGGER_ENABLE) && (app_model_model.presets[idx].trigger == false)) {	/*Can be triggered only once*/
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f8c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d153      	bne.n	800103c <app_dmx_preset_receiveMsg+0xe4>
 8000f94:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <app_dmx_preset_receiveMsg+0xec>)
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	8afb      	ldrh	r3, [r7, #22]
 8000f9a:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000f9e:	fb01 f303 	mul.w	r3, r1, r3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	7cdb      	ldrb	r3, [r3, #19]
 8000fa6:	f083 0301 	eor.w	r3, r3, #1
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d045      	beq.n	800103c <app_dmx_preset_receiveMsg+0xe4>
					/*Start preset*/
					app_model_model.presets[idx].trigger = true;
 8000fb0:	4b24      	ldr	r3, [pc, #144]	; (8001044 <app_dmx_preset_receiveMsg+0xec>)
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	8afb      	ldrh	r3, [r7, #22]
 8000fb6:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000fba:	fb01 f303 	mul.w	r3, r1, r3
 8000fbe:	4413      	add	r3, r2
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	74da      	strb	r2, [r3, #19]
					app_model_model.presets[idx].relTime_ms = 0;
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <app_dmx_preset_receiveMsg+0xec>)
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	8afb      	ldrh	r3, [r7, #22]
 8000fca:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000fce:	fb01 f303 	mul.w	r3, r1, r3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
					app_model_model.presets[idx].transitionDoneCnt = 0;
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <app_dmx_preset_receiveMsg+0xec>)
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	8afb      	ldrh	r3, [r7, #22]
 8000fde:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000fe2:	fb01 f303 	mul.w	r3, r1, r3
 8000fe6:	4413      	add	r3, r2
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
					memset(app_model_model.presets[idx].presetTransitionStatus, 0, sizeof(app_model_model.presets[idx].presetTransitionStatus));
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <app_dmx_preset_receiveMsg+0xec>)
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	8afb      	ldrh	r3, [r7, #22]
 8000ff2:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000ff6:	fb01 f303 	mul.w	r3, r1, r3
 8000ffa:	4413      	add	r3, r2
 8000ffc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001000:	2228      	movs	r2, #40	; 0x28
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f00b fdd2 	bl	800cbae <memset>
					if(self->sendMsg != NULL){
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d014      	beq.n	800103c <app_dmx_preset_receiveMsg+0xe4>
						msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_EVENT(idx), app_cfg_dmx_preset_TRIGGER_ENABLE, 0, 0);
 8001012:	8afb      	ldrh	r3, [r7, #22]
 8001014:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001018:	b29b      	uxth	r3, r3
 800101a:	81bb      	strh	r3, [r7, #12]
 800101c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001020:	81fb      	strh	r3, [r7, #14]
 8001022:	2350      	movs	r3, #80	; 0x50
 8001024:	743b      	strb	r3, [r7, #16]
 8001026:	2300      	movs	r3, #0
 8001028:	747b      	strb	r3, [r7, #17]
 800102a:	2300      	movs	r3, #0
 800102c:	827b      	strh	r3, [r7, #18]
						self->sendMsg(self, &newMessage);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f107 020c 	add.w	r2, r7, #12
 8001036:	4611      	mov	r1, r2
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	4798      	blx	r3
		/*Event parsing*/
		}else{

		}
	}
}
 800103c:	bf00      	nop
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200010c0 	.word	0x200010c0

08001048 <performNextTransitionStep>:

/*Helper*/
static void performNextTransitionStep(eal_task_Task *self, uint8_t preset, uint8_t transition){
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	460b      	mov	r3, r1
 8001052:	72fb      	strb	r3, [r7, #11]
 8001054:	4613      	mov	r3, r2
 8001056:	72bb      	strb	r3, [r7, #10]
	float actualTransitionTime = (float)(app_model_model.presets[preset].relTime_ms - app_model_model.presets[preset].presetTransitionSettings[transition].transDelay_ms);
 8001058:	4ba8      	ldr	r3, [pc, #672]	; (80012fc <performNextTransitionStep+0x2b4>)
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	7afb      	ldrb	r3, [r7, #11]
 800105e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001062:	fb01 f303 	mul.w	r3, r1, r3
 8001066:	4413      	add	r3, r2
 8001068:	695a      	ldr	r2, [r3, #20]
 800106a:	4ba4      	ldr	r3, [pc, #656]	; (80012fc <performNextTransitionStep+0x2b4>)
 800106c:	6859      	ldr	r1, [r3, #4]
 800106e:	7afb      	ldrb	r3, [r7, #11]
 8001070:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8001074:	fb00 f303 	mul.w	r3, r0, r3
 8001078:	4419      	add	r1, r3
 800107a:	7abb      	ldrb	r3, [r7, #10]
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	440b      	add	r3, r1
 8001080:	3328      	adds	r3, #40	; 0x28
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800108e:	edc7 7a08 	vstr	s15, [r7, #32]
	uint16_t newVal = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(app_model_model.presets[preset].presetTransitionSettings[transition].transTime_ms == 0){
 8001096:	4b99      	ldr	r3, [pc, #612]	; (80012fc <performNextTransitionStep+0x2b4>)
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	7afb      	ldrb	r3, [r7, #11]
 800109c:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80010a0:	fb01 f303 	mul.w	r3, r1, r3
 80010a4:	441a      	add	r2, r3
 80010a6:	7abb      	ldrb	r3, [r7, #10]
 80010a8:	3302      	adds	r3, #2
 80010aa:	011b      	lsls	r3, r3, #4
 80010ac:	4413      	add	r3, r2
 80010ae:	3304      	adds	r3, #4
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d128      	bne.n	8001108 <performNextTransitionStep+0xc0>
		newVal = app_model_model.presets[preset].presetTransitionSettings[transition].dmxEndVal;
 80010b6:	4b91      	ldr	r3, [pc, #580]	; (80012fc <performNextTransitionStep+0x2b4>)
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	7afb      	ldrb	r3, [r7, #11]
 80010bc:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80010c0:	fb01 f303 	mul.w	r3, r1, r3
 80010c4:	441a      	add	r2, r3
 80010c6:	7abb      	ldrb	r3, [r7, #10]
 80010c8:	3302      	adds	r3, #2
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	4413      	add	r3, r2
 80010ce:	3303      	adds	r3, #3
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	84fb      	strh	r3, [r7, #38]	; 0x26
		++app_model_model.presets[preset].transitionDoneCnt;
 80010d4:	4b89      	ldr	r3, [pc, #548]	; (80012fc <performNextTransitionStep+0x2b4>)
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	7afb      	ldrb	r3, [r7, #11]
 80010da:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80010de:	fb01 f303 	mul.w	r3, r1, r3
 80010e2:	4413      	add	r3, r2
 80010e4:	699a      	ldr	r2, [r3, #24]
 80010e6:	3201      	adds	r2, #1
 80010e8:	619a      	str	r2, [r3, #24]
		app_model_model.presets[preset].presetTransitionStatus[transition].transStep = app_dmx_preset_cfg_TRANS_STEP_DONE;
 80010ea:	4b84      	ldr	r3, [pc, #528]	; (80012fc <performNextTransitionStep+0x2b4>)
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	7afb      	ldrb	r3, [r7, #11]
 80010f0:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80010f4:	fb01 f303 	mul.w	r3, r1, r3
 80010f8:	441a      	add	r2, r3
 80010fa:	7abb      	ldrb	r3, [r7, #10]
 80010fc:	33b0      	adds	r3, #176	; 0xb0
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	2202      	movs	r2, #2
 8001104:	705a      	strb	r2, [r3, #1]
 8001106:	e099      	b.n	800123c <performNextTransitionStep+0x1f4>
	}else{
		//TODO: Perform different ramps
		float diff = (float)((float)app_model_model.presets[preset].presetTransitionSettings[transition].dmxEndVal - (float)app_model_model.presets[preset].presetTransitionSettings[transition].dmxStartVal);
 8001108:	4b7c      	ldr	r3, [pc, #496]	; (80012fc <performNextTransitionStep+0x2b4>)
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	7afb      	ldrb	r3, [r7, #11]
 800110e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001112:	fb01 f303 	mul.w	r3, r1, r3
 8001116:	441a      	add	r2, r3
 8001118:	7abb      	ldrb	r3, [r7, #10]
 800111a:	3302      	adds	r3, #2
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	4413      	add	r3, r2
 8001120:	3303      	adds	r3, #3
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	ee07 3a90 	vmov	s15, r3
 8001128:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800112c:	4b73      	ldr	r3, [pc, #460]	; (80012fc <performNextTransitionStep+0x2b4>)
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	7afb      	ldrb	r3, [r7, #11]
 8001132:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001136:	fb01 f303 	mul.w	r3, r1, r3
 800113a:	441a      	add	r2, r3
 800113c:	7abb      	ldrb	r3, [r7, #10]
 800113e:	3302      	adds	r3, #2
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	4413      	add	r3, r2
 8001144:	3302      	adds	r3, #2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	ee07 3a90 	vmov	s15, r3
 800114c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001154:	edc7 7a07 	vstr	s15, [r7, #28]
		float actualVal = (diff/((float)app_model_model.presets[preset].presetTransitionSettings[transition].transTime_ms)*actualTransitionTime) + (float)app_model_model.presets[preset].presetTransitionSettings[transition].dmxStartVal;
 8001158:	4b68      	ldr	r3, [pc, #416]	; (80012fc <performNextTransitionStep+0x2b4>)
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	7afb      	ldrb	r3, [r7, #11]
 800115e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001162:	fb01 f303 	mul.w	r3, r1, r3
 8001166:	441a      	add	r2, r3
 8001168:	7abb      	ldrb	r3, [r7, #10]
 800116a:	3302      	adds	r3, #2
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	4413      	add	r3, r2
 8001170:	3304      	adds	r3, #4
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800117c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001184:	edd7 7a08 	vldr	s15, [r7, #32]
 8001188:	ee27 7a27 	vmul.f32	s14, s14, s15
 800118c:	4b5b      	ldr	r3, [pc, #364]	; (80012fc <performNextTransitionStep+0x2b4>)
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	7afb      	ldrb	r3, [r7, #11]
 8001192:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001196:	fb01 f303 	mul.w	r3, r1, r3
 800119a:	441a      	add	r2, r3
 800119c:	7abb      	ldrb	r3, [r7, #10]
 800119e:	3302      	adds	r3, #2
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	4413      	add	r3, r2
 80011a4:	3302      	adds	r3, #2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b4:	edc7 7a06 	vstr	s15, [r7, #24]
		newVal = (uint16_t)actualVal;
 80011b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80011bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80011c4:	88bb      	ldrh	r3, [r7, #4]
 80011c6:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(newVal >= app_model_model.presets[preset].presetTransitionSettings[transition].dmxEndVal){
 80011c8:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <performNextTransitionStep+0x2b4>)
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	7afb      	ldrb	r3, [r7, #11]
 80011ce:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80011d2:	fb01 f303 	mul.w	r3, r1, r3
 80011d6:	441a      	add	r2, r3
 80011d8:	7abb      	ldrb	r3, [r7, #10]
 80011da:	3302      	adds	r3, #2
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	4413      	add	r3, r2
 80011e0:	3303      	adds	r3, #3
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d327      	bcc.n	800123c <performNextTransitionStep+0x1f4>
			newVal = app_model_model.presets[preset].presetTransitionSettings[transition].dmxEndVal;
 80011ec:	4b43      	ldr	r3, [pc, #268]	; (80012fc <performNextTransitionStep+0x2b4>)
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	7afb      	ldrb	r3, [r7, #11]
 80011f2:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80011f6:	fb01 f303 	mul.w	r3, r1, r3
 80011fa:	441a      	add	r2, r3
 80011fc:	7abb      	ldrb	r3, [r7, #10]
 80011fe:	3302      	adds	r3, #2
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	4413      	add	r3, r2
 8001204:	3303      	adds	r3, #3
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	84fb      	strh	r3, [r7, #38]	; 0x26
			++app_model_model.presets[preset].transitionDoneCnt;
 800120a:	4b3c      	ldr	r3, [pc, #240]	; (80012fc <performNextTransitionStep+0x2b4>)
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	7afb      	ldrb	r3, [r7, #11]
 8001210:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001214:	fb01 f303 	mul.w	r3, r1, r3
 8001218:	4413      	add	r3, r2
 800121a:	699a      	ldr	r2, [r3, #24]
 800121c:	3201      	adds	r2, #1
 800121e:	619a      	str	r2, [r3, #24]
			app_model_model.presets[preset].presetTransitionStatus[transition].transStep = app_dmx_preset_cfg_TRANS_STEP_DONE;
 8001220:	4b36      	ldr	r3, [pc, #216]	; (80012fc <performNextTransitionStep+0x2b4>)
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	7afb      	ldrb	r3, [r7, #11]
 8001226:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800122a:	fb01 f303 	mul.w	r3, r1, r3
 800122e:	441a      	add	r2, r3
 8001230:	7abb      	ldrb	r3, [r7, #10]
 8001232:	33b0      	adds	r3, #176	; 0xb0
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	2202      	movs	r2, #2
 800123a:	705a      	strb	r2, [r3, #1]
		}
	}
	//If the if request is enabled 0 values can't be send because the comparison will be never true
//	if(newVal != app_model_model.presets[preset].presetTransitionStatus[transition].actualVal) {
		app_model_model.presets[preset].presetTransitionStatus[transition].actualVal = newVal;
 800123c:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <performNextTransitionStep+0x2b4>)
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	7afb      	ldrb	r3, [r7, #11]
 8001242:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001246:	fb01 f303 	mul.w	r3, r1, r3
 800124a:	4413      	add	r3, r2
 800124c:	7aba      	ldrb	r2, [r7, #10]
 800124e:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001250:	b2c9      	uxtb	r1, r1
 8001252:	32b0      	adds	r2, #176	; 0xb0
 8001254:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
		if(self->sendMsg != NULL){
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d02d      	beq.n	80012bc <performNextTransitionStep+0x274>
			msg_Message newMessage = msg_LITERAL(app_cfg_DMX_MSG, msg_ACTION(app_model_model.presets[preset].presetTransitionSettings[transition].dmxCh), app_model_model.presets[preset].presetTransitionStatus[transition].actualVal, 0, 0);
 8001260:	4b26      	ldr	r3, [pc, #152]	; (80012fc <performNextTransitionStep+0x2b4>)
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	7afb      	ldrb	r3, [r7, #11]
 8001266:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800126a:	fb01 f303 	mul.w	r3, r1, r3
 800126e:	441a      	add	r2, r3
 8001270:	7abb      	ldrb	r3, [r7, #10]
 8001272:	3302      	adds	r3, #2
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	4413      	add	r3, r2
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800127e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001282:	b29b      	uxth	r3, r3
 8001284:	823b      	strh	r3, [r7, #16]
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <performNextTransitionStep+0x2b4>)
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	7afb      	ldrb	r3, [r7, #11]
 800128c:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001290:	fb01 f303 	mul.w	r3, r1, r3
 8001294:	4413      	add	r3, r2
 8001296:	7aba      	ldrb	r2, [r7, #10]
 8001298:	32b0      	adds	r2, #176	; 0xb0
 800129a:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	827b      	strh	r3, [r7, #18]
 80012a2:	2344      	movs	r3, #68	; 0x44
 80012a4:	753b      	strb	r3, [r7, #20]
 80012a6:	2300      	movs	r3, #0
 80012a8:	757b      	strb	r3, [r7, #21]
 80012aa:	2300      	movs	r3, #0
 80012ac:	82fb      	strh	r3, [r7, #22]
			self->sendMsg(self, &newMessage);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f107 0210 	add.w	r2, r7, #16
 80012b6:	4611      	mov	r1, r2
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	4798      	blx	r3
		}
		if(app_model_model.presets[preset].presetTransitionStatus[transition].transStep == app_dmx_preset_cfg_TRANS_STEP_DONE) app_model_model.presets[preset].presetTransitionStatus[transition].actualVal = 0;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <performNextTransitionStep+0x2b4>)
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	7afb      	ldrb	r3, [r7, #11]
 80012c2:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80012c6:	fb01 f303 	mul.w	r3, r1, r3
 80012ca:	441a      	add	r2, r3
 80012cc:	7abb      	ldrb	r3, [r7, #10]
 80012ce:	33b0      	adds	r3, #176	; 0xb0
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	785b      	ldrb	r3, [r3, #1]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d10c      	bne.n	80012f4 <performNextTransitionStep+0x2ac>
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <performNextTransitionStep+0x2b4>)
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	7afb      	ldrb	r3, [r7, #11]
 80012e0:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80012e4:	fb01 f303 	mul.w	r3, r1, r3
 80012e8:	4413      	add	r3, r2
 80012ea:	7aba      	ldrb	r2, [r7, #10]
 80012ec:	32b0      	adds	r2, #176	; 0xb0
 80012ee:	2100      	movs	r1, #0
 80012f0:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
//	}
}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200010c0 	.word	0x200010c0

08001300 <app_eeprom_init>:
static void storeFootswitch(uint16_t pageAddress, app_footcontrol_cfg_GpioCfg *footswitch);
static void readFootswitch(uint16_t pageAddress, app_footcontrol_cfg_GpioCfg *footswitch);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_eeprom_init(eal_task_Task *self){
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	eeprom_registerCallback(&eepromDev1, eepromCallback);
 8001308:	490f      	ldr	r1, [pc, #60]	; (8001348 <app_eeprom_init+0x48>)
 800130a:	4810      	ldr	r0, [pc, #64]	; (800134c <app_eeprom_init+0x4c>)
 800130c:	f008 f898 	bl	8009440 <eeprom_registerCallback>
	eeprom_init(&eepromDev1);
 8001310:	480e      	ldr	r0, [pc, #56]	; (800134c <app_eeprom_init+0x4c>)
 8001312:	f008 f8a3 	bl	800945c <eeprom_init>
	secondTimer = 0;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <app_eeprom_init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	801a      	strh	r2, [r3, #0]
	if(readVersion() != EE_FW_VERSION){
 800131c:	f000 f8b0 	bl	8001480 <readVersion>
 8001320:	4602      	mov	r2, r0
 8001322:	f240 1303 	movw	r3, #259	; 0x103
 8001326:	429a      	cmp	r2, r3
 8001328:	d007      	beq.n	800133a <app_eeprom_init+0x3a>
		erase();
 800132a:	f000 f8d1 	bl	80014d0 <erase>
		writeVersion(EE_FW_VERSION);
 800132e:	f240 1003 	movw	r0, #259	; 0x103
 8001332:	f000 f879 	bl	8001428 <writeVersion>
		storeModel();
 8001336:	f000 f915 	bl	8001564 <storeModel>
	}
	readModel();
 800133a:	f000 f959 	bl	80015f0 <readModel>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	08001985 	.word	0x08001985
 800134c:	200000b8 	.word	0x200000b8
 8001350:	20001b24 	.word	0x20001b24

08001354 <app_eeprom_process>:

void app_eeprom_process(eal_task_Task *self){
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	f083 0301 	eor.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d123      	bne.n	80013b2 <app_eeprom_process+0x5e>
	if(!cyclicFlag) return;
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <app_eeprom_process+0x6c>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	f083 0301 	eor.w	r3, r3, #1
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d11d      	bne.n	80013b6 <app_eeprom_process+0x62>
	if(++secondTimer == 1000){
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <app_eeprom_process+0x70>)
 800137c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001380:	b29b      	uxth	r3, r3
 8001382:	3301      	adds	r3, #1
 8001384:	b29b      	uxth	r3, r3
 8001386:	b21a      	sxth	r2, r3
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <app_eeprom_process+0x70>)
 800138a:	801a      	strh	r2, [r3, #0]
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <app_eeprom_process+0x70>)
 800138e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001396:	d108      	bne.n	80013aa <app_eeprom_process+0x56>
		secondTimer = 0;
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <app_eeprom_process+0x70>)
 800139a:	2200      	movs	r2, #0
 800139c:	801a      	strh	r2, [r3, #0]
		if(app_model_model.dirty) storeModel();
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <app_eeprom_process+0x74>)
 80013a0:	7c1b      	ldrb	r3, [r3, #16]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <app_eeprom_process+0x56>
 80013a6:	f000 f8dd 	bl	8001564 <storeModel>
	}

	cyclicFlag = false;
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <app_eeprom_process+0x6c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	e002      	b.n	80013b8 <app_eeprom_process+0x64>
	if(!self->enable) return;
 80013b2:	bf00      	nop
 80013b4:	e000      	b.n	80013b8 <app_eeprom_process+0x64>
	if(!cyclicFlag) return;
 80013b6:	bf00      	nop
}
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20001b20 	.word	0x20001b20
 80013c4:	20001b24 	.word	0x20001b24
 80013c8:	200010c0 	.word	0x200010c0

080013cc <app_eeprom_cyclic1ms>:

void app_eeprom_cyclic1ms(eal_task_Task *self, bool stat){
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <app_eeprom_cyclic1ms+0x3c>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
	if(internalTimer > 0)--internalTimer;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <app_eeprom_cyclic1ms+0x40>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	dd08      	ble.n	80013fa <app_eeprom_cyclic1ms+0x2e>
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <app_eeprom_cyclic1ms+0x40>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	3b01      	subs	r3, #1
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <app_eeprom_cyclic1ms+0x40>)
 80013f8:	801a      	strh	r2, [r3, #0]
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20001b20 	.word	0x20001b20
 800140c:	20001b22 	.word	0x20001b22

08001410 <app_eeprom_receiveMsg>:

void app_eeprom_receiveMsg(eal_task_Task *self, msg_Message *message){
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <writeVersion>:
/* Store/Read ----------------------------------------------------------------------*/
static void writeVersion(uint32_t version){
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	uint8_t versionArray[4] = {0};
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
	versionArray[0] = ((version >> 24) & 0xFF);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	0e1b      	lsrs	r3, r3, #24
 8001438:	b2db      	uxtb	r3, r3
 800143a:	733b      	strb	r3, [r7, #12]
	versionArray[1] = ((version >> 16) & 0xFF);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	0c1b      	lsrs	r3, r3, #16
 8001440:	b2db      	uxtb	r3, r3
 8001442:	737b      	strb	r3, [r7, #13]
	versionArray[2] = ((version >> 8) & 0xFF);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	0a1b      	lsrs	r3, r3, #8
 8001448:	b2db      	uxtb	r3, r3
 800144a:	73bb      	strb	r3, [r7, #14]
	versionArray[3] = ((version >> 0) & 0xFF);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	73fb      	strb	r3, [r7, #15]
	if(!writeUntilLastEEPROMWriteFinished()) return;
 8001452:	f000 fa75 	bl	8001940 <writeUntilLastEEPROMWriteFinished>
 8001456:	4603      	mov	r3, r0
 8001458:	f083 0301 	eor.w	r3, r3, #1
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d107      	bne.n	8001472 <writeVersion+0x4a>
	eeprom_write(&eepromDev1, 0, versionArray, 4);
 8001462:	f107 020c 	add.w	r2, r7, #12
 8001466:	2304      	movs	r3, #4
 8001468:	2100      	movs	r1, #0
 800146a:	4804      	ldr	r0, [pc, #16]	; (800147c <writeVersion+0x54>)
 800146c:	f008 f809 	bl	8009482 <eeprom_write>
 8001470:	e000      	b.n	8001474 <writeVersion+0x4c>
	if(!writeUntilLastEEPROMWriteFinished()) return;
 8001472:	bf00      	nop
}
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200000b8 	.word	0x200000b8

08001480 <readVersion>:

static uint32_t readVersion(){
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
	uint8_t versionArray[4] = {0};
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
	if(!writeUntilLastEEPROMWriteFinished()) return 0;
 800148a:	f000 fa59 	bl	8001940 <writeUntilLastEEPROMWriteFinished>
 800148e:	4603      	mov	r3, r0
 8001490:	f083 0301 	eor.w	r3, r3, #1
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <readVersion+0x1e>
 800149a:	2300      	movs	r3, #0
 800149c:	e011      	b.n	80014c2 <readVersion+0x42>
	eeprom_read(&eepromDev1, 0, versionArray, 4);
 800149e:	463a      	mov	r2, r7
 80014a0:	2304      	movs	r3, #4
 80014a2:	2100      	movs	r1, #0
 80014a4:	4809      	ldr	r0, [pc, #36]	; (80014cc <readVersion+0x4c>)
 80014a6:	f008 f80e 	bl	80094c6 <eeprom_read>
	uint32_t version = (versionArray[0] << 24)|(versionArray[1] << 16)|(versionArray[2] << 8)|(versionArray[3] << 0);
 80014aa:	783b      	ldrb	r3, [r7, #0]
 80014ac:	061a      	lsls	r2, r3, #24
 80014ae:	787b      	ldrb	r3, [r7, #1]
 80014b0:	041b      	lsls	r3, r3, #16
 80014b2:	431a      	orrs	r2, r3
 80014b4:	78bb      	ldrb	r3, [r7, #2]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	4313      	orrs	r3, r2
 80014ba:	78fa      	ldrb	r2, [r7, #3]
 80014bc:	4313      	orrs	r3, r2
 80014be:	607b      	str	r3, [r7, #4]
	return version;
 80014c0:	687b      	ldr	r3, [r7, #4]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200000b8 	.word	0x200000b8

080014d0 <erase>:

static void erase(){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b0c4      	sub	sp, #272	; 0x110
 80014d4:	af00      	add	r7, sp, #0
	app_eeprom_Page newPage;
	uint8_t eraseTxData = 0x00;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	for(int i = 0; i < app_eeprom_PAGE_SIZE; ++i) newPage.data[i] = eraseTxData;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80014e2:	e00b      	b.n	80014fc <erase+0x2c>
 80014e4:	1d3a      	adds	r2, r7, #4
 80014e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014ea:	4413      	add	r3, r2
 80014ec:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014f6:	3301      	adds	r3, #1
 80014f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80014fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001500:	2bff      	cmp	r3, #255	; 0xff
 8001502:	ddef      	ble.n	80014e4 <erase+0x14>
	for(int i = 0; i < app_eeprom_PAGE_NMBR; ++i){
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800150a:	e01d      	b.n	8001548 <erase+0x78>
		if(!writeUntilLastEEPROMWriteFinished())return;
 800150c:	f000 fa18 	bl	8001940 <writeUntilLastEEPROMWriteFinished>
 8001510:	4603      	mov	r3, r0
 8001512:	f083 0301 	eor.w	r3, r3, #1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d11b      	bne.n	8001554 <erase+0x84>
		newPage.addr = i*app_eeprom_PAGE_SIZE;
 800151c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001520:	b29b      	uxth	r3, r3
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b29a      	uxth	r2, r3
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
		eeprom_write(&eepromDev1, newPage.addr, newPage.data, app_eeprom_PAGE_SIZE);
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	f8b3 1100 	ldrh.w	r1, [r3, #256]	; 0x100
 8001532:	1d3a      	adds	r2, r7, #4
 8001534:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001538:	4809      	ldr	r0, [pc, #36]	; (8001560 <erase+0x90>)
 800153a:	f007 ffa2 	bl	8009482 <eeprom_write>
	for(int i = 0; i < app_eeprom_PAGE_NMBR; ++i){
 800153e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001542:	3301      	adds	r3, #1
 8001544:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001548:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800154c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001550:	dbdc      	blt.n	800150c <erase+0x3c>
 8001552:	e000      	b.n	8001556 <erase+0x86>
		if(!writeUntilLastEEPROMWriteFinished())return;
 8001554:	bf00      	nop
	}
}
 8001556:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200000b8 	.word	0x200000b8

08001564 <storeModel>:

static void storeModel(){
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
	/*Store presets*/
	uint16_t pageAddress = app_eeprom_PRESET_START_PAGE*app_eeprom_PAGE_SIZE;
 800156a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800156e:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8001570:	2300      	movs	r3, #0
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	e01b      	b.n	80015ae <storeModel+0x4a>
		if(!writeUntilLastEEPROMWriteFinished()) return;
 8001576:	f000 f9e3 	bl	8001940 <writeUntilLastEEPROMWriteFinished>
 800157a:	4603      	mov	r3, r0
 800157c:	f083 0301 	eor.w	r3, r3, #1
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d12c      	bne.n	80015e0 <storeModel+0x7c>
		storePreset(pageAddress, &app_model_model.presets[i]);
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <storeModel+0x88>)
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001590:	fb01 f303 	mul.w	r3, r1, r3
 8001594:	441a      	add	r2, r3
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f86c 	bl	8001678 <storePreset>
		pageAddress += (app_eeprom_PAGES_PER_PRESET*app_eeprom_PAGE_SIZE);
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015a6:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	3301      	adds	r3, #1
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2b09      	cmp	r3, #9
 80015b2:	dde0      	ble.n	8001576 <storeModel+0x12>
	}
	/*Store footswitch*/
	pageAddress = app_eeprom_FOOTSWITCH_START_PAGE*app_eeprom_PAGE_SIZE;
 80015b4:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 80015b8:	80fb      	strh	r3, [r7, #6]
	if(!writeUntilLastEEPROMWriteFinished()) return;
 80015ba:	f000 f9c1 	bl	8001940 <writeUntilLastEEPROMWriteFinished>
 80015be:	4603      	mov	r3, r0
 80015c0:	f083 0301 	eor.w	r3, r3, #1
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10c      	bne.n	80015e4 <storeModel+0x80>
	storeFootswitch(pageAddress, &app_model_model.footswitches[0]);
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <storeModel+0x88>)
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f934 	bl	8001840 <storeFootswitch>
	app_model_model.dirty = false;
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <storeModel+0x88>)
 80015da:	2200      	movs	r2, #0
 80015dc:	741a      	strb	r2, [r3, #16]
 80015de:	e002      	b.n	80015e6 <storeModel+0x82>
		if(!writeUntilLastEEPROMWriteFinished()) return;
 80015e0:	bf00      	nop
 80015e2:	e000      	b.n	80015e6 <storeModel+0x82>
	if(!writeUntilLastEEPROMWriteFinished()) return;
 80015e4:	bf00      	nop
}
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200010c0 	.word	0x200010c0

080015f0 <readModel>:

static void readModel(){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
	/*Read presets*/
	uint16_t pageAddress = app_eeprom_PRESET_START_PAGE*app_eeprom_PAGE_SIZE;
 80015f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015fa:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 80015fc:	2300      	movs	r3, #0
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	e01b      	b.n	800163a <readModel+0x4a>
		if(!writeUntilLastEEPROMWriteFinished()) return;
 8001602:	f000 f99d 	bl	8001940 <writeUntilLastEEPROMWriteFinished>
 8001606:	4603      	mov	r3, r0
 8001608:	f083 0301 	eor.w	r3, r3, #1
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d129      	bne.n	8001666 <readModel+0x76>
		readPreset(pageAddress, &app_model_model.presets[i]);
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <readModel+0x84>)
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800161c:	fb01 f303 	mul.w	r3, r1, r3
 8001620:	441a      	add	r2, r3
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	4611      	mov	r1, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f898 	bl	800175c <readPreset>
		pageAddress += (app_eeprom_PAGES_PER_PRESET*app_eeprom_PAGE_SIZE);
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001632:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	2b09      	cmp	r3, #9
 800163e:	dde0      	ble.n	8001602 <readModel+0x12>
	}
	/*Read footswitch*/
	pageAddress = app_eeprom_FOOTSWITCH_START_PAGE*app_eeprom_PAGE_SIZE;
 8001640:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8001644:	80fb      	strh	r3, [r7, #6]
	if(!writeUntilLastEEPROMWriteFinished()) return;
 8001646:	f000 f97b 	bl	8001940 <writeUntilLastEEPROMWriteFinished>
 800164a:	4603      	mov	r3, r0
 800164c:	f083 0301 	eor.w	r3, r3, #1
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d109      	bne.n	800166a <readModel+0x7a>
	readFootswitch(pageAddress, &app_model_model.footswitches[0]);
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <readModel+0x84>)
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f92c 	bl	80018bc <readFootswitch>
 8001664:	e002      	b.n	800166c <readModel+0x7c>
		if(!writeUntilLastEEPROMWriteFinished()) return;
 8001666:	bf00      	nop
 8001668:	e000      	b.n	800166c <readModel+0x7c>
	if(!writeUntilLastEEPROMWriteFinished()) return;
 800166a:	bf00      	nop
}
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200010c0 	.word	0x200010c0

08001678 <storePreset>:

static void storePreset(uint16_t pageAddress, app_dmx_preset_cfg_Preset *preset){
 8001678:	b580      	push	{r7, lr}
 800167a:	f5ad 7d66 	sub.w	sp, sp, #920	; 0x398
 800167e:	af00      	add	r7, sp, #0
 8001680:	4602      	mov	r2, r0
 8001682:	463b      	mov	r3, r7
 8001684:	6019      	str	r1, [r3, #0]
 8001686:	1dbb      	adds	r3, r7, #6
 8001688:	801a      	strh	r2, [r3, #0]
	/*Move struct into byte array*/
	uint8_t storage[app_dmx_preset_cfg_PRESET_SIZE] = {0};
 800168a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800168e:	4618      	mov	r0, r3
 8001690:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8001694:	461a      	mov	r2, r3
 8001696:	2100      	movs	r1, #0
 8001698:	f00b fa89 	bl	800cbae <memset>
	memcpy(storage, preset, app_dmx_preset_cfg_PRESET_SIZE);
 800169c:	463b      	mov	r3, r7
 800169e:	f507 7004 	add.w	r0, r7, #528	; 0x210
 80016a2:	f44f 72c4 	mov.w	r2, #392	; 0x188
 80016a6:	6819      	ldr	r1, [r3, #0]
 80016a8:	f00b fa76 	bl	800cb98 <memcpy>
	/*Generate pages to store*/
	app_eeprom_Page newPage[2];
	memset(newPage[0].data, 0, app_eeprom_PAGE_SIZE); /*Clean data*/
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f00b fa79 	bl	800cbae <memset>
	memset(newPage[1].data, 0, app_eeprom_PAGE_SIZE); /*Clean data*/
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	f503 7381 	add.w	r3, r3, #258	; 0x102
 80016c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f00b fa6f 	bl	800cbae <memset>
	newPage[0].addr = pageAddress;
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	1dba      	adds	r2, r7, #6
 80016d6:	8812      	ldrh	r2, [r2, #0]
 80016d8:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	newPage[1].addr = pageAddress + app_eeprom_PAGE_SIZE;
 80016dc:	1dbb      	adds	r3, r7, #6
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
	memcpy(newPage[0].data, &storage[0], app_eeprom_PAGE_SIZE);
 80016ee:	f107 020c 	add.w	r2, r7, #12
 80016f2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016fe:	461a      	mov	r2, r3
 8001700:	f00b fa4a 	bl	800cb98 <memcpy>
	memcpy(newPage[1].data, &storage[app_eeprom_PAGE_SIZE], (app_dmx_preset_cfg_PRESET_SIZE - app_eeprom_PAGE_SIZE));
 8001704:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001708:	f503 7180 	add.w	r1, r3, #256	; 0x100
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	f503 7381 	add.w	r3, r3, #258	; 0x102
 8001714:	2288      	movs	r2, #136	; 0x88
 8001716:	4618      	mov	r0, r3
 8001718:	f00b fa3e 	bl	800cb98 <memcpy>
	eeprom_write(&eepromDev1, newPage[0].addr, newPage[0].data, app_eeprom_PAGE_SIZE);
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	f8b3 1100 	ldrh.w	r1, [r3, #256]	; 0x100
 8001724:	f107 020c 	add.w	r2, r7, #12
 8001728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800172c:	480a      	ldr	r0, [pc, #40]	; (8001758 <storePreset+0xe0>)
 800172e:	f007 fea8 	bl	8009482 <eeprom_write>
	eeprom_write(&eepromDev1, newPage[1].addr, newPage[1].data, app_eeprom_PAGE_SIZE);
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	f8b3 1202 	ldrh.w	r1, [r3, #514]	; 0x202
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	f503 7281 	add.w	r2, r3, #258	; 0x102
 8001742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001746:	4804      	ldr	r0, [pc, #16]	; (8001758 <storePreset+0xe0>)
 8001748:	f007 fe9b 	bl	8009482 <eeprom_write>
}
 800174c:	bf00      	nop
 800174e:	f507 7766 	add.w	r7, r7, #920	; 0x398
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200000b8 	.word	0x200000b8

0800175c <readPreset>:

static void readPreset(uint16_t pageAddress, app_dmx_preset_cfg_Preset *preset){
 800175c:	b580      	push	{r7, lr}
 800175e:	f5ad 7d66 	sub.w	sp, sp, #920	; 0x398
 8001762:	af00      	add	r7, sp, #0
 8001764:	4602      	mov	r2, r0
 8001766:	463b      	mov	r3, r7
 8001768:	6019      	str	r1, [r3, #0]
 800176a:	1dbb      	adds	r3, r7, #6
 800176c:	801a      	strh	r2, [r3, #0]
	/*Generate pages to store*/
	app_eeprom_Page newPage[2];
	memset(newPage[0].data, 0, app_eeprom_PAGE_SIZE); /*Clean data*/
 800176e:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f00b fa18 	bl	800cbae <memset>
	memset(newPage[1].data, 0, app_eeprom_PAGE_SIZE); /*Clean data*/
 800177e:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001782:	f503 7381 	add.w	r3, r3, #258	; 0x102
 8001786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f00b fa0e 	bl	800cbae <memset>
	newPage[0].addr = pageAddress;
 8001792:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001796:	1dba      	adds	r2, r7, #6
 8001798:	8812      	ldrh	r2, [r2, #0]
 800179a:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	newPage[1].addr = pageAddress + app_eeprom_PAGE_SIZE;
 800179e:	1dbb      	adds	r3, r7, #6
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80017ac:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
	eeprom_read(&eepromDev1, newPage[0].addr, newPage[0].data, app_eeprom_PAGE_SIZE);
 80017b0:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80017b4:	f8b3 1100 	ldrh.w	r1, [r3, #256]	; 0x100
 80017b8:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 80017bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c0:	481e      	ldr	r0, [pc, #120]	; (800183c <readPreset+0xe0>)
 80017c2:	f007 fe80 	bl	80094c6 <eeprom_read>
	eeprom_read(&eepromDev1, newPage[1].addr, newPage[1].data, app_eeprom_PAGE_SIZE);
 80017c6:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80017ca:	f8b3 1202 	ldrh.w	r1, [r3, #514]	; 0x202
 80017ce:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80017d2:	f503 7281 	add.w	r2, r3, #258	; 0x102
 80017d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017da:	4818      	ldr	r0, [pc, #96]	; (800183c <readPreset+0xe0>)
 80017dc:	f007 fe73 	bl	80094c6 <eeprom_read>
	uint8_t storage[app_dmx_preset_cfg_PRESET_SIZE] = {0};
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4618      	mov	r0, r3
 80017e6:	f44f 73c4 	mov.w	r3, #392	; 0x188
 80017ea:	461a      	mov	r2, r3
 80017ec:	2100      	movs	r1, #0
 80017ee:	f00b f9de 	bl	800cbae <memset>
	memcpy(&storage[0], newPage[0].data, app_eeprom_PAGE_SIZE);
 80017f2:	f107 020c 	add.w	r2, r7, #12
 80017f6:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001802:	461a      	mov	r2, r3
 8001804:	f00b f9c8 	bl	800cb98 <memcpy>
	memcpy(&storage[app_eeprom_PAGE_SIZE], newPage[1].data, (app_dmx_preset_cfg_PRESET_SIZE - app_eeprom_PAGE_SIZE));
 8001808:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800180c:	f503 7181 	add.w	r1, r3, #258	; 0x102
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001818:	2288      	movs	r2, #136	; 0x88
 800181a:	4618      	mov	r0, r3
 800181c:	f00b f9bc 	bl	800cb98 <memcpy>
	/*Move byte array into struct*/
	memcpy(preset, storage, app_dmx_preset_cfg_PRESET_SIZE);
 8001820:	f107 010c 	add.w	r1, r7, #12
 8001824:	463b      	mov	r3, r7
 8001826:	f44f 72c4 	mov.w	r2, #392	; 0x188
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	f00b f9b4 	bl	800cb98 <memcpy>
}
 8001830:	bf00      	nop
 8001832:	f507 7766 	add.w	r7, r7, #920	; 0x398
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200000b8 	.word	0x200000b8

08001840 <storeFootswitch>:

static void storeFootswitch(uint16_t pageAddress, app_footcontrol_cfg_GpioCfg *footswitch){
 8001840:	b580      	push	{r7, lr}
 8001842:	b0da      	sub	sp, #360	; 0x168
 8001844:	af00      	add	r7, sp, #0
 8001846:	4602      	mov	r2, r0
 8001848:	463b      	mov	r3, r7
 800184a:	6019      	str	r1, [r3, #0]
 800184c:	1dbb      	adds	r3, r7, #6
 800184e:	801a      	strh	r2, [r3, #0]
	/*Move struct into byte array*/
	uint8_t storage[app_dmx_footswitch_cfg_FOOTSWITCH_SIZE*app_cfg_NMBR_BTNS] = {0};
 8001850:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001854:	225a      	movs	r2, #90	; 0x5a
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f00b f9a8 	bl	800cbae <memset>
	memcpy(storage, footswitch, sizeof(storage));
 800185e:	463b      	mov	r3, r7
 8001860:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8001864:	225a      	movs	r2, #90	; 0x5a
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	f00b f996 	bl	800cb98 <memcpy>
	/*Generate pages to store*/
	app_eeprom_Page newPage;
	memset(newPage.data, 0, app_eeprom_PAGE_SIZE); /*Clean data*/
 800186c:	f107 0308 	add.w	r3, r7, #8
 8001870:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f00b f999 	bl	800cbae <memset>
	newPage.addr = pageAddress;
 800187c:	f107 0308 	add.w	r3, r7, #8
 8001880:	1dba      	adds	r2, r7, #6
 8001882:	8812      	ldrh	r2, [r2, #0]
 8001884:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	memcpy(newPage.data, &storage[0], sizeof(storage));
 8001888:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	225a      	movs	r2, #90	; 0x5a
 8001892:	4618      	mov	r0, r3
 8001894:	f00b f980 	bl	800cb98 <memcpy>
	eeprom_write(&eepromDev1, newPage.addr, newPage.data, app_eeprom_PAGE_SIZE);
 8001898:	f107 0308 	add.w	r3, r7, #8
 800189c:	f8b3 1100 	ldrh.w	r1, [r3, #256]	; 0x100
 80018a0:	f107 0208 	add.w	r2, r7, #8
 80018a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a8:	4803      	ldr	r0, [pc, #12]	; (80018b8 <storeFootswitch+0x78>)
 80018aa:	f007 fdea 	bl	8009482 <eeprom_write>
}
 80018ae:	bf00      	nop
 80018b0:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200000b8 	.word	0x200000b8

080018bc <readFootswitch>:
static void readFootswitch(uint16_t pageAddress, app_footcontrol_cfg_GpioCfg *footswitch){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b0da      	sub	sp, #360	; 0x168
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4602      	mov	r2, r0
 80018c4:	463b      	mov	r3, r7
 80018c6:	6019      	str	r1, [r3, #0]
 80018c8:	1dbb      	adds	r3, r7, #6
 80018ca:	801a      	strh	r2, [r3, #0]
	/*Generate pages to store*/
	app_eeprom_Page newPage;
	memset(newPage.data, 0, app_eeprom_PAGE_SIZE); /*Clean data*/
 80018cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f00b f969 	bl	800cbae <memset>
	newPage.addr = pageAddress;
 80018dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018e0:	1dba      	adds	r2, r7, #6
 80018e2:	8812      	ldrh	r2, [r2, #0]
 80018e4:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	eeprom_read(&eepromDev1, newPage.addr, newPage.data, app_eeprom_PAGE_SIZE);
 80018e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018ec:	f8b3 1100 	ldrh.w	r1, [r3, #256]	; 0x100
 80018f0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80018f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f8:	4810      	ldr	r0, [pc, #64]	; (800193c <readFootswitch+0x80>)
 80018fa:	f007 fde4 	bl	80094c6 <eeprom_read>
	uint8_t storage[app_dmx_footswitch_cfg_FOOTSWITCH_SIZE*app_cfg_NMBR_BTNS] = {0};
 80018fe:	f107 0308 	add.w	r3, r7, #8
 8001902:	4618      	mov	r0, r3
 8001904:	235a      	movs	r3, #90	; 0x5a
 8001906:	461a      	mov	r2, r3
 8001908:	2100      	movs	r1, #0
 800190a:	f00b f950 	bl	800cbae <memset>
	memcpy(&storage, newPage.data, sizeof(storage));
 800190e:	f107 0208 	add.w	r2, r7, #8
 8001912:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	235a      	movs	r3, #90	; 0x5a
 800191c:	461a      	mov	r2, r3
 800191e:	f00b f93b 	bl	800cb98 <memcpy>
	/*Move byte array into struct*/
	memcpy(footswitch, storage, sizeof(storage));
 8001922:	f107 0108 	add.w	r1, r7, #8
 8001926:	463b      	mov	r3, r7
 8001928:	225a      	movs	r2, #90	; 0x5a
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	f00b f934 	bl	800cb98 <memcpy>
}
 8001930:	bf00      	nop
 8001932:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200000b8 	.word	0x200000b8

08001940 <writeUntilLastEEPROMWriteFinished>:
/* Helper ----------------------------------------------------------------------*/
static bool writeUntilLastEEPROMWriteFinished(){
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	internalTimer = 1000;
 8001944:	4b0d      	ldr	r3, [pc, #52]	; (800197c <writeUntilLastEEPROMWriteFinished+0x3c>)
 8001946:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800194a:	801a      	strh	r2, [r3, #0]
	while(!eeprom_isFree(&eepromDev1)){
 800194c:	e006      	b.n	800195c <writeUntilLastEEPROMWriteFinished+0x1c>
		if(internalTimer <= 0){
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <writeUntilLastEEPROMWriteFinished+0x3c>)
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	b21b      	sxth	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	dc01      	bgt.n	800195c <writeUntilLastEEPROMWriteFinished+0x1c>
			return false;
 8001958:	2300      	movs	r3, #0
 800195a:	e00c      	b.n	8001976 <writeUntilLastEEPROMWriteFinished+0x36>
	while(!eeprom_isFree(&eepromDev1)){
 800195c:	4808      	ldr	r0, [pc, #32]	; (8001980 <writeUntilLastEEPROMWriteFinished+0x40>)
 800195e:	f007 fdd4 	bl	800950a <eeprom_isFree>
 8001962:	4603      	mov	r3, r0
 8001964:	f083 0301 	eor.w	r3, r3, #1
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ef      	bne.n	800194e <writeUntilLastEEPROMWriteFinished+0xe>
		}
	}
	internalTimer = 0;
 800196e:	4b03      	ldr	r3, [pc, #12]	; (800197c <writeUntilLastEEPROMWriteFinished+0x3c>)
 8001970:	2200      	movs	r2, #0
 8001972:	801a      	strh	r2, [r3, #0]
	return true;
 8001974:	2301      	movs	r3, #1
}
 8001976:	4618      	mov	r0, r3
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20001b22 	.word	0x20001b22
 8001980:	200000b8 	.word	0x200000b8

08001984 <eepromCallback>:
/* Callback's ------------------------------------------------------------------*/
uint8_t eepromCallback(eeprom_cfg_Config *config){
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b089      	sub	sp, #36	; 0x24
 8001988:	af04      	add	r7, sp, #16
 800198a:	6078      	str	r0, [r7, #4]
	uint8_t state = 1;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
	if(config->callbackType == EEPROM_CFG_CALL_TX_START){
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7a9b      	ldrb	r3, [r3, #10]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d119      	bne.n	80019cc <eepromCallback+0x48>
		if(HAL_I2C_Mem_Write(&hi2c2, config->devAddr, config->memAddr, I2C_MEMADD_SIZE_16BIT, config->txBuffer, config->dataSize, 100) != HAL_OK) state = 0;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	b298      	uxth	r0, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	b29c      	uxth	r4, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6952      	ldr	r2, [r2, #20]
 80019ac:	b292      	uxth	r2, r2
 80019ae:	2164      	movs	r1, #100	; 0x64
 80019b0:	9102      	str	r1, [sp, #8]
 80019b2:	9201      	str	r2, [sp, #4]
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2302      	movs	r3, #2
 80019b8:	4622      	mov	r2, r4
 80019ba:	4601      	mov	r1, r0
 80019bc:	4820      	ldr	r0, [pc, #128]	; (8001a40 <eepromCallback+0xbc>)
 80019be:	f002 f995 	bl	8003cec <HAL_I2C_Mem_Write>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <eepromCallback+0x48>
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
	}
	if(config->callbackType == EEPROM_CFG_CALL_RX_START){
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7a9b      	ldrb	r3, [r3, #10]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d119      	bne.n	8001a08 <eepromCallback+0x84>
		if(HAL_I2C_Mem_Read(&hi2c2,  config->devAddr, config->memAddr, I2C_MEMADD_SIZE_16BIT, config->rxBuffer, config->dataSize, 100) != HAL_OK) state = 0;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b298      	uxth	r0, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	b29c      	uxth	r4, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6952      	ldr	r2, [r2, #20]
 80019e8:	b292      	uxth	r2, r2
 80019ea:	2164      	movs	r1, #100	; 0x64
 80019ec:	9102      	str	r1, [sp, #8]
 80019ee:	9201      	str	r2, [sp, #4]
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2302      	movs	r3, #2
 80019f4:	4622      	mov	r2, r4
 80019f6:	4601      	mov	r1, r0
 80019f8:	4811      	ldr	r0, [pc, #68]	; (8001a40 <eepromCallback+0xbc>)
 80019fa:	f002 fa8b 	bl	8003f14 <HAL_I2C_Mem_Read>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <eepromCallback+0x84>
 8001a04:	2300      	movs	r3, #0
 8001a06:	73fb      	strb	r3, [r7, #15]
	}
	if(config->callbackType == EEPROM_CFG_CALL_CHECK_TX_STATE){
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7a9b      	ldrb	r3, [r3, #10]
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d112      	bne.n	8001a36 <eepromCallback+0xb2>
		if(HAL_I2C_Master_Transmit(&hi2c2, config->devAddr, config->rxBuffer, config->dataSize, 100) != HAL_OK) state = 0;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b299      	uxth	r1, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1a      	ldr	r2, [r3, #32]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	b298      	uxth	r0, r3
 8001a20:	2364      	movs	r3, #100	; 0x64
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	4603      	mov	r3, r0
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <eepromCallback+0xbc>)
 8001a28:	f002 f86c 	bl	8003b04 <HAL_I2C_Master_Transmit>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <eepromCallback+0xb2>
 8001a32:	2300      	movs	r3, #0
 8001a34:	73fb      	strb	r3, [r7, #15]
	}
	return state;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd90      	pop	{r4, r7, pc}
 8001a40:	2000a3dc 	.word	0x2000a3dc

08001a44 <app_footcontrol_init>:
*******************************************************************************/
static void sendDmxPreset(eal_task_Task *self, app_footcontrol_cfg_PresetCfg *preset);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_footcontrol_init(eal_task_Task *self){
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	status = app_footcontrol_ACTIVE;
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <app_footcontrol_init+0x1c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20001b26 	.word	0x20001b26

08001a64 <app_footcontrol_process>:

void app_footcontrol_process(eal_task_Task *self){
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	f083 0301 	eor.w	r3, r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10b      	bne.n	8001a92 <app_footcontrol_process+0x2e>
	if(!cyclicFlag) return;
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <app_footcontrol_process+0x40>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f083 0301 	eor.w	r3, r3, #1
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d105      	bne.n	8001a96 <app_footcontrol_process+0x32>
	//TODO: logic
	cyclicFlag = false;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <app_footcontrol_process+0x40>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	e002      	b.n	8001a98 <app_footcontrol_process+0x34>
	if(!self->enable) return;
 8001a92:	bf00      	nop
 8001a94:	e000      	b.n	8001a98 <app_footcontrol_process+0x34>
	if(!cyclicFlag) return;
 8001a96:	bf00      	nop
}
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20001b27 	.word	0x20001b27

08001aa8 <app_footcontrol_receiveMsg>:
void app_footcontrol_cyclic1ms(eal_task_Task *self, bool stat){
	cyclicFlag = true;
	if(internalTimer > 0)--internalTimer;
}

void app_footcontrol_receiveMsg(eal_task_Task *self, msg_Message *message){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
	if(status != app_footcontrol_ACTIVE) return;
 8001ab2:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <app_footcontrol_receiveMsg+0x140>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f040 8092 	bne.w	8001be0 <app_footcontrol_receiveMsg+0x138>
	/*Button message parsing*/
	if(message->type == app_cfg_BTN_MSG){
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	791b      	ldrb	r3, [r3, #4]
 8001ac0:	2b42      	cmp	r3, #66	; 0x42
 8001ac2:	f040 808e 	bne.w	8001be2 <app_footcontrol_receiveMsg+0x13a>
		/*Action parsing*/
		if(msg_isAction(message)){
 8001ac6:	6838      	ldr	r0, [r7, #0]
 8001ac8:	f007 ff85 	bl	80099d6 <msg_isAction>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f040 8087 	bne.w	8001be2 <app_footcontrol_receiveMsg+0x13a>
//			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
		}
		/*Event parsing*/
		else{
			uint16_t idx = message->index;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	81fb      	strh	r3, [r7, #14]
			if(app_model_model.footswitches[idx].mode == app_footcontrol_GPIO_INPUT){
 8001ada:	4b44      	ldr	r3, [pc, #272]	; (8001bec <app_footcontrol_receiveMsg+0x144>)
 8001adc:	68d9      	ldr	r1, [r3, #12]
 8001ade:	89fa      	ldrh	r2, [r7, #14]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	440b      	add	r3, r1
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d178      	bne.n	8001be2 <app_footcontrol_receiveMsg+0x13a>
				if((message->value == app_cfg_btn_STAT_RELEASED) && (app_model_model.footswitches[idx].release.presetNr < app_cfg_NMBR_PRESETS)) sendDmxPreset(self, &app_model_model.footswitches[idx].release);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d118      	bne.n	8001b2c <app_footcontrol_receiveMsg+0x84>
 8001afa:	4b3c      	ldr	r3, [pc, #240]	; (8001bec <app_footcontrol_receiveMsg+0x144>)
 8001afc:	68d9      	ldr	r1, [r3, #12]
 8001afe:	89fa      	ldrh	r2, [r7, #14]
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	440b      	add	r3, r1
 8001b0a:	799b      	ldrb	r3, [r3, #6]
 8001b0c:	2b09      	cmp	r3, #9
 8001b0e:	d80d      	bhi.n	8001b2c <app_footcontrol_receiveMsg+0x84>
 8001b10:	4b36      	ldr	r3, [pc, #216]	; (8001bec <app_footcontrol_receiveMsg+0x144>)
 8001b12:	68d9      	ldr	r1, [r3, #12]
 8001b14:	89fa      	ldrh	r2, [r7, #14]
 8001b16:	4613      	mov	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	440b      	add	r3, r1
 8001b20:	3306      	adds	r3, #6
 8001b22:	4619      	mov	r1, r3
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f863 	bl	8001bf0 <sendDmxPreset>
 8001b2a:	e05a      	b.n	8001be2 <app_footcontrol_receiveMsg+0x13a>
				else if((message->value == app_cfg_btn_STAT_PRESSED) && (app_model_model.footswitches[idx].press.presetNr < app_cfg_NMBR_PRESETS)) sendDmxPreset(self, &app_model_model.footswitches[idx].press);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d118      	bne.n	8001b68 <app_footcontrol_receiveMsg+0xc0>
 8001b36:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <app_footcontrol_receiveMsg+0x144>)
 8001b38:	68d9      	ldr	r1, [r3, #12]
 8001b3a:	89fa      	ldrh	r2, [r7, #14]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	440b      	add	r3, r1
 8001b46:	789b      	ldrb	r3, [r3, #2]
 8001b48:	2b09      	cmp	r3, #9
 8001b4a:	d80d      	bhi.n	8001b68 <app_footcontrol_receiveMsg+0xc0>
 8001b4c:	4b27      	ldr	r3, [pc, #156]	; (8001bec <app_footcontrol_receiveMsg+0x144>)
 8001b4e:	68d9      	ldr	r1, [r3, #12]
 8001b50:	89fa      	ldrh	r2, [r7, #14]
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	440b      	add	r3, r1
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f845 	bl	8001bf0 <sendDmxPreset>
 8001b66:	e03c      	b.n	8001be2 <app_footcontrol_receiveMsg+0x13a>
				else if((message->value == app_cfg_btn_STAT_HOLD_SHORT) && (app_model_model.footswitches[idx].holdShort.presetNr < app_cfg_NMBR_PRESETS)) sendDmxPreset(self, &app_model_model.footswitches[idx].holdShort);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d118      	bne.n	8001ba4 <app_footcontrol_receiveMsg+0xfc>
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <app_footcontrol_receiveMsg+0x144>)
 8001b74:	68d9      	ldr	r1, [r3, #12]
 8001b76:	89fa      	ldrh	r2, [r7, #14]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	440b      	add	r3, r1
 8001b82:	7a9b      	ldrb	r3, [r3, #10]
 8001b84:	2b09      	cmp	r3, #9
 8001b86:	d80d      	bhi.n	8001ba4 <app_footcontrol_receiveMsg+0xfc>
 8001b88:	4b18      	ldr	r3, [pc, #96]	; (8001bec <app_footcontrol_receiveMsg+0x144>)
 8001b8a:	68d9      	ldr	r1, [r3, #12]
 8001b8c:	89fa      	ldrh	r2, [r7, #14]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4413      	add	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	440b      	add	r3, r1
 8001b98:	330a      	adds	r3, #10
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f827 	bl	8001bf0 <sendDmxPreset>
 8001ba2:	e01e      	b.n	8001be2 <app_footcontrol_receiveMsg+0x13a>
				else if((message->value == app_cfg_btn_STAT_HOLD_LONG) && (app_model_model.footswitches[idx].holdLong.presetNr < app_cfg_NMBR_PRESETS)) sendDmxPreset(self, &app_model_model.footswitches[idx].holdLong);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d119      	bne.n	8001be2 <app_footcontrol_receiveMsg+0x13a>
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <app_footcontrol_receiveMsg+0x144>)
 8001bb0:	68d9      	ldr	r1, [r3, #12]
 8001bb2:	89fa      	ldrh	r2, [r7, #14]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4413      	add	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	440b      	add	r3, r1
 8001bbe:	7b9b      	ldrb	r3, [r3, #14]
 8001bc0:	2b09      	cmp	r3, #9
 8001bc2:	d80e      	bhi.n	8001be2 <app_footcontrol_receiveMsg+0x13a>
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <app_footcontrol_receiveMsg+0x144>)
 8001bc6:	68d9      	ldr	r1, [r3, #12]
 8001bc8:	89fa      	ldrh	r2, [r7, #14]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4413      	add	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	440b      	add	r3, r1
 8001bd4:	330e      	adds	r3, #14
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f809 	bl	8001bf0 <sendDmxPreset>
 8001bde:	e000      	b.n	8001be2 <app_footcontrol_receiveMsg+0x13a>
	if(status != app_footcontrol_ACTIVE) return;
 8001be0:	bf00      	nop
			}
		}
	}
}
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20001b26 	.word	0x20001b26
 8001bec:	200010c0 	.word	0x200010c0

08001bf0 <sendDmxPreset>:

/* Helper ----------------------------------------------------------------------*/
static void sendDmxPreset(eal_task_Task *self, app_footcontrol_cfg_PresetCfg *preset){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
	if(self->sendMsg == NULL) return;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d019      	beq.n	8001c36 <sendDmxPreset+0x46>
	msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_ACTION(preset->presetNr), app_cfg_dmx_preset_TRIGGER_ENABLE, 0, 0);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	813b      	strh	r3, [r7, #8]
 8001c14:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001c18:	817b      	strh	r3, [r7, #10]
 8001c1a:	2350      	movs	r3, #80	; 0x50
 8001c1c:	733b      	strb	r3, [r7, #12]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	737b      	strb	r3, [r7, #13]
 8001c22:	2300      	movs	r3, #0
 8001c24:	81fb      	strh	r3, [r7, #14]
	self->sendMsg(self, &newMessage);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f107 0208 	add.w	r2, r7, #8
 8001c2e:	4611      	mov	r1, r2
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	4798      	blx	r3
 8001c34:	e000      	b.n	8001c38 <sendDmxPreset+0x48>
	if(self->sendMsg == NULL) return;
 8001c36:	bf00      	nop
}
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <app_interface_init>:
static void uploadConfig();
static void sendDmxPreset(eal_task_Task *self, uint8_t preset);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_interface_init(eal_task_Task *self){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	app_usb_init();
 8001c48:	f000 ffba 	bl	8002bc0 <app_usb_init>
	app_usb_rxBufferInit(usbRxData, sizeof(usbRxData));
 8001c4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c50:	4817      	ldr	r0, [pc, #92]	; (8001cb0 <app_interface_init+0x70>)
 8001c52:	f000 ffc9 	bl	8002be8 <app_usb_rxBufferInit>
	app_usb_txBufferInit(usbTxData, sizeof(usbTxData));
 8001c56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c5a:	4816      	ldr	r0, [pc, #88]	; (8001cb4 <app_interface_init+0x74>)
 8001c5c:	f000 ffde 	bl	8002c1c <app_usb_txBufferInit>

	app_uart_bufferInit(&uart4TxBuf, uart4TxData, sizeof(uart4TxData));
 8001c60:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8001c64:	4914      	ldr	r1, [pc, #80]	; (8001cb8 <app_interface_init+0x78>)
 8001c66:	4815      	ldr	r0, [pc, #84]	; (8001cbc <app_interface_init+0x7c>)
 8001c68:	f001 f90a 	bl	8002e80 <app_uart_bufferInit>
	app_uart_bufferInit(&uart4RxBuf, uart4RxData, sizeof(uart4RxData));
 8001c6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c70:	4913      	ldr	r1, [pc, #76]	; (8001cc0 <app_interface_init+0x80>)
 8001c72:	4814      	ldr	r0, [pc, #80]	; (8001cc4 <app_interface_init+0x84>)
 8001c74:	f001 f904 	bl	8002e80 <app_uart_bufferInit>
	app_uart_enableReceiveInt(huart4.Instance);
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <app_interface_init+0x88>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 f918 	bl	8002eb2 <app_uart_enableReceiveInt>

	cyclicFlag = false;
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <app_interface_init+0x8c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
	internalTimer = 0;
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <app_interface_init+0x90>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	801a      	strh	r2, [r3, #0]
	uploadTimer = 0;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <app_interface_init+0x94>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	801a      	strh	r2, [r3, #0]
	waitForAck = false;
 8001c94:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <app_interface_init+0x98>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
	uploadState = upload_NONE;
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <app_interface_init+0x9c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
	uploadCmdCounter = 0;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <app_interface_init+0xa0>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	801a      	strh	r2, [r3, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20004b28 	.word	0x20004b28
 8001cb4:	20004728 	.word	0x20004728
 8001cb8:	20001b28 	.word	0x20001b28
 8001cbc:	200000dc 	.word	0x200000dc
 8001cc0:	20004328 	.word	0x20004328
 8001cc4:	200000e8 	.word	0x200000e8
 8001cc8:	2000a690 	.word	0x2000a690
 8001ccc:	20009f5c 	.word	0x20009f5c
 8001cd0:	20009f5e 	.word	0x20009f5e
 8001cd4:	20009f60 	.word	0x20009f60
 8001cd8:	20009f64 	.word	0x20009f64
 8001cdc:	20009f65 	.word	0x20009f65
 8001ce0:	20009f66 	.word	0x20009f66

08001ce4 <app_interface_process>:

void app_interface_process(eal_task_Task *self){
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	f083 0301 	eor.w	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d137      	bne.n	8001d6a <app_interface_process+0x86>
	app_usb_txLoop();
 8001cfa:	f000 ffa9 	bl	8002c50 <app_usb_txLoop>
//	sendToInterface();
	checkInterfaces(self);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8ba 	bl	8001e78 <checkInterfaces>
	//usbToUartBridge(self);
	if(!cyclicFlag) return;
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <app_interface_process+0x94>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	f083 0301 	eor.w	r3, r3, #1
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d12c      	bne.n	8001d6e <app_interface_process+0x8a>
	if(++sendTimer >= SEND_TIMER){
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <app_interface_process+0x98>)
 8001d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	b21a      	sxth	r2, r3
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <app_interface_process+0x98>)
 8001d24:	801a      	strh	r2, [r3, #0]
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <app_interface_process+0x98>)
 8001d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	dd04      	ble.n	8001d3a <app_interface_process+0x56>
		sendToInterface();
 8001d30:	f000 f856 	bl	8001de0 <sendToInterface>
		sendTimer = 0;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <app_interface_process+0x98>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	801a      	strh	r2, [r3, #0]
	}
	if(++uploadTimer >= UPLOAD_TIMER) {
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <app_interface_process+0x9c>)
 8001d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	3301      	adds	r3, #1
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	b21a      	sxth	r2, r3
 8001d48:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <app_interface_process+0x9c>)
 8001d4a:	801a      	strh	r2, [r3, #0]
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <app_interface_process+0x9c>)
 8001d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	dd05      	ble.n	8001d62 <app_interface_process+0x7e>
		uploadConfig(self);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 fdc2 	bl	80028e0 <uploadConfig>
		uploadTimer = 0;
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <app_interface_process+0x9c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	801a      	strh	r2, [r3, #0]
	}
	cyclicFlag = false;
 8001d62:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <app_interface_process+0x94>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
 8001d68:	e002      	b.n	8001d70 <app_interface_process+0x8c>
	if(!self->enable) return;
 8001d6a:	bf00      	nop
 8001d6c:	e000      	b.n	8001d70 <app_interface_process+0x8c>
	if(!cyclicFlag) return;
 8001d6e:	bf00      	nop
}
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20009f5c 	.word	0x20009f5c
 8001d7c:	20009f62 	.word	0x20009f62
 8001d80:	20009f60 	.word	0x20009f60

08001d84 <app_interface_cyclic1ms>:

void app_interface_cyclic1ms(eal_task_Task *self, bool stat){
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <app_interface_cyclic1ms+0x3c>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
	if(internalTimer > 0)--internalTimer;
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <app_interface_cyclic1ms+0x40>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	b21b      	sxth	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	dd08      	ble.n	8001db2 <app_interface_cyclic1ms+0x2e>
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <app_interface_cyclic1ms+0x40>)
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	b21a      	sxth	r2, r3
 8001dae:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <app_interface_cyclic1ms+0x40>)
 8001db0:	801a      	strh	r2, [r3, #0]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20009f5c 	.word	0x20009f5c
 8001dc4:	20009f5e 	.word	0x20009f5e

08001dc8 <app_interface_receiveMsg>:

void app_interface_receiveMsg(eal_task_Task *self, msg_Message *message){
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <sendToInterface>:
}

/******************************************************************************
* Normal receiver
*******************************************************************************/
static void sendToInterface(){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
	app_interface_cmd_Cmd newCmd;
	if(app_interface_cmd_getNext(&newCmd, &cmdTxBuf)){
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	491c      	ldr	r1, [pc, #112]	; (8001e5c <sendToInterface+0x7c>)
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 fe5f 	bl	8002aae <app_interface_cmd_getNext>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d02e      	beq.n	8001e54 <sendToInterface+0x74>
		signalizeCommuniction();
 8001df6:	f000 fdff 	bl	80029f8 <signalizeCommuniction>
		if(!app_interface_cmd_isAck(&newCmd)) waitForAck = true;
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 fecd 	bl	8002b9c <app_interface_cmd_isAck>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f083 0301 	eor.w	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <sendToInterface+0x34>
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <sendToInterface+0x80>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
		if(activeInterface == &usbInterface){
 8001e14:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <sendToInterface+0x84>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a13      	ldr	r2, [pc, #76]	; (8001e68 <sendToInterface+0x88>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d109      	bne.n	8001e32 <sendToInterface+0x52>
			if(app_usb_writeStringToBuffer(newCmd.data) != ringbuffer_OK){
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 ffb3 	bl	8002d8c <app_usb_writeStringToBuffer>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d013      	beq.n	8001e54 <sendToInterface+0x74>
				signalizeError();
 8001e2c:	f000 fdf0 	bl	8002a10 <signalizeError>
			if(app_uart_writeStringToBuffer(newCmd.data, &uart4TxBuf, huart4.Instance) != ringbuffer_OK){
				signalizeError();
			}
		}
	}
}
 8001e30:	e010      	b.n	8001e54 <sendToInterface+0x74>
		}else if(activeInterface == &btInterface){
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <sendToInterface+0x84>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <sendToInterface+0x8c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d10b      	bne.n	8001e54 <sendToInterface+0x74>
			if(app_uart_writeStringToBuffer(newCmd.data, &uart4TxBuf, huart4.Instance) != ringbuffer_OK){
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <sendToInterface+0x90>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	490c      	ldr	r1, [pc, #48]	; (8001e74 <sendToInterface+0x94>)
 8001e44:	4618      	mov	r0, r3
 8001e46:	f001 f854 	bl	8002ef2 <app_uart_writeStringToBuffer>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d001      	beq.n	8001e54 <sendToInterface+0x74>
				signalizeError();
 8001e50:	f000 fdde 	bl	8002a10 <signalizeError>
}
 8001e54:	bf00      	nop
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200000f4 	.word	0x200000f4
 8001e60:	20009f64 	.word	0x20009f64
 8001e64:	20009f58 	.word	0x20009f58
 8001e68:	20009f40 	.word	0x20009f40
 8001e6c:	20009f28 	.word	0x20009f28
 8001e70:	2000a690 	.word	0x2000a690
 8001e74:	200000dc 	.word	0x200000dc

08001e78 <checkInterfaces>:

static void checkInterfaces(eal_task_Task *self){
 8001e78:	b5b0      	push	{r4, r5, r7, lr}
 8001e7a:	b08c      	sub	sp, #48	; 0x30
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	char intData;
	/*Receive char and check if command was found*/
	if(app_usb_getCharFromRxBuffer(&intData) == ringbuffer_OK) {
 8001e80:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 ff5d 	bl	8002d44 <app_usb_getCharFromRxBuffer>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d10b      	bne.n	8001ea8 <checkInterfaces+0x30>
		if(app_interface_cmd_parseCmd(intData, &cmdRxBuf)){
 8001e90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e94:	492a      	ldr	r1, [pc, #168]	; (8001f40 <checkInterfaces+0xc8>)
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fe44 	bl	8002b24 <app_interface_cmd_parseCmd>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <checkInterfaces+0x30>
			activeInterface = &usbInterface;
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <checkInterfaces+0xcc>)
 8001ea4:	4a28      	ldr	r2, [pc, #160]	; (8001f48 <checkInterfaces+0xd0>)
 8001ea6:	601a      	str	r2, [r3, #0]
		}
	}
	if(app_uart_getCharFromBuffer(&intData, &uart4RxBuf) == ringbuffer_OK) {
 8001ea8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001eac:	4927      	ldr	r1, [pc, #156]	; (8001f4c <checkInterfaces+0xd4>)
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f001 f80f 	bl	8002ed2 <app_uart_getCharFromBuffer>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d10b      	bne.n	8001ed2 <checkInterfaces+0x5a>
		if(app_interface_cmd_parseCmd(intData, &cmdRxBuf)){
 8001eba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ebe:	4920      	ldr	r1, [pc, #128]	; (8001f40 <checkInterfaces+0xc8>)
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 fe2f 	bl	8002b24 <app_interface_cmd_parseCmd>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <checkInterfaces+0x5a>
			activeInterface = &btInterface;
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <checkInterfaces+0xcc>)
 8001ece:	4a20      	ldr	r2, [pc, #128]	; (8001f50 <checkInterfaces+0xd8>)
 8001ed0:	601a      	str	r2, [r3, #0]
		}
	}
	/*Check if a full command was received*/
	app_interface_cmd_Cmd newCmd;
	if(app_interface_cmd_getNext(&newCmd, &cmdRxBuf)){
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	491a      	ldr	r1, [pc, #104]	; (8001f40 <checkInterfaces+0xc8>)
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fde8 	bl	8002aae <app_interface_cmd_getNext>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d028      	beq.n	8001f36 <checkInterfaces+0xbe>
		signalizeCommuniction();
 8001ee4:	f000 fd88 	bl	80029f8 <signalizeCommuniction>
		commandFound(self, &newCmd);
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	4619      	mov	r1, r3
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f834 	bl	8001f5c <commandFound>
		/*Send acknowledge*/
		if(!app_interface_cmd_isAck(&newCmd)){
 8001ef4:	f107 031c 	add.w	r3, r7, #28
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fe4f 	bl	8002b9c <app_interface_cmd_isAck>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f083 0301 	eor.w	r3, r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d015      	beq.n	8001f36 <checkInterfaces+0xbe>
			app_interface_cmd_Cmd ack = {.data = "#A000000000000\r\n"};
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <checkInterfaces+0xdc>)
 8001f0c:	f107 0408 	add.w	r4, r7, #8
 8001f10:	461d      	mov	r5, r3
 8001f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f16:	682b      	ldr	r3, [r5, #0]
 8001f18:	7023      	strb	r3, [r4, #0]
			if(!app_interface_cmd_writeCmd(&ack, &cmdTxBuf)) signalizeError();
 8001f1a:	f107 0308 	add.w	r3, r7, #8
 8001f1e:	490e      	ldr	r1, [pc, #56]	; (8001f58 <checkInterfaces+0xe0>)
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 fd93 	bl	8002a4c <app_interface_cmd_writeCmd>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f083 0301 	eor.w	r3, r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <checkInterfaces+0xbe>
 8001f32:	f000 fd6d 	bl	8002a10 <signalizeError>
		}
	}
}
 8001f36:	bf00      	nop
 8001f38:	3730      	adds	r7, #48	; 0x30
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000104 	.word	0x20000104
 8001f44:	20009f58 	.word	0x20009f58
 8001f48:	20009f40 	.word	0x20009f40
 8001f4c:	200000e8 	.word	0x200000e8
 8001f50:	20009f28 	.word	0x20009f28
 8001f54:	0800d5d4 	.word	0x0800d5d4
 8001f58:	200000f4 	.word	0x200000f4

08001f5c <commandFound>:


static bool commandFound(eal_task_Task *self, app_interface_cmd_Cmd *command){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
	char type = command->data[app_interface_cmd_TYPE_POS];
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	785b      	ldrb	r3, [r3, #1]
 8001f6a:	73fb      	strb	r3, [r7, #15]
	if(type == 'T') return parseTransition(self, command);
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	2b54      	cmp	r3, #84	; 0x54
 8001f70:	d105      	bne.n	8001f7e <commandFound+0x22>
 8001f72:	6839      	ldr	r1, [r7, #0]
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f835 	bl	8001fe4 <parseTransition>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	e029      	b.n	8001fd2 <commandFound+0x76>
	else if(type == 'F') return parseFootswitch(self,command);
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	2b46      	cmp	r3, #70	; 0x46
 8001f82:	d105      	bne.n	8001f90 <commandFound+0x34>
 8001f84:	6839      	ldr	r1, [r7, #0]
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fabc 	bl	8002504 <parseFootswitch>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	e020      	b.n	8001fd2 <commandFound+0x76>
	else if(type == 'P') return parsePreset(self,command);
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	2b50      	cmp	r3, #80	; 0x50
 8001f94:	d105      	bne.n	8001fa2 <commandFound+0x46>
 8001f96:	6839      	ldr	r1, [r7, #0]
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 fb9b 	bl	80026d4 <parsePreset>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	e017      	b.n	8001fd2 <commandFound+0x76>
	else if(type == 'L') {
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	2b4c      	cmp	r3, #76	; 0x4c
 8001fa6:	d10b      	bne.n	8001fc0 <commandFound+0x64>
		app_interface_cmd_killBuffer(&cmdTxBuf);
 8001fa8:	480c      	ldr	r0, [pc, #48]	; (8001fdc <commandFound+0x80>)
 8001faa:	f000 fdaa 	bl	8002b02 <app_interface_cmd_killBuffer>
		waitForAck = false;
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <commandFound+0x84>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
		return parseLoadConfig(self,command);
 8001fb4:	6839      	ldr	r1, [r7, #0]
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fc76 	bl	80028a8 <parseLoadConfig>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	e008      	b.n	8001fd2 <commandFound+0x76>
	}
	else if(type == 'A'){
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	2b41      	cmp	r3, #65	; 0x41
 8001fc4:	d104      	bne.n	8001fd0 <commandFound+0x74>
		waitForAck = false;
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <commandFound+0x84>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
		return true;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <commandFound+0x76>
	}
	return true;
 8001fd0:	2301      	movs	r3, #1
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200000f4 	.word	0x200000f4
 8001fe0:	20009f64 	.word	0x20009f64

08001fe4 <parseTransition>:

static bool parseTransition(eal_task_Task *self, app_interface_cmd_Cmd *command){
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b098      	sub	sp, #96	; 0x60
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
	char cmdIdx = command->data[2];
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	789b      	ldrb	r3, [r3, #2]
 8001ff2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	char prNrString[3];
	char trNrString[3];
	prNrString[0] = command->data[3]; prNrString[1] = command->data[4];
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	78db      	ldrb	r3, [r3, #3]
 8001ffa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	791b      	ldrb	r3, [r3, #4]
 8002002:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	trNrString[0] = command->data[5]; trNrString[1] = command->data[6];
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	795b      	ldrb	r3, [r3, #5]
 800200a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	799b      	ldrb	r3, [r3, #6]
 8002012:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	long prNr = strtol(prNrString, NULL, 16);
 8002016:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800201a:	2210      	movs	r2, #16
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f00a fe98 	bl	800cd54 <strtol>
 8002024:	6578      	str	r0, [r7, #84]	; 0x54
	long trNr = strtol(trNrString, NULL, 16);
 8002026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800202a:	2210      	movs	r2, #16
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f00a fe90 	bl	800cd54 <strtol>
 8002034:	6538      	str	r0, [r7, #80]	; 0x50
	if(cmdIdx == '0'){
 8002036:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800203a:	2b30      	cmp	r3, #48	; 0x30
 800203c:	d151      	bne.n	80020e2 <parseTransition+0xfe>
		char chString[3] = "";
 800203e:	4ba5      	ldr	r3, [pc, #660]	; (80022d4 <parseTransition+0x2f0>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8002046:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800204a:	2200      	movs	r2, #0
 800204c:	801a      	strh	r2, [r3, #0]
		char startString[3] = "";
 800204e:	4ba1      	ldr	r3, [pc, #644]	; (80022d4 <parseTransition+0x2f0>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8002056:	f107 0325 	add.w	r3, r7, #37	; 0x25
 800205a:	2200      	movs	r2, #0
 800205c:	801a      	strh	r2, [r3, #0]
		chString[0] = command->data[7]; chString[1] = command->data[8];
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	79db      	ldrb	r3, [r3, #7]
 8002062:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	7a1b      	ldrb	r3, [r3, #8]
 800206a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		startString[0] = command->data[9]; startString[1] = command->data[10];
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	7a5b      	ldrb	r3, [r3, #9]
 8002072:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	7a9b      	ldrb	r3, [r3, #10]
 800207a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		long ch = strtol(chString, NULL, 16);
 800207e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002082:	2210      	movs	r2, #16
 8002084:	2100      	movs	r1, #0
 8002086:	4618      	mov	r0, r3
 8002088:	f00a fe64 	bl	800cd54 <strtol>
 800208c:	64f8      	str	r0, [r7, #76]	; 0x4c
		long start = strtol(startString, NULL, 16);
 800208e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002092:	2210      	movs	r2, #16
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f00a fe5c 	bl	800cd54 <strtol>
 800209c:	64b8      	str	r0, [r7, #72]	; 0x48
		app_model_model.presets[prNr].presetTransitionSettings[trNr].dmxCh = ch;
 800209e:	4b8e      	ldr	r3, [pc, #568]	; (80022d8 <parseTransition+0x2f4>)
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a4:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	441a      	add	r2, r3
 80020ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020b0:	b299      	uxth	r1, r3
 80020b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020b4:	3302      	adds	r3, #2
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	4413      	add	r3, r2
 80020ba:	460a      	mov	r2, r1
 80020bc:	801a      	strh	r2, [r3, #0]
		app_model_model.presets[prNr].presetTransitionSettings[trNr].dmxStartVal = start;
 80020be:	4b86      	ldr	r3, [pc, #536]	; (80022d8 <parseTransition+0x2f4>)
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c4:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	441a      	add	r2, r3
 80020ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020d0:	b2d9      	uxtb	r1, r3
 80020d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020d4:	3302      	adds	r3, #2
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	4413      	add	r3, r2
 80020da:	3302      	adds	r3, #2
 80020dc:	460a      	mov	r2, r1
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	e0f3      	b.n	80022ca <parseTransition+0x2e6>
	}else if(cmdIdx == '1'){
 80020e2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80020e6:	2b31      	cmp	r3, #49	; 0x31
 80020e8:	d150      	bne.n	800218c <parseTransition+0x1a8>
		char endString[3] = "";
 80020ea:	4b7a      	ldr	r3, [pc, #488]	; (80022d4 <parseTransition+0x2f0>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	f887 3020 	strb.w	r3, [r7, #32]
 80020f2:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80020f6:	2200      	movs	r2, #0
 80020f8:	801a      	strh	r2, [r3, #0]
		char timeString[5] = "";
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
 80020fe:	2300      	movs	r3, #0
 8002100:	773b      	strb	r3, [r7, #28]
		endString[0] = command->data[7]; endString[1] = command->data[8];
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	79db      	ldrb	r3, [r3, #7]
 8002106:	f887 3020 	strb.w	r3, [r7, #32]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	7a1b      	ldrb	r3, [r3, #8]
 800210e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		timeString[0] = command->data[9]; timeString[1] = command->data[10]; timeString[2] = command->data[11]; timeString[3] = command->data[12];
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	7a5b      	ldrb	r3, [r3, #9]
 8002116:	763b      	strb	r3, [r7, #24]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	7a9b      	ldrb	r3, [r3, #10]
 800211c:	767b      	strb	r3, [r7, #25]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	7adb      	ldrb	r3, [r3, #11]
 8002122:	76bb      	strb	r3, [r7, #26]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	7b1b      	ldrb	r3, [r3, #12]
 8002128:	76fb      	strb	r3, [r7, #27]
		long end = strtol(endString, NULL, 16);
 800212a:	f107 0320 	add.w	r3, r7, #32
 800212e:	2210      	movs	r2, #16
 8002130:	2100      	movs	r1, #0
 8002132:	4618      	mov	r0, r3
 8002134:	f00a fe0e 	bl	800cd54 <strtol>
 8002138:	6478      	str	r0, [r7, #68]	; 0x44
		long time = strtol(timeString, NULL, 16);
 800213a:	f107 0318 	add.w	r3, r7, #24
 800213e:	2210      	movs	r2, #16
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f00a fe06 	bl	800cd54 <strtol>
 8002148:	6438      	str	r0, [r7, #64]	; 0x40
		app_model_model.presets[prNr].presetTransitionSettings[trNr].dmxEndVal = end;
 800214a:	4b63      	ldr	r3, [pc, #396]	; (80022d8 <parseTransition+0x2f4>)
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002150:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	441a      	add	r2, r3
 800215a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800215c:	b2d9      	uxtb	r1, r3
 800215e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002160:	3302      	adds	r3, #2
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	4413      	add	r3, r2
 8002166:	3303      	adds	r3, #3
 8002168:	460a      	mov	r2, r1
 800216a:	701a      	strb	r2, [r3, #0]
		app_model_model.presets[prNr].presetTransitionSettings[trNr].transTime_ms = time;
 800216c:	4b5a      	ldr	r3, [pc, #360]	; (80022d8 <parseTransition+0x2f4>)
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002172:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	18d1      	adds	r1, r2, r3
 800217c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800217e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002180:	3302      	adds	r3, #2
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	440b      	add	r3, r1
 8002186:	3304      	adds	r3, #4
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e09e      	b.n	80022ca <parseTransition+0x2e6>
	}else if(cmdIdx == '2'){
 800218c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002190:	2b32      	cmp	r3, #50	; 0x32
 8002192:	f040 809a 	bne.w	80022ca <parseTransition+0x2e6>
		char delayString[5] = "";
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	2300      	movs	r3, #0
 800219c:	753b      	strb	r3, [r7, #20]
		char rampString[3] = "";
 800219e:	4b4d      	ldr	r3, [pc, #308]	; (80022d4 <parseTransition+0x2f0>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	733b      	strb	r3, [r7, #12]
 80021a4:	f107 030d 	add.w	r3, r7, #13
 80021a8:	2200      	movs	r2, #0
 80021aa:	801a      	strh	r2, [r3, #0]
		char activeString;
		delayString[0] = command->data[7]; delayString[1] = command->data[8]; delayString[2] = command->data[9]; delayString[3] = command->data[10];
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	79db      	ldrb	r3, [r3, #7]
 80021b0:	743b      	strb	r3, [r7, #16]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	7a1b      	ldrb	r3, [r3, #8]
 80021b6:	747b      	strb	r3, [r7, #17]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	7a5b      	ldrb	r3, [r3, #9]
 80021bc:	74bb      	strb	r3, [r7, #18]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	7a9b      	ldrb	r3, [r3, #10]
 80021c2:	74fb      	strb	r3, [r7, #19]
		rampString[0] = command->data[11]; rampString[1] = command->data[12];
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	7adb      	ldrb	r3, [r3, #11]
 80021c8:	733b      	strb	r3, [r7, #12]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	7b1b      	ldrb	r3, [r3, #12]
 80021ce:	737b      	strb	r3, [r7, #13]
		activeString = command->data[13];
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	7b5b      	ldrb	r3, [r3, #13]
 80021d4:	72fb      	strb	r3, [r7, #11]
		long delay = strtol(delayString, NULL, 16);
 80021d6:	f107 0310 	add.w	r3, r7, #16
 80021da:	2210      	movs	r2, #16
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f00a fdb8 	bl	800cd54 <strtol>
 80021e4:	63f8      	str	r0, [r7, #60]	; 0x3c
		long ramp = strtol(rampString, NULL, 16);
 80021e6:	f107 030c 	add.w	r3, r7, #12
 80021ea:	2210      	movs	r2, #16
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f00a fdb0 	bl	800cd54 <strtol>
 80021f4:	63b8      	str	r0, [r7, #56]	; 0x38
		long active = strtol(&activeString, NULL, 16);
 80021f6:	f107 030b 	add.w	r3, r7, #11
 80021fa:	2210      	movs	r2, #16
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f00a fda8 	bl	800cd54 <strtol>
 8002204:	6378      	str	r0, [r7, #52]	; 0x34
		app_model_model.presets[prNr].presetTransitionSettings[trNr].transDelay_ms = delay;
 8002206:	4b34      	ldr	r3, [pc, #208]	; (80022d8 <parseTransition+0x2f4>)
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800220c:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	18d1      	adds	r1, r2, r3
 8002216:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	440b      	add	r3, r1
 800221e:	3328      	adds	r3, #40	; 0x28
 8002220:	601a      	str	r2, [r3, #0]
		app_model_model.presets[prNr].presetTransitionSettings[trNr].transRamp = ramp;
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <parseTransition+0x2f4>)
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002228:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	441a      	add	r2, r3
 8002232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002234:	b2d9      	uxtb	r1, r3
 8002236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	4413      	add	r3, r2
 800223c:	332c      	adds	r3, #44	; 0x2c
 800223e:	460a      	mov	r2, r1
 8002240:	701a      	strb	r2, [r3, #0]
		app_model_model.presets[prNr].presetTransitionSettings[trNr].enable = active;
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <parseTransition+0x2f4>)
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002248:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	441a      	add	r2, r3
 8002252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf14      	ite	ne
 8002258:	2301      	movne	r3, #1
 800225a:	2300      	moveq	r3, #0
 800225c:	b2d9      	uxtb	r1, r3
 800225e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	4413      	add	r3, r2
 8002264:	332d      	adds	r3, #45	; 0x2d
 8002266:	460a      	mov	r2, r1
 8002268:	701a      	strb	r2, [r3, #0]
		app_model_model.presets[prNr].transitionEnableSize = 0;
 800226a:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <parseTransition+0x2f4>)
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002270:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	4413      	add	r3, r2
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
		for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 800227e:	2300      	movs	r3, #0
 8002280:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002282:	e01c      	b.n	80022be <parseTransition+0x2da>
			if(app_model_model.presets[prNr].presetTransitionSettings[j].enable) ++app_model_model.presets[prNr].transitionEnableSize;
 8002284:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <parseTransition+0x2f4>)
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800228a:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	441a      	add	r2, r3
 8002294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	4413      	add	r3, r2
 800229a:	332d      	adds	r3, #45	; 0x2d
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00a      	beq.n	80022b8 <parseTransition+0x2d4>
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <parseTransition+0x2f4>)
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a8:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	69da      	ldr	r2, [r3, #28]
 80022b4:	3201      	adds	r2, #1
 80022b6:	61da      	str	r2, [r3, #28]
		for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 80022b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ba:	3301      	adds	r3, #1
 80022bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c0:	2b13      	cmp	r3, #19
 80022c2:	dddf      	ble.n	8002284 <parseTransition+0x2a0>
		}
		app_model_model.dirty = true;
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <parseTransition+0x2f4>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	741a      	strb	r2, [r3, #16]
	}
	return true;
 80022ca:	2301      	movs	r3, #1
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3760      	adds	r7, #96	; 0x60
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	0800d5e8 	.word	0x0800d5e8
 80022d8:	200010c0 	.word	0x200010c0

080022dc <sendTransition>:
static bool sendTransition(eal_task_Task *self, uint8_t index){
 80022dc:	b5b0      	push	{r4, r5, r7, lr}
 80022de:	b08e      	sub	sp, #56	; 0x38
 80022e0:	af04      	add	r7, sp, #16
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	70fb      	strb	r3, [r7, #3]
	uint8_t prNr = index/app_cfg_NMBR_TRANSITIONS;
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	4a80      	ldr	r2, [pc, #512]	; (80024ec <sendTransition+0x210>)
 80022ec:	fba2 2303 	umull	r2, r3, r2, r3
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t trNr = index - (prNr*app_cfg_NMBR_TRANSITIONS);
 80022f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022fa:	461a      	mov	r2, r3
 80022fc:	0112      	lsls	r2, r2, #4
 80022fe:	1ad2      	subs	r2, r2, r3
 8002300:	0092      	lsls	r2, r2, #2
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	b2da      	uxtb	r2, r3
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	4413      	add	r3, r2
 800230c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t ch = app_model_model.presets[prNr].presetTransitionSettings[trNr].dmxCh;
 8002310:	4b77      	ldr	r3, [pc, #476]	; (80024f0 <sendTransition+0x214>)
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002318:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	441a      	add	r2, r3
 8002322:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002326:	3302      	adds	r3, #2
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	4413      	add	r3, r2
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t start = app_model_model.presets[prNr].presetTransitionSettings[trNr].dmxStartVal;
 8002332:	4b6f      	ldr	r3, [pc, #444]	; (80024f0 <sendTransition+0x214>)
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800233a:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	441a      	add	r2, r3
 8002344:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002348:	3302      	adds	r3, #2
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	4413      	add	r3, r2
 800234e:	3302      	adds	r3, #2
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t end = app_model_model.presets[prNr].presetTransitionSettings[trNr].dmxEndVal;
 8002356:	4b66      	ldr	r3, [pc, #408]	; (80024f0 <sendTransition+0x214>)
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800235e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	441a      	add	r2, r3
 8002368:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800236c:	3302      	adds	r3, #2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	4413      	add	r3, r2
 8002372:	3303      	adds	r3, #3
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t time = app_model_model.presets[prNr].presetTransitionSettings[trNr].transTime_ms;
 800237a:	4b5d      	ldr	r3, [pc, #372]	; (80024f0 <sendTransition+0x214>)
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002382:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	441a      	add	r2, r3
 800238c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002390:	3302      	adds	r3, #2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	4413      	add	r3, r2
 8002396:	3304      	adds	r3, #4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	843b      	strh	r3, [r7, #32]
	uint16_t delay = app_model_model.presets[prNr].presetTransitionSettings[trNr].transDelay_ms;
 800239c:	4b54      	ldr	r3, [pc, #336]	; (80024f0 <sendTransition+0x214>)
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023a4:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	441a      	add	r2, r3
 80023ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	4413      	add	r3, r2
 80023b6:	3328      	adds	r3, #40	; 0x28
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	83fb      	strh	r3, [r7, #30]
	uint8_t ramp = app_model_model.presets[prNr].presetTransitionSettings[trNr].transRamp;
 80023bc:	4b4c      	ldr	r3, [pc, #304]	; (80024f0 <sendTransition+0x214>)
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023c4:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	441a      	add	r2, r3
 80023ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	4413      	add	r3, r2
 80023d6:	332c      	adds	r3, #44	; 0x2c
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	777b      	strb	r3, [r7, #29]
	bool active = app_model_model.presets[prNr].presetTransitionSettings[trNr].enable;
 80023dc:	4b44      	ldr	r3, [pc, #272]	; (80024f0 <sendTransition+0x214>)
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023e4:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	441a      	add	r2, r3
 80023ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	4413      	add	r3, r2
 80023f6:	332d      	adds	r3, #45	; 0x2d
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	773b      	strb	r3, [r7, #28]
	app_interface_cmd_Cmd newCmd;
	snprintf(newCmd.data, sizeof(newCmd.data),"#T0%02x%02x%02x%02x000\r", prNr, trNr, ch, start);
 80023fc:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8002400:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002404:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002408:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800240c:	f107 0008 	add.w	r0, r7, #8
 8002410:	9102      	str	r1, [sp, #8]
 8002412:	9201      	str	r2, [sp, #4]
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	4623      	mov	r3, r4
 8002418:	4a36      	ldr	r2, [pc, #216]	; (80024f4 <sendTransition+0x218>)
 800241a:	2111      	movs	r1, #17
 800241c:	f00a fbd0 	bl	800cbc0 <sniprintf>
	newCmd.data[14] = '\r';
 8002420:	230d      	movs	r3, #13
 8002422:	75bb      	strb	r3, [r7, #22]
	newCmd.data[15] = '\n';
 8002424:	230a      	movs	r3, #10
 8002426:	75fb      	strb	r3, [r7, #23]
	newCmd.data[16] = '\0';
 8002428:	2300      	movs	r3, #0
 800242a:	763b      	strb	r3, [r7, #24]
	if(!app_interface_cmd_writeCmd(&newCmd, &cmdTxBuf)) signalizeError();
 800242c:	f107 0308 	add.w	r3, r7, #8
 8002430:	4931      	ldr	r1, [pc, #196]	; (80024f8 <sendTransition+0x21c>)
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fb0a 	bl	8002a4c <app_interface_cmd_writeCmd>
 8002438:	4603      	mov	r3, r0
 800243a:	f083 0301 	eor.w	r3, r3, #1
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <sendTransition+0x16c>
 8002444:	f000 fae4 	bl	8002a10 <signalizeError>
	snprintf(newCmd.data, sizeof(newCmd.data),"#T1%02x%02x%02x%04x0\r", prNr, trNr, end, time);
 8002448:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 800244c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002450:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002454:	8c39      	ldrh	r1, [r7, #32]
 8002456:	f107 0008 	add.w	r0, r7, #8
 800245a:	9102      	str	r1, [sp, #8]
 800245c:	9201      	str	r2, [sp, #4]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	4623      	mov	r3, r4
 8002462:	4a26      	ldr	r2, [pc, #152]	; (80024fc <sendTransition+0x220>)
 8002464:	2111      	movs	r1, #17
 8002466:	f00a fbab 	bl	800cbc0 <sniprintf>
	newCmd.data[14] = '\r';
 800246a:	230d      	movs	r3, #13
 800246c:	75bb      	strb	r3, [r7, #22]
	newCmd.data[15] = '\n';
 800246e:	230a      	movs	r3, #10
 8002470:	75fb      	strb	r3, [r7, #23]
	newCmd.data[16] = '\0';
 8002472:	2300      	movs	r3, #0
 8002474:	763b      	strb	r3, [r7, #24]
	if(!app_interface_cmd_writeCmd(&newCmd, &cmdTxBuf)) signalizeError();
 8002476:	f107 0308 	add.w	r3, r7, #8
 800247a:	491f      	ldr	r1, [pc, #124]	; (80024f8 <sendTransition+0x21c>)
 800247c:	4618      	mov	r0, r3
 800247e:	f000 fae5 	bl	8002a4c <app_interface_cmd_writeCmd>
 8002482:	4603      	mov	r3, r0
 8002484:	f083 0301 	eor.w	r3, r3, #1
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <sendTransition+0x1b6>
 800248e:	f000 fabf 	bl	8002a10 <signalizeError>
	snprintf(newCmd.data, sizeof(newCmd.data),"#T2%02x%02x%04x%02x%01x\r", prNr, trNr, delay, ramp, active);
 8002492:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 8002496:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800249a:	8bfa      	ldrh	r2, [r7, #30]
 800249c:	7f79      	ldrb	r1, [r7, #29]
 800249e:	7f38      	ldrb	r0, [r7, #28]
 80024a0:	f107 0408 	add.w	r4, r7, #8
 80024a4:	9003      	str	r0, [sp, #12]
 80024a6:	9102      	str	r1, [sp, #8]
 80024a8:	9201      	str	r2, [sp, #4]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	462b      	mov	r3, r5
 80024ae:	4a14      	ldr	r2, [pc, #80]	; (8002500 <sendTransition+0x224>)
 80024b0:	2111      	movs	r1, #17
 80024b2:	4620      	mov	r0, r4
 80024b4:	f00a fb84 	bl	800cbc0 <sniprintf>
	newCmd.data[14] = '\r';
 80024b8:	230d      	movs	r3, #13
 80024ba:	75bb      	strb	r3, [r7, #22]
	newCmd.data[15] = '\n';
 80024bc:	230a      	movs	r3, #10
 80024be:	75fb      	strb	r3, [r7, #23]
	newCmd.data[16] = '\0';
 80024c0:	2300      	movs	r3, #0
 80024c2:	763b      	strb	r3, [r7, #24]
	if(!app_interface_cmd_writeCmd(&newCmd, &cmdTxBuf)) signalizeError();
 80024c4:	f107 0308 	add.w	r3, r7, #8
 80024c8:	490b      	ldr	r1, [pc, #44]	; (80024f8 <sendTransition+0x21c>)
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fabe 	bl	8002a4c <app_interface_cmd_writeCmd>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f083 0301 	eor.w	r3, r3, #1
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <sendTransition+0x204>
 80024dc:	f000 fa98 	bl	8002a10 <signalizeError>
	return true;
 80024e0:	2301      	movs	r3, #1
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3728      	adds	r7, #40	; 0x28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bdb0      	pop	{r4, r5, r7, pc}
 80024ea:	bf00      	nop
 80024ec:	cccccccd 	.word	0xcccccccd
 80024f0:	200010c0 	.word	0x200010c0
 80024f4:	0800d5ec 	.word	0x0800d5ec
 80024f8:	200000f4 	.word	0x200000f4
 80024fc:	0800d604 	.word	0x0800d604
 8002500:	0800d61c 	.word	0x0800d61c

08002504 <parseFootswitch>:

static bool parseFootswitch(eal_task_Task *self, app_interface_cmd_Cmd *command){
 8002504:	b580      	push	{r7, lr}
 8002506:	b08e      	sub	sp, #56	; 0x38
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
	char cmdIdx = command->data[2];
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	789b      	ldrb	r3, [r3, #2]
 8002512:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	char fNrString[3];
	fNrString[0] = command->data[3]; fNrString[1] = command->data[4];
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	78db      	ldrb	r3, [r3, #3]
 800251a:	773b      	strb	r3, [r7, #28]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	791b      	ldrb	r3, [r3, #4]
 8002520:	777b      	strb	r3, [r7, #29]
	long fNr = strtol(fNrString, NULL, 16);
 8002522:	f107 031c 	add.w	r3, r7, #28
 8002526:	2210      	movs	r2, #16
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f00a fc12 	bl	800cd54 <strtol>
 8002530:	6338      	str	r0, [r7, #48]	; 0x30
	if(cmdIdx == '0'){
 8002532:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002536:	2b30      	cmp	r3, #48	; 0x30
 8002538:	d166      	bne.n	8002608 <parseFootswitch+0x104>
		char pressedString[3];
		char releasedString[3];
		char holdshortString[3];
		char holdlongString[3];
		pressedString[0] = command->data[5]; pressedString[1] = command->data[6];
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	795b      	ldrb	r3, [r3, #5]
 800253e:	763b      	strb	r3, [r7, #24]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	799b      	ldrb	r3, [r3, #6]
 8002544:	767b      	strb	r3, [r7, #25]
		releasedString[0] = command->data[7]; releasedString[1] = command->data[8];
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	79db      	ldrb	r3, [r3, #7]
 800254a:	753b      	strb	r3, [r7, #20]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	7a1b      	ldrb	r3, [r3, #8]
 8002550:	757b      	strb	r3, [r7, #21]
		holdshortString[0] = command->data[9]; holdshortString[1] = command->data[10];
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	7a5b      	ldrb	r3, [r3, #9]
 8002556:	743b      	strb	r3, [r7, #16]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	7a9b      	ldrb	r3, [r3, #10]
 800255c:	747b      	strb	r3, [r7, #17]
		holdlongString[0] = command->data[11]; holdlongString[1] = command->data[12];
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	7adb      	ldrb	r3, [r3, #11]
 8002562:	733b      	strb	r3, [r7, #12]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	7b1b      	ldrb	r3, [r3, #12]
 8002568:	737b      	strb	r3, [r7, #13]
		long pressed = strtol(pressedString, NULL, 16);
 800256a:	f107 0318 	add.w	r3, r7, #24
 800256e:	2210      	movs	r2, #16
 8002570:	2100      	movs	r1, #0
 8002572:	4618      	mov	r0, r3
 8002574:	f00a fbee 	bl	800cd54 <strtol>
 8002578:	62f8      	str	r0, [r7, #44]	; 0x2c
		long released = strtol(releasedString, NULL, 16);
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	2210      	movs	r2, #16
 8002580:	2100      	movs	r1, #0
 8002582:	4618      	mov	r0, r3
 8002584:	f00a fbe6 	bl	800cd54 <strtol>
 8002588:	62b8      	str	r0, [r7, #40]	; 0x28
		long holdshort = strtol(holdshortString, NULL, 16);
 800258a:	f107 0310 	add.w	r3, r7, #16
 800258e:	2210      	movs	r2, #16
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f00a fbde 	bl	800cd54 <strtol>
 8002598:	6278      	str	r0, [r7, #36]	; 0x24
		long holdlong = strtol(holdlongString, NULL, 16);
 800259a:	f107 030c 	add.w	r3, r7, #12
 800259e:	2210      	movs	r2, #16
 80025a0:	2100      	movs	r1, #0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f00a fbd6 	bl	800cd54 <strtol>
 80025a8:	6238      	str	r0, [r7, #32]
		app_model_model.footswitches[fNr].press.presetNr = pressed;
 80025aa:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <parseFootswitch+0x110>)
 80025ac:	68d9      	ldr	r1, [r3, #12]
 80025ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4413      	add	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	440b      	add	r3, r1
 80025ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	709a      	strb	r2, [r3, #2]
		app_model_model.footswitches[fNr].release.presetNr = released;
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <parseFootswitch+0x110>)
 80025c2:	68d9      	ldr	r1, [r3, #12]
 80025c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	440b      	add	r3, r1
 80025d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	719a      	strb	r2, [r3, #6]
		app_model_model.footswitches[fNr].holdShort.presetNr = holdshort;
 80025d6:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <parseFootswitch+0x110>)
 80025d8:	68d9      	ldr	r1, [r3, #12]
 80025da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	440b      	add	r3, r1
 80025e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	729a      	strb	r2, [r3, #10]
		app_model_model.footswitches[fNr].holdLong.presetNr = holdlong;
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <parseFootswitch+0x110>)
 80025ee:	68d9      	ldr	r1, [r3, #12]
 80025f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025f2:	4613      	mov	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	440b      	add	r3, r1
 80025fc:	6a3a      	ldr	r2, [r7, #32]
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	739a      	strb	r2, [r3, #14]
		app_model_model.dirty = true;
 8002602:	4b04      	ldr	r3, [pc, #16]	; (8002614 <parseFootswitch+0x110>)
 8002604:	2201      	movs	r2, #1
 8002606:	741a      	strb	r2, [r3, #16]
	}
	return true;
 8002608:	2301      	movs	r3, #1
}
 800260a:	4618      	mov	r0, r3
 800260c:	3738      	adds	r7, #56	; 0x38
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200010c0 	.word	0x200010c0

08002618 <sendFootswitch>:
static bool sendFootswitch(eal_task_Task *self, uint8_t index){
 8002618:	b5b0      	push	{r4, r5, r7, lr}
 800261a:	b08c      	sub	sp, #48	; 0x30
 800261c:	af04      	add	r7, sp, #16
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	70fb      	strb	r3, [r7, #3]
	app_interface_cmd_Cmd newCmd;
	uint8_t pressed = app_model_model.footswitches[index].press.presetNr;
 8002624:	4b28      	ldr	r3, [pc, #160]	; (80026c8 <sendFootswitch+0xb0>)
 8002626:	68d9      	ldr	r1, [r3, #12]
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	440b      	add	r3, r1
 8002634:	789b      	ldrb	r3, [r3, #2]
 8002636:	77fb      	strb	r3, [r7, #31]
	uint8_t released = app_model_model.footswitches[index].release.presetNr;
 8002638:	4b23      	ldr	r3, [pc, #140]	; (80026c8 <sendFootswitch+0xb0>)
 800263a:	68d9      	ldr	r1, [r3, #12]
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	440b      	add	r3, r1
 8002648:	799b      	ldrb	r3, [r3, #6]
 800264a:	77bb      	strb	r3, [r7, #30]
	uint8_t holdshort = app_model_model.footswitches[index].holdShort.presetNr;
 800264c:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <sendFootswitch+0xb0>)
 800264e:	68d9      	ldr	r1, [r3, #12]
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	4613      	mov	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4413      	add	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	440b      	add	r3, r1
 800265c:	7a9b      	ldrb	r3, [r3, #10]
 800265e:	777b      	strb	r3, [r7, #29]
	uint8_t holdlong = app_model_model.footswitches[index].holdLong.presetNr;
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <sendFootswitch+0xb0>)
 8002662:	68d9      	ldr	r1, [r3, #12]
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	4613      	mov	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	440b      	add	r3, r1
 8002670:	7b9b      	ldrb	r3, [r3, #14]
 8002672:	773b      	strb	r3, [r7, #28]
	snprintf(newCmd.data, sizeof(newCmd.data),"#F0%02x%02x%02x%02x%02x0\r", index, pressed, released, holdshort, holdlong);
 8002674:	78fd      	ldrb	r5, [r7, #3]
 8002676:	7ffb      	ldrb	r3, [r7, #31]
 8002678:	7fba      	ldrb	r2, [r7, #30]
 800267a:	7f79      	ldrb	r1, [r7, #29]
 800267c:	7f38      	ldrb	r0, [r7, #28]
 800267e:	f107 0408 	add.w	r4, r7, #8
 8002682:	9003      	str	r0, [sp, #12]
 8002684:	9102      	str	r1, [sp, #8]
 8002686:	9201      	str	r2, [sp, #4]
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	462b      	mov	r3, r5
 800268c:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <sendFootswitch+0xb4>)
 800268e:	2111      	movs	r1, #17
 8002690:	4620      	mov	r0, r4
 8002692:	f00a fa95 	bl	800cbc0 <sniprintf>
	newCmd.data[14] = '\r';
 8002696:	230d      	movs	r3, #13
 8002698:	75bb      	strb	r3, [r7, #22]
	newCmd.data[15] = '\n';
 800269a:	230a      	movs	r3, #10
 800269c:	75fb      	strb	r3, [r7, #23]
	newCmd.data[16] = '\0';
 800269e:	2300      	movs	r3, #0
 80026a0:	763b      	strb	r3, [r7, #24]
	if(!app_interface_cmd_writeCmd(&newCmd, &cmdTxBuf)) signalizeError();
 80026a2:	f107 0308 	add.w	r3, r7, #8
 80026a6:	490a      	ldr	r1, [pc, #40]	; (80026d0 <sendFootswitch+0xb8>)
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 f9cf 	bl	8002a4c <app_interface_cmd_writeCmd>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f083 0301 	eor.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <sendFootswitch+0xa6>
 80026ba:	f000 f9a9 	bl	8002a10 <signalizeError>
	return true;
 80026be:	2301      	movs	r3, #1
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bdb0      	pop	{r4, r5, r7, pc}
 80026c8:	200010c0 	.word	0x200010c0
 80026cc:	0800d638 	.word	0x0800d638
 80026d0:	200000f4 	.word	0x200000f4

080026d4 <parsePreset>:

static bool parsePreset(eal_task_Task *self, app_interface_cmd_Cmd *command){
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
	char cmdIdx = command->data[2];
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	789b      	ldrb	r3, [r3, #2]
 80026e2:	75fb      	strb	r3, [r7, #23]
	char prNrString[3];
	prNrString[0] = command->data[3]; prNrString[1] = command->data[4];
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	78db      	ldrb	r3, [r3, #3]
 80026e8:	733b      	strb	r3, [r7, #12]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	791b      	ldrb	r3, [r3, #4]
 80026ee:	737b      	strb	r3, [r7, #13]
	long prNr = strtol(prNrString, NULL, 16);
 80026f0:	f107 030c 	add.w	r3, r7, #12
 80026f4:	2210      	movs	r2, #16
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f00a fb2b 	bl	800cd54 <strtol>
 80026fe:	6138      	str	r0, [r7, #16]
	if(cmdIdx == '0'){
 8002700:	7dfb      	ldrb	r3, [r7, #23]
 8002702:	2b30      	cmp	r3, #48	; 0x30
 8002704:	d10f      	bne.n	8002726 <parsePreset+0x52>
		strncpy (&app_model_model.presets[prNr].name[0], &command->data[5], 9);
 8002706:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <parsePreset+0x9c>)
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	4618      	mov	r0, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	3305      	adds	r3, #5
 800271c:	2209      	movs	r2, #9
 800271e:	4619      	mov	r1, r3
 8002720:	f00a fa82 	bl	800cc28 <strncpy>
 8002724:	e01f      	b.n	8002766 <parsePreset+0x92>
	}else if(cmdIdx == '1'){
 8002726:	7dfb      	ldrb	r3, [r7, #23]
 8002728:	2b31      	cmp	r3, #49	; 0x31
 800272a:	d113      	bne.n	8002754 <parsePreset+0x80>
		strncpy (&app_model_model.presets[prNr].name[9], &command->data[5], 9);
 800272c:	4b10      	ldr	r3, [pc, #64]	; (8002770 <parsePreset+0x9c>)
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	f103 0009 	add.w	r0, r3, #9
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	3305      	adds	r3, #5
 8002744:	2209      	movs	r2, #9
 8002746:	4619      	mov	r1, r3
 8002748:	f00a fa6e 	bl	800cc28 <strncpy>
		app_model_model.dirty = true;
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <parsePreset+0x9c>)
 800274e:	2201      	movs	r2, #1
 8002750:	741a      	strb	r2, [r3, #16]
 8002752:	e008      	b.n	8002766 <parsePreset+0x92>
	}else if(cmdIdx == 'T'){
 8002754:	7dfb      	ldrb	r3, [r7, #23]
 8002756:	2b54      	cmp	r3, #84	; 0x54
 8002758:	d105      	bne.n	8002766 <parsePreset+0x92>
		sendDmxPreset(self, prNr);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	4619      	mov	r1, r3
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f921 	bl	80029a8 <sendDmxPreset>
	}
	return true;
 8002766:	2301      	movs	r3, #1
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	200010c0 	.word	0x200010c0

08002774 <sendPresetName>:
static bool sendPresetName(eal_task_Task *self, uint8_t index){
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
	app_interface_cmd_Cmd newCmd;
	memset(newCmd.data,' ', sizeof(newCmd.data));
 8002780:	f107 030c 	add.w	r3, r7, #12
 8002784:	2211      	movs	r2, #17
 8002786:	2120      	movs	r1, #32
 8002788:	4618      	mov	r0, r3
 800278a:	f00a fa10 	bl	800cbae <memset>
	snprintf(newCmd.data, 6,"#P0%02x", index);
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	f107 000c 	add.w	r0, r7, #12
 8002794:	4a40      	ldr	r2, [pc, #256]	; (8002898 <sendPresetName+0x124>)
 8002796:	2106      	movs	r1, #6
 8002798:	f00a fa12 	bl	800cbc0 <sniprintf>
	newCmd.data[5] = ' ';
 800279c:	2320      	movs	r3, #32
 800279e:	747b      	strb	r3, [r7, #17]
	uint8_t length = strlen(&app_model_model.presets[index].name[0]);
 80027a0:	4b3e      	ldr	r3, [pc, #248]	; (800289c <sendPresetName+0x128>)
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fd fd15 	bl	80001e0 <strlen>
 80027b6:	4603      	mov	r3, r0
 80027b8:	77fb      	strb	r3, [r7, #31]
	if(length > 9) length = 9;
 80027ba:	7ffb      	ldrb	r3, [r7, #31]
 80027bc:	2b09      	cmp	r3, #9
 80027be:	d901      	bls.n	80027c4 <sendPresetName+0x50>
 80027c0:	2309      	movs	r3, #9
 80027c2:	77fb      	strb	r3, [r7, #31]
	strncpy(&newCmd.data[5], &app_model_model.presets[index].name[0], length);
 80027c4:	4b35      	ldr	r3, [pc, #212]	; (800289c <sendPresetName+0x128>)
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	7ffa      	ldrb	r2, [r7, #31]
 80027d8:	f107 030c 	add.w	r3, r7, #12
 80027dc:	3305      	adds	r3, #5
 80027de:	4618      	mov	r0, r3
 80027e0:	f00a fa22 	bl	800cc28 <strncpy>
	newCmd.data[14] = '\r';
 80027e4:	230d      	movs	r3, #13
 80027e6:	76bb      	strb	r3, [r7, #26]
	newCmd.data[15] = '\n';
 80027e8:	230a      	movs	r3, #10
 80027ea:	76fb      	strb	r3, [r7, #27]
	newCmd.data[16] = '\0';
 80027ec:	2300      	movs	r3, #0
 80027ee:	773b      	strb	r3, [r7, #28]
	app_interface_cmd_writeCmd(&newCmd, &cmdTxBuf);
 80027f0:	f107 030c 	add.w	r3, r7, #12
 80027f4:	492a      	ldr	r1, [pc, #168]	; (80028a0 <sendPresetName+0x12c>)
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f928 	bl	8002a4c <app_interface_cmd_writeCmd>
	memset(newCmd.data,' ', sizeof(newCmd.data));
 80027fc:	f107 030c 	add.w	r3, r7, #12
 8002800:	2211      	movs	r2, #17
 8002802:	2120      	movs	r1, #32
 8002804:	4618      	mov	r0, r3
 8002806:	f00a f9d2 	bl	800cbae <memset>
	snprintf(newCmd.data, 6,"#P1%02x", index);
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	f107 000c 	add.w	r0, r7, #12
 8002810:	4a24      	ldr	r2, [pc, #144]	; (80028a4 <sendPresetName+0x130>)
 8002812:	2106      	movs	r1, #6
 8002814:	f00a f9d4 	bl	800cbc0 <sniprintf>
	newCmd.data[5] = ' ';
 8002818:	2320      	movs	r3, #32
 800281a:	747b      	strb	r3, [r7, #17]
	length = strlen(&app_model_model.presets[index].name[9]);
 800281c:	4b1f      	ldr	r3, [pc, #124]	; (800289c <sendPresetName+0x128>)
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	3309      	adds	r3, #9
 800282e:	4618      	mov	r0, r3
 8002830:	f7fd fcd6 	bl	80001e0 <strlen>
 8002834:	4603      	mov	r3, r0
 8002836:	77fb      	strb	r3, [r7, #31]
	if(length > 9) length = 9;
 8002838:	7ffb      	ldrb	r3, [r7, #31]
 800283a:	2b09      	cmp	r3, #9
 800283c:	d901      	bls.n	8002842 <sendPresetName+0xce>
 800283e:	2309      	movs	r3, #9
 8002840:	77fb      	strb	r3, [r7, #31]
	strncpy(&newCmd.data[5], &app_model_model.presets[index].name[9], length);
 8002842:	4b16      	ldr	r3, [pc, #88]	; (800289c <sendPresetName+0x128>)
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	4413      	add	r3, r2
 8002852:	f103 0109 	add.w	r1, r3, #9
 8002856:	7ffa      	ldrb	r2, [r7, #31]
 8002858:	f107 030c 	add.w	r3, r7, #12
 800285c:	3305      	adds	r3, #5
 800285e:	4618      	mov	r0, r3
 8002860:	f00a f9e2 	bl	800cc28 <strncpy>
	newCmd.data[14] = '\r';
 8002864:	230d      	movs	r3, #13
 8002866:	76bb      	strb	r3, [r7, #26]
	newCmd.data[15] = '\n';
 8002868:	230a      	movs	r3, #10
 800286a:	76fb      	strb	r3, [r7, #27]
	newCmd.data[16] = '\0';
 800286c:	2300      	movs	r3, #0
 800286e:	773b      	strb	r3, [r7, #28]
	if(!app_interface_cmd_writeCmd(&newCmd, &cmdTxBuf)) signalizeError();
 8002870:	f107 030c 	add.w	r3, r7, #12
 8002874:	490a      	ldr	r1, [pc, #40]	; (80028a0 <sendPresetName+0x12c>)
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f8e8 	bl	8002a4c <app_interface_cmd_writeCmd>
 800287c:	4603      	mov	r3, r0
 800287e:	f083 0301 	eor.w	r3, r3, #1
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <sendPresetName+0x118>
 8002888:	f000 f8c2 	bl	8002a10 <signalizeError>
	return true;
 800288c:	2301      	movs	r3, #1
}
 800288e:	4618      	mov	r0, r3
 8002890:	3720      	adds	r7, #32
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	0800d654 	.word	0x0800d654
 800289c:	200010c0 	.word	0x200010c0
 80028a0:	200000f4 	.word	0x200000f4
 80028a4:	0800d65c 	.word	0x0800d65c

080028a8 <parseLoadConfig>:

static bool parseLoadConfig(eal_task_Task *self, app_interface_cmd_Cmd *command){
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
	char cmdIdx = command->data[2];
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	789b      	ldrb	r3, [r3, #2]
 80028b6:	73fb      	strb	r3, [r7, #15]
	if(cmdIdx == '0'){
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	2b30      	cmp	r3, #48	; 0x30
 80028bc:	d105      	bne.n	80028ca <parseLoadConfig+0x22>
		uploadCmdCounter = 0;
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <parseLoadConfig+0x30>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	801a      	strh	r2, [r3, #0]
		uploadState = upload_PRESET_NAME;
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <parseLoadConfig+0x34>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
	}
	return true;
 80028ca:	2301      	movs	r3, #1
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	20009f66 	.word	0x20009f66
 80028dc:	20009f65 	.word	0x20009f65

080028e0 <uploadConfig>:

static void uploadConfig(eal_task_Task *self){
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	if(uploadState == upload_NONE) return;
 80028e8:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <uploadConfig+0xc0>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d053      	beq.n	8002998 <uploadConfig+0xb8>
	else if(uploadState == upload_PRESET_NAME){
 80028f0:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <uploadConfig+0xc0>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d117      	bne.n	8002928 <uploadConfig+0x48>
		sendPresetName(self,uploadCmdCounter);
 80028f8:	4b2a      	ldr	r3, [pc, #168]	; (80029a4 <uploadConfig+0xc4>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	4619      	mov	r1, r3
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ff37 	bl	8002774 <sendPresetName>
		if(++uploadCmdCounter >= app_cfg_NMBR_PRESETS){
 8002906:	4b27      	ldr	r3, [pc, #156]	; (80029a4 <uploadConfig+0xc4>)
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	3301      	adds	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <uploadConfig+0xc4>)
 8002910:	801a      	strh	r2, [r3, #0]
 8002912:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <uploadConfig+0xc4>)
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	2b09      	cmp	r3, #9
 8002918:	d93f      	bls.n	800299a <uploadConfig+0xba>
			uploadCmdCounter = 0;
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <uploadConfig+0xc4>)
 800291c:	2200      	movs	r2, #0
 800291e:	801a      	strh	r2, [r3, #0]
			uploadState = upload_PRESET_TRANSITION;
 8002920:	4b1f      	ldr	r3, [pc, #124]	; (80029a0 <uploadConfig+0xc0>)
 8002922:	2202      	movs	r2, #2
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	e038      	b.n	800299a <uploadConfig+0xba>
		}
	}else if(uploadState == upload_PRESET_TRANSITION){
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <uploadConfig+0xc0>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d117      	bne.n	8002960 <uploadConfig+0x80>
		sendTransition(self,uploadCmdCounter);
 8002930:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <uploadConfig+0xc4>)
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	4619      	mov	r1, r3
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff fccf 	bl	80022dc <sendTransition>
		if(++uploadCmdCounter >= app_cfg_NMBR_PRESETS*app_cfg_NMBR_TRANSITIONS){
 800293e:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <uploadConfig+0xc4>)
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <uploadConfig+0xc4>)
 8002948:	801a      	strh	r2, [r3, #0]
 800294a:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <uploadConfig+0xc4>)
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	2bc7      	cmp	r3, #199	; 0xc7
 8002950:	d923      	bls.n	800299a <uploadConfig+0xba>
			uploadCmdCounter = 0;
 8002952:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <uploadConfig+0xc4>)
 8002954:	2200      	movs	r2, #0
 8002956:	801a      	strh	r2, [r3, #0]
			uploadState = upload_FOOTSWITCH;
 8002958:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <uploadConfig+0xc0>)
 800295a:	2203      	movs	r2, #3
 800295c:	701a      	strb	r2, [r3, #0]
 800295e:	e01c      	b.n	800299a <uploadConfig+0xba>
		}
	}else if(uploadState == upload_FOOTSWITCH){
 8002960:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <uploadConfig+0xc0>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d118      	bne.n	800299a <uploadConfig+0xba>
		sendFootswitch(self,uploadCmdCounter);
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <uploadConfig+0xc4>)
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	4619      	mov	r1, r3
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff fe51 	bl	8002618 <sendFootswitch>
		if(++uploadCmdCounter >= app_cfg_NMBR_BTNS-1){
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <uploadConfig+0xc4>)
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	3301      	adds	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <uploadConfig+0xc4>)
 8002980:	801a      	strh	r2, [r3, #0]
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <uploadConfig+0xc4>)
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	2b03      	cmp	r3, #3
 8002988:	d907      	bls.n	800299a <uploadConfig+0xba>
			uploadCmdCounter = 0;
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <uploadConfig+0xc4>)
 800298c:	2200      	movs	r2, #0
 800298e:	801a      	strh	r2, [r3, #0]
			uploadState = upload_NONE;
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <uploadConfig+0xc0>)
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
 8002996:	e000      	b.n	800299a <uploadConfig+0xba>
	if(uploadState == upload_NONE) return;
 8002998:	bf00      	nop
		}
	}
}
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20009f65 	.word	0x20009f65
 80029a4:	20009f66 	.word	0x20009f66

080029a8 <sendDmxPreset>:

/* Helper ----------------------------------------------------------------------*/
static void sendDmxPreset(eal_task_Task *self, uint8_t preset){
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	70fb      	strb	r3, [r7, #3]
	if(self->sendMsg == NULL) return;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d018      	beq.n	80029ee <sendDmxPreset+0x46>
	msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_ACTION(preset), app_cfg_dmx_preset_TRIGGER_ENABLE, 0, 0);
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	813b      	strh	r3, [r7, #8]
 80029cc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80029d0:	817b      	strh	r3, [r7, #10]
 80029d2:	2350      	movs	r3, #80	; 0x50
 80029d4:	733b      	strb	r3, [r7, #12]
 80029d6:	2300      	movs	r3, #0
 80029d8:	737b      	strb	r3, [r7, #13]
 80029da:	2300      	movs	r3, #0
 80029dc:	81fb      	strh	r3, [r7, #14]
	self->sendMsg(self, &newMessage);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f107 0208 	add.w	r2, r7, #8
 80029e6:	4611      	mov	r1, r2
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	4798      	blx	r3
 80029ec:	e000      	b.n	80029f0 <sendDmxPreset+0x48>
	if(self->sendMsg == NULL) return;
 80029ee:	bf00      	nop
}
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <signalizeCommuniction>:

static void signalizeCommuniction(){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
	 HAL_GPIO_TogglePin(O_PWM_LED1_GPIO_Port, O_PWM_LED1_Pin);
 80029fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a00:	4802      	ldr	r0, [pc, #8]	; (8002a0c <signalizeCommuniction+0x14>)
 8002a02:	f000 ffc7 	bl	8003994 <HAL_GPIO_TogglePin>
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	48000400 	.word	0x48000400

08002a10 <signalizeError>:
static void signalizeError(){
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(O_PWM_LED2_GPIO_Port, O_PWM_LED2_Pin, GPIO_PIN_SET);
 8002a14:	2201      	movs	r2, #1
 8002a16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a1a:	4802      	ldr	r0, [pc, #8]	; (8002a24 <signalizeError+0x14>)
 8002a1c:	f000 ffa2 	bl	8003964 <HAL_GPIO_WritePin>
}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	48000400 	.word	0x48000400

08002a28 <UART4_IRQHandler>:
/*IRQs ----------------------------------------------------------------------*/
void UART4_IRQHandler(void){
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
	app_uart_irqHandler(huart4.Instance, &uart4RxBuf, &uart4TxBuf);
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <UART4_IRQHandler+0x18>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a04      	ldr	r2, [pc, #16]	; (8002a44 <UART4_IRQHandler+0x1c>)
 8002a32:	4905      	ldr	r1, [pc, #20]	; (8002a48 <UART4_IRQHandler+0x20>)
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fa95 	bl	8002f64 <app_uart_irqHandler>
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	2000a690 	.word	0x2000a690
 8002a44:	200000dc 	.word	0x200000dc
 8002a48:	200000e8 	.word	0x200000e8

08002a4c <app_interface_cmd_writeCmd>:
void app_interface_cmd_initBuffer(app_interface_cmd_Buffer *buf){
	buf->buffer.in = 0;
	buf->buffer.out = 0;
}

bool app_interface_cmd_writeCmd(app_interface_cmd_Cmd *cmd, app_interface_cmd_Buffer *buf){
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
	uint8_t bufferState =  ringbuffer_NO_BUF;
 8002a56:	2300      	movs	r3, #0
 8002a58:	75fb      	strb	r3, [r7, #23]
	uint16_t nextMsgTmp = buf->buffer.in;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	81fb      	strh	r3, [r7, #14]
	if(cmd != NULL){
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d013      	beq.n	8002a8e <app_interface_cmd_writeCmd+0x42>
		for(int i = 0; i < (app_interface_cmd_LENGTH+1); ++i){
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	e00d      	b.n	8002a88 <app_interface_cmd_writeCmd+0x3c>
			bufferState = RINGBUFFER_cIn(cmd->data[i], &buf->buffer);
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4413      	add	r3, r2
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f006 ffbe 	bl	80099fa <RINGBUFFER_cIn>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	75fb      	strb	r3, [r7, #23]
		for(int i = 0; i < (app_interface_cmd_LENGTH+1); ++i){
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	3301      	adds	r3, #1
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b10      	cmp	r3, #16
 8002a8c:	ddee      	ble.n	8002a6c <app_interface_cmd_writeCmd+0x20>
		}
	}
	if(bufferState == ringbuffer_FULL) buf->buffer.in = nextMsgTmp;
 8002a8e:	7dfb      	ldrb	r3, [r7, #23]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d102      	bne.n	8002a9a <app_interface_cmd_writeCmd+0x4e>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	89fa      	ldrh	r2, [r7, #14]
 8002a98:	801a      	strh	r2, [r3, #0]
	if(bufferState == ringbuffer_OK) return true;
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <app_interface_cmd_writeCmd+0x58>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <app_interface_cmd_writeCmd+0x5a>
	return false;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <app_interface_cmd_getNext>:

app_interface_cmd_Cmd *app_interface_cmd_getNext(app_interface_cmd_Cmd *cmd, app_interface_cmd_Buffer *buf){
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	6039      	str	r1, [r7, #0]
	uint8_t bufferState =  ringbuffer_OK;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
	memset(cmd->data, 0, sizeof(cmd->data));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2211      	movs	r2, #17
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f00a f873 	bl	800cbae <memset>
	for(int i = 0; i < (app_interface_cmd_LENGTH+1); ++i){
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	e00c      	b.n	8002ae8 <app_interface_cmd_getNext+0x3a>
		bufferState = RINGBUFFER_cOut(&cmd->data[i],&buf->buffer);
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f006 ffcb 	bl	8009a74 <RINGBUFFER_cOut>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < (app_interface_cmd_LENGTH+1); ++i){
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b10      	cmp	r3, #16
 8002aec:	ddef      	ble.n	8002ace <app_interface_cmd_getNext+0x20>
	}
	if(bufferState == ringbuffer_OK)return cmd;
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <app_interface_cmd_getNext+0x4a>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	e000      	b.n	8002afa <app_interface_cmd_getNext+0x4c>
	else return NULL;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <app_interface_cmd_killBuffer>:

void app_interface_cmd_killBuffer(app_interface_cmd_Buffer *buf){
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
	buf->buffer.in = 0;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	801a      	strh	r2, [r3, #0]
	buf->buffer.out = 0;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	805a      	strh	r2, [r3, #2]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <app_interface_cmd_parseCmd>:

bool app_interface_cmd_parseCmd(char data, app_interface_cmd_Buffer *buf){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	71fb      	strb	r3, [r7, #7]
	static app_interface_cmd_State state = app_interface_WAIT_FOR_CMD;
	static uint16_t cmdCnt = 0;
	static app_interface_cmd_Cmd newCmd;
	if(data == '#'){
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	2b23      	cmp	r3, #35	; 0x23
 8002b34:	d109      	bne.n	8002b4a <app_interface_cmd_parseCmd+0x26>
		cmdCnt = 1;
 8002b36:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <app_interface_cmd_parseCmd+0x6c>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	801a      	strh	r2, [r3, #0]
		state = app_interface_REC_CMD;
 8002b3c:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <app_interface_cmd_parseCmd+0x70>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]

		newCmd.data[0] = data;
 8002b42:	4a15      	ldr	r2, [pc, #84]	; (8002b98 <app_interface_cmd_parseCmd+0x74>)
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	7013      	strb	r3, [r2, #0]
 8002b48:	e01c      	b.n	8002b84 <app_interface_cmd_parseCmd+0x60>
	}else if(state == app_interface_REC_CMD){
 8002b4a:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <app_interface_cmd_parseCmd+0x70>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d118      	bne.n	8002b84 <app_interface_cmd_parseCmd+0x60>
		newCmd.data[cmdCnt] = data;
 8002b52:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <app_interface_cmd_parseCmd+0x6c>)
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	4619      	mov	r1, r3
 8002b58:	4a0f      	ldr	r2, [pc, #60]	; (8002b98 <app_interface_cmd_parseCmd+0x74>)
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	5453      	strb	r3, [r2, r1]
		++cmdCnt;
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <app_interface_cmd_parseCmd+0x6c>)
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <app_interface_cmd_parseCmd+0x6c>)
 8002b68:	801a      	strh	r2, [r3, #0]
		if(cmdCnt >= app_interface_cmd_LENGTH){
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <app_interface_cmd_parseCmd+0x6c>)
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	2b0f      	cmp	r3, #15
 8002b70:	d908      	bls.n	8002b84 <app_interface_cmd_parseCmd+0x60>
			state = app_interface_WAIT_FOR_CMD;
 8002b72:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <app_interface_cmd_parseCmd+0x70>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
			app_interface_cmd_writeCmd(&newCmd, buf);
 8002b78:	6839      	ldr	r1, [r7, #0]
 8002b7a:	4807      	ldr	r0, [pc, #28]	; (8002b98 <app_interface_cmd_parseCmd+0x74>)
 8002b7c:	f7ff ff66 	bl	8002a4c <app_interface_cmd_writeCmd>
			return true;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <app_interface_cmd_parseCmd+0x62>
		}
	}
	return false;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20009f68 	.word	0x20009f68
 8002b94:	20009f6a 	.word	0x20009f6a
 8002b98:	20009f6c 	.word	0x20009f6c

08002b9c <app_interface_cmd_isAck>:

bool app_interface_cmd_isAck(app_interface_cmd_Cmd *cmd){
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	if(cmd->data[1] == 'A') return true;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	785b      	ldrb	r3, [r3, #1]
 8002ba8:	2b41      	cmp	r3, #65	; 0x41
 8002baa:	d101      	bne.n	8002bb0 <app_interface_cmd_isAck+0x14>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <app_interface_cmd_isAck+0x16>
	else return false;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <app_usb_init>:
void getTxBufferPointer(uint16_t *in, uint16_t *out);
void usb_irqRxHandler(char *pData, uint16_t size);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_usb_init(){
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
	usb_registerRxCallback(usb_irqRxHandler);
 8002bc4:	4805      	ldr	r0, [pc, #20]	; (8002bdc <app_usb_init+0x1c>)
 8002bc6:	f009 fb23 	bl	800c210 <usb_registerRxCallback>
	linkStatus = app_usb_LINK_DOWN;
 8002bca:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <app_usb_init+0x20>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
	app_usb_timer = 0;
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <app_usb_init+0x24>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	08002e41 	.word	0x08002e41
 8002be0:	20009f98 	.word	0x20009f98
 8002be4:	20009f9c 	.word	0x20009f9c

08002be8 <app_usb_rxBufferInit>:

void app_usb_rxBufferInit(char *data, uint16_t size){
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	807b      	strh	r3, [r7, #2]
	app_usb_rxBuf.in = 0;
 8002bf4:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <app_usb_rxBufferInit+0x30>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	801a      	strh	r2, [r3, #0]
	app_usb_rxBuf.out = 0;
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <app_usb_rxBufferInit+0x30>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	805a      	strh	r2, [r3, #2]
	app_usb_rxBuf.size = size;
 8002c00:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <app_usb_rxBufferInit+0x30>)
 8002c02:	887b      	ldrh	r3, [r7, #2]
 8002c04:	8093      	strh	r3, [r2, #4]
	app_usb_rxBuf.data = data;
 8002c06:	4a04      	ldr	r2, [pc, #16]	; (8002c18 <app_usb_rxBufferInit+0x30>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6093      	str	r3, [r2, #8]
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	20009f8c 	.word	0x20009f8c

08002c1c <app_usb_txBufferInit>:

void app_usb_txBufferInit(char *data, uint16_t size){
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	807b      	strh	r3, [r7, #2]
	app_usb_txBuf.in = 0;
 8002c28:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <app_usb_txBufferInit+0x30>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	801a      	strh	r2, [r3, #0]
	app_usb_txBuf.out = 0;
 8002c2e:	4b07      	ldr	r3, [pc, #28]	; (8002c4c <app_usb_txBufferInit+0x30>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	805a      	strh	r2, [r3, #2]
	app_usb_txBuf.size = size;
 8002c34:	4a05      	ldr	r2, [pc, #20]	; (8002c4c <app_usb_txBufferInit+0x30>)
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	8093      	strh	r3, [r2, #4]
	app_usb_txBuf.data = data;
 8002c3a:	4a04      	ldr	r2, [pc, #16]	; (8002c4c <app_usb_txBufferInit+0x30>)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6093      	str	r3, [r2, #8]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	20009f80 	.word	0x20009f80

08002c50 <app_usb_txLoop>:

void app_usb_setLink(usb_app_Link link){
	linkStatus = link;
}
/*Main Loop*/
void app_usb_txLoop(){
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	; 0x28
 8002c54:	af00      	add	r7, sp, #0
	char usbString[MAX_USB_TX_SIZE] = {0};	//TODO: Check new line
 8002c56:	f107 0308 	add.w	r3, r7, #8
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	609a      	str	r2, [r3, #8]
 8002c62:	60da      	str	r2, [r3, #12]
 8002c64:	611a      	str	r2, [r3, #16]
 8002c66:	615a      	str	r2, [r3, #20]
 8002c68:	761a      	strb	r2, [r3, #24]
	char usbData;
	int size = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
	if(HAL_GPIO_ReadPin(I_USB_VBUS_GPIO_Port, I_USB_VBUS_Pin)) linkStatus = app_usb_LINK_UP;
 8002c6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c76:	f000 fe5d 	bl	8003934 <HAL_GPIO_ReadPin>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <app_usb_txLoop+0x38>
 8002c80:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <app_usb_txLoop+0xc8>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	e002      	b.n	8002c8e <app_usb_txLoop+0x3e>
	else linkStatus = app_usb_LINK_DOWN;
 8002c88:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <app_usb_txLoop+0xc8>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
	if(linkStatus == app_usb_LINK_UP){
 8002c8e:	4b22      	ldr	r3, [pc, #136]	; (8002d18 <app_usb_txLoop+0xc8>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d13c      	bne.n	8002d10 <app_usb_txLoop+0xc0>
		/*Grab in out pointer*/
		uint16_t lastIn, lastOut;
		getTxBufferPointer(&lastIn, &lastOut);
 8002c96:	1cba      	adds	r2, r7, #2
 8002c98:	1d3b      	adds	r3, r7, #4
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 f8a5 	bl	8002dec <getTxBufferPointer>
		/*Grab next string*/
		for(size = 0; size < MAX_USB_TX_SIZE; ++size){
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca6:	e010      	b.n	8002cca <app_usb_txLoop+0x7a>
			if(app_usb_getCharFromTxBuffer(&usbData) == ringbuffer_OK){
 8002ca8:	1dfb      	adds	r3, r7, #7
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f85c 	bl	8002d68 <app_usb_getCharFromTxBuffer>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d10d      	bne.n	8002cd2 <app_usb_txLoop+0x82>
				usbString[size] = usbData;
 8002cb6:	79f9      	ldrb	r1, [r7, #7]
 8002cb8:	f107 0208 	add.w	r2, r7, #8
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	4413      	add	r3, r2
 8002cc0:	460a      	mov	r2, r1
 8002cc2:	701a      	strb	r2, [r3, #0]
		for(size = 0; size < MAX_USB_TX_SIZE; ++size){
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	2b18      	cmp	r3, #24
 8002cce:	ddeb      	ble.n	8002ca8 <app_usb_txLoop+0x58>
 8002cd0:	e000      	b.n	8002cd4 <app_usb_txLoop+0x84>
			}else break;
 8002cd2:	bf00      	nop
		}
		if(size > 0) {
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	dd1a      	ble.n	8002d10 <app_usb_txLoop+0xc0>
			app_usb_timer = APP_USB_TIMEOUT;
 8002cda:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <app_usb_txLoop+0xcc>)
 8002cdc:	2264      	movs	r2, #100	; 0x64
 8002cde:	601a      	str	r2, [r3, #0]
			while(app_usb_timer){
 8002ce0:	e00c      	b.n	8002cfc <app_usb_txLoop+0xac>
				if(CDC_Transmit_FS((uint8_t*)usbString, size+1) == USBD_OK) return;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	f107 0308 	add.w	r3, r7, #8
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f009 fa67 	bl	800c1c4 <CDC_Transmit_FS>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d009      	beq.n	8002d10 <app_usb_txLoop+0xc0>
			while(app_usb_timer){
 8002cfc:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <app_usb_txLoop+0xcc>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1ee      	bne.n	8002ce2 <app_usb_txLoop+0x92>
			}
			setTxBufferPointer(lastIn, lastOut);
 8002d04:	88bb      	ldrh	r3, [r7, #4]
 8002d06:	887a      	ldrh	r2, [r7, #2]
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f882 	bl	8002e14 <setTxBufferPointer>
		}
	}
}
 8002d10:	3728      	adds	r7, #40	; 0x28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20009f98 	.word	0x20009f98
 8002d1c:	20009f9c 	.word	0x20009f9c

08002d20 <app_usb_1ms>:

void app_usb_1ms(){
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
	if(app_usb_timer > 0) --app_usb_timer;
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <app_usb_1ms+0x20>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	dd04      	ble.n	8002d36 <app_usb_1ms+0x16>
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <app_usb_1ms+0x20>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	4a03      	ldr	r2, [pc, #12]	; (8002d40 <app_usb_1ms+0x20>)
 8002d34:	6013      	str	r3, [r2, #0]
}
 8002d36:	bf00      	nop
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	20009f9c 	.word	0x20009f9c

08002d44 <app_usb_getCharFromRxBuffer>:
uint8_t app_usb_getCharFromRxBuffer(char *data){
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
   uint8_t bufferState = RINGBUFFER_cOut(data, &app_usb_rxBuf);
 8002d4c:	4905      	ldr	r1, [pc, #20]	; (8002d64 <app_usb_getCharFromRxBuffer+0x20>)
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f006 fe90 	bl	8009a74 <RINGBUFFER_cOut>
 8002d54:	4603      	mov	r3, r0
 8002d56:	73fb      	strb	r3, [r7, #15]
   if(bufferState == ringbuffer_NO_BUF);//TODO error handling
   return bufferState;
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20009f8c 	.word	0x20009f8c

08002d68 <app_usb_getCharFromTxBuffer>:

uint8_t app_usb_getCharFromTxBuffer(char *data){
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
   uint8_t bufferState = RINGBUFFER_cOut(data, &app_usb_txBuf);
 8002d70:	4905      	ldr	r1, [pc, #20]	; (8002d88 <app_usb_getCharFromTxBuffer+0x20>)
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f006 fe7e 	bl	8009a74 <RINGBUFFER_cOut>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	73fb      	strb	r3, [r7, #15]
   if(bufferState == ringbuffer_NO_BUF);//TODO error handling
   return bufferState;
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20009f80 	.word	0x20009f80

08002d8c <app_usb_writeStringToBuffer>:
   uint8_t bufferState = RINGBUFFER_cIn(data, &app_usb_txBuf);
   if(bufferState != ringbuffer_OK); 		//TODO: Error Handling
   if(bufferState != ringbuffer_NO_BUF);	//TODO: Error Handling
   return bufferState;
}
uint8_t app_usb_writeStringToBuffer(const char *string){
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
	uint16_t size = strlen(string);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7fd fa23 	bl	80001e0 <strlen>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	817b      	strh	r3, [r7, #10]
	uint8_t bufferState = ringbuffer_OK;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
	uint16_t oldIn = app_usb_txBuf.in;
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <app_usb_writeStringToBuffer+0x5c>)
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	813b      	strh	r3, [r7, #8]
	for(uint16_t i = 0; i < size; ++i){
 8002da8:	2300      	movs	r3, #0
 8002daa:	81bb      	strh	r3, [r7, #12]
 8002dac:	e013      	b.n	8002dd6 <app_usb_writeStringToBuffer+0x4a>
		bufferState = RINGBUFFER_cIn(string[i], &app_usb_txBuf);
 8002dae:	89bb      	ldrh	r3, [r7, #12]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	4413      	add	r3, r2
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	490c      	ldr	r1, [pc, #48]	; (8002de8 <app_usb_writeStringToBuffer+0x5c>)
 8002db8:	4618      	mov	r0, r3
 8002dba:	f006 fe1e 	bl	80099fa <RINGBUFFER_cIn>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	73fb      	strb	r3, [r7, #15]
		if(bufferState == ringbuffer_FULL) {
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d103      	bne.n	8002dd0 <app_usb_writeStringToBuffer+0x44>
			app_usb_txBuf.in = oldIn;                //load old in position
 8002dc8:	4a07      	ldr	r2, [pc, #28]	; (8002de8 <app_usb_writeStringToBuffer+0x5c>)
 8002dca:	893b      	ldrh	r3, [r7, #8]
 8002dcc:	8013      	strh	r3, [r2, #0]
			break;
 8002dce:	e006      	b.n	8002dde <app_usb_writeStringToBuffer+0x52>
	for(uint16_t i = 0; i < size; ++i){
 8002dd0:	89bb      	ldrh	r3, [r7, #12]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	81bb      	strh	r3, [r7, #12]
 8002dd6:	89ba      	ldrh	r2, [r7, #12]
 8002dd8:	897b      	ldrh	r3, [r7, #10]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d3e7      	bcc.n	8002dae <app_usb_writeStringToBuffer+0x22>
		}
		if(bufferState != ringbuffer_NO_BUF); //TODO: Error Handling
	}
	return bufferState;
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20009f80 	.word	0x20009f80

08002dec <getTxBufferPointer>:

/*Helper*/
void getTxBufferPointer(uint16_t *in, uint16_t *out){
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
	in = app_usb_txBuf.in;
 8002df6:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <getTxBufferPointer+0x24>)
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	607b      	str	r3, [r7, #4]
	out = app_usb_txBuf.out;
 8002dfc:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <getTxBufferPointer+0x24>)
 8002dfe:	885b      	ldrh	r3, [r3, #2]
 8002e00:	603b      	str	r3, [r7, #0]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	20009f80 	.word	0x20009f80

08002e14 <setTxBufferPointer>:
void setTxBufferPointer(uint16_t in, uint16_t out){
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	460a      	mov	r2, r1
 8002e1e:	80fb      	strh	r3, [r7, #6]
 8002e20:	4613      	mov	r3, r2
 8002e22:	80bb      	strh	r3, [r7, #4]
	app_usb_txBuf.in = in;
 8002e24:	4a05      	ldr	r2, [pc, #20]	; (8002e3c <setTxBufferPointer+0x28>)
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	8013      	strh	r3, [r2, #0]
	app_usb_txBuf.out = out;
 8002e2a:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <setTxBufferPointer+0x28>)
 8002e2c:	88bb      	ldrh	r3, [r7, #4]
 8002e2e:	8053      	strh	r3, [r2, #2]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	20009f80 	.word	0x20009f80

08002e40 <usb_irqRxHandler>:
/* IRQ Handler*/
void usb_irqRxHandler(char *pData, uint16_t size){
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	807b      	strh	r3, [r7, #2]
	char buffer_state;
	for(uint16_t x = 0; x < size; x++) buffer_state = RINGBUFFER_cIn(pData[x], &app_usb_rxBuf);
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	81fb      	strh	r3, [r7, #14]
 8002e50:	e00c      	b.n	8002e6c <usb_irqRxHandler+0x2c>
 8002e52:	89fb      	ldrh	r3, [r7, #14]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	4413      	add	r3, r2
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	4908      	ldr	r1, [pc, #32]	; (8002e7c <usb_irqRxHandler+0x3c>)
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f006 fdcc 	bl	80099fa <RINGBUFFER_cIn>
 8002e62:	4603      	mov	r3, r0
 8002e64:	737b      	strb	r3, [r7, #13]
 8002e66:	89fb      	ldrh	r3, [r7, #14]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	81fb      	strh	r3, [r7, #14]
 8002e6c:	89fa      	ldrh	r2, [r7, #14]
 8002e6e:	887b      	ldrh	r3, [r7, #2]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d3ee      	bcc.n	8002e52 <usb_irqRxHandler+0x12>
	if(buffer_state != ringbuffer_OK); //TODO: Error Handling
}
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20009f8c 	.word	0x20009f8c

08002e80 <app_uart_bufferInit>:
 */
#include "app_uart.h"
#include "string.h"


void app_uart_bufferInit(stRingBuf *buf, char *data, uint16_t size){
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	80fb      	strh	r3, [r7, #6]
	buf->in = 0;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	801a      	strh	r2, [r3, #0]
	buf->out = 0;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	805a      	strh	r2, [r3, #2]
	buf->size = size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	88fa      	ldrh	r2, [r7, #6]
 8002e9e:	809a      	strh	r2, [r3, #4]
	buf->data = data;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	609a      	str	r2, [r3, #8]
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <app_uart_enableReceiveInt>:
void app_uart_enableReceiveInt(USART_TypeDef *uartHandler){
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
	uartHandler->CR1 |= USART_CR1_RXNEIE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f043 0220 	orr.w	r2, r3, #32
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	601a      	str	r2, [r3, #0]
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <app_uart_getCharFromBuffer>:
uint8_t app_uart_getCharFromBuffer(char *data, stRingBuf *buf){
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	6039      	str	r1, [r7, #0]
   uint8_t bufferState = RINGBUFFER_cOut(data, buf);
 8002edc:	6839      	ldr	r1, [r7, #0]
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f006 fdc8 	bl	8009a74 <RINGBUFFER_cOut>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	73fb      	strb	r3, [r7, #15]
   if(bufferState == ringbuffer_NO_BUF){
	   //TODO error handling
   }
   return bufferState;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <app_uart_writeStringToBuffer>:
	   //TODO error handling
   }
   if(bufferState != ringbuffer_NO_BUF) uartHandler->CR1 |= USART_CR1_TXEIE;
   return bufferState;
}
uint8_t app_uart_writeStringToBuffer(const char *string, stRingBuf *buf, USART_TypeDef *uartHandler){
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b086      	sub	sp, #24
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
	uint16_t size = strlen(string);
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f7fd f96e 	bl	80001e0 <strlen>
 8002f04:	4603      	mov	r3, r0
 8002f06:	827b      	strh	r3, [r7, #18]
	uint8_t bufferState = ringbuffer_OK;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	75fb      	strb	r3, [r7, #23]
	uint16_t oldIn = buf->in;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	823b      	strh	r3, [r7, #16]
	for(uint16_t i = 0; i < size; ++i){
 8002f12:	2300      	movs	r3, #0
 8002f14:	82bb      	strh	r3, [r7, #20]
 8002f16:	e01c      	b.n	8002f52 <app_uart_writeStringToBuffer+0x60>
		bufferState = RINGBUFFER_cIn(string[i], buf);
 8002f18:	8abb      	ldrh	r3, [r7, #20]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f006 fd69 	bl	80099fa <RINGBUFFER_cIn>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	75fb      	strb	r3, [r7, #23]
		if(bufferState == ringbuffer_FULL) {
 8002f2c:	7dfb      	ldrb	r3, [r7, #23]
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d103      	bne.n	8002f3a <app_uart_writeStringToBuffer+0x48>
			buf->in = oldIn;                //load old in position
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	8a3a      	ldrh	r2, [r7, #16]
 8002f36:	801a      	strh	r2, [r3, #0]
			break;
 8002f38:	e00f      	b.n	8002f5a <app_uart_writeStringToBuffer+0x68>
		}
		if(bufferState != ringbuffer_NO_BUF) uartHandler->CR1 |= USART_CR1_TXEIE;
 8002f3a:	7dfb      	ldrb	r3, [r7, #23]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <app_uart_writeStringToBuffer+0x5a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < size; ++i){
 8002f4c:	8abb      	ldrh	r3, [r7, #20]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	82bb      	strh	r3, [r7, #20]
 8002f52:	8aba      	ldrh	r2, [r7, #20]
 8002f54:	8a7b      	ldrh	r3, [r7, #18]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d3de      	bcc.n	8002f18 <app_uart_writeStringToBuffer+0x26>
	}
	return bufferState;
 8002f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <app_uart_irqHandler>:


void app_uart_irqHandler(USART_TypeDef *uartHandler, stRingBuf *rxBuf, stRingBuf *txBuf){
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
		volatile uint16_t ISR;
		char bufferState;

		ISR = uartHandler->ISR;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	82bb      	strh	r3, [r7, #20]
		if(ISR & USART_ISR_RXNE){ //Bit 5 = Read Data Register Not Empty in SR
 8002f78:	8abb      	ldrh	r3, [r7, #20]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d009      	beq.n	8002f98 <app_uart_irqHandler+0x34>
			bufferState = RINGBUFFER_cIn(uartHandler->RDR, rxBuf);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f006 fd33 	bl	80099fa <RINGBUFFER_cIn>
 8002f94:	4603      	mov	r3, r0
 8002f96:	75fb      	strb	r3, [r7, #23]
			if(bufferState != ringbuffer_OK){
				//TODO Error handling
			}
		}
		if(ISR & USART_ISR_TXE){
 8002f98:	8abb      	ldrh	r3, [r7, #20]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01e      	beq.n	8002fe2 <app_uart_irqHandler+0x7e>
			uartHandler->ISR &= ~USART_ISR_TXE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	61da      	str	r2, [r3, #28]
			char data;
			bufferState = RINGBUFFER_cOut(&data, txBuf);
 8002fb0:	f107 0313 	add.w	r3, r7, #19
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f006 fd5c 	bl	8009a74 <RINGBUFFER_cOut>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	75fb      	strb	r3, [r7, #23]
			if(bufferState == ringbuffer_EMPTY){
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d106      	bne.n	8002fd4 <app_uart_irqHandler+0x70>
				uartHandler->CR1 &= ~USART_CR1_TXEIE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	e006      	b.n	8002fe2 <app_uart_irqHandler+0x7e>
			}else if (bufferState == ringbuffer_NO_BUF){
 8002fd4:	7dfb      	ldrb	r3, [r7, #23]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <app_uart_irqHandler+0x7e>

			}else{
				uartHandler->TDR = data;
 8002fda:	7cfb      	ldrb	r3, [r7, #19]
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	851a      	strh	r2, [r3, #40]	; 0x28
			}
		}
		if(ISR & USART_ISR_ORE){
 8002fe2:	8abb      	ldrh	r3, [r7, #20]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <app_uart_irqHandler+0x96>
			uartHandler->ICR |= USART_ICR_ORECF;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	f043 0208 	orr.w	r2, r3, #8
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	621a      	str	r2, [r3, #32]
		}
	}
 8002ffa:	bf00      	nop
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <app_main>:
		.sendMsg = sendMessage, .receiveMsg = app_eeprom_receiveMsg
};
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_main(){
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
	msgTask.enable = true;
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <app_main+0x4c>)
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
	msgTask.init(&msgTask);
 800300e:	4b10      	ldr	r3, [pc, #64]	; (8003050 <app_main+0x4c>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	480f      	ldr	r0, [pc, #60]	; (8003050 <app_main+0x4c>)
 8003014:	4798      	blx	r3
	while (1){
		msgTask.mainLoop(&msgTask);
 8003016:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <app_main+0x4c>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	480d      	ldr	r0, [pc, #52]	; (8003050 <app_main+0x4c>)
 800301c:	4798      	blx	r3
		btnTask.mainLoop(&btnTask);
 800301e:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <app_main+0x50>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	480c      	ldr	r0, [pc, #48]	; (8003054 <app_main+0x50>)
 8003024:	4798      	blx	r3
		footcontrolTask.mainLoop(&footcontrolTask);
 8003026:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <app_main+0x54>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	480b      	ldr	r0, [pc, #44]	; (8003058 <app_main+0x54>)
 800302c:	4798      	blx	r3
		eepromTask.mainLoop(&eepromTask);
 800302e:	4b0b      	ldr	r3, [pc, #44]	; (800305c <app_main+0x58>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	480a      	ldr	r0, [pc, #40]	; (800305c <app_main+0x58>)
 8003034:	4798      	blx	r3
		dmxTask.mainLoop(&dmxTask);
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <app_main+0x5c>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	4809      	ldr	r0, [pc, #36]	; (8003060 <app_main+0x5c>)
 800303c:	4798      	blx	r3
		dmxPresetTask.mainLoop(&dmxPresetTask);
 800303e:	4b09      	ldr	r3, [pc, #36]	; (8003064 <app_main+0x60>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	4808      	ldr	r0, [pc, #32]	; (8003064 <app_main+0x60>)
 8003044:	4798      	blx	r3
		interfaceTask.mainLoop(&interfaceTask);
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <app_main+0x64>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	4807      	ldr	r0, [pc, #28]	; (8003068 <app_main+0x64>)
 800304c:	4798      	blx	r3
		msgTask.mainLoop(&msgTask);
 800304e:	e7e2      	b.n	8003016 <app_main+0x12>
 8003050:	200010e4 	.word	0x200010e4
 8003054:	2000112c 	.word	0x2000112c
 8003058:	20001144 	.word	0x20001144
 800305c:	20001174 	.word	0x20001174
 8003060:	20001114 	.word	0x20001114
 8003064:	200010fc 	.word	0x200010fc
 8003068:	2000115c 	.word	0x2000115c

0800306c <app_1ms>:
	 }
}

void app_1ms(){
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
	static uint16_t timer100ms = 0;
	static uint16_t timer500ms = 0;
	app_usb_1ms();
 8003070:	f7ff fe56 	bl	8002d20 <app_usb_1ms>
	dmx_1ms(&dmx1Out);
 8003074:	4826      	ldr	r0, [pc, #152]	; (8003110 <app_1ms+0xa4>)
 8003076:	f006 f813 	bl	80090a0 <dmx_1ms>
	if(dmxTask.timer) dmxTask.timer(&dmxTask, true);
 800307a:	4b26      	ldr	r3, [pc, #152]	; (8003114 <app_1ms+0xa8>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d004      	beq.n	800308c <app_1ms+0x20>
 8003082:	4b24      	ldr	r3, [pc, #144]	; (8003114 <app_1ms+0xa8>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2101      	movs	r1, #1
 8003088:	4822      	ldr	r0, [pc, #136]	; (8003114 <app_1ms+0xa8>)
 800308a:	4798      	blx	r3
	if(dmxPresetTask.timer) dmxPresetTask.timer(&dmxPresetTask, true);
 800308c:	4b22      	ldr	r3, [pc, #136]	; (8003118 <app_1ms+0xac>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d004      	beq.n	800309e <app_1ms+0x32>
 8003094:	4b20      	ldr	r3, [pc, #128]	; (8003118 <app_1ms+0xac>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2101      	movs	r1, #1
 800309a:	481f      	ldr	r0, [pc, #124]	; (8003118 <app_1ms+0xac>)
 800309c:	4798      	blx	r3
	if(btnTask.timer) btnTask.timer(&btnTask, true);
 800309e:	4b1f      	ldr	r3, [pc, #124]	; (800311c <app_1ms+0xb0>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d004      	beq.n	80030b0 <app_1ms+0x44>
 80030a6:	4b1d      	ldr	r3, [pc, #116]	; (800311c <app_1ms+0xb0>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2101      	movs	r1, #1
 80030ac:	481b      	ldr	r0, [pc, #108]	; (800311c <app_1ms+0xb0>)
 80030ae:	4798      	blx	r3
	if(eepromTask.timer) eepromTask.timer(&eepromTask, true);
 80030b0:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <app_1ms+0xb4>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d004      	beq.n	80030c2 <app_1ms+0x56>
 80030b8:	4b19      	ldr	r3, [pc, #100]	; (8003120 <app_1ms+0xb4>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2101      	movs	r1, #1
 80030be:	4818      	ldr	r0, [pc, #96]	; (8003120 <app_1ms+0xb4>)
 80030c0:	4798      	blx	r3
	if(interfaceTask.timer) interfaceTask.timer(&interfaceTask, true);
 80030c2:	4b18      	ldr	r3, [pc, #96]	; (8003124 <app_1ms+0xb8>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d004      	beq.n	80030d4 <app_1ms+0x68>
 80030ca:	4b16      	ldr	r3, [pc, #88]	; (8003124 <app_1ms+0xb8>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2101      	movs	r1, #1
 80030d0:	4814      	ldr	r0, [pc, #80]	; (8003124 <app_1ms+0xb8>)
 80030d2:	4798      	blx	r3
	if(++timer100ms >= 100){
 80030d4:	4b14      	ldr	r3, [pc, #80]	; (8003128 <app_1ms+0xbc>)
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	3301      	adds	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	4b12      	ldr	r3, [pc, #72]	; (8003128 <app_1ms+0xbc>)
 80030de:	801a      	strh	r2, [r3, #0]
 80030e0:	4b11      	ldr	r3, [pc, #68]	; (8003128 <app_1ms+0xbc>)
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	2b63      	cmp	r3, #99	; 0x63
 80030e6:	d902      	bls.n	80030ee <app_1ms+0x82>
		timer100ms = 0;
 80030e8:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <app_1ms+0xbc>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	801a      	strh	r2, [r3, #0]
	}
	if(++timer500ms >= 500){
 80030ee:	4b0f      	ldr	r3, [pc, #60]	; (800312c <app_1ms+0xc0>)
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	3301      	adds	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	4b0d      	ldr	r3, [pc, #52]	; (800312c <app_1ms+0xc0>)
 80030f8:	801a      	strh	r2, [r3, #0]
 80030fa:	4b0c      	ldr	r3, [pc, #48]	; (800312c <app_1ms+0xc0>)
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003102:	d302      	bcc.n	800310a <app_1ms+0x9e>
		timer500ms = 0;
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <app_1ms+0xc0>)
 8003106:	2200      	movs	r2, #0
 8003108:	801a      	strh	r2, [r3, #0]
	}

}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000000 	.word	0x20000000
 8003114:	20001114 	.word	0x20001114
 8003118:	200010fc 	.word	0x200010fc
 800311c:	2000112c 	.word	0x2000112c
 8003120:	20001174 	.word	0x20001174
 8003124:	2000115c 	.word	0x2000115c
 8003128:	2000a1a2 	.word	0x2000a1a2
 800312c:	2000a1a4 	.word	0x2000a1a4

08003130 <app_process>:
/* Application Task ------------------------------------------------------------*/
static void app_process(eal_task_Task *self){
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	msg_Message buffer = {0};
 8003138:	f107 030c 	add.w	r3, r7, #12
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
	msg_Message *newMessage = msg_getNext(&buffer, &msgBuf);
 8003142:	f107 030c 	add.w	r3, r7, #12
 8003146:	4908      	ldr	r1, [pc, #32]	; (8003168 <app_process+0x38>)
 8003148:	4618      	mov	r0, r3
 800314a:	f006 fba7 	bl	800989c <msg_getNext>
 800314e:	6178      	str	r0, [r7, #20]
	if(newMessage != NULL){
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d004      	beq.n	8003160 <app_process+0x30>
		self->receiveMsg(self, newMessage);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	6979      	ldr	r1, [r7, #20]
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	4798      	blx	r3
	}
}
 8003160:	bf00      	nop
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	200010d4 	.word	0x200010d4

0800316c <app_receiveMsg>:
static void app_receiveMsg(eal_task_Task *self, msg_Message *message){
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
	dmxTask.receiveMsg(&dmxTask, message);
 8003176:	4b11      	ldr	r3, [pc, #68]	; (80031bc <app_receiveMsg+0x50>)
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	6839      	ldr	r1, [r7, #0]
 800317c:	480f      	ldr	r0, [pc, #60]	; (80031bc <app_receiveMsg+0x50>)
 800317e:	4798      	blx	r3
	dmxPresetTask.receiveMsg(&dmxPresetTask, message);
 8003180:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <app_receiveMsg+0x54>)
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	6839      	ldr	r1, [r7, #0]
 8003186:	480e      	ldr	r0, [pc, #56]	; (80031c0 <app_receiveMsg+0x54>)
 8003188:	4798      	blx	r3
	btnTask.receiveMsg(&btnTask, message);
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <app_receiveMsg+0x58>)
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	6839      	ldr	r1, [r7, #0]
 8003190:	480c      	ldr	r0, [pc, #48]	; (80031c4 <app_receiveMsg+0x58>)
 8003192:	4798      	blx	r3
	eepromTask.receiveMsg(&eepromTask, message);
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <app_receiveMsg+0x5c>)
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	6839      	ldr	r1, [r7, #0]
 800319a:	480b      	ldr	r0, [pc, #44]	; (80031c8 <app_receiveMsg+0x5c>)
 800319c:	4798      	blx	r3
	footcontrolTask.receiveMsg(&footcontrolTask, message);
 800319e:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <app_receiveMsg+0x60>)
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	6839      	ldr	r1, [r7, #0]
 80031a4:	4809      	ldr	r0, [pc, #36]	; (80031cc <app_receiveMsg+0x60>)
 80031a6:	4798      	blx	r3
	interfaceTask.receiveMsg(&interfaceTask, message);
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <app_receiveMsg+0x64>)
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	6839      	ldr	r1, [r7, #0]
 80031ae:	4808      	ldr	r0, [pc, #32]	; (80031d0 <app_receiveMsg+0x64>)
 80031b0:	4798      	blx	r3
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20001114 	.word	0x20001114
 80031c0:	200010fc 	.word	0x200010fc
 80031c4:	2000112c 	.word	0x2000112c
 80031c8:	20001174 	.word	0x20001174
 80031cc:	20001144 	.word	0x20001144
 80031d0:	2000115c 	.word	0x2000115c

080031d4 <app_init>:

static void app_init(eal_task_Task *self){
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
	eepromTask.enable = true;
 80031dc:	4b22      	ldr	r3, [pc, #136]	; (8003268 <app_init+0x94>)
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]
	if(eepromTask.init) eepromTask.init(&eepromTask);
 80031e2:	4b21      	ldr	r3, [pc, #132]	; (8003268 <app_init+0x94>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <app_init+0x1e>
 80031ea:	4b1f      	ldr	r3, [pc, #124]	; (8003268 <app_init+0x94>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	481e      	ldr	r0, [pc, #120]	; (8003268 <app_init+0x94>)
 80031f0:	4798      	blx	r3
	dmxTask.enable = true;
 80031f2:	4b1e      	ldr	r3, [pc, #120]	; (800326c <app_init+0x98>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	701a      	strb	r2, [r3, #0]
	if(dmxTask.init) dmxTask.init(&dmxTask);
 80031f8:	4b1c      	ldr	r3, [pc, #112]	; (800326c <app_init+0x98>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <app_init+0x34>
 8003200:	4b1a      	ldr	r3, [pc, #104]	; (800326c <app_init+0x98>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4819      	ldr	r0, [pc, #100]	; (800326c <app_init+0x98>)
 8003206:	4798      	blx	r3
	dmxPresetTask.enable = true;
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <app_init+0x9c>)
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]
	if(dmxPresetTask.init) dmxPresetTask.init(&dmxPresetTask);
 800320e:	4b18      	ldr	r3, [pc, #96]	; (8003270 <app_init+0x9c>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <app_init+0x4a>
 8003216:	4b16      	ldr	r3, [pc, #88]	; (8003270 <app_init+0x9c>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4815      	ldr	r0, [pc, #84]	; (8003270 <app_init+0x9c>)
 800321c:	4798      	blx	r3
	btnTask.enable = true;
 800321e:	4b15      	ldr	r3, [pc, #84]	; (8003274 <app_init+0xa0>)
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
	if(btnTask.init) btnTask.init(&btnTask);
 8003224:	4b13      	ldr	r3, [pc, #76]	; (8003274 <app_init+0xa0>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <app_init+0x60>
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <app_init+0xa0>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	4810      	ldr	r0, [pc, #64]	; (8003274 <app_init+0xa0>)
 8003232:	4798      	blx	r3
	footcontrolTask.enable = true;
 8003234:	4b10      	ldr	r3, [pc, #64]	; (8003278 <app_init+0xa4>)
 8003236:	2201      	movs	r2, #1
 8003238:	701a      	strb	r2, [r3, #0]
	if(footcontrolTask.init) footcontrolTask.init(&footcontrolTask);
 800323a:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <app_init+0xa4>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <app_init+0x76>
 8003242:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <app_init+0xa4>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	480c      	ldr	r0, [pc, #48]	; (8003278 <app_init+0xa4>)
 8003248:	4798      	blx	r3
	interfaceTask.enable = true;
 800324a:	4b0c      	ldr	r3, [pc, #48]	; (800327c <app_init+0xa8>)
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
	if(interfaceTask.init) interfaceTask.init(&interfaceTask);
 8003250:	4b0a      	ldr	r3, [pc, #40]	; (800327c <app_init+0xa8>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <app_init+0x8c>
 8003258:	4b08      	ldr	r3, [pc, #32]	; (800327c <app_init+0xa8>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4807      	ldr	r0, [pc, #28]	; (800327c <app_init+0xa8>)
 800325e:	4798      	blx	r3

}
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20001174 	.word	0x20001174
 800326c:	20001114 	.word	0x20001114
 8003270:	200010fc 	.word	0x200010fc
 8003274:	2000112c 	.word	0x2000112c
 8003278:	20001144 	.word	0x20001144
 800327c:	2000115c 	.word	0x2000115c

08003280 <sendMessage>:

/* Messages --------------------------------------------------------------------*/
static void sendMessage(eal_task_Task *self, msg_Message *message){
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
	uint8_t msgBufState = 1;
 800328a:	2301      	movs	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
	if(msg_isAction(message))msgBufState = msg_writeAction(message, &msgBuf);
 800328e:	6838      	ldr	r0, [r7, #0]
 8003290:	f006 fba1 	bl	80099d6 <msg_isAction>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d006      	beq.n	80032a8 <sendMessage+0x28>
 800329a:	490c      	ldr	r1, [pc, #48]	; (80032cc <sendMessage+0x4c>)
 800329c:	6838      	ldr	r0, [r7, #0]
 800329e:	f006 fae4 	bl	800986a <msg_writeAction>
 80032a2:	4603      	mov	r3, r0
 80032a4:	73fb      	strb	r3, [r7, #15]
 80032a6:	e005      	b.n	80032b4 <sendMessage+0x34>
	else msgBufState = msg_writeEvent(message, &msgBuf);
 80032a8:	4908      	ldr	r1, [pc, #32]	; (80032cc <sendMessage+0x4c>)
 80032aa:	6838      	ldr	r0, [r7, #0]
 80032ac:	f006 fac6 	bl	800983c <msg_writeEvent>
 80032b0:	4603      	mov	r3, r0
 80032b2:	73fb      	strb	r3, [r7, #15]
	if(msgBufState != 1) messageBufferError(msgBufState);
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d003      	beq.n	80032c2 <sendMessage+0x42>
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 f807 	bl	80032d0 <messageBufferError>
}
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	200010d4 	.word	0x200010d4

080032d0 <messageBufferError>:
static void messageBufferError(uint8_t state){
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	71fb      	strb	r3, [r7, #7]
//	if(state == NO_BUF) USART3_WriteStringToBuffer("ERROR: MSG NO BUF\r\n", 18);
//	else if(state == FULL) USART3_WriteStringToBuffer("ERROR: MSG BUF OVR\r\n", 19);
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_TIM_PeriodElapsedCallback>:

/* Callback's ---------------------------------------------------------------------*/


/* IRQs ---------------------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == dmx1Out.txTimer) dmx_irqTxTimerHandler(&dmx1Out);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	4b05      	ldr	r3, [pc, #20]	; (800330c <HAL_TIM_PeriodElapsedCallback+0x24>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d102      	bne.n	8003302 <HAL_TIM_PeriodElapsedCallback+0x1a>
 80032fc:	4803      	ldr	r0, [pc, #12]	; (800330c <HAL_TIM_PeriodElapsedCallback+0x24>)
 80032fe:	f005 ff49 	bl	8009194 <dmx_irqTxTimerHandler>
}
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20000000 	.word	0x20000000

08003310 <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void){
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  if (__HAL_TIM_GET_FLAG(&htim16, TIM_FLAG_UPDATE) != RESET){
 8003314:	4b08      	ldr	r3, [pc, #32]	; (8003338 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b01      	cmp	r3, #1
 8003320:	d104      	bne.n	800332c <TIM1_UP_TIM16_IRQHandler+0x1c>
	  __HAL_TIM_CLEAR_IT(&htim16, TIM_IT_UPDATE);
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f06f 0201 	mvn.w	r2, #1
 800332a:	611a      	str	r2, [r3, #16]
	  //i2c_soft_timer_us(&softI2C2);
  }
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	2000a5d8 	.word	0x2000a5d8

0800333c <HAL_GPIO_EXTI_Callback>:

bool usbConnected = false;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == I_USB_VBUS_Pin) {
 8003346:	88fb      	ldrh	r3, [r7, #6]
 8003348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800334c:	d10f      	bne.n	800336e <HAL_GPIO_EXTI_Callback+0x32>
		if(HAL_GPIO_ReadPin(I_USB_VBUS_GPIO_Port, I_USB_VBUS_Pin)) usbConnected = true;
 800334e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003356:	f000 faed 	bl	8003934 <HAL_GPIO_ReadPin>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_GPIO_EXTI_Callback+0x2c>
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003362:	2201      	movs	r2, #1
 8003364:	701a      	strb	r2, [r3, #0]
		else usbConnected = false;
	}
}
 8003366:	e002      	b.n	800336e <HAL_GPIO_EXTI_Callback+0x32>
		else usbConnected = false;
 8003368:	4b03      	ldr	r3, [pc, #12]	; (8003378 <HAL_GPIO_EXTI_Callback+0x3c>)
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	2000a1a0 	.word	0x2000a1a0

0800337c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003386:	2003      	movs	r0, #3
 8003388:	f000 f918 	bl	80035bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800338c:	2000      	movs	r0, #0
 800338e:	f000 f80d 	bl	80033ac <HAL_InitTick>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	71fb      	strb	r3, [r7, #7]
 800339c:	e001      	b.n	80033a2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800339e:	f008 f9bf 	bl	800b720 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033a2:	79fb      	ldrb	r3, [r7, #7]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	73fb      	strb	r3, [r7, #15]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <HAL_InitTick+0x40>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a0c      	ldr	r2, [pc, #48]	; (80033f0 <HAL_InitTick+0x44>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	099b      	lsrs	r3, r3, #6
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 f92e 	bl	8003626 <HAL_SYSTICK_Config>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <HAL_InitTick+0x2a>
  {
    status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
 80033d4:	e005      	b.n	80033e2 <HAL_InitTick+0x36>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80033d6:	2200      	movs	r2, #0
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	f04f 30ff 	mov.w	r0, #4294967295
 80033de:	f000 f8f8 	bl	80035d2 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	2000129c 	.word	0x2000129c
 80033f0:	10624dd3 	.word	0x10624dd3

080033f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  uwTick++;
 80033f8:	4b04      	ldr	r3, [pc, #16]	; (800340c <HAL_IncTick+0x18>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	4a03      	ldr	r2, [pc, #12]	; (800340c <HAL_IncTick+0x18>)
 8003400:	6013      	str	r3, [r2, #0]
}
 8003402:	bf00      	nop
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	2000a3d8 	.word	0x2000a3d8

08003410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return uwTick;
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <HAL_GetTick+0x14>)
 8003416:	681b      	ldr	r3, [r3, #0]
}
 8003418:	4618      	mov	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	2000a3d8 	.word	0x2000a3d8

08003428 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <NVIC_SetPriorityGrouping+0x44>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003444:	4013      	ands	r3, r2
 8003446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800345a:	4a04      	ldr	r2, [pc, #16]	; (800346c <NVIC_SetPriorityGrouping+0x44>)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	60d3      	str	r3, [r2, #12]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	e000ed00 	.word	0xe000ed00

08003470 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <NVIC_GetPriorityGrouping+0x18>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	0a1b      	lsrs	r3, r3, #8
 800347a:	f003 0307 	and.w	r3, r3, #7
}
 800347e:	4618      	mov	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003496:	4909      	ldr	r1, [pc, #36]	; (80034bc <NVIC_EnableIRQ+0x30>)
 8003498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	79fa      	ldrb	r2, [r7, #7]
 80034a0:	f002 021f 	and.w	r2, r2, #31
 80034a4:	2001      	movs	r0, #1
 80034a6:	fa00 f202 	lsl.w	r2, r0, r2
 80034aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000e100 	.word	0xe000e100

080034c0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	6039      	str	r1, [r7, #0]
 80034ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80034cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	da0b      	bge.n	80034ec <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d4:	490d      	ldr	r1, [pc, #52]	; (800350c <NVIC_SetPriority+0x4c>)
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	3b04      	subs	r3, #4
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	0112      	lsls	r2, r2, #4
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	440b      	add	r3, r1
 80034e8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034ea:	e009      	b.n	8003500 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ec:	4908      	ldr	r1, [pc, #32]	; (8003510 <NVIC_SetPriority+0x50>)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	0112      	lsls	r2, r2, #4
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	440b      	add	r3, r1
 80034fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	e000ed00 	.word	0xe000ed00
 8003510:	e000e100 	.word	0xe000e100

08003514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	; 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f1c3 0307 	rsb	r3, r3, #7
 800352e:	2b04      	cmp	r3, #4
 8003530:	bf28      	it	cs
 8003532:	2304      	movcs	r3, #4
 8003534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3304      	adds	r3, #4
 800353a:	2b06      	cmp	r3, #6
 800353c:	d902      	bls.n	8003544 <NVIC_EncodePriority+0x30>
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3b03      	subs	r3, #3
 8003542:	e000      	b.n	8003546 <NVIC_EncodePriority+0x32>
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003548:	2201      	movs	r2, #1
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	1e5a      	subs	r2, r3, #1
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	401a      	ands	r2, r3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800355a:	2101      	movs	r1, #1
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	1e59      	subs	r1, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003568:	4313      	orrs	r3, r2
         );
}
 800356a:	4618      	mov	r0, r3
 800356c:	3724      	adds	r7, #36	; 0x24
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3b01      	subs	r3, #1
 8003584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003588:	d301      	bcc.n	800358e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800358a:	2301      	movs	r3, #1
 800358c:	e00f      	b.n	80035ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800358e:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <SysTick_Config+0x40>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3b01      	subs	r3, #1
 8003594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003596:	210f      	movs	r1, #15
 8003598:	f04f 30ff 	mov.w	r0, #4294967295
 800359c:	f7ff ff90 	bl	80034c0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <SysTick_Config+0x40>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035a6:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <SysTick_Config+0x40>)
 80035a8:	2207      	movs	r2, #7
 80035aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	e000e010 	.word	0xe000e010

080035bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ff2f 	bl	8003428 <NVIC_SetPriorityGrouping>
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	4603      	mov	r3, r0
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035e4:	f7ff ff44 	bl	8003470 <NVIC_GetPriorityGrouping>
 80035e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	6978      	ldr	r0, [r7, #20]
 80035f0:	f7ff ff90 	bl	8003514 <NVIC_EncodePriority>
 80035f4:	4602      	mov	r2, r0
 80035f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fa:	4611      	mov	r1, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff5f 	bl	80034c0 <NVIC_SetPriority>
}
 8003602:	bf00      	nop
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	4603      	mov	r3, r0
 8003612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff37 	bl	800348c <NVIC_EnableIRQ>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ffa2 	bl	8003578 <SysTick_Config>
 8003634:	4603      	mov	r3, r0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800364e:	e154      	b.n	80038fa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	2101      	movs	r1, #1
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	fa01 f303 	lsl.w	r3, r1, r3
 800365c:	4013      	ands	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 8146 	beq.w	80038f4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d003      	beq.n	8003678 <HAL_GPIO_Init+0x38>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b12      	cmp	r3, #18
 8003676:	d123      	bne.n	80036c0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	08da      	lsrs	r2, r3, #3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3208      	adds	r2, #8
 8003680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003684:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	220f      	movs	r2, #15
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	08da      	lsrs	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3208      	adds	r2, #8
 80036ba:	6939      	ldr	r1, [r7, #16]
 80036bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	2203      	movs	r2, #3
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0203 	and.w	r2, r3, #3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d00b      	beq.n	8003714 <HAL_GPIO_Init+0xd4>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d007      	beq.n	8003714 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003708:	2b11      	cmp	r3, #17
 800370a:	d003      	beq.n	8003714 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b12      	cmp	r3, #18
 8003712:	d130      	bne.n	8003776 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	2203      	movs	r2, #3
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800374a:	2201      	movs	r2, #1
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4013      	ands	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	f003 0201 	and.w	r2, r3, #1
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	2203      	movs	r2, #3
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43db      	mvns	r3, r3
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4013      	ands	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80a0 	beq.w	80038f4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b4:	4a58      	ldr	r2, [pc, #352]	; (8003918 <HAL_GPIO_Init+0x2d8>)
 80037b6:	4b58      	ldr	r3, [pc, #352]	; (8003918 <HAL_GPIO_Init+0x2d8>)
 80037b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6613      	str	r3, [r2, #96]	; 0x60
 80037c0:	4b55      	ldr	r3, [pc, #340]	; (8003918 <HAL_GPIO_Init+0x2d8>)
 80037c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037cc:	4a53      	ldr	r2, [pc, #332]	; (800391c <HAL_GPIO_Init+0x2dc>)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	089b      	lsrs	r3, r3, #2
 80037d2:	3302      	adds	r3, #2
 80037d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f003 0303 	and.w	r3, r3, #3
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	220f      	movs	r2, #15
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4013      	ands	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037f6:	d019      	beq.n	800382c <HAL_GPIO_Init+0x1ec>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a49      	ldr	r2, [pc, #292]	; (8003920 <HAL_GPIO_Init+0x2e0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d013      	beq.n	8003828 <HAL_GPIO_Init+0x1e8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a48      	ldr	r2, [pc, #288]	; (8003924 <HAL_GPIO_Init+0x2e4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00d      	beq.n	8003824 <HAL_GPIO_Init+0x1e4>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a47      	ldr	r2, [pc, #284]	; (8003928 <HAL_GPIO_Init+0x2e8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d007      	beq.n	8003820 <HAL_GPIO_Init+0x1e0>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a46      	ldr	r2, [pc, #280]	; (800392c <HAL_GPIO_Init+0x2ec>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d101      	bne.n	800381c <HAL_GPIO_Init+0x1dc>
 8003818:	2304      	movs	r3, #4
 800381a:	e008      	b.n	800382e <HAL_GPIO_Init+0x1ee>
 800381c:	2307      	movs	r3, #7
 800381e:	e006      	b.n	800382e <HAL_GPIO_Init+0x1ee>
 8003820:	2303      	movs	r3, #3
 8003822:	e004      	b.n	800382e <HAL_GPIO_Init+0x1ee>
 8003824:	2302      	movs	r3, #2
 8003826:	e002      	b.n	800382e <HAL_GPIO_Init+0x1ee>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <HAL_GPIO_Init+0x1ee>
 800382c:	2300      	movs	r3, #0
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	f002 0203 	and.w	r2, r2, #3
 8003834:	0092      	lsls	r2, r2, #2
 8003836:	4093      	lsls	r3, r2
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800383e:	4937      	ldr	r1, [pc, #220]	; (800391c <HAL_GPIO_Init+0x2dc>)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	089b      	lsrs	r3, r3, #2
 8003844:	3302      	adds	r3, #2
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800384c:	4b38      	ldr	r3, [pc, #224]	; (8003930 <HAL_GPIO_Init+0x2f0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	43db      	mvns	r3, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003870:	4a2f      	ldr	r2, [pc, #188]	; (8003930 <HAL_GPIO_Init+0x2f0>)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003876:	4b2e      	ldr	r3, [pc, #184]	; (8003930 <HAL_GPIO_Init+0x2f0>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	43db      	mvns	r3, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800389a:	4a25      	ldr	r2, [pc, #148]	; (8003930 <HAL_GPIO_Init+0x2f0>)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038a0:	4b23      	ldr	r3, [pc, #140]	; (8003930 <HAL_GPIO_Init+0x2f0>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4013      	ands	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038c4:	4a1a      	ldr	r2, [pc, #104]	; (8003930 <HAL_GPIO_Init+0x2f0>)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038ca:	4b19      	ldr	r3, [pc, #100]	; (8003930 <HAL_GPIO_Init+0x2f0>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038ee:	4a10      	ldr	r2, [pc, #64]	; (8003930 <HAL_GPIO_Init+0x2f0>)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	3301      	adds	r3, #1
 80038f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	f47f aea3 	bne.w	8003650 <HAL_GPIO_Init+0x10>
  }
}
 800390a:	bf00      	nop
 800390c:	371c      	adds	r7, #28
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	40010000 	.word	0x40010000
 8003920:	48000400 	.word	0x48000400
 8003924:	48000800 	.word	0x48000800
 8003928:	48000c00 	.word	0x48000c00
 800392c:	48001000 	.word	0x48001000
 8003930:	40010400 	.word	0x40010400

08003934 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	887b      	ldrh	r3, [r7, #2]
 8003946:	4013      	ands	r3, r2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
 8003950:	e001      	b.n	8003956 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003952:	2300      	movs	r3, #0
 8003954:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003956:	7bfb      	ldrb	r3, [r7, #15]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	807b      	strh	r3, [r7, #2]
 8003970:	4613      	mov	r3, r2
 8003972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003974:	787b      	ldrb	r3, [r7, #1]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800397a:	887a      	ldrh	r2, [r7, #2]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003980:	e002      	b.n	8003988 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003982:	887a      	ldrh	r2, [r7, #2]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695a      	ldr	r2, [r3, #20]
 80039a4:	887b      	ldrh	r3, [r7, #2]
 80039a6:	405a      	eors	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	615a      	str	r2, [r3, #20]
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d006      	beq.n	80039dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039ce:	4a05      	ldr	r2, [pc, #20]	; (80039e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fcb0 	bl	800333c <HAL_GPIO_EXTI_Callback>
  }
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40010400 	.word	0x40010400

080039e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e080      	b.n	8003afc <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f007 fcf6 	bl	800b400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2224      	movs	r2, #36	; 0x24
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	6812      	ldr	r2, [r2, #0]
 8003a26:	f022 0201 	bic.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6852      	ldr	r2, [r2, #4]
 8003a34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	6892      	ldr	r2, [r2, #8]
 8003a44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d107      	bne.n	8003a62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6892      	ldr	r2, [r2, #8]
 8003a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	e006      	b.n	8003a70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6892      	ldr	r2, [r2, #8]
 8003a6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d104      	bne.n	8003a82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	68d2      	ldr	r2, [r2, #12]
 8003aa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aa4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6911      	ldr	r1, [r2, #16]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6952      	ldr	r2, [r2, #20]
 8003ab2:	4311      	orrs	r1, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6992      	ldr	r2, [r2, #24]
 8003ab8:	0212      	lsls	r2, r2, #8
 8003aba:	430a      	orrs	r2, r1
 8003abc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	69d1      	ldr	r1, [r2, #28]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6a12      	ldr	r2, [r2, #32]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af02      	add	r7, sp, #8
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	460b      	mov	r3, r1
 8003b12:	817b      	strh	r3, [r7, #10]
 8003b14:	4613      	mov	r3, r2
 8003b16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	f040 80da 	bne.w	8003cda <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_I2C_Master_Transmit+0x30>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e0d3      	b.n	8003cdc <HAL_I2C_Master_Transmit+0x1d8>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b3c:	f7ff fc68 	bl	8003410 <HAL_GetTick>
 8003b40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	2319      	movs	r3, #25
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fbc6 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e0be      	b.n	8003cdc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2221      	movs	r2, #33	; 0x21
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2210      	movs	r2, #16
 8003b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	893a      	ldrh	r2, [r7, #8]
 8003b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2bff      	cmp	r3, #255	; 0xff
 8003b8e:	d90e      	bls.n	8003bae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	22ff      	movs	r2, #255	; 0xff
 8003b94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	8979      	ldrh	r1, [r7, #10]
 8003b9e:	4b51      	ldr	r3, [pc, #324]	; (8003ce4 <HAL_I2C_Master_Transmit+0x1e0>)
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fcbc 	bl	8004524 <I2C_TransferConfig>
 8003bac:	e06c      	b.n	8003c88 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	8979      	ldrh	r1, [r7, #10]
 8003bc0:	4b48      	ldr	r3, [pc, #288]	; (8003ce4 <HAL_I2C_Master_Transmit+0x1e0>)
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 fcab 	bl	8004524 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003bce:	e05b      	b.n	8003c88 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	6a39      	ldr	r1, [r7, #32]
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fbc3 	bl	8004360 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e07b      	b.n	8003cdc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bec:	7812      	ldrb	r2, [r2, #0]
 8003bee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d034      	beq.n	8003c88 <HAL_I2C_Master_Transmit+0x184>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d130      	bne.n	8003c88 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2180      	movs	r1, #128	; 0x80
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 fb55 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e04d      	b.n	8003cdc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2bff      	cmp	r3, #255	; 0xff
 8003c48:	d90e      	bls.n	8003c68 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	22ff      	movs	r2, #255	; 0xff
 8003c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	8979      	ldrh	r1, [r7, #10]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 fc5f 	bl	8004524 <I2C_TransferConfig>
 8003c66:	e00f      	b.n	8003c88 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	8979      	ldrh	r1, [r7, #10]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 fc4e 	bl	8004524 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d19e      	bne.n	8003bd0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	6a39      	ldr	r1, [r7, #32]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fba2 	bl	80043e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e01a      	b.n	8003cdc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2220      	movs	r2, #32
 8003cac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <HAL_I2C_Master_Transmit+0x1e4>)
 8003cba:	400b      	ands	r3, r1
 8003cbc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	e000      	b.n	8003cdc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003cda:	2302      	movs	r3, #2
  }
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	80002000 	.word	0x80002000
 8003ce8:	fe00e800 	.word	0xfe00e800

08003cec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	4608      	mov	r0, r1
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	817b      	strh	r3, [r7, #10]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	813b      	strh	r3, [r7, #8]
 8003d02:	4613      	mov	r3, r2
 8003d04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	f040 80f9 	bne.w	8003f06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_I2C_Mem_Write+0x34>
 8003d1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d105      	bne.n	8003d2c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0ed      	b.n	8003f08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_I2C_Mem_Write+0x4e>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e0e6      	b.n	8003f08 <HAL_I2C_Mem_Write+0x21c>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d42:	f7ff fb65 	bl	8003410 <HAL_GetTick>
 8003d46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	2319      	movs	r3, #25
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 fac3 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0d1      	b.n	8003f08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2221      	movs	r2, #33	; 0x21
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2240      	movs	r2, #64	; 0x40
 8003d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a3a      	ldr	r2, [r7, #32]
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d8c:	88f8      	ldrh	r0, [r7, #6]
 8003d8e:	893a      	ldrh	r2, [r7, #8]
 8003d90:	8979      	ldrh	r1, [r7, #10]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	9301      	str	r3, [sp, #4]
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f9d3 	bl	8004148 <I2C_RequestMemoryWrite>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e0a9      	b.n	8003f08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2bff      	cmp	r3, #255	; 0xff
 8003dbc:	d90e      	bls.n	8003ddc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	22ff      	movs	r2, #255	; 0xff
 8003dc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	8979      	ldrh	r1, [r7, #10]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 fba5 	bl	8004524 <I2C_TransferConfig>
 8003dda:	e00f      	b.n	8003dfc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	8979      	ldrh	r1, [r7, #10]
 8003dee:	2300      	movs	r3, #0
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fb94 	bl	8004524 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 faad 	bl	8004360 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e07b      	b.n	8003f08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e18:	7812      	ldrb	r2, [r2, #0]
 8003e1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d034      	beq.n	8003eb4 <HAL_I2C_Mem_Write+0x1c8>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d130      	bne.n	8003eb4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2180      	movs	r1, #128	; 0x80
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 fa3f 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e04d      	b.n	8003f08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2bff      	cmp	r3, #255	; 0xff
 8003e74:	d90e      	bls.n	8003e94 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	22ff      	movs	r2, #255	; 0xff
 8003e7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	8979      	ldrh	r1, [r7, #10]
 8003e84:	2300      	movs	r3, #0
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 fb49 	bl	8004524 <I2C_TransferConfig>
 8003e92:	e00f      	b.n	8003eb4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	8979      	ldrh	r1, [r7, #10]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 fb38 	bl	8004524 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d19e      	bne.n	8003dfc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 fa8c 	bl	80043e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e01a      	b.n	8003f08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6859      	ldr	r1, [r3, #4]
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <HAL_I2C_Mem_Write+0x224>)
 8003ee6:	400b      	ands	r3, r1
 8003ee8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	e000      	b.n	8003f08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003f06:	2302      	movs	r3, #2
  }
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	fe00e800 	.word	0xfe00e800

08003f14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	4608      	mov	r0, r1
 8003f1e:	4611      	mov	r1, r2
 8003f20:	461a      	mov	r2, r3
 8003f22:	4603      	mov	r3, r0
 8003f24:	817b      	strh	r3, [r7, #10]
 8003f26:	460b      	mov	r3, r1
 8003f28:	813b      	strh	r3, [r7, #8]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	f040 80fd 	bne.w	8004136 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_I2C_Mem_Read+0x34>
 8003f42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d105      	bne.n	8003f54 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0f1      	b.n	8004138 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2C_Mem_Read+0x4e>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e0ea      	b.n	8004138 <HAL_I2C_Mem_Read+0x224>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f6a:	f7ff fa51 	bl	8003410 <HAL_GetTick>
 8003f6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	2319      	movs	r3, #25
 8003f76:	2201      	movs	r2, #1
 8003f78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f9af 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0d5      	b.n	8004138 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2222      	movs	r2, #34	; 0x22
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2240      	movs	r2, #64	; 0x40
 8003f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a3a      	ldr	r2, [r7, #32]
 8003fa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fb4:	88f8      	ldrh	r0, [r7, #6]
 8003fb6:	893a      	ldrh	r2, [r7, #8]
 8003fb8:	8979      	ldrh	r1, [r7, #10]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	9301      	str	r3, [sp, #4]
 8003fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f913 	bl	80041f0 <I2C_RequestMemoryRead>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0ad      	b.n	8004138 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2bff      	cmp	r3, #255	; 0xff
 8003fe4:	d90e      	bls.n	8004004 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	22ff      	movs	r2, #255	; 0xff
 8003fea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	8979      	ldrh	r1, [r7, #10]
 8003ff4:	4b52      	ldr	r3, [pc, #328]	; (8004140 <HAL_I2C_Mem_Read+0x22c>)
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 fa91 	bl	8004524 <I2C_TransferConfig>
 8004002:	e00f      	b.n	8004024 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004012:	b2da      	uxtb	r2, r3
 8004014:	8979      	ldrh	r1, [r7, #10]
 8004016:	4b4a      	ldr	r3, [pc, #296]	; (8004140 <HAL_I2C_Mem_Read+0x22c>)
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 fa80 	bl	8004524 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402a:	2200      	movs	r2, #0
 800402c:	2104      	movs	r1, #4
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f956 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e07c      	b.n	8004138 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d034      	beq.n	80040e4 <HAL_I2C_Mem_Read+0x1d0>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407e:	2b00      	cmp	r3, #0
 8004080:	d130      	bne.n	80040e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	2200      	movs	r2, #0
 800408a:	2180      	movs	r1, #128	; 0x80
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 f927 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e04d      	b.n	8004138 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2bff      	cmp	r3, #255	; 0xff
 80040a4:	d90e      	bls.n	80040c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	22ff      	movs	r2, #255	; 0xff
 80040aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	8979      	ldrh	r1, [r7, #10]
 80040b4:	2300      	movs	r3, #0
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fa31 	bl	8004524 <I2C_TransferConfig>
 80040c2:	e00f      	b.n	80040e4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	8979      	ldrh	r1, [r7, #10]
 80040d6:	2300      	movs	r3, #0
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 fa20 	bl	8004524 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d19a      	bne.n	8004024 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f974 	bl	80043e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e01a      	b.n	8004138 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2220      	movs	r2, #32
 8004108:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_I2C_Mem_Read+0x230>)
 8004116:	400b      	ands	r3, r1
 8004118:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	e000      	b.n	8004138 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004136:	2302      	movs	r3, #2
  }
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	80002400 	.word	0x80002400
 8004144:	fe00e800 	.word	0xfe00e800

08004148 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af02      	add	r7, sp, #8
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	4608      	mov	r0, r1
 8004152:	4611      	mov	r1, r2
 8004154:	461a      	mov	r2, r3
 8004156:	4603      	mov	r3, r0
 8004158:	817b      	strh	r3, [r7, #10]
 800415a:	460b      	mov	r3, r1
 800415c:	813b      	strh	r3, [r7, #8]
 800415e:	4613      	mov	r3, r2
 8004160:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	b2da      	uxtb	r2, r3
 8004166:	8979      	ldrh	r1, [r7, #10]
 8004168:	4b20      	ldr	r3, [pc, #128]	; (80041ec <I2C_RequestMemoryWrite+0xa4>)
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f9d7 	bl	8004524 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	69b9      	ldr	r1, [r7, #24]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f8f0 	bl	8004360 <I2C_WaitOnTXISFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e02c      	b.n	80041e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800418a:	88fb      	ldrh	r3, [r7, #6]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d105      	bne.n	800419c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	893a      	ldrh	r2, [r7, #8]
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	629a      	str	r2, [r3, #40]	; 0x28
 800419a:	e015      	b.n	80041c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	893a      	ldrh	r2, [r7, #8]
 80041a2:	0a12      	lsrs	r2, r2, #8
 80041a4:	b292      	uxth	r2, r2
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	69b9      	ldr	r1, [r7, #24]
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f8d6 	bl	8004360 <I2C_WaitOnTXISFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e012      	b.n	80041e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	893a      	ldrh	r2, [r7, #8]
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2200      	movs	r2, #0
 80041d0:	2180      	movs	r1, #128	; 0x80
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f884 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	80002000 	.word	0x80002000

080041f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	4608      	mov	r0, r1
 80041fa:	4611      	mov	r1, r2
 80041fc:	461a      	mov	r2, r3
 80041fe:	4603      	mov	r3, r0
 8004200:	817b      	strh	r3, [r7, #10]
 8004202:	460b      	mov	r3, r1
 8004204:	813b      	strh	r3, [r7, #8]
 8004206:	4613      	mov	r3, r2
 8004208:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800420a:	88fb      	ldrh	r3, [r7, #6]
 800420c:	b2da      	uxtb	r2, r3
 800420e:	8979      	ldrh	r1, [r7, #10]
 8004210:	4b20      	ldr	r3, [pc, #128]	; (8004294 <I2C_RequestMemoryRead+0xa4>)
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	2300      	movs	r3, #0
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f984 	bl	8004524 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	69b9      	ldr	r1, [r7, #24]
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 f89d 	bl	8004360 <I2C_WaitOnTXISFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e02c      	b.n	800428a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d105      	bne.n	8004242 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	893a      	ldrh	r2, [r7, #8]
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	629a      	str	r2, [r3, #40]	; 0x28
 8004240:	e015      	b.n	800426e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	893a      	ldrh	r2, [r7, #8]
 8004248:	0a12      	lsrs	r2, r2, #8
 800424a:	b292      	uxth	r2, r2
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	69b9      	ldr	r1, [r7, #24]
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 f883 	bl	8004360 <I2C_WaitOnTXISFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e012      	b.n	800428a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	893a      	ldrh	r2, [r7, #8]
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2200      	movs	r2, #0
 8004276:	2140      	movs	r1, #64	; 0x40
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f831 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	80002000 	.word	0x80002000

08004298 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d103      	bne.n	80042b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2200      	movs	r2, #0
 80042b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d007      	beq.n	80042d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	6992      	ldr	r2, [r2, #24]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	619a      	str	r2, [r3, #24]
  }
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	4613      	mov	r3, r2
 80042ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f0:	e022      	b.n	8004338 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d01e      	beq.n	8004338 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fa:	f7ff f889 	bl	8003410 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	1ad2      	subs	r2, r2, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d802      	bhi.n	8004310 <I2C_WaitOnFlagUntilTimeout+0x30>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d113      	bne.n	8004338 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004314:	f043 0220 	orr.w	r2, r3, #32
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e00f      	b.n	8004358 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699a      	ldr	r2, [r3, #24]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	401a      	ands	r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	429a      	cmp	r2, r3
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	429a      	cmp	r2, r3
 8004354:	d0cd      	beq.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800436c:	e02c      	b.n	80043c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	68b9      	ldr	r1, [r7, #8]
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f870 	bl	8004458 <I2C_IsAcknowledgeFailed>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e02a      	b.n	80043d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004388:	d01e      	beq.n	80043c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438a:	f7ff f841 	bl	8003410 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	1ad2      	subs	r2, r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	429a      	cmp	r2, r3
 8004398:	d802      	bhi.n	80043a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d113      	bne.n	80043c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e007      	b.n	80043d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d1cb      	bne.n	800436e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043ec:	e028      	b.n	8004440 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	68b9      	ldr	r1, [r7, #8]
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f830 	bl	8004458 <I2C_IsAcknowledgeFailed>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e026      	b.n	8004450 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004402:	f7ff f805 	bl	8003410 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	1ad2      	subs	r2, r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	429a      	cmp	r2, r3
 8004410:	d802      	bhi.n	8004418 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d113      	bne.n	8004440 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441c:	f043 0220 	orr.w	r2, r3, #32
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e007      	b.n	8004450 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b20      	cmp	r3, #32
 800444c:	d1cf      	bne.n	80043ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b10      	cmp	r3, #16
 8004470:	d151      	bne.n	8004516 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004472:	e022      	b.n	80044ba <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447a:	d01e      	beq.n	80044ba <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447c:	f7fe ffc8 	bl	8003410 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	1ad2      	subs	r2, r2, r3
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	429a      	cmp	r2, r3
 800448a:	d802      	bhi.n	8004492 <I2C_IsAcknowledgeFailed+0x3a>
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d113      	bne.n	80044ba <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	f043 0220 	orr.w	r2, r3, #32
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e02e      	b.n	8004518 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b20      	cmp	r3, #32
 80044c6:	d1d5      	bne.n	8004474 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2210      	movs	r2, #16
 80044ce:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2220      	movs	r2, #32
 80044d6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7ff fedd 	bl	8004298 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6859      	ldr	r1, [r3, #4]
 80044e8:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <I2C_IsAcknowledgeFailed+0xc8>)
 80044ea:	400b      	ands	r3, r1
 80044ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	f043 0204 	orr.w	r2, r3, #4
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	fe00e800 	.word	0xfe00e800

08004524 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	607b      	str	r3, [r7, #4]
 800452e:	460b      	mov	r3, r1
 8004530:	817b      	strh	r3, [r7, #10]
 8004532:	4613      	mov	r3, r2
 8004534:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6859      	ldr	r1, [r3, #4]
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	0d5b      	lsrs	r3, r3, #21
 8004544:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 8004548:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <I2C_TransferConfig+0x54>)
 800454a:	4303      	orrs	r3, r0
 800454c:	43db      	mvns	r3, r3
 800454e:	4019      	ands	r1, r3
 8004550:	897b      	ldrh	r3, [r7, #10]
 8004552:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8004556:	7a7b      	ldrb	r3, [r7, #9]
 8004558:	041b      	lsls	r3, r3, #16
 800455a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800455e:	4318      	orrs	r0, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4318      	orrs	r0, r3
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	4303      	orrs	r3, r0
 8004568:	430b      	orrs	r3, r1
 800456a:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800456c:	bf00      	nop
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	03ff63ff 	.word	0x03ff63ff

0800457c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b20      	cmp	r3, #32
 8004590:	d138      	bne.n	8004604 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800459c:	2302      	movs	r3, #2
 800459e:	e032      	b.n	8004606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2224      	movs	r2, #36	; 0x24
 80045ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6812      	ldr	r2, [r2, #0]
 80045b8:	6812      	ldr	r2, [r2, #0]
 80045ba:	f022 0201 	bic.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	6812      	ldr	r2, [r2, #0]
 80045ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6812      	ldr	r2, [r2, #0]
 80045d8:	6811      	ldr	r1, [r2, #0]
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6812      	ldr	r2, [r2, #0]
 80045e8:	6812      	ldr	r2, [r2, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	e000      	b.n	8004606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004604:	2302      	movs	r3, #2
  }
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b20      	cmp	r3, #32
 8004626:	d139      	bne.n	800469c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004632:	2302      	movs	r3, #2
 8004634:	e033      	b.n	800469e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2224      	movs	r2, #36	; 0x24
 8004642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6812      	ldr	r2, [r2, #0]
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	f022 0201 	bic.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004664:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	021b      	lsls	r3, r3, #8
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4313      	orrs	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	e000      	b.n	800469e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800469c:	2302      	movs	r3, #2
  }
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
	...

080046ac <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim: LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_LPTIM_Init+0x16>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e076      	b.n	80047b0 <HAL_LPTIM_Init+0x104>

#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_LPTIM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f006 ff2e 	bl	800b538 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d103      	bne.n	80046fc <HAL_LPTIM_Init+0x50>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 031e 	bic.w	r3, r3, #30
 80046fa:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004704:	4293      	cmp	r3, r2
 8004706:	d005      	beq.n	8004714 <HAL_LPTIM_Init+0x68>
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800470e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004712:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4b28      	ldr	r3, [pc, #160]	; (80047b8 <HAL_LPTIM_Init+0x10c>)
 8004718:	4013      	ands	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004724:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800472a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004730:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004736:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d107      	bne.n	8004756 <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 800474e:	4313      	orrs	r3, r2
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800475e:	4293      	cmp	r3, r2
 8004760:	d00a      	beq.n	8004778 <HAL_LPTIM_Init+0xcc>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800476a:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004770:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a0d      	ldr	r2, [pc, #52]	; (80047bc <HAL_LPTIM_Init+0x110>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d108      	bne.n	800479c <HAL_LPTIM_Init+0xf0>
    /* Check LPTIM1 Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));

    /* Configure LPTIM1 Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004796:	430a      	orrs	r2, r1
 8004798:	621a      	str	r2, [r3, #32]
 800479a:	e004      	b.n	80047a6 <HAL_LPTIM_Init+0xfa>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80047a4:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	ff19f1fe 	.word	0xff19f1fe
 80047bc:	40007c00 	.word	0x40007c00

080047c0 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim: LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d10d      	bne.n	80047f2 <HAL_LPTIM_IRQHandler+0x32>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d106      	bne.n	80047f2 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2201      	movs	r2, #1
 80047ea:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f882 	bl	80048f6 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d10d      	bne.n	800481c <HAL_LPTIM_IRQHandler+0x5c>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b02      	cmp	r3, #2
 800480c:	d106      	bne.n	800481c <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2202      	movs	r2, #2
 8004814:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f877 	bl	800490a <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b04      	cmp	r3, #4
 8004828:	d10d      	bne.n	8004846 <HAL_LPTIM_IRQHandler+0x86>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b04      	cmp	r3, #4
 8004836:	d106      	bne.n	8004846 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2204      	movs	r2, #4
 800483e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f86c 	bl	800491e <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b08      	cmp	r3, #8
 8004852:	d10d      	bne.n	8004870 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b08      	cmp	r3, #8
 8004860:	d106      	bne.n	8004870 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2208      	movs	r2, #8
 8004868:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f861 	bl	8004932 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0310 	and.w	r3, r3, #16
 800487a:	2b10      	cmp	r3, #16
 800487c:	d10d      	bne.n	800489a <HAL_LPTIM_IRQHandler+0xda>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 0310 	and.w	r3, r3, #16
 8004888:	2b10      	cmp	r3, #16
 800488a:	d106      	bne.n	800489a <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2210      	movs	r2, #16
 8004892:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f856 	bl	8004946 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d10d      	bne.n	80048c4 <HAL_LPTIM_IRQHandler+0x104>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d106      	bne.n	80048c4 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2220      	movs	r2, #32
 80048bc:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f84b 	bl	800495a <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ce:	2b40      	cmp	r3, #64	; 0x40
 80048d0:	d10d      	bne.n	80048ee <HAL_LPTIM_IRQHandler+0x12e>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048dc:	2b40      	cmp	r3, #64	; 0x40
 80048de:	d106      	bne.n	80048ee <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2240      	movs	r2, #64	; 0x40
 80048e6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f840 	bl	800496e <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */      
    }
  }
#endif
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004982:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004984:	b08b      	sub	sp, #44	; 0x2c
 8004986:	af06      	add	r7, sp, #24
 8004988:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0cb      	b.n	8004b2c <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d106      	bne.n	80049ae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f007 fc41 	bl	800c230 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2203      	movs	r2, #3
 80049b2:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f003 f9a6 	bl	8007d0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	603b      	str	r3, [r7, #0]
 80049c6:	687e      	ldr	r6, [r7, #4]
 80049c8:	466d      	mov	r5, sp
 80049ca:	f106 0410 	add.w	r4, r6, #16
 80049ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	602b      	str	r3, [r5, #0]
 80049d6:	1d33      	adds	r3, r6, #4
 80049d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049da:	6838      	ldr	r0, [r7, #0]
 80049dc:	f003 f96d 	bl	8007cba <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2100      	movs	r1, #0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f003 f9ad 	bl	8007d46 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
 80049ec:	2300      	movs	r3, #0
 80049ee:	73fb      	strb	r3, [r7, #15]
 80049f0:	e035      	b.n	8004a5e <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	015b      	lsls	r3, r3, #5
 80049f8:	4413      	add	r3, r2
 80049fa:	3329      	adds	r3, #41	; 0x29
 80049fc:	2201      	movs	r2, #1
 80049fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	015b      	lsls	r3, r3, #5
 8004a06:	4413      	add	r3, r2
 8004a08:	3328      	adds	r3, #40	; 0x28
 8004a0a:	7bfa      	ldrb	r2, [r7, #15]
 8004a0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	7bfa      	ldrb	r2, [r7, #15]
 8004a12:	b291      	uxth	r1, r2
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	015b      	lsls	r3, r3, #5
 8004a18:	4413      	add	r3, r2
 8004a1a:	3336      	adds	r3, #54	; 0x36
 8004a1c:	460a      	mov	r2, r1
 8004a1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	015b      	lsls	r3, r3, #5
 8004a26:	4413      	add	r3, r2
 8004a28:	332b      	adds	r3, #43	; 0x2b
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	015b      	lsls	r3, r3, #5
 8004a34:	4413      	add	r3, r2
 8004a36:	3338      	adds	r3, #56	; 0x38
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	015b      	lsls	r3, r3, #5
 8004a42:	4413      	add	r3, r2
 8004a44:	333c      	adds	r3, #60	; 0x3c
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	3302      	adds	r3, #2
 8004a50:	015b      	lsls	r3, r3, #5
 8004a52:	4413      	add	r3, r2
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < 15U; i++)
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	73fb      	strb	r3, [r7, #15]
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
 8004a60:	2b0e      	cmp	r3, #14
 8004a62:	d9c6      	bls.n	80049f2 <HAL_PCD_Init+0x70>
  }

  for (i = 0U; i < 15U; i++)
 8004a64:	2300      	movs	r3, #0
 8004a66:	73fb      	strb	r3, [r7, #15]
 8004a68:	e031      	b.n	8004ace <HAL_PCD_Init+0x14c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	015b      	lsls	r3, r3, #5
 8004a70:	4413      	add	r3, r2
 8004a72:	f203 2329 	addw	r3, r3, #553	; 0x229
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	015b      	lsls	r3, r3, #5
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004a86:	7bfa      	ldrb	r2, [r7, #15]
 8004a88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	015b      	lsls	r3, r3, #5
 8004a90:	4413      	add	r3, r2
 8004a92:	f203 232b 	addw	r3, r3, #555	; 0x22b
 8004a96:	2200      	movs	r2, #0
 8004a98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	015b      	lsls	r3, r3, #5
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	015b      	lsls	r3, r3, #5
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	3312      	adds	r3, #18
 8004ac0:	015b      	lsls	r3, r3, #5
 8004ac2:	4413      	add	r3, r2
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < 15U; i++)
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	3301      	adds	r3, #1
 8004acc:	73fb      	strb	r3, [r7, #15]
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	2b0e      	cmp	r3, #14
 8004ad2:	d9ca      	bls.n	8004a6a <HAL_PCD_Init+0xe8>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	687e      	ldr	r6, [r7, #4]
 8004adc:	466d      	mov	r5, sp
 8004ade:	f106 0410 	add.w	r4, r6, #16
 8004ae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ae4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	602b      	str	r3, [r5, #0]
 8004aea:	1d33      	adds	r3, r6, #4
 8004aec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aee:	6838      	ldr	r0, [r7, #0]
 8004af0:	f003 f936 	bl	8007d60 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d102      	bne.n	8004b12 <HAL_PCD_Init+0x190>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fe5e 	bl	80057ce <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d102      	bne.n	8004b20 <HAL_PCD_Init+0x19e>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fe31 	bl	8005782 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f004 f966 	bl	8008df6 <USB_DevDisconnect>

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_PCD_Start+0x16>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e012      	b.n	8004b70 <HAL_PCD_Start+0x3c>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_DevConnect(hpcd->Instance);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f004 f936 	bl	8008dc8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f003 f8bb 	bl	8007cdc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f004 f94b 	bl	8008e20 <USB_ReadInterrupts>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b94:	d102      	bne.n	8004b9c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fb40 	bl	800521c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f004 f93d 	bl	8008e20 <USB_ReadInterrupts>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb0:	d112      	bne.n	8004bd8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6812      	ldr	r2, [r2, #0]
 8004bba:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004bbe:	b292      	uxth	r2, r2
 8004bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc4:	b292      	uxth	r2, r2
 8004bc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f007 fbb7 	bl	800c33e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f929 	bl	8004e2a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f004 f91f 	bl	8008e20 <USB_ReadInterrupts>
 8004be2:	4603      	mov	r3, r0
 8004be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004be8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bec:	d10b      	bne.n	8004c06 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004bfa:	b292      	uxth	r2, r2
 8004bfc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c00:	b292      	uxth	r2, r2
 8004c02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f004 f908 	bl	8008e20 <USB_ReadInterrupts>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c1a:	d10b      	bne.n	8004c34 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6812      	ldr	r2, [r2, #0]
 8004c24:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004c28:	b292      	uxth	r2, r2
 8004c2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c2e:	b292      	uxth	r2, r2
 8004c30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f004 f8f1 	bl	8008e20 <USB_ReadInterrupts>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c48:	d133      	bne.n	8004cb2 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6812      	ldr	r2, [r2, #0]
 8004c52:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8004c56:	b292      	uxth	r2, r2
 8004c58:	f022 0204 	bic.w	r2, r2, #4
 8004c5c:	b292      	uxth	r2, r2
 8004c5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8004c6e:	b292      	uxth	r2, r2
 8004c70:	f022 0208 	bic.w	r2, r2, #8
 8004c74:	b292      	uxth	r2, r2
 8004c76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d107      	bne.n	8004c94 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f007 fe08 	bl	800c8a4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f007 fb8f 	bl	800c3b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6812      	ldr	r2, [r2, #0]
 8004ca2:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004ca6:	b292      	uxth	r2, r2
 8004ca8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cac:	b292      	uxth	r2, r2
 8004cae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f004 f8b2 	bl	8008e20 <USB_ReadInterrupts>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc6:	d131      	bne.n	8004d2c <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8004cd4:	b292      	uxth	r2, r2
 8004cd6:	f042 0208 	orr.w	r2, r2, #8
 8004cda:	b292      	uxth	r2, r2
 8004cdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004cec:	b292      	uxth	r2, r2
 8004cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cf2:	b292      	uxth	r2, r2
 8004cf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8004d04:	b292      	uxth	r2, r2
 8004d06:	f042 0204 	orr.w	r2, r2, #4
 8004d0a:	b292      	uxth	r2, r2
 8004d0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f004 f883 	bl	8008e20 <USB_ReadInterrupts>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d24:	d002      	beq.n	8004d2c <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f007 fb2c 	bl	800c384 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f004 f875 	bl	8008e20 <USB_ReadInterrupts>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3c:	2b80      	cmp	r3, #128	; 0x80
 8004d3e:	d13f      	bne.n	8004dc0 <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6812      	ldr	r2, [r2, #0]
 8004d48:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004d4c:	b292      	uxth	r2, r2
 8004d4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d52:	b292      	uxth	r2, r2
 8004d54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d12b      	bne.n	8004dba <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6812      	ldr	r2, [r2, #0]
 8004d6a:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8004d6e:	b292      	uxth	r2, r2
 8004d70:	f042 0204 	orr.w	r2, r2, #4
 8004d74:	b292      	uxth	r2, r2
 8004d76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8004d86:	b292      	uxth	r2, r2
 8004d88:	f042 0208 	orr.w	r2, r2, #8
 8004d8c:	b292      	uxth	r2, r2
 8004d8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	089b      	lsrs	r3, r3, #2
 8004da6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004db0:	2101      	movs	r1, #1
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f007 fd76 	bl	800c8a4 <HAL_PCDEx_LPM_Callback>
 8004db8:	e002      	b.n	8004dc0 <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f007 fae2 	bl	800c384 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f004 f82b 	bl	8008e20 <USB_ReadInterrupts>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd4:	d10e      	bne.n	8004df4 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6812      	ldr	r2, [r2, #0]
 8004dde:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004de2:	b292      	uxth	r2, r2
 8004de4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004de8:	b292      	uxth	r2, r2
 8004dea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f007 fa97 	bl	800c322 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f004 f811 	bl	8008e20 <USB_ReadInterrupts>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e08:	d10b      	bne.n	8004e22 <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6812      	ldr	r2, [r2, #0]
 8004e12:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004e16:	b292      	uxth	r2, r2
 8004e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e1c:	b292      	uxth	r2, r2
 8004e1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004e22:	bf00      	nop
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b082      	sub	sp, #8
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	460b      	mov	r3, r1
 8004e34:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_PCD_SetAddress+0x1a>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e013      	b.n	8004e6c <HAL_PCD_SetAddress+0x42>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	78fa      	ldrb	r2, [r7, #3]
 8004e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	78fa      	ldrb	r2, [r7, #3]
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f003 ff9f 	bl	8008da0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	4608      	mov	r0, r1
 8004e7e:	4611      	mov	r1, r2
 8004e80:	461a      	mov	r2, r3
 8004e82:	4603      	mov	r3, r0
 8004e84:	70fb      	strb	r3, [r7, #3]
 8004e86:	460b      	mov	r3, r1
 8004e88:	803b      	strh	r3, [r7, #0]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	da0b      	bge.n	8004eb2 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004e9a:	78fb      	ldrb	r3, [r7, #3]
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	015b      	lsls	r3, r3, #5
 8004ea2:	3328      	adds	r3, #40	; 0x28
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	705a      	strb	r2, [r3, #1]
 8004eb0:	e00b      	b.n	8004eca <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8004eb2:	78fb      	ldrb	r3, [r7, #3]
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	015b      	lsls	r3, r3, #5
 8004eba:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & 0xFU;
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004ed6:	883a      	ldrh	r2, [r7, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	78ba      	ldrb	r2, [r7, #2]
 8004ee0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d004      	beq.n	8004ef4 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ef4:	78bb      	ldrb	r3, [r7, #2]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d102      	bne.n	8004f00 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d101      	bne.n	8004f0e <HAL_PCD_EP_Open+0x9a>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e00e      	b.n	8004f2c <HAL_PCD_EP_Open+0xb8>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68f9      	ldr	r1, [r7, #12]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f002 ff43 	bl	8007da8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return ret;
 8004f2a:	7afb      	ldrb	r3, [r7, #11]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	da0b      	bge.n	8004f60 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	015b      	lsls	r3, r3, #5
 8004f50:	3328      	adds	r3, #40	; 0x28
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	4413      	add	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	705a      	strb	r2, [r3, #1]
 8004f5e:	e00b      	b.n	8004f78 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	015b      	lsls	r3, r3, #5
 8004f68:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	4413      	add	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & 0xFU;
 8004f78:	78fb      	ldrb	r3, [r7, #3]
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_PCD_EP_Close+0x5e>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e00e      	b.n	8004fb0 <HAL_PCD_EP_Close+0x7c>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68f9      	ldr	r1, [r7, #12]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f003 f9e3 	bl	800836c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	607a      	str	r2, [r7, #4]
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8004fc8:	7afb      	ldrb	r3, [r7, #11]
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	015b      	lsls	r3, r3, #5
 8004fd0:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0xFU;
 8004ff2:	7afb      	ldrb	r3, [r7, #11]
 8004ff4:	f003 030f 	and.w	r3, r3, #15
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0xFU) == 0U)
 8004ffe:	7afb      	ldrb	r3, [r7, #11]
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	2b00      	cmp	r3, #0
 8005006:	d106      	bne.n	8005016 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6979      	ldr	r1, [r7, #20]
 800500e:	4618      	mov	r0, r3
 8005010:	f003 fb42 	bl	8008698 <USB_EPStartXfer>
 8005014:	e005      	b.n	8005022 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6979      	ldr	r1, [r7, #20]
 800501c:	4618      	mov	r0, r3
 800501e:	f003 fb3b 	bl	8008698 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	70fb      	strb	r3, [r7, #3]
  return (uint16_t)hpcd->OUT_ep[ep_addr & 0xFU].xfer_count;
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	3312      	adds	r3, #18
 8005042:	015b      	lsls	r3, r3, #5
 8005044:	4413      	add	r3, r2
 8005046:	3304      	adds	r3, #4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
}
 800504c:	4618      	mov	r0, r3
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	607a      	str	r2, [r7, #4]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	460b      	mov	r3, r1
 8005066:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8005068:	7afb      	ldrb	r3, [r7, #11]
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	015b      	lsls	r3, r3, #5
 8005070:	3328      	adds	r3, #40	; 0x28
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4413      	add	r3, r2
 8005076:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2200      	movs	r2, #0
 8005088:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2201      	movs	r2, #1
 800508e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0xFU;
 8005090:	7afb      	ldrb	r3, [r7, #11]
 8005092:	f003 030f 	and.w	r3, r3, #15
 8005096:	b2da      	uxtb	r2, r3
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0xFU) == 0U)
 800509c:	7afb      	ldrb	r3, [r7, #11]
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6979      	ldr	r1, [r7, #20]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f003 faf3 	bl	8008698 <USB_EPStartXfer>
 80050b2:	e005      	b.n	80050c0 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6979      	ldr	r1, [r7, #20]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f003 faec 	bl	8008698 <USB_EPStartXfer>
  }

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	460b      	mov	r3, r1
 80050d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 80050d6:	78fb      	ldrb	r3, [r7, #3]
 80050d8:	f003 020f 	and.w	r2, r3, #15
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d901      	bls.n	80050e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e046      	b.n	8005176 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	da0b      	bge.n	8005108 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	015b      	lsls	r3, r3, #5
 80050f8:	3328      	adds	r3, #40	; 0x28
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	4413      	add	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2201      	movs	r2, #1
 8005104:	705a      	strb	r2, [r3, #1]
 8005106:	e009      	b.n	800511c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	015b      	lsls	r3, r3, #5
 800510c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	4413      	add	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8005122:	78fb      	ldrb	r3, [r7, #3]
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	b2da      	uxtb	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_PCD_EP_SetStall+0x72>
 8005138:	2302      	movs	r3, #2
 800513a:	e01c      	b.n	8005176 <HAL_PCD_EP_SetStall+0xac>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68f9      	ldr	r1, [r7, #12]
 800514a:	4618      	mov	r0, r3
 800514c:	f003 fd58 	bl	8008c00 <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	2b00      	cmp	r3, #0
 8005158:	d108      	bne.n	800516c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8005164:	4619      	mov	r1, r3
 8005166:	4610      	mov	r0, r2
 8005168:	f003 fe6a 	bl	8008e40 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	460b      	mov	r3, r1
 8005188:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800518a:	78fb      	ldrb	r3, [r7, #3]
 800518c:	f003 020f 	and.w	r2, r3, #15
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	429a      	cmp	r2, r3
 8005196:	d901      	bls.n	800519c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e03a      	b.n	8005212 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800519c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	da0b      	bge.n	80051bc <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	015b      	lsls	r3, r3, #5
 80051ac:	3328      	adds	r3, #40	; 0x28
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	4413      	add	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	705a      	strb	r2, [r3, #1]
 80051ba:	e00b      	b.n	80051d4 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80051bc:	78fb      	ldrb	r3, [r7, #3]
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	015b      	lsls	r3, r3, #5
 80051c4:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	4413      	add	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 80051da:	78fb      	ldrb	r3, [r7, #3]
 80051dc:	f003 030f 	and.w	r3, r3, #15
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_PCD_EP_ClrStall+0x76>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e00e      	b.n	8005212 <HAL_PCD_EP_ClrStall+0x94>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68f9      	ldr	r1, [r7, #12]
 8005202:	4618      	mov	r0, r3
 8005204:	f003 fd3e 	bl	8008c84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b089      	sub	sp, #36	; 0x24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005224:	e25e      	b.n	80056e4 <PCD_EP_ISR_Handler+0x4c8>
  {
    wIstr = hpcd->Instance->ISTR;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800522e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005230:	8afb      	ldrh	r3, [r7, #22]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f003 030f 	and.w	r3, r3, #15
 8005238:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800523a:	7d7b      	ldrb	r3, [r7, #21]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f040 812c 	bne.w	800549a <PCD_EP_ISR_Handler+0x27e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005242:	8afb      	ldrh	r3, [r7, #22]
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	2b00      	cmp	r3, #0
 800524a:	d14b      	bne.n	80052e4 <PCD_EP_ISR_Handler+0xc8>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525c:	b29c      	uxth	r4, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4622      	mov	r2, r4
 8005264:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3328      	adds	r3, #40	; 0x28
 800526a:	613b      	str	r3, [r7, #16]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005274:	b29b      	uxth	r3, r3
 8005276:	461a      	mov	r2, r3
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	4413      	add	r3, r2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	4413      	add	r3, r2
 8005286:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	695a      	ldr	r2, [r3, #20]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	441a      	add	r2, r3
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80052a2:	2100      	movs	r1, #0
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f007 f825 	bl	800c2f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 8216 	beq.w	80056e4 <PCD_EP_ISR_Handler+0x4c8>
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f040 8211 	bne.w	80056e4 <PCD_EP_ISR_Handler+0x4c8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	b292      	uxth	r2, r2
 80052d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80052e2:	e1ff      	b.n	80056e4 <PCD_EP_ISR_Handler+0x4c8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80052ea:	613b      	str	r3, [r7, #16]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	81fb      	strh	r3, [r7, #14]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80052f4:	89fb      	ldrh	r3, [r7, #14]
 80052f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d02f      	beq.n	800535e <PCD_EP_ISR_Handler+0x142>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005306:	b29b      	uxth	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	4413      	add	r3, r2
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6812      	ldr	r2, [r2, #0]
 8005316:	4413      	add	r3, r2
 8005318:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6818      	ldr	r0, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f503 6186 	add.w	r1, r3, #1072	; 0x430
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	88da      	ldrh	r2, [r3, #6]
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	b29b      	uxth	r3, r3
 800533a:	f003 fdce 	bl	8008eda <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	b29a      	uxth	r2, r3
 8005346:	f640 738f 	movw	r3, #3983	; 0xf8f
 800534a:	4013      	ands	r3, r2
 800534c:	b29c      	uxth	r4, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4622      	mov	r2, r4
 8005354:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f006 ffa2 	bl	800c2a0 <HAL_PCD_SetupStageCallback>
 800535c:	e1c2      	b.n	80056e4 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800535e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005362:	2b00      	cmp	r3, #0
 8005364:	f280 81be 	bge.w	80056e4 <PCD_EP_ISR_Handler+0x4c8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b29a      	uxth	r2, r3
 8005370:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005374:	4013      	ands	r3, r2
 8005376:	b29c      	uxth	r4, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4622      	mov	r2, r4
 800537e:	801a      	strh	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005388:	b29b      	uxth	r3, r3
 800538a:	461a      	mov	r2, r3
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	4413      	add	r3, r2
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6812      	ldr	r2, [r2, #0]
 8005398:	4413      	add	r3, r2
 800539a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 0U)
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d011      	beq.n	80053d4 <PCD_EP_ISR_Handler+0x1b8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6818      	ldr	r0, [r3, #0]
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	6959      	ldr	r1, [r3, #20]
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	88da      	ldrh	r2, [r3, #6]
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	f003 fd8a 	bl	8008eda <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	695a      	ldr	r2, [r3, #20]
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	441a      	add	r2, r3
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	615a      	str	r2, [r3, #20]

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80053d4:	2100      	movs	r1, #0
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f006 ff74 	bl	800c2c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	461c      	mov	r4, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	441c      	add	r4, r3
 80053ee:	f204 4306 	addw	r3, r4, #1030	; 0x406
 80053f2:	60bb      	str	r3, [r7, #8]
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d111      	bne.n	8005420 <PCD_EP_ISR_Handler+0x204>
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	881a      	ldrh	r2, [r3, #0]
 8005400:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8005404:	4013      	ands	r3, r2
 8005406:	b29a      	uxth	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	801a      	strh	r2, [r3, #0]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005418:	b29a      	uxth	r2, r3
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	801a      	strh	r2, [r3, #0]
 800541e:	e026      	b.n	800546e <PCD_EP_ISR_Handler+0x252>
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b3d      	cmp	r3, #61	; 0x3d
 8005426:	d813      	bhi.n	8005450 <PCD_EP_ISR_Handler+0x234>
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	085b      	lsrs	r3, r3, #1
 800542e:	61bb      	str	r3, [r7, #24]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <PCD_EP_ISR_Handler+0x226>
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	3301      	adds	r3, #1
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	b29b      	uxth	r3, r3
 8005446:	029b      	lsls	r3, r3, #10
 8005448:	b29a      	uxth	r2, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	801a      	strh	r2, [r3, #0]
 800544e:	e00e      	b.n	800546e <PCD_EP_ISR_Handler+0x252>
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	095b      	lsrs	r3, r3, #5
 8005456:	61bb      	str	r3, [r7, #24]
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	b29b      	uxth	r3, r3
 800545c:	029b      	lsls	r3, r3, #10
 800545e:	b29b      	uxth	r3, r3
 8005460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005468:	b29a      	uxth	r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	b29b      	uxth	r3, r3
 8005476:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800547a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547e:	b29c      	uxth	r4, r3
 8005480:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005484:	b29c      	uxth	r4, r3
 8005486:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800548a:	b29c      	uxth	r4, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	4b9b      	ldr	r3, [pc, #620]	; (8005700 <PCD_EP_ISR_Handler+0x4e4>)
 8005492:	4323      	orrs	r3, r4
 8005494:	b29b      	uxth	r3, r3
 8005496:	8013      	strh	r3, [r2, #0]
 8005498:	e124      	b.n	80056e4 <PCD_EP_ISR_Handler+0x4c8>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	7d7b      	ldrb	r3, [r7, #21]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	81fb      	strh	r3, [r7, #14]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80054aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f280 80c9 	bge.w	8005646 <PCD_EP_ISR_Handler+0x42a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	461a      	mov	r2, r3
 80054ba:	7d7b      	ldrb	r3, [r7, #21]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80054c8:	4013      	ands	r3, r2
 80054ca:	b29c      	uxth	r4, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	461a      	mov	r2, r3
 80054d2:	7d7b      	ldrb	r3, [r7, #21]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	4622      	mov	r2, r4
 80054da:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80054dc:	7d7b      	ldrb	r3, [r7, #21]
 80054de:	015b      	lsls	r3, r3, #5
 80054e0:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	4413      	add	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	7b1b      	ldrb	r3, [r3, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d11f      	bne.n	8005532 <PCD_EP_ISR_Handler+0x316>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	461a      	mov	r2, r3
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	4413      	add	r3, r2
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6812      	ldr	r2, [r2, #0]
 800550a:	4413      	add	r3, r2
 800550c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005516:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8005518:	8bfb      	ldrh	r3, [r7, #30]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d06e      	beq.n	80055fc <PCD_EP_ISR_Handler+0x3e0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6818      	ldr	r0, [r3, #0]
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	6959      	ldr	r1, [r3, #20]
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	88da      	ldrh	r2, [r3, #6]
 800552a:	8bfb      	ldrh	r3, [r7, #30]
 800552c:	f003 fcd5 	bl	8008eda <USB_ReadPMA>
 8005530:	e064      	b.n	80055fc <PCD_EP_ISR_Handler+0x3e0>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d01f      	beq.n	800558c <PCD_EP_ISR_Handler+0x370>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005554:	b29b      	uxth	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	4413      	add	r3, r2
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6812      	ldr	r2, [r2, #0]
 8005564:	4413      	add	r3, r2
 8005566:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005570:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8005572:	8bfb      	ldrh	r3, [r7, #30]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d028      	beq.n	80055ca <PCD_EP_ISR_Handler+0x3ae>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6818      	ldr	r0, [r3, #0]
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	6959      	ldr	r1, [r3, #20]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	891a      	ldrh	r2, [r3, #8]
 8005584:	8bfb      	ldrh	r3, [r7, #30]
 8005586:	f003 fca8 	bl	8008eda <USB_ReadPMA>
 800558a:	e01e      	b.n	80055ca <PCD_EP_ISR_Handler+0x3ae>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005594:	b29b      	uxth	r3, r3
 8005596:	461a      	mov	r2, r3
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	4413      	add	r3, r2
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6812      	ldr	r2, [r2, #0]
 80055a4:	4413      	add	r3, r2
 80055a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055b0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80055b2:	8bfb      	ldrh	r3, [r7, #30]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d008      	beq.n	80055ca <PCD_EP_ISR_Handler+0x3ae>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6818      	ldr	r0, [r3, #0]
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	6959      	ldr	r1, [r3, #20]
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	895a      	ldrh	r2, [r3, #10]
 80055c4:	8bfb      	ldrh	r3, [r7, #30]
 80055c6:	f003 fc88 	bl	8008eda <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	b29b      	uxth	r3, r3
 80055dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e4:	b29c      	uxth	r4, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	441a      	add	r2, r3
 80055f4:	4b43      	ldr	r3, [pc, #268]	; (8005704 <PCD_EP_ISR_Handler+0x4e8>)
 80055f6:	4323      	orrs	r3, r4
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	8bfb      	ldrh	r3, [r7, #30]
 8005602:	441a      	add	r2, r3
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	695a      	ldr	r2, [r3, #20]
 800560c:	8bfb      	ldrh	r3, [r7, #30]
 800560e:	441a      	add	r2, r3
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <PCD_EP_ISR_Handler+0x40a>
 800561c:	8bfa      	ldrh	r2, [r7, #30]
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	429a      	cmp	r2, r3
 8005624:	d206      	bcs.n	8005634 <PCD_EP_ISR_Handler+0x418>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	4619      	mov	r1, r3
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f006 fe49 	bl	800c2c4 <HAL_PCD_DataOutStageCallback>
 8005632:	e008      	b.n	8005646 <PCD_EP_ISR_Handler+0x42a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	7819      	ldrb	r1, [r3, #0]
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	695a      	ldr	r2, [r3, #20]
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff fcb9 	bl	8004fb8 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005646:	89fb      	ldrh	r3, [r7, #14]
 8005648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564c:	2b00      	cmp	r3, #0
 800564e:	d049      	beq.n	80056e4 <PCD_EP_ISR_Handler+0x4c8>
      {
        ep = &hpcd->IN_ep[epindex];
 8005650:	7d7b      	ldrb	r3, [r7, #21]
 8005652:	015b      	lsls	r3, r3, #5
 8005654:	3328      	adds	r3, #40	; 0x28
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	4413      	add	r3, r2
 800565a:	613b      	str	r3, [r7, #16]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	461a      	mov	r2, r3
 8005662:	7d7b      	ldrb	r3, [r7, #21]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	b29b      	uxth	r3, r3
 800566c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005674:	b29c      	uxth	r4, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	7d7b      	ldrb	r3, [r7, #21]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	4622      	mov	r2, r4
 8005684:	801a      	strh	r2, [r3, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800568e:	b29b      	uxth	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	4413      	add	r3, r2
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6812      	ldr	r2, [r2, #0]
 800569e:	4413      	add	r3, r2
 80056a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	441a      	add	r2, r3
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d106      	bne.n	80056d2 <PCD_EP_ISR_Handler+0x4b6>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	4619      	mov	r1, r3
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f006 fe12 	bl	800c2f4 <HAL_PCD_DataInStageCallback>
 80056d0:	e008      	b.n	80056e4 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	7819      	ldrb	r1, [r3, #0]
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	695a      	ldr	r2, [r3, #20]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7ff fcba 	bl	8005058 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	b21b      	sxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f6ff ad98 	blt.w	8005226 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3724      	adds	r7, #36	; 0x24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd90      	pop	{r4, r7, pc}
 8005700:	ffff8080 	.word	0xffff8080
 8005704:	ffff80c0 	.word	0xffff80c0

08005708 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	607b      	str	r3, [r7, #4]
 8005712:	460b      	mov	r3, r1
 8005714:	817b      	strh	r3, [r7, #10]
 8005716:	4613      	mov	r3, r2
 8005718:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800571a:	897b      	ldrh	r3, [r7, #10]
 800571c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d008      	beq.n	8005738 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8005726:	897b      	ldrh	r3, [r7, #10]
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	015b      	lsls	r3, r3, #5
 800572e:	3328      	adds	r3, #40	; 0x28
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4413      	add	r3, r2
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	e006      	b.n	8005746 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005738:	897b      	ldrh	r3, [r7, #10]
 800573a:	015b      	lsls	r3, r3, #5
 800573c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4413      	add	r3, r2
 8005744:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005746:	893b      	ldrh	r3, [r7, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d107      	bne.n	800575c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2200      	movs	r2, #0
 8005750:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	b29a      	uxth	r2, r3
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	80da      	strh	r2, [r3, #6]
 800575a:	e00b      	b.n	8005774 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2201      	movs	r2, #1
 8005760:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	b29a      	uxth	r2, r3
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	0c1b      	lsrs	r3, r3, #16
 800576e:	b29a      	uxth	r2, r3
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8005782:	b480      	push	{r7}
 8005784:	b085      	sub	sp, #20
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f043 0301 	orr.w	r3, r3, #1
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f043 0302 	orr.w	r3, r3, #2
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b085      	sub	sp, #20
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
  hpcd->LPM_State = LPM_L0;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	f043 0301 	orr.w	r3, r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005806:	b29b      	uxth	r3, r3
 8005808:	f043 0302 	orr.w	r3, r3, #2
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
	...

08005824 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005828:	4b04      	ldr	r3, [pc, #16]	; (800583c <HAL_PWREx_GetVoltageRange+0x18>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005830:	4618      	mov	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40007000 	.word	0x40007000

08005840 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800584e:	d130      	bne.n	80058b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005850:	4b23      	ldr	r3, [pc, #140]	; (80058e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800585c:	d038      	beq.n	80058d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800585e:	4a20      	ldr	r2, [pc, #128]	; (80058e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005860:	4b1f      	ldr	r3, [pc, #124]	; (80058e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005868:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800586c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800586e:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2232      	movs	r2, #50	; 0x32
 8005874:	fb02 f303 	mul.w	r3, r2, r3
 8005878:	4a1b      	ldr	r2, [pc, #108]	; (80058e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800587a:	fba2 2303 	umull	r2, r3, r2, r3
 800587e:	0c9b      	lsrs	r3, r3, #18
 8005880:	3301      	adds	r3, #1
 8005882:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005884:	e002      	b.n	800588c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3b01      	subs	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800588c:	4b14      	ldr	r3, [pc, #80]	; (80058e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005898:	d102      	bne.n	80058a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1f2      	bne.n	8005886 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058a0:	4b0f      	ldr	r3, [pc, #60]	; (80058e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ac:	d110      	bne.n	80058d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e00f      	b.n	80058d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80058b2:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058be:	d007      	beq.n	80058d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058c0:	4a07      	ldr	r2, [pc, #28]	; (80058e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058c2:	4b07      	ldr	r3, [pc, #28]	; (80058e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	40007000 	.word	0x40007000
 80058e4:	2000129c 	.word	0x2000129c
 80058e8:	431bde83 	.word	0x431bde83

080058ec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80058f0:	4a05      	ldr	r2, [pc, #20]	; (8005908 <HAL_PWREx_EnableVddUSB+0x1c>)
 80058f2:	4b05      	ldr	r3, [pc, #20]	; (8005908 <HAL_PWREx_EnableVddUSB+0x1c>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058fa:	6053      	str	r3, [r2, #4]
}
 80058fc:	bf00      	nop
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40007000 	.word	0x40007000

0800590c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_oscsource;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e395      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800591e:	4ba3      	ldr	r3, [pc, #652]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 030c 	and.w	r3, r3, #12
 8005926:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005928:	4ba0      	ldr	r3, [pc, #640]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 0303 	and.w	r3, r3, #3
 8005930:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0310 	and.w	r3, r3, #16
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 80df 	beq.w	8005afe <HAL_RCC_OscConfig+0x1f2>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <HAL_RCC_OscConfig+0x4a>
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	2b0c      	cmp	r3, #12
 800594a:	f040 8086 	bne.w	8005a5a <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b01      	cmp	r3, #1
 8005952:	f040 8082 	bne.w	8005a5a <HAL_RCC_OscConfig+0x14e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005956:	4b95      	ldr	r3, [pc, #596]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <HAL_RCC_OscConfig+0x62>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e36d      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1a      	ldr	r2, [r3, #32]
 8005972:	4b8e      	ldr	r3, [pc, #568]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	2b00      	cmp	r3, #0
 800597c:	d004      	beq.n	8005988 <HAL_RCC_OscConfig+0x7c>
 800597e:	4b8b      	ldr	r3, [pc, #556]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005986:	e005      	b.n	8005994 <HAL_RCC_OscConfig+0x88>
 8005988:	4b88      	ldr	r3, [pc, #544]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 800598a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800598e:	091b      	lsrs	r3, r3, #4
 8005990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005994:	429a      	cmp	r2, r3
 8005996:	d923      	bls.n	80059e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	4618      	mov	r0, r3
 800599e:	f000 fd0d 	bl	80063bc <RCC_SetFlashLatencyFromMSIRange>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e34e      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059ac:	4a7f      	ldr	r2, [pc, #508]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 80059ae:	4b7f      	ldr	r3, [pc, #508]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f043 0308 	orr.w	r3, r3, #8
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	497c      	ldr	r1, [pc, #496]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 80059ba:	4b7c      	ldr	r3, [pc, #496]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059ca:	4978      	ldr	r1, [pc, #480]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 80059cc:	4b77      	ldr	r3, [pc, #476]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	021b      	lsls	r3, r3, #8
 80059da:	4313      	orrs	r3, r2
 80059dc:	604b      	str	r3, [r1, #4]
 80059de:	e022      	b.n	8005a26 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059e0:	4a72      	ldr	r2, [pc, #456]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 80059e2:	4b72      	ldr	r3, [pc, #456]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f043 0308 	orr.w	r3, r3, #8
 80059ea:	6013      	str	r3, [r2, #0]
 80059ec:	496f      	ldr	r1, [pc, #444]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 80059ee:	4b6f      	ldr	r3, [pc, #444]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059fe:	496b      	ldr	r1, [pc, #428]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005a00:	4b6a      	ldr	r3, [pc, #424]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	021b      	lsls	r3, r3, #8
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fcd0 	bl	80063bc <RCC_SetFlashLatencyFromMSIRange>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e311      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a26:	f000 fbf5 	bl	8006214 <HAL_RCC_GetSysClockFreq>
 8005a2a:	4601      	mov	r1, r0
 8005a2c:	4b5f      	ldr	r3, [pc, #380]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	091b      	lsrs	r3, r3, #4
 8005a32:	f003 030f 	and.w	r3, r3, #15
 8005a36:	4a5e      	ldr	r2, [pc, #376]	; (8005bb0 <HAL_RCC_OscConfig+0x2a4>)
 8005a38:	5cd3      	ldrb	r3, [r2, r3]
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	fa21 f303 	lsr.w	r3, r1, r3
 8005a42:	4a5c      	ldr	r2, [pc, #368]	; (8005bb4 <HAL_RCC_OscConfig+0x2a8>)
 8005a44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8005a46:	2000      	movs	r0, #0
 8005a48:	f7fd fcb0 	bl	80033ac <HAL_InitTick>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d052      	beq.n	8005afc <HAL_RCC_OscConfig+0x1f0>
        {
          return status;
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
 8005a58:	e2f7      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d032      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a62:	4a52      	ldr	r2, [pc, #328]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005a64:	4b51      	ldr	r3, [pc, #324]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f043 0301 	orr.w	r3, r3, #1
 8005a6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a6e:	f7fd fccf 	bl	8003410 <HAL_GetTick>
 8005a72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a76:	f7fd fccb 	bl	8003410 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e2e0      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a88:	4b48      	ldr	r3, [pc, #288]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0f0      	beq.n	8005a76 <HAL_RCC_OscConfig+0x16a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a94:	4a45      	ldr	r2, [pc, #276]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005a96:	4b45      	ldr	r3, [pc, #276]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f043 0308 	orr.w	r3, r3, #8
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	4942      	ldr	r1, [pc, #264]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005aa2:	4b42      	ldr	r3, [pc, #264]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ab2:	493e      	ldr	r1, [pc, #248]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005ab4:	4b3d      	ldr	r3, [pc, #244]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	604b      	str	r3, [r1, #4]
 8005ac6:	e01a      	b.n	8005afe <HAL_RCC_OscConfig+0x1f2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ac8:	4a38      	ldr	r2, [pc, #224]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005aca:	4b38      	ldr	r3, [pc, #224]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f023 0301 	bic.w	r3, r3, #1
 8005ad2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ad4:	f7fd fc9c 	bl	8003410 <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005adc:	f7fd fc98 	bl	8003410 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e2ad      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005aee:	4b2f      	ldr	r3, [pc, #188]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1f0      	bne.n	8005adc <HAL_RCC_OscConfig+0x1d0>
 8005afa:	e000      	b.n	8005afe <HAL_RCC_OscConfig+0x1f2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005afc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d072      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d005      	beq.n	8005b1c <HAL_RCC_OscConfig+0x210>
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	2b0c      	cmp	r3, #12
 8005b14:	d10e      	bne.n	8005b34 <HAL_RCC_OscConfig+0x228>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d10b      	bne.n	8005b34 <HAL_RCC_OscConfig+0x228>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b1c:	4b23      	ldr	r3, [pc, #140]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d062      	beq.n	8005bee <HAL_RCC_OscConfig+0x2e2>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d15e      	bne.n	8005bee <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e28a      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b3c:	d106      	bne.n	8005b4c <HAL_RCC_OscConfig+0x240>
 8005b3e:	4a1b      	ldr	r2, [pc, #108]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005b40:	4b1a      	ldr	r3, [pc, #104]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	e01d      	b.n	8005b88 <HAL_RCC_OscConfig+0x27c>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b54:	d10c      	bne.n	8005b70 <HAL_RCC_OscConfig+0x264>
 8005b56:	4a15      	ldr	r2, [pc, #84]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005b58:	4b14      	ldr	r3, [pc, #80]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	4a12      	ldr	r2, [pc, #72]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005b64:	4b11      	ldr	r3, [pc, #68]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	e00b      	b.n	8005b88 <HAL_RCC_OscConfig+0x27c>
 8005b70:	4a0e      	ldr	r2, [pc, #56]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005b72:	4b0e      	ldr	r3, [pc, #56]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	4a0b      	ldr	r2, [pc, #44]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005b7e:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <HAL_RCC_OscConfig+0x2a0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01a      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x2ba>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b90:	f7fd fc3e 	bl	8003410 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b96:	e00f      	b.n	8005bb8 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b98:	f7fd fc3a 	bl	8003410 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b64      	cmp	r3, #100	; 0x64
 8005ba4:	d908      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e24f      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
 8005baa:	bf00      	nop
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	0800d6bc 	.word	0x0800d6bc
 8005bb4:	2000129c 	.word	0x2000129c
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bb8:	4bae      	ldr	r3, [pc, #696]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0e9      	beq.n	8005b98 <HAL_RCC_OscConfig+0x28c>
 8005bc4:	e014      	b.n	8005bf0 <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc6:	f7fd fc23 	bl	8003410 <HAL_GetTick>
 8005bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_OscConfig+0x2d4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bce:	f7fd fc1f 	bl	8003410 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b64      	cmp	r3, #100	; 0x64
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e234      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005be0:	4ba4      	ldr	r3, [pc, #656]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1f0      	bne.n	8005bce <HAL_RCC_OscConfig+0x2c2>
 8005bec:	e000      	b.n	8005bf0 <HAL_RCC_OscConfig+0x2e4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d060      	beq.n	8005cbe <HAL_RCC_OscConfig+0x3b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d005      	beq.n	8005c0e <HAL_RCC_OscConfig+0x302>
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b0c      	cmp	r3, #12
 8005c06:	d119      	bne.n	8005c3c <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d116      	bne.n	8005c3c <HAL_RCC_OscConfig+0x330>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c0e:	4b99      	ldr	r3, [pc, #612]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <HAL_RCC_OscConfig+0x31a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e211      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c26:	4993      	ldr	r1, [pc, #588]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005c28:	4b92      	ldr	r3, [pc, #584]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	061b      	lsls	r3, r3, #24
 8005c36:	4313      	orrs	r3, r2
 8005c38:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c3a:	e040      	b.n	8005cbe <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d023      	beq.n	8005c8c <HAL_RCC_OscConfig+0x380>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c44:	4a8b      	ldr	r2, [pc, #556]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005c46:	4b8b      	ldr	r3, [pc, #556]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c50:	f7fd fbde 	bl	8003410 <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c58:	f7fd fbda 	bl	8003410 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e1ef      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c6a:	4b82      	ldr	r3, [pc, #520]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0f0      	beq.n	8005c58 <HAL_RCC_OscConfig+0x34c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c76:	497f      	ldr	r1, [pc, #508]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005c78:	4b7e      	ldr	r3, [pc, #504]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	061b      	lsls	r3, r3, #24
 8005c86:	4313      	orrs	r3, r2
 8005c88:	604b      	str	r3, [r1, #4]
 8005c8a:	e018      	b.n	8005cbe <HAL_RCC_OscConfig+0x3b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c8c:	4a79      	ldr	r2, [pc, #484]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005c8e:	4b79      	ldr	r3, [pc, #484]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c98:	f7fd fbba 	bl	8003410 <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ca0:	f7fd fbb6 	bl	8003410 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e1cb      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cb2:	4b70      	ldr	r3, [pc, #448]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1f0      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0308 	and.w	r3, r3, #8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d03c      	beq.n	8005d44 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01c      	beq.n	8005d0c <HAL_RCC_OscConfig+0x400>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cd2:	4a68      	ldr	r2, [pc, #416]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005cd4:	4b67      	ldr	r3, [pc, #412]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cda:	f043 0301 	orr.w	r3, r3, #1
 8005cde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce2:	f7fd fb95 	bl	8003410 <HAL_GetTick>
 8005ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ce8:	e008      	b.n	8005cfc <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cea:	f7fd fb91 	bl	8003410 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e1a6      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cfc:	4b5d      	ldr	r3, [pc, #372]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0ef      	beq.n	8005cea <HAL_RCC_OscConfig+0x3de>
 8005d0a:	e01b      	b.n	8005d44 <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d0c:	4a59      	ldr	r2, [pc, #356]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005d0e:	4b59      	ldr	r3, [pc, #356]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1c:	f7fd fb78 	bl	8003410 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d24:	f7fd fb74 	bl	8003410 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e189      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d36:	4b4f      	ldr	r3, [pc, #316]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1ef      	bne.n	8005d24 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 80a5 	beq.w	8005e9c <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d52:	2300      	movs	r3, #0
 8005d54:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005d56:	4b47      	ldr	r3, [pc, #284]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10d      	bne.n	8005d7e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d62:	4a44      	ldr	r2, [pc, #272]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005d64:	4b43      	ldr	r3, [pc, #268]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8005d6e:	4b41      	ldr	r3, [pc, #260]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d76:	60bb      	str	r3, [r7, #8]
 8005d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d7e:	4b3e      	ldr	r3, [pc, #248]	; (8005e78 <HAL_RCC_OscConfig+0x56c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d118      	bne.n	8005dbc <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d8a:	4a3b      	ldr	r2, [pc, #236]	; (8005e78 <HAL_RCC_OscConfig+0x56c>)
 8005d8c:	4b3a      	ldr	r3, [pc, #232]	; (8005e78 <HAL_RCC_OscConfig+0x56c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d96:	f7fd fb3b 	bl	8003410 <HAL_GetTick>
 8005d9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d9e:	f7fd fb37 	bl	8003410 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e14c      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005db0:	4b31      	ldr	r3, [pc, #196]	; (8005e78 <HAL_RCC_OscConfig+0x56c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0f0      	beq.n	8005d9e <HAL_RCC_OscConfig+0x492>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d108      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x4ca>
 8005dc4:	4a2b      	ldr	r2, [pc, #172]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005dc6:	4b2b      	ldr	r3, [pc, #172]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dcc:	f043 0301 	orr.w	r3, r3, #1
 8005dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dd4:	e024      	b.n	8005e20 <HAL_RCC_OscConfig+0x514>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	2b05      	cmp	r3, #5
 8005ddc:	d110      	bne.n	8005e00 <HAL_RCC_OscConfig+0x4f4>
 8005dde:	4a25      	ldr	r2, [pc, #148]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005de0:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de6:	f043 0304 	orr.w	r3, r3, #4
 8005dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dee:	4a21      	ldr	r2, [pc, #132]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005df0:	4b20      	ldr	r3, [pc, #128]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df6:	f043 0301 	orr.w	r3, r3, #1
 8005dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dfe:	e00f      	b.n	8005e20 <HAL_RCC_OscConfig+0x514>
 8005e00:	4a1c      	ldr	r2, [pc, #112]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005e02:	4b1c      	ldr	r3, [pc, #112]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e08:	f023 0301 	bic.w	r3, r3, #1
 8005e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e10:	4a18      	ldr	r2, [pc, #96]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005e12:	4b18      	ldr	r3, [pc, #96]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e18:	f023 0304 	bic.w	r3, r3, #4
 8005e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d016      	beq.n	8005e56 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e28:	f7fd faf2 	bl	8003410 <HAL_GetTick>
 8005e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e2e:	e00a      	b.n	8005e46 <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e30:	f7fd faee 	bl	8003410 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e101      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e46:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <HAL_RCC_OscConfig+0x568>)
 8005e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0ed      	beq.n	8005e30 <HAL_RCC_OscConfig+0x524>
 8005e54:	e019      	b.n	8005e8a <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e56:	f7fd fadb 	bl	8003410 <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e5c:	e00e      	b.n	8005e7c <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e5e:	f7fd fad7 	bl	8003410 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d905      	bls.n	8005e7c <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e0ea      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
 8005e74:	40021000 	.word	0x40021000
 8005e78:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e7c:	4b75      	ldr	r3, [pc, #468]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1e9      	bne.n	8005e5e <HAL_RCC_OscConfig+0x552>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e8a:	7ffb      	ldrb	r3, [r7, #31]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d105      	bne.n	8005e9c <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e90:	4a70      	ldr	r2, [pc, #448]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005e92:	4b70      	ldr	r3, [pc, #448]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d03c      	beq.n	8005f22 <HAL_RCC_OscConfig+0x616>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01c      	beq.n	8005eea <HAL_RCC_OscConfig+0x5de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005eb0:	4a68      	ldr	r2, [pc, #416]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005eb2:	4b68      	ldr	r3, [pc, #416]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005eb8:	f043 0301 	orr.w	r3, r3, #1
 8005ebc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec0:	f7fd faa6 	bl	8003410 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x5ce>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ec8:	f7fd faa2 	bl	8003410 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e0b7      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005eda:	4b5e      	ldr	r3, [pc, #376]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005edc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0ef      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x5bc>
 8005ee8:	e01b      	b.n	8005f22 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005eea:	4a5a      	ldr	r2, [pc, #360]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005eec:	4b59      	ldr	r3, [pc, #356]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005eee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ef2:	f023 0301 	bic.w	r3, r3, #1
 8005ef6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005efa:	f7fd fa89 	bl	8003410 <HAL_GetTick>
 8005efe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f00:	e008      	b.n	8005f14 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f02:	f7fd fa85 	bl	8003410 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e09a      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f14:	4b4f      	ldr	r3, [pc, #316]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1ef      	bne.n	8005f02 <HAL_RCC_OscConfig+0x5f6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 808e 	beq.w	8006048 <HAL_RCC_OscConfig+0x73c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	2b0c      	cmp	r3, #12
 8005f30:	f000 8088 	beq.w	8006044 <HAL_RCC_OscConfig+0x738>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d155      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x6dc>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f3c:	4a45      	ldr	r2, [pc, #276]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005f3e:	4b45      	ldr	r3, [pc, #276]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f48:	f7fd fa62 	bl	8003410 <HAL_GetTick>
 8005f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f50:	f7fd fa5e 	bl	8003410 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e073      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f62:	4b3c      	ldr	r3, [pc, #240]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1f0      	bne.n	8005f50 <HAL_RCC_OscConfig+0x644>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f6e:	4939      	ldr	r1, [pc, #228]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	3b01      	subs	r3, #1
 8005f76:	011a      	lsls	r2, r3, #4
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7c:	021b      	lsls	r3, r3, #8
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	431a      	orrs	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8a:	085b      	lsrs	r3, r3, #1
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	055b      	lsls	r3, r3, #21
 8005f90:	431a      	orrs	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	085b      	lsrs	r3, r3, #1
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	065b      	lsls	r3, r3, #25
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	06db      	lsls	r3, r3, #27
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fa8:	4a2a      	ldr	r2, [pc, #168]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005faa:	4b2a      	ldr	r3, [pc, #168]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fb2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fb4:	4a27      	ldr	r2, [pc, #156]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005fb6:	4b27      	ldr	r3, [pc, #156]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc0:	f7fd fa26 	bl	8003410 <HAL_GetTick>
 8005fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0x6ce>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fc8:	f7fd fa22 	bl	8003410 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x6ce>
          {
            return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e037      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fda:	4b1e      	ldr	r3, [pc, #120]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0f0      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x6bc>
 8005fe6:	e02f      	b.n	8006048 <HAL_RCC_OscConfig+0x73c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fe8:	4a1a      	ldr	r2, [pc, #104]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005fea:	4b1a      	ldr	r3, [pc, #104]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ff2:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ff4:	4b17      	ldr	r3, [pc, #92]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d105      	bne.n	800600c <HAL_RCC_OscConfig+0x700>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006000:	4a14      	ldr	r2, [pc, #80]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8006002:	4b14      	ldr	r3, [pc, #80]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f023 0303 	bic.w	r3, r3, #3
 800600a:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800600c:	4a11      	ldr	r2, [pc, #68]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 800600e:	4b11      	ldr	r3, [pc, #68]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800601a:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800601c:	f7fd f9f8 	bl	8003410 <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006022:	e008      	b.n	8006036 <HAL_RCC_OscConfig+0x72a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006024:	f7fd f9f4 	bl	8003410 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x72a>
          {
            return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e009      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006036:	4b07      	ldr	r3, [pc, #28]	; (8006054 <HAL_RCC_OscConfig+0x748>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f0      	bne.n	8006024 <HAL_RCC_OscConfig+0x718>
 8006042:	e001      	b.n	8006048 <HAL_RCC_OscConfig+0x73c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e000      	b.n	800604a <HAL_RCC_OscConfig+0x73e>
    }
  }
  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3720      	adds	r7, #32
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	40021000 	.word	0x40021000

08006058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e0c6      	b.n	80061fa <HAL_RCC_ClockConfig+0x1a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800606c:	4b65      	ldr	r3, [pc, #404]	; (8006204 <HAL_RCC_ClockConfig+0x1ac>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0207 	and.w	r2, r3, #7
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	429a      	cmp	r2, r3
 8006078:	d210      	bcs.n	800609c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800607a:	4962      	ldr	r1, [pc, #392]	; (8006204 <HAL_RCC_ClockConfig+0x1ac>)
 800607c:	4b61      	ldr	r3, [pc, #388]	; (8006204 <HAL_RCC_ClockConfig+0x1ac>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f023 0207 	bic.w	r2, r3, #7
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	4313      	orrs	r3, r2
 8006088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800608a:	4b5e      	ldr	r3, [pc, #376]	; (8006204 <HAL_RCC_ClockConfig+0x1ac>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0207 	and.w	r2, r3, #7
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d001      	beq.n	800609c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e0ae      	b.n	80061fa <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d04c      	beq.n	8006142 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	d107      	bne.n	80060c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060b0:	4b55      	ldr	r3, [pc, #340]	; (8006208 <HAL_RCC_ClockConfig+0x1b0>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d121      	bne.n	8006100 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e09c      	b.n	80061fa <HAL_RCC_ClockConfig+0x1a2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d107      	bne.n	80060d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060c8:	4b4f      	ldr	r3, [pc, #316]	; (8006208 <HAL_RCC_ClockConfig+0x1b0>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d115      	bne.n	8006100 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e090      	b.n	80061fa <HAL_RCC_ClockConfig+0x1a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d107      	bne.n	80060f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80060e0:	4b49      	ldr	r3, [pc, #292]	; (8006208 <HAL_RCC_ClockConfig+0x1b0>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d109      	bne.n	8006100 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e084      	b.n	80061fa <HAL_RCC_ClockConfig+0x1a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060f0:	4b45      	ldr	r3, [pc, #276]	; (8006208 <HAL_RCC_ClockConfig+0x1b0>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e07c      	b.n	80061fa <HAL_RCC_ClockConfig+0x1a2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006100:	4941      	ldr	r1, [pc, #260]	; (8006208 <HAL_RCC_ClockConfig+0x1b0>)
 8006102:	4b41      	ldr	r3, [pc, #260]	; (8006208 <HAL_RCC_ClockConfig+0x1b0>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f023 0203 	bic.w	r2, r3, #3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	4313      	orrs	r3, r2
 8006110:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006112:	f7fd f97d 	bl	8003410 <HAL_GetTick>
 8006116:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006118:	e00a      	b.n	8006130 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800611a:	f7fd f979 	bl	8003410 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	f241 3288 	movw	r2, #5000	; 0x1388
 8006128:	4293      	cmp	r3, r2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e064      	b.n	80061fa <HAL_RCC_ClockConfig+0x1a2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006130:	4b35      	ldr	r3, [pc, #212]	; (8006208 <HAL_RCC_ClockConfig+0x1b0>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f003 020c 	and.w	r2, r3, #12
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	429a      	cmp	r2, r3
 8006140:	d1eb      	bne.n	800611a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d008      	beq.n	8006160 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800614e:	492e      	ldr	r1, [pc, #184]	; (8006208 <HAL_RCC_ClockConfig+0x1b0>)
 8006150:	4b2d      	ldr	r3, [pc, #180]	; (8006208 <HAL_RCC_ClockConfig+0x1b0>)
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	4313      	orrs	r3, r2
 800615e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006160:	4b28      	ldr	r3, [pc, #160]	; (8006204 <HAL_RCC_ClockConfig+0x1ac>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0207 	and.w	r2, r3, #7
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d910      	bls.n	8006190 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800616e:	4925      	ldr	r1, [pc, #148]	; (8006204 <HAL_RCC_ClockConfig+0x1ac>)
 8006170:	4b24      	ldr	r3, [pc, #144]	; (8006204 <HAL_RCC_ClockConfig+0x1ac>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f023 0207 	bic.w	r2, r3, #7
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	4313      	orrs	r3, r2
 800617c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800617e:	4b21      	ldr	r3, [pc, #132]	; (8006204 <HAL_RCC_ClockConfig+0x1ac>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0207 	and.w	r2, r3, #7
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d001      	beq.n	8006190 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e034      	b.n	80061fa <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b00      	cmp	r3, #0
 800619a:	d008      	beq.n	80061ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800619c:	491a      	ldr	r1, [pc, #104]	; (8006208 <HAL_RCC_ClockConfig+0x1b0>)
 800619e:	4b1a      	ldr	r3, [pc, #104]	; (8006208 <HAL_RCC_ClockConfig+0x1b0>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d009      	beq.n	80061ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061ba:	4913      	ldr	r1, [pc, #76]	; (8006208 <HAL_RCC_ClockConfig+0x1b0>)
 80061bc:	4b12      	ldr	r3, [pc, #72]	; (8006208 <HAL_RCC_ClockConfig+0x1b0>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	4313      	orrs	r3, r2
 80061cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061ce:	f000 f821 	bl	8006214 <HAL_RCC_GetSysClockFreq>
 80061d2:	4601      	mov	r1, r0
 80061d4:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <HAL_RCC_ClockConfig+0x1b0>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	091b      	lsrs	r3, r3, #4
 80061da:	f003 030f 	and.w	r3, r3, #15
 80061de:	4a0b      	ldr	r2, [pc, #44]	; (800620c <HAL_RCC_ClockConfig+0x1b4>)
 80061e0:	5cd3      	ldrb	r3, [r2, r3]
 80061e2:	f003 031f 	and.w	r3, r3, #31
 80061e6:	fa21 f303 	lsr.w	r3, r1, r3
 80061ea:	4a09      	ldr	r2, [pc, #36]	; (8006210 <HAL_RCC_ClockConfig+0x1b8>)
 80061ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80061ee:	2000      	movs	r0, #0
 80061f0:	f7fd f8dc 	bl	80033ac <HAL_InitTick>
 80061f4:	4603      	mov	r3, r0
 80061f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80061f8:	7afb      	ldrb	r3, [r7, #11]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	40022000 	.word	0x40022000
 8006208:	40021000 	.word	0x40021000
 800620c:	0800d6bc 	.word	0x0800d6bc
 8006210:	2000129c 	.word	0x2000129c

08006214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006214:	b480      	push	{r7}
 8006216:	b089      	sub	sp, #36	; 0x24
 8006218:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	61fb      	str	r3, [r7, #28]
 800621e:	2300      	movs	r3, #0
 8006220:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006222:	4b46      	ldr	r3, [pc, #280]	; (800633c <HAL_RCC_GetSysClockFreq+0x128>)
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 030c 	and.w	r3, r3, #12
 800622a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800622c:	4b43      	ldr	r3, [pc, #268]	; (800633c <HAL_RCC_GetSysClockFreq+0x128>)
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f003 0303 	and.w	r3, r3, #3
 8006234:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <HAL_RCC_GetSysClockFreq+0x34>
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	2b0c      	cmp	r3, #12
 8006240:	d121      	bne.n	8006286 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d11e      	bne.n	8006286 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006248:	4b3c      	ldr	r3, [pc, #240]	; (800633c <HAL_RCC_GetSysClockFreq+0x128>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0308 	and.w	r3, r3, #8
 8006250:	2b00      	cmp	r3, #0
 8006252:	d107      	bne.n	8006264 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006254:	4b39      	ldr	r3, [pc, #228]	; (800633c <HAL_RCC_GetSysClockFreq+0x128>)
 8006256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800625a:	0a1b      	lsrs	r3, r3, #8
 800625c:	f003 030f 	and.w	r3, r3, #15
 8006260:	61fb      	str	r3, [r7, #28]
 8006262:	e005      	b.n	8006270 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006264:	4b35      	ldr	r3, [pc, #212]	; (800633c <HAL_RCC_GetSysClockFreq+0x128>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	091b      	lsrs	r3, r3, #4
 800626a:	f003 030f 	and.w	r3, r3, #15
 800626e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006270:	4a33      	ldr	r2, [pc, #204]	; (8006340 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006278:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10d      	bne.n	800629c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006284:	e00a      	b.n	800629c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	2b04      	cmp	r3, #4
 800628a:	d102      	bne.n	8006292 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800628c:	4b2d      	ldr	r3, [pc, #180]	; (8006344 <HAL_RCC_GetSysClockFreq+0x130>)
 800628e:	61bb      	str	r3, [r7, #24]
 8006290:	e004      	b.n	800629c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	2b08      	cmp	r3, #8
 8006296:	d101      	bne.n	800629c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006298:	4b2b      	ldr	r3, [pc, #172]	; (8006348 <HAL_RCC_GetSysClockFreq+0x134>)
 800629a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	2b0c      	cmp	r3, #12
 80062a0:	d145      	bne.n	800632e <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062a2:	4b26      	ldr	r3, [pc, #152]	; (800633c <HAL_RCC_GetSysClockFreq+0x128>)
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062ac:	4b23      	ldr	r3, [pc, #140]	; (800633c <HAL_RCC_GetSysClockFreq+0x128>)
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	091b      	lsrs	r3, r3, #4
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	3301      	adds	r3, #1
 80062b8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d002      	beq.n	80062c6 <HAL_RCC_GetSysClockFreq+0xb2>
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d00d      	beq.n	80062e0 <HAL_RCC_GetSysClockFreq+0xcc>
 80062c4:	e019      	b.n	80062fa <HAL_RCC_GetSysClockFreq+0xe6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062c6:	4a1f      	ldr	r2, [pc, #124]	; (8006344 <HAL_RCC_GetSysClockFreq+0x130>)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ce:	4a1b      	ldr	r2, [pc, #108]	; (800633c <HAL_RCC_GetSysClockFreq+0x128>)
 80062d0:	68d2      	ldr	r2, [r2, #12]
 80062d2:	0a12      	lsrs	r2, r2, #8
 80062d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062d8:	fb02 f303 	mul.w	r3, r2, r3
 80062dc:	617b      	str	r3, [r7, #20]
      break;
 80062de:	e019      	b.n	8006314 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062e0:	4a19      	ldr	r2, [pc, #100]	; (8006348 <HAL_RCC_GetSysClockFreq+0x134>)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e8:	4a14      	ldr	r2, [pc, #80]	; (800633c <HAL_RCC_GetSysClockFreq+0x128>)
 80062ea:	68d2      	ldr	r2, [r2, #12]
 80062ec:	0a12      	lsrs	r2, r2, #8
 80062ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062f2:	fb02 f303 	mul.w	r3, r2, r3
 80062f6:	617b      	str	r3, [r7, #20]
      break;
 80062f8:	e00c      	b.n	8006314 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006302:	4a0e      	ldr	r2, [pc, #56]	; (800633c <HAL_RCC_GetSysClockFreq+0x128>)
 8006304:	68d2      	ldr	r2, [r2, #12]
 8006306:	0a12      	lsrs	r2, r2, #8
 8006308:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800630c:	fb02 f303 	mul.w	r3, r2, r3
 8006310:	617b      	str	r3, [r7, #20]
      break;
 8006312:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006314:	4b09      	ldr	r3, [pc, #36]	; (800633c <HAL_RCC_GetSysClockFreq+0x128>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	0e5b      	lsrs	r3, r3, #25
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	3301      	adds	r3, #1
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco/pllr;
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	fbb2 f3f3 	udiv	r3, r2, r3
 800632c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800632e:	69bb      	ldr	r3, [r7, #24]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3724      	adds	r7, #36	; 0x24
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	40021000 	.word	0x40021000
 8006340:	0800d6d4 	.word	0x0800d6d4
 8006344:	00f42400 	.word	0x00f42400
 8006348:	007a1200 	.word	0x007a1200

0800634c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006350:	4b03      	ldr	r3, [pc, #12]	; (8006360 <HAL_RCC_GetHCLKFreq+0x14>)
 8006352:	681b      	ldr	r3, [r3, #0]
}
 8006354:	4618      	mov	r0, r3
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	2000129c 	.word	0x2000129c

08006364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006368:	f7ff fff0 	bl	800634c <HAL_RCC_GetHCLKFreq>
 800636c:	4601      	mov	r1, r0
 800636e:	4b06      	ldr	r3, [pc, #24]	; (8006388 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	0a1b      	lsrs	r3, r3, #8
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	4a04      	ldr	r2, [pc, #16]	; (800638c <HAL_RCC_GetPCLK1Freq+0x28>)
 800637a:	5cd3      	ldrb	r3, [r2, r3]
 800637c:	f003 031f 	and.w	r3, r3, #31
 8006380:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006384:	4618      	mov	r0, r3
 8006386:	bd80      	pop	{r7, pc}
 8006388:	40021000 	.word	0x40021000
 800638c:	0800d6cc 	.word	0x0800d6cc

08006390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006394:	f7ff ffda 	bl	800634c <HAL_RCC_GetHCLKFreq>
 8006398:	4601      	mov	r1, r0
 800639a:	4b06      	ldr	r3, [pc, #24]	; (80063b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	0adb      	lsrs	r3, r3, #11
 80063a0:	f003 0307 	and.w	r3, r3, #7
 80063a4:	4a04      	ldr	r2, [pc, #16]	; (80063b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80063a6:	5cd3      	ldrb	r3, [r2, r3]
 80063a8:	f003 031f 	and.w	r3, r3, #31
 80063ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40021000 	.word	0x40021000
 80063b8:	0800d6cc 	.word	0x0800d6cc

080063bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80063c4:	2300      	movs	r3, #0
 80063c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80063c8:	4b2a      	ldr	r3, [pc, #168]	; (8006474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80063d4:	f7ff fa26 	bl	8005824 <HAL_PWREx_GetVoltageRange>
 80063d8:	6178      	str	r0, [r7, #20]
 80063da:	e014      	b.n	8006406 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80063dc:	4a25      	ldr	r2, [pc, #148]	; (8006474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063de:	4b25      	ldr	r3, [pc, #148]	; (8006474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063e6:	6593      	str	r3, [r2, #88]	; 0x58
 80063e8:	4b22      	ldr	r3, [pc, #136]	; (8006474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80063f4:	f7ff fa16 	bl	8005824 <HAL_PWREx_GetVoltageRange>
 80063f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80063fa:	4a1e      	ldr	r2, [pc, #120]	; (8006474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063fc:	4b1d      	ldr	r3, [pc, #116]	; (8006474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006404:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800640c:	d10b      	bne.n	8006426 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b80      	cmp	r3, #128	; 0x80
 8006412:	d919      	bls.n	8006448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2ba0      	cmp	r3, #160	; 0xa0
 8006418:	d902      	bls.n	8006420 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800641a:	2302      	movs	r3, #2
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	e013      	b.n	8006448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006420:	2301      	movs	r3, #1
 8006422:	613b      	str	r3, [r7, #16]
 8006424:	e010      	b.n	8006448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b80      	cmp	r3, #128	; 0x80
 800642a:	d902      	bls.n	8006432 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800642c:	2303      	movs	r3, #3
 800642e:	613b      	str	r3, [r7, #16]
 8006430:	e00a      	b.n	8006448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b80      	cmp	r3, #128	; 0x80
 8006436:	d102      	bne.n	800643e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006438:	2302      	movs	r3, #2
 800643a:	613b      	str	r3, [r7, #16]
 800643c:	e004      	b.n	8006448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b70      	cmp	r3, #112	; 0x70
 8006442:	d101      	bne.n	8006448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006444:	2301      	movs	r3, #1
 8006446:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006448:	490b      	ldr	r1, [pc, #44]	; (8006478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800644a:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f023 0207 	bic.w	r2, r3, #7
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	4313      	orrs	r3, r2
 8006456:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006458:	4b07      	ldr	r3, [pc, #28]	; (8006478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0207 	and.w	r2, r3, #7
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	429a      	cmp	r2, r3
 8006464:	d001      	beq.n	800646a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e000      	b.n	800646c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	40021000 	.word	0x40021000
 8006478:	40022000 	.word	0x40022000

0800647c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006484:	2300      	movs	r3, #0
 8006486:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006488:	2300      	movs	r3, #0
 800648a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006494:	2b00      	cmp	r3, #0
 8006496:	d02f      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064a0:	d005      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x32>
 80064a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80064a6:	d015      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d007      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80064ac:	e00f      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80064ae:	4a5d      	ldr	r2, [pc, #372]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80064b0:	4b5c      	ldr	r3, [pc, #368]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064ba:	e00c      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3304      	adds	r3, #4
 80064c0:	2100      	movs	r1, #0
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fa44 	bl	8006950 <RCCEx_PLLSAI1_Config>
 80064c8:	4603      	mov	r3, r0
 80064ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064cc:	e003      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	74fb      	strb	r3, [r7, #19]
      break;
 80064d2:	e000      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80064d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064d6:	7cfb      	ldrb	r3, [r7, #19]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10b      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064dc:	4951      	ldr	r1, [pc, #324]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80064de:	4b51      	ldr	r3, [pc, #324]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80064e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ec:	4313      	orrs	r3, r2
 80064ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80064f2:	e001      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f4:	7cfb      	ldrb	r3, [r7, #19]
 80064f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 809e 	beq.w	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006506:	2300      	movs	r3, #0
 8006508:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800650a:	4b46      	ldr	r3, [pc, #280]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800650c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800650e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8006516:	2301      	movs	r3, #1
 8006518:	e000      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800651a:	2300      	movs	r3, #0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00d      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006520:	4a40      	ldr	r2, [pc, #256]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006522:	4b40      	ldr	r3, [pc, #256]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800652a:	6593      	str	r3, [r2, #88]	; 0x58
 800652c:	4b3d      	ldr	r3, [pc, #244]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800652e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006534:	60bb      	str	r3, [r7, #8]
 8006536:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006538:	2301      	movs	r3, #1
 800653a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800653c:	4a3a      	ldr	r2, [pc, #232]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800653e:	4b3a      	ldr	r3, [pc, #232]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006546:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006548:	f7fc ff62 	bl	8003410 <HAL_GetTick>
 800654c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800654e:	e009      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006550:	f7fc ff5e 	bl	8003410 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d902      	bls.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	74fb      	strb	r3, [r7, #19]
        break;
 8006562:	e005      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006564:	4b30      	ldr	r3, [pc, #192]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0ef      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8006570:	7cfb      	ldrb	r3, [r7, #19]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d15a      	bne.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006576:	4b2b      	ldr	r3, [pc, #172]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006580:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01e      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	429a      	cmp	r2, r3
 8006590:	d019      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006592:	4b24      	ldr	r3, [pc, #144]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800659c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800659e:	4a21      	ldr	r2, [pc, #132]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80065a0:	4b20      	ldr	r3, [pc, #128]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80065a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065ae:	4a1d      	ldr	r2, [pc, #116]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80065b0:	4b1c      	ldr	r3, [pc, #112]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80065b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065be:	4a19      	ldr	r2, [pc, #100]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d016      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d0:	f7fc ff1e 	bl	8003410 <HAL_GetTick>
 80065d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065d6:	e00b      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065d8:	f7fc ff1a 	bl	8003410 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d902      	bls.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	74fb      	strb	r3, [r7, #19]
            break;
 80065ee:	e006      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065f0:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80065f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d0ec      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80065fe:	7cfb      	ldrb	r3, [r7, #19]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10b      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006604:	4907      	ldr	r1, [pc, #28]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006606:	4b07      	ldr	r3, [pc, #28]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006614:	4313      	orrs	r3, r2
 8006616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800661a:	e009      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800661c:	7cfb      	ldrb	r3, [r7, #19]
 800661e:	74bb      	strb	r3, [r7, #18]
 8006620:	e006      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006622:	bf00      	nop
 8006624:	40021000 	.word	0x40021000
 8006628:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662c:	7cfb      	ldrb	r3, [r7, #19]
 800662e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006630:	7c7b      	ldrb	r3, [r7, #17]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d105      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006636:	4a9e      	ldr	r2, [pc, #632]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006638:	4b9d      	ldr	r3, [pc, #628]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800663a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006640:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00a      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800664e:	4998      	ldr	r1, [pc, #608]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006650:	4b97      	ldr	r3, [pc, #604]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006656:	f023 0203 	bic.w	r2, r3, #3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	4313      	orrs	r3, r2
 8006660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00a      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006670:	498f      	ldr	r1, [pc, #572]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006672:	4b8f      	ldr	r3, [pc, #572]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006678:	f023 020c 	bic.w	r2, r3, #12
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006680:	4313      	orrs	r3, r2
 8006682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0304 	and.w	r3, r3, #4
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006692:	4987      	ldr	r1, [pc, #540]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006694:	4b86      	ldr	r3, [pc, #536]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0308 	and.w	r3, r3, #8
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00a      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066b4:	497e      	ldr	r1, [pc, #504]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80066b6:	4b7e      	ldr	r3, [pc, #504]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80066b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c4:	4313      	orrs	r3, r2
 80066c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0320 	and.w	r3, r3, #32
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00a      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066d6:	4976      	ldr	r1, [pc, #472]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80066d8:	4b75      	ldr	r3, [pc, #468]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80066da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00a      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066f8:	496d      	ldr	r1, [pc, #436]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80066fa:	4b6d      	ldr	r3, [pc, #436]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80066fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006700:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006708:	4313      	orrs	r3, r2
 800670a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800671a:	4965      	ldr	r1, [pc, #404]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800671c:	4b64      	ldr	r3, [pc, #400]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800671e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006722:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800672a:	4313      	orrs	r3, r2
 800672c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00a      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800673c:	495c      	ldr	r1, [pc, #368]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800673e:	4b5c      	ldr	r3, [pc, #368]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006744:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674c:	4313      	orrs	r3, r2
 800674e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00a      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800675e:	4954      	ldr	r1, [pc, #336]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006760:	4b53      	ldr	r3, [pc, #332]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006766:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00a      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006780:	494b      	ldr	r1, [pc, #300]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006782:	4b4b      	ldr	r3, [pc, #300]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006788:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006790:	4313      	orrs	r3, r2
 8006792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80067a2:	4943      	ldr	r1, [pc, #268]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80067a4:	4b42      	ldr	r3, [pc, #264]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80067a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067aa:	f023 0203 	bic.w	r2, r3, #3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	4313      	orrs	r3, r2
 80067b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d028      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067c4:	493a      	ldr	r1, [pc, #232]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80067c6:	4b3a      	ldr	r3, [pc, #232]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80067c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d4:	4313      	orrs	r3, r2
 80067d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067e2:	d106      	bne.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067e4:	4a32      	ldr	r2, [pc, #200]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80067e6:	4b32      	ldr	r3, [pc, #200]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067ee:	60d3      	str	r3, [r2, #12]
 80067f0:	e011      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067fa:	d10c      	bne.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	3304      	adds	r3, #4
 8006800:	2101      	movs	r1, #1
 8006802:	4618      	mov	r0, r3
 8006804:	f000 f8a4 	bl	8006950 <RCCEx_PLLSAI1_Config>
 8006808:	4603      	mov	r3, r0
 800680a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800680c:	7cfb      	ldrb	r3, [r7, #19]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8006812:	7cfb      	ldrb	r3, [r7, #19]
 8006814:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d028      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006822:	4923      	ldr	r1, [pc, #140]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006824:	4b22      	ldr	r3, [pc, #136]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006832:	4313      	orrs	r3, r2
 8006834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006840:	d106      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006842:	4a1b      	ldr	r2, [pc, #108]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006844:	4b1a      	ldr	r3, [pc, #104]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800684c:	60d3      	str	r3, [r2, #12]
 800684e:	e011      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006854:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006858:	d10c      	bne.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3304      	adds	r3, #4
 800685e:	2101      	movs	r1, #1
 8006860:	4618      	mov	r0, r3
 8006862:	f000 f875 	bl	8006950 <RCCEx_PLLSAI1_Config>
 8006866:	4603      	mov	r3, r0
 8006868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800686a:	7cfb      	ldrb	r3, [r7, #19]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8006870:	7cfb      	ldrb	r3, [r7, #19]
 8006872:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d02b      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006880:	490b      	ldr	r1, [pc, #44]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006882:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006888:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006890:	4313      	orrs	r3, r2
 8006892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800689a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800689e:	d109      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068a0:	4a03      	ldr	r2, [pc, #12]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80068a2:	4b03      	ldr	r3, [pc, #12]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068aa:	60d3      	str	r3, [r2, #12]
 80068ac:	e014      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 80068ae:	bf00      	nop
 80068b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068bc:	d10c      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	3304      	adds	r3, #4
 80068c2:	2101      	movs	r1, #1
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 f843 	bl	8006950 <RCCEx_PLLSAI1_Config>
 80068ca:	4603      	mov	r3, r0
 80068cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068ce:	7cfb      	ldrb	r3, [r7, #19]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 80068d4:	7cfb      	ldrb	r3, [r7, #19]
 80068d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01c      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068e4:	4919      	ldr	r1, [pc, #100]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80068e6:	4b19      	ldr	r3, [pc, #100]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80068e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f4:	4313      	orrs	r3, r2
 80068f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006902:	d10c      	bne.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	3304      	adds	r3, #4
 8006908:	2102      	movs	r1, #2
 800690a:	4618      	mov	r0, r3
 800690c:	f000 f820 	bl	8006950 <RCCEx_PLLSAI1_Config>
 8006910:	4603      	mov	r3, r0
 8006912:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006914:	7cfb      	ldrb	r3, [r7, #19]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 800691a:	7cfb      	ldrb	r3, [r7, #19]
 800691c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800692a:	4908      	ldr	r1, [pc, #32]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800692c:	4b07      	ldr	r3, [pc, #28]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800692e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006932:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800693a:	4313      	orrs	r3, r2
 800693c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006940:	7cbb      	ldrb	r3, [r7, #18]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	40021000 	.word	0x40021000

08006950 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800695e:	4b73      	ldr	r3, [pc, #460]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f003 0303 	and.w	r3, r3, #3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d018      	beq.n	800699c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800696a:	4b70      	ldr	r3, [pc, #448]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f003 0203 	and.w	r2, r3, #3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	429a      	cmp	r2, r3
 8006978:	d10d      	bne.n	8006996 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
       ||
 800697e:	2b00      	cmp	r3, #0
 8006980:	d009      	beq.n	8006996 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006982:	4b6a      	ldr	r3, [pc, #424]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	091b      	lsrs	r3, r3, #4
 8006988:	f003 0307 	and.w	r3, r3, #7
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
       ||
 8006992:	429a      	cmp	r2, r3
 8006994:	d044      	beq.n	8006a20 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	73fb      	strb	r3, [r7, #15]
 800699a:	e041      	b.n	8006a20 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d00c      	beq.n	80069be <RCCEx_PLLSAI1_Config+0x6e>
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	d013      	beq.n	80069d0 <RCCEx_PLLSAI1_Config+0x80>
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d120      	bne.n	80069ee <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80069ac:	4b5f      	ldr	r3, [pc, #380]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d11d      	bne.n	80069f4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069bc:	e01a      	b.n	80069f4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80069be:	4b5b      	ldr	r3, [pc, #364]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d116      	bne.n	80069f8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069ce:	e013      	b.n	80069f8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80069d0:	4b56      	ldr	r3, [pc, #344]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10f      	bne.n	80069fc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80069dc:	4b53      	ldr	r3, [pc, #332]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d109      	bne.n	80069fc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069ec:	e006      	b.n	80069fc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	73fb      	strb	r3, [r7, #15]
      break;
 80069f2:	e004      	b.n	80069fe <RCCEx_PLLSAI1_Config+0xae>
      break;
 80069f4:	bf00      	nop
 80069f6:	e002      	b.n	80069fe <RCCEx_PLLSAI1_Config+0xae>
      break;
 80069f8:	bf00      	nop
 80069fa:	e000      	b.n	80069fe <RCCEx_PLLSAI1_Config+0xae>
      break;
 80069fc:	bf00      	nop
    }

    if(status == HAL_OK)
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10d      	bne.n	8006a20 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a04:	4849      	ldr	r0, [pc, #292]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a06:	4b49      	ldr	r3, [pc, #292]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6819      	ldr	r1, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	011b      	lsls	r3, r3, #4
 8006a1a:	430b      	orrs	r3, r1
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d17c      	bne.n	8006b20 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006a26:	4a41      	ldr	r2, [pc, #260]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a28:	4b40      	ldr	r3, [pc, #256]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a32:	f7fc fced 	bl	8003410 <HAL_GetTick>
 8006a36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a38:	e009      	b.n	8006a4e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a3a:	f7fc fce9 	bl	8003410 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d902      	bls.n	8006a4e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	73fb      	strb	r3, [r7, #15]
        break;
 8006a4c:	e005      	b.n	8006a5a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a4e:	4b37      	ldr	r3, [pc, #220]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1ef      	bne.n	8006a3a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d15f      	bne.n	8006b20 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d110      	bne.n	8006a88 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a66:	4831      	ldr	r0, [pc, #196]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a68:	4b30      	ldr	r3, [pc, #192]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006a70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	6892      	ldr	r2, [r2, #8]
 8006a78:	0211      	lsls	r1, r2, #8
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	68d2      	ldr	r2, [r2, #12]
 8006a7e:	06d2      	lsls	r2, r2, #27
 8006a80:	430a      	orrs	r2, r1
 8006a82:	4313      	orrs	r3, r2
 8006a84:	6103      	str	r3, [r0, #16]
 8006a86:	e027      	b.n	8006ad8 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d112      	bne.n	8006ab4 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a8e:	4827      	ldr	r0, [pc, #156]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a90:	4b26      	ldr	r3, [pc, #152]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006a98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	6892      	ldr	r2, [r2, #8]
 8006aa0:	0211      	lsls	r1, r2, #8
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6912      	ldr	r2, [r2, #16]
 8006aa6:	0852      	lsrs	r2, r2, #1
 8006aa8:	3a01      	subs	r2, #1
 8006aaa:	0552      	lsls	r2, r2, #21
 8006aac:	430a      	orrs	r2, r1
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	6103      	str	r3, [r0, #16]
 8006ab2:	e011      	b.n	8006ad8 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ab4:	481d      	ldr	r0, [pc, #116]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ab6:	4b1d      	ldr	r3, [pc, #116]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006abe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	6892      	ldr	r2, [r2, #8]
 8006ac6:	0211      	lsls	r1, r2, #8
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	6952      	ldr	r2, [r2, #20]
 8006acc:	0852      	lsrs	r2, r2, #1
 8006ace:	3a01      	subs	r2, #1
 8006ad0:	0652      	lsls	r2, r2, #25
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006ad8:	4a14      	ldr	r2, [pc, #80]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ada:	4b14      	ldr	r3, [pc, #80]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ae2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ae4:	f7fc fc94 	bl	8003410 <HAL_GetTick>
 8006ae8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006aea:	e009      	b.n	8006b00 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006aec:	f7fc fc90 	bl	8003410 <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d902      	bls.n	8006b00 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	73fb      	strb	r3, [r7, #15]
          break;
 8006afe:	e005      	b.n	8006b0c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b00:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d0ef      	beq.n	8006aec <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d106      	bne.n	8006b20 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006b12:	4906      	ldr	r1, [pc, #24]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b14:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b16:	691a      	ldr	r2, [r3, #16]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	40021000 	.word	0x40021000

08006b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e01d      	b.n	8006b7e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d106      	bne.n	8006b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f005 f870 	bl	800bc3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f000 fa18 	bl	8006fa4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e01d      	b.n	8006bd4 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d106      	bne.n	8006bb2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f004 ffc3 	bl	800bb38 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	f000 f9ed 	bl	8006fa4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d122      	bne.n	8006c38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d11b      	bne.n	8006c38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f06f 0202 	mvn.w	r2, #2
 8006c08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	f003 0303 	and.w	r3, r3, #3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f9a1 	bl	8006f66 <HAL_TIM_IC_CaptureCallback>
 8006c24:	e005      	b.n	8006c32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f993 	bl	8006f52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f9a4 	bl	8006f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	f003 0304 	and.w	r3, r3, #4
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d122      	bne.n	8006c8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d11b      	bne.n	8006c8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f06f 0204 	mvn.w	r2, #4
 8006c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2202      	movs	r2, #2
 8006c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f977 	bl	8006f66 <HAL_TIM_IC_CaptureCallback>
 8006c78:	e005      	b.n	8006c86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f969 	bl	8006f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f97a 	bl	8006f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	f003 0308 	and.w	r3, r3, #8
 8006c96:	2b08      	cmp	r3, #8
 8006c98:	d122      	bne.n	8006ce0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	f003 0308 	and.w	r3, r3, #8
 8006ca4:	2b08      	cmp	r3, #8
 8006ca6:	d11b      	bne.n	8006ce0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f06f 0208 	mvn.w	r2, #8
 8006cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2204      	movs	r2, #4
 8006cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	f003 0303 	and.w	r3, r3, #3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f94d 	bl	8006f66 <HAL_TIM_IC_CaptureCallback>
 8006ccc:	e005      	b.n	8006cda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f93f 	bl	8006f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f950 	bl	8006f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f003 0310 	and.w	r3, r3, #16
 8006cea:	2b10      	cmp	r3, #16
 8006cec:	d122      	bne.n	8006d34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f003 0310 	and.w	r3, r3, #16
 8006cf8:	2b10      	cmp	r3, #16
 8006cfa:	d11b      	bne.n	8006d34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f06f 0210 	mvn.w	r2, #16
 8006d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2208      	movs	r2, #8
 8006d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f923 	bl	8006f66 <HAL_TIM_IC_CaptureCallback>
 8006d20:	e005      	b.n	8006d2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f915 	bl	8006f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f926 	bl	8006f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d10e      	bne.n	8006d60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d107      	bne.n	8006d60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f06f 0201 	mvn.w	r2, #1
 8006d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7fc fac4 	bl	80032e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d6a:	2b80      	cmp	r3, #128	; 0x80
 8006d6c:	d10e      	bne.n	8006d8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d78:	2b80      	cmp	r3, #128	; 0x80
 8006d7a:	d107      	bne.n	8006d8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 faec 	bl	8007364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d9a:	d10e      	bne.n	8006dba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da6:	2b80      	cmp	r3, #128	; 0x80
 8006da8:	d107      	bne.n	8006dba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fadf 	bl	8007378 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc4:	2b40      	cmp	r3, #64	; 0x40
 8006dc6:	d10e      	bne.n	8006de6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd2:	2b40      	cmp	r3, #64	; 0x40
 8006dd4:	d107      	bne.n	8006de6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f8d4 	bl	8006f8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	f003 0320 	and.w	r3, r3, #32
 8006df0:	2b20      	cmp	r3, #32
 8006df2:	d10e      	bne.n	8006e12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b20      	cmp	r3, #32
 8006e00:	d107      	bne.n	8006e12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f06f 0220 	mvn.w	r2, #32
 8006e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fa9f 	bl	8007350 <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e12:	bf00      	nop
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d101      	bne.n	8006e34 <HAL_TIM_IC_ConfigChannel+0x1a>
 8006e30:	2302      	movs	r3, #2
 8006e32:	e08a      	b.n	8006f4a <HAL_TIM_IC_ConfigChannel+0x130>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d11b      	bne.n	8006e82 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	6819      	ldr	r1, [r3, #0]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	f000 f911 	bl	8007080 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	6812      	ldr	r2, [r2, #0]
 8006e66:	6992      	ldr	r2, [r2, #24]
 8006e68:	f022 020c 	bic.w	r2, r2, #12
 8006e6c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	6812      	ldr	r2, [r2, #0]
 8006e76:	6991      	ldr	r1, [r2, #24]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	6892      	ldr	r2, [r2, #8]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	619a      	str	r2, [r3, #24]
 8006e80:	e05a      	b.n	8006f38 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d11c      	bne.n	8006ec2 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6818      	ldr	r0, [r3, #0]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	6819      	ldr	r1, [r3, #0]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f000 f94e 	bl	8007138 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	6812      	ldr	r2, [r2, #0]
 8006ea4:	6992      	ldr	r2, [r2, #24]
 8006ea6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006eaa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	6812      	ldr	r2, [r2, #0]
 8006eb4:	6991      	ldr	r1, [r2, #24]
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	6892      	ldr	r2, [r2, #8]
 8006eba:	0212      	lsls	r2, r2, #8
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	619a      	str	r2, [r3, #24]
 8006ec0:	e03a      	b.n	8006f38 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d11b      	bne.n	8006f00 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6818      	ldr	r0, [r3, #0]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	6819      	ldr	r1, [r3, #0]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f000 f96b 	bl	80071b2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	6812      	ldr	r2, [r2, #0]
 8006ee4:	69d2      	ldr	r2, [r2, #28]
 8006ee6:	f022 020c 	bic.w	r2, r2, #12
 8006eea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	6812      	ldr	r2, [r2, #0]
 8006ef4:	69d1      	ldr	r1, [r2, #28]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	6892      	ldr	r2, [r2, #8]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	61da      	str	r2, [r3, #28]
 8006efe:	e01b      	b.n	8006f38 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6818      	ldr	r0, [r3, #0]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	6819      	ldr	r1, [r3, #0]
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	f000 f98b 	bl	800722a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	6812      	ldr	r2, [r2, #0]
 8006f1c:	69d2      	ldr	r2, [r2, #28]
 8006f1e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006f22:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	6812      	ldr	r2, [r2, #0]
 8006f2c:	69d1      	ldr	r1, [r2, #28]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	6892      	ldr	r2, [r2, #8]
 8006f32:	0212      	lsls	r2, r2, #8
 8006f34:	430a      	orrs	r2, r1
 8006f36:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f6e:	bf00      	nop
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
	...

08006fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a2e      	ldr	r2, [pc, #184]	; (8007070 <TIM_Base_SetConfig+0xcc>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d007      	beq.n	8006fcc <TIM_Base_SetConfig+0x28>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc2:	d003      	beq.n	8006fcc <TIM_Base_SetConfig+0x28>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a2b      	ldr	r2, [pc, #172]	; (8007074 <TIM_Base_SetConfig+0xd0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d108      	bne.n	8006fde <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a23      	ldr	r2, [pc, #140]	; (8007070 <TIM_Base_SetConfig+0xcc>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d00f      	beq.n	8007006 <TIM_Base_SetConfig+0x62>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fec:	d00b      	beq.n	8007006 <TIM_Base_SetConfig+0x62>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a20      	ldr	r2, [pc, #128]	; (8007074 <TIM_Base_SetConfig+0xd0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d007      	beq.n	8007006 <TIM_Base_SetConfig+0x62>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a1f      	ldr	r2, [pc, #124]	; (8007078 <TIM_Base_SetConfig+0xd4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d003      	beq.n	8007006 <TIM_Base_SetConfig+0x62>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a1e      	ldr	r2, [pc, #120]	; (800707c <TIM_Base_SetConfig+0xd8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d108      	bne.n	8007018 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800700c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	4313      	orrs	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	4313      	orrs	r3, r2
 8007024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a0c      	ldr	r2, [pc, #48]	; (8007070 <TIM_Base_SetConfig+0xcc>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d007      	beq.n	8007054 <TIM_Base_SetConfig+0xb0>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a0c      	ldr	r2, [pc, #48]	; (8007078 <TIM_Base_SetConfig+0xd4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d003      	beq.n	8007054 <TIM_Base_SetConfig+0xb0>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a0b      	ldr	r2, [pc, #44]	; (800707c <TIM_Base_SetConfig+0xd8>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d103      	bne.n	800705c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	691a      	ldr	r2, [r3, #16]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	615a      	str	r2, [r3, #20]
}
 8007062:	bf00      	nop
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	40012c00 	.word	0x40012c00
 8007074:	40000400 	.word	0x40000400
 8007078:	40014000 	.word	0x40014000
 800707c:	40014400 	.word	0x40014400

08007080 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f023 0201 	bic.w	r2, r3, #1
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	4a20      	ldr	r2, [pc, #128]	; (800712c <TIM_TI1_SetConfig+0xac>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d00b      	beq.n	80070c6 <TIM_TI1_SetConfig+0x46>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b4:	d007      	beq.n	80070c6 <TIM_TI1_SetConfig+0x46>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	4a1d      	ldr	r2, [pc, #116]	; (8007130 <TIM_TI1_SetConfig+0xb0>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d003      	beq.n	80070c6 <TIM_TI1_SetConfig+0x46>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4a1c      	ldr	r2, [pc, #112]	; (8007134 <TIM_TI1_SetConfig+0xb4>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d101      	bne.n	80070ca <TIM_TI1_SetConfig+0x4a>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e000      	b.n	80070cc <TIM_TI1_SetConfig+0x4c>
 80070ca:	2300      	movs	r3, #0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d008      	beq.n	80070e2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	f023 0303 	bic.w	r3, r3, #3
 80070d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4313      	orrs	r3, r2
 80070de:	617b      	str	r3, [r7, #20]
 80070e0:	e003      	b.n	80070ea <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f043 0301 	orr.w	r3, r3, #1
 80070e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	011b      	lsls	r3, r3, #4
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	f023 030a 	bic.w	r3, r3, #10
 8007104:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	f003 030a 	and.w	r3, r3, #10
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	4313      	orrs	r3, r2
 8007110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	621a      	str	r2, [r3, #32]
}
 800711e:	bf00      	nop
 8007120:	371c      	adds	r7, #28
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	40012c00 	.word	0x40012c00
 8007130:	40000400 	.word	0x40000400
 8007134:	40014000 	.word	0x40014000

08007138 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
 8007144:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	f023 0210 	bic.w	r2, r3, #16
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6a1b      	ldr	r3, [r3, #32]
 800715c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007164:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	021b      	lsls	r3, r3, #8
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007176:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	031b      	lsls	r3, r3, #12
 800717c:	b29b      	uxth	r3, r3
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	4313      	orrs	r3, r2
 8007182:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800718a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	011b      	lsls	r3, r3, #4
 8007190:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4313      	orrs	r3, r2
 8007198:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	621a      	str	r2, [r3, #32]
}
 80071a6:	bf00      	nop
 80071a8:	371c      	adds	r7, #28
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b087      	sub	sp, #28
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	60f8      	str	r0, [r7, #12]
 80071ba:	60b9      	str	r1, [r7, #8]
 80071bc:	607a      	str	r2, [r7, #4]
 80071be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f023 0303 	bic.w	r3, r3, #3
 80071de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	011b      	lsls	r3, r3, #4
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007202:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	021b      	lsls	r3, r3, #8
 8007208:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	4313      	orrs	r3, r2
 8007210:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	621a      	str	r2, [r3, #32]
}
 800721e:	bf00      	nop
 8007220:	371c      	adds	r7, #28
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800722a:	b480      	push	{r7}
 800722c:	b087      	sub	sp, #28
 800722e:	af00      	add	r7, sp, #0
 8007230:	60f8      	str	r0, [r7, #12]
 8007232:	60b9      	str	r1, [r7, #8]
 8007234:	607a      	str	r2, [r7, #4]
 8007236:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007256:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	021b      	lsls	r3, r3, #8
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	4313      	orrs	r3, r2
 8007260:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007268:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	031b      	lsls	r3, r3, #12
 800726e:	b29b      	uxth	r3, r3
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	4313      	orrs	r3, r2
 8007274:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800727c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	031b      	lsls	r3, r3, #12
 8007282:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	4313      	orrs	r3, r2
 800728a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	621a      	str	r2, [r3, #32]
}
 8007298:	bf00      	nop
 800729a:	371c      	adds	r7, #28
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d101      	bne.n	80072bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072b8:	2302      	movs	r3, #2
 80072ba:	e040      	b.n	800733e <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a1a      	ldr	r2, [pc, #104]	; (800734c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d108      	bne.n	80072f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007310:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	4313      	orrs	r3, r2
 800731a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	40012c00 	.word	0x40012c00

08007350 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e043      	b.n	8007426 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d106      	bne.n	80073b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f004 fd88 	bl	800bec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2224      	movs	r2, #36	; 0x24
 80073bc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	6812      	ldr	r2, [r2, #0]
 80073c8:	6812      	ldr	r2, [r2, #0]
 80073ca:	f022 0201 	bic.w	r2, r2, #1
 80073ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f82d 	bl	8007430 <UART_SetConfig>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d101      	bne.n	80073e0 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e022      	b.n	8007426 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fb31 	bl	8007a50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	6812      	ldr	r2, [r2, #0]
 80073f6:	6852      	ldr	r2, [r2, #4]
 80073f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	6812      	ldr	r2, [r2, #0]
 8007406:	6892      	ldr	r2, [r2, #8]
 8007408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800740c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	6812      	ldr	r2, [r2, #0]
 8007416:	6812      	ldr	r2, [r2, #0]
 8007418:	f042 0201 	orr.w	r2, r2, #1
 800741c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fbb8 	bl	8007b94 <UART_CheckIdleState>
 8007424:	4603      	mov	r3, r0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
	...

08007430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007430:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007434:	b088      	sub	sp, #32
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800743a:	2300      	movs	r3, #0
 800743c:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800743e:	2310      	movs	r3, #16
 8007440:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 8007442:	2300      	movs	r3, #0
 8007444:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 8007446:	2300      	movs	r3, #0
 8007448:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800744e:	2300      	movs	r3, #0
 8007450:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689a      	ldr	r2, [r3, #8]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	431a      	orrs	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	4313      	orrs	r3, r2
 8007468:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6819      	ldr	r1, [r3, #0]
 8007474:	4bad      	ldr	r3, [pc, #692]	; (800772c <UART_SetConfig+0x2fc>)
 8007476:	400b      	ands	r3, r1
 8007478:	69f9      	ldr	r1, [r7, #28]
 800747a:	430b      	orrs	r3, r1
 800747c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6812      	ldr	r2, [r2, #0]
 8007486:	6852      	ldr	r2, [r2, #4]
 8007488:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	68d2      	ldr	r2, [r2, #12]
 8007490:	430a      	orrs	r2, r1
 8007492:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4aa4      	ldr	r2, [pc, #656]	; (8007730 <UART_SetConfig+0x300>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d004      	beq.n	80074ae <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	69fa      	ldr	r2, [r7, #28]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6812      	ldr	r2, [r2, #0]
 80074b6:	6892      	ldr	r2, [r2, #8]
 80074b8:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80074bc:	69fa      	ldr	r2, [r7, #28]
 80074be:	430a      	orrs	r2, r1
 80074c0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a9b      	ldr	r2, [pc, #620]	; (8007734 <UART_SetConfig+0x304>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d121      	bne.n	8007510 <UART_SetConfig+0xe0>
 80074cc:	4b9a      	ldr	r3, [pc, #616]	; (8007738 <UART_SetConfig+0x308>)
 80074ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d2:	f003 0303 	and.w	r3, r3, #3
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d816      	bhi.n	8007508 <UART_SetConfig+0xd8>
 80074da:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <UART_SetConfig+0xb0>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	080074f1 	.word	0x080074f1
 80074e4:	080074fd 	.word	0x080074fd
 80074e8:	080074f7 	.word	0x080074f7
 80074ec:	08007503 	.word	0x08007503
 80074f0:	2301      	movs	r3, #1
 80074f2:	76fb      	strb	r3, [r7, #27]
 80074f4:	e0ba      	b.n	800766c <UART_SetConfig+0x23c>
 80074f6:	2302      	movs	r3, #2
 80074f8:	76fb      	strb	r3, [r7, #27]
 80074fa:	e0b7      	b.n	800766c <UART_SetConfig+0x23c>
 80074fc:	2304      	movs	r3, #4
 80074fe:	76fb      	strb	r3, [r7, #27]
 8007500:	e0b4      	b.n	800766c <UART_SetConfig+0x23c>
 8007502:	2308      	movs	r3, #8
 8007504:	76fb      	strb	r3, [r7, #27]
 8007506:	e0b1      	b.n	800766c <UART_SetConfig+0x23c>
 8007508:	2310      	movs	r3, #16
 800750a:	76fb      	strb	r3, [r7, #27]
 800750c:	bf00      	nop
 800750e:	e0ad      	b.n	800766c <UART_SetConfig+0x23c>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a89      	ldr	r2, [pc, #548]	; (800773c <UART_SetConfig+0x30c>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d134      	bne.n	8007584 <UART_SetConfig+0x154>
 800751a:	4b87      	ldr	r3, [pc, #540]	; (8007738 <UART_SetConfig+0x308>)
 800751c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007520:	f003 030c 	and.w	r3, r3, #12
 8007524:	2b0c      	cmp	r3, #12
 8007526:	d829      	bhi.n	800757c <UART_SetConfig+0x14c>
 8007528:	a201      	add	r2, pc, #4	; (adr r2, 8007530 <UART_SetConfig+0x100>)
 800752a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752e:	bf00      	nop
 8007530:	08007565 	.word	0x08007565
 8007534:	0800757d 	.word	0x0800757d
 8007538:	0800757d 	.word	0x0800757d
 800753c:	0800757d 	.word	0x0800757d
 8007540:	08007571 	.word	0x08007571
 8007544:	0800757d 	.word	0x0800757d
 8007548:	0800757d 	.word	0x0800757d
 800754c:	0800757d 	.word	0x0800757d
 8007550:	0800756b 	.word	0x0800756b
 8007554:	0800757d 	.word	0x0800757d
 8007558:	0800757d 	.word	0x0800757d
 800755c:	0800757d 	.word	0x0800757d
 8007560:	08007577 	.word	0x08007577
 8007564:	2300      	movs	r3, #0
 8007566:	76fb      	strb	r3, [r7, #27]
 8007568:	e080      	b.n	800766c <UART_SetConfig+0x23c>
 800756a:	2302      	movs	r3, #2
 800756c:	76fb      	strb	r3, [r7, #27]
 800756e:	e07d      	b.n	800766c <UART_SetConfig+0x23c>
 8007570:	2304      	movs	r3, #4
 8007572:	76fb      	strb	r3, [r7, #27]
 8007574:	e07a      	b.n	800766c <UART_SetConfig+0x23c>
 8007576:	2308      	movs	r3, #8
 8007578:	76fb      	strb	r3, [r7, #27]
 800757a:	e077      	b.n	800766c <UART_SetConfig+0x23c>
 800757c:	2310      	movs	r3, #16
 800757e:	76fb      	strb	r3, [r7, #27]
 8007580:	bf00      	nop
 8007582:	e073      	b.n	800766c <UART_SetConfig+0x23c>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a6d      	ldr	r2, [pc, #436]	; (8007740 <UART_SetConfig+0x310>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d120      	bne.n	80075d0 <UART_SetConfig+0x1a0>
 800758e:	4b6a      	ldr	r3, [pc, #424]	; (8007738 <UART_SetConfig+0x308>)
 8007590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007594:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007598:	2b10      	cmp	r3, #16
 800759a:	d00f      	beq.n	80075bc <UART_SetConfig+0x18c>
 800759c:	2b10      	cmp	r3, #16
 800759e:	d802      	bhi.n	80075a6 <UART_SetConfig+0x176>
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d005      	beq.n	80075b0 <UART_SetConfig+0x180>
 80075a4:	e010      	b.n	80075c8 <UART_SetConfig+0x198>
 80075a6:	2b20      	cmp	r3, #32
 80075a8:	d005      	beq.n	80075b6 <UART_SetConfig+0x186>
 80075aa:	2b30      	cmp	r3, #48	; 0x30
 80075ac:	d009      	beq.n	80075c2 <UART_SetConfig+0x192>
 80075ae:	e00b      	b.n	80075c8 <UART_SetConfig+0x198>
 80075b0:	2300      	movs	r3, #0
 80075b2:	76fb      	strb	r3, [r7, #27]
 80075b4:	e05a      	b.n	800766c <UART_SetConfig+0x23c>
 80075b6:	2302      	movs	r3, #2
 80075b8:	76fb      	strb	r3, [r7, #27]
 80075ba:	e057      	b.n	800766c <UART_SetConfig+0x23c>
 80075bc:	2304      	movs	r3, #4
 80075be:	76fb      	strb	r3, [r7, #27]
 80075c0:	e054      	b.n	800766c <UART_SetConfig+0x23c>
 80075c2:	2308      	movs	r3, #8
 80075c4:	76fb      	strb	r3, [r7, #27]
 80075c6:	e051      	b.n	800766c <UART_SetConfig+0x23c>
 80075c8:	2310      	movs	r3, #16
 80075ca:	76fb      	strb	r3, [r7, #27]
 80075cc:	bf00      	nop
 80075ce:	e04d      	b.n	800766c <UART_SetConfig+0x23c>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a5b      	ldr	r2, [pc, #364]	; (8007744 <UART_SetConfig+0x314>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d120      	bne.n	800761c <UART_SetConfig+0x1ec>
 80075da:	4b57      	ldr	r3, [pc, #348]	; (8007738 <UART_SetConfig+0x308>)
 80075dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80075e4:	2b40      	cmp	r3, #64	; 0x40
 80075e6:	d00f      	beq.n	8007608 <UART_SetConfig+0x1d8>
 80075e8:	2b40      	cmp	r3, #64	; 0x40
 80075ea:	d802      	bhi.n	80075f2 <UART_SetConfig+0x1c2>
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d005      	beq.n	80075fc <UART_SetConfig+0x1cc>
 80075f0:	e010      	b.n	8007614 <UART_SetConfig+0x1e4>
 80075f2:	2b80      	cmp	r3, #128	; 0x80
 80075f4:	d005      	beq.n	8007602 <UART_SetConfig+0x1d2>
 80075f6:	2bc0      	cmp	r3, #192	; 0xc0
 80075f8:	d009      	beq.n	800760e <UART_SetConfig+0x1de>
 80075fa:	e00b      	b.n	8007614 <UART_SetConfig+0x1e4>
 80075fc:	2300      	movs	r3, #0
 80075fe:	76fb      	strb	r3, [r7, #27]
 8007600:	e034      	b.n	800766c <UART_SetConfig+0x23c>
 8007602:	2302      	movs	r3, #2
 8007604:	76fb      	strb	r3, [r7, #27]
 8007606:	e031      	b.n	800766c <UART_SetConfig+0x23c>
 8007608:	2304      	movs	r3, #4
 800760a:	76fb      	strb	r3, [r7, #27]
 800760c:	e02e      	b.n	800766c <UART_SetConfig+0x23c>
 800760e:	2308      	movs	r3, #8
 8007610:	76fb      	strb	r3, [r7, #27]
 8007612:	e02b      	b.n	800766c <UART_SetConfig+0x23c>
 8007614:	2310      	movs	r3, #16
 8007616:	76fb      	strb	r3, [r7, #27]
 8007618:	bf00      	nop
 800761a:	e027      	b.n	800766c <UART_SetConfig+0x23c>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a43      	ldr	r2, [pc, #268]	; (8007730 <UART_SetConfig+0x300>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d123      	bne.n	800766e <UART_SetConfig+0x23e>
 8007626:	4b44      	ldr	r3, [pc, #272]	; (8007738 <UART_SetConfig+0x308>)
 8007628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800762c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007634:	d012      	beq.n	800765c <UART_SetConfig+0x22c>
 8007636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800763a:	d802      	bhi.n	8007642 <UART_SetConfig+0x212>
 800763c:	2b00      	cmp	r3, #0
 800763e:	d007      	beq.n	8007650 <UART_SetConfig+0x220>
 8007640:	e012      	b.n	8007668 <UART_SetConfig+0x238>
 8007642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007646:	d006      	beq.n	8007656 <UART_SetConfig+0x226>
 8007648:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800764c:	d009      	beq.n	8007662 <UART_SetConfig+0x232>
 800764e:	e00b      	b.n	8007668 <UART_SetConfig+0x238>
 8007650:	2300      	movs	r3, #0
 8007652:	76fb      	strb	r3, [r7, #27]
 8007654:	e00a      	b.n	800766c <UART_SetConfig+0x23c>
 8007656:	2302      	movs	r3, #2
 8007658:	76fb      	strb	r3, [r7, #27]
 800765a:	e007      	b.n	800766c <UART_SetConfig+0x23c>
 800765c:	2304      	movs	r3, #4
 800765e:	76fb      	strb	r3, [r7, #27]
 8007660:	e004      	b.n	800766c <UART_SetConfig+0x23c>
 8007662:	2308      	movs	r3, #8
 8007664:	76fb      	strb	r3, [r7, #27]
 8007666:	e001      	b.n	800766c <UART_SetConfig+0x23c>
 8007668:	2310      	movs	r3, #16
 800766a:	76fb      	strb	r3, [r7, #27]
 800766c:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a2f      	ldr	r2, [pc, #188]	; (8007730 <UART_SetConfig+0x300>)
 8007674:	4293      	cmp	r3, r2
 8007676:	f040 80ea 	bne.w	800784e <UART_SetConfig+0x41e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800767a:	7efb      	ldrb	r3, [r7, #27]
 800767c:	2b08      	cmp	r3, #8
 800767e:	d824      	bhi.n	80076ca <UART_SetConfig+0x29a>
 8007680:	a201      	add	r2, pc, #4	; (adr r2, 8007688 <UART_SetConfig+0x258>)
 8007682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007686:	bf00      	nop
 8007688:	080076ad 	.word	0x080076ad
 800768c:	080076cb 	.word	0x080076cb
 8007690:	080076b5 	.word	0x080076b5
 8007694:	080076cb 	.word	0x080076cb
 8007698:	080076bb 	.word	0x080076bb
 800769c:	080076cb 	.word	0x080076cb
 80076a0:	080076cb 	.word	0x080076cb
 80076a4:	080076cb 	.word	0x080076cb
 80076a8:	080076c3 	.word	0x080076c3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80076ac:	f7fe fe5a 	bl	8006364 <HAL_RCC_GetPCLK1Freq>
 80076b0:	60f8      	str	r0, [r7, #12]
#endif
        break;
 80076b2:	e00d      	b.n	80076d0 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80076b4:	4b24      	ldr	r3, [pc, #144]	; (8007748 <UART_SetConfig+0x318>)
 80076b6:	60fb      	str	r3, [r7, #12]
#endif
        break;
 80076b8:	e00a      	b.n	80076d0 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80076ba:	f7fe fdab 	bl	8006214 <HAL_RCC_GetSysClockFreq>
 80076be:	60f8      	str	r0, [r7, #12]
#endif
        break;
 80076c0:	e006      	b.n	80076d0 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80076c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076c6:	60fb      	str	r3, [r7, #12]
#endif
        break;
 80076c8:	e002      	b.n	80076d0 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	74fb      	strb	r3, [r7, #19]
        break;
 80076ce:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 81ad 	beq.w	8007a32 <UART_SetConfig+0x602>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	4613      	mov	r3, r2
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	441a      	add	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d805      	bhi.n	80076f4 <UART_SetConfig+0x2c4>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d202      	bcs.n	80076fa <UART_SetConfig+0x2ca>
      {
        ret = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	74fb      	strb	r3, [r7, #19]
 80076f8:	e19b      	b.n	8007a32 <UART_SetConfig+0x602>
      }
      else
      {
        switch (clocksource)
 80076fa:	7efb      	ldrb	r3, [r7, #27]
 80076fc:	2b08      	cmp	r3, #8
 80076fe:	f200 8093 	bhi.w	8007828 <UART_SetConfig+0x3f8>
 8007702:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <UART_SetConfig+0x2d8>)
 8007704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007708:	0800774d 	.word	0x0800774d
 800770c:	08007829 	.word	0x08007829
 8007710:	0800778d 	.word	0x0800778d
 8007714:	08007829 	.word	0x08007829
 8007718:	080077c1 	.word	0x080077c1
 800771c:	08007829 	.word	0x08007829
 8007720:	08007829 	.word	0x08007829
 8007724:	08007829 	.word	0x08007829
 8007728:	080077ff 	.word	0x080077ff
 800772c:	efff69f3 	.word	0xefff69f3
 8007730:	40008000 	.word	0x40008000
 8007734:	40013800 	.word	0x40013800
 8007738:	40021000 	.word	0x40021000
 800773c:	40004400 	.word	0x40004400
 8007740:	40004800 	.word	0x40004800
 8007744:	40004c00 	.word	0x40004c00
 8007748:	00f42400 	.word	0x00f42400
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800774c:	f7fe fe0a 	bl	8006364 <HAL_RCC_GetPCLK1Freq>
 8007750:	4603      	mov	r3, r0
 8007752:	f04f 0400 	mov.w	r4, #0
 8007756:	ea4f 2904 	mov.w	r9, r4, lsl #8
 800775a:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 800775e:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	085b      	lsrs	r3, r3, #1
 8007768:	f04f 0400 	mov.w	r4, #0
 800776c:	eb18 0003 	adds.w	r0, r8, r3
 8007770:	eb49 0104 	adc.w	r1, r9, r4
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f04f 0400 	mov.w	r4, #0
 800777c:	461a      	mov	r2, r3
 800777e:	4623      	mov	r3, r4
 8007780:	f7f8 fd86 	bl	8000290 <__aeabi_uldivmod>
 8007784:	4603      	mov	r3, r0
 8007786:	460c      	mov	r4, r1
 8007788:	617b      	str	r3, [r7, #20]
#endif
            break;
 800778a:	e050      	b.n	800782e <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	085b      	lsrs	r3, r3, #1
 8007792:	f04f 0400 	mov.w	r4, #0
 8007796:	49ad      	ldr	r1, [pc, #692]	; (8007a4c <UART_SetConfig+0x61c>)
 8007798:	f04f 0200 	mov.w	r2, #0
 800779c:	eb13 0801 	adds.w	r8, r3, r1
 80077a0:	eb44 0902 	adc.w	r9, r4, r2
 80077a4:	4640      	mov	r0, r8
 80077a6:	4649      	mov	r1, r9
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f04f 0400 	mov.w	r4, #0
 80077b0:	461a      	mov	r2, r3
 80077b2:	4623      	mov	r3, r4
 80077b4:	f7f8 fd6c 	bl	8000290 <__aeabi_uldivmod>
 80077b8:	4603      	mov	r3, r0
 80077ba:	460c      	mov	r4, r1
 80077bc:	617b      	str	r3, [r7, #20]
#endif
            break;
 80077be:	e036      	b.n	800782e <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80077c0:	f7fe fd28 	bl	8006214 <HAL_RCC_GetSysClockFreq>
 80077c4:	4603      	mov	r3, r0
 80077c6:	461a      	mov	r2, r3
 80077c8:	f04f 0300 	mov.w	r3, #0
 80077cc:	021d      	lsls	r5, r3, #8
 80077ce:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 80077d2:	0214      	lsls	r4, r2, #8
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	085b      	lsrs	r3, r3, #1
 80077da:	461a      	mov	r2, r3
 80077dc:	f04f 0300 	mov.w	r3, #0
 80077e0:	18a0      	adds	r0, r4, r2
 80077e2:	eb45 0103 	adc.w	r1, r5, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f04f 0400 	mov.w	r4, #0
 80077ee:	461a      	mov	r2, r3
 80077f0:	4623      	mov	r3, r4
 80077f2:	f7f8 fd4d 	bl	8000290 <__aeabi_uldivmod>
 80077f6:	4603      	mov	r3, r0
 80077f8:	460c      	mov	r4, r1
 80077fa:	617b      	str	r3, [r7, #20]
#endif
            break;
 80077fc:	e017      	b.n	800782e <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	085b      	lsrs	r3, r3, #1
 8007804:	f04f 0400 	mov.w	r4, #0
 8007808:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800780c:	f144 0100 	adc.w	r1, r4, #0
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f04f 0400 	mov.w	r4, #0
 8007818:	461a      	mov	r2, r3
 800781a:	4623      	mov	r3, r4
 800781c:	f7f8 fd38 	bl	8000290 <__aeabi_uldivmod>
 8007820:	4603      	mov	r3, r0
 8007822:	460c      	mov	r4, r1
 8007824:	617b      	str	r3, [r7, #20]
#endif
            break;
 8007826:	e002      	b.n	800782e <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	74fb      	strb	r3, [r7, #19]
            break;
 800782c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007834:	d308      	bcc.n	8007848 <UART_SetConfig+0x418>
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800783c:	d204      	bcs.n	8007848 <UART_SetConfig+0x418>
        {
          huart->Instance->BRR = usartdiv;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	60da      	str	r2, [r3, #12]
 8007846:	e0f4      	b.n	8007a32 <UART_SetConfig+0x602>
        }
        else
        {
          ret = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	74fb      	strb	r3, [r7, #19]
 800784c:	e0f1      	b.n	8007a32 <UART_SetConfig+0x602>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007856:	d17e      	bne.n	8007956 <UART_SetConfig+0x526>
  {
    switch (clocksource)
 8007858:	7efb      	ldrb	r3, [r7, #27]
 800785a:	2b08      	cmp	r3, #8
 800785c:	d85b      	bhi.n	8007916 <UART_SetConfig+0x4e6>
 800785e:	a201      	add	r2, pc, #4	; (adr r2, 8007864 <UART_SetConfig+0x434>)
 8007860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007864:	08007889 	.word	0x08007889
 8007868:	080078a7 	.word	0x080078a7
 800786c:	080078c5 	.word	0x080078c5
 8007870:	08007917 	.word	0x08007917
 8007874:	080078e1 	.word	0x080078e1
 8007878:	08007917 	.word	0x08007917
 800787c:	08007917 	.word	0x08007917
 8007880:	08007917 	.word	0x08007917
 8007884:	080078ff 	.word	0x080078ff
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007888:	f7fe fd6c 	bl	8006364 <HAL_RCC_GetPCLK1Freq>
 800788c:	4603      	mov	r3, r0
 800788e:	005a      	lsls	r2, r3, #1
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	085b      	lsrs	r3, r3, #1
 8007896:	441a      	add	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	617b      	str	r3, [r7, #20]
#endif
        break;
 80078a4:	e03a      	b.n	800791c <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80078a6:	f7fe fd73 	bl	8006390 <HAL_RCC_GetPCLK2Freq>
 80078aa:	4603      	mov	r3, r0
 80078ac:	005a      	lsls	r2, r3, #1
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	085b      	lsrs	r3, r3, #1
 80078b4:	441a      	add	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80078be:	b29b      	uxth	r3, r3
 80078c0:	617b      	str	r3, [r7, #20]
#endif
        break;
 80078c2:	e02b      	b.n	800791c <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	085b      	lsrs	r3, r3, #1
 80078ca:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80078ce:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	6852      	ldr	r2, [r2, #4]
 80078d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80078da:	b29b      	uxth	r3, r3
 80078dc:	617b      	str	r3, [r7, #20]
#endif
        break;
 80078de:	e01d      	b.n	800791c <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80078e0:	f7fe fc98 	bl	8006214 <HAL_RCC_GetSysClockFreq>
 80078e4:	4603      	mov	r3, r0
 80078e6:	005a      	lsls	r2, r3, #1
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	085b      	lsrs	r3, r3, #1
 80078ee:	441a      	add	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	617b      	str	r3, [r7, #20]
#endif
        break;
 80078fc:	e00e      	b.n	800791c <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	085b      	lsrs	r3, r3, #1
 8007904:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007910:	b29b      	uxth	r3, r3
 8007912:	617b      	str	r3, [r7, #20]
#endif
        break;
 8007914:	e002      	b.n	800791c <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	74fb      	strb	r3, [r7, #19]
        break;
 800791a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2b0f      	cmp	r3, #15
 8007920:	d916      	bls.n	8007950 <UART_SetConfig+0x520>
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007928:	d212      	bcs.n	8007950 <UART_SetConfig+0x520>
    {
      brrtemp = usartdiv & 0xFFF0U;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	b29b      	uxth	r3, r3
 800792e:	f023 030f 	bic.w	r3, r3, #15
 8007932:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	085b      	lsrs	r3, r3, #1
 8007938:	b29b      	uxth	r3, r3
 800793a:	f003 0307 	and.w	r3, r3, #7
 800793e:	b29a      	uxth	r2, r3
 8007940:	897b      	ldrh	r3, [r7, #10]
 8007942:	4313      	orrs	r3, r2
 8007944:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	897a      	ldrh	r2, [r7, #10]
 800794c:	60da      	str	r2, [r3, #12]
 800794e:	e070      	b.n	8007a32 <UART_SetConfig+0x602>
    }
    else
    {
      ret = HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	74fb      	strb	r3, [r7, #19]
 8007954:	e06d      	b.n	8007a32 <UART_SetConfig+0x602>
    }
  }
  else
  {
    switch (clocksource)
 8007956:	7efb      	ldrb	r3, [r7, #27]
 8007958:	2b08      	cmp	r3, #8
 800795a:	d859      	bhi.n	8007a10 <UART_SetConfig+0x5e0>
 800795c:	a201      	add	r2, pc, #4	; (adr r2, 8007964 <UART_SetConfig+0x534>)
 800795e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007962:	bf00      	nop
 8007964:	08007989 	.word	0x08007989
 8007968:	080079a5 	.word	0x080079a5
 800796c:	080079c1 	.word	0x080079c1
 8007970:	08007a11 	.word	0x08007a11
 8007974:	080079dd 	.word	0x080079dd
 8007978:	08007a11 	.word	0x08007a11
 800797c:	08007a11 	.word	0x08007a11
 8007980:	08007a11 	.word	0x08007a11
 8007984:	080079f9 	.word	0x080079f9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007988:	f7fe fcec 	bl	8006364 <HAL_RCC_GetPCLK1Freq>
 800798c:	4602      	mov	r2, r0
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	085b      	lsrs	r3, r3, #1
 8007994:	441a      	add	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	fbb2 f3f3 	udiv	r3, r2, r3
 800799e:	b29b      	uxth	r3, r3
 80079a0:	617b      	str	r3, [r7, #20]
#endif
        break;
 80079a2:	e038      	b.n	8007a16 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80079a4:	f7fe fcf4 	bl	8006390 <HAL_RCC_GetPCLK2Freq>
 80079a8:	4602      	mov	r2, r0
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	085b      	lsrs	r3, r3, #1
 80079b0:	441a      	add	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	617b      	str	r3, [r7, #20]
#endif
        break;
 80079be:	e02a      	b.n	8007a16 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	085b      	lsrs	r3, r3, #1
 80079c6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80079ca:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	6852      	ldr	r2, [r2, #4]
 80079d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	617b      	str	r3, [r7, #20]
#endif
        break;
 80079da:	e01c      	b.n	8007a16 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80079dc:	f7fe fc1a 	bl	8006214 <HAL_RCC_GetSysClockFreq>
 80079e0:	4602      	mov	r2, r0
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	085b      	lsrs	r3, r3, #1
 80079e8:	441a      	add	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	617b      	str	r3, [r7, #20]
#endif
        break;
 80079f6:	e00e      	b.n	8007a16 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	085b      	lsrs	r3, r3, #1
 80079fe:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	617b      	str	r3, [r7, #20]
#endif
        break;
 8007a0e:	e002      	b.n	8007a16 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	74fb      	strb	r3, [r7, #19]
        break;
 8007a14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	2b0f      	cmp	r3, #15
 8007a1a:	d908      	bls.n	8007a2e <UART_SetConfig+0x5fe>
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a22:	d204      	bcs.n	8007a2e <UART_SetConfig+0x5fe>
    {
      huart->Instance->BRR = usartdiv;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	60da      	str	r2, [r3, #12]
 8007a2c:	e001      	b.n	8007a32 <UART_SetConfig+0x602>
    }
    else
    {
      ret = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007a3e:	7cfb      	ldrb	r3, [r7, #19]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3720      	adds	r7, #32
 8007a44:	46bd      	mov	sp, r7
 8007a46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007a4a:	bf00      	nop
 8007a4c:	f4240000 	.word	0xf4240000

08007a50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00a      	beq.n	8007a7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	6812      	ldr	r2, [r2, #0]
 8007a6c:	6852      	ldr	r2, [r2, #4]
 8007a6e:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007a76:	430a      	orrs	r2, r1
 8007a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	6812      	ldr	r2, [r2, #0]
 8007a8e:	6852      	ldr	r2, [r2, #4]
 8007a90:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	f003 0304 	and.w	r3, r3, #4
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00a      	beq.n	8007abe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	6812      	ldr	r2, [r2, #0]
 8007ab0:	6852      	ldr	r2, [r2, #4]
 8007ab2:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007aba:	430a      	orrs	r2, r1
 8007abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac2:	f003 0308 	and.w	r3, r3, #8
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00a      	beq.n	8007ae0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	6812      	ldr	r2, [r2, #0]
 8007ad2:	6852      	ldr	r2, [r2, #4]
 8007ad4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007adc:	430a      	orrs	r2, r1
 8007ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae4:	f003 0310 	and.w	r3, r3, #16
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00a      	beq.n	8007b02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	6812      	ldr	r2, [r2, #0]
 8007af4:	6892      	ldr	r2, [r2, #8]
 8007af6:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007afe:	430a      	orrs	r2, r1
 8007b00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	f003 0320 	and.w	r3, r3, #32
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00a      	beq.n	8007b24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	6812      	ldr	r2, [r2, #0]
 8007b16:	6892      	ldr	r2, [r2, #8]
 8007b18:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007b20:	430a      	orrs	r2, r1
 8007b22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01a      	beq.n	8007b66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	6812      	ldr	r2, [r2, #0]
 8007b38:	6852      	ldr	r2, [r2, #4]
 8007b3a:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007b42:	430a      	orrs	r2, r1
 8007b44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b4e:	d10a      	bne.n	8007b66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	6812      	ldr	r2, [r2, #0]
 8007b58:	6852      	ldr	r2, [r2, #4]
 8007b5a:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007b62:	430a      	orrs	r2, r1
 8007b64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00a      	beq.n	8007b88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	6812      	ldr	r2, [r2, #0]
 8007b7a:	6852      	ldr	r2, [r2, #4]
 8007b7c:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007b84:	430a      	orrs	r2, r1
 8007b86:	605a      	str	r2, [r3, #4]
  }
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af02      	add	r7, sp, #8
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007ba6:	f7fb fc33 	bl	8003410 <HAL_GetTick>
 8007baa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0308 	and.w	r3, r3, #8
 8007bb6:	2b08      	cmp	r3, #8
 8007bb8:	d10e      	bne.n	8007bd8 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f82c 	bl	8007c26 <UART_WaitOnFlagUntilTimeout>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e022      	b.n	8007c1e <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0304 	and.w	r3, r3, #4
 8007be2:	2b04      	cmp	r3, #4
 8007be4:	d10e      	bne.n	8007c04 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007be6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f816 	bl	8007c26 <UART_WaitOnFlagUntilTimeout>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e00c      	b.n	8007c1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2220      	movs	r2, #32
 8007c08:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b084      	sub	sp, #16
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	60b9      	str	r1, [r7, #8]
 8007c30:	603b      	str	r3, [r7, #0]
 8007c32:	4613      	mov	r3, r2
 8007c34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c36:	e02c      	b.n	8007c92 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3e:	d028      	beq.n	8007c92 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d007      	beq.n	8007c56 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c46:	f7fb fbe3 	bl	8003410 <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	1ad2      	subs	r2, r2, r3
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d91d      	bls.n	8007c92 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	6812      	ldr	r2, [r2, #0]
 8007c5e:	6812      	ldr	r2, [r2, #0]
 8007c60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c64:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	6812      	ldr	r2, [r2, #0]
 8007c6e:	6892      	ldr	r2, [r2, #8]
 8007c70:	f022 0201 	bic.w	r2, r2, #1
 8007c74:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2220      	movs	r2, #32
 8007c7a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2220      	movs	r2, #32
 8007c82:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e00f      	b.n	8007cb2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69da      	ldr	r2, [r3, #28]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	401a      	ands	r2, r3
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	bf0c      	ite	eq
 8007ca2:	2301      	moveq	r3, #1
 8007ca4:	2300      	movne	r3, #0
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	461a      	mov	r2, r3
 8007caa:	79fb      	ldrb	r3, [r7, #7]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d0c3      	beq.n	8007c38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007cba:	b084      	sub	sp, #16
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	f107 0014 	add.w	r0, r7, #20
 8007cc8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	b004      	add	sp, #16
 8007cda:	4770      	bx	lr

08007cdc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007ce4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007ce8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	89fb      	ldrh	r3, [r7, #14]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3714      	adds	r7, #20
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d14:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007d18:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	b21a      	sxth	r2, r3
 8007d24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d28:	43db      	mvns	r3, r3
 8007d2a:	b21b      	sxth	r3, r3
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	b21b      	sxth	r3, r3
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b083      	sub	sp, #12
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007d60:	b084      	sub	sp, #16
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b082      	sub	sp, #8
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	f107 0014 	add.w	r0, r7, #20
 8007d6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7ff ffa2 	bl	8007cdc <USB_EnableGlobalInt>

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007da4:	b004      	add	sp, #16
 8007da6:	4770      	bx	lr

08007da8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007da8:	b490      	push	{r4, r7}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	881b      	ldrh	r3, [r3, #0]
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dcc:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	78db      	ldrb	r3, [r3, #3]
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d819      	bhi.n	8007e0a <USB_ActivateEndpoint+0x62>
 8007dd6:	a201      	add	r2, pc, #4	; (adr r2, 8007ddc <USB_ActivateEndpoint+0x34>)
 8007dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ddc:	08007ded 	.word	0x08007ded
 8007de0:	08007e01 	.word	0x08007e01
 8007de4:	08007e11 	.word	0x08007e11
 8007de8:	08007df7 	.word	0x08007df7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007dec:	8abb      	ldrh	r3, [r7, #20]
 8007dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007df2:	82bb      	strh	r3, [r7, #20]
      break;
 8007df4:	e00d      	b.n	8007e12 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007df6:	8abb      	ldrh	r3, [r7, #20]
 8007df8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007dfc:	82bb      	strh	r3, [r7, #20]
      break;
 8007dfe:	e008      	b.n	8007e12 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007e00:	8abb      	ldrh	r3, [r7, #20]
 8007e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e06:	82bb      	strh	r3, [r7, #20]
      break;
 8007e08:	e003      	b.n	8007e12 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e0e:	e000      	b.n	8007e12 <USB_ActivateEndpoint+0x6a>
      break;
 8007e10:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal);
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	8aba      	ldrh	r2, [r7, #20]
 8007e1e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	881b      	ldrh	r3, [r3, #0]
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	b21b      	sxth	r3, r3
 8007e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e38:	b21a      	sxth	r2, r3
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	b21b      	sxth	r3, r3
 8007e40:	4313      	orrs	r3, r2
 8007e42:	b21b      	sxth	r3, r3
 8007e44:	b29c      	uxth	r4, r3
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	441a      	add	r2, r3
 8007e50:	4b87      	ldr	r3, [pc, #540]	; (8008070 <USB_ActivateEndpoint+0x2c8>)
 8007e52:	4323      	orrs	r3, r4
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	7b1b      	ldrb	r3, [r3, #12]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f040 810d 	bne.w	800807c <USB_ActivateEndpoint+0x2d4>
  {
    if (ep->is_in != 0U)
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	785b      	ldrb	r3, [r3, #1]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d067      	beq.n	8007f3a <USB_ActivateEndpoint+0x192>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007e6a:	687c      	ldr	r4, [r7, #4]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	441c      	add	r4, r3
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	4423      	add	r3, r4
 8007e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e82:	461c      	mov	r4, r3
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	88db      	ldrh	r3, [r3, #6]
 8007e88:	085b      	lsrs	r3, r3, #1
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	005b      	lsls	r3, r3, #1
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	b29c      	uxth	r4, r3
 8007ea0:	4623      	mov	r3, r4
 8007ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d014      	beq.n	8007ed4 <USB_ActivateEndpoint+0x12c>
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	881b      	ldrh	r3, [r3, #0]
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ec0:	b29c      	uxth	r4, r3
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	441a      	add	r2, r3
 8007ecc:	4b69      	ldr	r3, [pc, #420]	; (8008074 <USB_ActivateEndpoint+0x2cc>)
 8007ece:	4323      	orrs	r3, r4
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	78db      	ldrb	r3, [r3, #3]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d018      	beq.n	8007f0e <USB_ActivateEndpoint+0x166>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ef2:	b29c      	uxth	r4, r3
 8007ef4:	f084 0320 	eor.w	r3, r4, #32
 8007ef8:	b29c      	uxth	r4, r3
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	441a      	add	r2, r3
 8007f04:	4b5a      	ldr	r3, [pc, #360]	; (8008070 <USB_ActivateEndpoint+0x2c8>)
 8007f06:	4323      	orrs	r3, r4
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	8013      	strh	r3, [r2, #0]
 8007f0c:	e226      	b.n	800835c <USB_ActivateEndpoint+0x5b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f24:	b29c      	uxth	r4, r3
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	441a      	add	r2, r3
 8007f30:	4b4f      	ldr	r3, [pc, #316]	; (8008070 <USB_ActivateEndpoint+0x2c8>)
 8007f32:	4323      	orrs	r3, r4
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	8013      	strh	r3, [r2, #0]
 8007f38:	e210      	b.n	800835c <USB_ActivateEndpoint+0x5b4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007f3a:	687c      	ldr	r4, [r7, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	441c      	add	r4, r3
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	00db      	lsls	r3, r3, #3
 8007f4c:	4423      	add	r3, r4
 8007f4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f52:	461c      	mov	r4, r3
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	88db      	ldrh	r3, [r3, #6]
 8007f58:	085b      	lsrs	r3, r3, #1
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	005b      	lsls	r3, r3, #1
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007f62:	687c      	ldr	r4, [r7, #4]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	441c      	add	r4, r3
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	4423      	add	r3, r4
 8007f76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d111      	bne.n	8007fa8 <USB_ActivateEndpoint+0x200>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	881a      	ldrh	r2, [r3, #0]
 8007f88:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	801a      	strh	r2, [r3, #0]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	801a      	strh	r2, [r3, #0]
 8007fa6:	e026      	b.n	8007ff6 <USB_ActivateEndpoint+0x24e>
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	2b3d      	cmp	r3, #61	; 0x3d
 8007fae:	d813      	bhi.n	8007fd8 <USB_ActivateEndpoint+0x230>
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	085b      	lsrs	r3, r3, #1
 8007fb6:	613b      	str	r3, [r7, #16]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <USB_ActivateEndpoint+0x222>
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	613b      	str	r3, [r7, #16]
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	029b      	lsls	r3, r3, #10
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	801a      	strh	r2, [r3, #0]
 8007fd6:	e00e      	b.n	8007ff6 <USB_ActivateEndpoint+0x24e>
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	095b      	lsrs	r3, r3, #5
 8007fde:	613b      	str	r3, [r7, #16]
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	029b      	lsls	r3, r3, #10
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	b29c      	uxth	r4, r3
 8008004:	4623      	mov	r3, r4
 8008006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d014      	beq.n	8008038 <USB_ActivateEndpoint+0x290>
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	b29b      	uxth	r3, r3
 800801c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008024:	b29c      	uxth	r4, r3
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	441a      	add	r2, r3
 8008030:	4b11      	ldr	r3, [pc, #68]	; (8008078 <USB_ActivateEndpoint+0x2d0>)
 8008032:	4323      	orrs	r3, r4
 8008034:	b29b      	uxth	r3, r3
 8008036:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	881b      	ldrh	r3, [r3, #0]
 8008044:	b29b      	uxth	r3, r3
 8008046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800804a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800804e:	b29c      	uxth	r4, r3
 8008050:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008054:	b29c      	uxth	r4, r3
 8008056:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800805a:	b29c      	uxth	r4, r3
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	441a      	add	r2, r3
 8008066:	4b02      	ldr	r3, [pc, #8]	; (8008070 <USB_ActivateEndpoint+0x2c8>)
 8008068:	4323      	orrs	r3, r4
 800806a:	b29b      	uxth	r3, r3
 800806c:	8013      	strh	r3, [r2, #0]
 800806e:	e175      	b.n	800835c <USB_ActivateEndpoint+0x5b4>
 8008070:	ffff8080 	.word	0xffff8080
 8008074:	ffff80c0 	.word	0xffff80c0
 8008078:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	b29b      	uxth	r3, r3
 800808a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800808e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008092:	b29c      	uxth	r4, r3
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	441a      	add	r2, r3
 800809e:	4b96      	ldr	r3, [pc, #600]	; (80082f8 <USB_ActivateEndpoint+0x550>)
 80080a0:	4323      	orrs	r3, r4
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80080a6:	687c      	ldr	r4, [r7, #4]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	441c      	add	r4, r3
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	00db      	lsls	r3, r3, #3
 80080b8:	4423      	add	r3, r4
 80080ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080be:	461c      	mov	r4, r3
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	891b      	ldrh	r3, [r3, #8]
 80080c4:	085b      	lsrs	r3, r3, #1
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	8023      	strh	r3, [r4, #0]
 80080ce:	687c      	ldr	r4, [r7, #4]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	441c      	add	r4, r3
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	00db      	lsls	r3, r3, #3
 80080e0:	4423      	add	r3, r4
 80080e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080e6:	461c      	mov	r4, r3
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	895b      	ldrh	r3, [r3, #10]
 80080ec:	085b      	lsrs	r3, r3, #1
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	005b      	lsls	r3, r3, #1
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	785b      	ldrb	r3, [r3, #1]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f040 8088 	bne.w	8008210 <USB_ActivateEndpoint+0x468>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	881b      	ldrh	r3, [r3, #0]
 800810c:	b29c      	uxth	r4, r3
 800810e:	4623      	mov	r3, r4
 8008110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d014      	beq.n	8008142 <USB_ActivateEndpoint+0x39a>
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	881b      	ldrh	r3, [r3, #0]
 8008124:	b29b      	uxth	r3, r3
 8008126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800812a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800812e:	b29c      	uxth	r4, r3
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	441a      	add	r2, r3
 800813a:	4b70      	ldr	r3, [pc, #448]	; (80082fc <USB_ActivateEndpoint+0x554>)
 800813c:	4323      	orrs	r3, r4
 800813e:	b29b      	uxth	r3, r3
 8008140:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	881b      	ldrh	r3, [r3, #0]
 800814e:	b29c      	uxth	r4, r3
 8008150:	4623      	mov	r3, r4
 8008152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008156:	2b00      	cmp	r3, #0
 8008158:	d014      	beq.n	8008184 <USB_ActivateEndpoint+0x3dc>
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	b29b      	uxth	r3, r3
 8008168:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800816c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008170:	b29c      	uxth	r4, r3
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	441a      	add	r2, r3
 800817c:	4b60      	ldr	r3, [pc, #384]	; (8008300 <USB_ActivateEndpoint+0x558>)
 800817e:	4323      	orrs	r3, r4
 8008180:	b29b      	uxth	r3, r3
 8008182:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	b29b      	uxth	r3, r3
 8008192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800819a:	b29c      	uxth	r4, r3
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	441a      	add	r2, r3
 80081a6:	4b56      	ldr	r3, [pc, #344]	; (8008300 <USB_ActivateEndpoint+0x558>)
 80081a8:	4323      	orrs	r3, r4
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4413      	add	r3, r2
 80081b8:	881b      	ldrh	r3, [r3, #0]
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c4:	b29c      	uxth	r4, r3
 80081c6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80081ca:	b29c      	uxth	r4, r3
 80081cc:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80081d0:	b29c      	uxth	r4, r3
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	441a      	add	r2, r3
 80081dc:	4b49      	ldr	r3, [pc, #292]	; (8008304 <USB_ActivateEndpoint+0x55c>)
 80081de:	4323      	orrs	r3, r4
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081fa:	b29c      	uxth	r4, r3
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	441a      	add	r2, r3
 8008206:	4b3f      	ldr	r3, [pc, #252]	; (8008304 <USB_ActivateEndpoint+0x55c>)
 8008208:	4323      	orrs	r3, r4
 800820a:	b29b      	uxth	r3, r3
 800820c:	8013      	strh	r3, [r2, #0]
 800820e:	e0a5      	b.n	800835c <USB_ActivateEndpoint+0x5b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	b29c      	uxth	r4, r3
 800821e:	4623      	mov	r3, r4
 8008220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d014      	beq.n	8008252 <USB_ActivateEndpoint+0x4aa>
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4413      	add	r3, r2
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	b29b      	uxth	r3, r3
 8008236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800823a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800823e:	b29c      	uxth	r4, r3
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	441a      	add	r2, r3
 800824a:	4b2c      	ldr	r3, [pc, #176]	; (80082fc <USB_ActivateEndpoint+0x554>)
 800824c:	4323      	orrs	r3, r4
 800824e:	b29b      	uxth	r3, r3
 8008250:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	b29c      	uxth	r4, r3
 8008260:	4623      	mov	r3, r4
 8008262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008266:	2b00      	cmp	r3, #0
 8008268:	d014      	beq.n	8008294 <USB_ActivateEndpoint+0x4ec>
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	b29b      	uxth	r3, r3
 8008278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800827c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008280:	b29c      	uxth	r4, r3
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	441a      	add	r2, r3
 800828c:	4b1c      	ldr	r3, [pc, #112]	; (8008300 <USB_ActivateEndpoint+0x558>)
 800828e:	4323      	orrs	r3, r4
 8008290:	b29b      	uxth	r3, r3
 8008292:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	881b      	ldrh	r3, [r3, #0]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082aa:	b29c      	uxth	r4, r3
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	441a      	add	r2, r3
 80082b6:	4b11      	ldr	r3, [pc, #68]	; (80082fc <USB_ActivateEndpoint+0x554>)
 80082b8:	4323      	orrs	r3, r4
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	78db      	ldrb	r3, [r3, #3]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d020      	beq.n	8008308 <USB_ActivateEndpoint+0x560>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4413      	add	r3, r2
 80082d0:	881b      	ldrh	r3, [r3, #0]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082dc:	b29c      	uxth	r4, r3
 80082de:	f084 0320 	eor.w	r3, r4, #32
 80082e2:	b29c      	uxth	r4, r3
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	441a      	add	r2, r3
 80082ee:	4b05      	ldr	r3, [pc, #20]	; (8008304 <USB_ActivateEndpoint+0x55c>)
 80082f0:	4323      	orrs	r3, r4
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	8013      	strh	r3, [r2, #0]
 80082f6:	e01c      	b.n	8008332 <USB_ActivateEndpoint+0x58a>
 80082f8:	ffff8180 	.word	0xffff8180
 80082fc:	ffffc080 	.word	0xffffc080
 8008300:	ffff80c0 	.word	0xffff80c0
 8008304:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	b29b      	uxth	r3, r3
 8008316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800831a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800831e:	b29c      	uxth	r4, r3
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	441a      	add	r2, r3
 800832a:	4b0f      	ldr	r3, [pc, #60]	; (8008368 <USB_ActivateEndpoint+0x5c0>)
 800832c:	4323      	orrs	r3, r4
 800832e:	b29b      	uxth	r3, r3
 8008330:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	881b      	ldrh	r3, [r3, #0]
 800833e:	b29b      	uxth	r3, r3
 8008340:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008348:	b29c      	uxth	r4, r3
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	441a      	add	r2, r3
 8008354:	4b04      	ldr	r3, [pc, #16]	; (8008368 <USB_ActivateEndpoint+0x5c0>)
 8008356:	4323      	orrs	r3, r4
 8008358:	b29b      	uxth	r3, r3
 800835a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800835c:	7dfb      	ldrb	r3, [r7, #23]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	bc90      	pop	{r4, r7}
 8008366:	4770      	bx	lr
 8008368:	ffff8080 	.word	0xffff8080

0800836c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800836c:	b490      	push	{r4, r7}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	7b1b      	ldrb	r3, [r3, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d171      	bne.n	8008462 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	785b      	ldrb	r3, [r3, #1]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d036      	beq.n	80083f4 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	b29c      	uxth	r4, r3
 8008394:	4623      	mov	r3, r4
 8008396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839a:	2b00      	cmp	r3, #0
 800839c:	d014      	beq.n	80083c8 <USB_DeactivateEndpoint+0x5c>
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	881b      	ldrh	r3, [r3, #0]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083b4:	b29c      	uxth	r4, r3
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	441a      	add	r2, r3
 80083c0:	4b6b      	ldr	r3, [pc, #428]	; (8008570 <USB_DeactivateEndpoint+0x204>)
 80083c2:	4323      	orrs	r3, r4
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083de:	b29c      	uxth	r4, r3
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	441a      	add	r2, r3
 80083ea:	4b62      	ldr	r3, [pc, #392]	; (8008574 <USB_DeactivateEndpoint+0x208>)
 80083ec:	4323      	orrs	r3, r4
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	8013      	strh	r3, [r2, #0]
 80083f2:	e144      	b.n	800867e <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	b29c      	uxth	r4, r3
 8008402:	4623      	mov	r3, r4
 8008404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d014      	beq.n	8008436 <USB_DeactivateEndpoint+0xca>
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	881b      	ldrh	r3, [r3, #0]
 8008418:	b29b      	uxth	r3, r3
 800841a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800841e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008422:	b29c      	uxth	r4, r3
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	441a      	add	r2, r3
 800842e:	4b52      	ldr	r3, [pc, #328]	; (8008578 <USB_DeactivateEndpoint+0x20c>)
 8008430:	4323      	orrs	r3, r4
 8008432:	b29b      	uxth	r3, r3
 8008434:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	b29b      	uxth	r3, r3
 8008444:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800844c:	b29c      	uxth	r4, r3
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	441a      	add	r2, r3
 8008458:	4b46      	ldr	r3, [pc, #280]	; (8008574 <USB_DeactivateEndpoint+0x208>)
 800845a:	4323      	orrs	r3, r4
 800845c:	b29b      	uxth	r3, r3
 800845e:	8013      	strh	r3, [r2, #0]
 8008460:	e10d      	b.n	800867e <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	785b      	ldrb	r3, [r3, #1]
 8008466:	2b00      	cmp	r3, #0
 8008468:	f040 8088 	bne.w	800857c <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	b29c      	uxth	r4, r3
 800847a:	4623      	mov	r3, r4
 800847c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d014      	beq.n	80084ae <USB_DeactivateEndpoint+0x142>
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	b29b      	uxth	r3, r3
 8008492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800849a:	b29c      	uxth	r4, r3
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	441a      	add	r2, r3
 80084a6:	4b34      	ldr	r3, [pc, #208]	; (8008578 <USB_DeactivateEndpoint+0x20c>)
 80084a8:	4323      	orrs	r3, r4
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	b29c      	uxth	r4, r3
 80084bc:	4623      	mov	r3, r4
 80084be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d014      	beq.n	80084f0 <USB_DeactivateEndpoint+0x184>
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084dc:	b29c      	uxth	r4, r3
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	441a      	add	r2, r3
 80084e8:	4b21      	ldr	r3, [pc, #132]	; (8008570 <USB_DeactivateEndpoint+0x204>)
 80084ea:	4323      	orrs	r3, r4
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	881b      	ldrh	r3, [r3, #0]
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008506:	b29c      	uxth	r4, r3
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	441a      	add	r2, r3
 8008512:	4b17      	ldr	r3, [pc, #92]	; (8008570 <USB_DeactivateEndpoint+0x204>)
 8008514:	4323      	orrs	r3, r4
 8008516:	b29b      	uxth	r3, r3
 8008518:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4413      	add	r3, r2
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	b29b      	uxth	r3, r3
 8008528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800852c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008530:	b29c      	uxth	r4, r3
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	441a      	add	r2, r3
 800853c:	4b0d      	ldr	r3, [pc, #52]	; (8008574 <USB_DeactivateEndpoint+0x208>)
 800853e:	4323      	orrs	r3, r4
 8008540:	b29b      	uxth	r3, r3
 8008542:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	b29b      	uxth	r3, r3
 8008552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800855a:	b29c      	uxth	r4, r3
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	441a      	add	r2, r3
 8008566:	4b03      	ldr	r3, [pc, #12]	; (8008574 <USB_DeactivateEndpoint+0x208>)
 8008568:	4323      	orrs	r3, r4
 800856a:	b29b      	uxth	r3, r3
 800856c:	8013      	strh	r3, [r2, #0]
 800856e:	e086      	b.n	800867e <USB_DeactivateEndpoint+0x312>
 8008570:	ffff80c0 	.word	0xffff80c0
 8008574:	ffff8080 	.word	0xffff8080
 8008578:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	b29c      	uxth	r4, r3
 800858a:	4623      	mov	r3, r4
 800858c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d014      	beq.n	80085be <USB_DeactivateEndpoint+0x252>
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085aa:	b29c      	uxth	r4, r3
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	441a      	add	r2, r3
 80085b6:	4b35      	ldr	r3, [pc, #212]	; (800868c <USB_DeactivateEndpoint+0x320>)
 80085b8:	4323      	orrs	r3, r4
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	b29c      	uxth	r4, r3
 80085cc:	4623      	mov	r3, r4
 80085ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d014      	beq.n	8008600 <USB_DeactivateEndpoint+0x294>
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	881b      	ldrh	r3, [r3, #0]
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ec:	b29c      	uxth	r4, r3
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	441a      	add	r2, r3
 80085f8:	4b25      	ldr	r3, [pc, #148]	; (8008690 <USB_DeactivateEndpoint+0x324>)
 80085fa:	4323      	orrs	r3, r4
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4413      	add	r3, r2
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	b29b      	uxth	r3, r3
 800860e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008616:	b29c      	uxth	r4, r3
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	441a      	add	r2, r3
 8008622:	4b1a      	ldr	r3, [pc, #104]	; (800868c <USB_DeactivateEndpoint+0x320>)
 8008624:	4323      	orrs	r3, r4
 8008626:	b29b      	uxth	r3, r3
 8008628:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	881b      	ldrh	r3, [r3, #0]
 8008636:	b29b      	uxth	r3, r3
 8008638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800863c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008640:	b29c      	uxth	r4, r3
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	441a      	add	r2, r3
 800864c:	4b11      	ldr	r3, [pc, #68]	; (8008694 <USB_DeactivateEndpoint+0x328>)
 800864e:	4323      	orrs	r3, r4
 8008650:	b29b      	uxth	r3, r3
 8008652:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	b29b      	uxth	r3, r3
 8008662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800866a:	b29c      	uxth	r4, r3
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	441a      	add	r2, r3
 8008676:	4b07      	ldr	r3, [pc, #28]	; (8008694 <USB_DeactivateEndpoint+0x328>)
 8008678:	4323      	orrs	r3, r4
 800867a:	b29b      	uxth	r3, r3
 800867c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bc90      	pop	{r4, r7}
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	ffffc080 	.word	0xffffc080
 8008690:	ffff80c0 	.word	0xffff80c0
 8008694:	ffff8080 	.word	0xffff8080

08008698 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008698:	b590      	push	{r4, r7, lr}
 800869a:	b095      	sub	sp, #84	; 0x54
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len = ep->xfer_len;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	785b      	ldrb	r3, [r3, #1]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	f040 815f 	bne.w	8008970 <USB_EPStartXfer+0x2d8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	699a      	ldr	r2, [r3, #24]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d909      	bls.n	80086d2 <USB_EPStartXfer+0x3a>
    {
      len = ep->maxpacket;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	699a      	ldr	r2, [r3, #24]
 80086c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086ca:	1ad2      	subs	r2, r2, r3
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	619a      	str	r2, [r3, #24]
 80086d0:	e005      	b.n	80086de <USB_EPStartXfer+0x46>
    }
    else
    {
      len = ep->xfer_len;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	2200      	movs	r2, #0
 80086dc:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	7b1b      	ldrb	r3, [r3, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d11a      	bne.n	800871c <USB_EPStartXfer+0x84>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	6959      	ldr	r1, [r3, #20]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	88da      	ldrh	r2, [r3, #6]
 80086ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fbb0 	bl	8008e58 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80086f8:	687c      	ldr	r4, [r7, #4]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008700:	b29b      	uxth	r3, r3
 8008702:	441c      	add	r4, r3
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	00db      	lsls	r3, r3, #3
 800870a:	4423      	add	r3, r4
 800870c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008710:	633b      	str	r3, [r7, #48]	; 0x30
 8008712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008714:	b29a      	uxth	r2, r3
 8008716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008718:	801a      	strh	r2, [r3, #0]
 800871a:	e10d      	b.n	8008938 <USB_EPStartXfer+0x2a0>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	b29b      	uxth	r3, r3
 800872a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800872e:	2b00      	cmp	r3, #0
 8008730:	d063      	beq.n	80087fa <USB_EPStartXfer+0x162>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008732:	687c      	ldr	r4, [r7, #4]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	785b      	ldrb	r3, [r3, #1]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d145      	bne.n	80087c8 <USB_EPStartXfer+0x130>
 800873c:	687c      	ldr	r4, [r7, #4]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008744:	b29b      	uxth	r3, r3
 8008746:	441c      	add	r4, r3
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	00db      	lsls	r3, r3, #3
 800874e:	4423      	add	r3, r4
 8008750:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008758:	2b00      	cmp	r3, #0
 800875a:	d111      	bne.n	8008780 <USB_EPStartXfer+0xe8>
 800875c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875e:	881a      	ldrh	r2, [r3, #0]
 8008760:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8008764:	4013      	ands	r3, r2
 8008766:	b29a      	uxth	r2, r3
 8008768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876a:	801a      	strh	r2, [r3, #0]
 800876c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008778:	b29a      	uxth	r2, r3
 800877a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877c:	801a      	strh	r2, [r3, #0]
 800877e:	e037      	b.n	80087f0 <USB_EPStartXfer+0x158>
 8008780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008782:	2b3d      	cmp	r3, #61	; 0x3d
 8008784:	d811      	bhi.n	80087aa <USB_EPStartXfer+0x112>
 8008786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008788:	085b      	lsrs	r3, r3, #1
 800878a:	647b      	str	r3, [r7, #68]	; 0x44
 800878c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	d002      	beq.n	800879c <USB_EPStartXfer+0x104>
 8008796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008798:	3301      	adds	r3, #1
 800879a:	647b      	str	r3, [r7, #68]	; 0x44
 800879c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800879e:	b29b      	uxth	r3, r3
 80087a0:	029b      	lsls	r3, r3, #10
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a6:	801a      	strh	r2, [r3, #0]
 80087a8:	e022      	b.n	80087f0 <USB_EPStartXfer+0x158>
 80087aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ac:	095b      	lsrs	r3, r3, #5
 80087ae:	647b      	str	r3, [r7, #68]	; 0x44
 80087b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	029b      	lsls	r3, r3, #10
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c4:	801a      	strh	r2, [r3, #0]
 80087c6:	e013      	b.n	80087f0 <USB_EPStartXfer+0x158>
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	785b      	ldrb	r3, [r3, #1]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d10f      	bne.n	80087f0 <USB_EPStartXfer+0x158>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	441c      	add	r4, r3
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	00db      	lsls	r3, r3, #3
 80087e0:	4423      	add	r3, r4
 80087e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80087e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80087e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ee:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	895b      	ldrh	r3, [r3, #10]
 80087f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80087f8:	e062      	b.n	80088c0 <USB_EPStartXfer+0x228>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	785b      	ldrb	r3, [r3, #1]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d145      	bne.n	800888e <USB_EPStartXfer+0x1f6>
 8008802:	687c      	ldr	r4, [r7, #4]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800880a:	b29b      	uxth	r3, r3
 800880c:	441c      	add	r4, r3
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	00db      	lsls	r3, r3, #3
 8008814:	4423      	add	r3, r4
 8008816:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800881a:	627b      	str	r3, [r7, #36]	; 0x24
 800881c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800881e:	2b00      	cmp	r3, #0
 8008820:	d111      	bne.n	8008846 <USB_EPStartXfer+0x1ae>
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	881a      	ldrh	r2, [r3, #0]
 8008826:	f243 33ff 	movw	r3, #13311	; 0x33ff
 800882a:	4013      	ands	r3, r2
 800882c:	b29a      	uxth	r2, r3
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008830:	801a      	strh	r2, [r3, #0]
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	881b      	ldrh	r3, [r3, #0]
 8008836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800883a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800883e:	b29a      	uxth	r2, r3
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	801a      	strh	r2, [r3, #0]
 8008844:	e038      	b.n	80088b8 <USB_EPStartXfer+0x220>
 8008846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008848:	2b3d      	cmp	r3, #61	; 0x3d
 800884a:	d811      	bhi.n	8008870 <USB_EPStartXfer+0x1d8>
 800884c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800884e:	085b      	lsrs	r3, r3, #1
 8008850:	643b      	str	r3, [r7, #64]	; 0x40
 8008852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008854:	f003 0301 	and.w	r3, r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <USB_EPStartXfer+0x1ca>
 800885c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800885e:	3301      	adds	r3, #1
 8008860:	643b      	str	r3, [r7, #64]	; 0x40
 8008862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008864:	b29b      	uxth	r3, r3
 8008866:	029b      	lsls	r3, r3, #10
 8008868:	b29a      	uxth	r2, r3
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	801a      	strh	r2, [r3, #0]
 800886e:	e023      	b.n	80088b8 <USB_EPStartXfer+0x220>
 8008870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008872:	095b      	lsrs	r3, r3, #5
 8008874:	643b      	str	r3, [r7, #64]	; 0x40
 8008876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008878:	b29b      	uxth	r3, r3
 800887a:	029b      	lsls	r3, r3, #10
 800887c:	b29b      	uxth	r3, r3
 800887e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008886:	b29a      	uxth	r2, r3
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	801a      	strh	r2, [r3, #0]
 800888c:	e014      	b.n	80088b8 <USB_EPStartXfer+0x220>
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	785b      	ldrb	r3, [r3, #1]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d110      	bne.n	80088b8 <USB_EPStartXfer+0x220>
 8008896:	687c      	ldr	r4, [r7, #4]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800889e:	b29b      	uxth	r3, r3
 80088a0:	441c      	add	r4, r3
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	00db      	lsls	r3, r3, #3
 80088a8:	4423      	add	r3, r4
 80088aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80088ae:	623b      	str	r3, [r7, #32]
 80088b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	6a3b      	ldr	r3, [r7, #32]
 80088b6:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	891b      	ldrh	r3, [r3, #8]
 80088bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	6959      	ldr	r1, [r3, #20]
 80088c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fac3 	bl	8008e58 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	785b      	ldrb	r3, [r3, #1]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d115      	bne.n	8008906 <USB_EPStartXfer+0x26e>
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088f0:	b29c      	uxth	r4, r3
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	441a      	add	r2, r3
 80088fc:	4b9a      	ldr	r3, [pc, #616]	; (8008b68 <USB_EPStartXfer+0x4d0>)
 80088fe:	4323      	orrs	r3, r4
 8008900:	b29b      	uxth	r3, r3
 8008902:	8013      	strh	r3, [r2, #0]
 8008904:	e018      	b.n	8008938 <USB_EPStartXfer+0x2a0>
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	785b      	ldrb	r3, [r3, #1]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d114      	bne.n	8008938 <USB_EPStartXfer+0x2a0>
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4413      	add	r3, r2
 8008918:	881b      	ldrh	r3, [r3, #0]
 800891a:	b29b      	uxth	r3, r3
 800891c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008924:	b29c      	uxth	r4, r3
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	441a      	add	r2, r3
 8008930:	4b8e      	ldr	r3, [pc, #568]	; (8008b6c <USB_EPStartXfer+0x4d4>)
 8008932:	4323      	orrs	r3, r4
 8008934:	b29b      	uxth	r3, r3
 8008936:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	b29b      	uxth	r3, r3
 8008946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800894a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800894e:	b29c      	uxth	r4, r3
 8008950:	f084 0310 	eor.w	r3, r4, #16
 8008954:	b29c      	uxth	r4, r3
 8008956:	f084 0320 	eor.w	r3, r4, #32
 800895a:	b29c      	uxth	r4, r3
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	441a      	add	r2, r3
 8008966:	4b82      	ldr	r3, [pc, #520]	; (8008b70 <USB_EPStartXfer+0x4d8>)
 8008968:	4323      	orrs	r3, r4
 800896a:	b29b      	uxth	r3, r3
 800896c:	8013      	strh	r3, [r2, #0]
 800896e:	e13f      	b.n	8008bf0 <USB_EPStartXfer+0x558>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	699a      	ldr	r2, [r3, #24]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	429a      	cmp	r2, r3
 800897a:	d909      	bls.n	8008990 <USB_EPStartXfer+0x2f8>
    {
      len = ep->maxpacket;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	699a      	ldr	r2, [r3, #24]
 8008986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008988:	1ad2      	subs	r2, r2, r3
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	619a      	str	r2, [r3, #24]
 800898e:	e005      	b.n	800899c <USB_EPStartXfer+0x304>
    }
    else
    {
      len = ep->xfer_len;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2200      	movs	r2, #0
 800899a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	7b1b      	ldrb	r3, [r3, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d145      	bne.n	8008a30 <USB_EPStartXfer+0x398>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80089a4:	687c      	ldr	r4, [r7, #4]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	441c      	add	r4, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	00db      	lsls	r3, r3, #3
 80089b6:	4423      	add	r3, r4
 80089b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089bc:	61fb      	str	r3, [r7, #28]
 80089be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d111      	bne.n	80089e8 <USB_EPStartXfer+0x350>
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	881a      	ldrh	r2, [r3, #0]
 80089c8:	f243 33ff 	movw	r3, #13311	; 0x33ff
 80089cc:	4013      	ands	r3, r2
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	801a      	strh	r2, [r3, #0]
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	881b      	ldrh	r3, [r3, #0]
 80089d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	801a      	strh	r2, [r3, #0]
 80089e6:	e0e8      	b.n	8008bba <USB_EPStartXfer+0x522>
 80089e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089ea:	2b3d      	cmp	r3, #61	; 0x3d
 80089ec:	d811      	bhi.n	8008a12 <USB_EPStartXfer+0x37a>
 80089ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089f0:	085b      	lsrs	r3, r3, #1
 80089f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d002      	beq.n	8008a04 <USB_EPStartXfer+0x36c>
 80089fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a00:	3301      	adds	r3, #1
 8008a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	029b      	lsls	r3, r3, #10
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	801a      	strh	r2, [r3, #0]
 8008a10:	e0d3      	b.n	8008bba <USB_EPStartXfer+0x522>
 8008a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a14:	095b      	lsrs	r3, r3, #5
 8008a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	029b      	lsls	r3, r3, #10
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	801a      	strh	r2, [r3, #0]
 8008a2e:	e0c4      	b.n	8008bba <USB_EPStartXfer+0x522>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	785b      	ldrb	r3, [r3, #1]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d145      	bne.n	8008ac4 <USB_EPStartXfer+0x42c>
 8008a38:	687c      	ldr	r4, [r7, #4]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	441c      	add	r4, r3
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	00db      	lsls	r3, r3, #3
 8008a4a:	4423      	add	r3, r4
 8008a4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a50:	61bb      	str	r3, [r7, #24]
 8008a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d111      	bne.n	8008a7c <USB_EPStartXfer+0x3e4>
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	881a      	ldrh	r2, [r3, #0]
 8008a5c:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8008a60:	4013      	ands	r3, r2
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	801a      	strh	r2, [r3, #0]
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	881b      	ldrh	r3, [r3, #0]
 8008a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	801a      	strh	r2, [r3, #0]
 8008a7a:	e038      	b.n	8008aee <USB_EPStartXfer+0x456>
 8008a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a7e:	2b3d      	cmp	r3, #61	; 0x3d
 8008a80:	d811      	bhi.n	8008aa6 <USB_EPStartXfer+0x40e>
 8008a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a84:	085b      	lsrs	r3, r3, #1
 8008a86:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d002      	beq.n	8008a98 <USB_EPStartXfer+0x400>
 8008a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a94:	3301      	adds	r3, #1
 8008a96:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	029b      	lsls	r3, r3, #10
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	801a      	strh	r2, [r3, #0]
 8008aa4:	e023      	b.n	8008aee <USB_EPStartXfer+0x456>
 8008aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aa8:	095b      	lsrs	r3, r3, #5
 8008aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8008aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	029b      	lsls	r3, r3, #10
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	801a      	strh	r2, [r3, #0]
 8008ac2:	e014      	b.n	8008aee <USB_EPStartXfer+0x456>
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	785b      	ldrb	r3, [r3, #1]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d110      	bne.n	8008aee <USB_EPStartXfer+0x456>
 8008acc:	687c      	ldr	r4, [r7, #4]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	441c      	add	r4, r3
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	00db      	lsls	r3, r3, #3
 8008ade:	4423      	add	r3, r4
 8008ae0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ae4:	617b      	str	r3, [r7, #20]
 8008ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	801a      	strh	r2, [r3, #0]
 8008aee:	687c      	ldr	r4, [r7, #4]
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	785b      	ldrb	r3, [r3, #1]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d14c      	bne.n	8008b92 <USB_EPStartXfer+0x4fa>
 8008af8:	687c      	ldr	r4, [r7, #4]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	441c      	add	r4, r3
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	00db      	lsls	r3, r3, #3
 8008b0a:	4423      	add	r3, r4
 8008b0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b10:	613b      	str	r3, [r7, #16]
 8008b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d111      	bne.n	8008b3c <USB_EPStartXfer+0x4a4>
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	881a      	ldrh	r2, [r3, #0]
 8008b1c:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8008b20:	4013      	ands	r3, r2
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	801a      	strh	r2, [r3, #0]
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	881b      	ldrh	r3, [r3, #0]
 8008b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	801a      	strh	r2, [r3, #0]
 8008b3a:	e03e      	b.n	8008bba <USB_EPStartXfer+0x522>
 8008b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b3e:	2b3d      	cmp	r3, #61	; 0x3d
 8008b40:	d818      	bhi.n	8008b74 <USB_EPStartXfer+0x4dc>
 8008b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b44:	085b      	lsrs	r3, r3, #1
 8008b46:	637b      	str	r3, [r7, #52]	; 0x34
 8008b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b4a:	f003 0301 	and.w	r3, r3, #1
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <USB_EPStartXfer+0x4c0>
 8008b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b54:	3301      	adds	r3, #1
 8008b56:	637b      	str	r3, [r7, #52]	; 0x34
 8008b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	029b      	lsls	r3, r3, #10
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	801a      	strh	r2, [r3, #0]
 8008b64:	e029      	b.n	8008bba <USB_EPStartXfer+0x522>
 8008b66:	bf00      	nop
 8008b68:	ffff80c0 	.word	0xffff80c0
 8008b6c:	ffffc080 	.word	0xffffc080
 8008b70:	ffff8080 	.word	0xffff8080
 8008b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b76:	095b      	lsrs	r3, r3, #5
 8008b78:	637b      	str	r3, [r7, #52]	; 0x34
 8008b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	029b      	lsls	r3, r3, #10
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	801a      	strh	r2, [r3, #0]
 8008b90:	e013      	b.n	8008bba <USB_EPStartXfer+0x522>
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	785b      	ldrb	r3, [r3, #1]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d10f      	bne.n	8008bba <USB_EPStartXfer+0x522>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	441c      	add	r4, r3
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	4423      	add	r3, r4
 8008bac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008bb0:	60fb      	str	r3, [r7, #12]
 8008bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd0:	b29c      	uxth	r4, r3
 8008bd2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008bd6:	b29c      	uxth	r4, r3
 8008bd8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008bdc:	b29c      	uxth	r4, r3
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	441a      	add	r2, r3
 8008be8:	4b04      	ldr	r3, [pc, #16]	; (8008bfc <USB_EPStartXfer+0x564>)
 8008bea:	4323      	orrs	r3, r4
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3754      	adds	r7, #84	; 0x54
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd90      	pop	{r4, r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	ffff8080 	.word	0xffff8080

08008c00 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c00:	b490      	push	{r4, r7}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	785b      	ldrb	r3, [r3, #1]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d018      	beq.n	8008c44 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c28:	b29c      	uxth	r4, r3
 8008c2a:	f084 0310 	eor.w	r3, r4, #16
 8008c2e:	b29c      	uxth	r4, r3
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	441a      	add	r2, r3
 8008c3a:	4b11      	ldr	r3, [pc, #68]	; (8008c80 <USB_EPSetStall+0x80>)
 8008c3c:	4323      	orrs	r3, r4
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	8013      	strh	r3, [r2, #0]
 8008c42:	e017      	b.n	8008c74 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	881b      	ldrh	r3, [r3, #0]
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c5a:	b29c      	uxth	r4, r3
 8008c5c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008c60:	b29c      	uxth	r4, r3
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	441a      	add	r2, r3
 8008c6c:	4b04      	ldr	r3, [pc, #16]	; (8008c80 <USB_EPSetStall+0x80>)
 8008c6e:	4323      	orrs	r3, r4
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bc90      	pop	{r4, r7}
 8008c7e:	4770      	bx	lr
 8008c80:	ffff8080 	.word	0xffff8080

08008c84 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c84:	b490      	push	{r4, r7}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	785b      	ldrb	r3, [r3, #1]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d03c      	beq.n	8008d10 <USB_EPClearStall+0x8c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	b29c      	uxth	r4, r3
 8008ca4:	4623      	mov	r3, r4
 8008ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d014      	beq.n	8008cd8 <USB_EPClearStall+0x54>
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	881b      	ldrh	r3, [r3, #0]
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc4:	b29c      	uxth	r4, r3
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	441a      	add	r2, r3
 8008cd0:	4b30      	ldr	r3, [pc, #192]	; (8008d94 <USB_EPClearStall+0x110>)
 8008cd2:	4323      	orrs	r3, r4
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	881b      	ldrh	r3, [r3, #0]
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cee:	b29c      	uxth	r4, r3
 8008cf0:	f084 0310 	eor.w	r3, r4, #16
 8008cf4:	b29c      	uxth	r4, r3
 8008cf6:	f084 0320 	eor.w	r3, r4, #32
 8008cfa:	b29c      	uxth	r4, r3
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	441a      	add	r2, r3
 8008d06:	4b24      	ldr	r3, [pc, #144]	; (8008d98 <USB_EPClearStall+0x114>)
 8008d08:	4323      	orrs	r3, r4
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	8013      	strh	r3, [r2, #0]
 8008d0e:	e03b      	b.n	8008d88 <USB_EPClearStall+0x104>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	b29c      	uxth	r4, r3
 8008d1e:	4623      	mov	r3, r4
 8008d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d014      	beq.n	8008d52 <USB_EPClearStall+0xce>
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	881b      	ldrh	r3, [r3, #0]
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d3e:	b29c      	uxth	r4, r3
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	441a      	add	r2, r3
 8008d4a:	4b14      	ldr	r3, [pc, #80]	; (8008d9c <USB_EPClearStall+0x118>)
 8008d4c:	4323      	orrs	r3, r4
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	4413      	add	r3, r2
 8008d5c:	881b      	ldrh	r3, [r3, #0]
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d68:	b29c      	uxth	r4, r3
 8008d6a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008d6e:	b29c      	uxth	r4, r3
 8008d70:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008d74:	b29c      	uxth	r4, r3
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	441a      	add	r2, r3
 8008d80:	4b05      	ldr	r3, [pc, #20]	; (8008d98 <USB_EPClearStall+0x114>)
 8008d82:	4323      	orrs	r3, r4
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bc90      	pop	{r4, r7}
 8008d92:	4770      	bx	lr
 8008d94:	ffff80c0 	.word	0xffff80c0
 8008d98:	ffff8080 	.word	0xffff8080
 8008d9c:	ffffc080 	.word	0xffffc080

08008da0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	460b      	mov	r3, r1
 8008daa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008dac:	78fb      	ldrb	r3, [r7, #3]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d103      	bne.n	8008dba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2280      	movs	r2, #128	; 0x80
 8008db6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b083      	sub	sp, #12
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008e32:	68fb      	ldr	r3, [r7, #12]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3714      	adds	r7, #20
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b08d      	sub	sp, #52	; 0x34
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	4611      	mov	r1, r2
 8008e64:	461a      	mov	r2, r3
 8008e66:	460b      	mov	r3, r1
 8008e68:	80fb      	strh	r3, [r7, #6]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008e6e:	88bb      	ldrh	r3, [r7, #4]
 8008e70:	3301      	adds	r3, #1
 8008e72:	085b      	lsrs	r3, r3, #1
 8008e74:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e7e:	88fa      	ldrh	r2, [r7, #6]
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e88:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e8e:	e01b      	b.n	8008ec8 <USB_WritePMA+0x70>
  {
    temp1 = (uint16_t) * pBuf;
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e98:	3301      	adds	r3, #1
 8008e9a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	021b      	lsls	r3, r3, #8
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb8:	3302      	adds	r3, #2
 8008eba:	62bb      	str	r3, [r7, #40]	; 0x28

    if (PMA_ACCESS > 1U)
    {
      pdwVal++;
    }
    pBuf++;
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1e0      	bne.n	8008e90 <USB_WritePMA+0x38>
  }
}
 8008ece:	bf00      	nop
 8008ed0:	3734      	adds	r7, #52	; 0x34
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b08b      	sub	sp, #44	; 0x2c
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	60f8      	str	r0, [r7, #12]
 8008ee2:	60b9      	str	r1, [r7, #8]
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	460b      	mov	r3, r1
 8008eea:	80fb      	strh	r3, [r7, #6]
 8008eec:	4613      	mov	r3, r2
 8008eee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008ef0:	88bb      	ldrh	r3, [r7, #4]
 8008ef2:	085b      	lsrs	r3, r3, #1
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f00:	88fa      	ldrh	r2, [r7, #6]
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	4413      	add	r3, r2
 8008f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f0a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f10:	e017      	b.n	8008f42 <USB_ReadPMA+0x68>
  {
    temp = *pdwVal;
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	881b      	ldrh	r3, [r3, #0]
 8008f16:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	3302      	adds	r3, #2
 8008f1c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	0a1b      	lsrs	r3, r3, #8
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d1e4      	bne.n	8008f12 <USB_ReadPMA+0x38>
    {
      pdwVal++;
    }
  }

  if ((wNBytes % 2U) != 0U)
 8008f48:	88bb      	ldrh	r3, [r7, #4]
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00c      	beq.n	8008f6e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	881b      	ldrh	r3, [r3, #0]
 8008f58:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008f5a:	6a3b      	ldr	r3, [r7, #32]
 8008f5c:	3302      	adds	r3, #2
 8008f5e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	61fb      	str	r3, [r7, #28]
  }
}
 8008f6e:	bf00      	nop
 8008f70:	372c      	adds	r7, #44	; 0x2c
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <dmx_registerCallback>:
* Variable Declarations
*******************************************************************************/
/******************************************************************************
* Function Definitions
*******************************************************************************/
void dmx_registerCallback(dmx_cfg_Instance *dmx, dmx_cfg_callback callback){
 8008f7a:	b480      	push	{r7}
 8008f7c:	b083      	sub	sp, #12
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	6039      	str	r1, [r7, #0]
	dmx->callback = callback;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	655a      	str	r2, [r3, #84]	; 0x54
}
 8008f8a:	bf00      	nop
 8008f8c:	370c      	adds	r7, #12
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
	...

08008f98 <dmx_init>:

void dmx_init(dmx_cfg_Instance *dmx){
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
	if(dmx->type == dmx_cfg_TYPE_TRANSMITTER){
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d126      	bne.n	8008ff6 <dmx_init+0x5e>
		gpio_ConfigureToFloating(dmx->txBreakPort, dmx->txBreakPin);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	891b      	ldrh	r3, [r3, #8]
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	4610      	mov	r0, r2
 8008fb4:	f002 f9a0 	bl	800b2f8 <gpio_ConfigureToFloating>
		dmx->txState = dmx_cfg_TX_STATE_NONE;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	705a      	strb	r2, [r3, #1]
		dmx->txBreakToBreakCnt = 0;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	621a      	str	r2, [r3, #32]
		dmx->txBreakToBreakTime_ms = dmx->txBreakToBreakTime_ms + (dmx->txBreakTime_us + dmx->txMarkAfterBreakTime_us + dmx->txMarkBetweenTime_us*dmx->universeSize)/1000;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	69da      	ldr	r2, [r3, #28]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6919      	ldr	r1, [r3, #16]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	4419      	add	r1, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
 8008fdc:	fb00 f303 	mul.w	r3, r0, r3
 8008fe0:	440b      	add	r3, r1
 8008fe2:	4911      	ldr	r1, [pc, #68]	; (8009028 <dmx_init+0x90>)
 8008fe4:	fb81 0103 	smull	r0, r1, r1, r3
 8008fe8:	1189      	asrs	r1, r1, #6
 8008fea:	17db      	asrs	r3, r3, #31
 8008fec:	1acb      	subs	r3, r1, r3
 8008fee:	441a      	add	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	61da      	str	r2, [r3, #28]
 8008ff4:	e010      	b.n	8009018 <dmx_init+0x80>
	}else if(dmx->type == dmx_cfg_TYPE_RECEIVER){
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d10c      	bne.n	8009018 <dmx_init+0x80>
		dmx->rxState = dmx_cfg_RX_STATE_NONE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		dmx->rxFallingTime = 0;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	631a      	str	r2, [r3, #48]	; 0x30
		dmx->rxRisingTime = 0;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	635a      	str	r2, [r3, #52]	; 0x34
		dmx->rxTimerUpdateCnt = 0;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	641a      	str	r2, [r3, #64]	; 0x40
	}
	dmx->universeCnt = 0;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8009020:	bf00      	nop
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	10624dd3 	.word	0x10624dd3

0800902c <dmx_loop>:

void dmx_loop(dmx_cfg_Instance *dmx){
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
	if(dmx->type == dmx_cfg_TYPE_TRANSMITTER){
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10e      	bne.n	800905a <dmx_loop+0x2e>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	785b      	ldrb	r3, [r3, #1]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d029      	beq.n	8009098 <dmx_loop+0x6c>
		if(dmx->txBreakToBreakCnt == 0){
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a1b      	ldr	r3, [r3, #32]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d106      	bne.n	800905a <dmx_loop+0x2e>
			dmx_sendStart(dmx);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f83a 	bl	80090c6 <dmx_sendStart>
			dmx->txBreakToBreakCnt = dmx->txBreakToBreakTime_ms;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	69da      	ldr	r2, [r3, #28]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	621a      	str	r2, [r3, #32]
		}
	}else if(dmx->type == dmx_cfg_TYPE_RECEIVER){
	}
	/*Loop flags*/
	if(dmx->universeComplete){
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8009060:	2b00      	cmp	r3, #0
 8009062:	d01a      	beq.n	800909a <dmx_loop+0x6e>
		dmx->universeComplete = false;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
		if(dmx->type == dmx_cfg_TYPE_TRANSMITTER) dmx->callbackType = dmx_cfg_CALL_TX_COMPLETE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d104      	bne.n	800907e <dmx_loop+0x52>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800907c:	e003      	b.n	8009086 <dmx_loop+0x5a>
		else dmx->callbackType = dmx_cfg_CALL_RX_COMPLETE;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		if(dmx->callback) dmx->callback(dmx);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800908a:	2b00      	cmp	r3, #0
 800908c:	d005      	beq.n	800909a <dmx_loop+0x6e>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	4798      	blx	r3
 8009096:	e000      	b.n	800909a <dmx_loop+0x6e>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8009098:	bf00      	nop
	}
}
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <dmx_1ms>:

void dmx_1ms(dmx_cfg_Instance *dmx){
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
	if(dmx->txBreakToBreakCnt > 0) --dmx->txBreakToBreakCnt;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a1b      	ldr	r3, [r3, #32]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	dd04      	ble.n	80090ba <dmx_1ms+0x1a>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6a1b      	ldr	r3, [r3, #32]
 80090b4:	1e5a      	subs	r2, r3, #1
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	621a      	str	r2, [r3, #32]
}
 80090ba:	bf00      	nop
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <dmx_sendStart>:

void dmx_sendStart(dmx_cfg_Instance *dmx){
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d130      	bne.n	8009138 <dmx_sendStart+0x72>
	if(dmx->universe == NULL) return;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d02e      	beq.n	800913c <dmx_sendStart+0x76>
	if(dmx->txBreakToBreakTime_ms < dmx_cfg_MIN_BREAK_TO_BREAK_TIME_MS) dmx->txBreakToBreakTime_ms = dmx_cfg_MIN_BREAK_TO_BREAK_TIME_MS;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	69db      	ldr	r3, [r3, #28]
 80090e2:	2b18      	cmp	r3, #24
 80090e4:	dc02      	bgt.n	80090ec <dmx_sendStart+0x26>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2219      	movs	r2, #25
 80090ea:	61da      	str	r2, [r3, #28]
	if(dmx->txBreakTime_us < dmx_cfg_MIN_BREAK_TIME_US) dmx->txBreakTime_us = dmx_cfg_MIN_BREAK_TIME_US;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	2b5f      	cmp	r3, #95	; 0x5f
 80090f2:	dc02      	bgt.n	80090fa <dmx_sendStart+0x34>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2260      	movs	r2, #96	; 0x60
 80090f8:	611a      	str	r2, [r3, #16]
	if(dmx->txMarkAfterBreakTime_us < dmx_cfg_MIN_MARK_AFTER_BREAK_TIME_US) dmx->txMarkAfterBreakTime_us = dmx_cfg_MIN_MARK_AFTER_BREAK_TIME_US;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	695b      	ldr	r3, [r3, #20]
 80090fe:	2b0b      	cmp	r3, #11
 8009100:	dc02      	bgt.n	8009108 <dmx_sendStart+0x42>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	220c      	movs	r2, #12
 8009106:	615a      	str	r2, [r3, #20]
	dmx->universeComplete = false;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	dmx->txState = dmx_cfg_TX_STATE_SEND_BREAK;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2202      	movs	r2, #2
 8009114:	705a      	strb	r2, [r3, #1]
	tim_setNewTimeAndStart(dmx->txTimer, dmx->txBreakTime_us);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68da      	ldr	r2, [r3, #12]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	4619      	mov	r1, r3
 8009120:	4610      	mov	r0, r2
 8009122:	f002 fde9 	bl	800bcf8 <tim_setNewTimeAndStart>
	gpio_ConfigureToPushPull(dmx->txBreakPort, dmx->txBreakPin);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	685a      	ldr	r2, [r3, #4]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	891b      	ldrh	r3, [r3, #8]
 800912e:	4619      	mov	r1, r3
 8009130:	4610      	mov	r0, r2
 8009132:	f002 f8ff 	bl	800b334 <gpio_ConfigureToPushPull>
 8009136:	e002      	b.n	800913e <dmx_sendStart+0x78>
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 8009138:	bf00      	nop
 800913a:	e000      	b.n	800913e <dmx_sendStart+0x78>
	if(dmx->universe == NULL) return;
 800913c:	bf00      	nop
}
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <dmx_txStart>:
	else if(timeIdx == dmx_cfg_TIME_MARK_AFTER_BREAK) dmx->txMarkAfterBreakTime_us = time_us;
	else if(timeIdx == dmx_cfg_TIME_MARK_BETWEEN) dmx->txMarkBetweenTime_us = time_us;
	else if(timeIdx == dmx_cfg_TIME_BREAK_TO_BREAK) dmx->txBreakToBreakTime_ms = (time_us + dmx->txBreakTime_us + dmx->txMarkAfterBreakTime_us + dmx->txMarkBetweenTime_us*dmx->universeSize)/1000;
}

void dmx_txStart(dmx_cfg_Instance *dmx){
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d103      	bne.n	800915c <dmx_txStart+0x18>
	dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	705a      	strb	r2, [r3, #1]
 800915a:	e000      	b.n	800915e <dmx_txStart+0x1a>
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 800915c:	bf00      	nop
}
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <dmx_rxStart>:
void dmx_txStop(dmx_cfg_Instance *dmx){
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
	dmx->txState = dmx_cfg_TX_STATE_NONE;
}

void dmx_rxStart(dmx_cfg_Instance *dmx){
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_RECEIVER) return;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d109      	bne.n	800918c <dmx_rxStart+0x24>
	app_uart_enableReceiveInt(dmx->uart);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800917c:	4618      	mov	r0, r3
 800917e:	f7f9 fe98 	bl	8002eb2 <app_uart_enableReceiveInt>
	dmx->rxState = dmx_cfg_RX_STATE_WAIT_FOR_BREAK;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800918a:	e000      	b.n	800918e <dmx_rxStart+0x26>
	if(dmx->type != dmx_cfg_TYPE_RECEIVER) return;
 800918c:	bf00      	nop
}
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <dmx_irqTxTimerHandler>:
void dmx_incrementRxUpdateCnt(dmx_cfg_Instance *dmx){
	++dmx->rxTimerUpdateCnt;
}

/*Transmit IRQs*/
void dmx_irqTxTimerHandler(dmx_cfg_Instance *dmx){
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
	if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	785b      	ldrb	r3, [r3, #1]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d05c      	beq.n	800925e <dmx_irqTxTimerHandler+0xca>
	if(dmx->txState == dmx_cfg_TX_STATE_SEND_BREAK){
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	785b      	ldrb	r3, [r3, #1]
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d113      	bne.n	80091d4 <dmx_irqTxTimerHandler+0x40>
		gpio_ConfigureToFloating(dmx->txBreakPort, dmx->txBreakPin);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685a      	ldr	r2, [r3, #4]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	891b      	ldrh	r3, [r3, #8]
 80091b4:	4619      	mov	r1, r3
 80091b6:	4610      	mov	r0, r2
 80091b8:	f002 f89e 	bl	800b2f8 <gpio_ConfigureToFloating>
		tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkAfterBreakTime_us);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68da      	ldr	r2, [r3, #12]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	695b      	ldr	r3, [r3, #20]
 80091c4:	4619      	mov	r1, r3
 80091c6:	4610      	mov	r0, r2
 80091c8:	f002 fd96 	bl	800bcf8 <tim_setNewTimeAndStart>
		dmx->txState = dmx_cfg_TX_STATE_SEND_MARK;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2203      	movs	r2, #3
 80091d0:	705a      	strb	r2, [r3, #1]
 80091d2:	e045      	b.n	8009260 <dmx_irqTxTimerHandler+0xcc>
	}else if(dmx->txState == dmx_cfg_TX_STATE_SEND_MARK){
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	785b      	ldrb	r3, [r3, #1]
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d133      	bne.n	8009244 <dmx_irqTxTimerHandler+0xb0>
		dmx->universeCnt = 0;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		dmx->uart->CR1 &= ~USART_CR1_TXEIE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80091ec:	6812      	ldr	r2, [r2, #0]
 80091ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091f2:	601a      	str	r2, [r3, #0]
		dmx->uart->TDR = dmx->universeStartCode;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80091fe:	b292      	uxth	r2, r2
 8009200:	851a      	strh	r2, [r3, #40]	; 0x28
		if(dmx->txMarkBetweenTime_us == 0) {
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	699b      	ldr	r3, [r3, #24]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d110      	bne.n	800922c <dmx_irqTxTimerHandler+0x98>
			dmx->uart->CR1 |= USART_CR1_TXEIE;		//start with transmission --> enable transmitbuffer empty interrupt
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009212:	6812      	ldr	r2, [r2, #0]
 8009214:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009218:	601a      	str	r2, [r3, #0]
			tim_stop(dmx->txTimer);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	4618      	mov	r0, r3
 8009220:	f002 fda2 	bl	800bd68 <tim_stop>
			dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;	//The whole universe can be transmitted as fast as possible
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	705a      	strb	r2, [r3, #1]
 800922a:	e019      	b.n	8009260 <dmx_irqTxTimerHandler+0xcc>
		}
		else{
			tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkBetweenTime_us);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	68da      	ldr	r2, [r3, #12]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	699b      	ldr	r3, [r3, #24]
 8009234:	4619      	mov	r1, r3
 8009236:	4610      	mov	r0, r2
 8009238:	f002 fd5e 	bl	800bcf8 <tim_setNewTimeAndStart>
			dmx->txState = dmx_cfg_TX_STATE_SEND_UNIVERSE;	//The universe can be transmitted with defined delay between all data bytes
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2205      	movs	r2, #5
 8009240:	705a      	strb	r2, [r3, #1]
 8009242:	e00d      	b.n	8009260 <dmx_irqTxTimerHandler+0xcc>
		}
	}else if(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE){
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	785b      	ldrb	r3, [r3, #1]
 8009248:	2b05      	cmp	r3, #5
 800924a:	d109      	bne.n	8009260 <dmx_irqTxTimerHandler+0xcc>
		dmx->uart->CR1 |= USART_CR1_TXEIE;		//start with transmission --> enable transmitbuffer empty interrupt
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009254:	6812      	ldr	r2, [r2, #0]
 8009256:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800925a:	601a      	str	r2, [r3, #0]
 800925c:	e000      	b.n	8009260 <dmx_irqTxTimerHandler+0xcc>
	if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 800925e:	bf00      	nop
	}
}
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <dmx_irqTxInterfaceHandler>:

void dmx_irqTxInterfaceHandler(dmx_cfg_Instance *dmx){
 8009266:	b580      	push	{r7, lr}
 8009268:	b082      	sub	sp, #8
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
	if (dmx->uart->ISR & USART_ISR_TXE){				//transmit dmx values
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009272:	69db      	ldr	r3, [r3, #28]
 8009274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009278:	2b00      	cmp	r3, #0
 800927a:	d066      	beq.n	800934a <dmx_irqTxInterfaceHandler+0xe4>
		dmx->uart->ISR &= ~USART_ISR_TXE; //Kill transmit-buffer empty flag
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009284:	69d2      	ldr	r2, [r2, #28]
 8009286:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800928a:	61da      	str	r2, [r3, #28]
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	785b      	ldrb	r3, [r3, #1]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d059      	beq.n	8009348 <dmx_irqTxInterfaceHandler+0xe2>
		if((dmx->txState == dmx_cfg_TX_STATE_WAIT_FOR_BREAK)||(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE)){
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	785b      	ldrb	r3, [r3, #1]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d003      	beq.n	80092a4 <dmx_irqTxInterfaceHandler+0x3e>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	785b      	ldrb	r3, [r3, #1]
 80092a0:	2b05      	cmp	r3, #5
 80092a2:	d152      	bne.n	800934a <dmx_irqTxInterfaceHandler+0xe4>
			if(dmx->universeCnt < dmx->universeSize){
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d230      	bcs.n	8009316 <dmx_irqTxInterfaceHandler+0xb0>
				dmx->uart->CR1 &= ~USART_CR1_TXEIE;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80092bc:	6812      	ldr	r2, [r2, #0]
 80092be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092c2:	601a      	str	r2, [r3, #0]
				dmx->uart->TDR = dmx->universe[dmx->universeCnt];
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80092cc:	6879      	ldr	r1, [r7, #4]
 80092ce:	f8b1 1050 	ldrh.w	r1, [r1, #80]	; 0x50
 80092d2:	440a      	add	r2, r1
 80092d4:	7812      	ldrb	r2, [r2, #0]
 80092d6:	b292      	uxth	r2, r2
 80092d8:	851a      	strh	r2, [r3, #40]	; 0x28
				dmx->universeCnt++;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092e0:	3301      	adds	r3, #1
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				if(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE) tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkBetweenTime_us);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	785b      	ldrb	r3, [r3, #1]
 80092ee:	2b05      	cmp	r3, #5
 80092f0:	d108      	bne.n	8009304 <dmx_irqTxInterfaceHandler+0x9e>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	68da      	ldr	r2, [r3, #12]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	699b      	ldr	r3, [r3, #24]
 80092fa:	4619      	mov	r1, r3
 80092fc:	4610      	mov	r0, r2
 80092fe:	f002 fcfb 	bl	800bcf8 <tim_setNewTimeAndStart>
 8009302:	e022      	b.n	800934a <dmx_irqTxInterfaceHandler+0xe4>
				else dmx->uart->CR1 |= USART_CR1_TXEIE;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800930c:	6812      	ldr	r2, [r2, #0]
 800930e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	e019      	b.n	800934a <dmx_irqTxInterfaceHandler+0xe4>
			}else{
				dmx->universeCnt = 0;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				dmx->uart->CR1 &= ~USART_CR1_TXEIE;	//disable transmit-buffer empty interrupt
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009326:	6812      	ldr	r2, [r2, #0]
 8009328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800932c:	601a      	str	r2, [r3, #0]
				dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	705a      	strb	r2, [r3, #1]
				tim_stop(dmx->txTimer);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	4618      	mov	r0, r3
 800933a:	f002 fd15 	bl	800bd68 <tim_stop>
				dmx->universeComplete = true;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8009346:	e000      	b.n	800934a <dmx_irqTxInterfaceHandler+0xe4>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8009348:	bf00      	nop
			}
		}

	}
}
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <dmx_irqRxInterfaceHandler>:
/*Receive IRQs*/
void dmx_irqRxTimerHandler(dmx_cfg_Instance *dmx){
//TODO: Add measurement of break
}

void dmx_irqRxInterfaceHandler(dmx_cfg_Instance *dmx){
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
	uint32_t sr = dmx->uart->ISR;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800935c:	69db      	ldr	r3, [r3, #28]
 800935e:	60fb      	str	r3, [r7, #12]
	if(sr & USART_ISR_ORE) dmx->uart->ICR |= USART_ICR_ORECF; /*Kill overrun error*/
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f003 0308 	and.w	r3, r3, #8
 8009366:	2b00      	cmp	r3, #0
 8009368:	d007      	beq.n	800937a <dmx_irqRxInterfaceHandler+0x2a>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009372:	6a12      	ldr	r2, [r2, #32]
 8009374:	f042 0208 	orr.w	r2, r2, #8
 8009378:	621a      	str	r2, [r3, #32]

	if (sr & USART_ISR_RXNE){
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f003 0320 	and.w	r3, r3, #32
 8009380:	2b00      	cmp	r3, #0
 8009382:	d058      	beq.n	8009436 <dmx_irqRxInterfaceHandler+0xe6>
		uint8_t  dmxByte = (uint8_t)dmx->uart->RDR;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009388:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800938a:	b29b      	uxth	r3, r3
 800938c:	72fb      	strb	r3, [r7, #11]
		if(dmx->rxState == dmx_cfg_RX_STATE_NONE) return;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009394:	2b00      	cmp	r3, #0
 8009396:	d04d      	beq.n	8009434 <dmx_irqRxInterfaceHandler+0xe4>
		if(sr & USART_ISR_FE){	/*Frame error*/
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f003 0302 	and.w	r3, r3, #2
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d014      	beq.n	80093cc <dmx_irqRxInterfaceHandler+0x7c>
			dmx->uart->ICR |= USART_ICR_FECF; /*Kill frame error*/
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80093aa:	6a12      	ldr	r2, [r2, #32]
 80093ac:	f042 0202 	orr.w	r2, r2, #2
 80093b0:	621a      	str	r2, [r3, #32]
			dmx->universeCnt = 0;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			dmx->rxState = dmx_cfg_RX_STATE_RECEIVE_START_CODE;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2203      	movs	r2, #3
 80093be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			dmx->universeComplete = false;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80093ca:	e034      	b.n	8009436 <dmx_irqRxInterfaceHandler+0xe6>
		}else if(dmx->rxState == dmx_cfg_RX_STATE_RECEIVE_START_CODE){
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d108      	bne.n	80093e8 <dmx_irqRxInterfaceHandler+0x98>
			dmx->rxState = dmx_cfg_RX_STATE_RECEIVE_UNIVERSE;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2204      	movs	r2, #4
 80093da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			dmx->universeStartCode = dmxByte;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	7afa      	ldrb	r2, [r7, #11]
 80093e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80093e6:	e026      	b.n	8009436 <dmx_irqRxInterfaceHandler+0xe6>
		}else if(dmx->rxState == dmx_cfg_RX_STATE_RECEIVE_UNIVERSE){
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093ee:	2b04      	cmp	r3, #4
 80093f0:	d121      	bne.n	8009436 <dmx_irqRxInterfaceHandler+0xe6>
			dmx->universe[dmx->universeCnt] = dmxByte;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 80093fc:	4413      	add	r3, r2
 80093fe:	7afa      	ldrb	r2, [r7, #11]
 8009400:	701a      	strb	r2, [r3, #0]
			dmx->universeCnt++;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009408:	3301      	adds	r3, #1
 800940a:	b29a      	uxth	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			if(dmx->universeCnt >= dmx->universeSize){
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800941e:	429a      	cmp	r2, r3
 8009420:	d309      	bcc.n	8009436 <dmx_irqRxInterfaceHandler+0xe6>
				dmx->universeComplete = true;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
				dmx->rxState = dmx_cfg_RX_STATE_WAIT_FOR_BREAK;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009432:	e000      	b.n	8009436 <dmx_irqRxInterfaceHandler+0xe6>
		if(dmx->rxState == dmx_cfg_RX_STATE_NONE) return;
 8009434:	bf00      	nop
			}
		}
	}
}
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <eeprom_registerCallback>:
static inline void readData(eeprom_cfg_Config *config, uint8_t *data, uint16_t dataSize);
static inline void callbackError(uint8_t type);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void eeprom_registerCallback(eeprom_cfg_Config *config, eeprom_cfg_callback callback){
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
	config->callback = callback;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	60da      	str	r2, [r3, #12]
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <eeprom_init>:
void eeprom_init(eeprom_cfg_Config *config){
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
	if(config->callback != NULL){
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d004      	beq.n	8009476 <eeprom_init+0x1a>
		config->maxAddress = config->memorySize >> 3; /*Convert Bit to Byte*/
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	08da      	lsrs	r2, r3, #3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	611a      	str	r2, [r3, #16]
	}
}
 8009476:	bf00      	nop
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <eeprom_write>:

void eeprom_write(eeprom_cfg_Config *config, uint16_t startAddr, uint8_t *data, uint16_t dataSize){
 8009482:	b580      	push	{r7, lr}
 8009484:	b084      	sub	sp, #16
 8009486:	af00      	add	r7, sp, #0
 8009488:	60f8      	str	r0, [r7, #12]
 800948a:	607a      	str	r2, [r7, #4]
 800948c:	461a      	mov	r2, r3
 800948e:	460b      	mov	r3, r1
 8009490:	817b      	strh	r3, [r7, #10]
 8009492:	4613      	mov	r3, r2
 8009494:	813b      	strh	r3, [r7, #8]
	if(writeValidation(config, startAddr, data, dataSize) == OK){
 8009496:	893b      	ldrh	r3, [r7, #8]
 8009498:	8979      	ldrh	r1, [r7, #10]
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f000 f89d 	bl	80095dc <writeValidation>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d10a      	bne.n	80094be <eeprom_write+0x3c>
		writeStartAddr(config, startAddr);
 80094a8:	897b      	ldrh	r3, [r7, #10]
 80094aa:	4619      	mov	r1, r3
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f000 f84a 	bl	8009546 <writeStartAddr>
		writeData(config, data, dataSize);
 80094b2:	893b      	ldrh	r3, [r7, #8]
 80094b4:	461a      	mov	r2, r3
 80094b6:	6879      	ldr	r1, [r7, #4]
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 f853 	bl	8009564 <writeData>
	}
}
 80094be:	bf00      	nop
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <eeprom_read>:

void eeprom_read(eeprom_cfg_Config *config, uint16_t startAddr, uint8_t *data, uint16_t dataSize){
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	60f8      	str	r0, [r7, #12]
 80094ce:	607a      	str	r2, [r7, #4]
 80094d0:	461a      	mov	r2, r3
 80094d2:	460b      	mov	r3, r1
 80094d4:	817b      	strh	r3, [r7, #10]
 80094d6:	4613      	mov	r3, r2
 80094d8:	813b      	strh	r3, [r7, #8]
	if(readValidation(config, startAddr, data, dataSize) == OK){
 80094da:	893b      	ldrh	r3, [r7, #8]
 80094dc:	8979      	ldrh	r1, [r7, #10]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f000 f8a8 	bl	8009636 <readValidation>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d10a      	bne.n	8009502 <eeprom_read+0x3c>
		writeStartAddr(config, startAddr);
 80094ec:	897b      	ldrh	r3, [r7, #10]
 80094ee:	4619      	mov	r1, r3
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 f828 	bl	8009546 <writeStartAddr>
		readData(config, data, dataSize);
 80094f6:	893b      	ldrh	r3, [r7, #8]
 80094f8:	461a      	mov	r2, r3
 80094fa:	6879      	ldr	r1, [r7, #4]
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f000 f84f 	bl	80095a0 <readData>
	}
}
 8009502:	bf00      	nop
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <eeprom_isFree>:

bool eeprom_isFree(eeprom_cfg_Config *config){
 800950a:	b580      	push	{r7, lr}
 800950c:	b084      	sub	sp, #16
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
	config->dataSize = 0;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	615a      	str	r2, [r3, #20]
	uint8_t dummyData = 0xFF;
 8009518:	23ff      	movs	r3, #255	; 0xff
 800951a:	73fb      	strb	r3, [r7, #15]
	config->txBuffer = &dummyData;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f107 020f 	add.w	r2, r7, #15
 8009522:	61da      	str	r2, [r3, #28]
	config->callbackType = EEPROM_CFG_CALL_CHECK_TX_STATE;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2204      	movs	r2, #4
 8009528:	729a      	strb	r2, [r3, #10]
	if(config->callback(config) != OK) return false;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	4798      	blx	r3
 8009532:	4603      	mov	r3, r0
 8009534:	2b01      	cmp	r3, #1
 8009536:	d001      	beq.n	800953c <eeprom_isFree+0x32>
 8009538:	2300      	movs	r3, #0
 800953a:	e000      	b.n	800953e <eeprom_isFree+0x34>
	else return true;
 800953c:	2301      	movs	r3, #1
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <writeStartAddr>:


static inline void writeStartAddr(eeprom_cfg_Config *config, uint16_t startAddr){
 8009546:	b480      	push	{r7}
 8009548:	b083      	sub	sp, #12
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	460b      	mov	r3, r1
 8009550:	807b      	strh	r3, [r7, #2]
	config->memAddr = startAddr;
 8009552:	887a      	ldrh	r2, [r7, #2]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	619a      	str	r2, [r3, #24]
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <writeData>:

static inline void writeData(eeprom_cfg_Config *config, uint8_t *data, uint16_t dataSize){
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	4613      	mov	r3, r2
 8009570:	80fb      	strh	r3, [r7, #6]
	config->dataSize = dataSize;
 8009572:	88fa      	ldrh	r2, [r7, #6]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	615a      	str	r2, [r3, #20]
	config->txBuffer = data;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	61da      	str	r2, [r3, #28]
	config->callbackType = EEPROM_CFG_CALL_TX_START;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	729a      	strb	r2, [r3, #10]
	if(config->callback(config) != OK) callbackError(EEPROM_CFG_CALL_TX_ERROR);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	4798      	blx	r3
 800958c:	4603      	mov	r3, r0
 800958e:	2b01      	cmp	r3, #1
 8009590:	d002      	beq.n	8009598 <writeData+0x34>
 8009592:	2002      	movs	r0, #2
 8009594:	f000 f875 	bl	8009682 <callbackError>
}
 8009598:	bf00      	nop
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <readData>:

static inline void readData(eeprom_cfg_Config *config, uint8_t *data, uint16_t dataSize){
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	4613      	mov	r3, r2
 80095ac:	80fb      	strh	r3, [r7, #6]
	config->dataSize = dataSize;
 80095ae:	88fa      	ldrh	r2, [r7, #6]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	615a      	str	r2, [r3, #20]
	config->rxBuffer = data;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	621a      	str	r2, [r3, #32]
	config->callbackType = EEPROM_CFG_CALL_RX_START;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2201      	movs	r2, #1
 80095be:	729a      	strb	r2, [r3, #10]
	if(config->callback(config) != OK) callbackError(EEPROM_CFG_CALL_RX_ERROR);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	4798      	blx	r3
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d002      	beq.n	80095d4 <readData+0x34>
 80095ce:	2003      	movs	r0, #3
 80095d0:	f000 f857 	bl	8009682 <callbackError>
}
 80095d4:	bf00      	nop
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <writeValidation>:

static inline uint8_t writeValidation(eeprom_cfg_Config *config, uint16_t startAddr, uint8_t *data, uint16_t dataSize){
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	607a      	str	r2, [r7, #4]
 80095e6:	461a      	mov	r2, r3
 80095e8:	460b      	mov	r3, r1
 80095ea:	817b      	strh	r3, [r7, #10]
 80095ec:	4613      	mov	r3, r2
 80095ee:	813b      	strh	r3, [r7, #8]
	if(config->callback == NULL) return NOK;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <writeValidation+0x20>
 80095f8:	2300      	movs	r3, #0
 80095fa:	e016      	b.n	800962a <writeValidation+0x4e>
	if(data == NULL) return NOK;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d101      	bne.n	8009606 <writeValidation+0x2a>
 8009602:	2300      	movs	r3, #0
 8009604:	e011      	b.n	800962a <writeValidation+0x4e>
	if((startAddr + dataSize) > config->maxAddress) return NOK;
 8009606:	897a      	ldrh	r2, [r7, #10]
 8009608:	893b      	ldrh	r3, [r7, #8]
 800960a:	4413      	add	r3, r2
 800960c:	461a      	mov	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	429a      	cmp	r2, r3
 8009614:	d901      	bls.n	800961a <writeValidation+0x3e>
 8009616:	2300      	movs	r3, #0
 8009618:	e007      	b.n	800962a <writeValidation+0x4e>
	if(dataSize > config->pageBufferSize) return NOK;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	891b      	ldrh	r3, [r3, #8]
 800961e:	893a      	ldrh	r2, [r7, #8]
 8009620:	429a      	cmp	r2, r3
 8009622:	d901      	bls.n	8009628 <writeValidation+0x4c>
 8009624:	2300      	movs	r3, #0
 8009626:	e000      	b.n	800962a <writeValidation+0x4e>
	else return OK;
 8009628:	2301      	movs	r3, #1
}
 800962a:	4618      	mov	r0, r3
 800962c:	3714      	adds	r7, #20
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr

08009636 <readValidation>:
static inline uint8_t readValidation(eeprom_cfg_Config *config, uint16_t startAddr, uint8_t *data, uint16_t dataSize){
 8009636:	b480      	push	{r7}
 8009638:	b085      	sub	sp, #20
 800963a:	af00      	add	r7, sp, #0
 800963c:	60f8      	str	r0, [r7, #12]
 800963e:	607a      	str	r2, [r7, #4]
 8009640:	461a      	mov	r2, r3
 8009642:	460b      	mov	r3, r1
 8009644:	817b      	strh	r3, [r7, #10]
 8009646:	4613      	mov	r3, r2
 8009648:	813b      	strh	r3, [r7, #8]
	if(config->callback == NULL) return NOK;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d101      	bne.n	8009656 <readValidation+0x20>
 8009652:	2300      	movs	r3, #0
 8009654:	e00f      	b.n	8009676 <readValidation+0x40>
	if(data == NULL) return NOK;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d101      	bne.n	8009660 <readValidation+0x2a>
 800965c:	2300      	movs	r3, #0
 800965e:	e00a      	b.n	8009676 <readValidation+0x40>
	if((startAddr + dataSize) > config->maxAddress) return NOK;
 8009660:	897a      	ldrh	r2, [r7, #10]
 8009662:	893b      	ldrh	r3, [r7, #8]
 8009664:	4413      	add	r3, r2
 8009666:	461a      	mov	r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	429a      	cmp	r2, r3
 800966e:	d901      	bls.n	8009674 <readValidation+0x3e>
 8009670:	2300      	movs	r3, #0
 8009672:	e000      	b.n	8009676 <readValidation+0x40>
	else return OK;
 8009674:	2301      	movs	r3, #1
}
 8009676:	4618      	mov	r0, r3
 8009678:	3714      	adds	r7, #20
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <callbackError>:

static inline void callbackError(uint8_t type){
 8009682:	b480      	push	{r7}
 8009684:	b083      	sub	sp, #12
 8009686:	af00      	add	r7, sp, #0
 8009688:	4603      	mov	r3, r0
 800968a:	71fb      	strb	r3, [r7, #7]
	//TODO: Do something with the error
}
 800968c:	bf00      	nop
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <isSimilarToLast>:
	message->origin = 0;
	message->value = 0;
	message->ctx = 0;
}

static inline uint8_t isSimilarToLast(msg_Message *message, msg_Buffer *buf){
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
	char type;
	uint16_t idx;
	if(RINGBUFFER_isEmpty(&buf->buffer)) return 0;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f000 fa16 	bl	8009ad6 <RINGBUFFER_isEmpty>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d001      	beq.n	80096b4 <isSimilarToLast+0x1c>
 80096b0:	2300      	movs	r3, #0
 80096b2:	e039      	b.n	8009728 <isSimilarToLast+0x90>
	uint16_t lastTmp = buf->lastMsg;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	899b      	ldrh	r3, [r3, #12]
 80096b8:	81fb      	strh	r3, [r7, #14]
	type = buf->buffer.data[lastTmp];
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	689a      	ldr	r2, [r3, #8]
 80096be:	89fb      	ldrh	r3, [r7, #14]
 80096c0:	4413      	add	r3, r2
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	737b      	strb	r3, [r7, #13]
	if(++lastTmp >= buf->buffer.size) lastTmp = 0;
 80096c6:	89fb      	ldrh	r3, [r7, #14]
 80096c8:	3301      	adds	r3, #1
 80096ca:	81fb      	strh	r3, [r7, #14]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	889b      	ldrh	r3, [r3, #4]
 80096d0:	89fa      	ldrh	r2, [r7, #14]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d301      	bcc.n	80096da <isSimilarToLast+0x42>
 80096d6:	2300      	movs	r3, #0
 80096d8:	81fb      	strh	r3, [r7, #14]
	idx = (buf->buffer.data[lastTmp] << 8) & 0xFF00;
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	689a      	ldr	r2, [r3, #8]
 80096de:	89fb      	ldrh	r3, [r7, #14]
 80096e0:	4413      	add	r3, r2
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	021b      	lsls	r3, r3, #8
 80096e6:	817b      	strh	r3, [r7, #10]
	if(++lastTmp >= buf->buffer.size) lastTmp = 0;
 80096e8:	89fb      	ldrh	r3, [r7, #14]
 80096ea:	3301      	adds	r3, #1
 80096ec:	81fb      	strh	r3, [r7, #14]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	889b      	ldrh	r3, [r3, #4]
 80096f2:	89fa      	ldrh	r2, [r7, #14]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d301      	bcc.n	80096fc <isSimilarToLast+0x64>
 80096f8:	2300      	movs	r3, #0
 80096fa:	81fb      	strh	r3, [r7, #14]
	idx |= (buf->buffer.data[lastTmp] << 0) & 0xFF;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	689a      	ldr	r2, [r3, #8]
 8009700:	89fb      	ldrh	r3, [r7, #14]
 8009702:	4413      	add	r3, r2
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	b29a      	uxth	r2, r3
 8009708:	897b      	ldrh	r3, [r7, #10]
 800970a:	4313      	orrs	r3, r2
 800970c:	817b      	strh	r3, [r7, #10]
	if((type == message->type) && (idx == message->index)) return 1;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	791b      	ldrb	r3, [r3, #4]
 8009712:	7b7a      	ldrb	r2, [r7, #13]
 8009714:	429a      	cmp	r2, r3
 8009716:	d106      	bne.n	8009726 <isSimilarToLast+0x8e>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	897a      	ldrh	r2, [r7, #10]
 800971e:	429a      	cmp	r2, r3
 8009720:	d101      	bne.n	8009726 <isSimilarToLast+0x8e>
 8009722:	2301      	movs	r3, #1
 8009724:	e000      	b.n	8009728 <isSimilarToLast+0x90>
	else return 0;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <writeMsg>:

static inline uint8_t writeMsg(msg_Message *message, msg_Buffer *buf){
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
	uint8_t bufferState =  ringbuffer_NO_BUF;
 800973a:	2300      	movs	r3, #0
 800973c:	73fb      	strb	r3, [r7, #15]
	uint8_t isSimilarActive = 0;
 800973e:	2300      	movs	r3, #0
 8009740:	73bb      	strb	r3, [r7, #14]
	uint16_t nextMsgTmp = buf->buffer.in;
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	881b      	ldrh	r3, [r3, #0]
 8009746:	81bb      	strh	r3, [r7, #12]
	if(message != NULL){
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d064      	beq.n	8009818 <writeMsg+0xe8>
		if(isSimilarToLast(message, buf)){
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f7ff ffa1 	bl	8009698 <isSimilarToLast>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d005      	beq.n	8009768 <writeMsg+0x38>
			buf->buffer.in = buf->lastMsg;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	899a      	ldrh	r2, [r3, #12]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	801a      	strh	r2, [r3, #0]
			isSimilarActive = 1;
 8009764:	2301      	movs	r3, #1
 8009766:	73bb      	strb	r3, [r7, #14]
		}
		bufferState = RINGBUFFER_cIn(message->type, &buf->buffer);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	791b      	ldrb	r3, [r3, #4]
 800976c:	683a      	ldr	r2, [r7, #0]
 800976e:	4611      	mov	r1, r2
 8009770:	4618      	mov	r0, r3
 8009772:	f000 f942 	bl	80099fa <RINGBUFFER_cIn>
 8009776:	4603      	mov	r3, r0
 8009778:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->index >> 8), &buf->buffer);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	881b      	ldrh	r3, [r3, #0]
 800977e:	0a1b      	lsrs	r3, r3, #8
 8009780:	b29b      	uxth	r3, r3
 8009782:	b2db      	uxtb	r3, r3
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	4611      	mov	r1, r2
 8009788:	4618      	mov	r0, r3
 800978a:	f000 f936 	bl	80099fa <RINGBUFFER_cIn>
 800978e:	4603      	mov	r3, r0
 8009790:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->index), &buf->buffer);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	881b      	ldrh	r3, [r3, #0]
 8009796:	b2db      	uxtb	r3, r3
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	4611      	mov	r1, r2
 800979c:	4618      	mov	r0, r3
 800979e:	f000 f92c 	bl	80099fa <RINGBUFFER_cIn>
 80097a2:	4603      	mov	r3, r0
 80097a4:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->value >> 8), &buf->buffer);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80097ac:	121b      	asrs	r3, r3, #8
 80097ae:	b21b      	sxth	r3, r3
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	4611      	mov	r1, r2
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 f91f 	bl	80099fa <RINGBUFFER_cIn>
 80097bc:	4603      	mov	r3, r0
 80097be:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->value), &buf->buffer);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	4611      	mov	r1, r2
 80097cc:	4618      	mov	r0, r3
 80097ce:	f000 f914 	bl	80099fa <RINGBUFFER_cIn>
 80097d2:	4603      	mov	r3, r0
 80097d4:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->ctx >> 8), &buf->buffer);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80097dc:	121b      	asrs	r3, r3, #8
 80097de:	b21b      	sxth	r3, r3
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	4611      	mov	r1, r2
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 f907 	bl	80099fa <RINGBUFFER_cIn>
 80097ec:	4603      	mov	r3, r0
 80097ee:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->ctx), &buf->buffer);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	4611      	mov	r1, r2
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 f8fc 	bl	80099fa <RINGBUFFER_cIn>
 8009802:	4603      	mov	r3, r0
 8009804:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn(message->origin, &buf->buffer);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	795b      	ldrb	r3, [r3, #5]
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	4611      	mov	r1, r2
 800980e:	4618      	mov	r0, r3
 8009810:	f000 f8f3 	bl	80099fa <RINGBUFFER_cIn>
 8009814:	4603      	mov	r3, r0
 8009816:	73fb      	strb	r3, [r7, #15]
	}
	if(bufferState ==  ringbuffer_FULL) buf->buffer.in = nextMsgTmp;
 8009818:	7bfb      	ldrb	r3, [r7, #15]
 800981a:	2b03      	cmp	r3, #3
 800981c:	d103      	bne.n	8009826 <writeMsg+0xf6>
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	89ba      	ldrh	r2, [r7, #12]
 8009822:	801a      	strh	r2, [r3, #0]
 8009824:	e005      	b.n	8009832 <writeMsg+0x102>
	else if(!isSimilarActive) buf->lastMsg = nextMsgTmp;
 8009826:	7bbb      	ldrb	r3, [r7, #14]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d102      	bne.n	8009832 <writeMsg+0x102>
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	89ba      	ldrh	r2, [r7, #12]
 8009830:	819a      	strh	r2, [r3, #12]
	return bufferState;
 8009832:	7bfb      	ldrb	r3, [r7, #15]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <msg_writeEvent>:
	msgBuffer.out = 0;
	msgBuffer.size = size;
	msgBuffer.data = pData;
}

uint8_t msg_writeEvent(msg_Message *message, msg_Buffer *buf){
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
	message->index = CAST_MSG_TO_EVENT(message->index);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	881b      	ldrh	r3, [r3, #0]
 800984a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800984e:	b29a      	uxth	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	801a      	strh	r2, [r3, #0]
	uint8_t bufferState = writeMsg(message, buf);
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff ff6a 	bl	8009730 <writeMsg>
 800985c:	4603      	mov	r3, r0
 800985e:	73fb      	strb	r3, [r7, #15]
	return bufferState;
 8009860:	7bfb      	ldrb	r3, [r7, #15]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <msg_writeAction>:

uint8_t msg_writeAction(msg_Message *message, msg_Buffer *buf){
 800986a:	b580      	push	{r7, lr}
 800986c:	b084      	sub	sp, #16
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	6039      	str	r1, [r7, #0]
	message->index = CAST_MSG_TO_ACTION(message->index);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800987c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009880:	b29a      	uxth	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	801a      	strh	r2, [r3, #0]
	uint8_t bufferState = writeMsg(message, buf);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7ff ff51 	bl	8009730 <writeMsg>
 800988e:	4603      	mov	r3, r0
 8009890:	73fb      	strb	r3, [r7, #15]
	return bufferState;
 8009892:	7bfb      	ldrb	r3, [r7, #15]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <msg_getNext>:

msg_Message *msg_getNext(msg_Message *message, msg_Buffer *buf){
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
	uint8_t bufferState =  ringbuffer_OK;
 80098a6:	2301      	movs	r3, #1
 80098a8:	73fb      	strb	r3, [r7, #15]
	char tmp = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	73bb      	strb	r3, [r7, #14]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 80098ae:	683a      	ldr	r2, [r7, #0]
 80098b0:	f107 030e 	add.w	r3, r7, #14
 80098b4:	4611      	mov	r1, r2
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 f8dc 	bl	8009a74 <RINGBUFFER_cOut>
 80098bc:	4603      	mov	r3, r0
 80098be:	73fb      	strb	r3, [r7, #15]
	message->type = tmp;
 80098c0:	7bba      	ldrb	r2, [r7, #14]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	711a      	strb	r2, [r3, #4]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	f107 030e 	add.w	r3, r7, #14
 80098cc:	4611      	mov	r1, r2
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 f8d0 	bl	8009a74 <RINGBUFFER_cOut>
 80098d4:	4603      	mov	r3, r0
 80098d6:	73fb      	strb	r3, [r7, #15]
	message->index |= (uint16_t)((tmp & 0xFF) << 8);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	881a      	ldrh	r2, [r3, #0]
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
 80098de:	b29b      	uxth	r3, r3
 80098e0:	021b      	lsls	r3, r3, #8
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	4313      	orrs	r3, r2
 80098e6:	b29a      	uxth	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	801a      	strh	r2, [r3, #0]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 80098ec:	683a      	ldr	r2, [r7, #0]
 80098ee:	f107 030e 	add.w	r3, r7, #14
 80098f2:	4611      	mov	r1, r2
 80098f4:	4618      	mov	r0, r3
 80098f6:	f000 f8bd 	bl	8009a74 <RINGBUFFER_cOut>
 80098fa:	4603      	mov	r3, r0
 80098fc:	73fb      	strb	r3, [r7, #15]
	message->index |= (uint16_t)(tmp & 0xFF);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	881a      	ldrh	r2, [r3, #0]
 8009902:	7bbb      	ldrb	r3, [r7, #14]
 8009904:	b29b      	uxth	r3, r3
 8009906:	4313      	orrs	r3, r2
 8009908:	b29a      	uxth	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	801a      	strh	r2, [r3, #0]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	f107 030e 	add.w	r3, r7, #14
 8009914:	4611      	mov	r1, r2
 8009916:	4618      	mov	r0, r3
 8009918:	f000 f8ac 	bl	8009a74 <RINGBUFFER_cOut>
 800991c:	4603      	mov	r3, r0
 800991e:	73fb      	strb	r3, [r7, #15]
	message->value |= (uint16_t)((tmp & 0xFF) << 8);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009926:	7bbb      	ldrb	r3, [r7, #14]
 8009928:	b29b      	uxth	r3, r3
 800992a:	021b      	lsls	r3, r3, #8
 800992c:	b29b      	uxth	r3, r3
 800992e:	b21b      	sxth	r3, r3
 8009930:	4313      	orrs	r3, r2
 8009932:	b21a      	sxth	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	805a      	strh	r2, [r3, #2]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	f107 030e 	add.w	r3, r7, #14
 800993e:	4611      	mov	r1, r2
 8009940:	4618      	mov	r0, r3
 8009942:	f000 f897 	bl	8009a74 <RINGBUFFER_cOut>
 8009946:	4603      	mov	r3, r0
 8009948:	73fb      	strb	r3, [r7, #15]
	message->value |= (uint16_t)(tmp & 0xFF);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009950:	7bbb      	ldrb	r3, [r7, #14]
 8009952:	b21b      	sxth	r3, r3
 8009954:	4313      	orrs	r3, r2
 8009956:	b21a      	sxth	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	805a      	strh	r2, [r3, #2]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 800995c:	683a      	ldr	r2, [r7, #0]
 800995e:	f107 030e 	add.w	r3, r7, #14
 8009962:	4611      	mov	r1, r2
 8009964:	4618      	mov	r0, r3
 8009966:	f000 f885 	bl	8009a74 <RINGBUFFER_cOut>
 800996a:	4603      	mov	r3, r0
 800996c:	73fb      	strb	r3, [r7, #15]
	message->ctx |= (uint16_t)((tmp & 0xFF) << 8);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8009974:	7bbb      	ldrb	r3, [r7, #14]
 8009976:	b29b      	uxth	r3, r3
 8009978:	021b      	lsls	r3, r3, #8
 800997a:	b29b      	uxth	r3, r3
 800997c:	b21b      	sxth	r3, r3
 800997e:	4313      	orrs	r3, r2
 8009980:	b21a      	sxth	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	80da      	strh	r2, [r3, #6]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	f107 030e 	add.w	r3, r7, #14
 800998c:	4611      	mov	r1, r2
 800998e:	4618      	mov	r0, r3
 8009990:	f000 f870 	bl	8009a74 <RINGBUFFER_cOut>
 8009994:	4603      	mov	r3, r0
 8009996:	73fb      	strb	r3, [r7, #15]
	message->ctx |= (uint16_t)(tmp & 0xFF);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800999e:	7bbb      	ldrb	r3, [r7, #14]
 80099a0:	b21b      	sxth	r3, r3
 80099a2:	4313      	orrs	r3, r2
 80099a4:	b21a      	sxth	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	80da      	strh	r2, [r3, #6]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	f107 030e 	add.w	r3, r7, #14
 80099b0:	4611      	mov	r1, r2
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 f85e 	bl	8009a74 <RINGBUFFER_cOut>
 80099b8:	4603      	mov	r3, r0
 80099ba:	73fb      	strb	r3, [r7, #15]
	message->origin = tmp;
 80099bc:	7bba      	ldrb	r2, [r7, #14]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	715a      	strb	r2, [r3, #5]
	if(bufferState ==  ringbuffer_OK)return message;
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d101      	bne.n	80099cc <msg_getNext+0x130>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	e000      	b.n	80099ce <msg_getNext+0x132>
	else return NULL;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <msg_isAction>:

uint8_t msg_isAction(msg_Message *message){
 80099d6:	b480      	push	{r7}
 80099d8:	b083      	sub	sp, #12
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
	if((message->index & ACTION_MSK) == ACTION_MSK) return TRUE;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	881b      	ldrh	r3, [r3, #0]
 80099e2:	b21b      	sxth	r3, r3
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	da01      	bge.n	80099ec <msg_isAction+0x16>
 80099e8:	2301      	movs	r3, #1
 80099ea:	e000      	b.n	80099ee <msg_isAction+0x18>
	else return FALSE;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr

080099fa <RINGBUFFER_cIn>:
 *  Created on: 15.01.2018
 *      Author: sawadee
 */
#include "ringbuffer.h"

uint8_t RINGBUFFER_cIn(char data, stRingBuf *pBuf){
 80099fa:	b480      	push	{r7}
 80099fc:	b083      	sub	sp, #12
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	4603      	mov	r3, r0
 8009a02:	6039      	str	r1, [r7, #0]
 8009a04:	71fb      	strb	r3, [r7, #7]
	if(pBuf->data != NULL){
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d02b      	beq.n	8009a66 <RINGBUFFER_cIn+0x6c>
		if ( ( pBuf->in + 1 == pBuf->out ) || ( pBuf->out == 0 && pBuf->in + 1 == pBuf->size ) ) return ringbuffer_FULL;
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	881b      	ldrh	r3, [r3, #0]
 8009a12:	3301      	adds	r3, #1
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	8852      	ldrh	r2, [r2, #2]
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d00a      	beq.n	8009a32 <RINGBUFFER_cIn+0x38>
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	885b      	ldrh	r3, [r3, #2]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d108      	bne.n	8009a36 <RINGBUFFER_cIn+0x3c>
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	881b      	ldrh	r3, [r3, #0]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	8892      	ldrh	r2, [r2, #4]
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d101      	bne.n	8009a36 <RINGBUFFER_cIn+0x3c>
 8009a32:	2303      	movs	r3, #3
 8009a34:	e018      	b.n	8009a68 <RINGBUFFER_cIn+0x6e>
		pBuf->data[pBuf->in] = data;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	683a      	ldr	r2, [r7, #0]
 8009a3c:	8812      	ldrh	r2, [r2, #0]
 8009a3e:	4413      	add	r3, r2
 8009a40:	79fa      	ldrb	r2, [r7, #7]
 8009a42:	701a      	strb	r2, [r3, #0]
		pBuf->in++;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	881b      	ldrh	r3, [r3, #0]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	801a      	strh	r2, [r3, #0]
		if (pBuf->in >= pBuf->size) pBuf->in = 0;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	881a      	ldrh	r2, [r3, #0]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	889b      	ldrh	r3, [r3, #4]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d302      	bcc.n	8009a62 <RINGBUFFER_cIn+0x68>
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	801a      	strh	r2, [r3, #0]
		return ringbuffer_OK;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e000      	b.n	8009a68 <RINGBUFFER_cIn+0x6e>
	}else return ringbuffer_NO_BUF;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <RINGBUFFER_cOut>:
uint8_t RINGBUFFER_cOut(char *pData, stRingBuf *pBuf){
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
	if(pBuf->data != NULL){
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d020      	beq.n	8009ac8 <RINGBUFFER_cOut+0x54>
		if (pBuf->out == pBuf->in) return ringbuffer_EMPTY;
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	885a      	ldrh	r2, [r3, #2]
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	881b      	ldrh	r3, [r3, #0]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d101      	bne.n	8009a96 <RINGBUFFER_cOut+0x22>
 8009a92:	2302      	movs	r3, #2
 8009a94:	e019      	b.n	8009aca <RINGBUFFER_cOut+0x56>
		*pData = pBuf->data[pBuf->out];
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	683a      	ldr	r2, [r7, #0]
 8009a9c:	8852      	ldrh	r2, [r2, #2]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	781a      	ldrb	r2, [r3, #0]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	701a      	strb	r2, [r3, #0]
		pBuf->out++;
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	885b      	ldrh	r3, [r3, #2]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	805a      	strh	r2, [r3, #2]
		if (pBuf->out >= pBuf->size)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	885a      	ldrh	r2, [r3, #2]
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	889b      	ldrh	r3, [r3, #4]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d302      	bcc.n	8009ac4 <RINGBUFFER_cOut+0x50>
		  pBuf->out = 0;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	805a      	strh	r2, [r3, #2]
		return ringbuffer_OK;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e000      	b.n	8009aca <RINGBUFFER_cOut+0x56>
	}else return ringbuffer_NO_BUF;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	370c      	adds	r7, #12
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <RINGBUFFER_isEmpty>:

uint8_t RINGBUFFER_isEmpty(stRingBuf *pBuf){
 8009ad6:	b480      	push	{r7}
 8009ad8:	b083      	sub	sp, #12
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
	if(pBuf->out == pBuf->in) return 1;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	885a      	ldrh	r2, [r3, #2]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	881b      	ldrh	r3, [r3, #0]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d101      	bne.n	8009aee <RINGBUFFER_isEmpty+0x18>
 8009aea:	2301      	movs	r3, #1
 8009aec:	e000      	b.n	8009af0 <RINGBUFFER_isEmpty+0x1a>
	else return 0;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	460b      	mov	r3, r1
 8009b06:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	7c1b      	ldrb	r3, [r3, #16]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d115      	bne.n	8009b40 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b18:	2202      	movs	r2, #2
 8009b1a:	2181      	movs	r1, #129	; 0x81
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f002 fcfd 	bl	800c51c <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b2c:	2202      	movs	r2, #2
 8009b2e:	2101      	movs	r1, #1
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f002 fcf3 	bl	800c51c <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8009b3e:	e012      	b.n	8009b66 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009b40:	2340      	movs	r3, #64	; 0x40
 8009b42:	2202      	movs	r2, #2
 8009b44:	2181      	movs	r1, #129	; 0x81
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f002 fce8 	bl	800c51c <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009b52:	2340      	movs	r3, #64	; 0x40
 8009b54:	2202      	movs	r2, #2
 8009b56:	2101      	movs	r1, #1
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f002 fcdf 	bl	800c51c <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2201      	movs	r2, #1
 8009b62:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009b66:	2308      	movs	r3, #8
 8009b68:	2203      	movs	r2, #3
 8009b6a:	2182      	movs	r1, #130	; 0x82
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f002 fcd5 	bl	800c51c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2201      	movs	r2, #1
 8009b76:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8009b78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009b7c:	f002 fec8 	bl	800c910 <USBD_static_malloc>
 8009b80:	4602      	mov	r2, r0
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d102      	bne.n	8009b98 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009b92:	2301      	movs	r3, #1
 8009b94:	73fb      	strb	r3, [r7, #15]
 8009b96:	e026      	b.n	8009be6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009b9e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	7c1b      	ldrb	r3, [r3, #16]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d109      	bne.n	8009bd6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bcc:	2101      	movs	r1, #1
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f002 fe1a 	bl	800c808 <USBD_LL_PrepareReceive>
 8009bd4:	e007      	b.n	8009be6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009bdc:	2340      	movs	r3, #64	; 0x40
 8009bde:	2101      	movs	r1, #1
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f002 fe11 	bl	800c808 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009c00:	2181      	movs	r1, #129	; 0x81
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f002 fcc8 	bl	800c598 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009c0e:	2101      	movs	r1, #1
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f002 fcc1 	bl	800c598 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009c1e:	2182      	movs	r1, #130	; 0x82
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f002 fcb9 	bl	800c598 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00e      	beq.n	8009c54 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009c46:	4618      	mov	r0, r3
 8009c48:	f002 fe70 	bl	800c92c <USBD_static_free>
    pdev->pClassData = NULL;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8009c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b086      	sub	sp, #24
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009c6e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009c70:	2300      	movs	r3, #0
 8009c72:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009c74:	2300      	movs	r3, #0
 8009c76:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d039      	beq.n	8009cfc <USBD_CDC_Setup+0x9e>
 8009c88:	2b20      	cmp	r3, #32
 8009c8a:	d17c      	bne.n	8009d86 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	88db      	ldrh	r3, [r3, #6]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d029      	beq.n	8009ce8 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	b25b      	sxtb	r3, r3
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	da11      	bge.n	8009cc2 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8009caa:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	88d2      	ldrh	r2, [r2, #6]
 8009cb0:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009cb2:	6939      	ldr	r1, [r7, #16]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	88db      	ldrh	r3, [r3, #6]
 8009cb8:	461a      	mov	r2, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f001 f9a2 	bl	800b004 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8009cc0:	e068      	b.n	8009d94 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	785a      	ldrb	r2, [r3, #1]
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	88db      	ldrh	r3, [r3, #6]
 8009cd0:	b2da      	uxtb	r2, r3
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009cd8:	6939      	ldr	r1, [r7, #16]
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	88db      	ldrh	r3, [r3, #6]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f001 f9bd 	bl	800b060 <USBD_CtlPrepareRx>
    break;
 8009ce6:	e055      	b.n	8009d94 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	683a      	ldr	r2, [r7, #0]
 8009cf2:	7850      	ldrb	r0, [r2, #1]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	4798      	blx	r3
    break;
 8009cfa:	e04b      	b.n	8009d94 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	785b      	ldrb	r3, [r3, #1]
 8009d00:	2b0a      	cmp	r3, #10
 8009d02:	d017      	beq.n	8009d34 <USBD_CDC_Setup+0xd6>
 8009d04:	2b0b      	cmp	r3, #11
 8009d06:	d029      	beq.n	8009d5c <USBD_CDC_Setup+0xfe>
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d133      	bne.n	8009d74 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009d12:	2b03      	cmp	r3, #3
 8009d14:	d107      	bne.n	8009d26 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8009d16:	f107 030c 	add.w	r3, r7, #12
 8009d1a:	2202      	movs	r2, #2
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f001 f970 	bl	800b004 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8009d24:	e02e      	b.n	8009d84 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f001 f900 	bl	800af2e <USBD_CtlError>
			  ret = USBD_FAIL;
 8009d2e:	2302      	movs	r3, #2
 8009d30:	75fb      	strb	r3, [r7, #23]
      break;
 8009d32:	e027      	b.n	8009d84 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	d107      	bne.n	8009d4e <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8009d3e:	f107 030f 	add.w	r3, r7, #15
 8009d42:	2201      	movs	r2, #1
 8009d44:	4619      	mov	r1, r3
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f001 f95c 	bl	800b004 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8009d4c:	e01a      	b.n	8009d84 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8009d4e:	6839      	ldr	r1, [r7, #0]
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f001 f8ec 	bl	800af2e <USBD_CtlError>
			  ret = USBD_FAIL;
 8009d56:	2302      	movs	r3, #2
 8009d58:	75fb      	strb	r3, [r7, #23]
      break;
 8009d5a:	e013      	b.n	8009d84 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009d62:	2b03      	cmp	r3, #3
 8009d64:	d00d      	beq.n	8009d82 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f001 f8e0 	bl	800af2e <USBD_CtlError>
			  ret = USBD_FAIL;
 8009d6e:	2302      	movs	r3, #2
 8009d70:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009d72:	e006      	b.n	8009d82 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8009d74:	6839      	ldr	r1, [r7, #0]
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f001 f8d9 	bl	800af2e <USBD_CtlError>
      ret = USBD_FAIL;
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d80:	e000      	b.n	8009d84 <USBD_CDC_Setup+0x126>
      break;
 8009d82:	bf00      	nop
    }
    break;
 8009d84:	e006      	b.n	8009d94 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f001 f8d0 	bl	800af2e <USBD_CtlError>
    ret = USBD_FAIL;
 8009d8e:	2302      	movs	r3, #2
 8009d90:	75fb      	strb	r3, [r7, #23]
    break;
 8009d92:	bf00      	nop
  }

  return ret;
 8009d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3718      	adds	r7, #24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	460b      	mov	r3, r1
 8009da8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009db0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009db8:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d037      	beq.n	8009e34 <USBD_CDC_DataIn+0x96>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009dc4:	78fa      	ldrb	r2, [r7, #3]
 8009dc6:	6879      	ldr	r1, [r7, #4]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4413      	add	r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	440b      	add	r3, r1
 8009dd2:	331c      	adds	r3, #28
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d026      	beq.n	8009e28 <USBD_CDC_DataIn+0x8a>
 8009dda:	78fa      	ldrb	r2, [r7, #3]
 8009ddc:	6879      	ldr	r1, [r7, #4]
 8009dde:	4613      	mov	r3, r2
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	4413      	add	r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	440b      	add	r3, r1
 8009de8:	331c      	adds	r3, #28
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	78fa      	ldrb	r2, [r7, #3]
 8009dee:	68b9      	ldr	r1, [r7, #8]
 8009df0:	0152      	lsls	r2, r2, #5
 8009df2:	440a      	add	r2, r1
 8009df4:	3238      	adds	r2, #56	; 0x38
 8009df6:	6812      	ldr	r2, [r2, #0]
 8009df8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009dfc:	fb02 f201 	mul.w	r2, r2, r1
 8009e00:	1a9b      	subs	r3, r3, r2
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d110      	bne.n	8009e28 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009e06:	78fa      	ldrb	r2, [r7, #3]
 8009e08:	6879      	ldr	r1, [r7, #4]
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	4413      	add	r3, r2
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	440b      	add	r3, r1
 8009e14:	331c      	adds	r3, #28
 8009e16:	2200      	movs	r2, #0
 8009e18:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8009e1a:	78f9      	ldrb	r1, [r7, #3]
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	2200      	movs	r2, #0
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f002 fcb7 	bl	800c794 <USBD_LL_Transmit>
 8009e26:	e003      	b.n	8009e30 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	e000      	b.n	8009e36 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8009e34:	2302      	movs	r3, #2
  }
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b084      	sub	sp, #16
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	460b      	mov	r3, r1
 8009e48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009e50:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8009e52:	78fb      	ldrb	r3, [r7, #3]
 8009e54:	4619      	mov	r1, r3
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f002 fd10 	bl	800c87c <USBD_LL_GetRxDataSize>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00d      	beq.n	8009e8a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009e82:	4611      	mov	r1, r2
 8009e84:	4798      	blx	r3

    return USBD_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	e000      	b.n	8009e8c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009e8a:	2302      	movs	r3, #2
  }
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009ea2:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d015      	beq.n	8009eda <USBD_CDC_EP0_RxReady+0x46>
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009eb4:	2bff      	cmp	r3, #255	; 0xff
 8009eb6:	d010      	beq.n	8009eda <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009ec6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009ece:	b292      	uxth	r2, r2
 8009ed0:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	22ff      	movs	r2, #255	; 0xff
 8009ed6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2243      	movs	r2, #67	; 0x43
 8009ef0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009ef2:	4b03      	ldr	r3, [pc, #12]	; (8009f00 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	20001214 	.word	0x20001214

08009f04 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2243      	movs	r2, #67	; 0x43
 8009f10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009f12:	4b03      	ldr	r3, [pc, #12]	; (8009f20 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	200011d0 	.word	0x200011d0

08009f24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2243      	movs	r2, #67	; 0x43
 8009f30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009f32:	4b03      	ldr	r3, [pc, #12]	; (8009f40 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	20001258 	.word	0x20001258

08009f44 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	220a      	movs	r2, #10
 8009f50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009f52:	4b03      	ldr	r3, [pc, #12]	; (8009f60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr
 8009f60:	2000118c 	.word	0x2000118c

08009f64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009f6e:	2302      	movs	r3, #2
 8009f70:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d005      	beq.n	8009f84 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8009f80:	2300      	movs	r3, #0
 8009f82:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3714      	adds	r7, #20
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8009f92:	b480      	push	{r7}
 8009f94:	b087      	sub	sp, #28
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	60f8      	str	r0, [r7, #12]
 8009f9a:	60b9      	str	r1, [r7, #8]
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009fa6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009fb0:	88fa      	ldrh	r2, [r7, #6]
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	371c      	adds	r7, #28
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr

08009fc6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8009fc6:	b480      	push	{r7}
 8009fc8:	b085      	sub	sp, #20
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009fd6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	683a      	ldr	r2, [r7, #0]
 8009fdc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr

08009fee <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009ffc:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a004:	2b00      	cmp	r3, #0
 800a006:	d01c      	beq.n	800a042 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d115      	bne.n	800a03e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2201      	movs	r2, #1
 800a016:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a030:	b29b      	uxth	r3, r3
 800a032:	2181      	movs	r1, #129	; 0x81
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f002 fbad 	bl	800c794 <USBD_LL_Transmit>

      return USBD_OK;
 800a03a:	2300      	movs	r3, #0
 800a03c:	e002      	b.n	800a044 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a03e:	2301      	movs	r3, #1
 800a040:	e000      	b.n	800a044 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a042:	2302      	movs	r3, #2
  }
}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a05a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a062:	2b00      	cmp	r3, #0
 800a064:	d017      	beq.n	800a096 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	7c1b      	ldrb	r3, [r3, #16]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d109      	bne.n	800a082 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a074:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a078:	2101      	movs	r1, #1
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f002 fbc4 	bl	800c808 <USBD_LL_PrepareReceive>
 800a080:	e007      	b.n	800a092 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a088:	2340      	movs	r3, #64	; 0x40
 800a08a:	2101      	movs	r1, #1
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f002 fbbb 	bl	800c808 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a092:	2300      	movs	r3, #0
 800a094:	e000      	b.n	800a098 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a096:	2302      	movs	r3, #2
  }
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3710      	adds	r7, #16
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d101      	bne.n	800a0b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	e01a      	b.n	800a0ee <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d003      	beq.n	800a0ca <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d003      	beq.n	800a0d8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	79fa      	ldrb	r2, [r7, #7]
 800a0e4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f002 f982 	bl	800c3f0 <USBD_LL_Init>

  return USBD_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a0f6:	b480      	push	{r7}
 800a0f8:	b085      	sub	sp, #20
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
 800a0fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d006      	beq.n	800a118 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	683a      	ldr	r2, [r7, #0]
 800a10e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800a112:	2300      	movs	r3, #0
 800a114:	73fb      	strb	r3, [r7, #15]
 800a116:	e001      	b.n	800a11c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a118:	2302      	movs	r3, #2
 800a11a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3714      	adds	r7, #20
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b082      	sub	sp, #8
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f002 f9c0 	bl	800c4b8 <USBD_LL_Start>

  return USBD_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800a142:	b480      	push	{r7}
 800a144:	b083      	sub	sp, #12
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	460b      	mov	r3, r1
 800a162:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800a164:	2302      	movs	r3, #2
 800a166:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00c      	beq.n	800a18c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	78fa      	ldrb	r2, [r7, #3]
 800a17c:	4611      	mov	r1, r2
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	4798      	blx	r3
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d101      	bne.n	800a18c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a188:	2300      	movs	r3, #0
 800a18a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b082      	sub	sp, #8
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	78fa      	ldrb	r2, [r7, #3]
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	4798      	blx	r3
  return USBD_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a1cc:	6839      	ldr	r1, [r7, #0]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 fe70 	bl	800aeb4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800a1f0:	f003 031f 	and.w	r3, r3, #31
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d00c      	beq.n	800a212 <USBD_LL_SetupStage+0x56>
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d302      	bcc.n	800a202 <USBD_LL_SetupStage+0x46>
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	d010      	beq.n	800a222 <USBD_LL_SetupStage+0x66>
 800a200:	e017      	b.n	800a232 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a208:	4619      	mov	r1, r3
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 f9c4 	bl	800a598 <USBD_StdDevReq>
    break;
 800a210:	e01a      	b.n	800a248 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a218:	4619      	mov	r1, r3
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fa26 	bl	800a66c <USBD_StdItfReq>
    break;
 800a220:	e012      	b.n	800a248 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a228:	4619      	mov	r1, r3
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 fa64 	bl	800a6f8 <USBD_StdEPReq>
    break;
 800a230:	e00a      	b.n	800a248 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800a238:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	4619      	mov	r1, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f002 f9df 	bl	800c604 <USBD_LL_StallEP>
    break;
 800a246:	bf00      	nop
  }

  return USBD_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3708      	adds	r7, #8
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b086      	sub	sp, #24
 800a256:	af00      	add	r7, sp, #0
 800a258:	60f8      	str	r0, [r7, #12]
 800a25a:	460b      	mov	r3, r1
 800a25c:	607a      	str	r2, [r7, #4]
 800a25e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800a260:	7afb      	ldrb	r3, [r7, #11]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d147      	bne.n	800a2f6 <USBD_LL_DataOutStage+0xa4>
  {
    pep = &pdev->ep_out[0];
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a26c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a274:	2b03      	cmp	r3, #3
 800a276:	d134      	bne.n	800a2e2 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	68da      	ldr	r2, [r3, #12]
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	429a      	cmp	r2, r3
 800a282:	d919      	bls.n	800a2b8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	68da      	ldr	r2, [r3, #12]
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	1ad2      	subs	r2, r2, r3
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	68da      	ldr	r2, [r3, #12]
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d203      	bcs.n	800a2a6 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	e002      	b.n	800a2ac <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	6879      	ldr	r1, [r7, #4]
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f000 fef3 	bl	800b09c <USBD_CtlContinueRx>
 800a2b6:	e034      	b.n	800a322 <USBD_LL_DataOutStage+0xd0>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00a      	beq.n	800a2da <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800a2ca:	2b03      	cmp	r3, #3
 800a2cc:	d105      	bne.n	800a2da <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f000 fef0 	bl	800b0c0 <USBD_CtlSendStatus>
 800a2e0:	e01f      	b.n	800a322 <USBD_LL_DataOutStage+0xd0>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a2e8:	2b05      	cmp	r3, #5
 800a2ea:	d11a      	bne.n	800a322 <USBD_LL_DataOutStage+0xd0>
      {
        USBD_LL_StallEP(pdev, 0U);
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f002 f988 	bl	800c604 <USBD_LL_StallEP>
 800a2f4:	e015      	b.n	800a322 <USBD_LL_DataOutStage+0xd0>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a2fc:	699b      	ldr	r3, [r3, #24]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00d      	beq.n	800a31e <USBD_LL_DataOutStage+0xcc>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800a308:	2b03      	cmp	r3, #3
 800a30a:	d108      	bne.n	800a31e <USBD_LL_DataOutStage+0xcc>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	7afa      	ldrb	r2, [r7, #11]
 800a316:	4611      	mov	r1, r2
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	4798      	blx	r3
 800a31c:	e001      	b.n	800a322 <USBD_LL_DataOutStage+0xd0>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a31e:	2302      	movs	r3, #2
 800a320:	e000      	b.n	800a324 <USBD_LL_DataOutStage+0xd2>
  }

  return USBD_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3718      	adds	r7, #24
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b086      	sub	sp, #24
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	460b      	mov	r3, r1
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800a33a:	7afb      	ldrb	r3, [r7, #11]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d17f      	bne.n	800a440 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	3314      	adds	r3, #20
 800a344:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d15c      	bne.n	800a40a <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	68da      	ldr	r2, [r3, #12]
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d915      	bls.n	800a388 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	68da      	ldr	r2, [r3, #12]
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	1ad2      	subs	r2, r2, r3
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	b29b      	uxth	r3, r3
 800a370:	461a      	mov	r2, r3
 800a372:	6879      	ldr	r1, [r7, #4]
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f000 fe61 	bl	800b03c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a37a:	2300      	movs	r3, #0
 800a37c:	2200      	movs	r2, #0
 800a37e:	2100      	movs	r1, #0
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f002 fa41 	bl	800c808 <USBD_LL_PrepareReceive>
 800a386:	e04e      	b.n	800a426 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	6912      	ldr	r2, [r2, #16]
 800a390:	fbb3 f1f2 	udiv	r1, r3, r2
 800a394:	fb02 f201 	mul.w	r2, r2, r1
 800a398:	1a9b      	subs	r3, r3, r2
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d11c      	bne.n	800a3d8 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	689a      	ldr	r2, [r3, #8]
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d316      	bcc.n	800a3d8 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	689a      	ldr	r2, [r3, #8]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d20f      	bcs.n	800a3d8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f000 fe3d 	bl	800b03c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	2100      	movs	r1, #0
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f002 fa19 	bl	800c808 <USBD_LL_PrepareReceive>
 800a3d6:	e026      	b.n	800a426 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00a      	beq.n	800a3fa <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	d105      	bne.n	800a3fa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a3fa:	2180      	movs	r1, #128	; 0x80
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f002 f901 	bl	800c604 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f000 fe6f 	bl	800b0e6 <USBD_CtlReceiveStatus>
 800a408:	e00d      	b.n	800a426 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a410:	2b04      	cmp	r3, #4
 800a412:	d004      	beq.n	800a41e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d103      	bne.n	800a426 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a41e:	2180      	movs	r1, #128	; 0x80
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f002 f8ef 	bl	800c604 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d11d      	bne.n	800a46c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f7ff fe86 	bl	800a142 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800a43e:	e015      	b.n	800a46c <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00d      	beq.n	800a468 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800a452:	2b03      	cmp	r3, #3
 800a454:	d108      	bne.n	800a468 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a45c:	695b      	ldr	r3, [r3, #20]
 800a45e:	7afa      	ldrb	r2, [r7, #11]
 800a460:	4611      	mov	r1, r2
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	4798      	blx	r3
 800a466:	e001      	b.n	800a46c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a468:	2302      	movs	r3, #2
 800a46a:	e000      	b.n	800a46e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3718      	adds	r7, #24
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b082      	sub	sp, #8
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a47e:	2340      	movs	r3, #64	; 0x40
 800a480:	2200      	movs	r2, #0
 800a482:	2100      	movs	r1, #0
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f002 f849 	bl	800c51c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2201      	movs	r2, #1
 800a48e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2240      	movs	r2, #64	; 0x40
 800a496:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a49a:	2340      	movs	r3, #64	; 0x40
 800a49c:	2200      	movs	r2, #0
 800a49e:	2180      	movs	r1, #128	; 0x80
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f002 f83b 	bl	800c51c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2240      	movs	r2, #64	; 0x40
 800a4b0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d009      	beq.n	800a4ee <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	6852      	ldr	r2, [r2, #4]
 800a4e6:	b2d2      	uxtb	r2, r2
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	4798      	blx	r3
  }

  return USBD_OK;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	460b      	mov	r3, r1
 800a502:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	78fa      	ldrb	r2, [r7, #3]
 800a508:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2204      	movs	r2, #4
 800a530:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	370c      	adds	r7, #12
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800a542:	b480      	push	{r7}
 800a544:	b083      	sub	sp, #12
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a572:	2b03      	cmp	r3, #3
 800a574:	d10b      	bne.n	800a58e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a57c:	69db      	ldr	r3, [r3, #28]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d005      	beq.n	800a58e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a588:	69db      	ldr	r3, [r3, #28]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5ae:	2b20      	cmp	r3, #32
 800a5b0:	d004      	beq.n	800a5bc <USBD_StdDevReq+0x24>
 800a5b2:	2b40      	cmp	r3, #64	; 0x40
 800a5b4:	d002      	beq.n	800a5bc <USBD_StdDevReq+0x24>
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d008      	beq.n	800a5cc <USBD_StdDevReq+0x34>
 800a5ba:	e04c      	b.n	800a656 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	6839      	ldr	r1, [r7, #0]
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	4798      	blx	r3
    break;
 800a5ca:	e049      	b.n	800a660 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	785b      	ldrb	r3, [r3, #1]
 800a5d0:	2b09      	cmp	r3, #9
 800a5d2:	d83a      	bhi.n	800a64a <USBD_StdDevReq+0xb2>
 800a5d4:	a201      	add	r2, pc, #4	; (adr r2, 800a5dc <USBD_StdDevReq+0x44>)
 800a5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5da:	bf00      	nop
 800a5dc:	0800a62d 	.word	0x0800a62d
 800a5e0:	0800a641 	.word	0x0800a641
 800a5e4:	0800a64b 	.word	0x0800a64b
 800a5e8:	0800a637 	.word	0x0800a637
 800a5ec:	0800a64b 	.word	0x0800a64b
 800a5f0:	0800a60f 	.word	0x0800a60f
 800a5f4:	0800a605 	.word	0x0800a605
 800a5f8:	0800a64b 	.word	0x0800a64b
 800a5fc:	0800a623 	.word	0x0800a623
 800a600:	0800a619 	.word	0x0800a619
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800a604:	6839      	ldr	r1, [r7, #0]
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 f9d2 	bl	800a9b0 <USBD_GetDescriptor>
      break;
 800a60c:	e022      	b.n	800a654 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800a60e:	6839      	ldr	r1, [r7, #0]
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fae3 	bl	800abdc <USBD_SetAddress>
      break;
 800a616:	e01d      	b.n	800a654 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800a618:	6839      	ldr	r1, [r7, #0]
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 fb20 	bl	800ac60 <USBD_SetConfig>
      break;
 800a620:	e018      	b.n	800a654 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800a622:	6839      	ldr	r1, [r7, #0]
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 fba9 	bl	800ad7c <USBD_GetConfig>
      break;
 800a62a:	e013      	b.n	800a654 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800a62c:	6839      	ldr	r1, [r7, #0]
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 fbd8 	bl	800ade4 <USBD_GetStatus>
      break;
 800a634:	e00e      	b.n	800a654 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800a636:	6839      	ldr	r1, [r7, #0]
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 fc06 	bl	800ae4a <USBD_SetFeature>
      break;
 800a63e:	e009      	b.n	800a654 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800a640:	6839      	ldr	r1, [r7, #0]
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 fc15 	bl	800ae72 <USBD_ClrFeature>
      break;
 800a648:	e004      	b.n	800a654 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800a64a:	6839      	ldr	r1, [r7, #0]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 fc6e 	bl	800af2e <USBD_CtlError>
      break;
 800a652:	bf00      	nop
    }
    break;
 800a654:	e004      	b.n	800a660 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 fc68 	bl	800af2e <USBD_CtlError>
    break;
 800a65e:	bf00      	nop
  }

  return ret;
 800a660:	7bfb      	ldrb	r3, [r7, #15]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop

0800a66c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a676:	2300      	movs	r3, #0
 800a678:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a682:	2b20      	cmp	r3, #32
 800a684:	d003      	beq.n	800a68e <USBD_StdItfReq+0x22>
 800a686:	2b40      	cmp	r3, #64	; 0x40
 800a688:	d001      	beq.n	800a68e <USBD_StdItfReq+0x22>
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d12a      	bne.n	800a6e4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a694:	3b01      	subs	r3, #1
 800a696:	2b02      	cmp	r3, #2
 800a698:	d81d      	bhi.n	800a6d6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	889b      	ldrh	r3, [r3, #4]
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d813      	bhi.n	800a6cc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	6839      	ldr	r1, [r7, #0]
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	4798      	blx	r3
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	88db      	ldrh	r3, [r3, #6]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d110      	bne.n	800a6e0 <USBD_StdItfReq+0x74>
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10d      	bne.n	800a6e0 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 fcfb 	bl	800b0c0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a6ca:	e009      	b.n	800a6e0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fc2d 	bl	800af2e <USBD_CtlError>
      break;
 800a6d4:	e004      	b.n	800a6e0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800a6d6:	6839      	ldr	r1, [r7, #0]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fc28 	bl	800af2e <USBD_CtlError>
      break;
 800a6de:	e000      	b.n	800a6e2 <USBD_StdItfReq+0x76>
      break;
 800a6e0:	bf00      	nop
    }
    break;
 800a6e2:	e004      	b.n	800a6ee <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800a6e4:	6839      	ldr	r1, [r7, #0]
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 fc21 	bl	800af2e <USBD_CtlError>
    break;
 800a6ec:	bf00      	nop
  }

  return USBD_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a702:	2300      	movs	r3, #0
 800a704:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	889b      	ldrh	r3, [r3, #4]
 800a70a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a714:	2b20      	cmp	r3, #32
 800a716:	d004      	beq.n	800a722 <USBD_StdEPReq+0x2a>
 800a718:	2b40      	cmp	r3, #64	; 0x40
 800a71a:	d002      	beq.n	800a722 <USBD_StdEPReq+0x2a>
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d008      	beq.n	800a732 <USBD_StdEPReq+0x3a>
 800a720:	e13b      	b.n	800a99a <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	6839      	ldr	r1, [r7, #0]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	4798      	blx	r3
    break;
 800a730:	e138      	b.n	800a9a4 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a73a:	2b20      	cmp	r3, #32
 800a73c:	d10a      	bne.n	800a754 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	6839      	ldr	r1, [r7, #0]
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	4798      	blx	r3
 800a74c:	4603      	mov	r3, r0
 800a74e:	73fb      	strb	r3, [r7, #15]

      return ret;
 800a750:	7bfb      	ldrb	r3, [r7, #15]
 800a752:	e128      	b.n	800a9a6 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	785b      	ldrb	r3, [r3, #1]
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d03e      	beq.n	800a7da <USBD_StdEPReq+0xe2>
 800a75c:	2b03      	cmp	r3, #3
 800a75e:	d002      	beq.n	800a766 <USBD_StdEPReq+0x6e>
 800a760:	2b00      	cmp	r3, #0
 800a762:	d070      	beq.n	800a846 <USBD_StdEPReq+0x14e>
 800a764:	e113      	b.n	800a98e <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d002      	beq.n	800a776 <USBD_StdEPReq+0x7e>
 800a770:	2b03      	cmp	r3, #3
 800a772:	d015      	beq.n	800a7a0 <USBD_StdEPReq+0xa8>
 800a774:	e02b      	b.n	800a7ce <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a776:	7bbb      	ldrb	r3, [r7, #14]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00c      	beq.n	800a796 <USBD_StdEPReq+0x9e>
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
 800a77e:	2b80      	cmp	r3, #128	; 0x80
 800a780:	d009      	beq.n	800a796 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800a782:	7bbb      	ldrb	r3, [r7, #14]
 800a784:	4619      	mov	r1, r3
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f001 ff3c 	bl	800c604 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800a78c:	2180      	movs	r1, #128	; 0x80
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f001 ff38 	bl	800c604 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a794:	e020      	b.n	800a7d8 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800a796:	6839      	ldr	r1, [r7, #0]
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fbc8 	bl	800af2e <USBD_CtlError>
        break;
 800a79e:	e01b      	b.n	800a7d8 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	885b      	ldrh	r3, [r3, #2]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10e      	bne.n	800a7c6 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a7a8:	7bbb      	ldrb	r3, [r7, #14]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00b      	beq.n	800a7c6 <USBD_StdEPReq+0xce>
 800a7ae:	7bbb      	ldrb	r3, [r7, #14]
 800a7b0:	2b80      	cmp	r3, #128	; 0x80
 800a7b2:	d008      	beq.n	800a7c6 <USBD_StdEPReq+0xce>
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	88db      	ldrh	r3, [r3, #6]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d104      	bne.n	800a7c6 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800a7bc:	7bbb      	ldrb	r3, [r7, #14]
 800a7be:	4619      	mov	r1, r3
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f001 ff1f 	bl	800c604 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fc7a 	bl	800b0c0 <USBD_CtlSendStatus>

        break;
 800a7cc:	e004      	b.n	800a7d8 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800a7ce:	6839      	ldr	r1, [r7, #0]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fbac 	bl	800af2e <USBD_CtlError>
        break;
 800a7d6:	bf00      	nop
      }
      break;
 800a7d8:	e0de      	b.n	800a998 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d002      	beq.n	800a7ea <USBD_StdEPReq+0xf2>
 800a7e4:	2b03      	cmp	r3, #3
 800a7e6:	d015      	beq.n	800a814 <USBD_StdEPReq+0x11c>
 800a7e8:	e026      	b.n	800a838 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7ea:	7bbb      	ldrb	r3, [r7, #14]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00c      	beq.n	800a80a <USBD_StdEPReq+0x112>
 800a7f0:	7bbb      	ldrb	r3, [r7, #14]
 800a7f2:	2b80      	cmp	r3, #128	; 0x80
 800a7f4:	d009      	beq.n	800a80a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800a7f6:	7bbb      	ldrb	r3, [r7, #14]
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f001 ff02 	bl	800c604 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800a800:	2180      	movs	r1, #128	; 0x80
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f001 fefe 	bl	800c604 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a808:	e01c      	b.n	800a844 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800a80a:	6839      	ldr	r1, [r7, #0]
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 fb8e 	bl	800af2e <USBD_CtlError>
        break;
 800a812:	e017      	b.n	800a844 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	885b      	ldrh	r3, [r3, #2]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d112      	bne.n	800a842 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a81c:	7bbb      	ldrb	r3, [r7, #14]
 800a81e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a822:	2b00      	cmp	r3, #0
 800a824:	d004      	beq.n	800a830 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800a826:	7bbb      	ldrb	r3, [r7, #14]
 800a828:	4619      	mov	r1, r3
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f001 ff20 	bl	800c670 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 fc45 	bl	800b0c0 <USBD_CtlSendStatus>
        }
        break;
 800a836:	e004      	b.n	800a842 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800a838:	6839      	ldr	r1, [r7, #0]
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 fb77 	bl	800af2e <USBD_CtlError>
        break;
 800a840:	e000      	b.n	800a844 <USBD_StdEPReq+0x14c>
        break;
 800a842:	bf00      	nop
      }
      break;
 800a844:	e0a8      	b.n	800a998 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d002      	beq.n	800a856 <USBD_StdEPReq+0x15e>
 800a850:	2b03      	cmp	r3, #3
 800a852:	d031      	beq.n	800a8b8 <USBD_StdEPReq+0x1c0>
 800a854:	e095      	b.n	800a982 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a856:	7bbb      	ldrb	r3, [r7, #14]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d007      	beq.n	800a86c <USBD_StdEPReq+0x174>
 800a85c:	7bbb      	ldrb	r3, [r7, #14]
 800a85e:	2b80      	cmp	r3, #128	; 0x80
 800a860:	d004      	beq.n	800a86c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800a862:	6839      	ldr	r1, [r7, #0]
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fb62 	bl	800af2e <USBD_CtlError>
          break;
 800a86a:	e08f      	b.n	800a98c <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a86c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a870:	2b00      	cmp	r3, #0
 800a872:	da0b      	bge.n	800a88c <USBD_StdEPReq+0x194>
 800a874:	7bbb      	ldrb	r3, [r7, #14]
 800a876:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a87a:	4613      	mov	r3, r2
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	4413      	add	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	3310      	adds	r3, #16
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	4413      	add	r3, r2
 800a888:	3304      	adds	r3, #4
 800a88a:	e00a      	b.n	800a8a2 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800a88c:	7bbb      	ldrb	r3, [r7, #14]
 800a88e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a892:	4613      	mov	r3, r2
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	4413      	add	r3, r2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	2202      	movs	r2, #2
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 fba7 	bl	800b004 <USBD_CtlSendData>
          break;
 800a8b6:	e069      	b.n	800a98c <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800a8b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	da11      	bge.n	800a8e4 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a8c0:	7bbb      	ldrb	r3, [r7, #14]
 800a8c2:	f003 020f 	and.w	r2, r3, #15
 800a8c6:	6879      	ldr	r1, [r7, #4]
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	4413      	add	r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	440b      	add	r3, r1
 800a8d2:	3318      	adds	r3, #24
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d117      	bne.n	800a90a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800a8da:	6839      	ldr	r1, [r7, #0]
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fb26 	bl	800af2e <USBD_CtlError>
            break;
 800a8e2:	e053      	b.n	800a98c <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a8e4:	7bbb      	ldrb	r3, [r7, #14]
 800a8e6:	f003 020f 	and.w	r2, r3, #15
 800a8ea:	6879      	ldr	r1, [r7, #4]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	440b      	add	r3, r1
 800a8f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d104      	bne.n	800a90a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800a900:	6839      	ldr	r1, [r7, #0]
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fb13 	bl	800af2e <USBD_CtlError>
            break;
 800a908:	e040      	b.n	800a98c <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a90a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	da0b      	bge.n	800a92a <USBD_StdEPReq+0x232>
 800a912:	7bbb      	ldrb	r3, [r7, #14]
 800a914:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a918:	4613      	mov	r3, r2
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	4413      	add	r3, r2
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	3310      	adds	r3, #16
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	4413      	add	r3, r2
 800a926:	3304      	adds	r3, #4
 800a928:	e00a      	b.n	800a940 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800a92a:	7bbb      	ldrb	r3, [r7, #14]
 800a92c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a930:	4613      	mov	r3, r2
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	4413      	add	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	4413      	add	r3, r2
 800a940:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a942:	7bbb      	ldrb	r3, [r7, #14]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <USBD_StdEPReq+0x256>
 800a948:	7bbb      	ldrb	r3, [r7, #14]
 800a94a:	2b80      	cmp	r3, #128	; 0x80
 800a94c:	d103      	bne.n	800a956 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	2200      	movs	r2, #0
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	e00e      	b.n	800a974 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800a956:	7bbb      	ldrb	r3, [r7, #14]
 800a958:	4619      	mov	r1, r3
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f001 febe 	bl	800c6dc <USBD_LL_IsStallEP>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d003      	beq.n	800a96e <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	2201      	movs	r2, #1
 800a96a:	601a      	str	r2, [r3, #0]
 800a96c:	e002      	b.n	800a974 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	2200      	movs	r2, #0
 800a972:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	2202      	movs	r2, #2
 800a978:	4619      	mov	r1, r3
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fb42 	bl	800b004 <USBD_CtlSendData>
          break;
 800a980:	e004      	b.n	800a98c <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800a982:	6839      	ldr	r1, [r7, #0]
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 fad2 	bl	800af2e <USBD_CtlError>
        break;
 800a98a:	bf00      	nop
      }
      break;
 800a98c:	e004      	b.n	800a998 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800a98e:	6839      	ldr	r1, [r7, #0]
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 facc 	bl	800af2e <USBD_CtlError>
      break;
 800a996:	bf00      	nop
    }
    break;
 800a998:	e004      	b.n	800a9a4 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fac6 	bl	800af2e <USBD_CtlError>
    break;
 800a9a2:	bf00      	nop
  }

  return ret;
 800a9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
	...

0800a9b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	885b      	ldrh	r3, [r3, #2]
 800a9be:	0a1b      	lsrs	r3, r3, #8
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	2b0e      	cmp	r3, #14
 800a9c6:	f200 80e5 	bhi.w	800ab94 <USBD_GetDescriptor+0x1e4>
 800a9ca:	a201      	add	r2, pc, #4	; (adr r2, 800a9d0 <USBD_GetDescriptor+0x20>)
 800a9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d0:	0800aa25 	.word	0x0800aa25
 800a9d4:	0800aa3d 	.word	0x0800aa3d
 800a9d8:	0800aa7d 	.word	0x0800aa7d
 800a9dc:	0800ab95 	.word	0x0800ab95
 800a9e0:	0800ab95 	.word	0x0800ab95
 800a9e4:	0800ab41 	.word	0x0800ab41
 800a9e8:	0800ab67 	.word	0x0800ab67
 800a9ec:	0800ab95 	.word	0x0800ab95
 800a9f0:	0800ab95 	.word	0x0800ab95
 800a9f4:	0800ab95 	.word	0x0800ab95
 800a9f8:	0800ab95 	.word	0x0800ab95
 800a9fc:	0800ab95 	.word	0x0800ab95
 800aa00:	0800ab95 	.word	0x0800ab95
 800aa04:	0800ab95 	.word	0x0800ab95
 800aa08:	0800aa0d 	.word	0x0800aa0d
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800aa12:	69db      	ldr	r3, [r3, #28]
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	7c12      	ldrb	r2, [r2, #16]
 800aa18:	f107 010a 	add.w	r1, r7, #10
 800aa1c:	4610      	mov	r0, r2
 800aa1e:	4798      	blx	r3
 800aa20:	60f8      	str	r0, [r7, #12]
    break;
 800aa22:	e0bc      	b.n	800ab9e <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	7c12      	ldrb	r2, [r2, #16]
 800aa30:	f107 010a 	add.w	r1, r7, #10
 800aa34:	4610      	mov	r0, r2
 800aa36:	4798      	blx	r3
 800aa38:	60f8      	str	r0, [r7, #12]
    break;
 800aa3a:	e0b0      	b.n	800ab9e <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	7c1b      	ldrb	r3, [r3, #16]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10d      	bne.n	800aa60 <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aa4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa4c:	f107 020a 	add.w	r2, r7, #10
 800aa50:	4610      	mov	r0, r2
 800aa52:	4798      	blx	r3
 800aa54:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	2202      	movs	r2, #2
 800aa5c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800aa5e:	e09e      	b.n	800ab9e <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa68:	f107 020a 	add.w	r2, r7, #10
 800aa6c:	4610      	mov	r0, r2
 800aa6e:	4798      	blx	r3
 800aa70:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	3301      	adds	r3, #1
 800aa76:	2202      	movs	r2, #2
 800aa78:	701a      	strb	r2, [r3, #0]
    break;
 800aa7a:	e090      	b.n	800ab9e <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	885b      	ldrh	r3, [r3, #2]
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	2b05      	cmp	r3, #5
 800aa84:	d856      	bhi.n	800ab34 <USBD_GetDescriptor+0x184>
 800aa86:	a201      	add	r2, pc, #4	; (adr r2, 800aa8c <USBD_GetDescriptor+0xdc>)
 800aa88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8c:	0800aaa5 	.word	0x0800aaa5
 800aa90:	0800aabd 	.word	0x0800aabd
 800aa94:	0800aad5 	.word	0x0800aad5
 800aa98:	0800aaed 	.word	0x0800aaed
 800aa9c:	0800ab05 	.word	0x0800ab05
 800aaa0:	0800ab1d 	.word	0x0800ab1d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	7c12      	ldrb	r2, [r2, #16]
 800aab0:	f107 010a 	add.w	r1, r7, #10
 800aab4:	4610      	mov	r0, r2
 800aab6:	4798      	blx	r3
 800aab8:	60f8      	str	r0, [r7, #12]
      break;
 800aaba:	e040      	b.n	800ab3e <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	7c12      	ldrb	r2, [r2, #16]
 800aac8:	f107 010a 	add.w	r1, r7, #10
 800aacc:	4610      	mov	r0, r2
 800aace:	4798      	blx	r3
 800aad0:	60f8      	str	r0, [r7, #12]
      break;
 800aad2:	e034      	b.n	800ab3e <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	7c12      	ldrb	r2, [r2, #16]
 800aae0:	f107 010a 	add.w	r1, r7, #10
 800aae4:	4610      	mov	r0, r2
 800aae6:	4798      	blx	r3
 800aae8:	60f8      	str	r0, [r7, #12]
      break;
 800aaea:	e028      	b.n	800ab3e <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	7c12      	ldrb	r2, [r2, #16]
 800aaf8:	f107 010a 	add.w	r1, r7, #10
 800aafc:	4610      	mov	r0, r2
 800aafe:	4798      	blx	r3
 800ab00:	60f8      	str	r0, [r7, #12]
      break;
 800ab02:	e01c      	b.n	800ab3e <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ab0a:	695b      	ldr	r3, [r3, #20]
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	7c12      	ldrb	r2, [r2, #16]
 800ab10:	f107 010a 	add.w	r1, r7, #10
 800ab14:	4610      	mov	r0, r2
 800ab16:	4798      	blx	r3
 800ab18:	60f8      	str	r0, [r7, #12]
      break;
 800ab1a:	e010      	b.n	800ab3e <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ab22:	699b      	ldr	r3, [r3, #24]
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	7c12      	ldrb	r2, [r2, #16]
 800ab28:	f107 010a 	add.w	r1, r7, #10
 800ab2c:	4610      	mov	r0, r2
 800ab2e:	4798      	blx	r3
 800ab30:	60f8      	str	r0, [r7, #12]
      break;
 800ab32:	e004      	b.n	800ab3e <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800ab34:	6839      	ldr	r1, [r7, #0]
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f9f9 	bl	800af2e <USBD_CtlError>
      return;
 800ab3c:	e04b      	b.n	800abd6 <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 800ab3e:	e02e      	b.n	800ab9e <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	7c1b      	ldrb	r3, [r3, #16]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d109      	bne.n	800ab5c <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ab4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab50:	f107 020a 	add.w	r2, r7, #10
 800ab54:	4610      	mov	r0, r2
 800ab56:	4798      	blx	r3
 800ab58:	60f8      	str	r0, [r7, #12]
      break;
 800ab5a:	e020      	b.n	800ab9e <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 f9e5 	bl	800af2e <USBD_CtlError>
      return;
 800ab64:	e037      	b.n	800abd6 <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	7c1b      	ldrb	r3, [r3, #16]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10d      	bne.n	800ab8a <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ab74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab76:	f107 020a 	add.w	r2, r7, #10
 800ab7a:	4610      	mov	r0, r2
 800ab7c:	4798      	blx	r3
 800ab7e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	3301      	adds	r3, #1
 800ab84:	2207      	movs	r2, #7
 800ab86:	701a      	strb	r2, [r3, #0]
      break;
 800ab88:	e009      	b.n	800ab9e <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ab8a:	6839      	ldr	r1, [r7, #0]
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 f9ce 	bl	800af2e <USBD_CtlError>
      return;
 800ab92:	e020      	b.n	800abd6 <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 800ab94:	6839      	ldr	r1, [r7, #0]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f9c9 	bl	800af2e <USBD_CtlError>
    return;
 800ab9c:	e01b      	b.n	800abd6 <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 800ab9e:	897b      	ldrh	r3, [r7, #10]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d011      	beq.n	800abc8 <USBD_GetDescriptor+0x218>
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	88db      	ldrh	r3, [r3, #6]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00d      	beq.n	800abc8 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	88da      	ldrh	r2, [r3, #6]
 800abb0:	897b      	ldrh	r3, [r7, #10]
 800abb2:	4293      	cmp	r3, r2
 800abb4:	bf28      	it	cs
 800abb6:	4613      	movcs	r3, r2
 800abb8:	b29b      	uxth	r3, r3
 800abba:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800abbc:	897b      	ldrh	r3, [r7, #10]
 800abbe:	461a      	mov	r2, r3
 800abc0:	68f9      	ldr	r1, [r7, #12]
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fa1e 	bl	800b004 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	88db      	ldrh	r3, [r3, #6]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d102      	bne.n	800abd6 <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fa75 	bl	800b0c0 <USBD_CtlSendStatus>
  }
}
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	889b      	ldrh	r3, [r3, #4]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d130      	bne.n	800ac50 <USBD_SetAddress+0x74>
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	88db      	ldrh	r3, [r3, #6]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d12c      	bne.n	800ac50 <USBD_SetAddress+0x74>
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	885b      	ldrh	r3, [r3, #2]
 800abfa:	2b7f      	cmp	r3, #127	; 0x7f
 800abfc:	d828      	bhi.n	800ac50 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	885b      	ldrh	r3, [r3, #2]
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ac10:	2b03      	cmp	r3, #3
 800ac12:	d104      	bne.n	800ac1e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800ac14:	6839      	ldr	r1, [r7, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 f989 	bl	800af2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac1c:	e01c      	b.n	800ac58 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	7bfa      	ldrb	r2, [r7, #15]
 800ac22:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ac26:	7bfb      	ldrb	r3, [r7, #15]
 800ac28:	4619      	mov	r1, r3
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f001 fd7c 	bl	800c728 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fa45 	bl	800b0c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ac36:	7bfb      	ldrb	r3, [r7, #15]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d004      	beq.n	800ac46 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2202      	movs	r2, #2
 800ac40:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac44:	e008      	b.n	800ac58 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac4e:	e003      	b.n	800ac58 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac50:	6839      	ldr	r1, [r7, #0]
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f96b 	bl	800af2e <USBD_CtlError>
  }
}
 800ac58:	bf00      	nop
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	885b      	ldrh	r3, [r3, #2]
 800ac6e:	b2da      	uxtb	r2, r3
 800ac70:	4b41      	ldr	r3, [pc, #260]	; (800ad78 <USBD_SetConfig+0x118>)
 800ac72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ac74:	4b40      	ldr	r3, [pc, #256]	; (800ad78 <USBD_SetConfig+0x118>)
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d904      	bls.n	800ac86 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ac7c:	6839      	ldr	r1, [r7, #0]
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 f955 	bl	800af2e <USBD_CtlError>
 800ac84:	e075      	b.n	800ad72 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ac8c:	2b02      	cmp	r3, #2
 800ac8e:	d002      	beq.n	800ac96 <USBD_SetConfig+0x36>
 800ac90:	2b03      	cmp	r3, #3
 800ac92:	d023      	beq.n	800acdc <USBD_SetConfig+0x7c>
 800ac94:	e062      	b.n	800ad5c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800ac96:	4b38      	ldr	r3, [pc, #224]	; (800ad78 <USBD_SetConfig+0x118>)
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d01a      	beq.n	800acd4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800ac9e:	4b36      	ldr	r3, [pc, #216]	; (800ad78 <USBD_SetConfig+0x118>)
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	461a      	mov	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2203      	movs	r2, #3
 800acac:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800acb0:	4b31      	ldr	r3, [pc, #196]	; (800ad78 <USBD_SetConfig+0x118>)
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7ff fa4e 	bl	800a158 <USBD_SetClassConfig>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d104      	bne.n	800accc <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800acc2:	6839      	ldr	r1, [r7, #0]
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 f932 	bl	800af2e <USBD_CtlError>
          return;
 800acca:	e052      	b.n	800ad72 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f9f7 	bl	800b0c0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800acd2:	e04e      	b.n	800ad72 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 f9f3 	bl	800b0c0 <USBD_CtlSendStatus>
      break;
 800acda:	e04a      	b.n	800ad72 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800acdc:	4b26      	ldr	r3, [pc, #152]	; (800ad78 <USBD_SetConfig+0x118>)
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d112      	bne.n	800ad0a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2202      	movs	r2, #2
 800ace8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800acec:	4b22      	ldr	r3, [pc, #136]	; (800ad78 <USBD_SetConfig+0x118>)
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	461a      	mov	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800acf6:	4b20      	ldr	r3, [pc, #128]	; (800ad78 <USBD_SetConfig+0x118>)
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	4619      	mov	r1, r3
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7ff fa4a 	bl	800a196 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 f9dc 	bl	800b0c0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800ad08:	e033      	b.n	800ad72 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800ad0a:	4b1b      	ldr	r3, [pc, #108]	; (800ad78 <USBD_SetConfig+0x118>)
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d01d      	beq.n	800ad54 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	4619      	mov	r1, r3
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7ff fa38 	bl	800a196 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ad26:	4b14      	ldr	r3, [pc, #80]	; (800ad78 <USBD_SetConfig+0x118>)
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ad30:	4b11      	ldr	r3, [pc, #68]	; (800ad78 <USBD_SetConfig+0x118>)
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	4619      	mov	r1, r3
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7ff fa0e 	bl	800a158 <USBD_SetClassConfig>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d104      	bne.n	800ad4c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 f8f2 	bl	800af2e <USBD_CtlError>
          return;
 800ad4a:	e012      	b.n	800ad72 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 f9b7 	bl	800b0c0 <USBD_CtlSendStatus>
      break;
 800ad52:	e00e      	b.n	800ad72 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 f9b3 	bl	800b0c0 <USBD_CtlSendStatus>
      break;
 800ad5a:	e00a      	b.n	800ad72 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800ad5c:	6839      	ldr	r1, [r7, #0]
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f8e5 	bl	800af2e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800ad64:	4b04      	ldr	r3, [pc, #16]	; (800ad78 <USBD_SetConfig+0x118>)
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	4619      	mov	r1, r3
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f7ff fa13 	bl	800a196 <USBD_ClrClassConfig>
      break;
 800ad70:	bf00      	nop
    }
  }
}
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	2000a1a6 	.word	0x2000a1a6

0800ad7c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	88db      	ldrh	r3, [r3, #6]
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d004      	beq.n	800ad98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800ad8e:	6839      	ldr	r1, [r7, #0]
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f8cc 	bl	800af2e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800ad96:	e021      	b.n	800addc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	db17      	blt.n	800add2 <USBD_GetConfig+0x56>
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	dd02      	ble.n	800adac <USBD_GetConfig+0x30>
 800ada6:	2b03      	cmp	r3, #3
 800ada8:	d00b      	beq.n	800adc2 <USBD_GetConfig+0x46>
 800adaa:	e012      	b.n	800add2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	3308      	adds	r3, #8
 800adb6:	2201      	movs	r2, #1
 800adb8:	4619      	mov	r1, r3
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 f922 	bl	800b004 <USBD_CtlSendData>
      break;
 800adc0:	e00c      	b.n	800addc <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	3304      	adds	r3, #4
 800adc6:	2201      	movs	r2, #1
 800adc8:	4619      	mov	r1, r3
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 f91a 	bl	800b004 <USBD_CtlSendData>
      break;
 800add0:	e004      	b.n	800addc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 f8aa 	bl	800af2e <USBD_CtlError>
      break;
 800adda:	bf00      	nop
}
 800addc:	bf00      	nop
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800adf4:	3b01      	subs	r3, #1
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d81e      	bhi.n	800ae38 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	88db      	ldrh	r3, [r3, #6]
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d004      	beq.n	800ae0c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800ae02:	6839      	ldr	r1, [r7, #0]
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 f892 	bl	800af2e <USBD_CtlError>
      break;
 800ae0a:	e01a      	b.n	800ae42 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d005      	beq.n	800ae28 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	f043 0202 	orr.w	r2, r3, #2
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	330c      	adds	r3, #12
 800ae2c:	2202      	movs	r2, #2
 800ae2e:	4619      	mov	r1, r3
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 f8e7 	bl	800b004 <USBD_CtlSendData>
    break;
 800ae36:	e004      	b.n	800ae42 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800ae38:	6839      	ldr	r1, [r7, #0]
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 f877 	bl	800af2e <USBD_CtlError>
    break;
 800ae40:	bf00      	nop
  }
}
 800ae42:	bf00      	nop
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b082      	sub	sp, #8
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	885b      	ldrh	r3, [r3, #2]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d106      	bne.n	800ae6a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 f92b 	bl	800b0c0 <USBD_CtlSendStatus>
  }

}
 800ae6a:	bf00      	nop
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b082      	sub	sp, #8
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ae82:	3b01      	subs	r3, #1
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d80b      	bhi.n	800aea0 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	885b      	ldrh	r3, [r3, #2]
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d10c      	bne.n	800aeaa <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 f911 	bl	800b0c0 <USBD_CtlSendStatus>
    }
    break;
 800ae9e:	e004      	b.n	800aeaa <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800aea0:	6839      	ldr	r1, [r7, #0]
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 f843 	bl	800af2e <USBD_CtlError>
    break;
 800aea8:	e000      	b.n	800aeac <USBD_ClrFeature+0x3a>
    break;
 800aeaa:	bf00      	nop
  }
}
 800aeac:	bf00      	nop
 800aeae:	3708      	adds	r7, #8
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	781a      	ldrb	r2, [r3, #0]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	785a      	ldrb	r2, [r3, #1]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	3302      	adds	r3, #2
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	3303      	adds	r3, #3
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	b29b      	uxth	r3, r3
 800aede:	021b      	lsls	r3, r3, #8
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	4413      	add	r3, r2
 800aee4:	b29a      	uxth	r2, r3
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	3304      	adds	r3, #4
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	b29a      	uxth	r2, r3
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	3305      	adds	r3, #5
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	021b      	lsls	r3, r3, #8
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	4413      	add	r3, r2
 800af00:	b29a      	uxth	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	3306      	adds	r3, #6
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	b29a      	uxth	r2, r3
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	3307      	adds	r3, #7
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	b29b      	uxth	r3, r3
 800af16:	021b      	lsls	r3, r3, #8
 800af18:	b29b      	uxth	r3, r3
 800af1a:	4413      	add	r3, r2
 800af1c:	b29a      	uxth	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	80da      	strh	r2, [r3, #6]

}
 800af22:	bf00      	nop
 800af24:	370c      	adds	r7, #12
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr

0800af2e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	b082      	sub	sp, #8
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
 800af36:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800af38:	2180      	movs	r1, #128	; 0x80
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f001 fb62 	bl	800c604 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800af40:	2100      	movs	r1, #0
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f001 fb5e 	bl	800c604 <USBD_LL_StallEP>
}
 800af48:	bf00      	nop
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800af5c:	2300      	movs	r3, #0
 800af5e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d032      	beq.n	800afcc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f000 f834 	bl	800afd4 <USBD_GetLen>
 800af6c:	4603      	mov	r3, r0
 800af6e:	3301      	adds	r3, #1
 800af70:	b29b      	uxth	r3, r3
 800af72:	005b      	lsls	r3, r3, #1
 800af74:	b29a      	uxth	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	1c5a      	adds	r2, r3, #1
 800af7e:	75fa      	strb	r2, [r7, #23]
 800af80:	461a      	mov	r2, r3
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	4413      	add	r3, r2
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	7812      	ldrb	r2, [r2, #0]
 800af8a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800af8c:	7dfb      	ldrb	r3, [r7, #23]
 800af8e:	1c5a      	adds	r2, r3, #1
 800af90:	75fa      	strb	r2, [r7, #23]
 800af92:	461a      	mov	r2, r3
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	4413      	add	r3, r2
 800af98:	2203      	movs	r2, #3
 800af9a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800af9c:	e012      	b.n	800afc4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800af9e:	7dfb      	ldrb	r3, [r7, #23]
 800afa0:	1c5a      	adds	r2, r3, #1
 800afa2:	75fa      	strb	r2, [r7, #23]
 800afa4:	461a      	mov	r2, r3
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	441a      	add	r2, r3
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	1c59      	adds	r1, r3, #1
 800afae:	60f9      	str	r1, [r7, #12]
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800afb4:	7dfb      	ldrb	r3, [r7, #23]
 800afb6:	1c5a      	adds	r2, r3, #1
 800afb8:	75fa      	strb	r2, [r7, #23]
 800afba:	461a      	mov	r2, r3
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	4413      	add	r3, r2
 800afc0:	2200      	movs	r2, #0
 800afc2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1e8      	bne.n	800af9e <USBD_GetString+0x4e>
    }
  }
}
 800afcc:	bf00      	nop
 800afce:	3718      	adds	r7, #24
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800afdc:	2300      	movs	r3, #0
 800afde:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800afe0:	e005      	b.n	800afee <USBD_GetLen+0x1a>
    {
        len++;
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
 800afe4:	3301      	adds	r3, #1
 800afe6:	73fb      	strb	r3, [r7, #15]
        buf++;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	3301      	adds	r3, #1
 800afec:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1f5      	bne.n	800afe2 <USBD_GetLen+0xe>
    }

    return len;
 800aff6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3714      	adds	r7, #20
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	4613      	mov	r3, r2
 800b010:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2202      	movs	r2, #2
 800b016:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800b01a:	88fa      	ldrh	r2, [r7, #6]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b020:	88fa      	ldrh	r2, [r7, #6]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b026:	88fb      	ldrh	r3, [r7, #6]
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	2100      	movs	r1, #0
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f001 fbb1 	bl	800c794 <USBD_LL_Transmit>

  return USBD_OK;
 800b032:	2300      	movs	r3, #0
}
 800b034:	4618      	mov	r0, r3
 800b036:	3710      	adds	r7, #16
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	4613      	mov	r3, r2
 800b048:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b04a:	88fb      	ldrh	r3, [r7, #6]
 800b04c:	68ba      	ldr	r2, [r7, #8]
 800b04e:	2100      	movs	r1, #0
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	f001 fb9f 	bl	800c794 <USBD_LL_Transmit>

  return USBD_OK;
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	4613      	mov	r3, r2
 800b06c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2203      	movs	r2, #3
 800b072:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800b076:	88fa      	ldrh	r2, [r7, #6]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800b07e:	88fa      	ldrh	r2, [r7, #6]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800b086:	88fb      	ldrh	r3, [r7, #6]
 800b088:	68ba      	ldr	r2, [r7, #8]
 800b08a:	2100      	movs	r1, #0
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f001 fbbb 	bl	800c808 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b092:	2300      	movs	r3, #0
}
 800b094:	4618      	mov	r0, r3
 800b096:	3710      	adds	r7, #16
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0aa:	88fb      	ldrh	r3, [r7, #6]
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f001 fba9 	bl	800c808 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0b6:	2300      	movs	r3, #0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3710      	adds	r7, #16
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2204      	movs	r2, #4
 800b0cc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f001 fb5c 	bl	800c794 <USBD_LL_Transmit>

  return USBD_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b082      	sub	sp, #8
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2205      	movs	r2, #5
 800b0f2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f001 fb83 	bl	800c808 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b102:	2300      	movs	r3, #0
}
 800b104:	4618      	mov	r0, r3
 800b106:	3708      	adds	r7, #8
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b08a      	sub	sp, #40	; 0x28
 800b110:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b112:	f107 0314 	add.w	r3, r7, #20
 800b116:	2200      	movs	r2, #0
 800b118:	601a      	str	r2, [r3, #0]
 800b11a:	605a      	str	r2, [r3, #4]
 800b11c:	609a      	str	r2, [r3, #8]
 800b11e:	60da      	str	r2, [r3, #12]
 800b120:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b122:	4a70      	ldr	r2, [pc, #448]	; (800b2e4 <MX_GPIO_Init+0x1d8>)
 800b124:	4b6f      	ldr	r3, [pc, #444]	; (800b2e4 <MX_GPIO_Init+0x1d8>)
 800b126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b12c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b12e:	4b6d      	ldr	r3, [pc, #436]	; (800b2e4 <MX_GPIO_Init+0x1d8>)
 800b130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b136:	613b      	str	r3, [r7, #16]
 800b138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b13a:	4a6a      	ldr	r2, [pc, #424]	; (800b2e4 <MX_GPIO_Init+0x1d8>)
 800b13c:	4b69      	ldr	r3, [pc, #420]	; (800b2e4 <MX_GPIO_Init+0x1d8>)
 800b13e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b140:	f043 0304 	orr.w	r3, r3, #4
 800b144:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b146:	4b67      	ldr	r3, [pc, #412]	; (800b2e4 <MX_GPIO_Init+0x1d8>)
 800b148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b14a:	f003 0304 	and.w	r3, r3, #4
 800b14e:	60fb      	str	r3, [r7, #12]
 800b150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b152:	4a64      	ldr	r2, [pc, #400]	; (800b2e4 <MX_GPIO_Init+0x1d8>)
 800b154:	4b63      	ldr	r3, [pc, #396]	; (800b2e4 <MX_GPIO_Init+0x1d8>)
 800b156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b158:	f043 0301 	orr.w	r3, r3, #1
 800b15c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b15e:	4b61      	ldr	r3, [pc, #388]	; (800b2e4 <MX_GPIO_Init+0x1d8>)
 800b160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b162:	f003 0301 	and.w	r3, r3, #1
 800b166:	60bb      	str	r3, [r7, #8]
 800b168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b16a:	4a5e      	ldr	r2, [pc, #376]	; (800b2e4 <MX_GPIO_Init+0x1d8>)
 800b16c:	4b5d      	ldr	r3, [pc, #372]	; (800b2e4 <MX_GPIO_Init+0x1d8>)
 800b16e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b170:	f043 0302 	orr.w	r3, r3, #2
 800b174:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b176:	4b5b      	ldr	r3, [pc, #364]	; (800b2e4 <MX_GPIO_Init+0x1d8>)
 800b178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b17a:	f003 0302 	and.w	r3, r3, #2
 800b17e:	607b      	str	r3, [r7, #4]
 800b180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b182:	4a58      	ldr	r2, [pc, #352]	; (800b2e4 <MX_GPIO_Init+0x1d8>)
 800b184:	4b57      	ldr	r3, [pc, #348]	; (800b2e4 <MX_GPIO_Init+0x1d8>)
 800b186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b188:	f043 0308 	orr.w	r3, r3, #8
 800b18c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b18e:	4b55      	ldr	r3, [pc, #340]	; (800b2e4 <MX_GPIO_Init+0x1d8>)
 800b190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b192:	f003 0308 	and.w	r3, r3, #8
 800b196:	603b      	str	r3, [r7, #0]
 800b198:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, O_USART2_DIR_Pin|O_USART1_DIR_Pin, GPIO_PIN_RESET);
 800b19a:	2200      	movs	r2, #0
 800b19c:	f241 0104 	movw	r1, #4100	; 0x1004
 800b1a0:	4851      	ldr	r0, [pc, #324]	; (800b2e8 <MX_GPIO_Init+0x1dc>)
 800b1a2:	f7f8 fbdf 	bl	8003964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O_BT_PWR_GPIO_Port, O_BT_PWR_Pin, GPIO_PIN_SET);
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b1ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b1b0:	f7f8 fbd8 	bl	8003964 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = O_USART2_DIR_Pin|O_USART1_DIR_Pin;
 800b1b4:	f241 0304 	movw	r3, #4100	; 0x1004
 800b1b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b1c6:	f107 0314 	add.w	r3, r7, #20
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	4846      	ldr	r0, [pc, #280]	; (800b2e8 <MX_GPIO_Init+0x1dc>)
 800b1ce:	f7f8 fa37 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_USART2_BREAK_Pin;
 800b1d2:	2308      	movs	r3, #8
 800b1d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(O_USART2_BREAK_GPIO_Port, &GPIO_InitStruct);
 800b1de:	f107 0314 	add.w	r3, r7, #20
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	4840      	ldr	r0, [pc, #256]	; (800b2e8 <MX_GPIO_Init+0x1dc>)
 800b1e6:	f7f8 fa2b 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = I_GPIO1_Pin|I_GPIO2_Pin|I_GPIO3_Pin|I_GPIO4_Pin;
 800b1ea:	23f0      	movs	r3, #240	; 0xf0
 800b1ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1f6:	f107 0314 	add.w	r3, r7, #20
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b200:	f7f8 fa1e 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_USB_VBUS_Pin;
 800b204:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800b20a:	4b38      	ldr	r3, [pc, #224]	; (800b2ec <MX_GPIO_Init+0x1e0>)
 800b20c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b20e:	2300      	movs	r3, #0
 800b210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I_USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b212:	f107 0314 	add.w	r3, r7, #20
 800b216:	4619      	mov	r1, r3
 800b218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b21c:	f7f8 fa10 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_SW2_Pin;
 800b220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b226:	2300      	movs	r3, #0
 800b228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b22a:	2301      	movs	r3, #1
 800b22c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I_SW2_GPIO_Port, &GPIO_InitStruct);
 800b22e:	f107 0314 	add.w	r3, r7, #20
 800b232:	4619      	mov	r1, r3
 800b234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b238:	f7f8 fa02 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_BT_PWR_Pin;
 800b23c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b242:	2301      	movs	r3, #1
 800b244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b246:	2300      	movs	r3, #0
 800b248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b24a:	2300      	movs	r3, #0
 800b24c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(O_BT_PWR_GPIO_Port, &GPIO_InitStruct);
 800b24e:	f107 0314 	add.w	r3, r7, #20
 800b252:	4619      	mov	r1, r3
 800b254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b258:	f7f8 f9f2 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_USART1_BREAK_Pin;
 800b25c:	2304      	movs	r3, #4
 800b25e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b260:	2300      	movs	r3, #0
 800b262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b264:	2300      	movs	r3, #0
 800b266:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(O_USART1_BREAK_GPIO_Port, &GPIO_InitStruct);
 800b268:	f107 0314 	add.w	r3, r7, #20
 800b26c:	4619      	mov	r1, r3
 800b26e:	4820      	ldr	r0, [pc, #128]	; (800b2f0 <MX_GPIO_Init+0x1e4>)
 800b270:	f7f8 f9e6 	bl	8003640 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = O_PWM_LED3_Pin;
 800b274:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b27a:	2301      	movs	r3, #1
 800b27c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b27e:	2300      	movs	r3, #0
 800b280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b282:	2300      	movs	r3, #0
 800b284:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(O_PWM_LED3_GPIO_Port, &GPIO_InitStruct);
 800b286:	f107 0314 	add.w	r3, r7, #20
 800b28a:	4619      	mov	r1, r3
 800b28c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b290:	f7f8 f9d6 	bl	8003640 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(O_PWM_LED3_GPIO_Port, O_PWM_LED3_Pin, GPIO_PIN_RESET);
 800b294:	2200      	movs	r2, #0
 800b296:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b29a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b29e:	f7f8 fb61 	bl	8003964 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = O_PWM_LED2_Pin|O_PWM_LED1_Pin;
 800b2a2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800b2a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b2b4:	f107 0314 	add.w	r3, r7, #20
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	480e      	ldr	r0, [pc, #56]	; (800b2f4 <MX_GPIO_Init+0x1e8>)
 800b2bc:	f7f8 f9c0 	bl	8003640 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, O_PWM_LED2_Pin|O_PWM_LED1_Pin, GPIO_PIN_RESET);
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800b2c6:	480b      	ldr	r0, [pc, #44]	; (800b2f4 <MX_GPIO_Init+0x1e8>)
 800b2c8:	f7f8 fb4c 	bl	8003964 <HAL_GPIO_WritePin>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	2101      	movs	r1, #1
 800b2d0:	2017      	movs	r0, #23
 800b2d2:	f7f8 f97e 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800b2d6:	2017      	movs	r0, #23
 800b2d8:	f7f8 f997 	bl	800360a <HAL_NVIC_EnableIRQ>

}
 800b2dc:	bf00      	nop
 800b2de:	3728      	adds	r7, #40	; 0x28
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	40021000 	.word	0x40021000
 800b2e8:	48000800 	.word	0x48000800
 800b2ec:	10310000 	.word	0x10310000
 800b2f0:	48000c00 	.word	0x48000c00
 800b2f4:	48000400 	.word	0x48000400

0800b2f8 <gpio_ConfigureToFloating>:

/* USER CODE BEGIN 2 */
void gpio_ConfigureToFloating(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b088      	sub	sp, #32
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	460b      	mov	r3, r1
 800b302:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b304:	f107 030c 	add.w	r3, r7, #12
 800b308:	2200      	movs	r2, #0
 800b30a:	601a      	str	r2, [r3, #0]
 800b30c:	605a      	str	r2, [r3, #4]
 800b30e:	609a      	str	r2, [r3, #8]
 800b310:	60da      	str	r2, [r3, #12]
 800b312:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800b314:	887b      	ldrh	r3, [r7, #2]
 800b316:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b318:	2300      	movs	r3, #0
 800b31a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b31c:	2300      	movs	r3, #0
 800b31e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800b320:	f107 030c 	add.w	r3, r7, #12
 800b324:	4619      	mov	r1, r3
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f7f8 f98a 	bl	8003640 <HAL_GPIO_Init>
}
 800b32c:	bf00      	nop
 800b32e:	3720      	adds	r7, #32
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <gpio_ConfigureToPushPull>:
void gpio_ConfigureToPushPull(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 800b334:	b580      	push	{r7, lr}
 800b336:	b088      	sub	sp, #32
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	460b      	mov	r3, r1
 800b33e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b340:	f107 030c 	add.w	r3, r7, #12
 800b344:	2200      	movs	r2, #0
 800b346:	601a      	str	r2, [r3, #0]
 800b348:	605a      	str	r2, [r3, #4]
 800b34a:	609a      	str	r2, [r3, #8]
 800b34c:	60da      	str	r2, [r3, #12]
 800b34e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800b350:	887b      	ldrh	r3, [r7, #2]
 800b352:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b354:	2301      	movs	r3, #1
 800b356:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b358:	2300      	movs	r3, #0
 800b35a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b35c:	2303      	movs	r3, #3
 800b35e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800b360:	f107 030c 	add.w	r3, r7, #12
 800b364:	4619      	mov	r1, r3
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f7f8 f96a 	bl	8003640 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800b36c:	887b      	ldrh	r3, [r7, #2]
 800b36e:	2200      	movs	r2, #0
 800b370:	4619      	mov	r1, r3
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f7f8 faf6 	bl	8003964 <HAL_GPIO_WritePin>
}
 800b378:	bf00      	nop
 800b37a:	3720      	adds	r7, #32
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800b384:	4b1b      	ldr	r3, [pc, #108]	; (800b3f4 <MX_I2C2_Init+0x74>)
 800b386:	4a1c      	ldr	r2, [pc, #112]	; (800b3f8 <MX_I2C2_Init+0x78>)
 800b388:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800b38a:	4b1a      	ldr	r3, [pc, #104]	; (800b3f4 <MX_I2C2_Init+0x74>)
 800b38c:	4a1b      	ldr	r2, [pc, #108]	; (800b3fc <MX_I2C2_Init+0x7c>)
 800b38e:	605a      	str	r2, [r3, #4]
//  hi2c2.Init.Timing = 0x00702991;
  hi2c2.Init.OwnAddress1 = 0;
 800b390:	4b18      	ldr	r3, [pc, #96]	; (800b3f4 <MX_I2C2_Init+0x74>)
 800b392:	2200      	movs	r2, #0
 800b394:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b396:	4b17      	ldr	r3, [pc, #92]	; (800b3f4 <MX_I2C2_Init+0x74>)
 800b398:	2201      	movs	r2, #1
 800b39a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b39c:	4b15      	ldr	r3, [pc, #84]	; (800b3f4 <MX_I2C2_Init+0x74>)
 800b39e:	2200      	movs	r2, #0
 800b3a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800b3a2:	4b14      	ldr	r3, [pc, #80]	; (800b3f4 <MX_I2C2_Init+0x74>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b3a8:	4b12      	ldr	r3, [pc, #72]	; (800b3f4 <MX_I2C2_Init+0x74>)
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b3ae:	4b11      	ldr	r3, [pc, #68]	; (800b3f4 <MX_I2C2_Init+0x74>)
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b3b4:	4b0f      	ldr	r3, [pc, #60]	; (800b3f4 <MX_I2C2_Init+0x74>)
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800b3ba:	480e      	ldr	r0, [pc, #56]	; (800b3f4 <MX_I2C2_Init+0x74>)
 800b3bc:	f7f8 fb14 	bl	80039e8 <HAL_I2C_Init>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d001      	beq.n	800b3ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800b3c6:	f000 f9a3 	bl	800b710 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	4809      	ldr	r0, [pc, #36]	; (800b3f4 <MX_I2C2_Init+0x74>)
 800b3ce:	f7f9 f8d5 	bl	800457c <HAL_I2CEx_ConfigAnalogFilter>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d001      	beq.n	800b3dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800b3d8:	f000 f99a 	bl	800b710 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800b3dc:	2100      	movs	r1, #0
 800b3de:	4805      	ldr	r0, [pc, #20]	; (800b3f4 <MX_I2C2_Init+0x74>)
 800b3e0:	f7f9 f917 	bl	8004612 <HAL_I2CEx_ConfigDigitalFilter>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d001      	beq.n	800b3ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800b3ea:	f000 f991 	bl	800b710 <Error_Handler>
  }

}
 800b3ee:	bf00      	nop
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	2000a3dc 	.word	0x2000a3dc
 800b3f8:	40005800 	.word	0x40005800
 800b3fc:	10909cec 	.word	0x10909cec

0800b400 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b08a      	sub	sp, #40	; 0x28
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b408:	f107 0314 	add.w	r3, r7, #20
 800b40c:	2200      	movs	r2, #0
 800b40e:	601a      	str	r2, [r3, #0]
 800b410:	605a      	str	r2, [r3, #4]
 800b412:	609a      	str	r2, [r3, #8]
 800b414:	60da      	str	r2, [r3, #12]
 800b416:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a17      	ldr	r2, [pc, #92]	; (800b47c <HAL_I2C_MspInit+0x7c>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d128      	bne.n	800b474 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b422:	4a17      	ldr	r2, [pc, #92]	; (800b480 <HAL_I2C_MspInit+0x80>)
 800b424:	4b16      	ldr	r3, [pc, #88]	; (800b480 <HAL_I2C_MspInit+0x80>)
 800b426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b428:	f043 0302 	orr.w	r3, r3, #2
 800b42c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b42e:	4b14      	ldr	r3, [pc, #80]	; (800b480 <HAL_I2C_MspInit+0x80>)
 800b430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b432:	f003 0302 	and.w	r3, r3, #2
 800b436:	613b      	str	r3, [r7, #16]
 800b438:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b43a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b43e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b440:	2312      	movs	r3, #18
 800b442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b444:	2301      	movs	r3, #1
 800b446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b448:	2303      	movs	r3, #3
 800b44a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b44c:	2304      	movs	r3, #4
 800b44e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b450:	f107 0314 	add.w	r3, r7, #20
 800b454:	4619      	mov	r1, r3
 800b456:	480b      	ldr	r0, [pc, #44]	; (800b484 <HAL_I2C_MspInit+0x84>)
 800b458:	f7f8 f8f2 	bl	8003640 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b45c:	4a08      	ldr	r2, [pc, #32]	; (800b480 <HAL_I2C_MspInit+0x80>)
 800b45e:	4b08      	ldr	r3, [pc, #32]	; (800b480 <HAL_I2C_MspInit+0x80>)
 800b460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b462:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b466:	6593      	str	r3, [r2, #88]	; 0x58
 800b468:	4b05      	ldr	r3, [pc, #20]	; (800b480 <HAL_I2C_MspInit+0x80>)
 800b46a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b46c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b470:	60fb      	str	r3, [r7, #12]
 800b472:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800b474:	bf00      	nop
 800b476:	3728      	adds	r7, #40	; 0x28
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	40005800 	.word	0x40005800
 800b480:	40021000 	.word	0x40021000
 800b484:	48000400 	.word	0x48000400

0800b488 <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim1;
LPTIM_HandleTypeDef hlptim2;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	af00      	add	r7, sp, #0

  hlptim1.Instance = LPTIM1;
 800b48c:	4b12      	ldr	r3, [pc, #72]	; (800b4d8 <MX_LPTIM1_Init+0x50>)
 800b48e:	4a13      	ldr	r2, [pc, #76]	; (800b4dc <MX_LPTIM1_Init+0x54>)
 800b490:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800b492:	4b11      	ldr	r3, [pc, #68]	; (800b4d8 <MX_LPTIM1_Init+0x50>)
 800b494:	2200      	movs	r2, #0
 800b496:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800b498:	4b0f      	ldr	r3, [pc, #60]	; (800b4d8 <MX_LPTIM1_Init+0x50>)
 800b49a:	2200      	movs	r2, #0
 800b49c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800b49e:	4b0e      	ldr	r3, [pc, #56]	; (800b4d8 <MX_LPTIM1_Init+0x50>)
 800b4a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4a4:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800b4a6:	4b0c      	ldr	r3, [pc, #48]	; (800b4d8 <MX_LPTIM1_Init+0x50>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800b4ac:	4b0a      	ldr	r3, [pc, #40]	; (800b4d8 <MX_LPTIM1_Init+0x50>)
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800b4b2:	4b09      	ldr	r3, [pc, #36]	; (800b4d8 <MX_LPTIM1_Init+0x50>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800b4b8:	4b07      	ldr	r3, [pc, #28]	; (800b4d8 <MX_LPTIM1_Init+0x50>)
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800b4be:	4b06      	ldr	r3, [pc, #24]	; (800b4d8 <MX_LPTIM1_Init+0x50>)
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800b4c4:	4804      	ldr	r0, [pc, #16]	; (800b4d8 <MX_LPTIM1_Init+0x50>)
 800b4c6:	f7f9 f8f1 	bl	80046ac <HAL_LPTIM_Init>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d001      	beq.n	800b4d4 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 800b4d0:	f000 f91e 	bl	800b710 <Error_Handler>
  }

}
 800b4d4:	bf00      	nop
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	2000a460 	.word	0x2000a460
 800b4dc:	40007c00 	.word	0x40007c00

0800b4e0 <MX_LPTIM2_Init>:
/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	af00      	add	r7, sp, #0

  hlptim2.Instance = LPTIM2;
 800b4e4:	4b12      	ldr	r3, [pc, #72]	; (800b530 <MX_LPTIM2_Init+0x50>)
 800b4e6:	4a13      	ldr	r2, [pc, #76]	; (800b534 <MX_LPTIM2_Init+0x54>)
 800b4e8:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800b4ea:	4b11      	ldr	r3, [pc, #68]	; (800b530 <MX_LPTIM2_Init+0x50>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800b4f0:	4b0f      	ldr	r3, [pc, #60]	; (800b530 <MX_LPTIM2_Init+0x50>)
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800b4f6:	4b0e      	ldr	r3, [pc, #56]	; (800b530 <MX_LPTIM2_Init+0x50>)
 800b4f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4fc:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800b4fe:	4b0c      	ldr	r3, [pc, #48]	; (800b530 <MX_LPTIM2_Init+0x50>)
 800b500:	2200      	movs	r2, #0
 800b502:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800b504:	4b0a      	ldr	r3, [pc, #40]	; (800b530 <MX_LPTIM2_Init+0x50>)
 800b506:	2200      	movs	r2, #0
 800b508:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800b50a:	4b09      	ldr	r3, [pc, #36]	; (800b530 <MX_LPTIM2_Init+0x50>)
 800b50c:	2200      	movs	r2, #0
 800b50e:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800b510:	4b07      	ldr	r3, [pc, #28]	; (800b530 <MX_LPTIM2_Init+0x50>)
 800b512:	2200      	movs	r2, #0
 800b514:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800b516:	4b06      	ldr	r3, [pc, #24]	; (800b530 <MX_LPTIM2_Init+0x50>)
 800b518:	2200      	movs	r2, #0
 800b51a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 800b51c:	4804      	ldr	r0, [pc, #16]	; (800b530 <MX_LPTIM2_Init+0x50>)
 800b51e:	f7f9 f8c5 	bl	80046ac <HAL_LPTIM_Init>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d001      	beq.n	800b52c <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 800b528:	f000 f8f2 	bl	800b710 <Error_Handler>
  }

}
 800b52c:	bf00      	nop
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	2000a428 	.word	0x2000a428
 800b534:	40009400 	.word	0x40009400

0800b538 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]

  if(lptimHandle->Instance==LPTIM1)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a1a      	ldr	r2, [pc, #104]	; (800b5b0 <HAL_LPTIM_MspInit+0x78>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d114      	bne.n	800b574 <HAL_LPTIM_MspInit+0x3c>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800b54a:	4a1a      	ldr	r2, [pc, #104]	; (800b5b4 <HAL_LPTIM_MspInit+0x7c>)
 800b54c:	4b19      	ldr	r3, [pc, #100]	; (800b5b4 <HAL_LPTIM_MspInit+0x7c>)
 800b54e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b550:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b554:	6593      	str	r3, [r2, #88]	; 0x58
 800b556:	4b17      	ldr	r3, [pc, #92]	; (800b5b4 <HAL_LPTIM_MspInit+0x7c>)
 800b558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b55a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b55e:	60fb      	str	r3, [r7, #12]
 800b560:	68fb      	ldr	r3, [r7, #12]

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800b562:	2200      	movs	r2, #0
 800b564:	2100      	movs	r1, #0
 800b566:	2041      	movs	r0, #65	; 0x41
 800b568:	f7f8 f833 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800b56c:	2041      	movs	r0, #65	; 0x41
 800b56e:	f7f8 f84c 	bl	800360a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }
}
 800b572:	e018      	b.n	800b5a6 <HAL_LPTIM_MspInit+0x6e>
  else if(lptimHandle->Instance==LPTIM2)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4a0f      	ldr	r2, [pc, #60]	; (800b5b8 <HAL_LPTIM_MspInit+0x80>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d113      	bne.n	800b5a6 <HAL_LPTIM_MspInit+0x6e>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800b57e:	4a0d      	ldr	r2, [pc, #52]	; (800b5b4 <HAL_LPTIM_MspInit+0x7c>)
 800b580:	4b0c      	ldr	r3, [pc, #48]	; (800b5b4 <HAL_LPTIM_MspInit+0x7c>)
 800b582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b584:	f043 0320 	orr.w	r3, r3, #32
 800b588:	65d3      	str	r3, [r2, #92]	; 0x5c
 800b58a:	4b0a      	ldr	r3, [pc, #40]	; (800b5b4 <HAL_LPTIM_MspInit+0x7c>)
 800b58c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b58e:	f003 0320 	and.w	r3, r3, #32
 800b592:	60bb      	str	r3, [r7, #8]
 800b594:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 800b596:	2200      	movs	r2, #0
 800b598:	2100      	movs	r1, #0
 800b59a:	2042      	movs	r0, #66	; 0x42
 800b59c:	f7f8 f819 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 800b5a0:	2042      	movs	r0, #66	; 0x42
 800b5a2:	f7f8 f832 	bl	800360a <HAL_NVIC_EnableIRQ>
}
 800b5a6:	bf00      	nop
 800b5a8:	3710      	adds	r7, #16
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	40007c00 	.word	0x40007c00
 800b5b4:	40021000 	.word	0x40021000
 800b5b8:	40009400 	.word	0x40009400

0800b5bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b5c0:	f7f7 fedc 	bl	800337c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b5c4:	f000 f81b 	bl	800b5fe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b5c8:	f7ff fda0 	bl	800b10c <MX_GPIO_Init>
  MX_I2C2_Init();
 800b5cc:	f7ff fed8 	bl	800b380 <MX_I2C2_Init>
  MX_LPTIM1_Init();
 800b5d0:	f7ff ff5a 	bl	800b488 <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 800b5d4:	f7ff ff84 	bl	800b4e0 <MX_LPTIM2_Init>
//  MX_TIM1_Init();
  MX_TIM2_Init();
 800b5d8:	f000 f992 	bl	800b900 <MX_TIM2_Init>
  MX_TIM3_Init();
 800b5dc:	f000 f9f0 	bl	800b9c0 <MX_TIM3_Init>
  MX_TIM6_Init();
 800b5e0:	f000 fa4e 	bl	800ba80 <MX_TIM6_Init>
  //MX_TIM15_Init();
  MX_TIM16_Init();
 800b5e4:	f000 fa82 	bl	800baec <MX_TIM16_Init>
  MX_UART4_Init();
 800b5e8:	f000 fbda 	bl	800bda0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800b5ec:	f000 fc08 	bl	800be00 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b5f0:	f000 fc38 	bl	800be64 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800b5f4:	f000 fd28 	bl	800c048 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
//  TIM15->CCR4 = 255;
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
  app_main();
 800b5f8:	f7f7 fd04 	bl	8003004 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800b5fc:	e7fe      	b.n	800b5fc <main+0x40>

0800b5fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b0b0      	sub	sp, #192	; 0xc0
 800b602:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b604:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b608:	2244      	movs	r2, #68	; 0x44
 800b60a:	2100      	movs	r1, #0
 800b60c:	4618      	mov	r0, r3
 800b60e:	f001 face 	bl	800cbae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b612:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b616:	2200      	movs	r2, #0
 800b618:	601a      	str	r2, [r3, #0]
 800b61a:	605a      	str	r2, [r3, #4]
 800b61c:	609a      	str	r2, [r3, #8]
 800b61e:	60da      	str	r2, [r3, #12]
 800b620:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b622:	463b      	mov	r3, r7
 800b624:	2268      	movs	r2, #104	; 0x68
 800b626:	2100      	movs	r1, #0
 800b628:	4618      	mov	r0, r3
 800b62a:	f001 fac0 	bl	800cbae <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b62e:	2301      	movs	r3, #1
 800b630:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b636:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b63a:	2302      	movs	r3, #2
 800b63c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b640:	2303      	movs	r3, #3
 800b642:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800b646:	2301      	movs	r3, #1
 800b648:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 20;
 800b64c:	2314      	movs	r3, #20
 800b64e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800b652:	2307      	movs	r3, #7
 800b654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800b658:	2302      	movs	r3, #2
 800b65a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800b65e:	2302      	movs	r3, #2
 800b660:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b664:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b668:	4618      	mov	r0, r3
 800b66a:	f7fa f94f 	bl	800590c <HAL_RCC_OscConfig>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d001      	beq.n	800b678 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800b674:	f000 f84c 	bl	800b710 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b678:	230f      	movs	r3, #15
 800b67a:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b67c:	2303      	movs	r3, #3
 800b67e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b680:	2300      	movs	r3, #0
 800b682:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b684:	2300      	movs	r3, #0
 800b686:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b688:	2300      	movs	r3, #0
 800b68a:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800b68c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b690:	2104      	movs	r1, #4
 800b692:	4618      	mov	r0, r3
 800b694:	f7fa fce0 	bl	8006058 <HAL_RCC_ClockConfig>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d001      	beq.n	800b6a2 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800b69e:	f000 f837 	bl	800b710 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800b6a2:	f242 638b 	movw	r3, #9867	; 0x268b
 800b6a6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_LPTIM1
                              |RCC_PERIPHCLK_LPTIM2|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b6c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b6c4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800b6c6:	2303      	movs	r3, #3
 800b6c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800b6ce:	230c      	movs	r3, #12
 800b6d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800b6d2:	2307      	movs	r3, #7
 800b6d4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800b6d6:	2302      	movs	r3, #2
 800b6d8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800b6da:	2302      	movs	r3, #2
 800b6dc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800b6de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b6e2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b6e4:	463b      	mov	r3, r7
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7fa fec8 	bl	800647c <HAL_RCCEx_PeriphCLKConfig>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d001      	beq.n	800b6f6 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800b6f2:	f000 f80d 	bl	800b710 <Error_Handler>
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800b6f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b6fa:	f7fa f8a1 	bl	8005840 <HAL_PWREx_ControlVoltageScaling>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d001      	beq.n	800b708 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800b704:	f000 f804 	bl	800b710 <Error_Handler>
  }
}
 800b708:	bf00      	nop
 800b70a:	37c0      	adds	r7, #192	; 0xc0
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b710:	b480      	push	{r7}
 800b712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800b714:	bf00      	nop
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr
	...

0800b720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b726:	4a0f      	ldr	r2, [pc, #60]	; (800b764 <HAL_MspInit+0x44>)
 800b728:	4b0e      	ldr	r3, [pc, #56]	; (800b764 <HAL_MspInit+0x44>)
 800b72a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b72c:	f043 0301 	orr.w	r3, r3, #1
 800b730:	6613      	str	r3, [r2, #96]	; 0x60
 800b732:	4b0c      	ldr	r3, [pc, #48]	; (800b764 <HAL_MspInit+0x44>)
 800b734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b736:	f003 0301 	and.w	r3, r3, #1
 800b73a:	607b      	str	r3, [r7, #4]
 800b73c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b73e:	4a09      	ldr	r2, [pc, #36]	; (800b764 <HAL_MspInit+0x44>)
 800b740:	4b08      	ldr	r3, [pc, #32]	; (800b764 <HAL_MspInit+0x44>)
 800b742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b748:	6593      	str	r3, [r2, #88]	; 0x58
 800b74a:	4b06      	ldr	r3, [pc, #24]	; (800b764 <HAL_MspInit+0x44>)
 800b74c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b74e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b752:	603b      	str	r3, [r7, #0]
 800b754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b756:	bf00      	nop
 800b758:	370c      	adds	r7, #12
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	40021000 	.word	0x40021000

0800b768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b768:	b480      	push	{r7}
 800b76a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b76c:	bf00      	nop
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr

0800b776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b776:	b480      	push	{r7}
 800b778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b77a:	e7fe      	b.n	800b77a <HardFault_Handler+0x4>

0800b77c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b77c:	b480      	push	{r7}
 800b77e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b780:	e7fe      	b.n	800b780 <MemManage_Handler+0x4>

0800b782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b782:	b480      	push	{r7}
 800b784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b786:	e7fe      	b.n	800b786 <BusFault_Handler+0x4>

0800b788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b788:	b480      	push	{r7}
 800b78a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b78c:	e7fe      	b.n	800b78c <UsageFault_Handler+0x4>

0800b78e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b78e:	b480      	push	{r7}
 800b790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b792:	bf00      	nop
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b79c:	b480      	push	{r7}
 800b79e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b7a0:	bf00      	nop
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr

0800b7aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b7aa:	b480      	push	{r7}
 800b7ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b7ae:	bf00      	nop
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b7bc:	f7f7 fe1a 	bl	80033f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  app_1ms();
 800b7c0:	f7f7 fc54 	bl	800306c <app_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 800b7c4:	bf00      	nop
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800b7cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b7d0:	f7f8 f8f2 	bl	80039b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800b7d4:	bf00      	nop
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b7dc:	4803      	ldr	r0, [pc, #12]	; (800b7ec <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800b7de:	f7fb f9fd 	bl	8006bdc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800b7e2:	4803      	ldr	r0, [pc, #12]	; (800b7f0 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800b7e4:	f7fb f9fa 	bl	8006bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800b7e8:	bf00      	nop
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	2000a558 	.word	0x2000a558
 800b7f0:	2000a498 	.word	0x2000a498

0800b7f4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b7f8:	4802      	ldr	r0, [pc, #8]	; (800b804 <TIM1_TRG_COM_IRQHandler+0x10>)
 800b7fa:	f7fb f9ef 	bl	8006bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800b7fe:	bf00      	nop
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	2000a558 	.word	0x2000a558

0800b808 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b80c:	4802      	ldr	r0, [pc, #8]	; (800b818 <TIM1_CC_IRQHandler+0x10>)
 800b80e:	f7fb f9e5 	bl	8006bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800b812:	bf00      	nop
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	2000a558 	.word	0x2000a558

0800b81c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b820:	4802      	ldr	r0, [pc, #8]	; (800b82c <TIM2_IRQHandler+0x10>)
 800b822:	f7fb f9db 	bl	8006bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b826:	bf00      	nop
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	2000a598 	.word	0x2000a598

0800b830 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800b834:	4802      	ldr	r0, [pc, #8]	; (800b840 <TIM3_IRQHandler+0x10>)
 800b836:	f7fb f9d1 	bl	8006bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800b83a:	bf00      	nop
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	2000a4d8 	.word	0x2000a4d8

0800b844 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b848:	4802      	ldr	r0, [pc, #8]	; (800b854 <TIM6_DAC_IRQHandler+0x10>)
 800b84a:	f7fb f9c7 	bl	8006bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b84e:	bf00      	nop
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	2000a518 	.word	0x2000a518

0800b858 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800b85c:	4802      	ldr	r0, [pc, #8]	; (800b868 <LPTIM1_IRQHandler+0x10>)
 800b85e:	f7f8 ffaf 	bl	80047c0 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800b862:	bf00      	nop
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	2000a460 	.word	0x2000a460

0800b86c <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 800b870:	4802      	ldr	r0, [pc, #8]	; (800b87c <LPTIM2_IRQHandler+0x10>)
 800b872:	f7f8 ffa5 	bl	80047c0 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 800b876:	bf00      	nop
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	2000a428 	.word	0x2000a428

0800b880 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800b884:	4802      	ldr	r0, [pc, #8]	; (800b890 <USB_IRQHandler+0x10>)
 800b886:	f7f9 f977 	bl	8004b78 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800b88a:	bf00      	nop
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	2000ba1c 	.word	0x2000ba1c

0800b894 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800b894:	b480      	push	{r7}
 800b896:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b898:	4a17      	ldr	r2, [pc, #92]	; (800b8f8 <SystemInit+0x64>)
 800b89a:	4b17      	ldr	r3, [pc, #92]	; (800b8f8 <SystemInit+0x64>)
 800b89c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b8a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800b8a8:	4a14      	ldr	r2, [pc, #80]	; (800b8fc <SystemInit+0x68>)
 800b8aa:	4b14      	ldr	r3, [pc, #80]	; (800b8fc <SystemInit+0x68>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f043 0301 	orr.w	r3, r3, #1
 800b8b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800b8b4:	4b11      	ldr	r3, [pc, #68]	; (800b8fc <SystemInit+0x68>)
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800b8ba:	4a10      	ldr	r2, [pc, #64]	; (800b8fc <SystemInit+0x68>)
 800b8bc:	4b0f      	ldr	r3, [pc, #60]	; (800b8fc <SystemInit+0x68>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800b8c4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800b8c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800b8ca:	4b0c      	ldr	r3, [pc, #48]	; (800b8fc <SystemInit+0x68>)
 800b8cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b8d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b8d2:	4a0a      	ldr	r2, [pc, #40]	; (800b8fc <SystemInit+0x68>)
 800b8d4:	4b09      	ldr	r3, [pc, #36]	; (800b8fc <SystemInit+0x68>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b8dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800b8de:	4b07      	ldr	r3, [pc, #28]	; (800b8fc <SystemInit+0x68>)
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b8e4:	4b04      	ldr	r3, [pc, #16]	; (800b8f8 <SystemInit+0x64>)
 800b8e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b8ea:	609a      	str	r2, [r3, #8]
#endif
}
 800b8ec:	bf00      	nop
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr
 800b8f6:	bf00      	nop
 800b8f8:	e000ed00 	.word	0xe000ed00
 800b8fc:	40021000 	.word	0x40021000

0800b900 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b088      	sub	sp, #32
 800b904:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b906:	f107 0314 	add.w	r3, r7, #20
 800b90a:	2200      	movs	r2, #0
 800b90c:	601a      	str	r2, [r3, #0]
 800b90e:	605a      	str	r2, [r3, #4]
 800b910:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800b912:	1d3b      	adds	r3, r7, #4
 800b914:	2200      	movs	r2, #0
 800b916:	601a      	str	r2, [r3, #0]
 800b918:	605a      	str	r2, [r3, #4]
 800b91a:	609a      	str	r2, [r3, #8]
 800b91c:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800b91e:	4b27      	ldr	r3, [pc, #156]	; (800b9bc <MX_TIM2_Init+0xbc>)
 800b920:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b924:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800b926:	4b25      	ldr	r3, [pc, #148]	; (800b9bc <MX_TIM2_Init+0xbc>)
 800b928:	2200      	movs	r2, #0
 800b92a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b92c:	4b23      	ldr	r3, [pc, #140]	; (800b9bc <MX_TIM2_Init+0xbc>)
 800b92e:	2200      	movs	r2, #0
 800b930:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800b932:	4b22      	ldr	r3, [pc, #136]	; (800b9bc <MX_TIM2_Init+0xbc>)
 800b934:	2200      	movs	r2, #0
 800b936:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b938:	4b20      	ldr	r3, [pc, #128]	; (800b9bc <MX_TIM2_Init+0xbc>)
 800b93a:	2200      	movs	r2, #0
 800b93c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b93e:	4b1f      	ldr	r3, [pc, #124]	; (800b9bc <MX_TIM2_Init+0xbc>)
 800b940:	2200      	movs	r2, #0
 800b942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800b944:	481d      	ldr	r0, [pc, #116]	; (800b9bc <MX_TIM2_Init+0xbc>)
 800b946:	f7fb f91e 	bl	8006b86 <HAL_TIM_IC_Init>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d001      	beq.n	800b954 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800b950:	f7ff fede 	bl	800b710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b954:	2300      	movs	r3, #0
 800b956:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b958:	2300      	movs	r3, #0
 800b95a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b95c:	f107 0314 	add.w	r3, r7, #20
 800b960:	4619      	mov	r1, r3
 800b962:	4816      	ldr	r0, [pc, #88]	; (800b9bc <MX_TIM2_Init+0xbc>)
 800b964:	f7fb fc9e 	bl	80072a4 <HAL_TIMEx_MasterConfigSynchronization>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d001      	beq.n	800b972 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b96e:	f7ff fecf 	bl	800b710 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800b972:	2300      	movs	r3, #0
 800b974:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800b976:	2301      	movs	r3, #1
 800b978:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800b97a:	2300      	movs	r3, #0
 800b97c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800b97e:	2300      	movs	r3, #0
 800b980:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800b982:	1d3b      	adds	r3, r7, #4
 800b984:	2200      	movs	r2, #0
 800b986:	4619      	mov	r1, r3
 800b988:	480c      	ldr	r0, [pc, #48]	; (800b9bc <MX_TIM2_Init+0xbc>)
 800b98a:	f7fb fa46 	bl	8006e1a <HAL_TIM_IC_ConfigChannel>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d001      	beq.n	800b998 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800b994:	f7ff febc 	bl	800b710 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800b998:	2302      	movs	r3, #2
 800b99a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800b99c:	1d3b      	adds	r3, r7, #4
 800b99e:	2204      	movs	r2, #4
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	4806      	ldr	r0, [pc, #24]	; (800b9bc <MX_TIM2_Init+0xbc>)
 800b9a4:	f7fb fa39 	bl	8006e1a <HAL_TIM_IC_ConfigChannel>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d001      	beq.n	800b9b2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800b9ae:	f7ff feaf 	bl	800b710 <Error_Handler>
  }

}
 800b9b2:	bf00      	nop
 800b9b4:	3720      	adds	r7, #32
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	2000a598 	.word	0x2000a598

0800b9c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b088      	sub	sp, #32
 800b9c4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b9c6:	f107 0314 	add.w	r3, r7, #20
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	601a      	str	r2, [r3, #0]
 800b9ce:	605a      	str	r2, [r3, #4]
 800b9d0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800b9d2:	1d3b      	adds	r3, r7, #4
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	601a      	str	r2, [r3, #0]
 800b9d8:	605a      	str	r2, [r3, #4]
 800b9da:	609a      	str	r2, [r3, #8]
 800b9dc:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 800b9de:	4b26      	ldr	r3, [pc, #152]	; (800ba78 <MX_TIM3_Init+0xb8>)
 800b9e0:	4a26      	ldr	r2, [pc, #152]	; (800ba7c <MX_TIM3_Init+0xbc>)
 800b9e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800b9e4:	4b24      	ldr	r3, [pc, #144]	; (800ba78 <MX_TIM3_Init+0xb8>)
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b9ea:	4b23      	ldr	r3, [pc, #140]	; (800ba78 <MX_TIM3_Init+0xb8>)
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800b9f0:	4b21      	ldr	r3, [pc, #132]	; (800ba78 <MX_TIM3_Init+0xb8>)
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b9f6:	4b20      	ldr	r3, [pc, #128]	; (800ba78 <MX_TIM3_Init+0xb8>)
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b9fc:	4b1e      	ldr	r3, [pc, #120]	; (800ba78 <MX_TIM3_Init+0xb8>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800ba02:	481d      	ldr	r0, [pc, #116]	; (800ba78 <MX_TIM3_Init+0xb8>)
 800ba04:	f7fb f8bf 	bl	8006b86 <HAL_TIM_IC_Init>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d001      	beq.n	800ba12 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800ba0e:	f7ff fe7f 	bl	800b710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ba12:	2300      	movs	r3, #0
 800ba14:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ba16:	2300      	movs	r3, #0
 800ba18:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ba1a:	f107 0314 	add.w	r3, r7, #20
 800ba1e:	4619      	mov	r1, r3
 800ba20:	4815      	ldr	r0, [pc, #84]	; (800ba78 <MX_TIM3_Init+0xb8>)
 800ba22:	f7fb fc3f 	bl	80072a4 <HAL_TIMEx_MasterConfigSynchronization>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d001      	beq.n	800ba30 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800ba2c:	f7ff fe70 	bl	800b710 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800ba30:	2300      	movs	r3, #0
 800ba32:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ba34:	2301      	movs	r3, #1
 800ba36:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ba40:	1d3b      	adds	r3, r7, #4
 800ba42:	2200      	movs	r2, #0
 800ba44:	4619      	mov	r1, r3
 800ba46:	480c      	ldr	r0, [pc, #48]	; (800ba78 <MX_TIM3_Init+0xb8>)
 800ba48:	f7fb f9e7 	bl	8006e1a <HAL_TIM_IC_ConfigChannel>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d001      	beq.n	800ba56 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800ba52:	f7ff fe5d 	bl	800b710 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800ba56:	2302      	movs	r3, #2
 800ba58:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800ba5a:	1d3b      	adds	r3, r7, #4
 800ba5c:	2204      	movs	r2, #4
 800ba5e:	4619      	mov	r1, r3
 800ba60:	4805      	ldr	r0, [pc, #20]	; (800ba78 <MX_TIM3_Init+0xb8>)
 800ba62:	f7fb f9da 	bl	8006e1a <HAL_TIM_IC_ConfigChannel>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d001      	beq.n	800ba70 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800ba6c:	f7ff fe50 	bl	800b710 <Error_Handler>
  }

}
 800ba70:	bf00      	nop
 800ba72:	3720      	adds	r7, #32
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	2000a4d8 	.word	0x2000a4d8
 800ba7c:	40000400 	.word	0x40000400

0800ba80 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ba86:	1d3b      	adds	r3, r7, #4
 800ba88:	2200      	movs	r2, #0
 800ba8a:	601a      	str	r2, [r3, #0]
 800ba8c:	605a      	str	r2, [r3, #4]
 800ba8e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 800ba90:	4b14      	ldr	r3, [pc, #80]	; (800bae4 <MX_TIM6_Init+0x64>)
 800ba92:	4a15      	ldr	r2, [pc, #84]	; (800bae8 <MX_TIM6_Init+0x68>)
 800ba94:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80;
 800ba96:	4b13      	ldr	r3, [pc, #76]	; (800bae4 <MX_TIM6_Init+0x64>)
 800ba98:	2250      	movs	r2, #80	; 0x50
 800ba9a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ba9c:	4b11      	ldr	r3, [pc, #68]	; (800bae4 <MX_TIM6_Init+0x64>)
 800ba9e:	2200      	movs	r2, #0
 800baa0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 92;
 800baa2:	4b10      	ldr	r3, [pc, #64]	; (800bae4 <MX_TIM6_Init+0x64>)
 800baa4:	225c      	movs	r2, #92	; 0x5c
 800baa6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800baa8:	4b0e      	ldr	r3, [pc, #56]	; (800bae4 <MX_TIM6_Init+0x64>)
 800baaa:	2200      	movs	r2, #0
 800baac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800baae:	480d      	ldr	r0, [pc, #52]	; (800bae4 <MX_TIM6_Init+0x64>)
 800bab0:	f7fb f83e 	bl	8006b30 <HAL_TIM_Base_Init>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800baba:	f7ff fe29 	bl	800b710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800babe:	2300      	movs	r3, #0
 800bac0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bac2:	2300      	movs	r3, #0
 800bac4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800bac6:	1d3b      	adds	r3, r7, #4
 800bac8:	4619      	mov	r1, r3
 800baca:	4806      	ldr	r0, [pc, #24]	; (800bae4 <MX_TIM6_Init+0x64>)
 800bacc:	f7fb fbea 	bl	80072a4 <HAL_TIMEx_MasterConfigSynchronization>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d001      	beq.n	800bada <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800bad6:	f7ff fe1b 	bl	800b710 <Error_Handler>
  }

}
 800bada:	bf00      	nop
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	2000a518 	.word	0x2000a518
 800bae8:	40001000 	.word	0x40001000

0800baec <MX_TIM16_Init>:
  HAL_TIM_MspPostInit(&htim15);

}
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800baf0:	4b0f      	ldr	r3, [pc, #60]	; (800bb30 <MX_TIM16_Init+0x44>)
 800baf2:	4a10      	ldr	r2, [pc, #64]	; (800bb34 <MX_TIM16_Init+0x48>)
 800baf4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800baf6:	4b0e      	ldr	r3, [pc, #56]	; (800bb30 <MX_TIM16_Init+0x44>)
 800baf8:	2200      	movs	r2, #0
 800bafa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bafc:	4b0c      	ldr	r3, [pc, #48]	; (800bb30 <MX_TIM16_Init+0x44>)
 800bafe:	2200      	movs	r2, #0
 800bb00:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 800bb02:	4b0b      	ldr	r3, [pc, #44]	; (800bb30 <MX_TIM16_Init+0x44>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bb08:	4b09      	ldr	r3, [pc, #36]	; (800bb30 <MX_TIM16_Init+0x44>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800bb0e:	4b08      	ldr	r3, [pc, #32]	; (800bb30 <MX_TIM16_Init+0x44>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bb14:	4b06      	ldr	r3, [pc, #24]	; (800bb30 <MX_TIM16_Init+0x44>)
 800bb16:	2200      	movs	r2, #0
 800bb18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800bb1a:	4805      	ldr	r0, [pc, #20]	; (800bb30 <MX_TIM16_Init+0x44>)
 800bb1c:	f7fb f808 	bl	8006b30 <HAL_TIM_Base_Init>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d001      	beq.n	800bb2a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800bb26:	f7ff fdf3 	bl	800b710 <Error_Handler>
  }

}
 800bb2a:	bf00      	nop
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	2000a5d8 	.word	0x2000a5d8
 800bb34:	40014400 	.word	0x40014400

0800bb38 <HAL_TIM_IC_MspInit>:
  /* USER CODE END TIM1_MspInit 1 */
  }
}

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b08c      	sub	sp, #48	; 0x30
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb40:	f107 031c 	add.w	r3, r7, #28
 800bb44:	2200      	movs	r2, #0
 800bb46:	601a      	str	r2, [r3, #0]
 800bb48:	605a      	str	r2, [r3, #4]
 800bb4a:	609a      	str	r2, [r3, #8]
 800bb4c:	60da      	str	r2, [r3, #12]
 800bb4e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb58:	d131      	bne.n	800bbbe <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800bb5a:	4a35      	ldr	r2, [pc, #212]	; (800bc30 <HAL_TIM_IC_MspInit+0xf8>)
 800bb5c:	4b34      	ldr	r3, [pc, #208]	; (800bc30 <HAL_TIM_IC_MspInit+0xf8>)
 800bb5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb60:	f043 0301 	orr.w	r3, r3, #1
 800bb64:	6593      	str	r3, [r2, #88]	; 0x58
 800bb66:	4b32      	ldr	r3, [pc, #200]	; (800bc30 <HAL_TIM_IC_MspInit+0xf8>)
 800bb68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb6a:	f003 0301 	and.w	r3, r3, #1
 800bb6e:	61bb      	str	r3, [r7, #24]
 800bb70:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb72:	4a2f      	ldr	r2, [pc, #188]	; (800bc30 <HAL_TIM_IC_MspInit+0xf8>)
 800bb74:	4b2e      	ldr	r3, [pc, #184]	; (800bc30 <HAL_TIM_IC_MspInit+0xf8>)
 800bb76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb78:	f043 0301 	orr.w	r3, r3, #1
 800bb7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bb7e:	4b2c      	ldr	r3, [pc, #176]	; (800bc30 <HAL_TIM_IC_MspInit+0xf8>)
 800bb80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb82:	f003 0301 	and.w	r3, r3, #1
 800bb86:	617b      	str	r3, [r7, #20]
 800bb88:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800bb8a:	2303      	movs	r3, #3
 800bb8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb8e:	2302      	movs	r3, #2
 800bb90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb92:	2300      	movs	r3, #0
 800bb94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb96:	2300      	movs	r3, #0
 800bb98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb9e:	f107 031c 	add.w	r3, r7, #28
 800bba2:	4619      	mov	r1, r3
 800bba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bba8:	f7f7 fd4a 	bl	8003640 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800bbac:	2200      	movs	r2, #0
 800bbae:	2100      	movs	r1, #0
 800bbb0:	201c      	movs	r0, #28
 800bbb2:	f7f7 fd0e 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800bbb6:	201c      	movs	r0, #28
 800bbb8:	f7f7 fd27 	bl	800360a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800bbbc:	e034      	b.n	800bc28 <HAL_TIM_IC_MspInit+0xf0>
  else if(tim_icHandle->Instance==TIM3)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a1c      	ldr	r2, [pc, #112]	; (800bc34 <HAL_TIM_IC_MspInit+0xfc>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d12f      	bne.n	800bc28 <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800bbc8:	4a19      	ldr	r2, [pc, #100]	; (800bc30 <HAL_TIM_IC_MspInit+0xf8>)
 800bbca:	4b19      	ldr	r3, [pc, #100]	; (800bc30 <HAL_TIM_IC_MspInit+0xf8>)
 800bbcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbce:	f043 0302 	orr.w	r3, r3, #2
 800bbd2:	6593      	str	r3, [r2, #88]	; 0x58
 800bbd4:	4b16      	ldr	r3, [pc, #88]	; (800bc30 <HAL_TIM_IC_MspInit+0xf8>)
 800bbd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbd8:	f003 0302 	and.w	r3, r3, #2
 800bbdc:	613b      	str	r3, [r7, #16]
 800bbde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bbe0:	4a13      	ldr	r2, [pc, #76]	; (800bc30 <HAL_TIM_IC_MspInit+0xf8>)
 800bbe2:	4b13      	ldr	r3, [pc, #76]	; (800bc30 <HAL_TIM_IC_MspInit+0xf8>)
 800bbe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbe6:	f043 0302 	orr.w	r3, r3, #2
 800bbea:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bbec:	4b10      	ldr	r3, [pc, #64]	; (800bc30 <HAL_TIM_IC_MspInit+0xf8>)
 800bbee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbf0:	f003 0302 	and.w	r3, r3, #2
 800bbf4:	60fb      	str	r3, [r7, #12]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800bbf8:	2330      	movs	r3, #48	; 0x30
 800bbfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc00:	2300      	movs	r3, #0
 800bc02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc04:	2300      	movs	r3, #0
 800bc06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800bc08:	2302      	movs	r3, #2
 800bc0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bc0c:	f107 031c 	add.w	r3, r7, #28
 800bc10:	4619      	mov	r1, r3
 800bc12:	4809      	ldr	r0, [pc, #36]	; (800bc38 <HAL_TIM_IC_MspInit+0x100>)
 800bc14:	f7f7 fd14 	bl	8003640 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800bc18:	2200      	movs	r2, #0
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	201d      	movs	r0, #29
 800bc1e:	f7f7 fcd8 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800bc22:	201d      	movs	r0, #29
 800bc24:	f7f7 fcf1 	bl	800360a <HAL_NVIC_EnableIRQ>
}
 800bc28:	bf00      	nop
 800bc2a:	3730      	adds	r7, #48	; 0x30
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	40021000 	.word	0x40021000
 800bc34:	40000400 	.word	0x40000400
 800bc38:	48000400 	.word	0x48000400

0800bc3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b086      	sub	sp, #24
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4a27      	ldr	r2, [pc, #156]	; (800bce8 <HAL_TIM_Base_MspInit+0xac>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d114      	bne.n	800bc78 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800bc4e:	4a27      	ldr	r2, [pc, #156]	; (800bcec <HAL_TIM_Base_MspInit+0xb0>)
 800bc50:	4b26      	ldr	r3, [pc, #152]	; (800bcec <HAL_TIM_Base_MspInit+0xb0>)
 800bc52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc54:	f043 0310 	orr.w	r3, r3, #16
 800bc58:	6593      	str	r3, [r2, #88]	; 0x58
 800bc5a:	4b24      	ldr	r3, [pc, #144]	; (800bcec <HAL_TIM_Base_MspInit+0xb0>)
 800bc5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc5e:	f003 0310 	and.w	r3, r3, #16
 800bc62:	617b      	str	r3, [r7, #20]
 800bc64:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800bc66:	2200      	movs	r2, #0
 800bc68:	2100      	movs	r1, #0
 800bc6a:	2036      	movs	r0, #54	; 0x36
 800bc6c:	f7f7 fcb1 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800bc70:	2036      	movs	r0, #54	; 0x36
 800bc72:	f7f7 fcca 	bl	800360a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800bc76:	e032      	b.n	800bcde <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM15)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4a1c      	ldr	r2, [pc, #112]	; (800bcf0 <HAL_TIM_Base_MspInit+0xb4>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d114      	bne.n	800bcac <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800bc82:	4a1a      	ldr	r2, [pc, #104]	; (800bcec <HAL_TIM_Base_MspInit+0xb0>)
 800bc84:	4b19      	ldr	r3, [pc, #100]	; (800bcec <HAL_TIM_Base_MspInit+0xb0>)
 800bc86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc8c:	6613      	str	r3, [r2, #96]	; 0x60
 800bc8e:	4b17      	ldr	r3, [pc, #92]	; (800bcec <HAL_TIM_Base_MspInit+0xb0>)
 800bc90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc96:	613b      	str	r3, [r7, #16]
 800bc98:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	2100      	movs	r1, #0
 800bc9e:	2018      	movs	r0, #24
 800bca0:	f7f7 fc97 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800bca4:	2018      	movs	r0, #24
 800bca6:	f7f7 fcb0 	bl	800360a <HAL_NVIC_EnableIRQ>
}
 800bcaa:	e018      	b.n	800bcde <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM16)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a10      	ldr	r2, [pc, #64]	; (800bcf4 <HAL_TIM_Base_MspInit+0xb8>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d113      	bne.n	800bcde <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800bcb6:	4a0d      	ldr	r2, [pc, #52]	; (800bcec <HAL_TIM_Base_MspInit+0xb0>)
 800bcb8:	4b0c      	ldr	r3, [pc, #48]	; (800bcec <HAL_TIM_Base_MspInit+0xb0>)
 800bcba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcc0:	6613      	str	r3, [r2, #96]	; 0x60
 800bcc2:	4b0a      	ldr	r3, [pc, #40]	; (800bcec <HAL_TIM_Base_MspInit+0xb0>)
 800bcc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcca:	60fb      	str	r3, [r7, #12]
 800bccc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800bcce:	2200      	movs	r2, #0
 800bcd0:	2100      	movs	r1, #0
 800bcd2:	2019      	movs	r0, #25
 800bcd4:	f7f7 fc7d 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800bcd8:	2019      	movs	r0, #25
 800bcda:	f7f7 fc96 	bl	800360a <HAL_NVIC_EnableIRQ>
}
 800bcde:	bf00      	nop
 800bce0:	3718      	adds	r7, #24
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	40001000 	.word	0x40001000
 800bcec:	40021000 	.word	0x40021000
 800bcf0:	40014000 	.word	0x40014000
 800bcf4:	40014400 	.word	0x40014400

0800bcf8 <tim_setNewTimeAndStart>:
  /* USER CODE END TIM16_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void tim_setNewTimeAndStart(TIM_TypeDef *tim, uint32_t time){
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
	tim->CR1 &= ~TIM_CR1_CEN;	//Stop counter
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f023 0201 	bic.w	r2, r3, #1
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	601a      	str	r2, [r3, #0]
	tim->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f043 0202 	orr.w	r2, r3, #2
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	601a      	str	r2, [r3, #0]
	tim->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	f023 0201 	bic.w	r2, r3, #1
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	611a      	str	r2, [r3, #16]
	tim->ARR = time;				//Load new time
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	683a      	ldr	r2, [r7, #0]
 800bd2a:	62da      	str	r2, [r3, #44]	; 0x2c
	tim->EGR |= TIM_EGR_UG;		//Force reload of shadow register -> Start from beginning
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	695b      	ldr	r3, [r3, #20]
 800bd30:	f043 0201 	orr.w	r2, r3, #1
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	615a      	str	r2, [r3, #20]
	tim->CR1 &= ~TIM_CR1_UDIS;	//Allow new updates to be triggered
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f023 0202 	bic.w	r2, r3, #2
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	601a      	str	r2, [r3, #0]
	tim->DIER |= TIM_DIER_UIE;	//Enable update interrupts
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	f043 0201 	orr.w	r2, r3, #1
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	60da      	str	r2, [r3, #12]
	tim->CR1 |= TIM_CR1_CEN;		//Enable counter
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f043 0201 	orr.w	r2, r3, #1
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	601a      	str	r2, [r3, #0]
}
 800bd5c:	bf00      	nop
 800bd5e:	370c      	adds	r7, #12
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <tim_stop>:
void tim_stop(TIM_TypeDef *tim){
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
	tim->CR1 &= ~TIM_CR1_CEN;	//Stop counter
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f023 0201 	bic.w	r2, r3, #1
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	601a      	str	r2, [r3, #0]
	tim->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f043 0202 	orr.w	r2, r3, #2
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	601a      	str	r2, [r3, #0]
	tim->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	f023 0201 	bic.w	r2, r3, #1
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	611a      	str	r2, [r3, #16]
}
 800bd94:	bf00      	nop
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800bda4:	4b14      	ldr	r3, [pc, #80]	; (800bdf8 <MX_UART4_Init+0x58>)
 800bda6:	4a15      	ldr	r2, [pc, #84]	; (800bdfc <MX_UART4_Init+0x5c>)
 800bda8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800bdaa:	4b13      	ldr	r3, [pc, #76]	; (800bdf8 <MX_UART4_Init+0x58>)
 800bdac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800bdb0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800bdb2:	4b11      	ldr	r3, [pc, #68]	; (800bdf8 <MX_UART4_Init+0x58>)
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800bdb8:	4b0f      	ldr	r3, [pc, #60]	; (800bdf8 <MX_UART4_Init+0x58>)
 800bdba:	2200      	movs	r2, #0
 800bdbc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800bdbe:	4b0e      	ldr	r3, [pc, #56]	; (800bdf8 <MX_UART4_Init+0x58>)
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800bdc4:	4b0c      	ldr	r3, [pc, #48]	; (800bdf8 <MX_UART4_Init+0x58>)
 800bdc6:	220c      	movs	r2, #12
 800bdc8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bdca:	4b0b      	ldr	r3, [pc, #44]	; (800bdf8 <MX_UART4_Init+0x58>)
 800bdcc:	2200      	movs	r2, #0
 800bdce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800bdd0:	4b09      	ldr	r3, [pc, #36]	; (800bdf8 <MX_UART4_Init+0x58>)
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800bdd6:	4b08      	ldr	r3, [pc, #32]	; (800bdf8 <MX_UART4_Init+0x58>)
 800bdd8:	2200      	movs	r2, #0
 800bdda:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800bddc:	4b06      	ldr	r3, [pc, #24]	; (800bdf8 <MX_UART4_Init+0x58>)
 800bdde:	2200      	movs	r2, #0
 800bde0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800bde2:	4805      	ldr	r0, [pc, #20]	; (800bdf8 <MX_UART4_Init+0x58>)
 800bde4:	f7fb fad2 	bl	800738c <HAL_UART_Init>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d001      	beq.n	800bdf2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800bdee:	f7ff fc8f 	bl	800b710 <Error_Handler>
  }

}
 800bdf2:	bf00      	nop
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	2000a690 	.word	0x2000a690
 800bdfc:	40004c00 	.word	0x40004c00

0800be00 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800be04:	4b14      	ldr	r3, [pc, #80]	; (800be58 <MX_USART1_UART_Init+0x58>)
 800be06:	4a15      	ldr	r2, [pc, #84]	; (800be5c <MX_USART1_UART_Init+0x5c>)
 800be08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 800be0a:	4b13      	ldr	r3, [pc, #76]	; (800be58 <MX_USART1_UART_Init+0x58>)
 800be0c:	4a14      	ldr	r2, [pc, #80]	; (800be60 <MX_USART1_UART_Init+0x60>)
 800be0e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800be10:	4b11      	ldr	r3, [pc, #68]	; (800be58 <MX_USART1_UART_Init+0x58>)
 800be12:	2200      	movs	r2, #0
 800be14:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 800be16:	4b10      	ldr	r3, [pc, #64]	; (800be58 <MX_USART1_UART_Init+0x58>)
 800be18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800be1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800be1e:	4b0e      	ldr	r3, [pc, #56]	; (800be58 <MX_USART1_UART_Init+0x58>)
 800be20:	2200      	movs	r2, #0
 800be22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800be24:	4b0c      	ldr	r3, [pc, #48]	; (800be58 <MX_USART1_UART_Init+0x58>)
 800be26:	220c      	movs	r2, #12
 800be28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800be2a:	4b0b      	ldr	r3, [pc, #44]	; (800be58 <MX_USART1_UART_Init+0x58>)
 800be2c:	2200      	movs	r2, #0
 800be2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800be30:	4b09      	ldr	r3, [pc, #36]	; (800be58 <MX_USART1_UART_Init+0x58>)
 800be32:	2200      	movs	r2, #0
 800be34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800be36:	4b08      	ldr	r3, [pc, #32]	; (800be58 <MX_USART1_UART_Init+0x58>)
 800be38:	2200      	movs	r2, #0
 800be3a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800be3c:	4b06      	ldr	r3, [pc, #24]	; (800be58 <MX_USART1_UART_Init+0x58>)
 800be3e:	2200      	movs	r2, #0
 800be40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800be42:	4805      	ldr	r0, [pc, #20]	; (800be58 <MX_USART1_UART_Init+0x58>)
 800be44:	f7fb faa2 	bl	800738c <HAL_UART_Init>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800be4e:	f7ff fc5f 	bl	800b710 <Error_Handler>
  }

}
 800be52:	bf00      	nop
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	2000a618 	.word	0x2000a618
 800be5c:	40013800 	.word	0x40013800
 800be60:	0003d090 	.word	0x0003d090

0800be64 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800be68:	4b14      	ldr	r3, [pc, #80]	; (800bebc <MX_USART2_UART_Init+0x58>)
 800be6a:	4a15      	ldr	r2, [pc, #84]	; (800bec0 <MX_USART2_UART_Init+0x5c>)
 800be6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 800be6e:	4b13      	ldr	r3, [pc, #76]	; (800bebc <MX_USART2_UART_Init+0x58>)
 800be70:	4a14      	ldr	r2, [pc, #80]	; (800bec4 <MX_USART2_UART_Init+0x60>)
 800be72:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800be74:	4b11      	ldr	r3, [pc, #68]	; (800bebc <MX_USART2_UART_Init+0x58>)
 800be76:	2200      	movs	r2, #0
 800be78:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800be7a:	4b10      	ldr	r3, [pc, #64]	; (800bebc <MX_USART2_UART_Init+0x58>)
 800be7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800be80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800be82:	4b0e      	ldr	r3, [pc, #56]	; (800bebc <MX_USART2_UART_Init+0x58>)
 800be84:	2200      	movs	r2, #0
 800be86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800be88:	4b0c      	ldr	r3, [pc, #48]	; (800bebc <MX_USART2_UART_Init+0x58>)
 800be8a:	220c      	movs	r2, #12
 800be8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800be8e:	4b0b      	ldr	r3, [pc, #44]	; (800bebc <MX_USART2_UART_Init+0x58>)
 800be90:	2200      	movs	r2, #0
 800be92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800be94:	4b09      	ldr	r3, [pc, #36]	; (800bebc <MX_USART2_UART_Init+0x58>)
 800be96:	2200      	movs	r2, #0
 800be98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800be9a:	4b08      	ldr	r3, [pc, #32]	; (800bebc <MX_USART2_UART_Init+0x58>)
 800be9c:	2200      	movs	r2, #0
 800be9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800bea0:	4b06      	ldr	r3, [pc, #24]	; (800bebc <MX_USART2_UART_Init+0x58>)
 800bea2:	2200      	movs	r2, #0
 800bea4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800bea6:	4805      	ldr	r0, [pc, #20]	; (800bebc <MX_USART2_UART_Init+0x58>)
 800bea8:	f7fb fa70 	bl	800738c <HAL_UART_Init>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d001      	beq.n	800beb6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800beb2:	f7ff fc2d 	bl	800b710 <Error_Handler>
  }

}
 800beb6:	bf00      	nop
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	2000a708 	.word	0x2000a708
 800bec0:	40004400 	.word	0x40004400
 800bec4:	0003d090 	.word	0x0003d090

0800bec8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b08e      	sub	sp, #56	; 0x38
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bed4:	2200      	movs	r2, #0
 800bed6:	601a      	str	r2, [r3, #0]
 800bed8:	605a      	str	r2, [r3, #4]
 800beda:	609a      	str	r2, [r3, #8]
 800bedc:	60da      	str	r2, [r3, #12]
 800bede:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a52      	ldr	r2, [pc, #328]	; (800c030 <HAL_UART_MspInit+0x168>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d131      	bne.n	800bf4e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800beea:	4a52      	ldr	r2, [pc, #328]	; (800c034 <HAL_UART_MspInit+0x16c>)
 800beec:	4b51      	ldr	r3, [pc, #324]	; (800c034 <HAL_UART_MspInit+0x16c>)
 800beee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bef0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bef4:	6593      	str	r3, [r2, #88]	; 0x58
 800bef6:	4b4f      	ldr	r3, [pc, #316]	; (800c034 <HAL_UART_MspInit+0x16c>)
 800bef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800befa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800befe:	623b      	str	r3, [r7, #32]
 800bf00:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bf02:	4a4c      	ldr	r2, [pc, #304]	; (800c034 <HAL_UART_MspInit+0x16c>)
 800bf04:	4b4b      	ldr	r3, [pc, #300]	; (800c034 <HAL_UART_MspInit+0x16c>)
 800bf06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf08:	f043 0304 	orr.w	r3, r3, #4
 800bf0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bf0e:	4b49      	ldr	r3, [pc, #292]	; (800c034 <HAL_UART_MspInit+0x16c>)
 800bf10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf12:	f003 0304 	and.w	r3, r3, #4
 800bf16:	61fb      	str	r3, [r7, #28]
 800bf18:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800bf1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800bf1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf20:	2302      	movs	r3, #2
 800bf22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf24:	2300      	movs	r3, #0
 800bf26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf28:	2303      	movs	r3, #3
 800bf2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800bf2c:	2308      	movs	r3, #8
 800bf2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bf30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf34:	4619      	mov	r1, r3
 800bf36:	4840      	ldr	r0, [pc, #256]	; (800c038 <HAL_UART_MspInit+0x170>)
 800bf38:	f7f7 fb82 	bl	8003640 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	2100      	movs	r1, #0
 800bf40:	2034      	movs	r0, #52	; 0x34
 800bf42:	f7f7 fb46 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800bf46:	2034      	movs	r0, #52	; 0x34
 800bf48:	f7f7 fb5f 	bl	800360a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800bf4c:	e06b      	b.n	800c026 <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART1)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4a3a      	ldr	r2, [pc, #232]	; (800c03c <HAL_UART_MspInit+0x174>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d130      	bne.n	800bfba <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 800bf58:	4a36      	ldr	r2, [pc, #216]	; (800c034 <HAL_UART_MspInit+0x16c>)
 800bf5a:	4b36      	ldr	r3, [pc, #216]	; (800c034 <HAL_UART_MspInit+0x16c>)
 800bf5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf62:	6613      	str	r3, [r2, #96]	; 0x60
 800bf64:	4b33      	ldr	r3, [pc, #204]	; (800c034 <HAL_UART_MspInit+0x16c>)
 800bf66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf6c:	61bb      	str	r3, [r7, #24]
 800bf6e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf70:	4a30      	ldr	r2, [pc, #192]	; (800c034 <HAL_UART_MspInit+0x16c>)
 800bf72:	4b30      	ldr	r3, [pc, #192]	; (800c034 <HAL_UART_MspInit+0x16c>)
 800bf74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf76:	f043 0302 	orr.w	r3, r3, #2
 800bf7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bf7c:	4b2d      	ldr	r3, [pc, #180]	; (800c034 <HAL_UART_MspInit+0x16c>)
 800bf7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf80:	f003 0302 	and.w	r3, r3, #2
 800bf84:	617b      	str	r3, [r7, #20]
 800bf86:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800bf88:	23c0      	movs	r3, #192	; 0xc0
 800bf8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf8c:	2302      	movs	r3, #2
 800bf8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf90:	2300      	movs	r3, #0
 800bf92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf94:	2303      	movs	r3, #3
 800bf96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800bf98:	2307      	movs	r3, #7
 800bf9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	4827      	ldr	r0, [pc, #156]	; (800c040 <HAL_UART_MspInit+0x178>)
 800bfa4:	f7f7 fb4c 	bl	8003640 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	2100      	movs	r1, #0
 800bfac:	2025      	movs	r0, #37	; 0x25
 800bfae:	f7f7 fb10 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800bfb2:	2025      	movs	r0, #37	; 0x25
 800bfb4:	f7f7 fb29 	bl	800360a <HAL_NVIC_EnableIRQ>
}
 800bfb8:	e035      	b.n	800c026 <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART2)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a21      	ldr	r2, [pc, #132]	; (800c044 <HAL_UART_MspInit+0x17c>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d130      	bne.n	800c026 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800bfc4:	4a1b      	ldr	r2, [pc, #108]	; (800c034 <HAL_UART_MspInit+0x16c>)
 800bfc6:	4b1b      	ldr	r3, [pc, #108]	; (800c034 <HAL_UART_MspInit+0x16c>)
 800bfc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfce:	6593      	str	r3, [r2, #88]	; 0x58
 800bfd0:	4b18      	ldr	r3, [pc, #96]	; (800c034 <HAL_UART_MspInit+0x16c>)
 800bfd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfd8:	613b      	str	r3, [r7, #16]
 800bfda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bfdc:	4a15      	ldr	r2, [pc, #84]	; (800c034 <HAL_UART_MspInit+0x16c>)
 800bfde:	4b15      	ldr	r3, [pc, #84]	; (800c034 <HAL_UART_MspInit+0x16c>)
 800bfe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfe2:	f043 0301 	orr.w	r3, r3, #1
 800bfe6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bfe8:	4b12      	ldr	r3, [pc, #72]	; (800c034 <HAL_UART_MspInit+0x16c>)
 800bfea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfec:	f003 0301 	and.w	r3, r3, #1
 800bff0:	60fb      	str	r3, [r7, #12]
 800bff2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800bff4:	230c      	movs	r3, #12
 800bff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bff8:	2302      	movs	r3, #2
 800bffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bffc:	2300      	movs	r3, #0
 800bffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c000:	2303      	movs	r3, #3
 800c002:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c004:	2307      	movs	r3, #7
 800c006:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c00c:	4619      	mov	r1, r3
 800c00e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c012:	f7f7 fb15 	bl	8003640 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800c016:	2200      	movs	r2, #0
 800c018:	2100      	movs	r1, #0
 800c01a:	2026      	movs	r0, #38	; 0x26
 800c01c:	f7f7 fad9 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800c020:	2026      	movs	r0, #38	; 0x26
 800c022:	f7f7 faf2 	bl	800360a <HAL_NVIC_EnableIRQ>
}
 800c026:	bf00      	nop
 800c028:	3738      	adds	r7, #56	; 0x38
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	40004c00 	.word	0x40004c00
 800c034:	40021000 	.word	0x40021000
 800c038:	48000800 	.word	0x48000800
 800c03c:	40013800 	.word	0x40013800
 800c040:	48000400 	.word	0x48000400
 800c044:	40004400 	.word	0x40004400

0800c048 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800c04c:	2200      	movs	r2, #0
 800c04e:	490b      	ldr	r1, [pc, #44]	; (800c07c <MX_USB_DEVICE_Init+0x34>)
 800c050:	480b      	ldr	r0, [pc, #44]	; (800c080 <MX_USB_DEVICE_Init+0x38>)
 800c052:	f7fe f825 	bl	800a0a0 <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 800c056:	490b      	ldr	r1, [pc, #44]	; (800c084 <MX_USB_DEVICE_Init+0x3c>)
 800c058:	4809      	ldr	r0, [pc, #36]	; (800c080 <MX_USB_DEVICE_Init+0x38>)
 800c05a:	f7fe f84c 	bl	800a0f6 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800c05e:	490a      	ldr	r1, [pc, #40]	; (800c088 <MX_USB_DEVICE_Init+0x40>)
 800c060:	4807      	ldr	r0, [pc, #28]	; (800c080 <MX_USB_DEVICE_Init+0x38>)
 800c062:	f7fd ff7f 	bl	8009f64 <USBD_CDC_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 800c066:	4806      	ldr	r0, [pc, #24]	; (800c080 <MX_USB_DEVICE_Init+0x38>)
 800c068:	f000 fc70 	bl	800c94c <USBD_LL_BatteryCharging>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d002      	beq.n	800c078 <MX_USB_DEVICE_Init+0x30>
  USBD_Start(&hUsbDeviceFS);
 800c072:	4803      	ldr	r0, [pc, #12]	; (800c080 <MX_USB_DEVICE_Init+0x38>)
 800c074:	f7fe f859 	bl	800a12a <USBD_Start>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c078:	bf00      	nop
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	200012b0 	.word	0x200012b0
 800c080:	2000a780 	.word	0x2000a780
 800c084:	20001198 	.word	0x20001198
 800c088:	200012a0 	.word	0x200012a0

0800c08c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c090:	2200      	movs	r2, #0
 800c092:	4905      	ldr	r1, [pc, #20]	; (800c0a8 <CDC_Init_FS+0x1c>)
 800c094:	4805      	ldr	r0, [pc, #20]	; (800c0ac <CDC_Init_FS+0x20>)
 800c096:	f7fd ff7c 	bl	8009f92 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c09a:	4905      	ldr	r1, [pc, #20]	; (800c0b0 <CDC_Init_FS+0x24>)
 800c09c:	4803      	ldr	r0, [pc, #12]	; (800c0ac <CDC_Init_FS+0x20>)
 800c09e:	f7fd ff92 	bl	8009fc6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c0a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	2000b21c 	.word	0x2000b21c
 800c0ac:	2000a780 	.word	0x2000a780
 800c0b0:	2000aa1c 	.word	0x2000aa1c

0800c0b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c0b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	6039      	str	r1, [r7, #0]
 800c0ce:	71fb      	strb	r3, [r7, #7]
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c0d4:	79fb      	ldrb	r3, [r7, #7]
 800c0d6:	2b23      	cmp	r3, #35	; 0x23
 800c0d8:	d84a      	bhi.n	800c170 <CDC_Control_FS+0xac>
 800c0da:	a201      	add	r2, pc, #4	; (adr r2, 800c0e0 <CDC_Control_FS+0x1c>)
 800c0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e0:	0800c171 	.word	0x0800c171
 800c0e4:	0800c171 	.word	0x0800c171
 800c0e8:	0800c171 	.word	0x0800c171
 800c0ec:	0800c171 	.word	0x0800c171
 800c0f0:	0800c171 	.word	0x0800c171
 800c0f4:	0800c171 	.word	0x0800c171
 800c0f8:	0800c171 	.word	0x0800c171
 800c0fc:	0800c171 	.word	0x0800c171
 800c100:	0800c171 	.word	0x0800c171
 800c104:	0800c171 	.word	0x0800c171
 800c108:	0800c171 	.word	0x0800c171
 800c10c:	0800c171 	.word	0x0800c171
 800c110:	0800c171 	.word	0x0800c171
 800c114:	0800c171 	.word	0x0800c171
 800c118:	0800c171 	.word	0x0800c171
 800c11c:	0800c171 	.word	0x0800c171
 800c120:	0800c171 	.word	0x0800c171
 800c124:	0800c171 	.word	0x0800c171
 800c128:	0800c171 	.word	0x0800c171
 800c12c:	0800c171 	.word	0x0800c171
 800c130:	0800c171 	.word	0x0800c171
 800c134:	0800c171 	.word	0x0800c171
 800c138:	0800c171 	.word	0x0800c171
 800c13c:	0800c171 	.word	0x0800c171
 800c140:	0800c171 	.word	0x0800c171
 800c144:	0800c171 	.word	0x0800c171
 800c148:	0800c171 	.word	0x0800c171
 800c14c:	0800c171 	.word	0x0800c171
 800c150:	0800c171 	.word	0x0800c171
 800c154:	0800c171 	.word	0x0800c171
 800c158:	0800c171 	.word	0x0800c171
 800c15c:	0800c171 	.word	0x0800c171
 800c160:	0800c171 	.word	0x0800c171
 800c164:	0800c171 	.word	0x0800c171
 800c168:	0800c171 	.word	0x0800c171
 800c16c:	0800c171 	.word	0x0800c171
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c170:	bf00      	nop
  }

  return (USBD_OK);
 800c172:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c174:	4618      	mov	r0, r3
 800c176:	370c      	adds	r7, #12
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(myUSBRxCallback) myUSBRxCallback((char *)Buf, *Len);
 800c18a:	4b0c      	ldr	r3, [pc, #48]	; (800c1bc <CDC_Receive_FS+0x3c>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d007      	beq.n	800c1a2 <CDC_Receive_FS+0x22>
 800c192:	4b0a      	ldr	r3, [pc, #40]	; (800c1bc <CDC_Receive_FS+0x3c>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	683a      	ldr	r2, [r7, #0]
 800c198:	6812      	ldr	r2, [r2, #0]
 800c19a:	b292      	uxth	r2, r2
 800c19c:	4611      	mov	r1, r2
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	4798      	blx	r3
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c1a2:	6879      	ldr	r1, [r7, #4]
 800c1a4:	4806      	ldr	r0, [pc, #24]	; (800c1c0 <CDC_Receive_FS+0x40>)
 800c1a6:	f7fd ff0e 	bl	8009fc6 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c1aa:	4805      	ldr	r0, [pc, #20]	; (800c1c0 <CDC_Receive_FS+0x40>)
 800c1ac:	f7fd ff4e 	bl	800a04c <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800c1b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	2000a1a8 	.word	0x2000a1a8
 800c1c0:	2000a780 	.word	0x2000a780

0800c1c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c1d4:	4b0d      	ldr	r3, [pc, #52]	; (800c20c <CDC_Transmit_FS+0x48>)
 800c1d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c1da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d001      	beq.n	800c1ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e00b      	b.n	800c202 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c1ea:	887b      	ldrh	r3, [r7, #2]
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	6879      	ldr	r1, [r7, #4]
 800c1f0:	4806      	ldr	r0, [pc, #24]	; (800c20c <CDC_Transmit_FS+0x48>)
 800c1f2:	f7fd fece 	bl	8009f92 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c1f6:	4805      	ldr	r0, [pc, #20]	; (800c20c <CDC_Transmit_FS+0x48>)
 800c1f8:	f7fd fef9 	bl	8009fee <USBD_CDC_TransmitPacket>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c200:	7bfb      	ldrb	r3, [r7, #15]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	2000a780 	.word	0x2000a780

0800c210 <usb_registerRxCallback>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void usb_registerRxCallback(usb_rxCallback callback){
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
	myUSBRxCallback = callback;
 800c218:	4a04      	ldr	r2, [pc, #16]	; (800c22c <usb_registerRxCallback+0x1c>)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6013      	str	r3, [r2, #0]
}
 800c21e:	bf00      	nop
 800c220:	370c      	adds	r7, #12
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr
 800c22a:	bf00      	nop
 800c22c:	2000a1a8 	.word	0x2000a1a8

0800c230 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b088      	sub	sp, #32
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a16      	ldr	r2, [pc, #88]	; (800c298 <HAL_PCD_MspInit+0x68>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d125      	bne.n	800c28e <HAL_PCD_MspInit+0x5e>
  
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c242:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c246:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c248:	2302      	movs	r3, #2
 800c24a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c24c:	2300      	movs	r3, #0
 800c24e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c250:	2303      	movs	r3, #3
 800c252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800c254:	230a      	movs	r3, #10
 800c256:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c258:	f107 030c 	add.w	r3, r7, #12
 800c25c:	4619      	mov	r1, r3
 800c25e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c262:	f7f7 f9ed 	bl	8003640 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c266:	4a0d      	ldr	r2, [pc, #52]	; (800c29c <HAL_PCD_MspInit+0x6c>)
 800c268:	4b0c      	ldr	r3, [pc, #48]	; (800c29c <HAL_PCD_MspInit+0x6c>)
 800c26a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c26c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c270:	6593      	str	r3, [r2, #88]	; 0x58
 800c272:	4b0a      	ldr	r3, [pc, #40]	; (800c29c <HAL_PCD_MspInit+0x6c>)
 800c274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c276:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c27a:	60bb      	str	r3, [r7, #8]
 800c27c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c27e:	2200      	movs	r2, #0
 800c280:	2100      	movs	r1, #0
 800c282:	2043      	movs	r0, #67	; 0x43
 800c284:	f7f7 f9a5 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c288:	2043      	movs	r0, #67	; 0x43
 800c28a:	f7f7 f9be 	bl	800360a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c28e:	bf00      	nop
 800c290:	3720      	adds	r7, #32
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	40006800 	.word	0x40006800
 800c29c:	40021000 	.word	0x40021000

0800c2a0 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	4610      	mov	r0, r2
 800c2b8:	f7fd ff80 	bl	800a1bc <USBD_LL_SetupStage>
}
 800c2bc:	bf00      	nop
 800c2be:	3708      	adds	r7, #8
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 0470 	ldr.w	r0, [r3, #1136]	; 0x470
 800c2d6:	78fb      	ldrb	r3, [r7, #3]
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	015b      	lsls	r3, r3, #5
 800c2dc:	4413      	add	r3, r2
 800c2de:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	78fb      	ldrb	r3, [r7, #3]
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	f7fd ffb3 	bl	800a252 <USBD_LL_DataOutStage>
}
 800c2ec:	bf00      	nop
 800c2ee:	3708      	adds	r7, #8
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 0470 	ldr.w	r0, [r3, #1136]	; 0x470
 800c306:	78fb      	ldrb	r3, [r7, #3]
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	015b      	lsls	r3, r3, #5
 800c30c:	4413      	add	r3, r2
 800c30e:	333c      	adds	r3, #60	; 0x3c
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	78fb      	ldrb	r3, [r7, #3]
 800c314:	4619      	mov	r1, r3
 800c316:	f7fe f809 	bl	800a32c <USBD_LL_DataInStage>
}
 800c31a:	bf00      	nop
 800c31c:	3708      	adds	r7, #8
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800c322:	b580      	push	{r7, lr}
 800c324:	b082      	sub	sp, #8
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800c330:	4618      	mov	r0, r3
 800c332:	f7fe f917 	bl	800a564 <USBD_LL_SOF>
}
 800c336:	bf00      	nop
 800c338:	3708      	adds	r7, #8
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800c33e:	b580      	push	{r7, lr}
 800c340:	b084      	sub	sp, #16
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c346:	2301      	movs	r3, #1
 800c348:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	2b02      	cmp	r3, #2
 800c350:	d102      	bne.n	800c358 <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800c352:	2301      	movs	r3, #1
 800c354:	73fb      	strb	r3, [r7, #15]
    break;
 800c356:	e002      	b.n	800c35e <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;
 800c358:	2301      	movs	r3, #1
 800c35a:	73fb      	strb	r3, [r7, #15]
    break;    
 800c35c:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800c364:	7bfa      	ldrb	r2, [r7, #15]
 800c366:	4611      	mov	r1, r2
 800c368:	4618      	mov	r0, r3
 800c36a:	f7fe f8c5 	bl	800a4f8 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800c374:	4618      	mov	r0, r3
 800c376:	f7fe f87e 	bl	800a476 <USBD_LL_Reset>
}
 800c37a:	bf00      	nop
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
	...

0800c384 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800c392:	4618      	mov	r0, r3
 800c394:	f7fe f8c0 	bl	800a518 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	699b      	ldr	r3, [r3, #24]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d005      	beq.n	800c3ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c3a0:	4a04      	ldr	r2, [pc, #16]	; (800c3b4 <HAL_PCD_SuspendCallback+0x30>)
 800c3a2:	4b04      	ldr	r3, [pc, #16]	; (800c3b4 <HAL_PCD_SuspendCallback+0x30>)
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	f043 0306 	orr.w	r3, r3, #6
 800c3aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c3ac:	bf00      	nop
 800c3ae:	3708      	adds	r7, #8
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	e000ed00 	.word	0xe000ed00

0800c3b8 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	699b      	ldr	r3, [r3, #24]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d007      	beq.n	800c3d8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c3c8:	4a08      	ldr	r2, [pc, #32]	; (800c3ec <HAL_PCD_ResumeCallback+0x34>)
 800c3ca:	4b08      	ldr	r3, [pc, #32]	; (800c3ec <HAL_PCD_ResumeCallback+0x34>)
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	f023 0306 	bic.w	r3, r3, #6
 800c3d2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c3d4:	f000 fab4 	bl	800c940 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7fe f8af 	bl	800a542 <USBD_LL_Resume>
}
 800c3e4:	bf00      	nop
 800c3e6:	3708      	adds	r7, #8
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	e000ed00 	.word	0xe000ed00

0800c3f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b082      	sub	sp, #8
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800c3f8:	f7f9 fa78 	bl	80058ec <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c3fc:	4a2c      	ldr	r2, [pc, #176]	; (800c4b0 <USBD_LL_Init+0xc0>)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
  pdev->pData = &hpcd_USB_FS;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	4a2a      	ldr	r2, [pc, #168]	; (800c4b0 <USBD_LL_Init+0xc0>)
 800c408:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800c40c:	4b28      	ldr	r3, [pc, #160]	; (800c4b0 <USBD_LL_Init+0xc0>)
 800c40e:	4a29      	ldr	r2, [pc, #164]	; (800c4b4 <USBD_LL_Init+0xc4>)
 800c410:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c412:	4b27      	ldr	r3, [pc, #156]	; (800c4b0 <USBD_LL_Init+0xc0>)
 800c414:	2208      	movs	r2, #8
 800c416:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c418:	4b25      	ldr	r3, [pc, #148]	; (800c4b0 <USBD_LL_Init+0xc0>)
 800c41a:	2202      	movs	r2, #2
 800c41c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800c41e:	4b24      	ldr	r3, [pc, #144]	; (800c4b0 <USBD_LL_Init+0xc0>)
 800c420:	2200      	movs	r2, #0
 800c422:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c424:	4b22      	ldr	r3, [pc, #136]	; (800c4b0 <USBD_LL_Init+0xc0>)
 800c426:	2202      	movs	r2, #2
 800c428:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c42a:	4b21      	ldr	r3, [pc, #132]	; (800c4b0 <USBD_LL_Init+0xc0>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c430:	4b1f      	ldr	r3, [pc, #124]	; (800c4b0 <USBD_LL_Init+0xc0>)
 800c432:	2200      	movs	r2, #0
 800c434:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c436:	4b1e      	ldr	r3, [pc, #120]	; (800c4b0 <USBD_LL_Init+0xc0>)
 800c438:	2200      	movs	r2, #0
 800c43a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c43c:	4b1c      	ldr	r3, [pc, #112]	; (800c4b0 <USBD_LL_Init+0xc0>)
 800c43e:	2200      	movs	r2, #0
 800c440:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c442:	481b      	ldr	r0, [pc, #108]	; (800c4b0 <USBD_LL_Init+0xc0>)
 800c444:	f7f8 fa9d 	bl	8004982 <HAL_PCD_Init>
 800c448:	4603      	mov	r3, r0
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d001      	beq.n	800c452 <USBD_LL_Init+0x62>
  {
    Error_Handler( );
 800c44e:	f7ff f95f 	bl	800b710 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c458:	2318      	movs	r3, #24
 800c45a:	2200      	movs	r2, #0
 800c45c:	2100      	movs	r1, #0
 800c45e:	f7f9 f953 	bl	8005708 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c468:	2358      	movs	r3, #88	; 0x58
 800c46a:	2200      	movs	r2, #0
 800c46c:	2180      	movs	r1, #128	; 0x80
 800c46e:	f7f9 f94b 	bl	8005708 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c478:	23c0      	movs	r3, #192	; 0xc0
 800c47a:	2200      	movs	r2, #0
 800c47c:	2181      	movs	r1, #129	; 0x81
 800c47e:	f7f9 f943 	bl	8005708 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c488:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c48c:	2200      	movs	r2, #0
 800c48e:	2101      	movs	r1, #1
 800c490:	f7f9 f93a 	bl	8005708 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c49a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2182      	movs	r1, #130	; 0x82
 800c4a2:	f7f9 f931 	bl	8005708 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 800c4a6:	2300      	movs	r3, #0
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	2000ba1c 	.word	0x2000ba1c
 800c4b4:	40006800 	.word	0x40006800

0800c4b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7f8 fb30 	bl	8004b34 <HAL_PCD_Start>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800c4d8:	7bbb      	ldrb	r3, [r7, #14]
 800c4da:	2b03      	cmp	r3, #3
 800c4dc:	d816      	bhi.n	800c50c <USBD_LL_Start+0x54>
 800c4de:	a201      	add	r2, pc, #4	; (adr r2, 800c4e4 <USBD_LL_Start+0x2c>)
 800c4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e4:	0800c4f5 	.word	0x0800c4f5
 800c4e8:	0800c4fb 	.word	0x0800c4fb
 800c4ec:	0800c501 	.word	0x0800c501
 800c4f0:	0800c507 	.word	0x0800c507
    case HAL_OK :
      usb_status = USBD_OK;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4f8:	e00b      	b.n	800c512 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c4fa:	2302      	movs	r3, #2
 800c4fc:	73fb      	strb	r3, [r7, #15]
    break;
 800c4fe:	e008      	b.n	800c512 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c500:	2301      	movs	r3, #1
 800c502:	73fb      	strb	r3, [r7, #15]
    break;
 800c504:	e005      	b.n	800c512 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c506:	2302      	movs	r3, #2
 800c508:	73fb      	strb	r3, [r7, #15]
    break;
 800c50a:	e002      	b.n	800c512 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c50c:	2302      	movs	r3, #2
 800c50e:	73fb      	strb	r3, [r7, #15]
    break;
 800c510:	bf00      	nop
  }
  return usb_status;
 800c512:	7bfb      	ldrb	r3, [r7, #15]
}
 800c514:	4618      	mov	r0, r3
 800c516:	3710      	adds	r7, #16
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	4608      	mov	r0, r1
 800c526:	4611      	mov	r1, r2
 800c528:	461a      	mov	r2, r3
 800c52a:	4603      	mov	r3, r0
 800c52c:	70fb      	strb	r3, [r7, #3]
 800c52e:	460b      	mov	r3, r1
 800c530:	70bb      	strb	r3, [r7, #2]
 800c532:	4613      	mov	r3, r2
 800c534:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c536:	2300      	movs	r3, #0
 800c538:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c53a:	2300      	movs	r3, #0
 800c53c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c544:	78bb      	ldrb	r3, [r7, #2]
 800c546:	883a      	ldrh	r2, [r7, #0]
 800c548:	78f9      	ldrb	r1, [r7, #3]
 800c54a:	f7f8 fc93 	bl	8004e74 <HAL_PCD_EP_Open>
 800c54e:	4603      	mov	r3, r0
 800c550:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c552:	7bbb      	ldrb	r3, [r7, #14]
 800c554:	2b03      	cmp	r3, #3
 800c556:	d817      	bhi.n	800c588 <USBD_LL_OpenEP+0x6c>
 800c558:	a201      	add	r2, pc, #4	; (adr r2, 800c560 <USBD_LL_OpenEP+0x44>)
 800c55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c55e:	bf00      	nop
 800c560:	0800c571 	.word	0x0800c571
 800c564:	0800c577 	.word	0x0800c577
 800c568:	0800c57d 	.word	0x0800c57d
 800c56c:	0800c583 	.word	0x0800c583
    case HAL_OK :
      usb_status = USBD_OK;
 800c570:	2300      	movs	r3, #0
 800c572:	73fb      	strb	r3, [r7, #15]
    break;
 800c574:	e00b      	b.n	800c58e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c576:	2302      	movs	r3, #2
 800c578:	73fb      	strb	r3, [r7, #15]
    break;
 800c57a:	e008      	b.n	800c58e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c57c:	2301      	movs	r3, #1
 800c57e:	73fb      	strb	r3, [r7, #15]
    break;
 800c580:	e005      	b.n	800c58e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c582:	2302      	movs	r3, #2
 800c584:	73fb      	strb	r3, [r7, #15]
    break;
 800c586:	e002      	b.n	800c58e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c588:	2302      	movs	r3, #2
 800c58a:	73fb      	strb	r3, [r7, #15]
    break;
 800c58c:	bf00      	nop
  }
  return usb_status;
 800c58e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c590:	4618      	mov	r0, r3
 800c592:	3710      	adds	r7, #16
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c5b2:	78fa      	ldrb	r2, [r7, #3]
 800c5b4:	4611      	mov	r1, r2
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7f8 fcbc 	bl	8004f34 <HAL_PCD_EP_Close>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800c5c0:	7bbb      	ldrb	r3, [r7, #14]
 800c5c2:	2b03      	cmp	r3, #3
 800c5c4:	d816      	bhi.n	800c5f4 <USBD_LL_CloseEP+0x5c>
 800c5c6:	a201      	add	r2, pc, #4	; (adr r2, 800c5cc <USBD_LL_CloseEP+0x34>)
 800c5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5cc:	0800c5dd 	.word	0x0800c5dd
 800c5d0:	0800c5e3 	.word	0x0800c5e3
 800c5d4:	0800c5e9 	.word	0x0800c5e9
 800c5d8:	0800c5ef 	.word	0x0800c5ef
    case HAL_OK :
      usb_status = USBD_OK;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	73fb      	strb	r3, [r7, #15]
    break;
 800c5e0:	e00b      	b.n	800c5fa <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5e2:	2302      	movs	r3, #2
 800c5e4:	73fb      	strb	r3, [r7, #15]
    break;
 800c5e6:	e008      	b.n	800c5fa <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ec:	e005      	b.n	800c5fa <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5ee:	2302      	movs	r3, #2
 800c5f0:	73fb      	strb	r3, [r7, #15]
    break;
 800c5f2:	e002      	b.n	800c5fa <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c5f4:	2302      	movs	r3, #2
 800c5f6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5f8:	bf00      	nop
  }
  return usb_status;  
 800c5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3710      	adds	r7, #16
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	460b      	mov	r3, r1
 800c60e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c610:	2300      	movs	r3, #0
 800c612:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c614:	2300      	movs	r3, #0
 800c616:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c61e:	78fa      	ldrb	r2, [r7, #3]
 800c620:	4611      	mov	r1, r2
 800c622:	4618      	mov	r0, r3
 800c624:	f7f8 fd51 	bl	80050ca <HAL_PCD_EP_SetStall>
 800c628:	4603      	mov	r3, r0
 800c62a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c62c:	7bbb      	ldrb	r3, [r7, #14]
 800c62e:	2b03      	cmp	r3, #3
 800c630:	d816      	bhi.n	800c660 <USBD_LL_StallEP+0x5c>
 800c632:	a201      	add	r2, pc, #4	; (adr r2, 800c638 <USBD_LL_StallEP+0x34>)
 800c634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c638:	0800c649 	.word	0x0800c649
 800c63c:	0800c64f 	.word	0x0800c64f
 800c640:	0800c655 	.word	0x0800c655
 800c644:	0800c65b 	.word	0x0800c65b
    case HAL_OK :
      usb_status = USBD_OK;
 800c648:	2300      	movs	r3, #0
 800c64a:	73fb      	strb	r3, [r7, #15]
    break;
 800c64c:	e00b      	b.n	800c666 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c64e:	2302      	movs	r3, #2
 800c650:	73fb      	strb	r3, [r7, #15]
    break;
 800c652:	e008      	b.n	800c666 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c654:	2301      	movs	r3, #1
 800c656:	73fb      	strb	r3, [r7, #15]
    break;
 800c658:	e005      	b.n	800c666 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c65a:	2302      	movs	r3, #2
 800c65c:	73fb      	strb	r3, [r7, #15]
    break;
 800c65e:	e002      	b.n	800c666 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c660:	2302      	movs	r3, #2
 800c662:	73fb      	strb	r3, [r7, #15]
    break;
 800c664:	bf00      	nop
  }
  return usb_status;  
 800c666:	7bfb      	ldrb	r3, [r7, #15]
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3710      	adds	r7, #16
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	460b      	mov	r3, r1
 800c67a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c67c:	2300      	movs	r3, #0
 800c67e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c680:	2300      	movs	r3, #0
 800c682:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c68a:	78fa      	ldrb	r2, [r7, #3]
 800c68c:	4611      	mov	r1, r2
 800c68e:	4618      	mov	r0, r3
 800c690:	f7f8 fd75 	bl	800517e <HAL_PCD_EP_ClrStall>
 800c694:	4603      	mov	r3, r0
 800c696:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800c698:	7bbb      	ldrb	r3, [r7, #14]
 800c69a:	2b03      	cmp	r3, #3
 800c69c:	d816      	bhi.n	800c6cc <USBD_LL_ClearStallEP+0x5c>
 800c69e:	a201      	add	r2, pc, #4	; (adr r2, 800c6a4 <USBD_LL_ClearStallEP+0x34>)
 800c6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a4:	0800c6b5 	.word	0x0800c6b5
 800c6a8:	0800c6bb 	.word	0x0800c6bb
 800c6ac:	0800c6c1 	.word	0x0800c6c1
 800c6b0:	0800c6c7 	.word	0x0800c6c7
    case HAL_OK :
      usb_status = USBD_OK;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c6b8:	e00b      	b.n	800c6d2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c6ba:	2302      	movs	r3, #2
 800c6bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c6be:	e008      	b.n	800c6d2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c6c4:	e005      	b.n	800c6d2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c6c6:	2302      	movs	r3, #2
 800c6c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c6ca:	e002      	b.n	800c6d2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c6cc:	2302      	movs	r3, #2
 800c6ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c6d0:	bf00      	nop
  }
  return usb_status; 
 800c6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b085      	sub	sp, #20
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c6ee:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800c6f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	da08      	bge.n	800c70a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800c6f8:	78fb      	ldrb	r3, [r7, #3]
 800c6fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6fe:	68fa      	ldr	r2, [r7, #12]
 800c700:	015b      	lsls	r3, r3, #5
 800c702:	4413      	add	r3, r2
 800c704:	332a      	adds	r3, #42	; 0x2a
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	e008      	b.n	800c71c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800c70a:	78fb      	ldrb	r3, [r7, #3]
 800c70c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	015b      	lsls	r3, r3, #5
 800c714:	4413      	add	r3, r2
 800c716:	f203 232a 	addw	r3, r3, #554	; 0x22a
 800c71a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3714      	adds	r7, #20
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	460b      	mov	r3, r1
 800c732:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c734:	2300      	movs	r3, #0
 800c736:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c738:	2300      	movs	r3, #0
 800c73a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c742:	78fa      	ldrb	r2, [r7, #3]
 800c744:	4611      	mov	r1, r2
 800c746:	4618      	mov	r0, r3
 800c748:	f7f8 fb6f 	bl	8004e2a <HAL_PCD_SetAddress>
 800c74c:	4603      	mov	r3, r0
 800c74e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800c750:	7bbb      	ldrb	r3, [r7, #14]
 800c752:	2b03      	cmp	r3, #3
 800c754:	d816      	bhi.n	800c784 <USBD_LL_SetUSBAddress+0x5c>
 800c756:	a201      	add	r2, pc, #4	; (adr r2, 800c75c <USBD_LL_SetUSBAddress+0x34>)
 800c758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c75c:	0800c76d 	.word	0x0800c76d
 800c760:	0800c773 	.word	0x0800c773
 800c764:	0800c779 	.word	0x0800c779
 800c768:	0800c77f 	.word	0x0800c77f
    case HAL_OK :
      usb_status = USBD_OK;
 800c76c:	2300      	movs	r3, #0
 800c76e:	73fb      	strb	r3, [r7, #15]
    break;
 800c770:	e00b      	b.n	800c78a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c772:	2302      	movs	r3, #2
 800c774:	73fb      	strb	r3, [r7, #15]
    break;
 800c776:	e008      	b.n	800c78a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c778:	2301      	movs	r3, #1
 800c77a:	73fb      	strb	r3, [r7, #15]
    break;
 800c77c:	e005      	b.n	800c78a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c77e:	2302      	movs	r3, #2
 800c780:	73fb      	strb	r3, [r7, #15]
    break;
 800c782:	e002      	b.n	800c78a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c784:	2302      	movs	r3, #2
 800c786:	73fb      	strb	r3, [r7, #15]
    break;
 800c788:	bf00      	nop
  }
  return usb_status;  
 800c78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3710      	adds	r7, #16
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b086      	sub	sp, #24
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	607a      	str	r2, [r7, #4]
 800c79e:	461a      	mov	r2, r3
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	72fb      	strb	r3, [r7, #11]
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c7b6:	893b      	ldrh	r3, [r7, #8]
 800c7b8:	7af9      	ldrb	r1, [r7, #11]
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	f7f8 fc4c 	bl	8005058 <HAL_PCD_EP_Transmit>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800c7c4:	7dbb      	ldrb	r3, [r7, #22]
 800c7c6:	2b03      	cmp	r3, #3
 800c7c8:	d816      	bhi.n	800c7f8 <USBD_LL_Transmit+0x64>
 800c7ca:	a201      	add	r2, pc, #4	; (adr r2, 800c7d0 <USBD_LL_Transmit+0x3c>)
 800c7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d0:	0800c7e1 	.word	0x0800c7e1
 800c7d4:	0800c7e7 	.word	0x0800c7e7
 800c7d8:	0800c7ed 	.word	0x0800c7ed
 800c7dc:	0800c7f3 	.word	0x0800c7f3
    case HAL_OK :
      usb_status = USBD_OK;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	75fb      	strb	r3, [r7, #23]
    break;
 800c7e4:	e00b      	b.n	800c7fe <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c7e6:	2302      	movs	r3, #2
 800c7e8:	75fb      	strb	r3, [r7, #23]
    break;
 800c7ea:	e008      	b.n	800c7fe <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	75fb      	strb	r3, [r7, #23]
    break;
 800c7f0:	e005      	b.n	800c7fe <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c7f2:	2302      	movs	r3, #2
 800c7f4:	75fb      	strb	r3, [r7, #23]
    break;
 800c7f6:	e002      	b.n	800c7fe <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800c7f8:	2302      	movs	r3, #2
 800c7fa:	75fb      	strb	r3, [r7, #23]
    break;
 800c7fc:	bf00      	nop
  }
  return usb_status;    
 800c7fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c800:	4618      	mov	r0, r3
 800c802:	3718      	adds	r7, #24
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b086      	sub	sp, #24
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	607a      	str	r2, [r7, #4]
 800c812:	461a      	mov	r2, r3
 800c814:	460b      	mov	r3, r1
 800c816:	72fb      	strb	r3, [r7, #11]
 800c818:	4613      	mov	r3, r2
 800c81a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c81c:	2300      	movs	r3, #0
 800c81e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c820:	2300      	movs	r3, #0
 800c822:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c82a:	893b      	ldrh	r3, [r7, #8]
 800c82c:	7af9      	ldrb	r1, [r7, #11]
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	f7f8 fbc2 	bl	8004fb8 <HAL_PCD_EP_Receive>
 800c834:	4603      	mov	r3, r0
 800c836:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800c838:	7dbb      	ldrb	r3, [r7, #22]
 800c83a:	2b03      	cmp	r3, #3
 800c83c:	d816      	bhi.n	800c86c <USBD_LL_PrepareReceive+0x64>
 800c83e:	a201      	add	r2, pc, #4	; (adr r2, 800c844 <USBD_LL_PrepareReceive+0x3c>)
 800c840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c844:	0800c855 	.word	0x0800c855
 800c848:	0800c85b 	.word	0x0800c85b
 800c84c:	0800c861 	.word	0x0800c861
 800c850:	0800c867 	.word	0x0800c867
    case HAL_OK :
      usb_status = USBD_OK;
 800c854:	2300      	movs	r3, #0
 800c856:	75fb      	strb	r3, [r7, #23]
    break;
 800c858:	e00b      	b.n	800c872 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c85a:	2302      	movs	r3, #2
 800c85c:	75fb      	strb	r3, [r7, #23]
    break;
 800c85e:	e008      	b.n	800c872 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c860:	2301      	movs	r3, #1
 800c862:	75fb      	strb	r3, [r7, #23]
    break;
 800c864:	e005      	b.n	800c872 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c866:	2302      	movs	r3, #2
 800c868:	75fb      	strb	r3, [r7, #23]
    break;
 800c86a:	e002      	b.n	800c872 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800c86c:	2302      	movs	r3, #2
 800c86e:	75fb      	strb	r3, [r7, #23]
    break;
 800c870:	bf00      	nop
  }
  return usb_status; 
 800c872:	7dfb      	ldrb	r3, [r7, #23]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3718      	adds	r7, #24
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	460b      	mov	r3, r1
 800c886:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c88e:	78fa      	ldrb	r2, [r7, #3]
 800c890:	4611      	mov	r1, r2
 800c892:	4618      	mov	r0, r3
 800c894:	f7f8 fbca 	bl	800502c <HAL_PCD_EP_GetRxCount>
 800c898:	4603      	mov	r3, r0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3708      	adds	r7, #8
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
	...

0800c8a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c8b0:	78fb      	ldrb	r3, [r7, #3]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d002      	beq.n	800c8bc <HAL_PCDEx_LPM_Callback+0x18>
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d013      	beq.n	800c8e2 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800c8ba:	e023      	b.n	800c904 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	699b      	ldr	r3, [r3, #24]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d007      	beq.n	800c8d4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c8c4:	f7fe fe9b 	bl	800b5fe <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c8c8:	4a10      	ldr	r2, [pc, #64]	; (800c90c <HAL_PCDEx_LPM_Callback+0x68>)
 800c8ca:	4b10      	ldr	r3, [pc, #64]	; (800c90c <HAL_PCDEx_LPM_Callback+0x68>)
 800c8cc:	691b      	ldr	r3, [r3, #16]
 800c8ce:	f023 0306 	bic.w	r3, r3, #6
 800c8d2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7fd fe31 	bl	800a542 <USBD_LL_Resume>
    break;
 800c8e0:	e010      	b.n	800c904 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7fd fe15 	bl	800a518 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	699b      	ldr	r3, [r3, #24]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d005      	beq.n	800c902 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c8f6:	4a05      	ldr	r2, [pc, #20]	; (800c90c <HAL_PCDEx_LPM_Callback+0x68>)
 800c8f8:	4b04      	ldr	r3, [pc, #16]	; (800c90c <HAL_PCDEx_LPM_Callback+0x68>)
 800c8fa:	691b      	ldr	r3, [r3, #16]
 800c8fc:	f043 0306 	orr.w	r3, r3, #6
 800c900:	6113      	str	r3, [r2, #16]
    break;   
 800c902:	bf00      	nop
}
 800c904:	bf00      	nop
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	e000ed00 	.word	0xe000ed00

0800c910 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c918:	4b03      	ldr	r3, [pc, #12]	; (800c928 <USBD_static_malloc+0x18>)
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	370c      	adds	r7, #12
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	2000a1ac 	.word	0x2000a1ac

0800c92c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b083      	sub	sp, #12
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]

}
 800c934:	bf00      	nop
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr

0800c940 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c944:	f7fe fe5b 	bl	800b5fe <SystemClock_Config>
}
 800c948:	bf00      	nop
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <USBD_LL_BatteryCharging>:
  *         else return USBD_FAIL if false
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b085      	sub	sp, #20
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c95a:	60fb      	str	r3, [r7, #12]
  if (hpcd->Init.battery_charging_enable == ENABLE)
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	6a1b      	ldr	r3, [r3, #32]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d101      	bne.n	800c968 <USBD_LL_BatteryCharging+0x1c>
  {
    return USBD_OK;
 800c964:	2300      	movs	r3, #0
 800c966:	e000      	b.n	800c96a <USBD_LL_BatteryCharging+0x1e>
  }
  else
  {
    return USBD_FAIL;
 800c968:	2302      	movs	r3, #2
  }
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3714      	adds	r7, #20
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr
	...

0800c978 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	4603      	mov	r3, r0
 800c980:	6039      	str	r1, [r7, #0]
 800c982:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	2212      	movs	r2, #18
 800c988:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c98a:	4b03      	ldr	r3, [pc, #12]	; (800c998 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	370c      	adds	r7, #12
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr
 800c998:	200012d0 	.word	0x200012d0

0800c99c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	6039      	str	r1, [r7, #0]
 800c9a6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	2204      	movs	r2, #4
 800c9ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c9ae:	4b03      	ldr	r3, [pc, #12]	; (800c9bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr
 800c9bc:	200012f0 	.word	0x200012f0

0800c9c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	6039      	str	r1, [r7, #0]
 800c9ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c9cc:	79fb      	ldrb	r3, [r7, #7]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d105      	bne.n	800c9de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c9d2:	683a      	ldr	r2, [r7, #0]
 800c9d4:	4907      	ldr	r1, [pc, #28]	; (800c9f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c9d6:	4808      	ldr	r0, [pc, #32]	; (800c9f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c9d8:	f7fe faba 	bl	800af50 <USBD_GetString>
 800c9dc:	e004      	b.n	800c9e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c9de:	683a      	ldr	r2, [r7, #0]
 800c9e0:	4904      	ldr	r1, [pc, #16]	; (800c9f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c9e2:	4805      	ldr	r0, [pc, #20]	; (800c9f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c9e4:	f7fe fab4 	bl	800af50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9e8:	4b02      	ldr	r3, [pc, #8]	; (800c9f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3708      	adds	r7, #8
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	2000be90 	.word	0x2000be90
 800c9f8:	0800d664 	.word	0x0800d664

0800c9fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	4603      	mov	r3, r0
 800ca04:	6039      	str	r1, [r7, #0]
 800ca06:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ca08:	683a      	ldr	r2, [r7, #0]
 800ca0a:	4904      	ldr	r1, [pc, #16]	; (800ca1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ca0c:	4804      	ldr	r0, [pc, #16]	; (800ca20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ca0e:	f7fe fa9f 	bl	800af50 <USBD_GetString>
  return USBD_StrDesc;
 800ca12:	4b02      	ldr	r3, [pc, #8]	; (800ca1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3708      	adds	r7, #8
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	2000be90 	.word	0x2000be90
 800ca20:	0800d674 	.word	0x0800d674

0800ca24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	6039      	str	r1, [r7, #0]
 800ca2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ca30:	79fb      	ldrb	r3, [r7, #7]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d105      	bne.n	800ca42 <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800ca36:	683a      	ldr	r2, [r7, #0]
 800ca38:	4907      	ldr	r1, [pc, #28]	; (800ca58 <USBD_FS_SerialStrDescriptor+0x34>)
 800ca3a:	4808      	ldr	r0, [pc, #32]	; (800ca5c <USBD_FS_SerialStrDescriptor+0x38>)
 800ca3c:	f7fe fa88 	bl	800af50 <USBD_GetString>
 800ca40:	e004      	b.n	800ca4c <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800ca42:	683a      	ldr	r2, [r7, #0]
 800ca44:	4904      	ldr	r1, [pc, #16]	; (800ca58 <USBD_FS_SerialStrDescriptor+0x34>)
 800ca46:	4805      	ldr	r0, [pc, #20]	; (800ca5c <USBD_FS_SerialStrDescriptor+0x38>)
 800ca48:	f7fe fa82 	bl	800af50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca4c:	4b02      	ldr	r3, [pc, #8]	; (800ca58 <USBD_FS_SerialStrDescriptor+0x34>)
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3708      	adds	r7, #8
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	2000be90 	.word	0x2000be90
 800ca5c:	0800d688 	.word	0x0800d688

0800ca60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	4603      	mov	r3, r0
 800ca68:	6039      	str	r1, [r7, #0]
 800ca6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ca6c:	79fb      	ldrb	r3, [r7, #7]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d105      	bne.n	800ca7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca72:	683a      	ldr	r2, [r7, #0]
 800ca74:	4907      	ldr	r1, [pc, #28]	; (800ca94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ca76:	4808      	ldr	r0, [pc, #32]	; (800ca98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ca78:	f7fe fa6a 	bl	800af50 <USBD_GetString>
 800ca7c:	e004      	b.n	800ca88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca7e:	683a      	ldr	r2, [r7, #0]
 800ca80:	4904      	ldr	r1, [pc, #16]	; (800ca94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ca82:	4805      	ldr	r0, [pc, #20]	; (800ca98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ca84:	f7fe fa64 	bl	800af50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca88:	4b02      	ldr	r3, [pc, #8]	; (800ca94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3708      	adds	r7, #8
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	2000be90 	.word	0x2000be90
 800ca98:	0800d698 	.word	0x0800d698

0800ca9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	4603      	mov	r3, r0
 800caa4:	6039      	str	r1, [r7, #0]
 800caa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800caa8:	79fb      	ldrb	r3, [r7, #7]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d105      	bne.n	800caba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800caae:	683a      	ldr	r2, [r7, #0]
 800cab0:	4907      	ldr	r1, [pc, #28]	; (800cad0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cab2:	4808      	ldr	r0, [pc, #32]	; (800cad4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cab4:	f7fe fa4c 	bl	800af50 <USBD_GetString>
 800cab8:	e004      	b.n	800cac4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800caba:	683a      	ldr	r2, [r7, #0]
 800cabc:	4904      	ldr	r1, [pc, #16]	; (800cad0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cabe:	4805      	ldr	r0, [pc, #20]	; (800cad4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cac0:	f7fe fa46 	bl	800af50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cac4:	4b02      	ldr	r3, [pc, #8]	; (800cad0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3708      	adds	r7, #8
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	bf00      	nop
 800cad0:	2000be90 	.word	0x2000be90
 800cad4:	0800d6a4 	.word	0x0800d6a4

0800cad8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
 800cade:	4603      	mov	r3, r0
 800cae0:	6039      	str	r1, [r7, #0]
 800cae2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_BOSDesc);
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	220c      	movs	r2, #12
 800cae8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800caea:	4b03      	ldr	r3, [pc, #12]	; (800caf8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800caec:	4618      	mov	r0, r3
 800caee:	370c      	adds	r7, #12
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr
 800caf8:	200012e4 	.word	0x200012e4

0800cafc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800cafc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800cb34 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800cb00:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800cb02:	e003      	b.n	800cb0c <LoopCopyDataInit>

0800cb04 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800cb04:	4b0c      	ldr	r3, [pc, #48]	; (800cb38 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800cb06:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800cb08:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800cb0a:	3104      	adds	r1, #4

0800cb0c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800cb0c:	480b      	ldr	r0, [pc, #44]	; (800cb3c <LoopForever+0xa>)
	ldr	r3, =_edata
 800cb0e:	4b0c      	ldr	r3, [pc, #48]	; (800cb40 <LoopForever+0xe>)
	adds	r2, r0, r1
 800cb10:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800cb12:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800cb14:	d3f6      	bcc.n	800cb04 <CopyDataInit>
	ldr	r2, =_sbss
 800cb16:	4a0b      	ldr	r2, [pc, #44]	; (800cb44 <LoopForever+0x12>)
	b	LoopFillZerobss
 800cb18:	e002      	b.n	800cb20 <LoopFillZerobss>

0800cb1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800cb1a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800cb1c:	f842 3b04 	str.w	r3, [r2], #4

0800cb20 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800cb20:	4b09      	ldr	r3, [pc, #36]	; (800cb48 <LoopForever+0x16>)
	cmp	r2, r3
 800cb22:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800cb24:	d3f9      	bcc.n	800cb1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800cb26:	f7fe feb5 	bl	800b894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800cb2a:	f000 f811 	bl	800cb50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800cb2e:	f7fe fd45 	bl	800b5bc <main>

0800cb32 <LoopForever>:

LoopForever:
    b LoopForever
 800cb32:	e7fe      	b.n	800cb32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800cb34:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 800cb38:	0800d854 	.word	0x0800d854
	ldr	r0, =_sdata
 800cb3c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800cb40:	200014c4 	.word	0x200014c4
	ldr	r2, =_sbss
 800cb44:	200014c4 	.word	0x200014c4
	ldr	r3, = _ebss
 800cb48:	2000c094 	.word	0x2000c094

0800cb4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800cb4c:	e7fe      	b.n	800cb4c <ADC1_IRQHandler>
	...

0800cb50 <__libc_init_array>:
 800cb50:	b570      	push	{r4, r5, r6, lr}
 800cb52:	4e0d      	ldr	r6, [pc, #52]	; (800cb88 <__libc_init_array+0x38>)
 800cb54:	4c0d      	ldr	r4, [pc, #52]	; (800cb8c <__libc_init_array+0x3c>)
 800cb56:	1ba4      	subs	r4, r4, r6
 800cb58:	10a4      	asrs	r4, r4, #2
 800cb5a:	2500      	movs	r5, #0
 800cb5c:	42a5      	cmp	r5, r4
 800cb5e:	d109      	bne.n	800cb74 <__libc_init_array+0x24>
 800cb60:	4e0b      	ldr	r6, [pc, #44]	; (800cb90 <__libc_init_array+0x40>)
 800cb62:	4c0c      	ldr	r4, [pc, #48]	; (800cb94 <__libc_init_array+0x44>)
 800cb64:	f000 fd2a 	bl	800d5bc <_init>
 800cb68:	1ba4      	subs	r4, r4, r6
 800cb6a:	10a4      	asrs	r4, r4, #2
 800cb6c:	2500      	movs	r5, #0
 800cb6e:	42a5      	cmp	r5, r4
 800cb70:	d105      	bne.n	800cb7e <__libc_init_array+0x2e>
 800cb72:	bd70      	pop	{r4, r5, r6, pc}
 800cb74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cb78:	4798      	blx	r3
 800cb7a:	3501      	adds	r5, #1
 800cb7c:	e7ee      	b.n	800cb5c <__libc_init_array+0xc>
 800cb7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cb82:	4798      	blx	r3
 800cb84:	3501      	adds	r5, #1
 800cb86:	e7f2      	b.n	800cb6e <__libc_init_array+0x1e>
 800cb88:	0800d84c 	.word	0x0800d84c
 800cb8c:	0800d84c 	.word	0x0800d84c
 800cb90:	0800d84c 	.word	0x0800d84c
 800cb94:	0800d850 	.word	0x0800d850

0800cb98 <memcpy>:
 800cb98:	b510      	push	{r4, lr}
 800cb9a:	1e43      	subs	r3, r0, #1
 800cb9c:	440a      	add	r2, r1
 800cb9e:	4291      	cmp	r1, r2
 800cba0:	d100      	bne.n	800cba4 <memcpy+0xc>
 800cba2:	bd10      	pop	{r4, pc}
 800cba4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbac:	e7f7      	b.n	800cb9e <memcpy+0x6>

0800cbae <memset>:
 800cbae:	4402      	add	r2, r0
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d100      	bne.n	800cbb8 <memset+0xa>
 800cbb6:	4770      	bx	lr
 800cbb8:	f803 1b01 	strb.w	r1, [r3], #1
 800cbbc:	e7f9      	b.n	800cbb2 <memset+0x4>
	...

0800cbc0 <sniprintf>:
 800cbc0:	b40c      	push	{r2, r3}
 800cbc2:	b530      	push	{r4, r5, lr}
 800cbc4:	4b17      	ldr	r3, [pc, #92]	; (800cc24 <sniprintf+0x64>)
 800cbc6:	1e0c      	subs	r4, r1, #0
 800cbc8:	b09d      	sub	sp, #116	; 0x74
 800cbca:	681d      	ldr	r5, [r3, #0]
 800cbcc:	da08      	bge.n	800cbe0 <sniprintf+0x20>
 800cbce:	238b      	movs	r3, #139	; 0x8b
 800cbd0:	602b      	str	r3, [r5, #0]
 800cbd2:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd6:	b01d      	add	sp, #116	; 0x74
 800cbd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbdc:	b002      	add	sp, #8
 800cbde:	4770      	bx	lr
 800cbe0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cbe4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cbe8:	bf14      	ite	ne
 800cbea:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cbee:	4623      	moveq	r3, r4
 800cbf0:	9304      	str	r3, [sp, #16]
 800cbf2:	9307      	str	r3, [sp, #28]
 800cbf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cbf8:	9002      	str	r0, [sp, #8]
 800cbfa:	9006      	str	r0, [sp, #24]
 800cbfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cc00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cc02:	ab21      	add	r3, sp, #132	; 0x84
 800cc04:	a902      	add	r1, sp, #8
 800cc06:	4628      	mov	r0, r5
 800cc08:	9301      	str	r3, [sp, #4]
 800cc0a:	f000 f929 	bl	800ce60 <_svfiprintf_r>
 800cc0e:	1c43      	adds	r3, r0, #1
 800cc10:	bfbc      	itt	lt
 800cc12:	238b      	movlt	r3, #139	; 0x8b
 800cc14:	602b      	strlt	r3, [r5, #0]
 800cc16:	2c00      	cmp	r4, #0
 800cc18:	d0dd      	beq.n	800cbd6 <sniprintf+0x16>
 800cc1a:	9b02      	ldr	r3, [sp, #8]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	701a      	strb	r2, [r3, #0]
 800cc20:	e7d9      	b.n	800cbd6 <sniprintf+0x16>
 800cc22:	bf00      	nop
 800cc24:	200012f4 	.word	0x200012f4

0800cc28 <strncpy>:
 800cc28:	b570      	push	{r4, r5, r6, lr}
 800cc2a:	4604      	mov	r4, r0
 800cc2c:	b902      	cbnz	r2, 800cc30 <strncpy+0x8>
 800cc2e:	bd70      	pop	{r4, r5, r6, pc}
 800cc30:	4623      	mov	r3, r4
 800cc32:	f811 5b01 	ldrb.w	r5, [r1], #1
 800cc36:	f803 5b01 	strb.w	r5, [r3], #1
 800cc3a:	1e56      	subs	r6, r2, #1
 800cc3c:	b91d      	cbnz	r5, 800cc46 <strncpy+0x1e>
 800cc3e:	4414      	add	r4, r2
 800cc40:	42a3      	cmp	r3, r4
 800cc42:	d103      	bne.n	800cc4c <strncpy+0x24>
 800cc44:	bd70      	pop	{r4, r5, r6, pc}
 800cc46:	461c      	mov	r4, r3
 800cc48:	4632      	mov	r2, r6
 800cc4a:	e7ef      	b.n	800cc2c <strncpy+0x4>
 800cc4c:	f803 5b01 	strb.w	r5, [r3], #1
 800cc50:	e7f6      	b.n	800cc40 <strncpy+0x18>

0800cc52 <_strtol_l.isra.0>:
 800cc52:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc56:	4680      	mov	r8, r0
 800cc58:	4689      	mov	r9, r1
 800cc5a:	4692      	mov	sl, r2
 800cc5c:	461f      	mov	r7, r3
 800cc5e:	468b      	mov	fp, r1
 800cc60:	465d      	mov	r5, fp
 800cc62:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cc64:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc68:	f000 f88a 	bl	800cd80 <__locale_ctype_ptr_l>
 800cc6c:	4420      	add	r0, r4
 800cc6e:	7846      	ldrb	r6, [r0, #1]
 800cc70:	f016 0608 	ands.w	r6, r6, #8
 800cc74:	d10b      	bne.n	800cc8e <_strtol_l.isra.0+0x3c>
 800cc76:	2c2d      	cmp	r4, #45	; 0x2d
 800cc78:	d10b      	bne.n	800cc92 <_strtol_l.isra.0+0x40>
 800cc7a:	782c      	ldrb	r4, [r5, #0]
 800cc7c:	2601      	movs	r6, #1
 800cc7e:	f10b 0502 	add.w	r5, fp, #2
 800cc82:	b167      	cbz	r7, 800cc9e <_strtol_l.isra.0+0x4c>
 800cc84:	2f10      	cmp	r7, #16
 800cc86:	d114      	bne.n	800ccb2 <_strtol_l.isra.0+0x60>
 800cc88:	2c30      	cmp	r4, #48	; 0x30
 800cc8a:	d00a      	beq.n	800cca2 <_strtol_l.isra.0+0x50>
 800cc8c:	e011      	b.n	800ccb2 <_strtol_l.isra.0+0x60>
 800cc8e:	46ab      	mov	fp, r5
 800cc90:	e7e6      	b.n	800cc60 <_strtol_l.isra.0+0xe>
 800cc92:	2c2b      	cmp	r4, #43	; 0x2b
 800cc94:	bf04      	itt	eq
 800cc96:	782c      	ldrbeq	r4, [r5, #0]
 800cc98:	f10b 0502 	addeq.w	r5, fp, #2
 800cc9c:	e7f1      	b.n	800cc82 <_strtol_l.isra.0+0x30>
 800cc9e:	2c30      	cmp	r4, #48	; 0x30
 800cca0:	d127      	bne.n	800ccf2 <_strtol_l.isra.0+0xa0>
 800cca2:	782b      	ldrb	r3, [r5, #0]
 800cca4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cca8:	2b58      	cmp	r3, #88	; 0x58
 800ccaa:	d14b      	bne.n	800cd44 <_strtol_l.isra.0+0xf2>
 800ccac:	786c      	ldrb	r4, [r5, #1]
 800ccae:	2710      	movs	r7, #16
 800ccb0:	3502      	adds	r5, #2
 800ccb2:	2e00      	cmp	r6, #0
 800ccb4:	bf0c      	ite	eq
 800ccb6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800ccba:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	fbb1 fef7 	udiv	lr, r1, r7
 800ccc4:	4610      	mov	r0, r2
 800ccc6:	fb07 1c1e 	mls	ip, r7, lr, r1
 800ccca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800ccce:	2b09      	cmp	r3, #9
 800ccd0:	d811      	bhi.n	800ccf6 <_strtol_l.isra.0+0xa4>
 800ccd2:	461c      	mov	r4, r3
 800ccd4:	42a7      	cmp	r7, r4
 800ccd6:	dd1d      	ble.n	800cd14 <_strtol_l.isra.0+0xc2>
 800ccd8:	1c53      	adds	r3, r2, #1
 800ccda:	d007      	beq.n	800ccec <_strtol_l.isra.0+0x9a>
 800ccdc:	4586      	cmp	lr, r0
 800ccde:	d316      	bcc.n	800cd0e <_strtol_l.isra.0+0xbc>
 800cce0:	d101      	bne.n	800cce6 <_strtol_l.isra.0+0x94>
 800cce2:	45a4      	cmp	ip, r4
 800cce4:	db13      	blt.n	800cd0e <_strtol_l.isra.0+0xbc>
 800cce6:	fb00 4007 	mla	r0, r0, r7, r4
 800ccea:	2201      	movs	r2, #1
 800ccec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ccf0:	e7eb      	b.n	800ccca <_strtol_l.isra.0+0x78>
 800ccf2:	270a      	movs	r7, #10
 800ccf4:	e7dd      	b.n	800ccb2 <_strtol_l.isra.0+0x60>
 800ccf6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800ccfa:	2b19      	cmp	r3, #25
 800ccfc:	d801      	bhi.n	800cd02 <_strtol_l.isra.0+0xb0>
 800ccfe:	3c37      	subs	r4, #55	; 0x37
 800cd00:	e7e8      	b.n	800ccd4 <_strtol_l.isra.0+0x82>
 800cd02:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800cd06:	2b19      	cmp	r3, #25
 800cd08:	d804      	bhi.n	800cd14 <_strtol_l.isra.0+0xc2>
 800cd0a:	3c57      	subs	r4, #87	; 0x57
 800cd0c:	e7e2      	b.n	800ccd4 <_strtol_l.isra.0+0x82>
 800cd0e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd12:	e7eb      	b.n	800ccec <_strtol_l.isra.0+0x9a>
 800cd14:	1c53      	adds	r3, r2, #1
 800cd16:	d108      	bne.n	800cd2a <_strtol_l.isra.0+0xd8>
 800cd18:	2322      	movs	r3, #34	; 0x22
 800cd1a:	f8c8 3000 	str.w	r3, [r8]
 800cd1e:	4608      	mov	r0, r1
 800cd20:	f1ba 0f00 	cmp.w	sl, #0
 800cd24:	d107      	bne.n	800cd36 <_strtol_l.isra.0+0xe4>
 800cd26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd2a:	b106      	cbz	r6, 800cd2e <_strtol_l.isra.0+0xdc>
 800cd2c:	4240      	negs	r0, r0
 800cd2e:	f1ba 0f00 	cmp.w	sl, #0
 800cd32:	d00c      	beq.n	800cd4e <_strtol_l.isra.0+0xfc>
 800cd34:	b122      	cbz	r2, 800cd40 <_strtol_l.isra.0+0xee>
 800cd36:	3d01      	subs	r5, #1
 800cd38:	f8ca 5000 	str.w	r5, [sl]
 800cd3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd40:	464d      	mov	r5, r9
 800cd42:	e7f9      	b.n	800cd38 <_strtol_l.isra.0+0xe6>
 800cd44:	2430      	movs	r4, #48	; 0x30
 800cd46:	2f00      	cmp	r7, #0
 800cd48:	d1b3      	bne.n	800ccb2 <_strtol_l.isra.0+0x60>
 800cd4a:	2708      	movs	r7, #8
 800cd4c:	e7b1      	b.n	800ccb2 <_strtol_l.isra.0+0x60>
 800cd4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800cd54 <strtol>:
 800cd54:	4b08      	ldr	r3, [pc, #32]	; (800cd78 <strtol+0x24>)
 800cd56:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd58:	681c      	ldr	r4, [r3, #0]
 800cd5a:	4d08      	ldr	r5, [pc, #32]	; (800cd7c <strtol+0x28>)
 800cd5c:	6a23      	ldr	r3, [r4, #32]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	bf08      	it	eq
 800cd62:	462b      	moveq	r3, r5
 800cd64:	9300      	str	r3, [sp, #0]
 800cd66:	4613      	mov	r3, r2
 800cd68:	460a      	mov	r2, r1
 800cd6a:	4601      	mov	r1, r0
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f7ff ff70 	bl	800cc52 <_strtol_l.isra.0>
 800cd72:	b003      	add	sp, #12
 800cd74:	bd30      	pop	{r4, r5, pc}
 800cd76:	bf00      	nop
 800cd78:	200012f4 	.word	0x200012f4
 800cd7c:	20001358 	.word	0x20001358

0800cd80 <__locale_ctype_ptr_l>:
 800cd80:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800cd84:	4770      	bx	lr

0800cd86 <__ascii_mbtowc>:
 800cd86:	b082      	sub	sp, #8
 800cd88:	b901      	cbnz	r1, 800cd8c <__ascii_mbtowc+0x6>
 800cd8a:	a901      	add	r1, sp, #4
 800cd8c:	b142      	cbz	r2, 800cda0 <__ascii_mbtowc+0x1a>
 800cd8e:	b14b      	cbz	r3, 800cda4 <__ascii_mbtowc+0x1e>
 800cd90:	7813      	ldrb	r3, [r2, #0]
 800cd92:	600b      	str	r3, [r1, #0]
 800cd94:	7812      	ldrb	r2, [r2, #0]
 800cd96:	1c10      	adds	r0, r2, #0
 800cd98:	bf18      	it	ne
 800cd9a:	2001      	movne	r0, #1
 800cd9c:	b002      	add	sp, #8
 800cd9e:	4770      	bx	lr
 800cda0:	4610      	mov	r0, r2
 800cda2:	e7fb      	b.n	800cd9c <__ascii_mbtowc+0x16>
 800cda4:	f06f 0001 	mvn.w	r0, #1
 800cda8:	e7f8      	b.n	800cd9c <__ascii_mbtowc+0x16>

0800cdaa <__ssputs_r>:
 800cdaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdae:	688e      	ldr	r6, [r1, #8]
 800cdb0:	429e      	cmp	r6, r3
 800cdb2:	4682      	mov	sl, r0
 800cdb4:	460c      	mov	r4, r1
 800cdb6:	4691      	mov	r9, r2
 800cdb8:	4698      	mov	r8, r3
 800cdba:	d835      	bhi.n	800ce28 <__ssputs_r+0x7e>
 800cdbc:	898a      	ldrh	r2, [r1, #12]
 800cdbe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cdc2:	d031      	beq.n	800ce28 <__ssputs_r+0x7e>
 800cdc4:	6825      	ldr	r5, [r4, #0]
 800cdc6:	6909      	ldr	r1, [r1, #16]
 800cdc8:	1a6f      	subs	r7, r5, r1
 800cdca:	6965      	ldr	r5, [r4, #20]
 800cdcc:	2302      	movs	r3, #2
 800cdce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdd2:	fb95 f5f3 	sdiv	r5, r5, r3
 800cdd6:	f108 0301 	add.w	r3, r8, #1
 800cdda:	443b      	add	r3, r7
 800cddc:	429d      	cmp	r5, r3
 800cdde:	bf38      	it	cc
 800cde0:	461d      	movcc	r5, r3
 800cde2:	0553      	lsls	r3, r2, #21
 800cde4:	d531      	bpl.n	800ce4a <__ssputs_r+0xa0>
 800cde6:	4629      	mov	r1, r5
 800cde8:	f000 fb3a 	bl	800d460 <_malloc_r>
 800cdec:	4606      	mov	r6, r0
 800cdee:	b950      	cbnz	r0, 800ce06 <__ssputs_r+0x5c>
 800cdf0:	230c      	movs	r3, #12
 800cdf2:	f8ca 3000 	str.w	r3, [sl]
 800cdf6:	89a3      	ldrh	r3, [r4, #12]
 800cdf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdfc:	81a3      	strh	r3, [r4, #12]
 800cdfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ce02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce06:	463a      	mov	r2, r7
 800ce08:	6921      	ldr	r1, [r4, #16]
 800ce0a:	f7ff fec5 	bl	800cb98 <memcpy>
 800ce0e:	89a3      	ldrh	r3, [r4, #12]
 800ce10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce18:	81a3      	strh	r3, [r4, #12]
 800ce1a:	6126      	str	r6, [r4, #16]
 800ce1c:	6165      	str	r5, [r4, #20]
 800ce1e:	443e      	add	r6, r7
 800ce20:	1bed      	subs	r5, r5, r7
 800ce22:	6026      	str	r6, [r4, #0]
 800ce24:	60a5      	str	r5, [r4, #8]
 800ce26:	4646      	mov	r6, r8
 800ce28:	4546      	cmp	r6, r8
 800ce2a:	bf28      	it	cs
 800ce2c:	4646      	movcs	r6, r8
 800ce2e:	4632      	mov	r2, r6
 800ce30:	4649      	mov	r1, r9
 800ce32:	6820      	ldr	r0, [r4, #0]
 800ce34:	f000 faab 	bl	800d38e <memmove>
 800ce38:	68a3      	ldr	r3, [r4, #8]
 800ce3a:	1b9b      	subs	r3, r3, r6
 800ce3c:	60a3      	str	r3, [r4, #8]
 800ce3e:	6823      	ldr	r3, [r4, #0]
 800ce40:	441e      	add	r6, r3
 800ce42:	6026      	str	r6, [r4, #0]
 800ce44:	2000      	movs	r0, #0
 800ce46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce4a:	462a      	mov	r2, r5
 800ce4c:	f000 fb66 	bl	800d51c <_realloc_r>
 800ce50:	4606      	mov	r6, r0
 800ce52:	2800      	cmp	r0, #0
 800ce54:	d1e1      	bne.n	800ce1a <__ssputs_r+0x70>
 800ce56:	6921      	ldr	r1, [r4, #16]
 800ce58:	4650      	mov	r0, sl
 800ce5a:	f000 fab3 	bl	800d3c4 <_free_r>
 800ce5e:	e7c7      	b.n	800cdf0 <__ssputs_r+0x46>

0800ce60 <_svfiprintf_r>:
 800ce60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce64:	b09d      	sub	sp, #116	; 0x74
 800ce66:	4680      	mov	r8, r0
 800ce68:	9303      	str	r3, [sp, #12]
 800ce6a:	898b      	ldrh	r3, [r1, #12]
 800ce6c:	061c      	lsls	r4, r3, #24
 800ce6e:	460d      	mov	r5, r1
 800ce70:	4616      	mov	r6, r2
 800ce72:	d50f      	bpl.n	800ce94 <_svfiprintf_r+0x34>
 800ce74:	690b      	ldr	r3, [r1, #16]
 800ce76:	b96b      	cbnz	r3, 800ce94 <_svfiprintf_r+0x34>
 800ce78:	2140      	movs	r1, #64	; 0x40
 800ce7a:	f000 faf1 	bl	800d460 <_malloc_r>
 800ce7e:	6028      	str	r0, [r5, #0]
 800ce80:	6128      	str	r0, [r5, #16]
 800ce82:	b928      	cbnz	r0, 800ce90 <_svfiprintf_r+0x30>
 800ce84:	230c      	movs	r3, #12
 800ce86:	f8c8 3000 	str.w	r3, [r8]
 800ce8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce8e:	e0c5      	b.n	800d01c <_svfiprintf_r+0x1bc>
 800ce90:	2340      	movs	r3, #64	; 0x40
 800ce92:	616b      	str	r3, [r5, #20]
 800ce94:	2300      	movs	r3, #0
 800ce96:	9309      	str	r3, [sp, #36]	; 0x24
 800ce98:	2320      	movs	r3, #32
 800ce9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce9e:	2330      	movs	r3, #48	; 0x30
 800cea0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cea4:	f04f 0b01 	mov.w	fp, #1
 800cea8:	4637      	mov	r7, r6
 800ceaa:	463c      	mov	r4, r7
 800ceac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d13c      	bne.n	800cf2e <_svfiprintf_r+0xce>
 800ceb4:	ebb7 0a06 	subs.w	sl, r7, r6
 800ceb8:	d00b      	beq.n	800ced2 <_svfiprintf_r+0x72>
 800ceba:	4653      	mov	r3, sl
 800cebc:	4632      	mov	r2, r6
 800cebe:	4629      	mov	r1, r5
 800cec0:	4640      	mov	r0, r8
 800cec2:	f7ff ff72 	bl	800cdaa <__ssputs_r>
 800cec6:	3001      	adds	r0, #1
 800cec8:	f000 80a3 	beq.w	800d012 <_svfiprintf_r+0x1b2>
 800cecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cece:	4453      	add	r3, sl
 800ced0:	9309      	str	r3, [sp, #36]	; 0x24
 800ced2:	783b      	ldrb	r3, [r7, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	f000 809c 	beq.w	800d012 <_svfiprintf_r+0x1b2>
 800ceda:	2300      	movs	r3, #0
 800cedc:	f04f 32ff 	mov.w	r2, #4294967295
 800cee0:	9304      	str	r3, [sp, #16]
 800cee2:	9307      	str	r3, [sp, #28]
 800cee4:	9205      	str	r2, [sp, #20]
 800cee6:	9306      	str	r3, [sp, #24]
 800cee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ceec:	931a      	str	r3, [sp, #104]	; 0x68
 800ceee:	2205      	movs	r2, #5
 800cef0:	7821      	ldrb	r1, [r4, #0]
 800cef2:	4850      	ldr	r0, [pc, #320]	; (800d034 <_svfiprintf_r+0x1d4>)
 800cef4:	f7f3 f97c 	bl	80001f0 <memchr>
 800cef8:	1c67      	adds	r7, r4, #1
 800cefa:	9b04      	ldr	r3, [sp, #16]
 800cefc:	b9d8      	cbnz	r0, 800cf36 <_svfiprintf_r+0xd6>
 800cefe:	06d9      	lsls	r1, r3, #27
 800cf00:	bf44      	itt	mi
 800cf02:	2220      	movmi	r2, #32
 800cf04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cf08:	071a      	lsls	r2, r3, #28
 800cf0a:	bf44      	itt	mi
 800cf0c:	222b      	movmi	r2, #43	; 0x2b
 800cf0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cf12:	7822      	ldrb	r2, [r4, #0]
 800cf14:	2a2a      	cmp	r2, #42	; 0x2a
 800cf16:	d016      	beq.n	800cf46 <_svfiprintf_r+0xe6>
 800cf18:	9a07      	ldr	r2, [sp, #28]
 800cf1a:	2100      	movs	r1, #0
 800cf1c:	200a      	movs	r0, #10
 800cf1e:	4627      	mov	r7, r4
 800cf20:	3401      	adds	r4, #1
 800cf22:	783b      	ldrb	r3, [r7, #0]
 800cf24:	3b30      	subs	r3, #48	; 0x30
 800cf26:	2b09      	cmp	r3, #9
 800cf28:	d951      	bls.n	800cfce <_svfiprintf_r+0x16e>
 800cf2a:	b1c9      	cbz	r1, 800cf60 <_svfiprintf_r+0x100>
 800cf2c:	e011      	b.n	800cf52 <_svfiprintf_r+0xf2>
 800cf2e:	2b25      	cmp	r3, #37	; 0x25
 800cf30:	d0c0      	beq.n	800ceb4 <_svfiprintf_r+0x54>
 800cf32:	4627      	mov	r7, r4
 800cf34:	e7b9      	b.n	800ceaa <_svfiprintf_r+0x4a>
 800cf36:	4a3f      	ldr	r2, [pc, #252]	; (800d034 <_svfiprintf_r+0x1d4>)
 800cf38:	1a80      	subs	r0, r0, r2
 800cf3a:	fa0b f000 	lsl.w	r0, fp, r0
 800cf3e:	4318      	orrs	r0, r3
 800cf40:	9004      	str	r0, [sp, #16]
 800cf42:	463c      	mov	r4, r7
 800cf44:	e7d3      	b.n	800ceee <_svfiprintf_r+0x8e>
 800cf46:	9a03      	ldr	r2, [sp, #12]
 800cf48:	1d11      	adds	r1, r2, #4
 800cf4a:	6812      	ldr	r2, [r2, #0]
 800cf4c:	9103      	str	r1, [sp, #12]
 800cf4e:	2a00      	cmp	r2, #0
 800cf50:	db01      	blt.n	800cf56 <_svfiprintf_r+0xf6>
 800cf52:	9207      	str	r2, [sp, #28]
 800cf54:	e004      	b.n	800cf60 <_svfiprintf_r+0x100>
 800cf56:	4252      	negs	r2, r2
 800cf58:	f043 0302 	orr.w	r3, r3, #2
 800cf5c:	9207      	str	r2, [sp, #28]
 800cf5e:	9304      	str	r3, [sp, #16]
 800cf60:	783b      	ldrb	r3, [r7, #0]
 800cf62:	2b2e      	cmp	r3, #46	; 0x2e
 800cf64:	d10e      	bne.n	800cf84 <_svfiprintf_r+0x124>
 800cf66:	787b      	ldrb	r3, [r7, #1]
 800cf68:	2b2a      	cmp	r3, #42	; 0x2a
 800cf6a:	f107 0101 	add.w	r1, r7, #1
 800cf6e:	d132      	bne.n	800cfd6 <_svfiprintf_r+0x176>
 800cf70:	9b03      	ldr	r3, [sp, #12]
 800cf72:	1d1a      	adds	r2, r3, #4
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	9203      	str	r2, [sp, #12]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	bfb8      	it	lt
 800cf7c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf80:	3702      	adds	r7, #2
 800cf82:	9305      	str	r3, [sp, #20]
 800cf84:	4c2c      	ldr	r4, [pc, #176]	; (800d038 <_svfiprintf_r+0x1d8>)
 800cf86:	7839      	ldrb	r1, [r7, #0]
 800cf88:	2203      	movs	r2, #3
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	f7f3 f930 	bl	80001f0 <memchr>
 800cf90:	b138      	cbz	r0, 800cfa2 <_svfiprintf_r+0x142>
 800cf92:	2340      	movs	r3, #64	; 0x40
 800cf94:	1b00      	subs	r0, r0, r4
 800cf96:	fa03 f000 	lsl.w	r0, r3, r0
 800cf9a:	9b04      	ldr	r3, [sp, #16]
 800cf9c:	4303      	orrs	r3, r0
 800cf9e:	9304      	str	r3, [sp, #16]
 800cfa0:	3701      	adds	r7, #1
 800cfa2:	7839      	ldrb	r1, [r7, #0]
 800cfa4:	4825      	ldr	r0, [pc, #148]	; (800d03c <_svfiprintf_r+0x1dc>)
 800cfa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfaa:	2206      	movs	r2, #6
 800cfac:	1c7e      	adds	r6, r7, #1
 800cfae:	f7f3 f91f 	bl	80001f0 <memchr>
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	d035      	beq.n	800d022 <_svfiprintf_r+0x1c2>
 800cfb6:	4b22      	ldr	r3, [pc, #136]	; (800d040 <_svfiprintf_r+0x1e0>)
 800cfb8:	b9fb      	cbnz	r3, 800cffa <_svfiprintf_r+0x19a>
 800cfba:	9b03      	ldr	r3, [sp, #12]
 800cfbc:	3307      	adds	r3, #7
 800cfbe:	f023 0307 	bic.w	r3, r3, #7
 800cfc2:	3308      	adds	r3, #8
 800cfc4:	9303      	str	r3, [sp, #12]
 800cfc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfc8:	444b      	add	r3, r9
 800cfca:	9309      	str	r3, [sp, #36]	; 0x24
 800cfcc:	e76c      	b.n	800cea8 <_svfiprintf_r+0x48>
 800cfce:	fb00 3202 	mla	r2, r0, r2, r3
 800cfd2:	2101      	movs	r1, #1
 800cfd4:	e7a3      	b.n	800cf1e <_svfiprintf_r+0xbe>
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	9305      	str	r3, [sp, #20]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	240a      	movs	r4, #10
 800cfde:	460f      	mov	r7, r1
 800cfe0:	3101      	adds	r1, #1
 800cfe2:	783a      	ldrb	r2, [r7, #0]
 800cfe4:	3a30      	subs	r2, #48	; 0x30
 800cfe6:	2a09      	cmp	r2, #9
 800cfe8:	d903      	bls.n	800cff2 <_svfiprintf_r+0x192>
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d0ca      	beq.n	800cf84 <_svfiprintf_r+0x124>
 800cfee:	9005      	str	r0, [sp, #20]
 800cff0:	e7c8      	b.n	800cf84 <_svfiprintf_r+0x124>
 800cff2:	fb04 2000 	mla	r0, r4, r0, r2
 800cff6:	2301      	movs	r3, #1
 800cff8:	e7f1      	b.n	800cfde <_svfiprintf_r+0x17e>
 800cffa:	ab03      	add	r3, sp, #12
 800cffc:	9300      	str	r3, [sp, #0]
 800cffe:	462a      	mov	r2, r5
 800d000:	4b10      	ldr	r3, [pc, #64]	; (800d044 <_svfiprintf_r+0x1e4>)
 800d002:	a904      	add	r1, sp, #16
 800d004:	4640      	mov	r0, r8
 800d006:	f3af 8000 	nop.w
 800d00a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d00e:	4681      	mov	r9, r0
 800d010:	d1d9      	bne.n	800cfc6 <_svfiprintf_r+0x166>
 800d012:	89ab      	ldrh	r3, [r5, #12]
 800d014:	065b      	lsls	r3, r3, #25
 800d016:	f53f af38 	bmi.w	800ce8a <_svfiprintf_r+0x2a>
 800d01a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d01c:	b01d      	add	sp, #116	; 0x74
 800d01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d022:	ab03      	add	r3, sp, #12
 800d024:	9300      	str	r3, [sp, #0]
 800d026:	462a      	mov	r2, r5
 800d028:	4b06      	ldr	r3, [pc, #24]	; (800d044 <_svfiprintf_r+0x1e4>)
 800d02a:	a904      	add	r1, sp, #16
 800d02c:	4640      	mov	r0, r8
 800d02e:	f000 f881 	bl	800d134 <_printf_i>
 800d032:	e7ea      	b.n	800d00a <_svfiprintf_r+0x1aa>
 800d034:	0800d70e 	.word	0x0800d70e
 800d038:	0800d714 	.word	0x0800d714
 800d03c:	0800d718 	.word	0x0800d718
 800d040:	00000000 	.word	0x00000000
 800d044:	0800cdab 	.word	0x0800cdab

0800d048 <_printf_common>:
 800d048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d04c:	4691      	mov	r9, r2
 800d04e:	461f      	mov	r7, r3
 800d050:	688a      	ldr	r2, [r1, #8]
 800d052:	690b      	ldr	r3, [r1, #16]
 800d054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d058:	4293      	cmp	r3, r2
 800d05a:	bfb8      	it	lt
 800d05c:	4613      	movlt	r3, r2
 800d05e:	f8c9 3000 	str.w	r3, [r9]
 800d062:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d066:	4606      	mov	r6, r0
 800d068:	460c      	mov	r4, r1
 800d06a:	b112      	cbz	r2, 800d072 <_printf_common+0x2a>
 800d06c:	3301      	adds	r3, #1
 800d06e:	f8c9 3000 	str.w	r3, [r9]
 800d072:	6823      	ldr	r3, [r4, #0]
 800d074:	0699      	lsls	r1, r3, #26
 800d076:	bf42      	ittt	mi
 800d078:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d07c:	3302      	addmi	r3, #2
 800d07e:	f8c9 3000 	strmi.w	r3, [r9]
 800d082:	6825      	ldr	r5, [r4, #0]
 800d084:	f015 0506 	ands.w	r5, r5, #6
 800d088:	d107      	bne.n	800d09a <_printf_common+0x52>
 800d08a:	f104 0a19 	add.w	sl, r4, #25
 800d08e:	68e3      	ldr	r3, [r4, #12]
 800d090:	f8d9 2000 	ldr.w	r2, [r9]
 800d094:	1a9b      	subs	r3, r3, r2
 800d096:	429d      	cmp	r5, r3
 800d098:	db29      	blt.n	800d0ee <_printf_common+0xa6>
 800d09a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d09e:	6822      	ldr	r2, [r4, #0]
 800d0a0:	3300      	adds	r3, #0
 800d0a2:	bf18      	it	ne
 800d0a4:	2301      	movne	r3, #1
 800d0a6:	0692      	lsls	r2, r2, #26
 800d0a8:	d42e      	bmi.n	800d108 <_printf_common+0xc0>
 800d0aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0ae:	4639      	mov	r1, r7
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	47c0      	blx	r8
 800d0b4:	3001      	adds	r0, #1
 800d0b6:	d021      	beq.n	800d0fc <_printf_common+0xb4>
 800d0b8:	6823      	ldr	r3, [r4, #0]
 800d0ba:	68e5      	ldr	r5, [r4, #12]
 800d0bc:	f8d9 2000 	ldr.w	r2, [r9]
 800d0c0:	f003 0306 	and.w	r3, r3, #6
 800d0c4:	2b04      	cmp	r3, #4
 800d0c6:	bf08      	it	eq
 800d0c8:	1aad      	subeq	r5, r5, r2
 800d0ca:	68a3      	ldr	r3, [r4, #8]
 800d0cc:	6922      	ldr	r2, [r4, #16]
 800d0ce:	bf0c      	ite	eq
 800d0d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0d4:	2500      	movne	r5, #0
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	bfc4      	itt	gt
 800d0da:	1a9b      	subgt	r3, r3, r2
 800d0dc:	18ed      	addgt	r5, r5, r3
 800d0de:	f04f 0900 	mov.w	r9, #0
 800d0e2:	341a      	adds	r4, #26
 800d0e4:	454d      	cmp	r5, r9
 800d0e6:	d11b      	bne.n	800d120 <_printf_common+0xd8>
 800d0e8:	2000      	movs	r0, #0
 800d0ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	4652      	mov	r2, sl
 800d0f2:	4639      	mov	r1, r7
 800d0f4:	4630      	mov	r0, r6
 800d0f6:	47c0      	blx	r8
 800d0f8:	3001      	adds	r0, #1
 800d0fa:	d103      	bne.n	800d104 <_printf_common+0xbc>
 800d0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d104:	3501      	adds	r5, #1
 800d106:	e7c2      	b.n	800d08e <_printf_common+0x46>
 800d108:	18e1      	adds	r1, r4, r3
 800d10a:	1c5a      	adds	r2, r3, #1
 800d10c:	2030      	movs	r0, #48	; 0x30
 800d10e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d112:	4422      	add	r2, r4
 800d114:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d118:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d11c:	3302      	adds	r3, #2
 800d11e:	e7c4      	b.n	800d0aa <_printf_common+0x62>
 800d120:	2301      	movs	r3, #1
 800d122:	4622      	mov	r2, r4
 800d124:	4639      	mov	r1, r7
 800d126:	4630      	mov	r0, r6
 800d128:	47c0      	blx	r8
 800d12a:	3001      	adds	r0, #1
 800d12c:	d0e6      	beq.n	800d0fc <_printf_common+0xb4>
 800d12e:	f109 0901 	add.w	r9, r9, #1
 800d132:	e7d7      	b.n	800d0e4 <_printf_common+0x9c>

0800d134 <_printf_i>:
 800d134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d138:	4617      	mov	r7, r2
 800d13a:	7e0a      	ldrb	r2, [r1, #24]
 800d13c:	b085      	sub	sp, #20
 800d13e:	2a6e      	cmp	r2, #110	; 0x6e
 800d140:	4698      	mov	r8, r3
 800d142:	4606      	mov	r6, r0
 800d144:	460c      	mov	r4, r1
 800d146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d148:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800d14c:	f000 80bc 	beq.w	800d2c8 <_printf_i+0x194>
 800d150:	d81a      	bhi.n	800d188 <_printf_i+0x54>
 800d152:	2a63      	cmp	r2, #99	; 0x63
 800d154:	d02e      	beq.n	800d1b4 <_printf_i+0x80>
 800d156:	d80a      	bhi.n	800d16e <_printf_i+0x3a>
 800d158:	2a00      	cmp	r2, #0
 800d15a:	f000 80c8 	beq.w	800d2ee <_printf_i+0x1ba>
 800d15e:	2a58      	cmp	r2, #88	; 0x58
 800d160:	f000 808a 	beq.w	800d278 <_printf_i+0x144>
 800d164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d168:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800d16c:	e02a      	b.n	800d1c4 <_printf_i+0x90>
 800d16e:	2a64      	cmp	r2, #100	; 0x64
 800d170:	d001      	beq.n	800d176 <_printf_i+0x42>
 800d172:	2a69      	cmp	r2, #105	; 0x69
 800d174:	d1f6      	bne.n	800d164 <_printf_i+0x30>
 800d176:	6821      	ldr	r1, [r4, #0]
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800d17e:	d023      	beq.n	800d1c8 <_printf_i+0x94>
 800d180:	1d11      	adds	r1, r2, #4
 800d182:	6019      	str	r1, [r3, #0]
 800d184:	6813      	ldr	r3, [r2, #0]
 800d186:	e027      	b.n	800d1d8 <_printf_i+0xa4>
 800d188:	2a73      	cmp	r2, #115	; 0x73
 800d18a:	f000 80b4 	beq.w	800d2f6 <_printf_i+0x1c2>
 800d18e:	d808      	bhi.n	800d1a2 <_printf_i+0x6e>
 800d190:	2a6f      	cmp	r2, #111	; 0x6f
 800d192:	d02a      	beq.n	800d1ea <_printf_i+0xb6>
 800d194:	2a70      	cmp	r2, #112	; 0x70
 800d196:	d1e5      	bne.n	800d164 <_printf_i+0x30>
 800d198:	680a      	ldr	r2, [r1, #0]
 800d19a:	f042 0220 	orr.w	r2, r2, #32
 800d19e:	600a      	str	r2, [r1, #0]
 800d1a0:	e003      	b.n	800d1aa <_printf_i+0x76>
 800d1a2:	2a75      	cmp	r2, #117	; 0x75
 800d1a4:	d021      	beq.n	800d1ea <_printf_i+0xb6>
 800d1a6:	2a78      	cmp	r2, #120	; 0x78
 800d1a8:	d1dc      	bne.n	800d164 <_printf_i+0x30>
 800d1aa:	2278      	movs	r2, #120	; 0x78
 800d1ac:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800d1b0:	496e      	ldr	r1, [pc, #440]	; (800d36c <_printf_i+0x238>)
 800d1b2:	e064      	b.n	800d27e <_printf_i+0x14a>
 800d1b4:	681a      	ldr	r2, [r3, #0]
 800d1b6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800d1ba:	1d11      	adds	r1, r2, #4
 800d1bc:	6019      	str	r1, [r3, #0]
 800d1be:	6813      	ldr	r3, [r2, #0]
 800d1c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	e0a3      	b.n	800d310 <_printf_i+0x1dc>
 800d1c8:	f011 0f40 	tst.w	r1, #64	; 0x40
 800d1cc:	f102 0104 	add.w	r1, r2, #4
 800d1d0:	6019      	str	r1, [r3, #0]
 800d1d2:	d0d7      	beq.n	800d184 <_printf_i+0x50>
 800d1d4:	f9b2 3000 	ldrsh.w	r3, [r2]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	da03      	bge.n	800d1e4 <_printf_i+0xb0>
 800d1dc:	222d      	movs	r2, #45	; 0x2d
 800d1de:	425b      	negs	r3, r3
 800d1e0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d1e4:	4962      	ldr	r1, [pc, #392]	; (800d370 <_printf_i+0x23c>)
 800d1e6:	220a      	movs	r2, #10
 800d1e8:	e017      	b.n	800d21a <_printf_i+0xe6>
 800d1ea:	6820      	ldr	r0, [r4, #0]
 800d1ec:	6819      	ldr	r1, [r3, #0]
 800d1ee:	f010 0f80 	tst.w	r0, #128	; 0x80
 800d1f2:	d003      	beq.n	800d1fc <_printf_i+0xc8>
 800d1f4:	1d08      	adds	r0, r1, #4
 800d1f6:	6018      	str	r0, [r3, #0]
 800d1f8:	680b      	ldr	r3, [r1, #0]
 800d1fa:	e006      	b.n	800d20a <_printf_i+0xd6>
 800d1fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d200:	f101 0004 	add.w	r0, r1, #4
 800d204:	6018      	str	r0, [r3, #0]
 800d206:	d0f7      	beq.n	800d1f8 <_printf_i+0xc4>
 800d208:	880b      	ldrh	r3, [r1, #0]
 800d20a:	4959      	ldr	r1, [pc, #356]	; (800d370 <_printf_i+0x23c>)
 800d20c:	2a6f      	cmp	r2, #111	; 0x6f
 800d20e:	bf14      	ite	ne
 800d210:	220a      	movne	r2, #10
 800d212:	2208      	moveq	r2, #8
 800d214:	2000      	movs	r0, #0
 800d216:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800d21a:	6865      	ldr	r5, [r4, #4]
 800d21c:	60a5      	str	r5, [r4, #8]
 800d21e:	2d00      	cmp	r5, #0
 800d220:	f2c0 809c 	blt.w	800d35c <_printf_i+0x228>
 800d224:	6820      	ldr	r0, [r4, #0]
 800d226:	f020 0004 	bic.w	r0, r0, #4
 800d22a:	6020      	str	r0, [r4, #0]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d13f      	bne.n	800d2b0 <_printf_i+0x17c>
 800d230:	2d00      	cmp	r5, #0
 800d232:	f040 8095 	bne.w	800d360 <_printf_i+0x22c>
 800d236:	4675      	mov	r5, lr
 800d238:	2a08      	cmp	r2, #8
 800d23a:	d10b      	bne.n	800d254 <_printf_i+0x120>
 800d23c:	6823      	ldr	r3, [r4, #0]
 800d23e:	07da      	lsls	r2, r3, #31
 800d240:	d508      	bpl.n	800d254 <_printf_i+0x120>
 800d242:	6923      	ldr	r3, [r4, #16]
 800d244:	6862      	ldr	r2, [r4, #4]
 800d246:	429a      	cmp	r2, r3
 800d248:	bfde      	ittt	le
 800d24a:	2330      	movle	r3, #48	; 0x30
 800d24c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d250:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d254:	ebae 0305 	sub.w	r3, lr, r5
 800d258:	6123      	str	r3, [r4, #16]
 800d25a:	f8cd 8000 	str.w	r8, [sp]
 800d25e:	463b      	mov	r3, r7
 800d260:	aa03      	add	r2, sp, #12
 800d262:	4621      	mov	r1, r4
 800d264:	4630      	mov	r0, r6
 800d266:	f7ff feef 	bl	800d048 <_printf_common>
 800d26a:	3001      	adds	r0, #1
 800d26c:	d155      	bne.n	800d31a <_printf_i+0x1e6>
 800d26e:	f04f 30ff 	mov.w	r0, #4294967295
 800d272:	b005      	add	sp, #20
 800d274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d278:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800d27c:	493c      	ldr	r1, [pc, #240]	; (800d370 <_printf_i+0x23c>)
 800d27e:	6822      	ldr	r2, [r4, #0]
 800d280:	6818      	ldr	r0, [r3, #0]
 800d282:	f012 0f80 	tst.w	r2, #128	; 0x80
 800d286:	f100 0504 	add.w	r5, r0, #4
 800d28a:	601d      	str	r5, [r3, #0]
 800d28c:	d001      	beq.n	800d292 <_printf_i+0x15e>
 800d28e:	6803      	ldr	r3, [r0, #0]
 800d290:	e002      	b.n	800d298 <_printf_i+0x164>
 800d292:	0655      	lsls	r5, r2, #25
 800d294:	d5fb      	bpl.n	800d28e <_printf_i+0x15a>
 800d296:	8803      	ldrh	r3, [r0, #0]
 800d298:	07d0      	lsls	r0, r2, #31
 800d29a:	bf44      	itt	mi
 800d29c:	f042 0220 	orrmi.w	r2, r2, #32
 800d2a0:	6022      	strmi	r2, [r4, #0]
 800d2a2:	b91b      	cbnz	r3, 800d2ac <_printf_i+0x178>
 800d2a4:	6822      	ldr	r2, [r4, #0]
 800d2a6:	f022 0220 	bic.w	r2, r2, #32
 800d2aa:	6022      	str	r2, [r4, #0]
 800d2ac:	2210      	movs	r2, #16
 800d2ae:	e7b1      	b.n	800d214 <_printf_i+0xe0>
 800d2b0:	4675      	mov	r5, lr
 800d2b2:	fbb3 f0f2 	udiv	r0, r3, r2
 800d2b6:	fb02 3310 	mls	r3, r2, r0, r3
 800d2ba:	5ccb      	ldrb	r3, [r1, r3]
 800d2bc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	d1f5      	bne.n	800d2b2 <_printf_i+0x17e>
 800d2c6:	e7b7      	b.n	800d238 <_printf_i+0x104>
 800d2c8:	6808      	ldr	r0, [r1, #0]
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	6949      	ldr	r1, [r1, #20]
 800d2ce:	f010 0f80 	tst.w	r0, #128	; 0x80
 800d2d2:	d004      	beq.n	800d2de <_printf_i+0x1aa>
 800d2d4:	1d10      	adds	r0, r2, #4
 800d2d6:	6018      	str	r0, [r3, #0]
 800d2d8:	6813      	ldr	r3, [r2, #0]
 800d2da:	6019      	str	r1, [r3, #0]
 800d2dc:	e007      	b.n	800d2ee <_printf_i+0x1ba>
 800d2de:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d2e2:	f102 0004 	add.w	r0, r2, #4
 800d2e6:	6018      	str	r0, [r3, #0]
 800d2e8:	6813      	ldr	r3, [r2, #0]
 800d2ea:	d0f6      	beq.n	800d2da <_printf_i+0x1a6>
 800d2ec:	8019      	strh	r1, [r3, #0]
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	6123      	str	r3, [r4, #16]
 800d2f2:	4675      	mov	r5, lr
 800d2f4:	e7b1      	b.n	800d25a <_printf_i+0x126>
 800d2f6:	681a      	ldr	r2, [r3, #0]
 800d2f8:	1d11      	adds	r1, r2, #4
 800d2fa:	6019      	str	r1, [r3, #0]
 800d2fc:	6815      	ldr	r5, [r2, #0]
 800d2fe:	6862      	ldr	r2, [r4, #4]
 800d300:	2100      	movs	r1, #0
 800d302:	4628      	mov	r0, r5
 800d304:	f7f2 ff74 	bl	80001f0 <memchr>
 800d308:	b108      	cbz	r0, 800d30e <_printf_i+0x1da>
 800d30a:	1b40      	subs	r0, r0, r5
 800d30c:	6060      	str	r0, [r4, #4]
 800d30e:	6863      	ldr	r3, [r4, #4]
 800d310:	6123      	str	r3, [r4, #16]
 800d312:	2300      	movs	r3, #0
 800d314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d318:	e79f      	b.n	800d25a <_printf_i+0x126>
 800d31a:	6923      	ldr	r3, [r4, #16]
 800d31c:	462a      	mov	r2, r5
 800d31e:	4639      	mov	r1, r7
 800d320:	4630      	mov	r0, r6
 800d322:	47c0      	blx	r8
 800d324:	3001      	adds	r0, #1
 800d326:	d0a2      	beq.n	800d26e <_printf_i+0x13a>
 800d328:	6823      	ldr	r3, [r4, #0]
 800d32a:	079b      	lsls	r3, r3, #30
 800d32c:	d507      	bpl.n	800d33e <_printf_i+0x20a>
 800d32e:	2500      	movs	r5, #0
 800d330:	f104 0919 	add.w	r9, r4, #25
 800d334:	68e3      	ldr	r3, [r4, #12]
 800d336:	9a03      	ldr	r2, [sp, #12]
 800d338:	1a9b      	subs	r3, r3, r2
 800d33a:	429d      	cmp	r5, r3
 800d33c:	db05      	blt.n	800d34a <_printf_i+0x216>
 800d33e:	68e0      	ldr	r0, [r4, #12]
 800d340:	9b03      	ldr	r3, [sp, #12]
 800d342:	4298      	cmp	r0, r3
 800d344:	bfb8      	it	lt
 800d346:	4618      	movlt	r0, r3
 800d348:	e793      	b.n	800d272 <_printf_i+0x13e>
 800d34a:	2301      	movs	r3, #1
 800d34c:	464a      	mov	r2, r9
 800d34e:	4639      	mov	r1, r7
 800d350:	4630      	mov	r0, r6
 800d352:	47c0      	blx	r8
 800d354:	3001      	adds	r0, #1
 800d356:	d08a      	beq.n	800d26e <_printf_i+0x13a>
 800d358:	3501      	adds	r5, #1
 800d35a:	e7eb      	b.n	800d334 <_printf_i+0x200>
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d1a7      	bne.n	800d2b0 <_printf_i+0x17c>
 800d360:	780b      	ldrb	r3, [r1, #0]
 800d362:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d366:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d36a:	e765      	b.n	800d238 <_printf_i+0x104>
 800d36c:	0800d730 	.word	0x0800d730
 800d370:	0800d71f 	.word	0x0800d71f

0800d374 <__ascii_wctomb>:
 800d374:	b149      	cbz	r1, 800d38a <__ascii_wctomb+0x16>
 800d376:	2aff      	cmp	r2, #255	; 0xff
 800d378:	bf85      	ittet	hi
 800d37a:	238a      	movhi	r3, #138	; 0x8a
 800d37c:	6003      	strhi	r3, [r0, #0]
 800d37e:	700a      	strbls	r2, [r1, #0]
 800d380:	f04f 30ff 	movhi.w	r0, #4294967295
 800d384:	bf98      	it	ls
 800d386:	2001      	movls	r0, #1
 800d388:	4770      	bx	lr
 800d38a:	4608      	mov	r0, r1
 800d38c:	4770      	bx	lr

0800d38e <memmove>:
 800d38e:	4288      	cmp	r0, r1
 800d390:	b510      	push	{r4, lr}
 800d392:	eb01 0302 	add.w	r3, r1, r2
 800d396:	d803      	bhi.n	800d3a0 <memmove+0x12>
 800d398:	1e42      	subs	r2, r0, #1
 800d39a:	4299      	cmp	r1, r3
 800d39c:	d10c      	bne.n	800d3b8 <memmove+0x2a>
 800d39e:	bd10      	pop	{r4, pc}
 800d3a0:	4298      	cmp	r0, r3
 800d3a2:	d2f9      	bcs.n	800d398 <memmove+0xa>
 800d3a4:	1881      	adds	r1, r0, r2
 800d3a6:	1ad2      	subs	r2, r2, r3
 800d3a8:	42d3      	cmn	r3, r2
 800d3aa:	d100      	bne.n	800d3ae <memmove+0x20>
 800d3ac:	bd10      	pop	{r4, pc}
 800d3ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d3b6:	e7f7      	b.n	800d3a8 <memmove+0x1a>
 800d3b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3bc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d3c0:	e7eb      	b.n	800d39a <memmove+0xc>
	...

0800d3c4 <_free_r>:
 800d3c4:	b538      	push	{r3, r4, r5, lr}
 800d3c6:	4605      	mov	r5, r0
 800d3c8:	2900      	cmp	r1, #0
 800d3ca:	d045      	beq.n	800d458 <_free_r+0x94>
 800d3cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3d0:	1f0c      	subs	r4, r1, #4
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	bfb8      	it	lt
 800d3d6:	18e4      	addlt	r4, r4, r3
 800d3d8:	f000 f8d6 	bl	800d588 <__malloc_lock>
 800d3dc:	4a1f      	ldr	r2, [pc, #124]	; (800d45c <_free_r+0x98>)
 800d3de:	6813      	ldr	r3, [r2, #0]
 800d3e0:	4610      	mov	r0, r2
 800d3e2:	b933      	cbnz	r3, 800d3f2 <_free_r+0x2e>
 800d3e4:	6063      	str	r3, [r4, #4]
 800d3e6:	6014      	str	r4, [r2, #0]
 800d3e8:	4628      	mov	r0, r5
 800d3ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3ee:	f000 b8cc 	b.w	800d58a <__malloc_unlock>
 800d3f2:	42a3      	cmp	r3, r4
 800d3f4:	d90c      	bls.n	800d410 <_free_r+0x4c>
 800d3f6:	6821      	ldr	r1, [r4, #0]
 800d3f8:	1862      	adds	r2, r4, r1
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	bf04      	itt	eq
 800d3fe:	681a      	ldreq	r2, [r3, #0]
 800d400:	685b      	ldreq	r3, [r3, #4]
 800d402:	6063      	str	r3, [r4, #4]
 800d404:	bf04      	itt	eq
 800d406:	1852      	addeq	r2, r2, r1
 800d408:	6022      	streq	r2, [r4, #0]
 800d40a:	6004      	str	r4, [r0, #0]
 800d40c:	e7ec      	b.n	800d3e8 <_free_r+0x24>
 800d40e:	4613      	mov	r3, r2
 800d410:	685a      	ldr	r2, [r3, #4]
 800d412:	b10a      	cbz	r2, 800d418 <_free_r+0x54>
 800d414:	42a2      	cmp	r2, r4
 800d416:	d9fa      	bls.n	800d40e <_free_r+0x4a>
 800d418:	6819      	ldr	r1, [r3, #0]
 800d41a:	1858      	adds	r0, r3, r1
 800d41c:	42a0      	cmp	r0, r4
 800d41e:	d10b      	bne.n	800d438 <_free_r+0x74>
 800d420:	6820      	ldr	r0, [r4, #0]
 800d422:	4401      	add	r1, r0
 800d424:	1858      	adds	r0, r3, r1
 800d426:	4282      	cmp	r2, r0
 800d428:	6019      	str	r1, [r3, #0]
 800d42a:	d1dd      	bne.n	800d3e8 <_free_r+0x24>
 800d42c:	6810      	ldr	r0, [r2, #0]
 800d42e:	6852      	ldr	r2, [r2, #4]
 800d430:	605a      	str	r2, [r3, #4]
 800d432:	4401      	add	r1, r0
 800d434:	6019      	str	r1, [r3, #0]
 800d436:	e7d7      	b.n	800d3e8 <_free_r+0x24>
 800d438:	d902      	bls.n	800d440 <_free_r+0x7c>
 800d43a:	230c      	movs	r3, #12
 800d43c:	602b      	str	r3, [r5, #0]
 800d43e:	e7d3      	b.n	800d3e8 <_free_r+0x24>
 800d440:	6820      	ldr	r0, [r4, #0]
 800d442:	1821      	adds	r1, r4, r0
 800d444:	428a      	cmp	r2, r1
 800d446:	bf04      	itt	eq
 800d448:	6811      	ldreq	r1, [r2, #0]
 800d44a:	6852      	ldreq	r2, [r2, #4]
 800d44c:	6062      	str	r2, [r4, #4]
 800d44e:	bf04      	itt	eq
 800d450:	1809      	addeq	r1, r1, r0
 800d452:	6021      	streq	r1, [r4, #0]
 800d454:	605c      	str	r4, [r3, #4]
 800d456:	e7c7      	b.n	800d3e8 <_free_r+0x24>
 800d458:	bd38      	pop	{r3, r4, r5, pc}
 800d45a:	bf00      	nop
 800d45c:	2000a3cc 	.word	0x2000a3cc

0800d460 <_malloc_r>:
 800d460:	b570      	push	{r4, r5, r6, lr}
 800d462:	1ccd      	adds	r5, r1, #3
 800d464:	f025 0503 	bic.w	r5, r5, #3
 800d468:	3508      	adds	r5, #8
 800d46a:	2d0c      	cmp	r5, #12
 800d46c:	bf38      	it	cc
 800d46e:	250c      	movcc	r5, #12
 800d470:	2d00      	cmp	r5, #0
 800d472:	4606      	mov	r6, r0
 800d474:	db01      	blt.n	800d47a <_malloc_r+0x1a>
 800d476:	42a9      	cmp	r1, r5
 800d478:	d903      	bls.n	800d482 <_malloc_r+0x22>
 800d47a:	230c      	movs	r3, #12
 800d47c:	6033      	str	r3, [r6, #0]
 800d47e:	2000      	movs	r0, #0
 800d480:	bd70      	pop	{r4, r5, r6, pc}
 800d482:	f000 f881 	bl	800d588 <__malloc_lock>
 800d486:	4a23      	ldr	r2, [pc, #140]	; (800d514 <_malloc_r+0xb4>)
 800d488:	6814      	ldr	r4, [r2, #0]
 800d48a:	4621      	mov	r1, r4
 800d48c:	b991      	cbnz	r1, 800d4b4 <_malloc_r+0x54>
 800d48e:	4c22      	ldr	r4, [pc, #136]	; (800d518 <_malloc_r+0xb8>)
 800d490:	6823      	ldr	r3, [r4, #0]
 800d492:	b91b      	cbnz	r3, 800d49c <_malloc_r+0x3c>
 800d494:	4630      	mov	r0, r6
 800d496:	f000 f867 	bl	800d568 <_sbrk_r>
 800d49a:	6020      	str	r0, [r4, #0]
 800d49c:	4629      	mov	r1, r5
 800d49e:	4630      	mov	r0, r6
 800d4a0:	f000 f862 	bl	800d568 <_sbrk_r>
 800d4a4:	1c43      	adds	r3, r0, #1
 800d4a6:	d126      	bne.n	800d4f6 <_malloc_r+0x96>
 800d4a8:	230c      	movs	r3, #12
 800d4aa:	6033      	str	r3, [r6, #0]
 800d4ac:	4630      	mov	r0, r6
 800d4ae:	f000 f86c 	bl	800d58a <__malloc_unlock>
 800d4b2:	e7e4      	b.n	800d47e <_malloc_r+0x1e>
 800d4b4:	680b      	ldr	r3, [r1, #0]
 800d4b6:	1b5b      	subs	r3, r3, r5
 800d4b8:	d41a      	bmi.n	800d4f0 <_malloc_r+0x90>
 800d4ba:	2b0b      	cmp	r3, #11
 800d4bc:	d90f      	bls.n	800d4de <_malloc_r+0x7e>
 800d4be:	600b      	str	r3, [r1, #0]
 800d4c0:	50cd      	str	r5, [r1, r3]
 800d4c2:	18cc      	adds	r4, r1, r3
 800d4c4:	4630      	mov	r0, r6
 800d4c6:	f000 f860 	bl	800d58a <__malloc_unlock>
 800d4ca:	f104 000b 	add.w	r0, r4, #11
 800d4ce:	1d23      	adds	r3, r4, #4
 800d4d0:	f020 0007 	bic.w	r0, r0, #7
 800d4d4:	1ac3      	subs	r3, r0, r3
 800d4d6:	d01b      	beq.n	800d510 <_malloc_r+0xb0>
 800d4d8:	425a      	negs	r2, r3
 800d4da:	50e2      	str	r2, [r4, r3]
 800d4dc:	bd70      	pop	{r4, r5, r6, pc}
 800d4de:	428c      	cmp	r4, r1
 800d4e0:	bf0d      	iteet	eq
 800d4e2:	6863      	ldreq	r3, [r4, #4]
 800d4e4:	684b      	ldrne	r3, [r1, #4]
 800d4e6:	6063      	strne	r3, [r4, #4]
 800d4e8:	6013      	streq	r3, [r2, #0]
 800d4ea:	bf18      	it	ne
 800d4ec:	460c      	movne	r4, r1
 800d4ee:	e7e9      	b.n	800d4c4 <_malloc_r+0x64>
 800d4f0:	460c      	mov	r4, r1
 800d4f2:	6849      	ldr	r1, [r1, #4]
 800d4f4:	e7ca      	b.n	800d48c <_malloc_r+0x2c>
 800d4f6:	1cc4      	adds	r4, r0, #3
 800d4f8:	f024 0403 	bic.w	r4, r4, #3
 800d4fc:	42a0      	cmp	r0, r4
 800d4fe:	d005      	beq.n	800d50c <_malloc_r+0xac>
 800d500:	1a21      	subs	r1, r4, r0
 800d502:	4630      	mov	r0, r6
 800d504:	f000 f830 	bl	800d568 <_sbrk_r>
 800d508:	3001      	adds	r0, #1
 800d50a:	d0cd      	beq.n	800d4a8 <_malloc_r+0x48>
 800d50c:	6025      	str	r5, [r4, #0]
 800d50e:	e7d9      	b.n	800d4c4 <_malloc_r+0x64>
 800d510:	bd70      	pop	{r4, r5, r6, pc}
 800d512:	bf00      	nop
 800d514:	2000a3cc 	.word	0x2000a3cc
 800d518:	2000a3d0 	.word	0x2000a3d0

0800d51c <_realloc_r>:
 800d51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d51e:	4607      	mov	r7, r0
 800d520:	4614      	mov	r4, r2
 800d522:	460e      	mov	r6, r1
 800d524:	b921      	cbnz	r1, 800d530 <_realloc_r+0x14>
 800d526:	4611      	mov	r1, r2
 800d528:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d52c:	f7ff bf98 	b.w	800d460 <_malloc_r>
 800d530:	b922      	cbnz	r2, 800d53c <_realloc_r+0x20>
 800d532:	f7ff ff47 	bl	800d3c4 <_free_r>
 800d536:	4625      	mov	r5, r4
 800d538:	4628      	mov	r0, r5
 800d53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d53c:	f000 f826 	bl	800d58c <_malloc_usable_size_r>
 800d540:	4284      	cmp	r4, r0
 800d542:	d90f      	bls.n	800d564 <_realloc_r+0x48>
 800d544:	4621      	mov	r1, r4
 800d546:	4638      	mov	r0, r7
 800d548:	f7ff ff8a 	bl	800d460 <_malloc_r>
 800d54c:	4605      	mov	r5, r0
 800d54e:	2800      	cmp	r0, #0
 800d550:	d0f2      	beq.n	800d538 <_realloc_r+0x1c>
 800d552:	4631      	mov	r1, r6
 800d554:	4622      	mov	r2, r4
 800d556:	f7ff fb1f 	bl	800cb98 <memcpy>
 800d55a:	4631      	mov	r1, r6
 800d55c:	4638      	mov	r0, r7
 800d55e:	f7ff ff31 	bl	800d3c4 <_free_r>
 800d562:	e7e9      	b.n	800d538 <_realloc_r+0x1c>
 800d564:	4635      	mov	r5, r6
 800d566:	e7e7      	b.n	800d538 <_realloc_r+0x1c>

0800d568 <_sbrk_r>:
 800d568:	b538      	push	{r3, r4, r5, lr}
 800d56a:	4c06      	ldr	r4, [pc, #24]	; (800d584 <_sbrk_r+0x1c>)
 800d56c:	2300      	movs	r3, #0
 800d56e:	4605      	mov	r5, r0
 800d570:	4608      	mov	r0, r1
 800d572:	6023      	str	r3, [r4, #0]
 800d574:	f000 f814 	bl	800d5a0 <_sbrk>
 800d578:	1c43      	adds	r3, r0, #1
 800d57a:	d102      	bne.n	800d582 <_sbrk_r+0x1a>
 800d57c:	6823      	ldr	r3, [r4, #0]
 800d57e:	b103      	cbz	r3, 800d582 <_sbrk_r+0x1a>
 800d580:	602b      	str	r3, [r5, #0]
 800d582:	bd38      	pop	{r3, r4, r5, pc}
 800d584:	2000c090 	.word	0x2000c090

0800d588 <__malloc_lock>:
 800d588:	4770      	bx	lr

0800d58a <__malloc_unlock>:
 800d58a:	4770      	bx	lr

0800d58c <_malloc_usable_size_r>:
 800d58c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800d590:	2800      	cmp	r0, #0
 800d592:	f1a0 0004 	sub.w	r0, r0, #4
 800d596:	bfbc      	itt	lt
 800d598:	580b      	ldrlt	r3, [r1, r0]
 800d59a:	18c0      	addlt	r0, r0, r3
 800d59c:	4770      	bx	lr
	...

0800d5a0 <_sbrk>:
 800d5a0:	4b04      	ldr	r3, [pc, #16]	; (800d5b4 <_sbrk+0x14>)
 800d5a2:	6819      	ldr	r1, [r3, #0]
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	b909      	cbnz	r1, 800d5ac <_sbrk+0xc>
 800d5a8:	4903      	ldr	r1, [pc, #12]	; (800d5b8 <_sbrk+0x18>)
 800d5aa:	6019      	str	r1, [r3, #0]
 800d5ac:	6818      	ldr	r0, [r3, #0]
 800d5ae:	4402      	add	r2, r0
 800d5b0:	601a      	str	r2, [r3, #0]
 800d5b2:	4770      	bx	lr
 800d5b4:	2000a3d4 	.word	0x2000a3d4
 800d5b8:	2000c094 	.word	0x2000c094

0800d5bc <_init>:
 800d5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5be:	bf00      	nop
 800d5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5c2:	bc08      	pop	{r3}
 800d5c4:	469e      	mov	lr, r3
 800d5c6:	4770      	bx	lr

0800d5c8 <_fini>:
 800d5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ca:	bf00      	nop
 800d5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ce:	bc08      	pop	{r3}
 800d5d0:	469e      	mov	lr, r3
 800d5d2:	4770      	bx	lr
