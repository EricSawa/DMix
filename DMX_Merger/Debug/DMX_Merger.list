
DMX_Merger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800d670  0800d670  0001d670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d8e0  0800d8e0  0001d8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d8e8  0800d8e8  0001d8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d8ec  0800d8ec  0001d8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000014c4  20000000  0800d8f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000abd0  200014c4  0800edb4  000214c4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000c094  0800edb4  0002c094  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000214c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a268  00000000  00000000  000214f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000675e  00000000  00000000  0005b75c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001f68  00000000  00000000  00061ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001c68  00000000  00000000  00063e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010ca0  00000000  00000000  00065a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00008f30  00000000  00000000  00076730  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007f660  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000841c  00000000  00000000  0007f6dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200014c4 	.word	0x200014c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d658 	.word	0x0800d658

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200014c8 	.word	0x200014c8
 80001dc:	0800d658 	.word	0x0800d658

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <app_btn_init>:
static void getOthSwitches(eal_task_Task *self);
static void debounceOthSwitches(eal_task_Task *self);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_btn_init(eal_task_Task *self){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	memset(othButtonState, 0, sizeof(othButtonState));
 80005a8:	2205      	movs	r2, #5
 80005aa:	2100      	movs	r1, #0
 80005ac:	480d      	ldr	r0, [pc, #52]	; (80005e4 <app_btn_init+0x44>)
 80005ae:	f00c fb4c 	bl	800cc4a <memset>
	memset(othButtonBuffer, 0, sizeof(othButtonBuffer));
 80005b2:	2205      	movs	r2, #5
 80005b4:	2100      	movs	r1, #0
 80005b6:	480c      	ldr	r0, [pc, #48]	; (80005e8 <app_btn_init+0x48>)
 80005b8:	f00c fb47 	bl	800cc4a <memset>
	memset(othButtonTime, 0, sizeof(othButtonTime));
 80005bc:	220a      	movs	r2, #10
 80005be:	2100      	movs	r1, #0
 80005c0:	480a      	ldr	r0, [pc, #40]	; (80005ec <app_btn_init+0x4c>)
 80005c2:	f00c fb42 	bl	800cc4a <memset>
	memset(othButtonHoldTimeShort, 0, sizeof(othButtonHoldTimeShort));
 80005c6:	220a      	movs	r2, #10
 80005c8:	2100      	movs	r1, #0
 80005ca:	4809      	ldr	r0, [pc, #36]	; (80005f0 <app_btn_init+0x50>)
 80005cc:	f00c fb3d 	bl	800cc4a <memset>
	memset(othButtonHoldTimeLong, 0, sizeof(othButtonHoldTimeLong));
 80005d0:	220a      	movs	r2, #10
 80005d2:	2100      	movs	r1, #0
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <app_btn_init+0x54>)
 80005d6:	f00c fb38 	bl	800cc4a <memset>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200014e0 	.word	0x200014e0
 80005e8:	200014e8 	.word	0x200014e8
 80005ec:	200014f0 	.word	0x200014f0
 80005f0:	200014fc 	.word	0x200014fc
 80005f4:	20001508 	.word	0x20001508

080005f8 <app_btn_process>:

void app_btn_process(eal_task_Task *self){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	f083 0301 	eor.w	r3, r3, #1
 8000608:	b2db      	uxtb	r3, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	d111      	bne.n	8000632 <app_btn_process+0x3a>
	if(!cyclicFlag) return;
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <app_btn_process+0x48>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	f083 0301 	eor.w	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d10b      	bne.n	8000636 <app_btn_process+0x3e>
	getOthSwitches(self);
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f83e 	bl	80006a0 <getOthSwitches>
	debounceOthSwitches(self);
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f8b9 	bl	800079c <debounceOthSwitches>
	cyclicFlag = false;
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <app_btn_process+0x48>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	e002      	b.n	8000638 <app_btn_process+0x40>
	if(!self->enable) return;
 8000632:	bf00      	nop
 8000634:	e000      	b.n	8000638 <app_btn_process+0x40>
	if(!cyclicFlag) return;
 8000636:	bf00      	nop
}
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20001512 	.word	0x20001512

08000644 <app_btn_cyclic1ms>:

void app_btn_cyclic1ms(eal_task_Task *self, bool stat){
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <app_btn_cyclic1ms+0x3c>)
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
	if(internalTimer > 0)--internalTimer;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <app_btn_cyclic1ms+0x40>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	b21b      	sxth	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	dd08      	ble.n	8000672 <app_btn_cyclic1ms+0x2e>
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <app_btn_cyclic1ms+0x40>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	b21b      	sxth	r3, r3
 8000666:	b29b      	uxth	r3, r3
 8000668:	3b01      	subs	r3, #1
 800066a:	b29b      	uxth	r3, r3
 800066c:	b21a      	sxth	r2, r3
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <app_btn_cyclic1ms+0x40>)
 8000670:	801a      	strh	r2, [r3, #0]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20001512 	.word	0x20001512
 8000684:	20001514 	.word	0x20001514

08000688 <app_btn_receiveMsg>:

void app_btn_receiveMsg(eal_task_Task *self, msg_Message *message){
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]

}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
	...

080006a0 <getOthSwitches>:

/* Helper ----------------------------------------------------------------------*/
static void getOthSwitches(eal_task_Task *self){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(I_SW2_GPIO_Port, I_SW2_Pin) == 0) 		othButtonBuffer[0] |= (1 << 0); else othButtonBuffer[0] &= ~(1 << 0);
 80006a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f003 f98e 	bl	80039d0 <HAL_GPIO_ReadPin>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d107      	bne.n	80006ca <getOthSwitches+0x2a>
 80006ba:	4b37      	ldr	r3, [pc, #220]	; (8000798 <getOthSwitches+0xf8>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b34      	ldr	r3, [pc, #208]	; (8000798 <getOthSwitches+0xf8>)
 80006c6:	701a      	strb	r2, [r3, #0]
 80006c8:	e006      	b.n	80006d8 <getOthSwitches+0x38>
 80006ca:	4b33      	ldr	r3, [pc, #204]	; (8000798 <getOthSwitches+0xf8>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	f023 0301 	bic.w	r3, r3, #1
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b30      	ldr	r3, [pc, #192]	; (8000798 <getOthSwitches+0xf8>)
 80006d6:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO1_GPIO_Port, I_GPIO1_Pin) == 0) 	othButtonBuffer[0] |= (1 << 1); else othButtonBuffer[0] &= ~(1 << 1);
 80006d8:	2110      	movs	r1, #16
 80006da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006de:	f003 f977 	bl	80039d0 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d107      	bne.n	80006f8 <getOthSwitches+0x58>
 80006e8:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <getOthSwitches+0xf8>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b29      	ldr	r3, [pc, #164]	; (8000798 <getOthSwitches+0xf8>)
 80006f4:	701a      	strb	r2, [r3, #0]
 80006f6:	e006      	b.n	8000706 <getOthSwitches+0x66>
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <getOthSwitches+0xf8>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	f023 0302 	bic.w	r3, r3, #2
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b25      	ldr	r3, [pc, #148]	; (8000798 <getOthSwitches+0xf8>)
 8000704:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO2_GPIO_Port, I_GPIO2_Pin) == 0) 	othButtonBuffer[0] |= (1 << 2); else othButtonBuffer[0] &= ~(1 << 2);
 8000706:	2120      	movs	r1, #32
 8000708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070c:	f003 f960 	bl	80039d0 <HAL_GPIO_ReadPin>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d107      	bne.n	8000726 <getOthSwitches+0x86>
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <getOthSwitches+0xf8>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	f043 0304 	orr.w	r3, r3, #4
 800071e:	b2da      	uxtb	r2, r3
 8000720:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <getOthSwitches+0xf8>)
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	e006      	b.n	8000734 <getOthSwitches+0x94>
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <getOthSwitches+0xf8>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	f023 0304 	bic.w	r3, r3, #4
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b19      	ldr	r3, [pc, #100]	; (8000798 <getOthSwitches+0xf8>)
 8000732:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO3_GPIO_Port, I_GPIO3_Pin) == 0) 	othButtonBuffer[0] |= (1 << 3); else othButtonBuffer[0] &= ~(1 << 3);
 8000734:	2140      	movs	r1, #64	; 0x40
 8000736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073a:	f003 f949 	bl	80039d0 <HAL_GPIO_ReadPin>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d107      	bne.n	8000754 <getOthSwitches+0xb4>
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <getOthSwitches+0xf8>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <getOthSwitches+0xf8>)
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	e006      	b.n	8000762 <getOthSwitches+0xc2>
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <getOthSwitches+0xf8>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	f023 0308 	bic.w	r3, r3, #8
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <getOthSwitches+0xf8>)
 8000760:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO4_GPIO_Port, I_GPIO4_Pin) == 0) 	othButtonBuffer[0] |= (1 << 4); else othButtonBuffer[0] &= ~(1 << 4);
 8000762:	2180      	movs	r1, #128	; 0x80
 8000764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000768:	f003 f932 	bl	80039d0 <HAL_GPIO_ReadPin>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d107      	bne.n	8000782 <getOthSwitches+0xe2>
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <getOthSwitches+0xf8>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	f043 0310 	orr.w	r3, r3, #16
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <getOthSwitches+0xf8>)
 800077e:	701a      	strb	r2, [r3, #0]

}
 8000780:	e006      	b.n	8000790 <getOthSwitches+0xf0>
	if(HAL_GPIO_ReadPin(I_GPIO4_GPIO_Port, I_GPIO4_Pin) == 0) 	othButtonBuffer[0] |= (1 << 4); else othButtonBuffer[0] &= ~(1 << 4);
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <getOthSwitches+0xf8>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	f023 0310 	bic.w	r3, r3, #16
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b02      	ldr	r3, [pc, #8]	; (8000798 <getOthSwitches+0xf8>)
 800078e:	701a      	strb	r2, [r3, #0]
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200014e8 	.word	0x200014e8

0800079c <debounceOthSwitches>:

static void debounceOthSwitches(eal_task_Task *self){
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	; 0x30
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	static uint8_t swNmbr = 0;
	if(swIndex[swNmbr] != app_btn_NONE){
 80007a4:	4ba3      	ldr	r3, [pc, #652]	; (8000a34 <debounceOthSwitches+0x298>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4ba3      	ldr	r3, [pc, #652]	; (8000a38 <debounceOthSwitches+0x29c>)
 80007ac:	5c9b      	ldrb	r3, [r3, r2]
 80007ae:	2bff      	cmp	r3, #255	; 0xff
 80007b0:	f000 812f 	beq.w	8000a12 <debounceOthSwitches+0x276>
		uint16_t msk = 1 << (swIndex[swNmbr]&0xf);
 80007b4:	4b9f      	ldr	r3, [pc, #636]	; (8000a34 <debounceOthSwitches+0x298>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b9f      	ldr	r3, [pc, #636]	; (8000a38 <debounceOthSwitches+0x29c>)
 80007bc:	5c9b      	ldrb	r3, [r3, r2]
 80007be:	f003 030f 	and.w	r3, r3, #15
 80007c2:	2201      	movs	r2, #1
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint8_t  idx = (swIndex[swNmbr]&0xf0) >> 4;
 80007ca:	4b9a      	ldr	r3, [pc, #616]	; (8000a34 <debounceOthSwitches+0x298>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b99      	ldr	r3, [pc, #612]	; (8000a38 <debounceOthSwitches+0x29c>)
 80007d2:	5c9b      	ldrb	r3, [r3, r2]
 80007d4:	091b      	lsrs	r3, r3, #4
 80007d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (!(othButtonBuffer[idx] & msk)){ 			/*button is released*/
 80007da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80007de:	4a97      	ldr	r2, [pc, #604]	; (8000a3c <debounceOthSwitches+0x2a0>)
 80007e0:	5cd3      	ldrb	r3, [r2, r3]
 80007e2:	461a      	mov	r2, r3
 80007e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007e6:	4013      	ands	r3, r2
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d15d      	bne.n	80008a8 <debounceOthSwitches+0x10c>
			if(othButtonTime[swNmbr] > 0){
 80007ec:	4b91      	ldr	r3, [pc, #580]	; (8000a34 <debounceOthSwitches+0x298>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b93      	ldr	r3, [pc, #588]	; (8000a40 <debounceOthSwitches+0x2a4>)
 80007f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	f000 80a4 	beq.w	8000946 <debounceOthSwitches+0x1aa>
				--othButtonTime[swNmbr];
 80007fe:	4b8d      	ldr	r3, [pc, #564]	; (8000a34 <debounceOthSwitches+0x298>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	4a8f      	ldr	r2, [pc, #572]	; (8000a40 <debounceOthSwitches+0x2a4>)
 8000804:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000808:	3a01      	subs	r2, #1
 800080a:	b291      	uxth	r1, r2
 800080c:	4a8c      	ldr	r2, [pc, #560]	; (8000a40 <debounceOthSwitches+0x2a4>)
 800080e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(othButtonTime[swNmbr] <= 0){
 8000812:	4b88      	ldr	r3, [pc, #544]	; (8000a34 <debounceOthSwitches+0x298>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	4b89      	ldr	r3, [pc, #548]	; (8000a40 <debounceOthSwitches+0x2a4>)
 800081a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800081e:	2b00      	cmp	r3, #0
 8000820:	f040 8091 	bne.w	8000946 <debounceOthSwitches+0x1aa>
					if(othButtonState[idx] & msk){
 8000824:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000828:	4a86      	ldr	r2, [pc, #536]	; (8000a44 <debounceOthSwitches+0x2a8>)
 800082a:	5cd3      	ldrb	r3, [r2, r3]
 800082c:	461a      	mov	r2, r3
 800082e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000830:	4013      	ands	r3, r2
 8000832:	2b00      	cmp	r3, #0
 8000834:	f000 8087 	beq.w	8000946 <debounceOthSwitches+0x1aa>
						if(self->sendMsg != NULL){
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d014      	beq.n	800086a <debounceOthSwitches+0xce>
							msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_RELEASED, 0, 0);
 8000840:	4b7c      	ldr	r3, [pc, #496]	; (8000a34 <debounceOthSwitches+0x298>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b29b      	uxth	r3, r3
 8000846:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000848:	2300      	movs	r3, #0
 800084a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800084c:	2342      	movs	r3, #66	; 0x42
 800084e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000852:	2300      	movs	r3, #0
 8000854:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000858:	2300      	movs	r3, #0
 800085a:	857b      	strh	r3, [r7, #42]	; 0x2a
							self->sendMsg(self, &newMessage);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	695b      	ldr	r3, [r3, #20]
 8000860:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000864:	4611      	mov	r1, r2
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	4798      	blx	r3
						}
						othButtonState[idx] &=~msk;
 800086a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800086e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000872:	4974      	ldr	r1, [pc, #464]	; (8000a44 <debounceOthSwitches+0x2a8>)
 8000874:	5c8a      	ldrb	r2, [r1, r2]
 8000876:	b251      	sxtb	r1, r2
 8000878:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800087a:	b252      	sxtb	r2, r2
 800087c:	43d2      	mvns	r2, r2
 800087e:	b252      	sxtb	r2, r2
 8000880:	400a      	ands	r2, r1
 8000882:	b252      	sxtb	r2, r2
 8000884:	b2d1      	uxtb	r1, r2
 8000886:	4a6f      	ldr	r2, [pc, #444]	; (8000a44 <debounceOthSwitches+0x2a8>)
 8000888:	54d1      	strb	r1, [r2, r3]
						othButtonHoldTimeShort[swNmbr] = 0;
 800088a:	4b6a      	ldr	r3, [pc, #424]	; (8000a34 <debounceOthSwitches+0x298>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	4b6d      	ldr	r3, [pc, #436]	; (8000a48 <debounceOthSwitches+0x2ac>)
 8000892:	2100      	movs	r1, #0
 8000894:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						othButtonHoldTimeLong[swNmbr] = 0;
 8000898:	4b66      	ldr	r3, [pc, #408]	; (8000a34 <debounceOthSwitches+0x298>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	4b6b      	ldr	r3, [pc, #428]	; (8000a4c <debounceOthSwitches+0x2b0>)
 80008a0:	2100      	movs	r1, #0
 80008a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80008a6:	e04e      	b.n	8000946 <debounceOthSwitches+0x1aa>
					}
				}
			}
		}else{					 						/*button is down*/
			if(othButtonTime[swNmbr] < app_cfg_btn_TIME_DEBOUNCE){
 80008a8:	4b62      	ldr	r3, [pc, #392]	; (8000a34 <debounceOthSwitches+0x298>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b64      	ldr	r3, [pc, #400]	; (8000a40 <debounceOthSwitches+0x2a4>)
 80008b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	d846      	bhi.n	8000946 <debounceOthSwitches+0x1aa>
				++othButtonTime[swNmbr];
 80008b8:	4b5e      	ldr	r3, [pc, #376]	; (8000a34 <debounceOthSwitches+0x298>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4a60      	ldr	r2, [pc, #384]	; (8000a40 <debounceOthSwitches+0x2a4>)
 80008be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80008c2:	3201      	adds	r2, #1
 80008c4:	b291      	uxth	r1, r2
 80008c6:	4a5e      	ldr	r2, [pc, #376]	; (8000a40 <debounceOthSwitches+0x2a4>)
 80008c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(othButtonTime[swNmbr] >= app_cfg_btn_TIME_DEBOUNCE){
 80008cc:	4b59      	ldr	r3, [pc, #356]	; (8000a34 <debounceOthSwitches+0x298>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b5b      	ldr	r3, [pc, #364]	; (8000a40 <debounceOthSwitches+0x2a4>)
 80008d4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80008d8:	2b03      	cmp	r3, #3
 80008da:	d934      	bls.n	8000946 <debounceOthSwitches+0x1aa>
					if(self->sendMsg != NULL){
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d014      	beq.n	800090e <debounceOthSwitches+0x172>
						msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_PRESSED, 0, 0);
 80008e4:	4b53      	ldr	r3, [pc, #332]	; (8000a34 <debounceOthSwitches+0x298>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	83bb      	strh	r3, [r7, #28]
 80008ec:	2301      	movs	r3, #1
 80008ee:	83fb      	strh	r3, [r7, #30]
 80008f0:	2342      	movs	r3, #66	; 0x42
 80008f2:	f887 3020 	strb.w	r3, [r7, #32]
 80008f6:	2300      	movs	r3, #0
 80008f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80008fc:	2300      	movs	r3, #0
 80008fe:	847b      	strh	r3, [r7, #34]	; 0x22
						self->sendMsg(self, &newMessage);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	f107 021c 	add.w	r2, r7, #28
 8000908:	4611      	mov	r1, r2
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	4798      	blx	r3
					}
					othButtonState[idx] |= msk;
 800090e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000912:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000916:	494b      	ldr	r1, [pc, #300]	; (8000a44 <debounceOthSwitches+0x2a8>)
 8000918:	5c89      	ldrb	r1, [r1, r2]
 800091a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800091c:	b2d2      	uxtb	r2, r2
 800091e:	430a      	orrs	r2, r1
 8000920:	b2d1      	uxtb	r1, r2
 8000922:	4a48      	ldr	r2, [pc, #288]	; (8000a44 <debounceOthSwitches+0x2a8>)
 8000924:	54d1      	strb	r1, [r2, r3]
					othButtonHoldTimeShort[swNmbr] = app_cfg_btn_TIME_HOLD_SHORT;
 8000926:	4b43      	ldr	r3, [pc, #268]	; (8000a34 <debounceOthSwitches+0x298>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	461a      	mov	r2, r3
 800092c:	4b46      	ldr	r3, [pc, #280]	; (8000a48 <debounceOthSwitches+0x2ac>)
 800092e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000932:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					othButtonHoldTimeLong[swNmbr] = app_cfg_btn_TIME_HOLD_LONG;
 8000936:	4b3f      	ldr	r3, [pc, #252]	; (8000a34 <debounceOthSwitches+0x298>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <debounceOthSwitches+0x2b0>)
 800093e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000942:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				}
			}
		}
		if(othButtonHoldTimeShort[swNmbr]>0){
 8000946:	4b3b      	ldr	r3, [pc, #236]	; (8000a34 <debounceOthSwitches+0x298>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	4b3e      	ldr	r3, [pc, #248]	; (8000a48 <debounceOthSwitches+0x2ac>)
 800094e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000952:	2b00      	cmp	r3, #0
 8000954:	dd2a      	ble.n	80009ac <debounceOthSwitches+0x210>
			--othButtonHoldTimeShort[swNmbr];
 8000956:	4b37      	ldr	r3, [pc, #220]	; (8000a34 <debounceOthSwitches+0x298>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4a3b      	ldr	r2, [pc, #236]	; (8000a48 <debounceOthSwitches+0x2ac>)
 800095c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000960:	b292      	uxth	r2, r2
 8000962:	3a01      	subs	r2, #1
 8000964:	b292      	uxth	r2, r2
 8000966:	b211      	sxth	r1, r2
 8000968:	4a37      	ldr	r2, [pc, #220]	; (8000a48 <debounceOthSwitches+0x2ac>)
 800096a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(othButtonHoldTimeShort[swNmbr] == 0) {
 800096e:	4b31      	ldr	r3, [pc, #196]	; (8000a34 <debounceOthSwitches+0x298>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <debounceOthSwitches+0x2ac>)
 8000976:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d116      	bne.n	80009ac <debounceOthSwitches+0x210>
				if(self->sendMsg != NULL){
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d012      	beq.n	80009ac <debounceOthSwitches+0x210>
					msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_HOLD_SHORT, 0, 0);
 8000986:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <debounceOthSwitches+0x298>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b29b      	uxth	r3, r3
 800098c:	82bb      	strh	r3, [r7, #20]
 800098e:	2302      	movs	r3, #2
 8000990:	82fb      	strh	r3, [r7, #22]
 8000992:	2342      	movs	r3, #66	; 0x42
 8000994:	763b      	strb	r3, [r7, #24]
 8000996:	2300      	movs	r3, #0
 8000998:	767b      	strb	r3, [r7, #25]
 800099a:	2300      	movs	r3, #0
 800099c:	837b      	strh	r3, [r7, #26]
					self->sendMsg(self, &newMessage);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f107 0214 	add.w	r2, r7, #20
 80009a6:	4611      	mov	r1, r2
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	4798      	blx	r3
				}
			}
		}
		if(othButtonHoldTimeLong[swNmbr]>0){
 80009ac:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <debounceOthSwitches+0x298>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <debounceOthSwitches+0x2b0>)
 80009b4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	dd2a      	ble.n	8000a12 <debounceOthSwitches+0x276>
			--othButtonHoldTimeLong[swNmbr];
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <debounceOthSwitches+0x298>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <debounceOthSwitches+0x2b0>)
 80009c2:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80009c6:	b292      	uxth	r2, r2
 80009c8:	3a01      	subs	r2, #1
 80009ca:	b292      	uxth	r2, r2
 80009cc:	b211      	sxth	r1, r2
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <debounceOthSwitches+0x2b0>)
 80009d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(othButtonHoldTimeLong[swNmbr] == 0) {
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <debounceOthSwitches+0x298>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <debounceOthSwitches+0x2b0>)
 80009dc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d116      	bne.n	8000a12 <debounceOthSwitches+0x276>
				if(self->sendMsg != NULL){
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d012      	beq.n	8000a12 <debounceOthSwitches+0x276>
					msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_HOLD_LONG, 0, 0);
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <debounceOthSwitches+0x298>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	81bb      	strh	r3, [r7, #12]
 80009f4:	2303      	movs	r3, #3
 80009f6:	81fb      	strh	r3, [r7, #14]
 80009f8:	2342      	movs	r3, #66	; 0x42
 80009fa:	743b      	strb	r3, [r7, #16]
 80009fc:	2300      	movs	r3, #0
 80009fe:	747b      	strb	r3, [r7, #17]
 8000a00:	2300      	movs	r3, #0
 8000a02:	827b      	strh	r3, [r7, #18]
					self->sendMsg(self, &newMessage);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	695b      	ldr	r3, [r3, #20]
 8000a08:	f107 020c 	add.w	r2, r7, #12
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	4798      	blx	r3
				}
			}
		}
	}
	if(++swNmbr >= (app_cfg_NMBR_BTNS))swNmbr = 0;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <debounceOthSwitches+0x298>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <debounceOthSwitches+0x298>)
 8000a1c:	701a      	strb	r2, [r3, #0]
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <debounceOthSwitches+0x298>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	d902      	bls.n	8000a2c <debounceOthSwitches+0x290>
 8000a26:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <debounceOthSwitches+0x298>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	3730      	adds	r7, #48	; 0x30
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20001516 	.word	0x20001516
 8000a38:	0800d750 	.word	0x0800d750
 8000a3c:	200014e8 	.word	0x200014e8
 8000a40:	200014f0 	.word	0x200014f0
 8000a44:	200014e0 	.word	0x200014e0
 8000a48:	200014fc 	.word	0x200014fc
 8000a4c:	20001508 	.word	0x20001508

08000a50 <app_dmx_init>:
app_dmx_Merge dmxMerge = app_dmx_MERGE_ACTIVE;
app_dmx_MergeMode dmxMergeMode = app_dmx_MERGE_MODE_HTP;
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_dmx_init(eal_task_Task *self){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	dmxMerge = app_dmx_MERGE_ACTIVE;
 8000a58:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <app_dmx_init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
	dmxMergeMode = app_dmx_MERGE_MODE_HTP;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <app_dmx_init+0x78>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]

	dmx_registerCallback(&dmx1Out, dmx1TransmitterCallback);
 8000a64:	4919      	ldr	r1, [pc, #100]	; (8000acc <app_dmx_init+0x7c>)
 8000a66:	481a      	ldr	r0, [pc, #104]	; (8000ad0 <app_dmx_init+0x80>)
 8000a68:	f008 fad5 	bl	8009016 <dmx_registerCallback>
	dmx_init(&dmx1Out);
 8000a6c:	4818      	ldr	r0, [pc, #96]	; (8000ad0 <app_dmx_init+0x80>)
 8000a6e:	f008 fae1 	bl	8009034 <dmx_init>
	dmx_txStart(&dmx1Out);
 8000a72:	4817      	ldr	r0, [pc, #92]	; (8000ad0 <app_dmx_init+0x80>)
 8000a74:	f008 fbb4 	bl	80091e0 <dmx_txStart>

	dmx_registerCallback(&dmx2In, dmx2ReceiverCallback);
 8000a78:	4916      	ldr	r1, [pc, #88]	; (8000ad4 <app_dmx_init+0x84>)
 8000a7a:	4817      	ldr	r0, [pc, #92]	; (8000ad8 <app_dmx_init+0x88>)
 8000a7c:	f008 facb 	bl	8009016 <dmx_registerCallback>
	if(dmxMerge == app_dmx_MERGE_ACTIVE){
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <app_dmx_init+0x74>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d105      	bne.n	8000a94 <app_dmx_init+0x44>
		dmx_init(&dmx2In);
 8000a88:	4813      	ldr	r0, [pc, #76]	; (8000ad8 <app_dmx_init+0x88>)
 8000a8a:	f008 fad3 	bl	8009034 <dmx_init>
		dmx_rxStart(&dmx2In);
 8000a8e:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <app_dmx_init+0x88>)
 8000a90:	f008 fbb8 	bl	8009204 <dmx_rxStart>
	}

	HAL_GPIO_WritePin(O_USART1_DIR_GPIO_Port, O_USART1_DIR_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9a:	4810      	ldr	r0, [pc, #64]	; (8000adc <app_dmx_init+0x8c>)
 8000a9c:	f002 ffb0 	bl	8003a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(O_USART2_DIR_GPIO_Port, O_USART2_DIR_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2104      	movs	r1, #4
 8000aa4:	480d      	ldr	r0, [pc, #52]	; (8000adc <app_dmx_init+0x8c>)
 8000aa6:	f002 ffab 	bl	8003a00 <HAL_GPIO_WritePin>

	memset(dmxModified, 0, sizeof(dmxModified));
 8000aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aae:	2100      	movs	r1, #0
 8000ab0:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <app_dmx_init+0x90>)
 8000ab2:	f00c f8ca 	bl	800cc4a <memset>
	dmxTxComplete = false;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <app_dmx_init+0x94>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20001b1d 	.word	0x20001b1d
 8000ac8:	20001b1e 	.word	0x20001b1e
 8000acc:	08000c81 	.word	0x08000c81
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	08000ca5 	.word	0x08000ca5
 8000ad8:	2000005c 	.word	0x2000005c
 8000adc:	48000800 	.word	0x48000800
 8000ae0:	2000191c 	.word	0x2000191c
 8000ae4:	20001b1c 	.word	0x20001b1c

08000ae8 <app_dmx_process>:

void app_dmx_process(eal_task_Task *self){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	f083 0301 	eor.w	r3, r3, #1
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d11e      	bne.n	8000b3c <app_dmx_process+0x54>
	if(!cyclicFlag) return;
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <app_dmx_process+0x60>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	f083 0301 	eor.w	r3, r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d118      	bne.n	8000b40 <app_dmx_process+0x58>
	/*Do everything what you want to do*/
	dmx_loop(&dmx1Out);
 8000b0e:	480f      	ldr	r0, [pc, #60]	; (8000b4c <app_dmx_process+0x64>)
 8000b10:	f008 fada 	bl	80090c8 <dmx_loop>
	/*Receive makes only sense if merge is enabled*/
	if(dmxMerge == app_dmx_MERGE_ACTIVE) dmx_loop(&dmx2In);
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <app_dmx_process+0x68>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <app_dmx_process+0x3a>
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <app_dmx_process+0x6c>)
 8000b1e:	f008 fad3 	bl	80090c8 <dmx_loop>

	if(dmxTxComplete){updateDmxOut(); dmxTxComplete = false;}
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <app_dmx_process+0x70>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d004      	beq.n	8000b34 <app_dmx_process+0x4c>
 8000b2a:	f000 f84b 	bl	8000bc4 <updateDmxOut>
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <app_dmx_process+0x70>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]

	cyclicFlag = false;
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <app_dmx_process+0x60>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
 8000b3a:	e002      	b.n	8000b42 <app_dmx_process+0x5a>
	if(!self->enable) return;
 8000b3c:	bf00      	nop
 8000b3e:	e000      	b.n	8000b42 <app_dmx_process+0x5a>
	if(!cyclicFlag) return;
 8000b40:	bf00      	nop
}
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20001918 	.word	0x20001918
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20001b1d 	.word	0x20001b1d
 8000b54:	2000005c 	.word	0x2000005c
 8000b58:	20001b1c 	.word	0x20001b1c

08000b5c <app_dmx_cyclic1ms>:

void app_dmx_cyclic1ms(eal_task_Task *self, bool stat){
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <app_dmx_cyclic1ms+0x20>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20001918 	.word	0x20001918

08000b80 <app_dmx_receiveMsg>:

void app_dmx_receiveMsg(eal_task_Task *self, msg_Message *message){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	if(message->type == app_cfg_DMX_MSG){
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	791b      	ldrb	r3, [r3, #4]
 8000b8e:	2b44      	cmp	r3, #68	; 0x44
 8000b90:	d111      	bne.n	8000bb6 <app_dmx_receiveMsg+0x36>
		/*Action parsing*/
		if(msg_isAction(message)){
 8000b92:	6838      	ldr	r0, [r7, #0]
 8000b94:	f008 ff6d 	bl	8009a72 <msg_isAction>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d00b      	beq.n	8000bb6 <app_dmx_receiveMsg+0x36>
			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ba6:	81fb      	strh	r3, [r7, #14]
			dmxModified[idx] = (uint8_t)message->value;
 8000ba8:	89fb      	ldrh	r3, [r7, #14]
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000bb0:	b2d1      	uxtb	r1, r2
 8000bb2:	4a03      	ldr	r2, [pc, #12]	; (8000bc0 <app_dmx_receiveMsg+0x40>)
 8000bb4:	54d1      	strb	r1, [r2, r3]
		}
		/*Event parsing*/
		}else{

		}
}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2000191c 	.word	0x2000191c

08000bc4 <updateDmxOut>:

/* Helper ---------------------------------------------------------------------*/
static void updateDmxOut(){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
	if(dmxMerge == app_dmx_MERGE_ACTIVE){
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <updateDmxOut+0xa8>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d13f      	bne.n	8000c52 <updateDmxOut+0x8e>
		for(int i = 0; i < dmx1Out.universeSize; ++i){
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	e034      	b.n	8000c42 <updateDmxOut+0x7e>
			uint8_t dmxRxValue = dmx2In.universe[i]; /*Atomic operation*/
 8000bd8:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <updateDmxOut+0xac>)
 8000bda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4413      	add	r3, r2
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	70fb      	strb	r3, [r7, #3]
			uint8_t dmxModValue = dmxModified[i]; /*Atomic operation*/
 8000be4:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <updateDmxOut+0xb0>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	70bb      	strb	r3, [r7, #2]
			if(dmxMergeMode == app_dmx_MERGE_MODE_HTP) {	/*Highest takes presence*/
 8000bee:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <updateDmxOut+0xb4>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d111      	bne.n	8000c1a <updateDmxOut+0x56>
				if(dmxRxValue > dmxModValue) dmx1Out.universe[i] = dmxRxValue;
 8000bf6:	78fa      	ldrb	r2, [r7, #3]
 8000bf8:	78bb      	ldrb	r3, [r7, #2]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d906      	bls.n	8000c0c <updateDmxOut+0x48>
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <updateDmxOut+0xb8>)
 8000c00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	78fa      	ldrb	r2, [r7, #3]
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	e017      	b.n	8000c3c <updateDmxOut+0x78>
				else dmx1Out.universe[i] = dmxModValue;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <updateDmxOut+0xb8>)
 8000c0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4413      	add	r3, r2
 8000c14:	78ba      	ldrb	r2, [r7, #2]
 8000c16:	701a      	strb	r2, [r3, #0]
 8000c18:	e010      	b.n	8000c3c <updateDmxOut+0x78>
			}else{								/*Lowest takes presence*/
				if(dmxRxValue < dmxModValue) dmx1Out.universe[i] = dmxRxValue;
 8000c1a:	78fa      	ldrb	r2, [r7, #3]
 8000c1c:	78bb      	ldrb	r3, [r7, #2]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d206      	bcs.n	8000c30 <updateDmxOut+0x6c>
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <updateDmxOut+0xb8>)
 8000c24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	78fa      	ldrb	r2, [r7, #3]
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	e005      	b.n	8000c3c <updateDmxOut+0x78>
				else dmx1Out.universe[i] = dmxModValue;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <updateDmxOut+0xb8>)
 8000c32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4413      	add	r3, r2
 8000c38:	78ba      	ldrb	r2, [r7, #2]
 8000c3a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < dmx1Out.universeSize; ++i){
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <updateDmxOut+0xb8>)
 8000c44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000c48:	461a      	mov	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	dcc3      	bgt.n	8000bd8 <updateDmxOut+0x14>
			}
		}
	}else{ /*If merge is disabled just copy the dmxModified data to output*/
		memcpy(dmx1Out.universe, dmxModified, dmx1Out.universeSize);
	}
}
 8000c50:	e008      	b.n	8000c64 <updateDmxOut+0xa0>
		memcpy(dmx1Out.universe, dmxModified, dmx1Out.universeSize);
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <updateDmxOut+0xb8>)
 8000c54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <updateDmxOut+0xb8>)
 8000c58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4905      	ldr	r1, [pc, #20]	; (8000c74 <updateDmxOut+0xb0>)
 8000c60:	f00b ffe8 	bl	800cc34 <memcpy>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20001b1d 	.word	0x20001b1d
 8000c70:	2000005c 	.word	0x2000005c
 8000c74:	2000191c 	.word	0x2000191c
 8000c78:	20001b1e 	.word	0x20001b1e
 8000c7c:	20000000 	.word	0x20000000

08000c80 <dmx1TransmitterCallback>:

/* Callback's ---------------------------------------------------------------------*/
bool dmx1TransmitterCallback(dmx_cfg_Instance *dmx){
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	bool state = true;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	73fb      	strb	r3, [r7, #15]
	dmxTxComplete = true;
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <dmx1TransmitterCallback+0x20>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
	return state;
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	20001b1c 	.word	0x20001b1c

08000ca4 <dmx2ReceiverCallback>:

bool dmx2ReceiverCallback(dmx_cfg_Instance *dmx){
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	bool state = true;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
	return state;
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <USART1_IRQHandler>:
/* IRQs ---------------------------------------------------------------------*/
void USART1_IRQHandler(void){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	dmx_irqRxInterfaceHandler(&dmx2In);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <USART1_IRQHandler+0x10>)
 8000cc6:	f008 fb91 	bl	80093ec <dmx_irqRxInterfaceHandler>
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000005c 	.word	0x2000005c

08000cd4 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	dmx_irqTxInterfaceHandler(&dmx1Out);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <USART2_IRQHandler+0x10>)
 8000cda:	f008 fb12 	bl	8009302 <dmx_irqTxInterfaceHandler>
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000000 	.word	0x20000000

08000ce8 <app_dmx_preset_init>:
static volatile bool cyclicFlag = false;
static volatile int16_t internalTimer = 0;
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_dmx_preset_init(eal_task_Task *self){
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	e020      	b.n	8000d38 <app_dmx_preset_init+0x50>
		app_model_model.presets[i].relTime_ms = 0;
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <app_dmx_preset_init+0x64>)
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000d00:	fb01 f303 	mul.w	r3, r1, r3
 8000d04:	4413      	add	r3, r2
 8000d06:	2200      	movs	r2, #0
 8000d08:	615a      	str	r2, [r3, #20]
		app_model_model.presets[i].trigger = false;
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <app_dmx_preset_init+0x64>)
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000d14:	fb01 f303 	mul.w	r3, r1, r3
 8000d18:	4413      	add	r3, r2
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	74da      	strb	r2, [r3, #19]
		app_model_model.presets[i].transitionDoneCnt = 0;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <app_dmx_preset_init+0x64>)
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000d28:	fb01 f303 	mul.w	r3, r1, r3
 8000d2c:	4413      	add	r3, r2
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	3301      	adds	r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b09      	cmp	r3, #9
 8000d3c:	dddb      	ble.n	8000cf6 <app_dmx_preset_init+0xe>
	}
}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	200010c0 	.word	0x200010c0

08000d50 <app_dmx_preset_process>:

void app_dmx_preset_process(eal_task_Task *self){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	f083 0301 	eor.w	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 80dc 	bne.w	8000f20 <app_dmx_preset_process+0x1d0>
	if(!cyclicFlag) return;
 8000d68:	4b70      	ldr	r3, [pc, #448]	; (8000f2c <app_dmx_preset_process+0x1dc>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	f083 0301 	eor.w	r3, r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f040 80d5 	bne.w	8000f24 <app_dmx_preset_process+0x1d4>
	/*Do everything what you want to do*/
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	e0c7      	b.n	8000f10 <app_dmx_preset_process+0x1c0>
		if(app_model_model.presets[i].trigger){	/*Preset is triggered and can be executed*/
 8000d80:	4b6b      	ldr	r3, [pc, #428]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000d8a:	fb01 f303 	mul.w	r3, r1, r3
 8000d8e:	4413      	add	r3, r2
 8000d90:	7cdb      	ldrb	r3, [r3, #19]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 80b9 	beq.w	8000f0a <app_dmx_preset_process+0x1ba>
			++app_model_model.presets[i].relTime_ms;
 8000d98:	4b65      	ldr	r3, [pc, #404]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000da2:	fb01 f303 	mul.w	r3, r1, r3
 8000da6:	4413      	add	r3, r2
 8000da8:	695a      	ldr	r2, [r3, #20]
 8000daa:	3201      	adds	r2, #1
 8000dac:	615a      	str	r2, [r3, #20]
			for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	e066      	b.n	8000e82 <app_dmx_preset_process+0x132>
				if(app_model_model.presets[i].presetTransitionSettings[j].enable){
 8000db4:	4b5e      	ldr	r3, [pc, #376]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000dbe:	fb01 f303 	mul.w	r3, r1, r3
 8000dc2:	441a      	add	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	4413      	add	r3, r2
 8000dca:	332d      	adds	r3, #45	; 0x2d
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d054      	beq.n	8000e7c <app_dmx_preset_process+0x12c>
					if(app_model_model.presets[i].presetTransitionStatus[j].transStep == app_dmx_preset_cfg_TRANS_STEP_EXE) performNextTransitionStep(self, i, j);
 8000dd2:	4b57      	ldr	r3, [pc, #348]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000ddc:	fb01 f303 	mul.w	r3, r1, r3
 8000de0:	441a      	add	r2, r3
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	33b0      	adds	r3, #176	; 0xb0
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	4413      	add	r3, r2
 8000dea:	785b      	ldrb	r3, [r3, #1]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d108      	bne.n	8000e02 <app_dmx_preset_process+0xb2>
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	68ba      	ldr	r2, [r7, #8]
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 f96e 	bl	80010dc <performNextTransitionStep>
 8000e00:	e03c      	b.n	8000e7c <app_dmx_preset_process+0x12c>
					else if((app_model_model.presets[i].relTime_ms >= app_model_model.presets[i].presetTransitionSettings[j].transDelay_ms) && (app_model_model.presets[i].presetTransitionStatus[j].transStep == app_dmx_preset_cfg_TRANS_STEP_NONE)){
 8000e02:	4b4b      	ldr	r3, [pc, #300]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000e0c:	fb01 f303 	mul.w	r3, r1, r3
 8000e10:	4413      	add	r3, r2
 8000e12:	695a      	ldr	r2, [r3, #20]
 8000e14:	4b46      	ldr	r3, [pc, #280]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000e16:	6859      	ldr	r1, [r3, #4]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8000e1e:	fb00 f303 	mul.w	r3, r0, r3
 8000e22:	4419      	add	r1, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	440b      	add	r3, r1
 8000e2a:	3328      	adds	r3, #40	; 0x28
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d324      	bcc.n	8000e7c <app_dmx_preset_process+0x12c>
 8000e32:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000e3c:	fb01 f303 	mul.w	r3, r1, r3
 8000e40:	441a      	add	r2, r3
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	33b0      	adds	r3, #176	; 0xb0
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	785b      	ldrb	r3, [r3, #1]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d115      	bne.n	8000e7c <app_dmx_preset_process+0x12c>
						app_model_model.presets[i].presetTransitionStatus[j].transStep = app_dmx_preset_cfg_TRANS_STEP_EXE;
 8000e50:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000e5a:	fb01 f303 	mul.w	r3, r1, r3
 8000e5e:	441a      	add	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	33b0      	adds	r3, #176	; 0xb0
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4413      	add	r3, r2
 8000e68:	2201      	movs	r2, #1
 8000e6a:	705a      	strb	r2, [r3, #1]
						performNextTransitionStep(self, i, j);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 f930 	bl	80010dc <performNextTransitionStep>
			for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	2b13      	cmp	r3, #19
 8000e86:	dd95      	ble.n	8000db4 <app_dmx_preset_process+0x64>
					}
				}
			}
			if(app_model_model.presets[i].transitionDoneCnt >= app_model_model.presets[i].transitionEnableSize){	/*All transitions are performed*/
 8000e88:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000e92:	fb01 f303 	mul.w	r3, r1, r3
 8000e96:	4413      	add	r3, r2
 8000e98:	699a      	ldr	r2, [r3, #24]
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000e9c:	6859      	ldr	r1, [r3, #4]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8000ea4:	fb00 f303 	mul.w	r3, r0, r3
 8000ea8:	440b      	add	r3, r1
 8000eaa:	69db      	ldr	r3, [r3, #28]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d32c      	bcc.n	8000f0a <app_dmx_preset_process+0x1ba>
				app_model_model.presets[i].transitionDoneCnt = 0;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000eba:	fb01 f303 	mul.w	r3, r1, r3
 8000ebe:	4413      	add	r3, r2
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
				app_model_model.presets[i].trigger = false;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000ece:	fb01 f303 	mul.w	r3, r1, r3
 8000ed2:	4413      	add	r3, r2
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	74da      	strb	r2, [r3, #19]
				app_model_model.presets[i].relTime_ms = 0;
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000ee2:	fb01 f303 	mul.w	r3, r1, r3
 8000ee6:	4413      	add	r3, r2
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
				memset(app_model_model.presets[i].presetTransitionStatus, 0, sizeof(app_model_model.presets[i].presetTransitionStatus));
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000ef6:	fb01 f303 	mul.w	r3, r1, r3
 8000efa:	4413      	add	r3, r2
 8000efc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000f00:	2228      	movs	r2, #40	; 0x28
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f00b fea0 	bl	800cc4a <memset>
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b09      	cmp	r3, #9
 8000f14:	f77f af34 	ble.w	8000d80 <app_dmx_preset_process+0x30>
			}
		}
	}
	/*End of everything you want to do*/
	cyclicFlag = false;
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <app_dmx_preset_process+0x1dc>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	e002      	b.n	8000f26 <app_dmx_preset_process+0x1d6>
	if(!self->enable) return;
 8000f20:	bf00      	nop
 8000f22:	e000      	b.n	8000f26 <app_dmx_preset_process+0x1d6>
	if(!cyclicFlag) return;
 8000f24:	bf00      	nop
}
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20001b1f 	.word	0x20001b1f
 8000f30:	200010c0 	.word	0x200010c0

08000f34 <app_dmx_preset_cyclic1ms>:

void app_dmx_preset_cyclic1ms(eal_task_Task *self, bool stat){
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <app_dmx_preset_cyclic1ms+0x20>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20001b1f 	.word	0x20001b1f

08000f58 <app_dmx_preset_receiveMsg>:

void app_dmx_preset_receiveMsg(eal_task_Task *self, msg_Message *message){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	if(message->type == app_cfg_DMX_PRESET_MSG){
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	791b      	ldrb	r3, [r3, #4]
 8000f66:	2b50      	cmp	r3, #80	; 0x50
 8000f68:	f040 80b2 	bne.w	80010d0 <app_dmx_preset_receiveMsg+0x178>
		/*Action parsing*/
		if(msg_isAction(message)){
 8000f6c:	6838      	ldr	r0, [r7, #0]
 8000f6e:	f008 fd80 	bl	8009a72 <msg_isAction>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80ab 	beq.w	80010d0 <app_dmx_preset_receiveMsg+0x178>
			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f82:	83fb      	strh	r3, [r7, #30]
			if(APP_CFG_IS_INDEX_IN_RANGE(idx, app_cfg_dmx_preset_TRIGGER_PRESET_OFFSET_IDX, app_cfg_dmx_preset_TRIGGER_PRESET_OFFSET_IDX+app_cfg_NMBR_PRESETS)){
 8000f84:	8bfb      	ldrh	r3, [r7, #30]
 8000f86:	2b09      	cmp	r3, #9
 8000f88:	f200 80a2 	bhi.w	80010d0 <app_dmx_preset_receiveMsg+0x178>
				if((message->value == app_cfg_dmx_preset_TRIGGER_ENABLE) && (app_model_model.presets[idx].trigger == false)) {	/*Can be triggered only once*/
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f92:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d154      	bne.n	8001044 <app_dmx_preset_receiveMsg+0xec>
 8000f9a:	4b4f      	ldr	r3, [pc, #316]	; (80010d8 <app_dmx_preset_receiveMsg+0x180>)
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	8bfb      	ldrh	r3, [r7, #30]
 8000fa0:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000fa4:	fb01 f303 	mul.w	r3, r1, r3
 8000fa8:	4413      	add	r3, r2
 8000faa:	7cdb      	ldrb	r3, [r3, #19]
 8000fac:	f083 0301 	eor.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d046      	beq.n	8001044 <app_dmx_preset_receiveMsg+0xec>
					app_model_model.presets[idx].trigger = true;
 8000fb6:	4b48      	ldr	r3, [pc, #288]	; (80010d8 <app_dmx_preset_receiveMsg+0x180>)
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	8bfb      	ldrh	r3, [r7, #30]
 8000fbc:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000fc0:	fb01 f303 	mul.w	r3, r1, r3
 8000fc4:	4413      	add	r3, r2
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	74da      	strb	r2, [r3, #19]
					app_model_model.presets[idx].relTime_ms = 0;
 8000fca:	4b43      	ldr	r3, [pc, #268]	; (80010d8 <app_dmx_preset_receiveMsg+0x180>)
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	8bfb      	ldrh	r3, [r7, #30]
 8000fd0:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000fd4:	fb01 f303 	mul.w	r3, r1, r3
 8000fd8:	4413      	add	r3, r2
 8000fda:	2200      	movs	r2, #0
 8000fdc:	615a      	str	r2, [r3, #20]
					app_model_model.presets[idx].transitionDoneCnt = 0;
 8000fde:	4b3e      	ldr	r3, [pc, #248]	; (80010d8 <app_dmx_preset_receiveMsg+0x180>)
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	8bfb      	ldrh	r3, [r7, #30]
 8000fe4:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000fe8:	fb01 f303 	mul.w	r3, r1, r3
 8000fec:	4413      	add	r3, r2
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
					memset(app_model_model.presets[idx].presetTransitionStatus, 0, sizeof(app_model_model.presets[idx].presetTransitionStatus));
 8000ff2:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <app_dmx_preset_receiveMsg+0x180>)
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	8bfb      	ldrh	r3, [r7, #30]
 8000ff8:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000ffc:	fb01 f303 	mul.w	r3, r1, r3
 8001000:	4413      	add	r3, r2
 8001002:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001006:	2228      	movs	r2, #40	; 0x28
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f00b fe1d 	bl	800cc4a <memset>
					if(self->sendMsg != NULL){
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d05b      	beq.n	80010d0 <app_dmx_preset_receiveMsg+0x178>
						msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_EVENT(idx), app_cfg_dmx_preset_TRIGGER_ENABLE, 0, 0);
 8001018:	8bfb      	ldrh	r3, [r7, #30]
 800101a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800101e:	b29b      	uxth	r3, r3
 8001020:	82bb      	strh	r3, [r7, #20]
 8001022:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001026:	82fb      	strh	r3, [r7, #22]
 8001028:	2350      	movs	r3, #80	; 0x50
 800102a:	763b      	strb	r3, [r7, #24]
 800102c:	2300      	movs	r3, #0
 800102e:	767b      	strb	r3, [r7, #25]
 8001030:	2300      	movs	r3, #0
 8001032:	837b      	strh	r3, [r7, #26]
						self->sendMsg(self, &newMessage);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	f107 0214 	add.w	r2, r7, #20
 800103c:	4611      	mov	r1, r2
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	4798      	blx	r3
					if(self->sendMsg != NULL){
 8001042:	e045      	b.n	80010d0 <app_dmx_preset_receiveMsg+0x178>
					}
				}else{
					app_model_model.presets[idx].trigger = false;
 8001044:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <app_dmx_preset_receiveMsg+0x180>)
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	8bfb      	ldrh	r3, [r7, #30]
 800104a:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800104e:	fb01 f303 	mul.w	r3, r1, r3
 8001052:	4413      	add	r3, r2
 8001054:	2200      	movs	r2, #0
 8001056:	74da      	strb	r2, [r3, #19]
					app_model_model.presets[idx].relTime_ms = 0;
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <app_dmx_preset_receiveMsg+0x180>)
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	8bfb      	ldrh	r3, [r7, #30]
 800105e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001062:	fb01 f303 	mul.w	r3, r1, r3
 8001066:	4413      	add	r3, r2
 8001068:	2200      	movs	r2, #0
 800106a:	615a      	str	r2, [r3, #20]
					app_model_model.presets[idx].transitionDoneCnt = 0;
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <app_dmx_preset_receiveMsg+0x180>)
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	8bfb      	ldrh	r3, [r7, #30]
 8001072:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001076:	fb01 f303 	mul.w	r3, r1, r3
 800107a:	4413      	add	r3, r2
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
					memset(app_model_model.presets[idx].presetTransitionStatus, 0, sizeof(app_model_model.presets[idx].presetTransitionStatus));
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <app_dmx_preset_receiveMsg+0x180>)
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	8bfb      	ldrh	r3, [r7, #30]
 8001086:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800108a:	fb01 f303 	mul.w	r3, r1, r3
 800108e:	4413      	add	r3, r2
 8001090:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001094:	2228      	movs	r2, #40	; 0x28
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f00b fdd6 	bl	800cc4a <memset>
					if(self->sendMsg != NULL){
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d014      	beq.n	80010d0 <app_dmx_preset_receiveMsg+0x178>
						msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_EVENT(idx), app_cfg_dmx_preset_TRIGGER_DISABLE, 0, 0);
 80010a6:	8bfb      	ldrh	r3, [r7, #30]
 80010a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	81bb      	strh	r3, [r7, #12]
 80010b0:	2300      	movs	r3, #0
 80010b2:	81fb      	strh	r3, [r7, #14]
 80010b4:	2350      	movs	r3, #80	; 0x50
 80010b6:	743b      	strb	r3, [r7, #16]
 80010b8:	2300      	movs	r3, #0
 80010ba:	747b      	strb	r3, [r7, #17]
 80010bc:	2300      	movs	r3, #0
 80010be:	827b      	strh	r3, [r7, #18]
						self->sendMsg(self, &newMessage);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	f107 020c 	add.w	r2, r7, #12
 80010c8:	4611      	mov	r1, r2
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	4798      	blx	r3
		/*Event parsing*/
		}else{

		}
	}
}
 80010ce:	e7ff      	b.n	80010d0 <app_dmx_preset_receiveMsg+0x178>
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200010c0 	.word	0x200010c0

080010dc <performNextTransitionStep>:

/*Helper*/
static void performNextTransitionStep(eal_task_Task *self, uint8_t preset, uint8_t transition){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	460b      	mov	r3, r1
 80010e6:	72fb      	strb	r3, [r7, #11]
 80010e8:	4613      	mov	r3, r2
 80010ea:	72bb      	strb	r3, [r7, #10]
	float actualTransitionTime = (float)(app_model_model.presets[preset].relTime_ms - app_model_model.presets[preset].presetTransitionSettings[transition].transDelay_ms);
 80010ec:	4ba8      	ldr	r3, [pc, #672]	; (8001390 <performNextTransitionStep+0x2b4>)
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	7afb      	ldrb	r3, [r7, #11]
 80010f2:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80010f6:	fb01 f303 	mul.w	r3, r1, r3
 80010fa:	4413      	add	r3, r2
 80010fc:	695a      	ldr	r2, [r3, #20]
 80010fe:	4ba4      	ldr	r3, [pc, #656]	; (8001390 <performNextTransitionStep+0x2b4>)
 8001100:	6859      	ldr	r1, [r3, #4]
 8001102:	7afb      	ldrb	r3, [r7, #11]
 8001104:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8001108:	fb00 f303 	mul.w	r3, r0, r3
 800110c:	4419      	add	r1, r3
 800110e:	7abb      	ldrb	r3, [r7, #10]
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	440b      	add	r3, r1
 8001114:	3328      	adds	r3, #40	; 0x28
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001122:	edc7 7a08 	vstr	s15, [r7, #32]
	uint16_t newVal = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(app_model_model.presets[preset].presetTransitionSettings[transition].transTime_ms == 0){
 800112a:	4b99      	ldr	r3, [pc, #612]	; (8001390 <performNextTransitionStep+0x2b4>)
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	7afb      	ldrb	r3, [r7, #11]
 8001130:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001134:	fb01 f303 	mul.w	r3, r1, r3
 8001138:	441a      	add	r2, r3
 800113a:	7abb      	ldrb	r3, [r7, #10]
 800113c:	3302      	adds	r3, #2
 800113e:	011b      	lsls	r3, r3, #4
 8001140:	4413      	add	r3, r2
 8001142:	3304      	adds	r3, #4
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d128      	bne.n	800119c <performNextTransitionStep+0xc0>
		newVal = app_model_model.presets[preset].presetTransitionSettings[transition].dmxEndVal;
 800114a:	4b91      	ldr	r3, [pc, #580]	; (8001390 <performNextTransitionStep+0x2b4>)
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	7afb      	ldrb	r3, [r7, #11]
 8001150:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001154:	fb01 f303 	mul.w	r3, r1, r3
 8001158:	441a      	add	r2, r3
 800115a:	7abb      	ldrb	r3, [r7, #10]
 800115c:	3302      	adds	r3, #2
 800115e:	011b      	lsls	r3, r3, #4
 8001160:	4413      	add	r3, r2
 8001162:	3303      	adds	r3, #3
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	84fb      	strh	r3, [r7, #38]	; 0x26
		++app_model_model.presets[preset].transitionDoneCnt;
 8001168:	4b89      	ldr	r3, [pc, #548]	; (8001390 <performNextTransitionStep+0x2b4>)
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	7afb      	ldrb	r3, [r7, #11]
 800116e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001172:	fb01 f303 	mul.w	r3, r1, r3
 8001176:	4413      	add	r3, r2
 8001178:	699a      	ldr	r2, [r3, #24]
 800117a:	3201      	adds	r2, #1
 800117c:	619a      	str	r2, [r3, #24]
		app_model_model.presets[preset].presetTransitionStatus[transition].transStep = app_dmx_preset_cfg_TRANS_STEP_DONE;
 800117e:	4b84      	ldr	r3, [pc, #528]	; (8001390 <performNextTransitionStep+0x2b4>)
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	7afb      	ldrb	r3, [r7, #11]
 8001184:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001188:	fb01 f303 	mul.w	r3, r1, r3
 800118c:	441a      	add	r2, r3
 800118e:	7abb      	ldrb	r3, [r7, #10]
 8001190:	33b0      	adds	r3, #176	; 0xb0
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	2202      	movs	r2, #2
 8001198:	705a      	strb	r2, [r3, #1]
 800119a:	e099      	b.n	80012d0 <performNextTransitionStep+0x1f4>
	}else{
		//TODO: Perform different ramps
		float diff = (float)((float)app_model_model.presets[preset].presetTransitionSettings[transition].dmxEndVal - (float)app_model_model.presets[preset].presetTransitionSettings[transition].dmxStartVal);
 800119c:	4b7c      	ldr	r3, [pc, #496]	; (8001390 <performNextTransitionStep+0x2b4>)
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	7afb      	ldrb	r3, [r7, #11]
 80011a2:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80011a6:	fb01 f303 	mul.w	r3, r1, r3
 80011aa:	441a      	add	r2, r3
 80011ac:	7abb      	ldrb	r3, [r7, #10]
 80011ae:	3302      	adds	r3, #2
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	4413      	add	r3, r2
 80011b4:	3303      	adds	r3, #3
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	ee07 3a90 	vmov	s15, r3
 80011bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011c0:	4b73      	ldr	r3, [pc, #460]	; (8001390 <performNextTransitionStep+0x2b4>)
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	7afb      	ldrb	r3, [r7, #11]
 80011c6:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80011ca:	fb01 f303 	mul.w	r3, r1, r3
 80011ce:	441a      	add	r2, r3
 80011d0:	7abb      	ldrb	r3, [r7, #10]
 80011d2:	3302      	adds	r3, #2
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	4413      	add	r3, r2
 80011d8:	3302      	adds	r3, #2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e8:	edc7 7a07 	vstr	s15, [r7, #28]
		float actualVal = (diff/((float)app_model_model.presets[preset].presetTransitionSettings[transition].transTime_ms)*actualTransitionTime) + (float)app_model_model.presets[preset].presetTransitionSettings[transition].dmxStartVal;
 80011ec:	4b68      	ldr	r3, [pc, #416]	; (8001390 <performNextTransitionStep+0x2b4>)
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	7afb      	ldrb	r3, [r7, #11]
 80011f2:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80011f6:	fb01 f303 	mul.w	r3, r1, r3
 80011fa:	441a      	add	r2, r3
 80011fc:	7abb      	ldrb	r3, [r7, #10]
 80011fe:	3302      	adds	r3, #2
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	4413      	add	r3, r2
 8001204:	3304      	adds	r3, #4
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001210:	edd7 6a07 	vldr	s13, [r7, #28]
 8001214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001218:	edd7 7a08 	vldr	s15, [r7, #32]
 800121c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001220:	4b5b      	ldr	r3, [pc, #364]	; (8001390 <performNextTransitionStep+0x2b4>)
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	7afb      	ldrb	r3, [r7, #11]
 8001226:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800122a:	fb01 f303 	mul.w	r3, r1, r3
 800122e:	441a      	add	r2, r3
 8001230:	7abb      	ldrb	r3, [r7, #10]
 8001232:	3302      	adds	r3, #2
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	4413      	add	r3, r2
 8001238:	3302      	adds	r3, #2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001248:	edc7 7a06 	vstr	s15, [r7, #24]
		newVal = (uint16_t)actualVal;
 800124c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001254:	edc7 7a01 	vstr	s15, [r7, #4]
 8001258:	88bb      	ldrh	r3, [r7, #4]
 800125a:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(newVal >= app_model_model.presets[preset].presetTransitionSettings[transition].dmxEndVal){
 800125c:	4b4c      	ldr	r3, [pc, #304]	; (8001390 <performNextTransitionStep+0x2b4>)
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	7afb      	ldrb	r3, [r7, #11]
 8001262:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001266:	fb01 f303 	mul.w	r3, r1, r3
 800126a:	441a      	add	r2, r3
 800126c:	7abb      	ldrb	r3, [r7, #10]
 800126e:	3302      	adds	r3, #2
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	4413      	add	r3, r2
 8001274:	3303      	adds	r3, #3
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b29b      	uxth	r3, r3
 800127a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800127c:	429a      	cmp	r2, r3
 800127e:	d327      	bcc.n	80012d0 <performNextTransitionStep+0x1f4>
			newVal = app_model_model.presets[preset].presetTransitionSettings[transition].dmxEndVal;
 8001280:	4b43      	ldr	r3, [pc, #268]	; (8001390 <performNextTransitionStep+0x2b4>)
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	7afb      	ldrb	r3, [r7, #11]
 8001286:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800128a:	fb01 f303 	mul.w	r3, r1, r3
 800128e:	441a      	add	r2, r3
 8001290:	7abb      	ldrb	r3, [r7, #10]
 8001292:	3302      	adds	r3, #2
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	4413      	add	r3, r2
 8001298:	3303      	adds	r3, #3
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	84fb      	strh	r3, [r7, #38]	; 0x26
			++app_model_model.presets[preset].transitionDoneCnt;
 800129e:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <performNextTransitionStep+0x2b4>)
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	7afb      	ldrb	r3, [r7, #11]
 80012a4:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80012a8:	fb01 f303 	mul.w	r3, r1, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	699a      	ldr	r2, [r3, #24]
 80012b0:	3201      	adds	r2, #1
 80012b2:	619a      	str	r2, [r3, #24]
			app_model_model.presets[preset].presetTransitionStatus[transition].transStep = app_dmx_preset_cfg_TRANS_STEP_DONE;
 80012b4:	4b36      	ldr	r3, [pc, #216]	; (8001390 <performNextTransitionStep+0x2b4>)
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	7afb      	ldrb	r3, [r7, #11]
 80012ba:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80012be:	fb01 f303 	mul.w	r3, r1, r3
 80012c2:	441a      	add	r2, r3
 80012c4:	7abb      	ldrb	r3, [r7, #10]
 80012c6:	33b0      	adds	r3, #176	; 0xb0
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	2202      	movs	r2, #2
 80012ce:	705a      	strb	r2, [r3, #1]
		}
	}
	//If the if request is enabled 0 values can't be send because the comparison will be never true
//	if(newVal != app_model_model.presets[preset].presetTransitionStatus[transition].actualVal) {
		app_model_model.presets[preset].presetTransitionStatus[transition].actualVal = newVal;
 80012d0:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <performNextTransitionStep+0x2b4>)
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	7afb      	ldrb	r3, [r7, #11]
 80012d6:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80012da:	fb01 f303 	mul.w	r3, r1, r3
 80012de:	4413      	add	r3, r2
 80012e0:	7aba      	ldrb	r2, [r7, #10]
 80012e2:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80012e4:	b2c9      	uxtb	r1, r1
 80012e6:	32b0      	adds	r2, #176	; 0xb0
 80012e8:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
		if(self->sendMsg != NULL){
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d02d      	beq.n	8001350 <performNextTransitionStep+0x274>
			msg_Message newMessage = msg_LITERAL(app_cfg_DMX_MSG, msg_ACTION(app_model_model.presets[preset].presetTransitionSettings[transition].dmxCh), app_model_model.presets[preset].presetTransitionStatus[transition].actualVal, 0, 0);
 80012f4:	4b26      	ldr	r3, [pc, #152]	; (8001390 <performNextTransitionStep+0x2b4>)
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	7afb      	ldrb	r3, [r7, #11]
 80012fa:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80012fe:	fb01 f303 	mul.w	r3, r1, r3
 8001302:	441a      	add	r2, r3
 8001304:	7abb      	ldrb	r3, [r7, #10]
 8001306:	3302      	adds	r3, #2
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	4413      	add	r3, r2
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001316:	b29b      	uxth	r3, r3
 8001318:	823b      	strh	r3, [r7, #16]
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <performNextTransitionStep+0x2b4>)
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	7afb      	ldrb	r3, [r7, #11]
 8001320:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001324:	fb01 f303 	mul.w	r3, r1, r3
 8001328:	4413      	add	r3, r2
 800132a:	7aba      	ldrb	r2, [r7, #10]
 800132c:	32b0      	adds	r2, #176	; 0xb0
 800132e:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8001332:	b21b      	sxth	r3, r3
 8001334:	827b      	strh	r3, [r7, #18]
 8001336:	2344      	movs	r3, #68	; 0x44
 8001338:	753b      	strb	r3, [r7, #20]
 800133a:	2300      	movs	r3, #0
 800133c:	757b      	strb	r3, [r7, #21]
 800133e:	2300      	movs	r3, #0
 8001340:	82fb      	strh	r3, [r7, #22]
			self->sendMsg(self, &newMessage);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	f107 0210 	add.w	r2, r7, #16
 800134a:	4611      	mov	r1, r2
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	4798      	blx	r3
		}
		if(app_model_model.presets[preset].presetTransitionStatus[transition].transStep == app_dmx_preset_cfg_TRANS_STEP_DONE) app_model_model.presets[preset].presetTransitionStatus[transition].actualVal = 0;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <performNextTransitionStep+0x2b4>)
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	7afb      	ldrb	r3, [r7, #11]
 8001356:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800135a:	fb01 f303 	mul.w	r3, r1, r3
 800135e:	441a      	add	r2, r3
 8001360:	7abb      	ldrb	r3, [r7, #10]
 8001362:	33b0      	adds	r3, #176	; 0xb0
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	785b      	ldrb	r3, [r3, #1]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d10c      	bne.n	8001388 <performNextTransitionStep+0x2ac>
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <performNextTransitionStep+0x2b4>)
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	7afb      	ldrb	r3, [r7, #11]
 8001374:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001378:	fb01 f303 	mul.w	r3, r1, r3
 800137c:	4413      	add	r3, r2
 800137e:	7aba      	ldrb	r2, [r7, #10]
 8001380:	32b0      	adds	r2, #176	; 0xb0
 8001382:	2100      	movs	r1, #0
 8001384:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
//	}
}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	; 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200010c0 	.word	0x200010c0

08001394 <app_eeprom_init>:
static void storeFootswitch(uint16_t pageAddress, app_footcontrol_cfg_GpioCfg *footswitch);
static void readFootswitch(uint16_t pageAddress, app_footcontrol_cfg_GpioCfg *footswitch);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_eeprom_init(eal_task_Task *self){
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	eeprom_registerCallback(&eepromDev1, eepromCallback);
 800139c:	490f      	ldr	r1, [pc, #60]	; (80013dc <app_eeprom_init+0x48>)
 800139e:	4810      	ldr	r0, [pc, #64]	; (80013e0 <app_eeprom_init+0x4c>)
 80013a0:	f008 f89c 	bl	80094dc <eeprom_registerCallback>
	eeprom_init(&eepromDev1);
 80013a4:	480e      	ldr	r0, [pc, #56]	; (80013e0 <app_eeprom_init+0x4c>)
 80013a6:	f008 f8a7 	bl	80094f8 <eeprom_init>
	secondTimer = 0;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <app_eeprom_init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	801a      	strh	r2, [r3, #0]
	if(readVersion() != EE_FW_VERSION){
 80013b0:	f000 f8b0 	bl	8001514 <readVersion>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f240 1303 	movw	r3, #259	; 0x103
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d007      	beq.n	80013ce <app_eeprom_init+0x3a>
		erase();
 80013be:	f000 f8d1 	bl	8001564 <erase>
		writeVersion(EE_FW_VERSION);
 80013c2:	f240 1003 	movw	r0, #259	; 0x103
 80013c6:	f000 f879 	bl	80014bc <writeVersion>
		storeModel();
 80013ca:	f000 f915 	bl	80015f8 <storeModel>
	}
	readModel();
 80013ce:	f000 f959 	bl	8001684 <readModel>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	08001a19 	.word	0x08001a19
 80013e0:	200000b8 	.word	0x200000b8
 80013e4:	20001b24 	.word	0x20001b24

080013e8 <app_eeprom_process>:

void app_eeprom_process(eal_task_Task *self){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	f083 0301 	eor.w	r3, r3, #1
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d123      	bne.n	8001446 <app_eeprom_process+0x5e>
	if(!cyclicFlag) return;
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <app_eeprom_process+0x6c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	f083 0301 	eor.w	r3, r3, #1
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d11d      	bne.n	800144a <app_eeprom_process+0x62>
	if(++secondTimer == 1000){
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <app_eeprom_process+0x70>)
 8001410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001414:	b29b      	uxth	r3, r3
 8001416:	3301      	adds	r3, #1
 8001418:	b29b      	uxth	r3, r3
 800141a:	b21a      	sxth	r2, r3
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <app_eeprom_process+0x70>)
 800141e:	801a      	strh	r2, [r3, #0]
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <app_eeprom_process+0x70>)
 8001422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800142a:	d108      	bne.n	800143e <app_eeprom_process+0x56>
		secondTimer = 0;
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <app_eeprom_process+0x70>)
 800142e:	2200      	movs	r2, #0
 8001430:	801a      	strh	r2, [r3, #0]
		if(app_model_model.dirty) storeModel();
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <app_eeprom_process+0x74>)
 8001434:	7c1b      	ldrb	r3, [r3, #16]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <app_eeprom_process+0x56>
 800143a:	f000 f8dd 	bl	80015f8 <storeModel>
	}

	cyclicFlag = false;
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <app_eeprom_process+0x6c>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
 8001444:	e002      	b.n	800144c <app_eeprom_process+0x64>
	if(!self->enable) return;
 8001446:	bf00      	nop
 8001448:	e000      	b.n	800144c <app_eeprom_process+0x64>
	if(!cyclicFlag) return;
 800144a:	bf00      	nop
}
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20001b20 	.word	0x20001b20
 8001458:	20001b24 	.word	0x20001b24
 800145c:	200010c0 	.word	0x200010c0

08001460 <app_eeprom_cyclic1ms>:

void app_eeprom_cyclic1ms(eal_task_Task *self, bool stat){
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <app_eeprom_cyclic1ms+0x3c>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
	if(internalTimer > 0)--internalTimer;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <app_eeprom_cyclic1ms+0x40>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	b21b      	sxth	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	dd08      	ble.n	800148e <app_eeprom_cyclic1ms+0x2e>
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <app_eeprom_cyclic1ms+0x40>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	b21b      	sxth	r3, r3
 8001482:	b29b      	uxth	r3, r3
 8001484:	3b01      	subs	r3, #1
 8001486:	b29b      	uxth	r3, r3
 8001488:	b21a      	sxth	r2, r3
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <app_eeprom_cyclic1ms+0x40>)
 800148c:	801a      	strh	r2, [r3, #0]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20001b20 	.word	0x20001b20
 80014a0:	20001b22 	.word	0x20001b22

080014a4 <app_eeprom_receiveMsg>:

void app_eeprom_receiveMsg(eal_task_Task *self, msg_Message *message){
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <writeVersion>:
/* Store/Read ----------------------------------------------------------------------*/
static void writeVersion(uint32_t version){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	uint8_t versionArray[4] = {0};
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
	versionArray[0] = ((version >> 24) & 0xFF);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	0e1b      	lsrs	r3, r3, #24
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	733b      	strb	r3, [r7, #12]
	versionArray[1] = ((version >> 16) & 0xFF);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	0c1b      	lsrs	r3, r3, #16
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	737b      	strb	r3, [r7, #13]
	versionArray[2] = ((version >> 8) & 0xFF);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	73bb      	strb	r3, [r7, #14]
	versionArray[3] = ((version >> 0) & 0xFF);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	73fb      	strb	r3, [r7, #15]
	if(!writeUntilLastEEPROMWriteFinished()) return;
 80014e6:	f000 fa75 	bl	80019d4 <writeUntilLastEEPROMWriteFinished>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f083 0301 	eor.w	r3, r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d107      	bne.n	8001506 <writeVersion+0x4a>
	eeprom_write(&eepromDev1, 0, versionArray, 4);
 80014f6:	f107 020c 	add.w	r2, r7, #12
 80014fa:	2304      	movs	r3, #4
 80014fc:	2100      	movs	r1, #0
 80014fe:	4804      	ldr	r0, [pc, #16]	; (8001510 <writeVersion+0x54>)
 8001500:	f008 f80d 	bl	800951e <eeprom_write>
 8001504:	e000      	b.n	8001508 <writeVersion+0x4c>
	if(!writeUntilLastEEPROMWriteFinished()) return;
 8001506:	bf00      	nop
}
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200000b8 	.word	0x200000b8

08001514 <readVersion>:

static uint32_t readVersion(){
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
	uint8_t versionArray[4] = {0};
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
	if(!writeUntilLastEEPROMWriteFinished()) return 0;
 800151e:	f000 fa59 	bl	80019d4 <writeUntilLastEEPROMWriteFinished>
 8001522:	4603      	mov	r3, r0
 8001524:	f083 0301 	eor.w	r3, r3, #1
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <readVersion+0x1e>
 800152e:	2300      	movs	r3, #0
 8001530:	e011      	b.n	8001556 <readVersion+0x42>
	eeprom_read(&eepromDev1, 0, versionArray, 4);
 8001532:	463a      	mov	r2, r7
 8001534:	2304      	movs	r3, #4
 8001536:	2100      	movs	r1, #0
 8001538:	4809      	ldr	r0, [pc, #36]	; (8001560 <readVersion+0x4c>)
 800153a:	f008 f812 	bl	8009562 <eeprom_read>
	uint32_t version = (versionArray[0] << 24)|(versionArray[1] << 16)|(versionArray[2] << 8)|(versionArray[3] << 0);
 800153e:	783b      	ldrb	r3, [r7, #0]
 8001540:	061a      	lsls	r2, r3, #24
 8001542:	787b      	ldrb	r3, [r7, #1]
 8001544:	041b      	lsls	r3, r3, #16
 8001546:	431a      	orrs	r2, r3
 8001548:	78bb      	ldrb	r3, [r7, #2]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	4313      	orrs	r3, r2
 800154e:	78fa      	ldrb	r2, [r7, #3]
 8001550:	4313      	orrs	r3, r2
 8001552:	607b      	str	r3, [r7, #4]
	return version;
 8001554:	687b      	ldr	r3, [r7, #4]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200000b8 	.word	0x200000b8

08001564 <erase>:

static void erase(){
 8001564:	b580      	push	{r7, lr}
 8001566:	b0c4      	sub	sp, #272	; 0x110
 8001568:	af00      	add	r7, sp, #0
	app_eeprom_Page newPage;
	uint8_t eraseTxData = 0x00;
 800156a:	2300      	movs	r3, #0
 800156c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	for(int i = 0; i < app_eeprom_PAGE_SIZE; ++i) newPage.data[i] = eraseTxData;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001576:	e00b      	b.n	8001590 <erase+0x2c>
 8001578:	1d3a      	adds	r2, r7, #4
 800157a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800157e:	4413      	add	r3, r2
 8001580:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800158a:	3301      	adds	r3, #1
 800158c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001594:	2bff      	cmp	r3, #255	; 0xff
 8001596:	ddef      	ble.n	8001578 <erase+0x14>
	for(int i = 0; i < app_eeprom_PAGE_NMBR; ++i){
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800159e:	e01d      	b.n	80015dc <erase+0x78>
		if(!writeUntilLastEEPROMWriteFinished())return;
 80015a0:	f000 fa18 	bl	80019d4 <writeUntilLastEEPROMWriteFinished>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f083 0301 	eor.w	r3, r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d11b      	bne.n	80015e8 <erase+0x84>
		newPage.addr = i*app_eeprom_PAGE_SIZE;
 80015b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
		eeprom_write(&eepromDev1, newPage.addr, newPage.data, app_eeprom_PAGE_SIZE);
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	f8b3 1100 	ldrh.w	r1, [r3, #256]	; 0x100
 80015c6:	1d3a      	adds	r2, r7, #4
 80015c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015cc:	4809      	ldr	r0, [pc, #36]	; (80015f4 <erase+0x90>)
 80015ce:	f007 ffa6 	bl	800951e <eeprom_write>
	for(int i = 0; i < app_eeprom_PAGE_NMBR; ++i){
 80015d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015d6:	3301      	adds	r3, #1
 80015d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80015dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015e4:	dbdc      	blt.n	80015a0 <erase+0x3c>
 80015e6:	e000      	b.n	80015ea <erase+0x86>
		if(!writeUntilLastEEPROMWriteFinished())return;
 80015e8:	bf00      	nop
	}
}
 80015ea:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200000b8 	.word	0x200000b8

080015f8 <storeModel>:

static void storeModel(){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
	/*Store presets*/
	uint16_t pageAddress = app_eeprom_PRESET_START_PAGE*app_eeprom_PAGE_SIZE;
 80015fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001602:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8001604:	2300      	movs	r3, #0
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	e01b      	b.n	8001642 <storeModel+0x4a>
		if(!writeUntilLastEEPROMWriteFinished()) return;
 800160a:	f000 f9e3 	bl	80019d4 <writeUntilLastEEPROMWriteFinished>
 800160e:	4603      	mov	r3, r0
 8001610:	f083 0301 	eor.w	r3, r3, #1
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d12c      	bne.n	8001674 <storeModel+0x7c>
		storePreset(pageAddress, &app_model_model.presets[i]);
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <storeModel+0x88>)
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001624:	fb01 f303 	mul.w	r3, r1, r3
 8001628:	441a      	add	r2, r3
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	4611      	mov	r1, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f86c 	bl	800170c <storePreset>
		pageAddress += (app_eeprom_PAGES_PER_PRESET*app_eeprom_PAGE_SIZE);
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800163a:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2b09      	cmp	r3, #9
 8001646:	dde0      	ble.n	800160a <storeModel+0x12>
	}
	/*Store footswitch*/
	pageAddress = app_eeprom_FOOTSWITCH_START_PAGE*app_eeprom_PAGE_SIZE;
 8001648:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 800164c:	80fb      	strh	r3, [r7, #6]
	if(!writeUntilLastEEPROMWriteFinished()) return;
 800164e:	f000 f9c1 	bl	80019d4 <writeUntilLastEEPROMWriteFinished>
 8001652:	4603      	mov	r3, r0
 8001654:	f083 0301 	eor.w	r3, r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <storeModel+0x80>
	storeFootswitch(pageAddress, &app_model_model.footswitches[0]);
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <storeModel+0x88>)
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f934 	bl	80018d4 <storeFootswitch>
	app_model_model.dirty = false;
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <storeModel+0x88>)
 800166e:	2200      	movs	r2, #0
 8001670:	741a      	strb	r2, [r3, #16]
 8001672:	e002      	b.n	800167a <storeModel+0x82>
		if(!writeUntilLastEEPROMWriteFinished()) return;
 8001674:	bf00      	nop
 8001676:	e000      	b.n	800167a <storeModel+0x82>
	if(!writeUntilLastEEPROMWriteFinished()) return;
 8001678:	bf00      	nop
}
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200010c0 	.word	0x200010c0

08001684 <readModel>:

static void readModel(){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
	/*Read presets*/
	uint16_t pageAddress = app_eeprom_PRESET_START_PAGE*app_eeprom_PAGE_SIZE;
 800168a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168e:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8001690:	2300      	movs	r3, #0
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	e01b      	b.n	80016ce <readModel+0x4a>
		if(!writeUntilLastEEPROMWriteFinished()) return;
 8001696:	f000 f99d 	bl	80019d4 <writeUntilLastEEPROMWriteFinished>
 800169a:	4603      	mov	r3, r0
 800169c:	f083 0301 	eor.w	r3, r3, #1
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d129      	bne.n	80016fa <readModel+0x76>
		readPreset(pageAddress, &app_model_model.presets[i]);
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <readModel+0x84>)
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80016b0:	fb01 f303 	mul.w	r3, r1, r3
 80016b4:	441a      	add	r2, r3
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f898 	bl	80017f0 <readPreset>
		pageAddress += (app_eeprom_PAGES_PER_PRESET*app_eeprom_PAGE_SIZE);
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80016c6:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	3301      	adds	r3, #1
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	2b09      	cmp	r3, #9
 80016d2:	dde0      	ble.n	8001696 <readModel+0x12>
	}
	/*Read footswitch*/
	pageAddress = app_eeprom_FOOTSWITCH_START_PAGE*app_eeprom_PAGE_SIZE;
 80016d4:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 80016d8:	80fb      	strh	r3, [r7, #6]
	if(!writeUntilLastEEPROMWriteFinished()) return;
 80016da:	f000 f97b 	bl	80019d4 <writeUntilLastEEPROMWriteFinished>
 80016de:	4603      	mov	r3, r0
 80016e0:	f083 0301 	eor.w	r3, r3, #1
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d109      	bne.n	80016fe <readModel+0x7a>
	readFootswitch(pageAddress, &app_model_model.footswitches[0]);
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <readModel+0x84>)
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f92c 	bl	8001950 <readFootswitch>
 80016f8:	e002      	b.n	8001700 <readModel+0x7c>
		if(!writeUntilLastEEPROMWriteFinished()) return;
 80016fa:	bf00      	nop
 80016fc:	e000      	b.n	8001700 <readModel+0x7c>
	if(!writeUntilLastEEPROMWriteFinished()) return;
 80016fe:	bf00      	nop
}
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200010c0 	.word	0x200010c0

0800170c <storePreset>:

static void storePreset(uint16_t pageAddress, app_dmx_preset_cfg_Preset *preset){
 800170c:	b580      	push	{r7, lr}
 800170e:	f5ad 7d66 	sub.w	sp, sp, #920	; 0x398
 8001712:	af00      	add	r7, sp, #0
 8001714:	4602      	mov	r2, r0
 8001716:	463b      	mov	r3, r7
 8001718:	6019      	str	r1, [r3, #0]
 800171a:	1dbb      	adds	r3, r7, #6
 800171c:	801a      	strh	r2, [r3, #0]
	/*Move struct into byte array*/
	uint8_t storage[app_dmx_preset_cfg_PRESET_SIZE] = {0};
 800171e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001722:	4618      	mov	r0, r3
 8001724:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8001728:	461a      	mov	r2, r3
 800172a:	2100      	movs	r1, #0
 800172c:	f00b fa8d 	bl	800cc4a <memset>
	memcpy(storage, preset, app_dmx_preset_cfg_PRESET_SIZE);
 8001730:	463b      	mov	r3, r7
 8001732:	f507 7004 	add.w	r0, r7, #528	; 0x210
 8001736:	f44f 72c4 	mov.w	r2, #392	; 0x188
 800173a:	6819      	ldr	r1, [r3, #0]
 800173c:	f00b fa7a 	bl	800cc34 <memcpy>
	/*Generate pages to store*/
	app_eeprom_Page newPage[2];
	memset(newPage[0].data, 0, app_eeprom_PAGE_SIZE); /*Clean data*/
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f00b fa7d 	bl	800cc4a <memset>
	memset(newPage[1].data, 0, app_eeprom_PAGE_SIZE); /*Clean data*/
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	f503 7381 	add.w	r3, r3, #258	; 0x102
 8001758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f00b fa73 	bl	800cc4a <memset>
	newPage[0].addr = pageAddress;
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	1dba      	adds	r2, r7, #6
 800176a:	8812      	ldrh	r2, [r2, #0]
 800176c:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	newPage[1].addr = pageAddress + app_eeprom_PAGE_SIZE;
 8001770:	1dbb      	adds	r3, r7, #6
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001778:	b29a      	uxth	r2, r3
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
	memcpy(newPage[0].data, &storage[0], app_eeprom_PAGE_SIZE);
 8001782:	f107 020c 	add.w	r2, r7, #12
 8001786:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001792:	461a      	mov	r2, r3
 8001794:	f00b fa4e 	bl	800cc34 <memcpy>
	memcpy(newPage[1].data, &storage[app_eeprom_PAGE_SIZE], (app_dmx_preset_cfg_PRESET_SIZE - app_eeprom_PAGE_SIZE));
 8001798:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800179c:	f503 7180 	add.w	r1, r3, #256	; 0x100
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	f503 7381 	add.w	r3, r3, #258	; 0x102
 80017a8:	2288      	movs	r2, #136	; 0x88
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00b fa42 	bl	800cc34 <memcpy>
	eeprom_write(&eepromDev1, newPage[0].addr, newPage[0].data, app_eeprom_PAGE_SIZE);
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	f8b3 1100 	ldrh.w	r1, [r3, #256]	; 0x100
 80017b8:	f107 020c 	add.w	r2, r7, #12
 80017bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c0:	480a      	ldr	r0, [pc, #40]	; (80017ec <storePreset+0xe0>)
 80017c2:	f007 feac 	bl	800951e <eeprom_write>
	eeprom_write(&eepromDev1, newPage[1].addr, newPage[1].data, app_eeprom_PAGE_SIZE);
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	f8b3 1202 	ldrh.w	r1, [r3, #514]	; 0x202
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	f503 7281 	add.w	r2, r3, #258	; 0x102
 80017d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017da:	4804      	ldr	r0, [pc, #16]	; (80017ec <storePreset+0xe0>)
 80017dc:	f007 fe9f 	bl	800951e <eeprom_write>
}
 80017e0:	bf00      	nop
 80017e2:	f507 7766 	add.w	r7, r7, #920	; 0x398
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200000b8 	.word	0x200000b8

080017f0 <readPreset>:

static void readPreset(uint16_t pageAddress, app_dmx_preset_cfg_Preset *preset){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	f5ad 7d66 	sub.w	sp, sp, #920	; 0x398
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4602      	mov	r2, r0
 80017fa:	463b      	mov	r3, r7
 80017fc:	6019      	str	r1, [r3, #0]
 80017fe:	1dbb      	adds	r3, r7, #6
 8001800:	801a      	strh	r2, [r3, #0]
	/*Generate pages to store*/
	app_eeprom_Page newPage[2];
	memset(newPage[0].data, 0, app_eeprom_PAGE_SIZE); /*Clean data*/
 8001802:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001806:	f44f 7280 	mov.w	r2, #256	; 0x100
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f00b fa1c 	bl	800cc4a <memset>
	memset(newPage[1].data, 0, app_eeprom_PAGE_SIZE); /*Clean data*/
 8001812:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001816:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800181a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800181e:	2100      	movs	r1, #0
 8001820:	4618      	mov	r0, r3
 8001822:	f00b fa12 	bl	800cc4a <memset>
	newPage[0].addr = pageAddress;
 8001826:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800182a:	1dba      	adds	r2, r7, #6
 800182c:	8812      	ldrh	r2, [r2, #0]
 800182e:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	newPage[1].addr = pageAddress + app_eeprom_PAGE_SIZE;
 8001832:	1dbb      	adds	r3, r7, #6
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800183a:	b29a      	uxth	r2, r3
 800183c:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001840:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
	eeprom_read(&eepromDev1, newPage[0].addr, newPage[0].data, app_eeprom_PAGE_SIZE);
 8001844:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001848:	f8b3 1100 	ldrh.w	r1, [r3, #256]	; 0x100
 800184c:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8001850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001854:	481e      	ldr	r0, [pc, #120]	; (80018d0 <readPreset+0xe0>)
 8001856:	f007 fe84 	bl	8009562 <eeprom_read>
	eeprom_read(&eepromDev1, newPage[1].addr, newPage[1].data, app_eeprom_PAGE_SIZE);
 800185a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800185e:	f8b3 1202 	ldrh.w	r1, [r3, #514]	; 0x202
 8001862:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001866:	f503 7281 	add.w	r2, r3, #258	; 0x102
 800186a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800186e:	4818      	ldr	r0, [pc, #96]	; (80018d0 <readPreset+0xe0>)
 8001870:	f007 fe77 	bl	8009562 <eeprom_read>
	uint8_t storage[app_dmx_preset_cfg_PRESET_SIZE] = {0};
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	4618      	mov	r0, r3
 800187a:	f44f 73c4 	mov.w	r3, #392	; 0x188
 800187e:	461a      	mov	r2, r3
 8001880:	2100      	movs	r1, #0
 8001882:	f00b f9e2 	bl	800cc4a <memset>
	memcpy(&storage[0], newPage[0].data, app_eeprom_PAGE_SIZE);
 8001886:	f107 020c 	add.w	r2, r7, #12
 800188a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001896:	461a      	mov	r2, r3
 8001898:	f00b f9cc 	bl	800cc34 <memcpy>
	memcpy(&storage[app_eeprom_PAGE_SIZE], newPage[1].data, (app_dmx_preset_cfg_PRESET_SIZE - app_eeprom_PAGE_SIZE));
 800189c:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80018a0:	f503 7181 	add.w	r1, r3, #258	; 0x102
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80018ac:	2288      	movs	r2, #136	; 0x88
 80018ae:	4618      	mov	r0, r3
 80018b0:	f00b f9c0 	bl	800cc34 <memcpy>
	/*Move byte array into struct*/
	memcpy(preset, storage, app_dmx_preset_cfg_PRESET_SIZE);
 80018b4:	f107 010c 	add.w	r1, r7, #12
 80018b8:	463b      	mov	r3, r7
 80018ba:	f44f 72c4 	mov.w	r2, #392	; 0x188
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	f00b f9b8 	bl	800cc34 <memcpy>
}
 80018c4:	bf00      	nop
 80018c6:	f507 7766 	add.w	r7, r7, #920	; 0x398
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200000b8 	.word	0x200000b8

080018d4 <storeFootswitch>:

static void storeFootswitch(uint16_t pageAddress, app_footcontrol_cfg_GpioCfg *footswitch){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b0da      	sub	sp, #360	; 0x168
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4602      	mov	r2, r0
 80018dc:	463b      	mov	r3, r7
 80018de:	6019      	str	r1, [r3, #0]
 80018e0:	1dbb      	adds	r3, r7, #6
 80018e2:	801a      	strh	r2, [r3, #0]
	/*Move struct into byte array*/
	uint8_t storage[app_dmx_footswitch_cfg_FOOTSWITCH_SIZE*app_cfg_NMBR_BTNS] = {0};
 80018e4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80018e8:	225a      	movs	r2, #90	; 0x5a
 80018ea:	2100      	movs	r1, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f00b f9ac 	bl	800cc4a <memset>
	memcpy(storage, footswitch, sizeof(storage));
 80018f2:	463b      	mov	r3, r7
 80018f4:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 80018f8:	225a      	movs	r2, #90	; 0x5a
 80018fa:	6819      	ldr	r1, [r3, #0]
 80018fc:	f00b f99a 	bl	800cc34 <memcpy>
	/*Generate pages to store*/
	app_eeprom_Page newPage;
	memset(newPage.data, 0, app_eeprom_PAGE_SIZE); /*Clean data*/
 8001900:	f107 0308 	add.w	r3, r7, #8
 8001904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f00b f99d 	bl	800cc4a <memset>
	newPage.addr = pageAddress;
 8001910:	f107 0308 	add.w	r3, r7, #8
 8001914:	1dba      	adds	r2, r7, #6
 8001916:	8812      	ldrh	r2, [r2, #0]
 8001918:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	memcpy(newPage.data, &storage[0], sizeof(storage));
 800191c:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8001920:	f107 0308 	add.w	r3, r7, #8
 8001924:	225a      	movs	r2, #90	; 0x5a
 8001926:	4618      	mov	r0, r3
 8001928:	f00b f984 	bl	800cc34 <memcpy>
	eeprom_write(&eepromDev1, newPage.addr, newPage.data, app_eeprom_PAGE_SIZE);
 800192c:	f107 0308 	add.w	r3, r7, #8
 8001930:	f8b3 1100 	ldrh.w	r1, [r3, #256]	; 0x100
 8001934:	f107 0208 	add.w	r2, r7, #8
 8001938:	f44f 7380 	mov.w	r3, #256	; 0x100
 800193c:	4803      	ldr	r0, [pc, #12]	; (800194c <storeFootswitch+0x78>)
 800193e:	f007 fdee 	bl	800951e <eeprom_write>
}
 8001942:	bf00      	nop
 8001944:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200000b8 	.word	0x200000b8

08001950 <readFootswitch>:
static void readFootswitch(uint16_t pageAddress, app_footcontrol_cfg_GpioCfg *footswitch){
 8001950:	b580      	push	{r7, lr}
 8001952:	b0da      	sub	sp, #360	; 0x168
 8001954:	af00      	add	r7, sp, #0
 8001956:	4602      	mov	r2, r0
 8001958:	463b      	mov	r3, r7
 800195a:	6019      	str	r1, [r3, #0]
 800195c:	1dbb      	adds	r3, r7, #6
 800195e:	801a      	strh	r2, [r3, #0]
	/*Generate pages to store*/
	app_eeprom_Page newPage;
	memset(newPage.data, 0, app_eeprom_PAGE_SIZE); /*Clean data*/
 8001960:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f00b f96d 	bl	800cc4a <memset>
	newPage.addr = pageAddress;
 8001970:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001974:	1dba      	adds	r2, r7, #6
 8001976:	8812      	ldrh	r2, [r2, #0]
 8001978:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	eeprom_read(&eepromDev1, newPage.addr, newPage.data, app_eeprom_PAGE_SIZE);
 800197c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001980:	f8b3 1100 	ldrh.w	r1, [r3, #256]	; 0x100
 8001984:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800198c:	4810      	ldr	r0, [pc, #64]	; (80019d0 <readFootswitch+0x80>)
 800198e:	f007 fde8 	bl	8009562 <eeprom_read>
	uint8_t storage[app_dmx_footswitch_cfg_FOOTSWITCH_SIZE*app_cfg_NMBR_BTNS] = {0};
 8001992:	f107 0308 	add.w	r3, r7, #8
 8001996:	4618      	mov	r0, r3
 8001998:	235a      	movs	r3, #90	; 0x5a
 800199a:	461a      	mov	r2, r3
 800199c:	2100      	movs	r1, #0
 800199e:	f00b f954 	bl	800cc4a <memset>
	memcpy(&storage, newPage.data, sizeof(storage));
 80019a2:	f107 0208 	add.w	r2, r7, #8
 80019a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	235a      	movs	r3, #90	; 0x5a
 80019b0:	461a      	mov	r2, r3
 80019b2:	f00b f93f 	bl	800cc34 <memcpy>
	/*Move byte array into struct*/
	memcpy(footswitch, storage, sizeof(storage));
 80019b6:	f107 0108 	add.w	r1, r7, #8
 80019ba:	463b      	mov	r3, r7
 80019bc:	225a      	movs	r2, #90	; 0x5a
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	f00b f938 	bl	800cc34 <memcpy>
}
 80019c4:	bf00      	nop
 80019c6:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200000b8 	.word	0x200000b8

080019d4 <writeUntilLastEEPROMWriteFinished>:
/* Helper ----------------------------------------------------------------------*/
static bool writeUntilLastEEPROMWriteFinished(){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	internalTimer = 1000;
 80019d8:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <writeUntilLastEEPROMWriteFinished+0x3c>)
 80019da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019de:	801a      	strh	r2, [r3, #0]
	while(!eeprom_isFree(&eepromDev1)){
 80019e0:	e006      	b.n	80019f0 <writeUntilLastEEPROMWriteFinished+0x1c>
		if(internalTimer <= 0){
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <writeUntilLastEEPROMWriteFinished+0x3c>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b21b      	sxth	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	dc01      	bgt.n	80019f0 <writeUntilLastEEPROMWriteFinished+0x1c>
			return false;
 80019ec:	2300      	movs	r3, #0
 80019ee:	e00c      	b.n	8001a0a <writeUntilLastEEPROMWriteFinished+0x36>
	while(!eeprom_isFree(&eepromDev1)){
 80019f0:	4808      	ldr	r0, [pc, #32]	; (8001a14 <writeUntilLastEEPROMWriteFinished+0x40>)
 80019f2:	f007 fdd8 	bl	80095a6 <eeprom_isFree>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f083 0301 	eor.w	r3, r3, #1
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ef      	bne.n	80019e2 <writeUntilLastEEPROMWriteFinished+0xe>
		}
	}
	internalTimer = 0;
 8001a02:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <writeUntilLastEEPROMWriteFinished+0x3c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	801a      	strh	r2, [r3, #0]
	return true;
 8001a08:	2301      	movs	r3, #1
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20001b22 	.word	0x20001b22
 8001a14:	200000b8 	.word	0x200000b8

08001a18 <eepromCallback>:
/* Callback's ------------------------------------------------------------------*/
uint8_t eepromCallback(eeprom_cfg_Config *config){
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af04      	add	r7, sp, #16
 8001a1e:	6078      	str	r0, [r7, #4]
	uint8_t state = 1;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
	if(config->callbackType == EEPROM_CFG_CALL_TX_START){
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7a9b      	ldrb	r3, [r3, #10]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d119      	bne.n	8001a60 <eepromCallback+0x48>
		if(HAL_I2C_Mem_Write(&hi2c2, config->devAddr, config->memAddr, I2C_MEMADD_SIZE_16BIT, config->txBuffer, config->dataSize, 100) != HAL_OK) state = 0;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b298      	uxth	r0, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	b29c      	uxth	r4, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6952      	ldr	r2, [r2, #20]
 8001a40:	b292      	uxth	r2, r2
 8001a42:	2164      	movs	r1, #100	; 0x64
 8001a44:	9102      	str	r1, [sp, #8]
 8001a46:	9201      	str	r2, [sp, #4]
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	4622      	mov	r2, r4
 8001a4e:	4601      	mov	r1, r0
 8001a50:	4820      	ldr	r0, [pc, #128]	; (8001ad4 <eepromCallback+0xbc>)
 8001a52:	f002 f999 	bl	8003d88 <HAL_I2C_Mem_Write>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <eepromCallback+0x48>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]
	}
	if(config->callbackType == EEPROM_CFG_CALL_RX_START){
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7a9b      	ldrb	r3, [r3, #10]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d119      	bne.n	8001a9c <eepromCallback+0x84>
		if(HAL_I2C_Mem_Read(&hi2c2,  config->devAddr, config->memAddr, I2C_MEMADD_SIZE_16BIT, config->rxBuffer, config->dataSize, 100) != HAL_OK) state = 0;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	b298      	uxth	r0, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	b29c      	uxth	r4, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6952      	ldr	r2, [r2, #20]
 8001a7c:	b292      	uxth	r2, r2
 8001a7e:	2164      	movs	r1, #100	; 0x64
 8001a80:	9102      	str	r1, [sp, #8]
 8001a82:	9201      	str	r2, [sp, #4]
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2302      	movs	r3, #2
 8001a88:	4622      	mov	r2, r4
 8001a8a:	4601      	mov	r1, r0
 8001a8c:	4811      	ldr	r0, [pc, #68]	; (8001ad4 <eepromCallback+0xbc>)
 8001a8e:	f002 fa8f 	bl	8003fb0 <HAL_I2C_Mem_Read>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <eepromCallback+0x84>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]
	}
	if(config->callbackType == EEPROM_CFG_CALL_CHECK_TX_STATE){
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7a9b      	ldrb	r3, [r3, #10]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d112      	bne.n	8001aca <eepromCallback+0xb2>
		if(HAL_I2C_Master_Transmit(&hi2c2, config->devAddr, config->rxBuffer, config->dataSize, 100) != HAL_OK) state = 0;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b299      	uxth	r1, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1a      	ldr	r2, [r3, #32]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	b298      	uxth	r0, r3
 8001ab4:	2364      	movs	r3, #100	; 0x64
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <eepromCallback+0xbc>)
 8001abc:	f002 f870 	bl	8003ba0 <HAL_I2C_Master_Transmit>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <eepromCallback+0xb2>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
	}
	return state;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}
 8001ad4:	2000a3dc 	.word	0x2000a3dc

08001ad8 <app_footcontrol_init>:
*******************************************************************************/
static void sendDmxPreset(eal_task_Task *self, app_footcontrol_cfg_PresetCfg *preset);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_footcontrol_init(eal_task_Task *self){
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	status = app_footcontrol_ACTIVE;
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <app_footcontrol_init+0x1c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20001b26 	.word	0x20001b26

08001af8 <app_footcontrol_process>:

void app_footcontrol_process(eal_task_Task *self){
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	f083 0301 	eor.w	r3, r3, #1
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10b      	bne.n	8001b26 <app_footcontrol_process+0x2e>
	if(!cyclicFlag) return;
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <app_footcontrol_process+0x40>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f083 0301 	eor.w	r3, r3, #1
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d105      	bne.n	8001b2a <app_footcontrol_process+0x32>
	//TODO: logic
	cyclicFlag = false;
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <app_footcontrol_process+0x40>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
 8001b24:	e002      	b.n	8001b2c <app_footcontrol_process+0x34>
	if(!self->enable) return;
 8001b26:	bf00      	nop
 8001b28:	e000      	b.n	8001b2c <app_footcontrol_process+0x34>
	if(!cyclicFlag) return;
 8001b2a:	bf00      	nop
}
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20001b27 	.word	0x20001b27

08001b3c <app_footcontrol_receiveMsg>:
void app_footcontrol_cyclic1ms(eal_task_Task *self, bool stat){
	cyclicFlag = true;
	if(internalTimer > 0)--internalTimer;
}

void app_footcontrol_receiveMsg(eal_task_Task *self, msg_Message *message){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
	if(status != app_footcontrol_ACTIVE) return;
 8001b46:	4b4d      	ldr	r3, [pc, #308]	; (8001c7c <app_footcontrol_receiveMsg+0x140>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f040 8092 	bne.w	8001c74 <app_footcontrol_receiveMsg+0x138>
	/*Button message parsing*/
	if(message->type == app_cfg_BTN_MSG){
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	791b      	ldrb	r3, [r3, #4]
 8001b54:	2b42      	cmp	r3, #66	; 0x42
 8001b56:	f040 808e 	bne.w	8001c76 <app_footcontrol_receiveMsg+0x13a>
		/*Action parsing*/
		if(msg_isAction(message)){
 8001b5a:	6838      	ldr	r0, [r7, #0]
 8001b5c:	f007 ff89 	bl	8009a72 <msg_isAction>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f040 8087 	bne.w	8001c76 <app_footcontrol_receiveMsg+0x13a>
//			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
		}
		/*Event parsing*/
		else{
			uint16_t idx = message->index;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	81fb      	strh	r3, [r7, #14]
			if(app_model_model.footswitches[idx].mode == app_footcontrol_GPIO_INPUT){
 8001b6e:	4b44      	ldr	r3, [pc, #272]	; (8001c80 <app_footcontrol_receiveMsg+0x144>)
 8001b70:	68d9      	ldr	r1, [r3, #12]
 8001b72:	89fa      	ldrh	r2, [r7, #14]
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	440b      	add	r3, r1
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d178      	bne.n	8001c76 <app_footcontrol_receiveMsg+0x13a>
				if((message->value == app_cfg_btn_STAT_RELEASED) && (app_model_model.footswitches[idx].release.presetNr < app_cfg_NMBR_PRESETS)) sendDmxPreset(self, &app_model_model.footswitches[idx].release);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d118      	bne.n	8001bc0 <app_footcontrol_receiveMsg+0x84>
 8001b8e:	4b3c      	ldr	r3, [pc, #240]	; (8001c80 <app_footcontrol_receiveMsg+0x144>)
 8001b90:	68d9      	ldr	r1, [r3, #12]
 8001b92:	89fa      	ldrh	r2, [r7, #14]
 8001b94:	4613      	mov	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4413      	add	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	440b      	add	r3, r1
 8001b9e:	799b      	ldrb	r3, [r3, #6]
 8001ba0:	2b09      	cmp	r3, #9
 8001ba2:	d80d      	bhi.n	8001bc0 <app_footcontrol_receiveMsg+0x84>
 8001ba4:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <app_footcontrol_receiveMsg+0x144>)
 8001ba6:	68d9      	ldr	r1, [r3, #12]
 8001ba8:	89fa      	ldrh	r2, [r7, #14]
 8001baa:	4613      	mov	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4413      	add	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3306      	adds	r3, #6
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f863 	bl	8001c84 <sendDmxPreset>
 8001bbe:	e05a      	b.n	8001c76 <app_footcontrol_receiveMsg+0x13a>
				else if((message->value == app_cfg_btn_STAT_PRESSED) && (app_model_model.footswitches[idx].press.presetNr < app_cfg_NMBR_PRESETS)) sendDmxPreset(self, &app_model_model.footswitches[idx].press);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d118      	bne.n	8001bfc <app_footcontrol_receiveMsg+0xc0>
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <app_footcontrol_receiveMsg+0x144>)
 8001bcc:	68d9      	ldr	r1, [r3, #12]
 8001bce:	89fa      	ldrh	r2, [r7, #14]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	440b      	add	r3, r1
 8001bda:	789b      	ldrb	r3, [r3, #2]
 8001bdc:	2b09      	cmp	r3, #9
 8001bde:	d80d      	bhi.n	8001bfc <app_footcontrol_receiveMsg+0xc0>
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <app_footcontrol_receiveMsg+0x144>)
 8001be2:	68d9      	ldr	r1, [r3, #12]
 8001be4:	89fa      	ldrh	r2, [r7, #14]
 8001be6:	4613      	mov	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4413      	add	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	440b      	add	r3, r1
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f845 	bl	8001c84 <sendDmxPreset>
 8001bfa:	e03c      	b.n	8001c76 <app_footcontrol_receiveMsg+0x13a>
				else if((message->value == app_cfg_btn_STAT_HOLD_SHORT) && (app_model_model.footswitches[idx].holdShort.presetNr < app_cfg_NMBR_PRESETS)) sendDmxPreset(self, &app_model_model.footswitches[idx].holdShort);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d118      	bne.n	8001c38 <app_footcontrol_receiveMsg+0xfc>
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <app_footcontrol_receiveMsg+0x144>)
 8001c08:	68d9      	ldr	r1, [r3, #12]
 8001c0a:	89fa      	ldrh	r2, [r7, #14]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	440b      	add	r3, r1
 8001c16:	7a9b      	ldrb	r3, [r3, #10]
 8001c18:	2b09      	cmp	r3, #9
 8001c1a:	d80d      	bhi.n	8001c38 <app_footcontrol_receiveMsg+0xfc>
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <app_footcontrol_receiveMsg+0x144>)
 8001c1e:	68d9      	ldr	r1, [r3, #12]
 8001c20:	89fa      	ldrh	r2, [r7, #14]
 8001c22:	4613      	mov	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4413      	add	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	440b      	add	r3, r1
 8001c2c:	330a      	adds	r3, #10
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f827 	bl	8001c84 <sendDmxPreset>
 8001c36:	e01e      	b.n	8001c76 <app_footcontrol_receiveMsg+0x13a>
				else if((message->value == app_cfg_btn_STAT_HOLD_LONG) && (app_model_model.footswitches[idx].holdLong.presetNr < app_cfg_NMBR_PRESETS)) sendDmxPreset(self, &app_model_model.footswitches[idx].holdLong);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d119      	bne.n	8001c76 <app_footcontrol_receiveMsg+0x13a>
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <app_footcontrol_receiveMsg+0x144>)
 8001c44:	68d9      	ldr	r1, [r3, #12]
 8001c46:	89fa      	ldrh	r2, [r7, #14]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	440b      	add	r3, r1
 8001c52:	7b9b      	ldrb	r3, [r3, #14]
 8001c54:	2b09      	cmp	r3, #9
 8001c56:	d80e      	bhi.n	8001c76 <app_footcontrol_receiveMsg+0x13a>
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <app_footcontrol_receiveMsg+0x144>)
 8001c5a:	68d9      	ldr	r1, [r3, #12]
 8001c5c:	89fa      	ldrh	r2, [r7, #14]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	440b      	add	r3, r1
 8001c68:	330e      	adds	r3, #14
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f809 	bl	8001c84 <sendDmxPreset>
 8001c72:	e000      	b.n	8001c76 <app_footcontrol_receiveMsg+0x13a>
	if(status != app_footcontrol_ACTIVE) return;
 8001c74:	bf00      	nop
			}
		}
	}
}
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20001b26 	.word	0x20001b26
 8001c80:	200010c0 	.word	0x200010c0

08001c84 <sendDmxPreset>:

/* Helper ----------------------------------------------------------------------*/
static void sendDmxPreset(eal_task_Task *self, app_footcontrol_cfg_PresetCfg *preset){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
	if(self->sendMsg == NULL) return;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d01e      	beq.n	8001cd4 <sendDmxPreset+0x50>
	msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_ACTION(preset->presetNr - 1), preset->triggerValue, 0, 0);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	b21b      	sxth	r3, r3
 8001ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	813b      	strh	r3, [r7, #8]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cb6:	817b      	strh	r3, [r7, #10]
 8001cb8:	2350      	movs	r3, #80	; 0x50
 8001cba:	733b      	strb	r3, [r7, #12]
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	737b      	strb	r3, [r7, #13]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	81fb      	strh	r3, [r7, #14]
	self->sendMsg(self, &newMessage);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	f107 0208 	add.w	r2, r7, #8
 8001ccc:	4611      	mov	r1, r2
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
 8001cd2:	e000      	b.n	8001cd6 <sendDmxPreset+0x52>
	if(self->sendMsg == NULL) return;
 8001cd4:	bf00      	nop
}
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <app_interface_init>:
static void uploadConfig();
static void sendDmxPreset(eal_task_Task *self, uint8_t preset);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_interface_init(eal_task_Task *self){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	app_usb_init();
 8001ce4:	f000 ffba 	bl	8002c5c <app_usb_init>
	app_usb_rxBufferInit(usbRxData, sizeof(usbRxData));
 8001ce8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cec:	4817      	ldr	r0, [pc, #92]	; (8001d4c <app_interface_init+0x70>)
 8001cee:	f000 ffc9 	bl	8002c84 <app_usb_rxBufferInit>
	app_usb_txBufferInit(usbTxData, sizeof(usbTxData));
 8001cf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cf6:	4816      	ldr	r0, [pc, #88]	; (8001d50 <app_interface_init+0x74>)
 8001cf8:	f000 ffde 	bl	8002cb8 <app_usb_txBufferInit>

	app_uart_bufferInit(&uart4TxBuf, uart4TxData, sizeof(uart4TxData));
 8001cfc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8001d00:	4914      	ldr	r1, [pc, #80]	; (8001d54 <app_interface_init+0x78>)
 8001d02:	4815      	ldr	r0, [pc, #84]	; (8001d58 <app_interface_init+0x7c>)
 8001d04:	f001 f90a 	bl	8002f1c <app_uart_bufferInit>
	app_uart_bufferInit(&uart4RxBuf, uart4RxData, sizeof(uart4RxData));
 8001d08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d0c:	4913      	ldr	r1, [pc, #76]	; (8001d5c <app_interface_init+0x80>)
 8001d0e:	4814      	ldr	r0, [pc, #80]	; (8001d60 <app_interface_init+0x84>)
 8001d10:	f001 f904 	bl	8002f1c <app_uart_bufferInit>
	app_uart_enableReceiveInt(huart4.Instance);
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <app_interface_init+0x88>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f001 f918 	bl	8002f4e <app_uart_enableReceiveInt>

	cyclicFlag = false;
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <app_interface_init+0x8c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
	internalTimer = 0;
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <app_interface_init+0x90>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	801a      	strh	r2, [r3, #0]
	uploadTimer = 0;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <app_interface_init+0x94>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	801a      	strh	r2, [r3, #0]
	waitForAck = false;
 8001d30:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <app_interface_init+0x98>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
	uploadState = upload_NONE;
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <app_interface_init+0x9c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
	uploadCmdCounter = 0;
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <app_interface_init+0xa0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	801a      	strh	r2, [r3, #0]
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20004b28 	.word	0x20004b28
 8001d50:	20004728 	.word	0x20004728
 8001d54:	20001b28 	.word	0x20001b28
 8001d58:	200000dc 	.word	0x200000dc
 8001d5c:	20004328 	.word	0x20004328
 8001d60:	200000e8 	.word	0x200000e8
 8001d64:	2000a690 	.word	0x2000a690
 8001d68:	20009f5c 	.word	0x20009f5c
 8001d6c:	20009f5e 	.word	0x20009f5e
 8001d70:	20009f60 	.word	0x20009f60
 8001d74:	20009f64 	.word	0x20009f64
 8001d78:	20009f65 	.word	0x20009f65
 8001d7c:	20009f66 	.word	0x20009f66

08001d80 <app_interface_process>:

void app_interface_process(eal_task_Task *self){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	f083 0301 	eor.w	r3, r3, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d137      	bne.n	8001e06 <app_interface_process+0x86>
	app_usb_txLoop();
 8001d96:	f000 ffa9 	bl	8002cec <app_usb_txLoop>
//	sendToInterface();
	checkInterfaces(self);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f8ba 	bl	8001f14 <checkInterfaces>
	//usbToUartBridge(self);
	if(!cyclicFlag) return;
 8001da0:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <app_interface_process+0x94>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f083 0301 	eor.w	r3, r3, #1
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d12c      	bne.n	8001e0a <app_interface_process+0x8a>
	if(++sendTimer >= SEND_TIMER){
 8001db0:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <app_interface_process+0x98>)
 8001db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	3301      	adds	r3, #1
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	b21a      	sxth	r2, r3
 8001dbe:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <app_interface_process+0x98>)
 8001dc0:	801a      	strh	r2, [r3, #0]
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <app_interface_process+0x98>)
 8001dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	dd04      	ble.n	8001dd6 <app_interface_process+0x56>
		sendToInterface();
 8001dcc:	f000 f856 	bl	8001e7c <sendToInterface>
		sendTimer = 0;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <app_interface_process+0x98>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	801a      	strh	r2, [r3, #0]
	}
	if(++uploadTimer >= UPLOAD_TIMER) {
 8001dd6:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <app_interface_process+0x9c>)
 8001dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	3301      	adds	r3, #1
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	b21a      	sxth	r2, r3
 8001de4:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <app_interface_process+0x9c>)
 8001de6:	801a      	strh	r2, [r3, #0]
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <app_interface_process+0x9c>)
 8001dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	dd05      	ble.n	8001dfe <app_interface_process+0x7e>
		uploadConfig(self);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 fdc2 	bl	800297c <uploadConfig>
		uploadTimer = 0;
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <app_interface_process+0x9c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	801a      	strh	r2, [r3, #0]
	}
	cyclicFlag = false;
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <app_interface_process+0x94>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
 8001e04:	e002      	b.n	8001e0c <app_interface_process+0x8c>
	if(!self->enable) return;
 8001e06:	bf00      	nop
 8001e08:	e000      	b.n	8001e0c <app_interface_process+0x8c>
	if(!cyclicFlag) return;
 8001e0a:	bf00      	nop
}
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20009f5c 	.word	0x20009f5c
 8001e18:	20009f62 	.word	0x20009f62
 8001e1c:	20009f60 	.word	0x20009f60

08001e20 <app_interface_cyclic1ms>:

void app_interface_cyclic1ms(eal_task_Task *self, bool stat){
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <app_interface_cyclic1ms+0x3c>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	701a      	strb	r2, [r3, #0]
	if(internalTimer > 0)--internalTimer;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <app_interface_cyclic1ms+0x40>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	b21b      	sxth	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	dd08      	ble.n	8001e4e <app_interface_cyclic1ms+0x2e>
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <app_interface_cyclic1ms+0x40>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	b21b      	sxth	r3, r3
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	b21a      	sxth	r2, r3
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <app_interface_cyclic1ms+0x40>)
 8001e4c:	801a      	strh	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20009f5c 	.word	0x20009f5c
 8001e60:	20009f5e 	.word	0x20009f5e

08001e64 <app_interface_receiveMsg>:

void app_interface_receiveMsg(eal_task_Task *self, msg_Message *message){
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <sendToInterface>:
}

/******************************************************************************
* Normal receiver
*******************************************************************************/
static void sendToInterface(){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
	app_interface_cmd_Cmd newCmd;
	if(app_interface_cmd_getNext(&newCmd, &cmdTxBuf)){
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	491c      	ldr	r1, [pc, #112]	; (8001ef8 <sendToInterface+0x7c>)
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fe5f 	bl	8002b4a <app_interface_cmd_getNext>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d02e      	beq.n	8001ef0 <sendToInterface+0x74>
		signalizeCommuniction();
 8001e92:	f000 fdff 	bl	8002a94 <signalizeCommuniction>
		if(!app_interface_cmd_isAck(&newCmd)) waitForAck = true;
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fecd 	bl	8002c38 <app_interface_cmd_isAck>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f083 0301 	eor.w	r3, r3, #1
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <sendToInterface+0x34>
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <sendToInterface+0x80>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
		if(activeInterface == &usbInterface){
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <sendToInterface+0x84>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a13      	ldr	r2, [pc, #76]	; (8001f04 <sendToInterface+0x88>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d109      	bne.n	8001ece <sendToInterface+0x52>
			if(app_usb_writeStringToBuffer(newCmd.data) != ringbuffer_OK){
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 ffb3 	bl	8002e28 <app_usb_writeStringToBuffer>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d013      	beq.n	8001ef0 <sendToInterface+0x74>
				signalizeError();
 8001ec8:	f000 fdf0 	bl	8002aac <signalizeError>
			if(app_uart_writeStringToBuffer(newCmd.data, &uart4TxBuf, huart4.Instance) != ringbuffer_OK){
				signalizeError();
			}
		}
	}
}
 8001ecc:	e010      	b.n	8001ef0 <sendToInterface+0x74>
		}else if(activeInterface == &btInterface){
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <sendToInterface+0x84>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a0d      	ldr	r2, [pc, #52]	; (8001f08 <sendToInterface+0x8c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d10b      	bne.n	8001ef0 <sendToInterface+0x74>
			if(app_uart_writeStringToBuffer(newCmd.data, &uart4TxBuf, huart4.Instance) != ringbuffer_OK){
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <sendToInterface+0x90>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	490c      	ldr	r1, [pc, #48]	; (8001f10 <sendToInterface+0x94>)
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 f854 	bl	8002f8e <app_uart_writeStringToBuffer>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d001      	beq.n	8001ef0 <sendToInterface+0x74>
				signalizeError();
 8001eec:	f000 fdde 	bl	8002aac <signalizeError>
}
 8001ef0:	bf00      	nop
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	200000f4 	.word	0x200000f4
 8001efc:	20009f64 	.word	0x20009f64
 8001f00:	20009f58 	.word	0x20009f58
 8001f04:	20009f40 	.word	0x20009f40
 8001f08:	20009f28 	.word	0x20009f28
 8001f0c:	2000a690 	.word	0x2000a690
 8001f10:	200000dc 	.word	0x200000dc

08001f14 <checkInterfaces>:

static void checkInterfaces(eal_task_Task *self){
 8001f14:	b5b0      	push	{r4, r5, r7, lr}
 8001f16:	b08c      	sub	sp, #48	; 0x30
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	char intData;
	/*Receive char and check if command was found*/
	if(app_usb_getCharFromRxBuffer(&intData) == ringbuffer_OK) {
 8001f1c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 ff5d 	bl	8002de0 <app_usb_getCharFromRxBuffer>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d10b      	bne.n	8001f44 <checkInterfaces+0x30>
		if(app_interface_cmd_parseCmd(intData, &cmdRxBuf)){
 8001f2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f30:	492a      	ldr	r1, [pc, #168]	; (8001fdc <checkInterfaces+0xc8>)
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 fe44 	bl	8002bc0 <app_interface_cmd_parseCmd>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <checkInterfaces+0x30>
			activeInterface = &usbInterface;
 8001f3e:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <checkInterfaces+0xcc>)
 8001f40:	4a28      	ldr	r2, [pc, #160]	; (8001fe4 <checkInterfaces+0xd0>)
 8001f42:	601a      	str	r2, [r3, #0]
		}
	}
	if(app_uart_getCharFromBuffer(&intData, &uart4RxBuf) == ringbuffer_OK) {
 8001f44:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001f48:	4927      	ldr	r1, [pc, #156]	; (8001fe8 <checkInterfaces+0xd4>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f001 f80f 	bl	8002f6e <app_uart_getCharFromBuffer>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d10b      	bne.n	8001f6e <checkInterfaces+0x5a>
		if(app_interface_cmd_parseCmd(intData, &cmdRxBuf)){
 8001f56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f5a:	4920      	ldr	r1, [pc, #128]	; (8001fdc <checkInterfaces+0xc8>)
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 fe2f 	bl	8002bc0 <app_interface_cmd_parseCmd>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <checkInterfaces+0x5a>
			activeInterface = &btInterface;
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <checkInterfaces+0xcc>)
 8001f6a:	4a20      	ldr	r2, [pc, #128]	; (8001fec <checkInterfaces+0xd8>)
 8001f6c:	601a      	str	r2, [r3, #0]
		}
	}
	/*Check if a full command was received*/
	app_interface_cmd_Cmd newCmd;
	if(app_interface_cmd_getNext(&newCmd, &cmdRxBuf)){
 8001f6e:	f107 031c 	add.w	r3, r7, #28
 8001f72:	491a      	ldr	r1, [pc, #104]	; (8001fdc <checkInterfaces+0xc8>)
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 fde8 	bl	8002b4a <app_interface_cmd_getNext>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d028      	beq.n	8001fd2 <checkInterfaces+0xbe>
		signalizeCommuniction();
 8001f80:	f000 fd88 	bl	8002a94 <signalizeCommuniction>
		commandFound(self, &newCmd);
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	4619      	mov	r1, r3
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f834 	bl	8001ff8 <commandFound>
		/*Send acknowledge*/
		if(!app_interface_cmd_isAck(&newCmd)){
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 fe4f 	bl	8002c38 <app_interface_cmd_isAck>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f083 0301 	eor.w	r3, r3, #1
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d015      	beq.n	8001fd2 <checkInterfaces+0xbe>
			app_interface_cmd_Cmd ack = {.data = "#A000000000000\r\n"};
 8001fa6:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <checkInterfaces+0xdc>)
 8001fa8:	f107 0408 	add.w	r4, r7, #8
 8001fac:	461d      	mov	r5, r3
 8001fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb2:	682b      	ldr	r3, [r5, #0]
 8001fb4:	7023      	strb	r3, [r4, #0]
			if(!app_interface_cmd_writeCmd(&ack, &cmdTxBuf)) signalizeError();
 8001fb6:	f107 0308 	add.w	r3, r7, #8
 8001fba:	490e      	ldr	r1, [pc, #56]	; (8001ff4 <checkInterfaces+0xe0>)
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fd93 	bl	8002ae8 <app_interface_cmd_writeCmd>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	f083 0301 	eor.w	r3, r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <checkInterfaces+0xbe>
 8001fce:	f000 fd6d 	bl	8002aac <signalizeError>
		}
	}
}
 8001fd2:	bf00      	nop
 8001fd4:	3730      	adds	r7, #48	; 0x30
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000104 	.word	0x20000104
 8001fe0:	20009f58 	.word	0x20009f58
 8001fe4:	20009f40 	.word	0x20009f40
 8001fe8:	200000e8 	.word	0x200000e8
 8001fec:	20009f28 	.word	0x20009f28
 8001ff0:	0800d670 	.word	0x0800d670
 8001ff4:	200000f4 	.word	0x200000f4

08001ff8 <commandFound>:


static bool commandFound(eal_task_Task *self, app_interface_cmd_Cmd *command){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
	char type = command->data[app_interface_cmd_TYPE_POS];
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	785b      	ldrb	r3, [r3, #1]
 8002006:	73fb      	strb	r3, [r7, #15]
	if(type == 'T') return parseTransition(self, command);
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	2b54      	cmp	r3, #84	; 0x54
 800200c:	d105      	bne.n	800201a <commandFound+0x22>
 800200e:	6839      	ldr	r1, [r7, #0]
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f835 	bl	8002080 <parseTransition>
 8002016:	4603      	mov	r3, r0
 8002018:	e029      	b.n	800206e <commandFound+0x76>
	else if(type == 'F') return parseFootswitch(self,command);
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	2b46      	cmp	r3, #70	; 0x46
 800201e:	d105      	bne.n	800202c <commandFound+0x34>
 8002020:	6839      	ldr	r1, [r7, #0]
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fabc 	bl	80025a0 <parseFootswitch>
 8002028:	4603      	mov	r3, r0
 800202a:	e020      	b.n	800206e <commandFound+0x76>
	else if(type == 'P') return parsePreset(self,command);
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	2b50      	cmp	r3, #80	; 0x50
 8002030:	d105      	bne.n	800203e <commandFound+0x46>
 8002032:	6839      	ldr	r1, [r7, #0]
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 fb9b 	bl	8002770 <parsePreset>
 800203a:	4603      	mov	r3, r0
 800203c:	e017      	b.n	800206e <commandFound+0x76>
	else if(type == 'L') {
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	2b4c      	cmp	r3, #76	; 0x4c
 8002042:	d10b      	bne.n	800205c <commandFound+0x64>
		app_interface_cmd_killBuffer(&cmdTxBuf);
 8002044:	480c      	ldr	r0, [pc, #48]	; (8002078 <commandFound+0x80>)
 8002046:	f000 fdaa 	bl	8002b9e <app_interface_cmd_killBuffer>
		waitForAck = false;
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <commandFound+0x84>)
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
		return parseLoadConfig(self,command);
 8002050:	6839      	ldr	r1, [r7, #0]
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fc76 	bl	8002944 <parseLoadConfig>
 8002058:	4603      	mov	r3, r0
 800205a:	e008      	b.n	800206e <commandFound+0x76>
	}
	else if(type == 'A'){
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	2b41      	cmp	r3, #65	; 0x41
 8002060:	d104      	bne.n	800206c <commandFound+0x74>
		waitForAck = false;
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <commandFound+0x84>)
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
		return true;
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <commandFound+0x76>
	}
	return true;
 800206c:	2301      	movs	r3, #1
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200000f4 	.word	0x200000f4
 800207c:	20009f64 	.word	0x20009f64

08002080 <parseTransition>:

static bool parseTransition(eal_task_Task *self, app_interface_cmd_Cmd *command){
 8002080:	b580      	push	{r7, lr}
 8002082:	b098      	sub	sp, #96	; 0x60
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
	char cmdIdx = command->data[2];
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	789b      	ldrb	r3, [r3, #2]
 800208e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	char prNrString[3];
	char trNrString[3];
	prNrString[0] = command->data[3]; prNrString[1] = command->data[4];
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	78db      	ldrb	r3, [r3, #3]
 8002096:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	791b      	ldrb	r3, [r3, #4]
 800209e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	trNrString[0] = command->data[5]; trNrString[1] = command->data[6];
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	795b      	ldrb	r3, [r3, #5]
 80020a6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	799b      	ldrb	r3, [r3, #6]
 80020ae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	long prNr = strtol(prNrString, NULL, 16);
 80020b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020b6:	2210      	movs	r2, #16
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f00a fe98 	bl	800cdf0 <strtol>
 80020c0:	6578      	str	r0, [r7, #84]	; 0x54
	long trNr = strtol(trNrString, NULL, 16);
 80020c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020c6:	2210      	movs	r2, #16
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f00a fe90 	bl	800cdf0 <strtol>
 80020d0:	6538      	str	r0, [r7, #80]	; 0x50
	if(cmdIdx == '0'){
 80020d2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80020d6:	2b30      	cmp	r3, #48	; 0x30
 80020d8:	d151      	bne.n	800217e <parseTransition+0xfe>
		char chString[3] = "";
 80020da:	4ba5      	ldr	r3, [pc, #660]	; (8002370 <parseTransition+0x2f0>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80020e2:	f107 0329 	add.w	r3, r7, #41	; 0x29
 80020e6:	2200      	movs	r2, #0
 80020e8:	801a      	strh	r2, [r3, #0]
		char startString[3] = "";
 80020ea:	4ba1      	ldr	r3, [pc, #644]	; (8002370 <parseTransition+0x2f0>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80020f2:	f107 0325 	add.w	r3, r7, #37	; 0x25
 80020f6:	2200      	movs	r2, #0
 80020f8:	801a      	strh	r2, [r3, #0]
		chString[0] = command->data[7]; chString[1] = command->data[8];
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	79db      	ldrb	r3, [r3, #7]
 80020fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	7a1b      	ldrb	r3, [r3, #8]
 8002106:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		startString[0] = command->data[9]; startString[1] = command->data[10];
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	7a5b      	ldrb	r3, [r3, #9]
 800210e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	7a9b      	ldrb	r3, [r3, #10]
 8002116:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		long ch = strtol(chString, NULL, 16);
 800211a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800211e:	2210      	movs	r2, #16
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f00a fe64 	bl	800cdf0 <strtol>
 8002128:	64f8      	str	r0, [r7, #76]	; 0x4c
		long start = strtol(startString, NULL, 16);
 800212a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212e:	2210      	movs	r2, #16
 8002130:	2100      	movs	r1, #0
 8002132:	4618      	mov	r0, r3
 8002134:	f00a fe5c 	bl	800cdf0 <strtol>
 8002138:	64b8      	str	r0, [r7, #72]	; 0x48
		app_model_model.presets[prNr].presetTransitionSettings[trNr].dmxCh = ch;
 800213a:	4b8e      	ldr	r3, [pc, #568]	; (8002374 <parseTransition+0x2f4>)
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002140:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	441a      	add	r2, r3
 800214a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800214c:	b299      	uxth	r1, r3
 800214e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002150:	3302      	adds	r3, #2
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	4413      	add	r3, r2
 8002156:	460a      	mov	r2, r1
 8002158:	801a      	strh	r2, [r3, #0]
		app_model_model.presets[prNr].presetTransitionSettings[trNr].dmxStartVal = start;
 800215a:	4b86      	ldr	r3, [pc, #536]	; (8002374 <parseTransition+0x2f4>)
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002160:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	441a      	add	r2, r3
 800216a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800216c:	b2d9      	uxtb	r1, r3
 800216e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002170:	3302      	adds	r3, #2
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	4413      	add	r3, r2
 8002176:	3302      	adds	r3, #2
 8002178:	460a      	mov	r2, r1
 800217a:	701a      	strb	r2, [r3, #0]
 800217c:	e0f3      	b.n	8002366 <parseTransition+0x2e6>
	}else if(cmdIdx == '1'){
 800217e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002182:	2b31      	cmp	r3, #49	; 0x31
 8002184:	d150      	bne.n	8002228 <parseTransition+0x1a8>
		char endString[3] = "";
 8002186:	4b7a      	ldr	r3, [pc, #488]	; (8002370 <parseTransition+0x2f0>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	f887 3020 	strb.w	r3, [r7, #32]
 800218e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8002192:	2200      	movs	r2, #0
 8002194:	801a      	strh	r2, [r3, #0]
		char timeString[5] = "";
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
 800219a:	2300      	movs	r3, #0
 800219c:	773b      	strb	r3, [r7, #28]
		endString[0] = command->data[7]; endString[1] = command->data[8];
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	79db      	ldrb	r3, [r3, #7]
 80021a2:	f887 3020 	strb.w	r3, [r7, #32]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	7a1b      	ldrb	r3, [r3, #8]
 80021aa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		timeString[0] = command->data[9]; timeString[1] = command->data[10]; timeString[2] = command->data[11]; timeString[3] = command->data[12];
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	7a5b      	ldrb	r3, [r3, #9]
 80021b2:	763b      	strb	r3, [r7, #24]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	7a9b      	ldrb	r3, [r3, #10]
 80021b8:	767b      	strb	r3, [r7, #25]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	7adb      	ldrb	r3, [r3, #11]
 80021be:	76bb      	strb	r3, [r7, #26]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	7b1b      	ldrb	r3, [r3, #12]
 80021c4:	76fb      	strb	r3, [r7, #27]
		long end = strtol(endString, NULL, 16);
 80021c6:	f107 0320 	add.w	r3, r7, #32
 80021ca:	2210      	movs	r2, #16
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f00a fe0e 	bl	800cdf0 <strtol>
 80021d4:	6478      	str	r0, [r7, #68]	; 0x44
		long time = strtol(timeString, NULL, 16);
 80021d6:	f107 0318 	add.w	r3, r7, #24
 80021da:	2210      	movs	r2, #16
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f00a fe06 	bl	800cdf0 <strtol>
 80021e4:	6438      	str	r0, [r7, #64]	; 0x40
		app_model_model.presets[prNr].presetTransitionSettings[trNr].dmxEndVal = end;
 80021e6:	4b63      	ldr	r3, [pc, #396]	; (8002374 <parseTransition+0x2f4>)
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ec:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	441a      	add	r2, r3
 80021f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f8:	b2d9      	uxtb	r1, r3
 80021fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021fc:	3302      	adds	r3, #2
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	4413      	add	r3, r2
 8002202:	3303      	adds	r3, #3
 8002204:	460a      	mov	r2, r1
 8002206:	701a      	strb	r2, [r3, #0]
		app_model_model.presets[prNr].presetTransitionSettings[trNr].transTime_ms = time;
 8002208:	4b5a      	ldr	r3, [pc, #360]	; (8002374 <parseTransition+0x2f4>)
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800220e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	18d1      	adds	r1, r2, r3
 8002218:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800221a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800221c:	3302      	adds	r3, #2
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	440b      	add	r3, r1
 8002222:	3304      	adds	r3, #4
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e09e      	b.n	8002366 <parseTransition+0x2e6>
	}else if(cmdIdx == '2'){
 8002228:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800222c:	2b32      	cmp	r3, #50	; 0x32
 800222e:	f040 809a 	bne.w	8002366 <parseTransition+0x2e6>
		char delayString[5] = "";
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	2300      	movs	r3, #0
 8002238:	753b      	strb	r3, [r7, #20]
		char rampString[3] = "";
 800223a:	4b4d      	ldr	r3, [pc, #308]	; (8002370 <parseTransition+0x2f0>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	733b      	strb	r3, [r7, #12]
 8002240:	f107 030d 	add.w	r3, r7, #13
 8002244:	2200      	movs	r2, #0
 8002246:	801a      	strh	r2, [r3, #0]
		char activeString;
		delayString[0] = command->data[7]; delayString[1] = command->data[8]; delayString[2] = command->data[9]; delayString[3] = command->data[10];
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	79db      	ldrb	r3, [r3, #7]
 800224c:	743b      	strb	r3, [r7, #16]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	7a1b      	ldrb	r3, [r3, #8]
 8002252:	747b      	strb	r3, [r7, #17]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	7a5b      	ldrb	r3, [r3, #9]
 8002258:	74bb      	strb	r3, [r7, #18]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	7a9b      	ldrb	r3, [r3, #10]
 800225e:	74fb      	strb	r3, [r7, #19]
		rampString[0] = command->data[11]; rampString[1] = command->data[12];
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	7adb      	ldrb	r3, [r3, #11]
 8002264:	733b      	strb	r3, [r7, #12]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	7b1b      	ldrb	r3, [r3, #12]
 800226a:	737b      	strb	r3, [r7, #13]
		activeString = command->data[13];
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	7b5b      	ldrb	r3, [r3, #13]
 8002270:	72fb      	strb	r3, [r7, #11]
		long delay = strtol(delayString, NULL, 16);
 8002272:	f107 0310 	add.w	r3, r7, #16
 8002276:	2210      	movs	r2, #16
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f00a fdb8 	bl	800cdf0 <strtol>
 8002280:	63f8      	str	r0, [r7, #60]	; 0x3c
		long ramp = strtol(rampString, NULL, 16);
 8002282:	f107 030c 	add.w	r3, r7, #12
 8002286:	2210      	movs	r2, #16
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f00a fdb0 	bl	800cdf0 <strtol>
 8002290:	63b8      	str	r0, [r7, #56]	; 0x38
		long active = strtol(&activeString, NULL, 16);
 8002292:	f107 030b 	add.w	r3, r7, #11
 8002296:	2210      	movs	r2, #16
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f00a fda8 	bl	800cdf0 <strtol>
 80022a0:	6378      	str	r0, [r7, #52]	; 0x34
		app_model_model.presets[prNr].presetTransitionSettings[trNr].transDelay_ms = delay;
 80022a2:	4b34      	ldr	r3, [pc, #208]	; (8002374 <parseTransition+0x2f4>)
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a8:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	18d1      	adds	r1, r2, r3
 80022b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	440b      	add	r3, r1
 80022ba:	3328      	adds	r3, #40	; 0x28
 80022bc:	601a      	str	r2, [r3, #0]
		app_model_model.presets[prNr].presetTransitionSettings[trNr].transRamp = ramp;
 80022be:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <parseTransition+0x2f4>)
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c4:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	441a      	add	r2, r3
 80022ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d0:	b2d9      	uxtb	r1, r3
 80022d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	4413      	add	r3, r2
 80022d8:	332c      	adds	r3, #44	; 0x2c
 80022da:	460a      	mov	r2, r1
 80022dc:	701a      	strb	r2, [r3, #0]
		app_model_model.presets[prNr].presetTransitionSettings[trNr].enable = active;
 80022de:	4b25      	ldr	r3, [pc, #148]	; (8002374 <parseTransition+0x2f4>)
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022e4:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	441a      	add	r2, r3
 80022ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf14      	ite	ne
 80022f4:	2301      	movne	r3, #1
 80022f6:	2300      	moveq	r3, #0
 80022f8:	b2d9      	uxtb	r1, r3
 80022fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	4413      	add	r3, r2
 8002300:	332d      	adds	r3, #45	; 0x2d
 8002302:	460a      	mov	r2, r1
 8002304:	701a      	strb	r2, [r3, #0]
		app_model_model.presets[prNr].transitionEnableSize = 0;
 8002306:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <parseTransition+0x2f4>)
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800230c:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
		for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 800231a:	2300      	movs	r3, #0
 800231c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800231e:	e01c      	b.n	800235a <parseTransition+0x2da>
			if(app_model_model.presets[prNr].presetTransitionSettings[j].enable) ++app_model_model.presets[prNr].transitionEnableSize;
 8002320:	4b14      	ldr	r3, [pc, #80]	; (8002374 <parseTransition+0x2f4>)
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002326:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	441a      	add	r2, r3
 8002330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	4413      	add	r3, r2
 8002336:	332d      	adds	r3, #45	; 0x2d
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <parseTransition+0x2d4>
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <parseTransition+0x2f4>)
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002344:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	69da      	ldr	r2, [r3, #28]
 8002350:	3201      	adds	r2, #1
 8002352:	61da      	str	r2, [r3, #28]
		for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8002354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002356:	3301      	adds	r3, #1
 8002358:	65fb      	str	r3, [r7, #92]	; 0x5c
 800235a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800235c:	2b13      	cmp	r3, #19
 800235e:	dddf      	ble.n	8002320 <parseTransition+0x2a0>
		}
		app_model_model.dirty = true;
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <parseTransition+0x2f4>)
 8002362:	2201      	movs	r2, #1
 8002364:	741a      	strb	r2, [r3, #16]
	}
	return true;
 8002366:	2301      	movs	r3, #1
}
 8002368:	4618      	mov	r0, r3
 800236a:	3760      	adds	r7, #96	; 0x60
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	0800d684 	.word	0x0800d684
 8002374:	200010c0 	.word	0x200010c0

08002378 <sendTransition>:
static bool sendTransition(eal_task_Task *self, uint8_t index){
 8002378:	b5b0      	push	{r4, r5, r7, lr}
 800237a:	b08e      	sub	sp, #56	; 0x38
 800237c:	af04      	add	r7, sp, #16
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	70fb      	strb	r3, [r7, #3]
	uint8_t prNr = index/app_cfg_NMBR_TRANSITIONS;
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	4a80      	ldr	r2, [pc, #512]	; (8002588 <sendTransition+0x210>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t trNr = index - (prNr*app_cfg_NMBR_TRANSITIONS);
 8002392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002396:	461a      	mov	r2, r3
 8002398:	0112      	lsls	r2, r2, #4
 800239a:	1ad2      	subs	r2, r2, r3
 800239c:	0092      	lsls	r2, r2, #2
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	4413      	add	r3, r2
 80023a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t ch = app_model_model.presets[prNr].presetTransitionSettings[trNr].dmxCh;
 80023ac:	4b77      	ldr	r3, [pc, #476]	; (800258c <sendTransition+0x214>)
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023b4:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	441a      	add	r2, r3
 80023be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80023c2:	3302      	adds	r3, #2
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	4413      	add	r3, r2
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t start = app_model_model.presets[prNr].presetTransitionSettings[trNr].dmxStartVal;
 80023ce:	4b6f      	ldr	r3, [pc, #444]	; (800258c <sendTransition+0x214>)
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023d6:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	441a      	add	r2, r3
 80023e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80023e4:	3302      	adds	r3, #2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	4413      	add	r3, r2
 80023ea:	3302      	adds	r3, #2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t end = app_model_model.presets[prNr].presetTransitionSettings[trNr].dmxEndVal;
 80023f2:	4b66      	ldr	r3, [pc, #408]	; (800258c <sendTransition+0x214>)
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023fa:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	441a      	add	r2, r3
 8002404:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002408:	3302      	adds	r3, #2
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	4413      	add	r3, r2
 800240e:	3303      	adds	r3, #3
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t time = app_model_model.presets[prNr].presetTransitionSettings[trNr].transTime_ms;
 8002416:	4b5d      	ldr	r3, [pc, #372]	; (800258c <sendTransition+0x214>)
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800241e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	441a      	add	r2, r3
 8002428:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800242c:	3302      	adds	r3, #2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	4413      	add	r3, r2
 8002432:	3304      	adds	r3, #4
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	843b      	strh	r3, [r7, #32]
	uint16_t delay = app_model_model.presets[prNr].presetTransitionSettings[trNr].transDelay_ms;
 8002438:	4b54      	ldr	r3, [pc, #336]	; (800258c <sendTransition+0x214>)
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002440:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	441a      	add	r2, r3
 800244a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	4413      	add	r3, r2
 8002452:	3328      	adds	r3, #40	; 0x28
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	83fb      	strh	r3, [r7, #30]
	uint8_t ramp = app_model_model.presets[prNr].presetTransitionSettings[trNr].transRamp;
 8002458:	4b4c      	ldr	r3, [pc, #304]	; (800258c <sendTransition+0x214>)
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002460:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	441a      	add	r2, r3
 800246a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	4413      	add	r3, r2
 8002472:	332c      	adds	r3, #44	; 0x2c
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	777b      	strb	r3, [r7, #29]
	bool active = app_model_model.presets[prNr].presetTransitionSettings[trNr].enable;
 8002478:	4b44      	ldr	r3, [pc, #272]	; (800258c <sendTransition+0x214>)
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002480:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	441a      	add	r2, r3
 800248a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	4413      	add	r3, r2
 8002492:	332d      	adds	r3, #45	; 0x2d
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	773b      	strb	r3, [r7, #28]
	app_interface_cmd_Cmd newCmd;
	snprintf(newCmd.data, sizeof(newCmd.data),"#T0%02x%02x%02x%02x000\r", prNr, trNr, ch, start);
 8002498:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 800249c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024a0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80024a4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80024a8:	f107 0008 	add.w	r0, r7, #8
 80024ac:	9102      	str	r1, [sp, #8]
 80024ae:	9201      	str	r2, [sp, #4]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	4623      	mov	r3, r4
 80024b4:	4a36      	ldr	r2, [pc, #216]	; (8002590 <sendTransition+0x218>)
 80024b6:	2111      	movs	r1, #17
 80024b8:	f00a fbd0 	bl	800cc5c <sniprintf>
	newCmd.data[14] = '\r';
 80024bc:	230d      	movs	r3, #13
 80024be:	75bb      	strb	r3, [r7, #22]
	newCmd.data[15] = '\n';
 80024c0:	230a      	movs	r3, #10
 80024c2:	75fb      	strb	r3, [r7, #23]
	newCmd.data[16] = '\0';
 80024c4:	2300      	movs	r3, #0
 80024c6:	763b      	strb	r3, [r7, #24]
	if(!app_interface_cmd_writeCmd(&newCmd, &cmdTxBuf)) signalizeError();
 80024c8:	f107 0308 	add.w	r3, r7, #8
 80024cc:	4931      	ldr	r1, [pc, #196]	; (8002594 <sendTransition+0x21c>)
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fb0a 	bl	8002ae8 <app_interface_cmd_writeCmd>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f083 0301 	eor.w	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <sendTransition+0x16c>
 80024e0:	f000 fae4 	bl	8002aac <signalizeError>
	snprintf(newCmd.data, sizeof(newCmd.data),"#T1%02x%02x%02x%04x0\r", prNr, trNr, end, time);
 80024e4:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 80024e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024ec:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80024f0:	8c39      	ldrh	r1, [r7, #32]
 80024f2:	f107 0008 	add.w	r0, r7, #8
 80024f6:	9102      	str	r1, [sp, #8]
 80024f8:	9201      	str	r2, [sp, #4]
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	4623      	mov	r3, r4
 80024fe:	4a26      	ldr	r2, [pc, #152]	; (8002598 <sendTransition+0x220>)
 8002500:	2111      	movs	r1, #17
 8002502:	f00a fbab 	bl	800cc5c <sniprintf>
	newCmd.data[14] = '\r';
 8002506:	230d      	movs	r3, #13
 8002508:	75bb      	strb	r3, [r7, #22]
	newCmd.data[15] = '\n';
 800250a:	230a      	movs	r3, #10
 800250c:	75fb      	strb	r3, [r7, #23]
	newCmd.data[16] = '\0';
 800250e:	2300      	movs	r3, #0
 8002510:	763b      	strb	r3, [r7, #24]
	if(!app_interface_cmd_writeCmd(&newCmd, &cmdTxBuf)) signalizeError();
 8002512:	f107 0308 	add.w	r3, r7, #8
 8002516:	491f      	ldr	r1, [pc, #124]	; (8002594 <sendTransition+0x21c>)
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fae5 	bl	8002ae8 <app_interface_cmd_writeCmd>
 800251e:	4603      	mov	r3, r0
 8002520:	f083 0301 	eor.w	r3, r3, #1
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <sendTransition+0x1b6>
 800252a:	f000 fabf 	bl	8002aac <signalizeError>
	snprintf(newCmd.data, sizeof(newCmd.data),"#T2%02x%02x%04x%02x%01x\r", prNr, trNr, delay, ramp, active);
 800252e:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 8002532:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002536:	8bfa      	ldrh	r2, [r7, #30]
 8002538:	7f79      	ldrb	r1, [r7, #29]
 800253a:	7f38      	ldrb	r0, [r7, #28]
 800253c:	f107 0408 	add.w	r4, r7, #8
 8002540:	9003      	str	r0, [sp, #12]
 8002542:	9102      	str	r1, [sp, #8]
 8002544:	9201      	str	r2, [sp, #4]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	462b      	mov	r3, r5
 800254a:	4a14      	ldr	r2, [pc, #80]	; (800259c <sendTransition+0x224>)
 800254c:	2111      	movs	r1, #17
 800254e:	4620      	mov	r0, r4
 8002550:	f00a fb84 	bl	800cc5c <sniprintf>
	newCmd.data[14] = '\r';
 8002554:	230d      	movs	r3, #13
 8002556:	75bb      	strb	r3, [r7, #22]
	newCmd.data[15] = '\n';
 8002558:	230a      	movs	r3, #10
 800255a:	75fb      	strb	r3, [r7, #23]
	newCmd.data[16] = '\0';
 800255c:	2300      	movs	r3, #0
 800255e:	763b      	strb	r3, [r7, #24]
	if(!app_interface_cmd_writeCmd(&newCmd, &cmdTxBuf)) signalizeError();
 8002560:	f107 0308 	add.w	r3, r7, #8
 8002564:	490b      	ldr	r1, [pc, #44]	; (8002594 <sendTransition+0x21c>)
 8002566:	4618      	mov	r0, r3
 8002568:	f000 fabe 	bl	8002ae8 <app_interface_cmd_writeCmd>
 800256c:	4603      	mov	r3, r0
 800256e:	f083 0301 	eor.w	r3, r3, #1
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <sendTransition+0x204>
 8002578:	f000 fa98 	bl	8002aac <signalizeError>
	return true;
 800257c:	2301      	movs	r3, #1
}
 800257e:	4618      	mov	r0, r3
 8002580:	3728      	adds	r7, #40	; 0x28
 8002582:	46bd      	mov	sp, r7
 8002584:	bdb0      	pop	{r4, r5, r7, pc}
 8002586:	bf00      	nop
 8002588:	cccccccd 	.word	0xcccccccd
 800258c:	200010c0 	.word	0x200010c0
 8002590:	0800d688 	.word	0x0800d688
 8002594:	200000f4 	.word	0x200000f4
 8002598:	0800d6a0 	.word	0x0800d6a0
 800259c:	0800d6b8 	.word	0x0800d6b8

080025a0 <parseFootswitch>:

static bool parseFootswitch(eal_task_Task *self, app_interface_cmd_Cmd *command){
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08e      	sub	sp, #56	; 0x38
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
	char cmdIdx = command->data[2];
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	789b      	ldrb	r3, [r3, #2]
 80025ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	char fNrString[3];
	fNrString[0] = command->data[3]; fNrString[1] = command->data[4];
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	78db      	ldrb	r3, [r3, #3]
 80025b6:	773b      	strb	r3, [r7, #28]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	791b      	ldrb	r3, [r3, #4]
 80025bc:	777b      	strb	r3, [r7, #29]
	long fNr = strtol(fNrString, NULL, 16);
 80025be:	f107 031c 	add.w	r3, r7, #28
 80025c2:	2210      	movs	r2, #16
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f00a fc12 	bl	800cdf0 <strtol>
 80025cc:	6338      	str	r0, [r7, #48]	; 0x30
	if(cmdIdx == '0'){
 80025ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025d2:	2b30      	cmp	r3, #48	; 0x30
 80025d4:	d166      	bne.n	80026a4 <parseFootswitch+0x104>
		char pressedString[3];
		char releasedString[3];
		char holdshortString[3];
		char holdlongString[3];
		pressedString[0] = command->data[5]; pressedString[1] = command->data[6];
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	795b      	ldrb	r3, [r3, #5]
 80025da:	763b      	strb	r3, [r7, #24]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	799b      	ldrb	r3, [r3, #6]
 80025e0:	767b      	strb	r3, [r7, #25]
		releasedString[0] = command->data[7]; releasedString[1] = command->data[8];
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	79db      	ldrb	r3, [r3, #7]
 80025e6:	753b      	strb	r3, [r7, #20]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	7a1b      	ldrb	r3, [r3, #8]
 80025ec:	757b      	strb	r3, [r7, #21]
		holdshortString[0] = command->data[9]; holdshortString[1] = command->data[10];
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	7a5b      	ldrb	r3, [r3, #9]
 80025f2:	743b      	strb	r3, [r7, #16]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	7a9b      	ldrb	r3, [r3, #10]
 80025f8:	747b      	strb	r3, [r7, #17]
		holdlongString[0] = command->data[11]; holdlongString[1] = command->data[12];
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	7adb      	ldrb	r3, [r3, #11]
 80025fe:	733b      	strb	r3, [r7, #12]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	7b1b      	ldrb	r3, [r3, #12]
 8002604:	737b      	strb	r3, [r7, #13]
		long pressed = strtol(pressedString, NULL, 16);
 8002606:	f107 0318 	add.w	r3, r7, #24
 800260a:	2210      	movs	r2, #16
 800260c:	2100      	movs	r1, #0
 800260e:	4618      	mov	r0, r3
 8002610:	f00a fbee 	bl	800cdf0 <strtol>
 8002614:	62f8      	str	r0, [r7, #44]	; 0x2c
		long released = strtol(releasedString, NULL, 16);
 8002616:	f107 0314 	add.w	r3, r7, #20
 800261a:	2210      	movs	r2, #16
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f00a fbe6 	bl	800cdf0 <strtol>
 8002624:	62b8      	str	r0, [r7, #40]	; 0x28
		long holdshort = strtol(holdshortString, NULL, 16);
 8002626:	f107 0310 	add.w	r3, r7, #16
 800262a:	2210      	movs	r2, #16
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f00a fbde 	bl	800cdf0 <strtol>
 8002634:	6278      	str	r0, [r7, #36]	; 0x24
		long holdlong = strtol(holdlongString, NULL, 16);
 8002636:	f107 030c 	add.w	r3, r7, #12
 800263a:	2210      	movs	r2, #16
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f00a fbd6 	bl	800cdf0 <strtol>
 8002644:	6238      	str	r0, [r7, #32]
		app_model_model.footswitches[fNr].press.presetNr = pressed;
 8002646:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <parseFootswitch+0x110>)
 8002648:	68d9      	ldr	r1, [r3, #12]
 800264a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800264c:	4613      	mov	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	440b      	add	r3, r1
 8002656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	709a      	strb	r2, [r3, #2]
		app_model_model.footswitches[fNr].release.presetNr = released;
 800265c:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <parseFootswitch+0x110>)
 800265e:	68d9      	ldr	r1, [r3, #12]
 8002660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002662:	4613      	mov	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4413      	add	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	440b      	add	r3, r1
 800266c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	719a      	strb	r2, [r3, #6]
		app_model_model.footswitches[fNr].holdShort.presetNr = holdshort;
 8002672:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <parseFootswitch+0x110>)
 8002674:	68d9      	ldr	r1, [r3, #12]
 8002676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	440b      	add	r3, r1
 8002682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	729a      	strb	r2, [r3, #10]
		app_model_model.footswitches[fNr].holdLong.presetNr = holdlong;
 8002688:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <parseFootswitch+0x110>)
 800268a:	68d9      	ldr	r1, [r3, #12]
 800268c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800268e:	4613      	mov	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4413      	add	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	440b      	add	r3, r1
 8002698:	6a3a      	ldr	r2, [r7, #32]
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	739a      	strb	r2, [r3, #14]
		app_model_model.dirty = true;
 800269e:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <parseFootswitch+0x110>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	741a      	strb	r2, [r3, #16]
	}
	return true;
 80026a4:	2301      	movs	r3, #1
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3738      	adds	r7, #56	; 0x38
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	200010c0 	.word	0x200010c0

080026b4 <sendFootswitch>:
static bool sendFootswitch(eal_task_Task *self, uint8_t index){
 80026b4:	b5b0      	push	{r4, r5, r7, lr}
 80026b6:	b08c      	sub	sp, #48	; 0x30
 80026b8:	af04      	add	r7, sp, #16
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	70fb      	strb	r3, [r7, #3]
	app_interface_cmd_Cmd newCmd;
	uint8_t pressed = app_model_model.footswitches[index].press.presetNr;
 80026c0:	4b28      	ldr	r3, [pc, #160]	; (8002764 <sendFootswitch+0xb0>)
 80026c2:	68d9      	ldr	r1, [r3, #12]
 80026c4:	78fa      	ldrb	r2, [r7, #3]
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	440b      	add	r3, r1
 80026d0:	789b      	ldrb	r3, [r3, #2]
 80026d2:	77fb      	strb	r3, [r7, #31]
	uint8_t released = app_model_model.footswitches[index].release.presetNr;
 80026d4:	4b23      	ldr	r3, [pc, #140]	; (8002764 <sendFootswitch+0xb0>)
 80026d6:	68d9      	ldr	r1, [r3, #12]
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	440b      	add	r3, r1
 80026e4:	799b      	ldrb	r3, [r3, #6]
 80026e6:	77bb      	strb	r3, [r7, #30]
	uint8_t holdshort = app_model_model.footswitches[index].holdShort.presetNr;
 80026e8:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <sendFootswitch+0xb0>)
 80026ea:	68d9      	ldr	r1, [r3, #12]
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4413      	add	r3, r2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	440b      	add	r3, r1
 80026f8:	7a9b      	ldrb	r3, [r3, #10]
 80026fa:	777b      	strb	r3, [r7, #29]
	uint8_t holdlong = app_model_model.footswitches[index].holdLong.presetNr;
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <sendFootswitch+0xb0>)
 80026fe:	68d9      	ldr	r1, [r3, #12]
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	440b      	add	r3, r1
 800270c:	7b9b      	ldrb	r3, [r3, #14]
 800270e:	773b      	strb	r3, [r7, #28]
	snprintf(newCmd.data, sizeof(newCmd.data),"#F0%02x%02x%02x%02x%02x0\r", index, pressed, released, holdshort, holdlong);
 8002710:	78fd      	ldrb	r5, [r7, #3]
 8002712:	7ffb      	ldrb	r3, [r7, #31]
 8002714:	7fba      	ldrb	r2, [r7, #30]
 8002716:	7f79      	ldrb	r1, [r7, #29]
 8002718:	7f38      	ldrb	r0, [r7, #28]
 800271a:	f107 0408 	add.w	r4, r7, #8
 800271e:	9003      	str	r0, [sp, #12]
 8002720:	9102      	str	r1, [sp, #8]
 8002722:	9201      	str	r2, [sp, #4]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	462b      	mov	r3, r5
 8002728:	4a0f      	ldr	r2, [pc, #60]	; (8002768 <sendFootswitch+0xb4>)
 800272a:	2111      	movs	r1, #17
 800272c:	4620      	mov	r0, r4
 800272e:	f00a fa95 	bl	800cc5c <sniprintf>
	newCmd.data[14] = '\r';
 8002732:	230d      	movs	r3, #13
 8002734:	75bb      	strb	r3, [r7, #22]
	newCmd.data[15] = '\n';
 8002736:	230a      	movs	r3, #10
 8002738:	75fb      	strb	r3, [r7, #23]
	newCmd.data[16] = '\0';
 800273a:	2300      	movs	r3, #0
 800273c:	763b      	strb	r3, [r7, #24]
	if(!app_interface_cmd_writeCmd(&newCmd, &cmdTxBuf)) signalizeError();
 800273e:	f107 0308 	add.w	r3, r7, #8
 8002742:	490a      	ldr	r1, [pc, #40]	; (800276c <sendFootswitch+0xb8>)
 8002744:	4618      	mov	r0, r3
 8002746:	f000 f9cf 	bl	8002ae8 <app_interface_cmd_writeCmd>
 800274a:	4603      	mov	r3, r0
 800274c:	f083 0301 	eor.w	r3, r3, #1
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <sendFootswitch+0xa6>
 8002756:	f000 f9a9 	bl	8002aac <signalizeError>
	return true;
 800275a:	2301      	movs	r3, #1
}
 800275c:	4618      	mov	r0, r3
 800275e:	3720      	adds	r7, #32
 8002760:	46bd      	mov	sp, r7
 8002762:	bdb0      	pop	{r4, r5, r7, pc}
 8002764:	200010c0 	.word	0x200010c0
 8002768:	0800d6d4 	.word	0x0800d6d4
 800276c:	200000f4 	.word	0x200000f4

08002770 <parsePreset>:

static bool parsePreset(eal_task_Task *self, app_interface_cmd_Cmd *command){
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
	char cmdIdx = command->data[2];
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	789b      	ldrb	r3, [r3, #2]
 800277e:	75fb      	strb	r3, [r7, #23]
	char prNrString[3];
	prNrString[0] = command->data[3]; prNrString[1] = command->data[4];
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	78db      	ldrb	r3, [r3, #3]
 8002784:	733b      	strb	r3, [r7, #12]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	791b      	ldrb	r3, [r3, #4]
 800278a:	737b      	strb	r3, [r7, #13]
	long prNr = strtol(prNrString, NULL, 16);
 800278c:	f107 030c 	add.w	r3, r7, #12
 8002790:	2210      	movs	r2, #16
 8002792:	2100      	movs	r1, #0
 8002794:	4618      	mov	r0, r3
 8002796:	f00a fb2b 	bl	800cdf0 <strtol>
 800279a:	6138      	str	r0, [r7, #16]
	if(cmdIdx == '0'){
 800279c:	7dfb      	ldrb	r3, [r7, #23]
 800279e:	2b30      	cmp	r3, #48	; 0x30
 80027a0:	d10f      	bne.n	80027c2 <parsePreset+0x52>
		strncpy (&app_model_model.presets[prNr].name[0], &command->data[5], 9);
 80027a2:	4b1a      	ldr	r3, [pc, #104]	; (800280c <parsePreset+0x9c>)
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	4618      	mov	r0, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	3305      	adds	r3, #5
 80027b8:	2209      	movs	r2, #9
 80027ba:	4619      	mov	r1, r3
 80027bc:	f00a fa82 	bl	800ccc4 <strncpy>
 80027c0:	e01f      	b.n	8002802 <parsePreset+0x92>
	}else if(cmdIdx == '1'){
 80027c2:	7dfb      	ldrb	r3, [r7, #23]
 80027c4:	2b31      	cmp	r3, #49	; 0x31
 80027c6:	d113      	bne.n	80027f0 <parsePreset+0x80>
		strncpy (&app_model_model.presets[prNr].name[9], &command->data[5], 9);
 80027c8:	4b10      	ldr	r3, [pc, #64]	; (800280c <parsePreset+0x9c>)
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	f103 0009 	add.w	r0, r3, #9
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	3305      	adds	r3, #5
 80027e0:	2209      	movs	r2, #9
 80027e2:	4619      	mov	r1, r3
 80027e4:	f00a fa6e 	bl	800ccc4 <strncpy>
		app_model_model.dirty = true;
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <parsePreset+0x9c>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	741a      	strb	r2, [r3, #16]
 80027ee:	e008      	b.n	8002802 <parsePreset+0x92>
	}else if(cmdIdx == 'T'){
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
 80027f2:	2b54      	cmp	r3, #84	; 0x54
 80027f4:	d105      	bne.n	8002802 <parsePreset+0x92>
		sendDmxPreset(self, prNr);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	4619      	mov	r1, r3
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f921 	bl	8002a44 <sendDmxPreset>
	}
	return true;
 8002802:	2301      	movs	r3, #1
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	200010c0 	.word	0x200010c0

08002810 <sendPresetName>:
static bool sendPresetName(eal_task_Task *self, uint8_t index){
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	70fb      	strb	r3, [r7, #3]
	app_interface_cmd_Cmd newCmd;
	memset(newCmd.data,' ', sizeof(newCmd.data));
 800281c:	f107 030c 	add.w	r3, r7, #12
 8002820:	2211      	movs	r2, #17
 8002822:	2120      	movs	r1, #32
 8002824:	4618      	mov	r0, r3
 8002826:	f00a fa10 	bl	800cc4a <memset>
	snprintf(newCmd.data, 6,"#P0%02x", index);
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	f107 000c 	add.w	r0, r7, #12
 8002830:	4a40      	ldr	r2, [pc, #256]	; (8002934 <sendPresetName+0x124>)
 8002832:	2106      	movs	r1, #6
 8002834:	f00a fa12 	bl	800cc5c <sniprintf>
	newCmd.data[5] = ' ';
 8002838:	2320      	movs	r3, #32
 800283a:	747b      	strb	r3, [r7, #17]
	uint8_t length = strlen(&app_model_model.presets[index].name[0]);
 800283c:	4b3e      	ldr	r3, [pc, #248]	; (8002938 <sendPresetName+0x128>)
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fcc7 	bl	80001e0 <strlen>
 8002852:	4603      	mov	r3, r0
 8002854:	77fb      	strb	r3, [r7, #31]
	if(length > 9) length = 9;
 8002856:	7ffb      	ldrb	r3, [r7, #31]
 8002858:	2b09      	cmp	r3, #9
 800285a:	d901      	bls.n	8002860 <sendPresetName+0x50>
 800285c:	2309      	movs	r3, #9
 800285e:	77fb      	strb	r3, [r7, #31]
	strncpy(&newCmd.data[5], &app_model_model.presets[index].name[0], length);
 8002860:	4b35      	ldr	r3, [pc, #212]	; (8002938 <sendPresetName+0x128>)
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	4619      	mov	r1, r3
 8002872:	7ffa      	ldrb	r2, [r7, #31]
 8002874:	f107 030c 	add.w	r3, r7, #12
 8002878:	3305      	adds	r3, #5
 800287a:	4618      	mov	r0, r3
 800287c:	f00a fa22 	bl	800ccc4 <strncpy>
	newCmd.data[14] = '\r';
 8002880:	230d      	movs	r3, #13
 8002882:	76bb      	strb	r3, [r7, #26]
	newCmd.data[15] = '\n';
 8002884:	230a      	movs	r3, #10
 8002886:	76fb      	strb	r3, [r7, #27]
	newCmd.data[16] = '\0';
 8002888:	2300      	movs	r3, #0
 800288a:	773b      	strb	r3, [r7, #28]
	app_interface_cmd_writeCmd(&newCmd, &cmdTxBuf);
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	492a      	ldr	r1, [pc, #168]	; (800293c <sendPresetName+0x12c>)
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f928 	bl	8002ae8 <app_interface_cmd_writeCmd>
	memset(newCmd.data,' ', sizeof(newCmd.data));
 8002898:	f107 030c 	add.w	r3, r7, #12
 800289c:	2211      	movs	r2, #17
 800289e:	2120      	movs	r1, #32
 80028a0:	4618      	mov	r0, r3
 80028a2:	f00a f9d2 	bl	800cc4a <memset>
	snprintf(newCmd.data, 6,"#P1%02x", index);
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	f107 000c 	add.w	r0, r7, #12
 80028ac:	4a24      	ldr	r2, [pc, #144]	; (8002940 <sendPresetName+0x130>)
 80028ae:	2106      	movs	r1, #6
 80028b0:	f00a f9d4 	bl	800cc5c <sniprintf>
	newCmd.data[5] = ' ';
 80028b4:	2320      	movs	r3, #32
 80028b6:	747b      	strb	r3, [r7, #17]
	length = strlen(&app_model_model.presets[index].name[9]);
 80028b8:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <sendPresetName+0x128>)
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	3309      	adds	r3, #9
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fc88 	bl	80001e0 <strlen>
 80028d0:	4603      	mov	r3, r0
 80028d2:	77fb      	strb	r3, [r7, #31]
	if(length > 9) length = 9;
 80028d4:	7ffb      	ldrb	r3, [r7, #31]
 80028d6:	2b09      	cmp	r3, #9
 80028d8:	d901      	bls.n	80028de <sendPresetName+0xce>
 80028da:	2309      	movs	r3, #9
 80028dc:	77fb      	strb	r3, [r7, #31]
	strncpy(&newCmd.data[5], &app_model_model.presets[index].name[9], length);
 80028de:	4b16      	ldr	r3, [pc, #88]	; (8002938 <sendPresetName+0x128>)
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	f103 0109 	add.w	r1, r3, #9
 80028f2:	7ffa      	ldrb	r2, [r7, #31]
 80028f4:	f107 030c 	add.w	r3, r7, #12
 80028f8:	3305      	adds	r3, #5
 80028fa:	4618      	mov	r0, r3
 80028fc:	f00a f9e2 	bl	800ccc4 <strncpy>
	newCmd.data[14] = '\r';
 8002900:	230d      	movs	r3, #13
 8002902:	76bb      	strb	r3, [r7, #26]
	newCmd.data[15] = '\n';
 8002904:	230a      	movs	r3, #10
 8002906:	76fb      	strb	r3, [r7, #27]
	newCmd.data[16] = '\0';
 8002908:	2300      	movs	r3, #0
 800290a:	773b      	strb	r3, [r7, #28]
	if(!app_interface_cmd_writeCmd(&newCmd, &cmdTxBuf)) signalizeError();
 800290c:	f107 030c 	add.w	r3, r7, #12
 8002910:	490a      	ldr	r1, [pc, #40]	; (800293c <sendPresetName+0x12c>)
 8002912:	4618      	mov	r0, r3
 8002914:	f000 f8e8 	bl	8002ae8 <app_interface_cmd_writeCmd>
 8002918:	4603      	mov	r3, r0
 800291a:	f083 0301 	eor.w	r3, r3, #1
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <sendPresetName+0x118>
 8002924:	f000 f8c2 	bl	8002aac <signalizeError>
	return true;
 8002928:	2301      	movs	r3, #1
}
 800292a:	4618      	mov	r0, r3
 800292c:	3720      	adds	r7, #32
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	0800d6f0 	.word	0x0800d6f0
 8002938:	200010c0 	.word	0x200010c0
 800293c:	200000f4 	.word	0x200000f4
 8002940:	0800d6f8 	.word	0x0800d6f8

08002944 <parseLoadConfig>:

static bool parseLoadConfig(eal_task_Task *self, app_interface_cmd_Cmd *command){
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
	char cmdIdx = command->data[2];
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	789b      	ldrb	r3, [r3, #2]
 8002952:	73fb      	strb	r3, [r7, #15]
	if(cmdIdx == '0'){
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	2b30      	cmp	r3, #48	; 0x30
 8002958:	d105      	bne.n	8002966 <parseLoadConfig+0x22>
		uploadCmdCounter = 0;
 800295a:	4b06      	ldr	r3, [pc, #24]	; (8002974 <parseLoadConfig+0x30>)
 800295c:	2200      	movs	r2, #0
 800295e:	801a      	strh	r2, [r3, #0]
		uploadState = upload_PRESET_NAME;
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <parseLoadConfig+0x34>)
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
	}
	return true;
 8002966:	2301      	movs	r3, #1
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	20009f66 	.word	0x20009f66
 8002978:	20009f65 	.word	0x20009f65

0800297c <uploadConfig>:

static void uploadConfig(eal_task_Task *self){
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
	if(uploadState == upload_NONE) return;
 8002984:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <uploadConfig+0xc0>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d053      	beq.n	8002a34 <uploadConfig+0xb8>
	else if(uploadState == upload_PRESET_NAME){
 800298c:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <uploadConfig+0xc0>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d117      	bne.n	80029c4 <uploadConfig+0x48>
		sendPresetName(self,uploadCmdCounter);
 8002994:	4b2a      	ldr	r3, [pc, #168]	; (8002a40 <uploadConfig+0xc4>)
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	4619      	mov	r1, r3
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff37 	bl	8002810 <sendPresetName>
		if(++uploadCmdCounter >= app_cfg_NMBR_PRESETS){
 80029a2:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <uploadConfig+0xc4>)
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	3301      	adds	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <uploadConfig+0xc4>)
 80029ac:	801a      	strh	r2, [r3, #0]
 80029ae:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <uploadConfig+0xc4>)
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	2b09      	cmp	r3, #9
 80029b4:	d93f      	bls.n	8002a36 <uploadConfig+0xba>
			uploadCmdCounter = 0;
 80029b6:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <uploadConfig+0xc4>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	801a      	strh	r2, [r3, #0]
			uploadState = upload_PRESET_TRANSITION;
 80029bc:	4b1f      	ldr	r3, [pc, #124]	; (8002a3c <uploadConfig+0xc0>)
 80029be:	2202      	movs	r2, #2
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	e038      	b.n	8002a36 <uploadConfig+0xba>
		}
	}else if(uploadState == upload_PRESET_TRANSITION){
 80029c4:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <uploadConfig+0xc0>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d117      	bne.n	80029fc <uploadConfig+0x80>
		sendTransition(self,uploadCmdCounter);
 80029cc:	4b1c      	ldr	r3, [pc, #112]	; (8002a40 <uploadConfig+0xc4>)
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	4619      	mov	r1, r3
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff fccf 	bl	8002378 <sendTransition>
		if(++uploadCmdCounter >= app_cfg_NMBR_PRESETS*app_cfg_NMBR_TRANSITIONS){
 80029da:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <uploadConfig+0xc4>)
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	3301      	adds	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <uploadConfig+0xc4>)
 80029e4:	801a      	strh	r2, [r3, #0]
 80029e6:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <uploadConfig+0xc4>)
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	2bc7      	cmp	r3, #199	; 0xc7
 80029ec:	d923      	bls.n	8002a36 <uploadConfig+0xba>
			uploadCmdCounter = 0;
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <uploadConfig+0xc4>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	801a      	strh	r2, [r3, #0]
			uploadState = upload_FOOTSWITCH;
 80029f4:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <uploadConfig+0xc0>)
 80029f6:	2203      	movs	r2, #3
 80029f8:	701a      	strb	r2, [r3, #0]
 80029fa:	e01c      	b.n	8002a36 <uploadConfig+0xba>
		}
	}else if(uploadState == upload_FOOTSWITCH){
 80029fc:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <uploadConfig+0xc0>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d118      	bne.n	8002a36 <uploadConfig+0xba>
		sendFootswitch(self,uploadCmdCounter);
 8002a04:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <uploadConfig+0xc4>)
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff fe51 	bl	80026b4 <sendFootswitch>
		if(++uploadCmdCounter >= app_cfg_NMBR_BTNS-1){
 8002a12:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <uploadConfig+0xc4>)
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	3301      	adds	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <uploadConfig+0xc4>)
 8002a1c:	801a      	strh	r2, [r3, #0]
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <uploadConfig+0xc4>)
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d907      	bls.n	8002a36 <uploadConfig+0xba>
			uploadCmdCounter = 0;
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <uploadConfig+0xc4>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	801a      	strh	r2, [r3, #0]
			uploadState = upload_NONE;
 8002a2c:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <uploadConfig+0xc0>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
 8002a32:	e000      	b.n	8002a36 <uploadConfig+0xba>
	if(uploadState == upload_NONE) return;
 8002a34:	bf00      	nop
		}
	}
}
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20009f65 	.word	0x20009f65
 8002a40:	20009f66 	.word	0x20009f66

08002a44 <sendDmxPreset>:

/* Helper ----------------------------------------------------------------------*/
static void sendDmxPreset(eal_task_Task *self, uint8_t preset){
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	70fb      	strb	r3, [r7, #3]
	if(self->sendMsg == NULL) return;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d018      	beq.n	8002a8a <sendDmxPreset+0x46>
	msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_ACTION(preset), app_cfg_dmx_preset_TRIGGER_ENABLE, 0, 0);
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	813b      	strh	r3, [r7, #8]
 8002a68:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002a6c:	817b      	strh	r3, [r7, #10]
 8002a6e:	2350      	movs	r3, #80	; 0x50
 8002a70:	733b      	strb	r3, [r7, #12]
 8002a72:	2300      	movs	r3, #0
 8002a74:	737b      	strb	r3, [r7, #13]
 8002a76:	2300      	movs	r3, #0
 8002a78:	81fb      	strh	r3, [r7, #14]
	self->sendMsg(self, &newMessage);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f107 0208 	add.w	r2, r7, #8
 8002a82:	4611      	mov	r1, r2
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
 8002a88:	e000      	b.n	8002a8c <sendDmxPreset+0x48>
	if(self->sendMsg == NULL) return;
 8002a8a:	bf00      	nop
}
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <signalizeCommuniction>:

static void signalizeCommuniction(){
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
	 HAL_GPIO_TogglePin(O_PWM_LED1_GPIO_Port, O_PWM_LED1_Pin);
 8002a98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a9c:	4802      	ldr	r0, [pc, #8]	; (8002aa8 <signalizeCommuniction+0x14>)
 8002a9e:	f000 ffc7 	bl	8003a30 <HAL_GPIO_TogglePin>
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	48000400 	.word	0x48000400

08002aac <signalizeError>:
static void signalizeError(){
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(O_PWM_LED2_GPIO_Port, O_PWM_LED2_Pin, GPIO_PIN_SET);
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ab6:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <signalizeError+0x14>)
 8002ab8:	f000 ffa2 	bl	8003a00 <HAL_GPIO_WritePin>
}
 8002abc:	bf00      	nop
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	48000400 	.word	0x48000400

08002ac4 <UART4_IRQHandler>:
/*IRQs ----------------------------------------------------------------------*/
void UART4_IRQHandler(void){
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
	app_uart_irqHandler(huart4.Instance, &uart4RxBuf, &uart4TxBuf);
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <UART4_IRQHandler+0x18>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <UART4_IRQHandler+0x1c>)
 8002ace:	4905      	ldr	r1, [pc, #20]	; (8002ae4 <UART4_IRQHandler+0x20>)
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fa95 	bl	8003000 <app_uart_irqHandler>
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	2000a690 	.word	0x2000a690
 8002ae0:	200000dc 	.word	0x200000dc
 8002ae4:	200000e8 	.word	0x200000e8

08002ae8 <app_interface_cmd_writeCmd>:
void app_interface_cmd_initBuffer(app_interface_cmd_Buffer *buf){
	buf->buffer.in = 0;
	buf->buffer.out = 0;
}

bool app_interface_cmd_writeCmd(app_interface_cmd_Cmd *cmd, app_interface_cmd_Buffer *buf){
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
	uint8_t bufferState =  ringbuffer_NO_BUF;
 8002af2:	2300      	movs	r3, #0
 8002af4:	75fb      	strb	r3, [r7, #23]
	uint16_t nextMsgTmp = buf->buffer.in;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	81fb      	strh	r3, [r7, #14]
	if(cmd != NULL){
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d013      	beq.n	8002b2a <app_interface_cmd_writeCmd+0x42>
		for(int i = 0; i < (app_interface_cmd_LENGTH+1); ++i){
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	e00d      	b.n	8002b24 <app_interface_cmd_writeCmd+0x3c>
			bufferState = RINGBUFFER_cIn(cmd->data[i], &buf->buffer);
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f006 ffbe 	bl	8009a96 <RINGBUFFER_cIn>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	75fb      	strb	r3, [r7, #23]
		for(int i = 0; i < (app_interface_cmd_LENGTH+1); ++i){
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	3301      	adds	r3, #1
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b10      	cmp	r3, #16
 8002b28:	ddee      	ble.n	8002b08 <app_interface_cmd_writeCmd+0x20>
		}
	}
	if(bufferState == ringbuffer_FULL) buf->buffer.in = nextMsgTmp;
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d102      	bne.n	8002b36 <app_interface_cmd_writeCmd+0x4e>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	89fa      	ldrh	r2, [r7, #14]
 8002b34:	801a      	strh	r2, [r3, #0]
	if(bufferState == ringbuffer_OK) return true;
 8002b36:	7dfb      	ldrb	r3, [r7, #23]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <app_interface_cmd_writeCmd+0x58>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <app_interface_cmd_writeCmd+0x5a>
	return false;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <app_interface_cmd_getNext>:

app_interface_cmd_Cmd *app_interface_cmd_getNext(app_interface_cmd_Cmd *cmd, app_interface_cmd_Buffer *buf){
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
	uint8_t bufferState =  ringbuffer_OK;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
	memset(cmd->data, 0, sizeof(cmd->data));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2211      	movs	r2, #17
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f00a f873 	bl	800cc4a <memset>
	for(int i = 0; i < (app_interface_cmd_LENGTH+1); ++i){
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	e00c      	b.n	8002b84 <app_interface_cmd_getNext+0x3a>
		bufferState = RINGBUFFER_cOut(&cmd->data[i],&buf->buffer);
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4413      	add	r3, r2
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f006 ffcb 	bl	8009b10 <RINGBUFFER_cOut>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < (app_interface_cmd_LENGTH+1); ++i){
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	3301      	adds	r3, #1
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b10      	cmp	r3, #16
 8002b88:	ddef      	ble.n	8002b6a <app_interface_cmd_getNext+0x20>
	}
	if(bufferState == ringbuffer_OK)return cmd;
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <app_interface_cmd_getNext+0x4a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	e000      	b.n	8002b96 <app_interface_cmd_getNext+0x4c>
	else return NULL;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <app_interface_cmd_killBuffer>:

void app_interface_cmd_killBuffer(app_interface_cmd_Buffer *buf){
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
	buf->buffer.in = 0;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	801a      	strh	r2, [r3, #0]
	buf->buffer.out = 0;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	805a      	strh	r2, [r3, #2]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <app_interface_cmd_parseCmd>:

bool app_interface_cmd_parseCmd(char data, app_interface_cmd_Buffer *buf){
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	71fb      	strb	r3, [r7, #7]
	static app_interface_cmd_State state = app_interface_WAIT_FOR_CMD;
	static uint16_t cmdCnt = 0;
	static app_interface_cmd_Cmd newCmd;
	if(data == '#'){
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	2b23      	cmp	r3, #35	; 0x23
 8002bd0:	d109      	bne.n	8002be6 <app_interface_cmd_parseCmd+0x26>
		cmdCnt = 1;
 8002bd2:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <app_interface_cmd_parseCmd+0x6c>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	801a      	strh	r2, [r3, #0]
		state = app_interface_REC_CMD;
 8002bd8:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <app_interface_cmd_parseCmd+0x70>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]

		newCmd.data[0] = data;
 8002bde:	4a15      	ldr	r2, [pc, #84]	; (8002c34 <app_interface_cmd_parseCmd+0x74>)
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	7013      	strb	r3, [r2, #0]
 8002be4:	e01c      	b.n	8002c20 <app_interface_cmd_parseCmd+0x60>
	}else if(state == app_interface_REC_CMD){
 8002be6:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <app_interface_cmd_parseCmd+0x70>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d118      	bne.n	8002c20 <app_interface_cmd_parseCmd+0x60>
		newCmd.data[cmdCnt] = data;
 8002bee:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <app_interface_cmd_parseCmd+0x6c>)
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4a0f      	ldr	r2, [pc, #60]	; (8002c34 <app_interface_cmd_parseCmd+0x74>)
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	5453      	strb	r3, [r2, r1]
		++cmdCnt;
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <app_interface_cmd_parseCmd+0x6c>)
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <app_interface_cmd_parseCmd+0x6c>)
 8002c04:	801a      	strh	r2, [r3, #0]
		if(cmdCnt >= app_interface_cmd_LENGTH){
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <app_interface_cmd_parseCmd+0x6c>)
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	2b0f      	cmp	r3, #15
 8002c0c:	d908      	bls.n	8002c20 <app_interface_cmd_parseCmd+0x60>
			state = app_interface_WAIT_FOR_CMD;
 8002c0e:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <app_interface_cmd_parseCmd+0x70>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
			app_interface_cmd_writeCmd(&newCmd, buf);
 8002c14:	6839      	ldr	r1, [r7, #0]
 8002c16:	4807      	ldr	r0, [pc, #28]	; (8002c34 <app_interface_cmd_parseCmd+0x74>)
 8002c18:	f7ff ff66 	bl	8002ae8 <app_interface_cmd_writeCmd>
			return true;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <app_interface_cmd_parseCmd+0x62>
		}
	}
	return false;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20009f68 	.word	0x20009f68
 8002c30:	20009f6a 	.word	0x20009f6a
 8002c34:	20009f6c 	.word	0x20009f6c

08002c38 <app_interface_cmd_isAck>:

bool app_interface_cmd_isAck(app_interface_cmd_Cmd *cmd){
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	if(cmd->data[1] == 'A') return true;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	785b      	ldrb	r3, [r3, #1]
 8002c44:	2b41      	cmp	r3, #65	; 0x41
 8002c46:	d101      	bne.n	8002c4c <app_interface_cmd_isAck+0x14>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <app_interface_cmd_isAck+0x16>
	else return false;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <app_usb_init>:
void getTxBufferPointer(uint16_t *in, uint16_t *out);
void usb_irqRxHandler(char *pData, uint16_t size);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_usb_init(){
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
	usb_registerRxCallback(usb_irqRxHandler);
 8002c60:	4805      	ldr	r0, [pc, #20]	; (8002c78 <app_usb_init+0x1c>)
 8002c62:	f009 fb23 	bl	800c2ac <usb_registerRxCallback>
	linkStatus = app_usb_LINK_DOWN;
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <app_usb_init+0x20>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
	app_usb_timer = 0;
 8002c6c:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <app_usb_init+0x24>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	08002edd 	.word	0x08002edd
 8002c7c:	20009f98 	.word	0x20009f98
 8002c80:	20009f9c 	.word	0x20009f9c

08002c84 <app_usb_rxBufferInit>:

void app_usb_rxBufferInit(char *data, uint16_t size){
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	807b      	strh	r3, [r7, #2]
	app_usb_rxBuf.in = 0;
 8002c90:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <app_usb_rxBufferInit+0x30>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	801a      	strh	r2, [r3, #0]
	app_usb_rxBuf.out = 0;
 8002c96:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <app_usb_rxBufferInit+0x30>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	805a      	strh	r2, [r3, #2]
	app_usb_rxBuf.size = size;
 8002c9c:	4a05      	ldr	r2, [pc, #20]	; (8002cb4 <app_usb_rxBufferInit+0x30>)
 8002c9e:	887b      	ldrh	r3, [r7, #2]
 8002ca0:	8093      	strh	r3, [r2, #4]
	app_usb_rxBuf.data = data;
 8002ca2:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <app_usb_rxBufferInit+0x30>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6093      	str	r3, [r2, #8]
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	20009f8c 	.word	0x20009f8c

08002cb8 <app_usb_txBufferInit>:

void app_usb_txBufferInit(char *data, uint16_t size){
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	807b      	strh	r3, [r7, #2]
	app_usb_txBuf.in = 0;
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <app_usb_txBufferInit+0x30>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	801a      	strh	r2, [r3, #0]
	app_usb_txBuf.out = 0;
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <app_usb_txBufferInit+0x30>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	805a      	strh	r2, [r3, #2]
	app_usb_txBuf.size = size;
 8002cd0:	4a05      	ldr	r2, [pc, #20]	; (8002ce8 <app_usb_txBufferInit+0x30>)
 8002cd2:	887b      	ldrh	r3, [r7, #2]
 8002cd4:	8093      	strh	r3, [r2, #4]
	app_usb_txBuf.data = data;
 8002cd6:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <app_usb_txBufferInit+0x30>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6093      	str	r3, [r2, #8]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	20009f80 	.word	0x20009f80

08002cec <app_usb_txLoop>:

void app_usb_setLink(usb_app_Link link){
	linkStatus = link;
}
/*Main Loop*/
void app_usb_txLoop(){
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af00      	add	r7, sp, #0
	char usbString[MAX_USB_TX_SIZE] = {0};	//TODO: Check new line
 8002cf2:	f107 0308 	add.w	r3, r7, #8
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	60da      	str	r2, [r3, #12]
 8002d00:	611a      	str	r2, [r3, #16]
 8002d02:	615a      	str	r2, [r3, #20]
 8002d04:	761a      	strb	r2, [r3, #24]
	char usbData;
	int size = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
	if(HAL_GPIO_ReadPin(I_USB_VBUS_GPIO_Port, I_USB_VBUS_Pin)) linkStatus = app_usb_LINK_UP;
 8002d0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d12:	f000 fe5d 	bl	80039d0 <HAL_GPIO_ReadPin>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <app_usb_txLoop+0x38>
 8002d1c:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <app_usb_txLoop+0xc8>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
 8002d22:	e002      	b.n	8002d2a <app_usb_txLoop+0x3e>
	else linkStatus = app_usb_LINK_DOWN;
 8002d24:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <app_usb_txLoop+0xc8>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
	if(linkStatus == app_usb_LINK_UP){
 8002d2a:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <app_usb_txLoop+0xc8>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d13c      	bne.n	8002dac <app_usb_txLoop+0xc0>
		/*Grab in out pointer*/
		uint16_t lastIn, lastOut;
		getTxBufferPointer(&lastIn, &lastOut);
 8002d32:	1cba      	adds	r2, r7, #2
 8002d34:	1d3b      	adds	r3, r7, #4
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 f8a5 	bl	8002e88 <getTxBufferPointer>
		/*Grab next string*/
		for(size = 0; size < MAX_USB_TX_SIZE; ++size){
 8002d3e:	2300      	movs	r3, #0
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
 8002d42:	e010      	b.n	8002d66 <app_usb_txLoop+0x7a>
			if(app_usb_getCharFromTxBuffer(&usbData) == ringbuffer_OK){
 8002d44:	1dfb      	adds	r3, r7, #7
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 f85c 	bl	8002e04 <app_usb_getCharFromTxBuffer>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d10d      	bne.n	8002d6e <app_usb_txLoop+0x82>
				usbString[size] = usbData;
 8002d52:	79f9      	ldrb	r1, [r7, #7]
 8002d54:	f107 0208 	add.w	r2, r7, #8
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	4413      	add	r3, r2
 8002d5c:	460a      	mov	r2, r1
 8002d5e:	701a      	strb	r2, [r3, #0]
		for(size = 0; size < MAX_USB_TX_SIZE; ++size){
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	3301      	adds	r3, #1
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	2b18      	cmp	r3, #24
 8002d6a:	ddeb      	ble.n	8002d44 <app_usb_txLoop+0x58>
 8002d6c:	e000      	b.n	8002d70 <app_usb_txLoop+0x84>
			}else break;
 8002d6e:	bf00      	nop
		}
		if(size > 0) {
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	dd1a      	ble.n	8002dac <app_usb_txLoop+0xc0>
			app_usb_timer = APP_USB_TIMEOUT;
 8002d76:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <app_usb_txLoop+0xcc>)
 8002d78:	2264      	movs	r2, #100	; 0x64
 8002d7a:	601a      	str	r2, [r3, #0]
			while(app_usb_timer){
 8002d7c:	e00c      	b.n	8002d98 <app_usb_txLoop+0xac>
				if(CDC_Transmit_FS((uint8_t*)usbString, size+1) == USBD_OK) return;
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3301      	adds	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	f107 0308 	add.w	r3, r7, #8
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f009 fa67 	bl	800c260 <CDC_Transmit_FS>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d009      	beq.n	8002dac <app_usb_txLoop+0xc0>
			while(app_usb_timer){
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <app_usb_txLoop+0xcc>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1ee      	bne.n	8002d7e <app_usb_txLoop+0x92>
			}
			setTxBufferPointer(lastIn, lastOut);
 8002da0:	88bb      	ldrh	r3, [r7, #4]
 8002da2:	887a      	ldrh	r2, [r7, #2]
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f882 	bl	8002eb0 <setTxBufferPointer>
		}
	}
}
 8002dac:	3728      	adds	r7, #40	; 0x28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20009f98 	.word	0x20009f98
 8002db8:	20009f9c 	.word	0x20009f9c

08002dbc <app_usb_1ms>:

void app_usb_1ms(){
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
	if(app_usb_timer > 0) --app_usb_timer;
 8002dc0:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <app_usb_1ms+0x20>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	dd04      	ble.n	8002dd2 <app_usb_1ms+0x16>
 8002dc8:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <app_usb_1ms+0x20>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	4a03      	ldr	r2, [pc, #12]	; (8002ddc <app_usb_1ms+0x20>)
 8002dd0:	6013      	str	r3, [r2, #0]
}
 8002dd2:	bf00      	nop
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	20009f9c 	.word	0x20009f9c

08002de0 <app_usb_getCharFromRxBuffer>:
uint8_t app_usb_getCharFromRxBuffer(char *data){
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
   uint8_t bufferState = RINGBUFFER_cOut(data, &app_usb_rxBuf);
 8002de8:	4905      	ldr	r1, [pc, #20]	; (8002e00 <app_usb_getCharFromRxBuffer+0x20>)
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f006 fe90 	bl	8009b10 <RINGBUFFER_cOut>
 8002df0:	4603      	mov	r3, r0
 8002df2:	73fb      	strb	r3, [r7, #15]
   if(bufferState == ringbuffer_NO_BUF);//TODO error handling
   return bufferState;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20009f8c 	.word	0x20009f8c

08002e04 <app_usb_getCharFromTxBuffer>:

uint8_t app_usb_getCharFromTxBuffer(char *data){
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
   uint8_t bufferState = RINGBUFFER_cOut(data, &app_usb_txBuf);
 8002e0c:	4905      	ldr	r1, [pc, #20]	; (8002e24 <app_usb_getCharFromTxBuffer+0x20>)
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f006 fe7e 	bl	8009b10 <RINGBUFFER_cOut>
 8002e14:	4603      	mov	r3, r0
 8002e16:	73fb      	strb	r3, [r7, #15]
   if(bufferState == ringbuffer_NO_BUF);//TODO error handling
   return bufferState;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20009f80 	.word	0x20009f80

08002e28 <app_usb_writeStringToBuffer>:
   uint8_t bufferState = RINGBUFFER_cIn(data, &app_usb_txBuf);
   if(bufferState != ringbuffer_OK); 		//TODO: Error Handling
   if(bufferState != ringbuffer_NO_BUF);	//TODO: Error Handling
   return bufferState;
}
uint8_t app_usb_writeStringToBuffer(const char *string){
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
	uint16_t size = strlen(string);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7fd f9d5 	bl	80001e0 <strlen>
 8002e36:	4603      	mov	r3, r0
 8002e38:	817b      	strh	r3, [r7, #10]
	uint8_t bufferState = ringbuffer_OK;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	73fb      	strb	r3, [r7, #15]
	uint16_t oldIn = app_usb_txBuf.in;
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <app_usb_writeStringToBuffer+0x5c>)
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	813b      	strh	r3, [r7, #8]
	for(uint16_t i = 0; i < size; ++i){
 8002e44:	2300      	movs	r3, #0
 8002e46:	81bb      	strh	r3, [r7, #12]
 8002e48:	e013      	b.n	8002e72 <app_usb_writeStringToBuffer+0x4a>
		bufferState = RINGBUFFER_cIn(string[i], &app_usb_txBuf);
 8002e4a:	89bb      	ldrh	r3, [r7, #12]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4413      	add	r3, r2
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	490c      	ldr	r1, [pc, #48]	; (8002e84 <app_usb_writeStringToBuffer+0x5c>)
 8002e54:	4618      	mov	r0, r3
 8002e56:	f006 fe1e 	bl	8009a96 <RINGBUFFER_cIn>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	73fb      	strb	r3, [r7, #15]
		if(bufferState == ringbuffer_FULL) {
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d103      	bne.n	8002e6c <app_usb_writeStringToBuffer+0x44>
			app_usb_txBuf.in = oldIn;                //load old in position
 8002e64:	4a07      	ldr	r2, [pc, #28]	; (8002e84 <app_usb_writeStringToBuffer+0x5c>)
 8002e66:	893b      	ldrh	r3, [r7, #8]
 8002e68:	8013      	strh	r3, [r2, #0]
			break;
 8002e6a:	e006      	b.n	8002e7a <app_usb_writeStringToBuffer+0x52>
	for(uint16_t i = 0; i < size; ++i){
 8002e6c:	89bb      	ldrh	r3, [r7, #12]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	81bb      	strh	r3, [r7, #12]
 8002e72:	89ba      	ldrh	r2, [r7, #12]
 8002e74:	897b      	ldrh	r3, [r7, #10]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d3e7      	bcc.n	8002e4a <app_usb_writeStringToBuffer+0x22>
		}
		if(bufferState != ringbuffer_NO_BUF); //TODO: Error Handling
	}
	return bufferState;
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20009f80 	.word	0x20009f80

08002e88 <getTxBufferPointer>:

/*Helper*/
void getTxBufferPointer(uint16_t *in, uint16_t *out){
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
	in = app_usb_txBuf.in;
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <getTxBufferPointer+0x24>)
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	607b      	str	r3, [r7, #4]
	out = app_usb_txBuf.out;
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <getTxBufferPointer+0x24>)
 8002e9a:	885b      	ldrh	r3, [r3, #2]
 8002e9c:	603b      	str	r3, [r7, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20009f80 	.word	0x20009f80

08002eb0 <setTxBufferPointer>:
void setTxBufferPointer(uint16_t in, uint16_t out){
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	460a      	mov	r2, r1
 8002eba:	80fb      	strh	r3, [r7, #6]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	80bb      	strh	r3, [r7, #4]
	app_usb_txBuf.in = in;
 8002ec0:	4a05      	ldr	r2, [pc, #20]	; (8002ed8 <setTxBufferPointer+0x28>)
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	8013      	strh	r3, [r2, #0]
	app_usb_txBuf.out = out;
 8002ec6:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <setTxBufferPointer+0x28>)
 8002ec8:	88bb      	ldrh	r3, [r7, #4]
 8002eca:	8053      	strh	r3, [r2, #2]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	20009f80 	.word	0x20009f80

08002edc <usb_irqRxHandler>:
/* IRQ Handler*/
void usb_irqRxHandler(char *pData, uint16_t size){
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	807b      	strh	r3, [r7, #2]
	char buffer_state;
	for(uint16_t x = 0; x < size; x++) buffer_state = RINGBUFFER_cIn(pData[x], &app_usb_rxBuf);
 8002ee8:	2300      	movs	r3, #0
 8002eea:	81fb      	strh	r3, [r7, #14]
 8002eec:	e00c      	b.n	8002f08 <usb_irqRxHandler+0x2c>
 8002eee:	89fb      	ldrh	r3, [r7, #14]
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	4908      	ldr	r1, [pc, #32]	; (8002f18 <usb_irqRxHandler+0x3c>)
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f006 fdcc 	bl	8009a96 <RINGBUFFER_cIn>
 8002efe:	4603      	mov	r3, r0
 8002f00:	737b      	strb	r3, [r7, #13]
 8002f02:	89fb      	ldrh	r3, [r7, #14]
 8002f04:	3301      	adds	r3, #1
 8002f06:	81fb      	strh	r3, [r7, #14]
 8002f08:	89fa      	ldrh	r2, [r7, #14]
 8002f0a:	887b      	ldrh	r3, [r7, #2]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d3ee      	bcc.n	8002eee <usb_irqRxHandler+0x12>
	if(buffer_state != ringbuffer_OK); //TODO: Error Handling
}
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20009f8c 	.word	0x20009f8c

08002f1c <app_uart_bufferInit>:
 */
#include "app_uart.h"
#include "string.h"


void app_uart_bufferInit(stRingBuf *buf, char *data, uint16_t size){
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	4613      	mov	r3, r2
 8002f28:	80fb      	strh	r3, [r7, #6]
	buf->in = 0;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	801a      	strh	r2, [r3, #0]
	buf->out = 0;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	805a      	strh	r2, [r3, #2]
	buf->size = size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	88fa      	ldrh	r2, [r7, #6]
 8002f3a:	809a      	strh	r2, [r3, #4]
	buf->data = data;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	609a      	str	r2, [r3, #8]
}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <app_uart_enableReceiveInt>:
void app_uart_enableReceiveInt(USART_TypeDef *uartHandler){
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
	uartHandler->CR1 |= USART_CR1_RXNEIE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f043 0220 	orr.w	r2, r3, #32
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	601a      	str	r2, [r3, #0]
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <app_uart_getCharFromBuffer>:
uint8_t app_uart_getCharFromBuffer(char *data, stRingBuf *buf){
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	6039      	str	r1, [r7, #0]
   uint8_t bufferState = RINGBUFFER_cOut(data, buf);
 8002f78:	6839      	ldr	r1, [r7, #0]
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f006 fdc8 	bl	8009b10 <RINGBUFFER_cOut>
 8002f80:	4603      	mov	r3, r0
 8002f82:	73fb      	strb	r3, [r7, #15]
   if(bufferState == ringbuffer_NO_BUF){
	   //TODO error handling
   }
   return bufferState;
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <app_uart_writeStringToBuffer>:
	   //TODO error handling
   }
   if(bufferState != ringbuffer_NO_BUF) uartHandler->CR1 |= USART_CR1_TXEIE;
   return bufferState;
}
uint8_t app_uart_writeStringToBuffer(const char *string, stRingBuf *buf, USART_TypeDef *uartHandler){
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b086      	sub	sp, #24
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
	uint16_t size = strlen(string);
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f7fd f920 	bl	80001e0 <strlen>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	827b      	strh	r3, [r7, #18]
	uint8_t bufferState = ringbuffer_OK;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	75fb      	strb	r3, [r7, #23]
	uint16_t oldIn = buf->in;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	823b      	strh	r3, [r7, #16]
	for(uint16_t i = 0; i < size; ++i){
 8002fae:	2300      	movs	r3, #0
 8002fb0:	82bb      	strh	r3, [r7, #20]
 8002fb2:	e01c      	b.n	8002fee <app_uart_writeStringToBuffer+0x60>
		bufferState = RINGBUFFER_cIn(string[i], buf);
 8002fb4:	8abb      	ldrh	r3, [r7, #20]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4413      	add	r3, r2
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	68b9      	ldr	r1, [r7, #8]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f006 fd69 	bl	8009a96 <RINGBUFFER_cIn>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	75fb      	strb	r3, [r7, #23]
		if(bufferState == ringbuffer_FULL) {
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d103      	bne.n	8002fd6 <app_uart_writeStringToBuffer+0x48>
			buf->in = oldIn;                //load old in position
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	8a3a      	ldrh	r2, [r7, #16]
 8002fd2:	801a      	strh	r2, [r3, #0]
			break;
 8002fd4:	e00f      	b.n	8002ff6 <app_uart_writeStringToBuffer+0x68>
		}
		if(bufferState != ringbuffer_NO_BUF) uartHandler->CR1 |= USART_CR1_TXEIE;
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <app_uart_writeStringToBuffer+0x5a>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < size; ++i){
 8002fe8:	8abb      	ldrh	r3, [r7, #20]
 8002fea:	3301      	adds	r3, #1
 8002fec:	82bb      	strh	r3, [r7, #20]
 8002fee:	8aba      	ldrh	r2, [r7, #20]
 8002ff0:	8a7b      	ldrh	r3, [r7, #18]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d3de      	bcc.n	8002fb4 <app_uart_writeStringToBuffer+0x26>
	}
	return bufferState;
 8002ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <app_uart_irqHandler>:


void app_uart_irqHandler(USART_TypeDef *uartHandler, stRingBuf *rxBuf, stRingBuf *txBuf){
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
		volatile uint16_t ISR;
		char bufferState;

		ISR = uartHandler->ISR;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	b29b      	uxth	r3, r3
 8003012:	82bb      	strh	r3, [r7, #20]
		if(ISR & USART_ISR_RXNE){ //Bit 5 = Read Data Register Not Empty in SR
 8003014:	8abb      	ldrh	r3, [r7, #20]
 8003016:	b29b      	uxth	r3, r3
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b00      	cmp	r3, #0
 800301e:	d009      	beq.n	8003034 <app_uart_irqHandler+0x34>
			bufferState = RINGBUFFER_cIn(uartHandler->RDR, rxBuf);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003024:	b29b      	uxth	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	68b9      	ldr	r1, [r7, #8]
 800302a:	4618      	mov	r0, r3
 800302c:	f006 fd33 	bl	8009a96 <RINGBUFFER_cIn>
 8003030:	4603      	mov	r3, r0
 8003032:	75fb      	strb	r3, [r7, #23]
			if(bufferState != ringbuffer_OK){
				//TODO Error handling
			}
		}
		if(ISR & USART_ISR_TXE){
 8003034:	8abb      	ldrh	r3, [r7, #20]
 8003036:	b29b      	uxth	r3, r3
 8003038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01e      	beq.n	800307e <app_uart_irqHandler+0x7e>
			uartHandler->ISR &= ~USART_ISR_TXE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	61da      	str	r2, [r3, #28]
			char data;
			bufferState = RINGBUFFER_cOut(&data, txBuf);
 800304c:	f107 0313 	add.w	r3, r7, #19
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4618      	mov	r0, r3
 8003054:	f006 fd5c 	bl	8009b10 <RINGBUFFER_cOut>
 8003058:	4603      	mov	r3, r0
 800305a:	75fb      	strb	r3, [r7, #23]
			if(bufferState == ringbuffer_EMPTY){
 800305c:	7dfb      	ldrb	r3, [r7, #23]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d106      	bne.n	8003070 <app_uart_irqHandler+0x70>
				uartHandler->CR1 &= ~USART_CR1_TXEIE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	e006      	b.n	800307e <app_uart_irqHandler+0x7e>
			}else if (bufferState == ringbuffer_NO_BUF){
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <app_uart_irqHandler+0x7e>

			}else{
				uartHandler->TDR = data;
 8003076:	7cfb      	ldrb	r3, [r7, #19]
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	851a      	strh	r2, [r3, #40]	; 0x28
			}
		}
		if(ISR & USART_ISR_ORE){
 800307e:	8abb      	ldrh	r3, [r7, #20]
 8003080:	b29b      	uxth	r3, r3
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <app_uart_irqHandler+0x96>
			uartHandler->ICR |= USART_ICR_ORECF;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f043 0208 	orr.w	r2, r3, #8
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	621a      	str	r2, [r3, #32]
		}
	}
 8003096:	bf00      	nop
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <app_main>:
		.sendMsg = sendMessage, .receiveMsg = app_eeprom_receiveMsg
};
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_main(){
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
	msgTask.enable = true;
 80030a4:	4b11      	ldr	r3, [pc, #68]	; (80030ec <app_main+0x4c>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
	msgTask.init(&msgTask);
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <app_main+0x4c>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	480f      	ldr	r0, [pc, #60]	; (80030ec <app_main+0x4c>)
 80030b0:	4798      	blx	r3
	while (1){
		msgTask.mainLoop(&msgTask);
 80030b2:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <app_main+0x4c>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	480d      	ldr	r0, [pc, #52]	; (80030ec <app_main+0x4c>)
 80030b8:	4798      	blx	r3
		btnTask.mainLoop(&btnTask);
 80030ba:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <app_main+0x50>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	480c      	ldr	r0, [pc, #48]	; (80030f0 <app_main+0x50>)
 80030c0:	4798      	blx	r3
		footcontrolTask.mainLoop(&footcontrolTask);
 80030c2:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <app_main+0x54>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	480b      	ldr	r0, [pc, #44]	; (80030f4 <app_main+0x54>)
 80030c8:	4798      	blx	r3
		eepromTask.mainLoop(&eepromTask);
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <app_main+0x58>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	480a      	ldr	r0, [pc, #40]	; (80030f8 <app_main+0x58>)
 80030d0:	4798      	blx	r3
		dmxTask.mainLoop(&dmxTask);
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <app_main+0x5c>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	4809      	ldr	r0, [pc, #36]	; (80030fc <app_main+0x5c>)
 80030d8:	4798      	blx	r3
		dmxPresetTask.mainLoop(&dmxPresetTask);
 80030da:	4b09      	ldr	r3, [pc, #36]	; (8003100 <app_main+0x60>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	4808      	ldr	r0, [pc, #32]	; (8003100 <app_main+0x60>)
 80030e0:	4798      	blx	r3
		interfaceTask.mainLoop(&interfaceTask);
 80030e2:	4b08      	ldr	r3, [pc, #32]	; (8003104 <app_main+0x64>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	4807      	ldr	r0, [pc, #28]	; (8003104 <app_main+0x64>)
 80030e8:	4798      	blx	r3
		msgTask.mainLoop(&msgTask);
 80030ea:	e7e2      	b.n	80030b2 <app_main+0x12>
 80030ec:	200010e4 	.word	0x200010e4
 80030f0:	2000112c 	.word	0x2000112c
 80030f4:	20001144 	.word	0x20001144
 80030f8:	20001174 	.word	0x20001174
 80030fc:	20001114 	.word	0x20001114
 8003100:	200010fc 	.word	0x200010fc
 8003104:	2000115c 	.word	0x2000115c

08003108 <app_1ms>:
	 }
}

void app_1ms(){
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
	static uint16_t timer100ms = 0;
	static uint16_t timer500ms = 0;
	app_usb_1ms();
 800310c:	f7ff fe56 	bl	8002dbc <app_usb_1ms>
	dmx_1ms(&dmx1Out);
 8003110:	4826      	ldr	r0, [pc, #152]	; (80031ac <app_1ms+0xa4>)
 8003112:	f006 f813 	bl	800913c <dmx_1ms>
	if(dmxTask.timer) dmxTask.timer(&dmxTask, true);
 8003116:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <app_1ms+0xa8>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <app_1ms+0x20>
 800311e:	4b24      	ldr	r3, [pc, #144]	; (80031b0 <app_1ms+0xa8>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	2101      	movs	r1, #1
 8003124:	4822      	ldr	r0, [pc, #136]	; (80031b0 <app_1ms+0xa8>)
 8003126:	4798      	blx	r3
	if(dmxPresetTask.timer) dmxPresetTask.timer(&dmxPresetTask, true);
 8003128:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <app_1ms+0xac>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d004      	beq.n	800313a <app_1ms+0x32>
 8003130:	4b20      	ldr	r3, [pc, #128]	; (80031b4 <app_1ms+0xac>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2101      	movs	r1, #1
 8003136:	481f      	ldr	r0, [pc, #124]	; (80031b4 <app_1ms+0xac>)
 8003138:	4798      	blx	r3
	if(btnTask.timer) btnTask.timer(&btnTask, true);
 800313a:	4b1f      	ldr	r3, [pc, #124]	; (80031b8 <app_1ms+0xb0>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d004      	beq.n	800314c <app_1ms+0x44>
 8003142:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <app_1ms+0xb0>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	2101      	movs	r1, #1
 8003148:	481b      	ldr	r0, [pc, #108]	; (80031b8 <app_1ms+0xb0>)
 800314a:	4798      	blx	r3
	if(eepromTask.timer) eepromTask.timer(&eepromTask, true);
 800314c:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <app_1ms+0xb4>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d004      	beq.n	800315e <app_1ms+0x56>
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <app_1ms+0xb4>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2101      	movs	r1, #1
 800315a:	4818      	ldr	r0, [pc, #96]	; (80031bc <app_1ms+0xb4>)
 800315c:	4798      	blx	r3
	if(interfaceTask.timer) interfaceTask.timer(&interfaceTask, true);
 800315e:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <app_1ms+0xb8>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d004      	beq.n	8003170 <app_1ms+0x68>
 8003166:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <app_1ms+0xb8>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	2101      	movs	r1, #1
 800316c:	4814      	ldr	r0, [pc, #80]	; (80031c0 <app_1ms+0xb8>)
 800316e:	4798      	blx	r3
	if(++timer100ms >= 100){
 8003170:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <app_1ms+0xbc>)
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	3301      	adds	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <app_1ms+0xbc>)
 800317a:	801a      	strh	r2, [r3, #0]
 800317c:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <app_1ms+0xbc>)
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	2b63      	cmp	r3, #99	; 0x63
 8003182:	d902      	bls.n	800318a <app_1ms+0x82>
		timer100ms = 0;
 8003184:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <app_1ms+0xbc>)
 8003186:	2200      	movs	r2, #0
 8003188:	801a      	strh	r2, [r3, #0]
	}
	if(++timer500ms >= 500){
 800318a:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <app_1ms+0xc0>)
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	3301      	adds	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <app_1ms+0xc0>)
 8003194:	801a      	strh	r2, [r3, #0]
 8003196:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <app_1ms+0xc0>)
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800319e:	d302      	bcc.n	80031a6 <app_1ms+0x9e>
		timer500ms = 0;
 80031a0:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <app_1ms+0xc0>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	801a      	strh	r2, [r3, #0]
	}

}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000000 	.word	0x20000000
 80031b0:	20001114 	.word	0x20001114
 80031b4:	200010fc 	.word	0x200010fc
 80031b8:	2000112c 	.word	0x2000112c
 80031bc:	20001174 	.word	0x20001174
 80031c0:	2000115c 	.word	0x2000115c
 80031c4:	2000a1a2 	.word	0x2000a1a2
 80031c8:	2000a1a4 	.word	0x2000a1a4

080031cc <app_process>:
/* Application Task ------------------------------------------------------------*/
static void app_process(eal_task_Task *self){
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
	msg_Message buffer = {0};
 80031d4:	f107 030c 	add.w	r3, r7, #12
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	605a      	str	r2, [r3, #4]
	msg_Message *newMessage = msg_getNext(&buffer, &msgBuf);
 80031de:	f107 030c 	add.w	r3, r7, #12
 80031e2:	4908      	ldr	r1, [pc, #32]	; (8003204 <app_process+0x38>)
 80031e4:	4618      	mov	r0, r3
 80031e6:	f006 fba7 	bl	8009938 <msg_getNext>
 80031ea:	6178      	str	r0, [r7, #20]
	if(newMessage != NULL){
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d004      	beq.n	80031fc <app_process+0x30>
		self->receiveMsg(self, newMessage);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	6979      	ldr	r1, [r7, #20]
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4798      	blx	r3
	}
}
 80031fc:	bf00      	nop
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	200010d4 	.word	0x200010d4

08003208 <app_receiveMsg>:
static void app_receiveMsg(eal_task_Task *self, msg_Message *message){
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
	dmxTask.receiveMsg(&dmxTask, message);
 8003212:	4b11      	ldr	r3, [pc, #68]	; (8003258 <app_receiveMsg+0x50>)
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	6839      	ldr	r1, [r7, #0]
 8003218:	480f      	ldr	r0, [pc, #60]	; (8003258 <app_receiveMsg+0x50>)
 800321a:	4798      	blx	r3
	dmxPresetTask.receiveMsg(&dmxPresetTask, message);
 800321c:	4b0f      	ldr	r3, [pc, #60]	; (800325c <app_receiveMsg+0x54>)
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	6839      	ldr	r1, [r7, #0]
 8003222:	480e      	ldr	r0, [pc, #56]	; (800325c <app_receiveMsg+0x54>)
 8003224:	4798      	blx	r3
	btnTask.receiveMsg(&btnTask, message);
 8003226:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <app_receiveMsg+0x58>)
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	6839      	ldr	r1, [r7, #0]
 800322c:	480c      	ldr	r0, [pc, #48]	; (8003260 <app_receiveMsg+0x58>)
 800322e:	4798      	blx	r3
	eepromTask.receiveMsg(&eepromTask, message);
 8003230:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <app_receiveMsg+0x5c>)
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	6839      	ldr	r1, [r7, #0]
 8003236:	480b      	ldr	r0, [pc, #44]	; (8003264 <app_receiveMsg+0x5c>)
 8003238:	4798      	blx	r3
	footcontrolTask.receiveMsg(&footcontrolTask, message);
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <app_receiveMsg+0x60>)
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	6839      	ldr	r1, [r7, #0]
 8003240:	4809      	ldr	r0, [pc, #36]	; (8003268 <app_receiveMsg+0x60>)
 8003242:	4798      	blx	r3
	interfaceTask.receiveMsg(&interfaceTask, message);
 8003244:	4b09      	ldr	r3, [pc, #36]	; (800326c <app_receiveMsg+0x64>)
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	6839      	ldr	r1, [r7, #0]
 800324a:	4808      	ldr	r0, [pc, #32]	; (800326c <app_receiveMsg+0x64>)
 800324c:	4798      	blx	r3
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20001114 	.word	0x20001114
 800325c:	200010fc 	.word	0x200010fc
 8003260:	2000112c 	.word	0x2000112c
 8003264:	20001174 	.word	0x20001174
 8003268:	20001144 	.word	0x20001144
 800326c:	2000115c 	.word	0x2000115c

08003270 <app_init>:

static void app_init(eal_task_Task *self){
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
	eepromTask.enable = true;
 8003278:	4b22      	ldr	r3, [pc, #136]	; (8003304 <app_init+0x94>)
 800327a:	2201      	movs	r2, #1
 800327c:	701a      	strb	r2, [r3, #0]
	if(eepromTask.init) eepromTask.init(&eepromTask);
 800327e:	4b21      	ldr	r3, [pc, #132]	; (8003304 <app_init+0x94>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <app_init+0x1e>
 8003286:	4b1f      	ldr	r3, [pc, #124]	; (8003304 <app_init+0x94>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	481e      	ldr	r0, [pc, #120]	; (8003304 <app_init+0x94>)
 800328c:	4798      	blx	r3
	dmxTask.enable = true;
 800328e:	4b1e      	ldr	r3, [pc, #120]	; (8003308 <app_init+0x98>)
 8003290:	2201      	movs	r2, #1
 8003292:	701a      	strb	r2, [r3, #0]
	if(dmxTask.init) dmxTask.init(&dmxTask);
 8003294:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <app_init+0x98>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <app_init+0x34>
 800329c:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <app_init+0x98>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	4819      	ldr	r0, [pc, #100]	; (8003308 <app_init+0x98>)
 80032a2:	4798      	blx	r3
	dmxPresetTask.enable = true;
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <app_init+0x9c>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
	if(dmxPresetTask.init) dmxPresetTask.init(&dmxPresetTask);
 80032aa:	4b18      	ldr	r3, [pc, #96]	; (800330c <app_init+0x9c>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <app_init+0x4a>
 80032b2:	4b16      	ldr	r3, [pc, #88]	; (800330c <app_init+0x9c>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4815      	ldr	r0, [pc, #84]	; (800330c <app_init+0x9c>)
 80032b8:	4798      	blx	r3
	btnTask.enable = true;
 80032ba:	4b15      	ldr	r3, [pc, #84]	; (8003310 <app_init+0xa0>)
 80032bc:	2201      	movs	r2, #1
 80032be:	701a      	strb	r2, [r3, #0]
	if(btnTask.init) btnTask.init(&btnTask);
 80032c0:	4b13      	ldr	r3, [pc, #76]	; (8003310 <app_init+0xa0>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <app_init+0x60>
 80032c8:	4b11      	ldr	r3, [pc, #68]	; (8003310 <app_init+0xa0>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4810      	ldr	r0, [pc, #64]	; (8003310 <app_init+0xa0>)
 80032ce:	4798      	blx	r3
	footcontrolTask.enable = true;
 80032d0:	4b10      	ldr	r3, [pc, #64]	; (8003314 <app_init+0xa4>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
	if(footcontrolTask.init) footcontrolTask.init(&footcontrolTask);
 80032d6:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <app_init+0xa4>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <app_init+0x76>
 80032de:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <app_init+0xa4>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	480c      	ldr	r0, [pc, #48]	; (8003314 <app_init+0xa4>)
 80032e4:	4798      	blx	r3
	interfaceTask.enable = true;
 80032e6:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <app_init+0xa8>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]
	if(interfaceTask.init) interfaceTask.init(&interfaceTask);
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <app_init+0xa8>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <app_init+0x8c>
 80032f4:	4b08      	ldr	r3, [pc, #32]	; (8003318 <app_init+0xa8>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4807      	ldr	r0, [pc, #28]	; (8003318 <app_init+0xa8>)
 80032fa:	4798      	blx	r3

}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20001174 	.word	0x20001174
 8003308:	20001114 	.word	0x20001114
 800330c:	200010fc 	.word	0x200010fc
 8003310:	2000112c 	.word	0x2000112c
 8003314:	20001144 	.word	0x20001144
 8003318:	2000115c 	.word	0x2000115c

0800331c <sendMessage>:

/* Messages --------------------------------------------------------------------*/
static void sendMessage(eal_task_Task *self, msg_Message *message){
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
	uint8_t msgBufState = 1;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
	if(msg_isAction(message))msgBufState = msg_writeAction(message, &msgBuf);
 800332a:	6838      	ldr	r0, [r7, #0]
 800332c:	f006 fba1 	bl	8009a72 <msg_isAction>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <sendMessage+0x28>
 8003336:	490c      	ldr	r1, [pc, #48]	; (8003368 <sendMessage+0x4c>)
 8003338:	6838      	ldr	r0, [r7, #0]
 800333a:	f006 fae4 	bl	8009906 <msg_writeAction>
 800333e:	4603      	mov	r3, r0
 8003340:	73fb      	strb	r3, [r7, #15]
 8003342:	e005      	b.n	8003350 <sendMessage+0x34>
	else msgBufState = msg_writeEvent(message, &msgBuf);
 8003344:	4908      	ldr	r1, [pc, #32]	; (8003368 <sendMessage+0x4c>)
 8003346:	6838      	ldr	r0, [r7, #0]
 8003348:	f006 fac6 	bl	80098d8 <msg_writeEvent>
 800334c:	4603      	mov	r3, r0
 800334e:	73fb      	strb	r3, [r7, #15]
	if(msgBufState != 1) messageBufferError(msgBufState);
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d003      	beq.n	800335e <sendMessage+0x42>
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	4618      	mov	r0, r3
 800335a:	f000 f807 	bl	800336c <messageBufferError>
}
 800335e:	bf00      	nop
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	200010d4 	.word	0x200010d4

0800336c <messageBufferError>:
static void messageBufferError(uint8_t state){
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	71fb      	strb	r3, [r7, #7]
//	if(state == NO_BUF) USART3_WriteStringToBuffer("ERROR: MSG NO BUF\r\n", 18);
//	else if(state == FULL) USART3_WriteStringToBuffer("ERROR: MSG BUF OVR\r\n", 19);
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <HAL_TIM_PeriodElapsedCallback>:

/* Callback's ---------------------------------------------------------------------*/


/* IRQs ---------------------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == dmx1Out.txTimer) dmx_irqTxTimerHandler(&dmx1Out);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	429a      	cmp	r2, r3
 8003396:	d102      	bne.n	800339e <HAL_TIM_PeriodElapsedCallback+0x1a>
 8003398:	4803      	ldr	r0, [pc, #12]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800339a:	f005 ff49 	bl	8009230 <dmx_irqTxTimerHandler>
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000000 	.word	0x20000000

080033ac <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void){
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  if (__HAL_TIM_GET_FLAG(&htim16, TIM_FLAG_UPDATE) != RESET){
 80033b0:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <TIM1_UP_TIM16_IRQHandler+0x28>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d104      	bne.n	80033c8 <TIM1_UP_TIM16_IRQHandler+0x1c>
	  __HAL_TIM_CLEAR_IT(&htim16, TIM_IT_UPDATE);
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <TIM1_UP_TIM16_IRQHandler+0x28>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f06f 0201 	mvn.w	r2, #1
 80033c6:	611a      	str	r2, [r3, #16]
	  //i2c_soft_timer_us(&softI2C2);
  }
}
 80033c8:	bf00      	nop
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	2000a5d8 	.word	0x2000a5d8

080033d8 <HAL_GPIO_EXTI_Callback>:

bool usbConnected = false;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == I_USB_VBUS_Pin) {
 80033e2:	88fb      	ldrh	r3, [r7, #6]
 80033e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e8:	d10f      	bne.n	800340a <HAL_GPIO_EXTI_Callback+0x32>
		if(HAL_GPIO_ReadPin(I_USB_VBUS_GPIO_Port, I_USB_VBUS_Pin)) usbConnected = true;
 80033ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033f2:	f000 faed 	bl	80039d0 <HAL_GPIO_ReadPin>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_GPIO_EXTI_Callback+0x2c>
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_GPIO_EXTI_Callback+0x3c>)
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
		else usbConnected = false;
	}
}
 8003402:	e002      	b.n	800340a <HAL_GPIO_EXTI_Callback+0x32>
		else usbConnected = false;
 8003404:	4b03      	ldr	r3, [pc, #12]	; (8003414 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	2000a1a0 	.word	0x2000a1a0

08003418 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003422:	2003      	movs	r0, #3
 8003424:	f000 f918 	bl	8003658 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003428:	2000      	movs	r0, #0
 800342a:	f000 f80d 	bl	8003448 <HAL_InitTick>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	71fb      	strb	r3, [r7, #7]
 8003438:	e001      	b.n	800343e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800343a:	f008 f9bf 	bl	800b7bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800343e:	79fb      	ldrb	r3, [r7, #7]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	73fb      	strb	r3, [r7, #15]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <HAL_InitTick+0x40>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a0c      	ldr	r2, [pc, #48]	; (800348c <HAL_InitTick+0x44>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	099b      	lsrs	r3, r3, #6
 8003460:	4618      	mov	r0, r3
 8003462:	f000 f92e 	bl	80036c2 <HAL_SYSTICK_Config>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_InitTick+0x2a>
  {
    status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
 8003470:	e005      	b.n	800347e <HAL_InitTick+0x36>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8003472:	2200      	movs	r2, #0
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	f04f 30ff 	mov.w	r0, #4294967295
 800347a:	f000 f8f8 	bl	800366e <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800347e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	2000129c 	.word	0x2000129c
 800348c:	10624dd3 	.word	0x10624dd3

08003490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  uwTick++;
 8003494:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <HAL_IncTick+0x18>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	3301      	adds	r3, #1
 800349a:	4a03      	ldr	r2, [pc, #12]	; (80034a8 <HAL_IncTick+0x18>)
 800349c:	6013      	str	r3, [r2, #0]
}
 800349e:	bf00      	nop
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	2000a3d8 	.word	0x2000a3d8

080034ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return uwTick;
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <HAL_GetTick+0x14>)
 80034b2:	681b      	ldr	r3, [r3, #0]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	2000a3d8 	.word	0x2000a3d8

080034c4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <NVIC_SetPriorityGrouping+0x44>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034e0:	4013      	ands	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034f6:	4a04      	ldr	r2, [pc, #16]	; (8003508 <NVIC_SetPriorityGrouping+0x44>)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	60d3      	str	r3, [r2, #12]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <NVIC_GetPriorityGrouping+0x18>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	0a1b      	lsrs	r3, r3, #8
 8003516:	f003 0307 	and.w	r3, r3, #7
}
 800351a:	4618      	mov	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003532:	4909      	ldr	r1, [pc, #36]	; (8003558 <NVIC_EnableIRQ+0x30>)
 8003534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	79fa      	ldrb	r2, [r7, #7]
 800353c:	f002 021f 	and.w	r2, r2, #31
 8003540:	2001      	movs	r0, #1
 8003542:	fa00 f202 	lsl.w	r2, r0, r2
 8003546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	e000e100 	.word	0xe000e100

0800355c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	6039      	str	r1, [r7, #0]
 8003566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356c:	2b00      	cmp	r3, #0
 800356e:	da0b      	bge.n	8003588 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003570:	490d      	ldr	r1, [pc, #52]	; (80035a8 <NVIC_SetPriority+0x4c>)
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	3b04      	subs	r3, #4
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	0112      	lsls	r2, r2, #4
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	440b      	add	r3, r1
 8003584:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003586:	e009      	b.n	800359c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003588:	4908      	ldr	r1, [pc, #32]	; (80035ac <NVIC_SetPriority+0x50>)
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	0112      	lsls	r2, r2, #4
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	440b      	add	r3, r1
 8003598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000ed00 	.word	0xe000ed00
 80035ac:	e000e100 	.word	0xe000e100

080035b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b089      	sub	sp, #36	; 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f1c3 0307 	rsb	r3, r3, #7
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	bf28      	it	cs
 80035ce:	2304      	movcs	r3, #4
 80035d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3304      	adds	r3, #4
 80035d6:	2b06      	cmp	r3, #6
 80035d8:	d902      	bls.n	80035e0 <NVIC_EncodePriority+0x30>
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3b03      	subs	r3, #3
 80035de:	e000      	b.n	80035e2 <NVIC_EncodePriority+0x32>
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e4:	2201      	movs	r2, #1
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	1e5a      	subs	r2, r3, #1
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	401a      	ands	r2, r3
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f6:	2101      	movs	r1, #1
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	fa01 f303 	lsl.w	r3, r1, r3
 80035fe:	1e59      	subs	r1, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003604:	4313      	orrs	r3, r2
         );
}
 8003606:	4618      	mov	r0, r3
 8003608:	3724      	adds	r7, #36	; 0x24
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3b01      	subs	r3, #1
 8003620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003624:	d301      	bcc.n	800362a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003626:	2301      	movs	r3, #1
 8003628:	e00f      	b.n	800364a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800362a:	4a0a      	ldr	r2, [pc, #40]	; (8003654 <SysTick_Config+0x40>)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3b01      	subs	r3, #1
 8003630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003632:	210f      	movs	r1, #15
 8003634:	f04f 30ff 	mov.w	r0, #4294967295
 8003638:	f7ff ff90 	bl	800355c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <SysTick_Config+0x40>)
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003642:	4b04      	ldr	r3, [pc, #16]	; (8003654 <SysTick_Config+0x40>)
 8003644:	2207      	movs	r2, #7
 8003646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	e000e010 	.word	0xe000e010

08003658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff ff2f 	bl	80034c4 <NVIC_SetPriorityGrouping>
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b086      	sub	sp, #24
 8003672:	af00      	add	r7, sp, #0
 8003674:	4603      	mov	r3, r0
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003680:	f7ff ff44 	bl	800350c <NVIC_GetPriorityGrouping>
 8003684:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	6978      	ldr	r0, [r7, #20]
 800368c:	f7ff ff90 	bl	80035b0 <NVIC_EncodePriority>
 8003690:	4602      	mov	r2, r0
 8003692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003696:	4611      	mov	r1, r2
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff ff5f 	bl	800355c <NVIC_SetPriority>
}
 800369e:	bf00      	nop
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4603      	mov	r3, r0
 80036ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff ff37 	bl	8003528 <NVIC_EnableIRQ>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ffa2 	bl	8003614 <SysTick_Config>
 80036d0:	4603      	mov	r3, r0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ea:	e154      	b.n	8003996 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	2101      	movs	r1, #1
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	fa01 f303 	lsl.w	r3, r1, r3
 80036f8:	4013      	ands	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8146 	beq.w	8003990 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d003      	beq.n	8003714 <HAL_GPIO_Init+0x38>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b12      	cmp	r3, #18
 8003712:	d123      	bne.n	800375c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	08da      	lsrs	r2, r3, #3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3208      	adds	r2, #8
 800371c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003720:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	220f      	movs	r2, #15
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4013      	ands	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	08da      	lsrs	r2, r3, #3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3208      	adds	r2, #8
 8003756:	6939      	ldr	r1, [r7, #16]
 8003758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	2203      	movs	r2, #3
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0203 	and.w	r2, r3, #3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d00b      	beq.n	80037b0 <HAL_GPIO_Init+0xd4>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d007      	beq.n	80037b0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037a4:	2b11      	cmp	r3, #17
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b12      	cmp	r3, #18
 80037ae:	d130      	bne.n	8003812 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	2203      	movs	r2, #3
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037e6:	2201      	movs	r2, #1
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	f003 0201 	and.w	r2, r3, #1
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	2203      	movs	r2, #3
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4013      	ands	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 80a0 	beq.w	8003990 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003850:	4a58      	ldr	r2, [pc, #352]	; (80039b4 <HAL_GPIO_Init+0x2d8>)
 8003852:	4b58      	ldr	r3, [pc, #352]	; (80039b4 <HAL_GPIO_Init+0x2d8>)
 8003854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6613      	str	r3, [r2, #96]	; 0x60
 800385c:	4b55      	ldr	r3, [pc, #340]	; (80039b4 <HAL_GPIO_Init+0x2d8>)
 800385e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003868:	4a53      	ldr	r2, [pc, #332]	; (80039b8 <HAL_GPIO_Init+0x2dc>)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	089b      	lsrs	r3, r3, #2
 800386e:	3302      	adds	r3, #2
 8003870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003874:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	220f      	movs	r2, #15
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4013      	ands	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003892:	d019      	beq.n	80038c8 <HAL_GPIO_Init+0x1ec>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a49      	ldr	r2, [pc, #292]	; (80039bc <HAL_GPIO_Init+0x2e0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d013      	beq.n	80038c4 <HAL_GPIO_Init+0x1e8>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a48      	ldr	r2, [pc, #288]	; (80039c0 <HAL_GPIO_Init+0x2e4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00d      	beq.n	80038c0 <HAL_GPIO_Init+0x1e4>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a47      	ldr	r2, [pc, #284]	; (80039c4 <HAL_GPIO_Init+0x2e8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d007      	beq.n	80038bc <HAL_GPIO_Init+0x1e0>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a46      	ldr	r2, [pc, #280]	; (80039c8 <HAL_GPIO_Init+0x2ec>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d101      	bne.n	80038b8 <HAL_GPIO_Init+0x1dc>
 80038b4:	2304      	movs	r3, #4
 80038b6:	e008      	b.n	80038ca <HAL_GPIO_Init+0x1ee>
 80038b8:	2307      	movs	r3, #7
 80038ba:	e006      	b.n	80038ca <HAL_GPIO_Init+0x1ee>
 80038bc:	2303      	movs	r3, #3
 80038be:	e004      	b.n	80038ca <HAL_GPIO_Init+0x1ee>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e002      	b.n	80038ca <HAL_GPIO_Init+0x1ee>
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <HAL_GPIO_Init+0x1ee>
 80038c8:	2300      	movs	r3, #0
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	f002 0203 	and.w	r2, r2, #3
 80038d0:	0092      	lsls	r2, r2, #2
 80038d2:	4093      	lsls	r3, r2
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038da:	4937      	ldr	r1, [pc, #220]	; (80039b8 <HAL_GPIO_Init+0x2dc>)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	089b      	lsrs	r3, r3, #2
 80038e0:	3302      	adds	r3, #2
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038e8:	4b38      	ldr	r3, [pc, #224]	; (80039cc <HAL_GPIO_Init+0x2f0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800390c:	4a2f      	ldr	r2, [pc, #188]	; (80039cc <HAL_GPIO_Init+0x2f0>)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003912:	4b2e      	ldr	r3, [pc, #184]	; (80039cc <HAL_GPIO_Init+0x2f0>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	43db      	mvns	r3, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003936:	4a25      	ldr	r2, [pc, #148]	; (80039cc <HAL_GPIO_Init+0x2f0>)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800393c:	4b23      	ldr	r3, [pc, #140]	; (80039cc <HAL_GPIO_Init+0x2f0>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	43db      	mvns	r3, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003960:	4a1a      	ldr	r2, [pc, #104]	; (80039cc <HAL_GPIO_Init+0x2f0>)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003966:	4b19      	ldr	r3, [pc, #100]	; (80039cc <HAL_GPIO_Init+0x2f0>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	43db      	mvns	r3, r3
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4013      	ands	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800398a:	4a10      	ldr	r2, [pc, #64]	; (80039cc <HAL_GPIO_Init+0x2f0>)
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	3301      	adds	r3, #1
 8003994:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	fa22 f303 	lsr.w	r3, r2, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f47f aea3 	bne.w	80036ec <HAL_GPIO_Init+0x10>
  }
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40010000 	.word	0x40010000
 80039bc:	48000400 	.word	0x48000400
 80039c0:	48000800 	.word	0x48000800
 80039c4:	48000c00 	.word	0x48000c00
 80039c8:	48001000 	.word	0x48001000
 80039cc:	40010400 	.word	0x40010400

080039d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	887b      	ldrh	r3, [r7, #2]
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
 80039ec:	e001      	b.n	80039f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039ee:	2300      	movs	r3, #0
 80039f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	807b      	strh	r3, [r7, #2]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a10:	787b      	ldrb	r3, [r7, #1]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a16:	887a      	ldrh	r2, [r7, #2]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a1c:	e002      	b.n	8003a24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a1e:	887a      	ldrh	r2, [r7, #2]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	887b      	ldrh	r3, [r7, #2]
 8003a42:	405a      	eors	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	615a      	str	r2, [r3, #20]
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a6a:	4a05      	ldr	r2, [pc, #20]	; (8003a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fcb0 	bl	80033d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a78:	bf00      	nop
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40010400 	.word	0x40010400

08003a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e080      	b.n	8003b98 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f007 fcf6 	bl	800b49c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2224      	movs	r2, #36	; 0x24
 8003ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	6812      	ldr	r2, [r2, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6852      	ldr	r2, [r2, #4]
 8003ad0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ad4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	6892      	ldr	r2, [r2, #8]
 8003ae0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ae4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d107      	bne.n	8003afe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6892      	ldr	r2, [r2, #8]
 8003af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	e006      	b.n	8003b0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6892      	ldr	r2, [r2, #8]
 8003b06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d104      	bne.n	8003b1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	68d2      	ldr	r2, [r2, #12]
 8003b3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6911      	ldr	r1, [r2, #16]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6952      	ldr	r2, [r2, #20]
 8003b4e:	4311      	orrs	r1, r2
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6992      	ldr	r2, [r2, #24]
 8003b54:	0212      	lsls	r2, r2, #8
 8003b56:	430a      	orrs	r2, r1
 8003b58:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	69d1      	ldr	r1, [r2, #28]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6a12      	ldr	r2, [r2, #32]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	f042 0201 	orr.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	461a      	mov	r2, r3
 8003bac:	460b      	mov	r3, r1
 8003bae:	817b      	strh	r3, [r7, #10]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	f040 80da 	bne.w	8003d76 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_I2C_Master_Transmit+0x30>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e0d3      	b.n	8003d78 <HAL_I2C_Master_Transmit+0x1d8>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bd8:	f7ff fc68 	bl	80034ac <HAL_GetTick>
 8003bdc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	2319      	movs	r3, #25
 8003be4:	2201      	movs	r2, #1
 8003be6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 fbc6 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e0be      	b.n	8003d78 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2221      	movs	r2, #33	; 0x21
 8003bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2210      	movs	r2, #16
 8003c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	893a      	ldrh	r2, [r7, #8]
 8003c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2bff      	cmp	r3, #255	; 0xff
 8003c2a:	d90e      	bls.n	8003c4a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	22ff      	movs	r2, #255	; 0xff
 8003c30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	8979      	ldrh	r1, [r7, #10]
 8003c3a:	4b51      	ldr	r3, [pc, #324]	; (8003d80 <HAL_I2C_Master_Transmit+0x1e0>)
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 fcbc 	bl	80045c0 <I2C_TransferConfig>
 8003c48:	e06c      	b.n	8003d24 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	8979      	ldrh	r1, [r7, #10]
 8003c5c:	4b48      	ldr	r3, [pc, #288]	; (8003d80 <HAL_I2C_Master_Transmit+0x1e0>)
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 fcab 	bl	80045c0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003c6a:	e05b      	b.n	8003d24 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	6a39      	ldr	r1, [r7, #32]
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 fbc3 	bl	80043fc <I2C_WaitOnTXISFlagUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e07b      	b.n	8003d78 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c88:	7812      	ldrb	r2, [r2, #0]
 8003c8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d034      	beq.n	8003d24 <HAL_I2C_Master_Transmit+0x184>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d130      	bne.n	8003d24 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2180      	movs	r1, #128	; 0x80
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 fb55 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e04d      	b.n	8003d78 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2bff      	cmp	r3, #255	; 0xff
 8003ce4:	d90e      	bls.n	8003d04 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	22ff      	movs	r2, #255	; 0xff
 8003cea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	8979      	ldrh	r1, [r7, #10]
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 fc5f 	bl	80045c0 <I2C_TransferConfig>
 8003d02:	e00f      	b.n	8003d24 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	8979      	ldrh	r1, [r7, #10]
 8003d16:	2300      	movs	r3, #0
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 fc4e 	bl	80045c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d19e      	bne.n	8003c6c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	6a39      	ldr	r1, [r7, #32]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 fba2 	bl	800447c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e01a      	b.n	8003d78 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2220      	movs	r2, #32
 8003d48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_I2C_Master_Transmit+0x1e4>)
 8003d56:	400b      	ands	r3, r1
 8003d58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	e000      	b.n	8003d78 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003d76:	2302      	movs	r3, #2
  }
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	80002000 	.word	0x80002000
 8003d84:	fe00e800 	.word	0xfe00e800

08003d88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	4608      	mov	r0, r1
 8003d92:	4611      	mov	r1, r2
 8003d94:	461a      	mov	r2, r3
 8003d96:	4603      	mov	r3, r0
 8003d98:	817b      	strh	r3, [r7, #10]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	813b      	strh	r3, [r7, #8]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	f040 80f9 	bne.w	8003fa2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_I2C_Mem_Write+0x34>
 8003db6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d105      	bne.n	8003dc8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dc2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0ed      	b.n	8003fa4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_I2C_Mem_Write+0x4e>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e0e6      	b.n	8003fa4 <HAL_I2C_Mem_Write+0x21c>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dde:	f7ff fb65 	bl	80034ac <HAL_GetTick>
 8003de2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	2319      	movs	r3, #25
 8003dea:	2201      	movs	r2, #1
 8003dec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 fac3 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e0d1      	b.n	8003fa4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2221      	movs	r2, #33	; 0x21
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2240      	movs	r2, #64	; 0x40
 8003e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a3a      	ldr	r2, [r7, #32]
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e28:	88f8      	ldrh	r0, [r7, #6]
 8003e2a:	893a      	ldrh	r2, [r7, #8]
 8003e2c:	8979      	ldrh	r1, [r7, #10]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	9301      	str	r3, [sp, #4]
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	4603      	mov	r3, r0
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f9d3 	bl	80041e4 <I2C_RequestMemoryWrite>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e0a9      	b.n	8003fa4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2bff      	cmp	r3, #255	; 0xff
 8003e58:	d90e      	bls.n	8003e78 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	22ff      	movs	r2, #255	; 0xff
 8003e5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	8979      	ldrh	r1, [r7, #10]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 fba5 	bl	80045c0 <I2C_TransferConfig>
 8003e76:	e00f      	b.n	8003e98 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	8979      	ldrh	r1, [r7, #10]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fb94 	bl	80045c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 faad 	bl	80043fc <I2C_WaitOnTXISFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e07b      	b.n	8003fa4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eb4:	7812      	ldrb	r2, [r2, #0]
 8003eb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d034      	beq.n	8003f50 <HAL_I2C_Mem_Write+0x1c8>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d130      	bne.n	8003f50 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2180      	movs	r1, #128	; 0x80
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 fa3f 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e04d      	b.n	8003fa4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2bff      	cmp	r3, #255	; 0xff
 8003f10:	d90e      	bls.n	8003f30 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	22ff      	movs	r2, #255	; 0xff
 8003f16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	8979      	ldrh	r1, [r7, #10]
 8003f20:	2300      	movs	r3, #0
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 fb49 	bl	80045c0 <I2C_TransferConfig>
 8003f2e:	e00f      	b.n	8003f50 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	8979      	ldrh	r1, [r7, #10]
 8003f42:	2300      	movs	r3, #0
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 fb38 	bl	80045c0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d19e      	bne.n	8003e98 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 fa8c 	bl	800447c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e01a      	b.n	8003fa4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2220      	movs	r2, #32
 8003f74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6859      	ldr	r1, [r3, #4]
 8003f80:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <HAL_I2C_Mem_Write+0x224>)
 8003f82:	400b      	ands	r3, r1
 8003f84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e000      	b.n	8003fa4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003fa2:	2302      	movs	r3, #2
  }
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	fe00e800 	.word	0xfe00e800

08003fb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	4608      	mov	r0, r1
 8003fba:	4611      	mov	r1, r2
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	817b      	strh	r3, [r7, #10]
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	813b      	strh	r3, [r7, #8]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	f040 80fd 	bne.w	80041d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_I2C_Mem_Read+0x34>
 8003fde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d105      	bne.n	8003ff0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0f1      	b.n	80041d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_I2C_Mem_Read+0x4e>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e0ea      	b.n	80041d4 <HAL_I2C_Mem_Read+0x224>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004006:	f7ff fa51 	bl	80034ac <HAL_GetTick>
 800400a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	2319      	movs	r3, #25
 8004012:	2201      	movs	r2, #1
 8004014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 f9af 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0d5      	b.n	80041d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2222      	movs	r2, #34	; 0x22
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2240      	movs	r2, #64	; 0x40
 8004034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a3a      	ldr	r2, [r7, #32]
 8004042:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004048:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004050:	88f8      	ldrh	r0, [r7, #6]
 8004052:	893a      	ldrh	r2, [r7, #8]
 8004054:	8979      	ldrh	r1, [r7, #10]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	4603      	mov	r3, r0
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 f913 	bl	800428c <I2C_RequestMemoryRead>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0ad      	b.n	80041d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	2bff      	cmp	r3, #255	; 0xff
 8004080:	d90e      	bls.n	80040a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	22ff      	movs	r2, #255	; 0xff
 8004086:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408c:	b2da      	uxtb	r2, r3
 800408e:	8979      	ldrh	r1, [r7, #10]
 8004090:	4b52      	ldr	r3, [pc, #328]	; (80041dc <HAL_I2C_Mem_Read+0x22c>)
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 fa91 	bl	80045c0 <I2C_TransferConfig>
 800409e:	e00f      	b.n	80040c0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	8979      	ldrh	r1, [r7, #10]
 80040b2:	4b4a      	ldr	r3, [pc, #296]	; (80041dc <HAL_I2C_Mem_Read+0x22c>)
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fa80 	bl	80045c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	2200      	movs	r2, #0
 80040c8:	2104      	movs	r1, #4
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f956 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e07c      	b.n	80041d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d034      	beq.n	8004180 <HAL_I2C_Mem_Read+0x1d0>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411a:	2b00      	cmp	r3, #0
 800411c:	d130      	bne.n	8004180 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	2200      	movs	r2, #0
 8004126:	2180      	movs	r1, #128	; 0x80
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f927 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e04d      	b.n	80041d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	2bff      	cmp	r3, #255	; 0xff
 8004140:	d90e      	bls.n	8004160 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	22ff      	movs	r2, #255	; 0xff
 8004146:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414c:	b2da      	uxtb	r2, r3
 800414e:	8979      	ldrh	r1, [r7, #10]
 8004150:	2300      	movs	r3, #0
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 fa31 	bl	80045c0 <I2C_TransferConfig>
 800415e:	e00f      	b.n	8004180 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416e:	b2da      	uxtb	r2, r3
 8004170:	8979      	ldrh	r1, [r7, #10]
 8004172:	2300      	movs	r3, #0
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fa20 	bl	80045c0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d19a      	bne.n	80040c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 f974 	bl	800447c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e01a      	b.n	80041d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2220      	movs	r2, #32
 80041a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6859      	ldr	r1, [r3, #4]
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <HAL_I2C_Mem_Read+0x230>)
 80041b2:	400b      	ands	r3, r1
 80041b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e000      	b.n	80041d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80041d2:	2302      	movs	r3, #2
  }
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	80002400 	.word	0x80002400
 80041e0:	fe00e800 	.word	0xfe00e800

080041e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	4608      	mov	r0, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	461a      	mov	r2, r3
 80041f2:	4603      	mov	r3, r0
 80041f4:	817b      	strh	r3, [r7, #10]
 80041f6:	460b      	mov	r3, r1
 80041f8:	813b      	strh	r3, [r7, #8]
 80041fa:	4613      	mov	r3, r2
 80041fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	8979      	ldrh	r1, [r7, #10]
 8004204:	4b20      	ldr	r3, [pc, #128]	; (8004288 <I2C_RequestMemoryWrite+0xa4>)
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f9d7 	bl	80045c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	69b9      	ldr	r1, [r7, #24]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f8f0 	bl	80043fc <I2C_WaitOnTXISFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e02c      	b.n	8004280 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004226:	88fb      	ldrh	r3, [r7, #6]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d105      	bne.n	8004238 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	893a      	ldrh	r2, [r7, #8]
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	629a      	str	r2, [r3, #40]	; 0x28
 8004236:	e015      	b.n	8004264 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	893a      	ldrh	r2, [r7, #8]
 800423e:	0a12      	lsrs	r2, r2, #8
 8004240:	b292      	uxth	r2, r2
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	69b9      	ldr	r1, [r7, #24]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f8d6 	bl	80043fc <I2C_WaitOnTXISFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e012      	b.n	8004280 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	893a      	ldrh	r2, [r7, #8]
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	2200      	movs	r2, #0
 800426c:	2180      	movs	r1, #128	; 0x80
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f884 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	80002000 	.word	0x80002000

0800428c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	4608      	mov	r0, r1
 8004296:	4611      	mov	r1, r2
 8004298:	461a      	mov	r2, r3
 800429a:	4603      	mov	r3, r0
 800429c:	817b      	strh	r3, [r7, #10]
 800429e:	460b      	mov	r3, r1
 80042a0:	813b      	strh	r3, [r7, #8]
 80042a2:	4613      	mov	r3, r2
 80042a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	8979      	ldrh	r1, [r7, #10]
 80042ac:	4b20      	ldr	r3, [pc, #128]	; (8004330 <I2C_RequestMemoryRead+0xa4>)
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	2300      	movs	r3, #0
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f984 	bl	80045c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042b8:	69fa      	ldr	r2, [r7, #28]
 80042ba:	69b9      	ldr	r1, [r7, #24]
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f89d 	bl	80043fc <I2C_WaitOnTXISFlagUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e02c      	b.n	8004326 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042cc:	88fb      	ldrh	r3, [r7, #6]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d105      	bne.n	80042de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	893a      	ldrh	r2, [r7, #8]
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	629a      	str	r2, [r3, #40]	; 0x28
 80042dc:	e015      	b.n	800430a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	893a      	ldrh	r2, [r7, #8]
 80042e4:	0a12      	lsrs	r2, r2, #8
 80042e6:	b292      	uxth	r2, r2
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	69b9      	ldr	r1, [r7, #24]
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f883 	bl	80043fc <I2C_WaitOnTXISFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e012      	b.n	8004326 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	893a      	ldrh	r2, [r7, #8]
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2200      	movs	r2, #0
 8004312:	2140      	movs	r1, #64	; 0x40
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f831 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	80002000 	.word	0x80002000

08004334 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b02      	cmp	r3, #2
 8004348:	d103      	bne.n	8004352 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2200      	movs	r2, #0
 8004350:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b01      	cmp	r3, #1
 800435e:	d007      	beq.n	8004370 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	6992      	ldr	r2, [r2, #24]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	619a      	str	r2, [r3, #24]
  }
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800438c:	e022      	b.n	80043d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d01e      	beq.n	80043d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004396:	f7ff f889 	bl	80034ac <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	1ad2      	subs	r2, r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d802      	bhi.n	80043ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d113      	bne.n	80043d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b0:	f043 0220 	orr.w	r2, r3, #32
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e00f      	b.n	80043f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	401a      	ands	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d0cd      	beq.n	800438e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004408:	e02c      	b.n	8004464 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f870 	bl	80044f4 <I2C_IsAcknowledgeFailed>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e02a      	b.n	8004474 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d01e      	beq.n	8004464 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004426:	f7ff f841 	bl	80034ac <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	1ad2      	subs	r2, r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	429a      	cmp	r2, r3
 8004434:	d802      	bhi.n	800443c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d113      	bne.n	8004464 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004440:	f043 0220 	orr.w	r2, r3, #32
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e007      	b.n	8004474 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b02      	cmp	r3, #2
 8004470:	d1cb      	bne.n	800440a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004488:	e028      	b.n	80044dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f830 	bl	80044f4 <I2C_IsAcknowledgeFailed>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e026      	b.n	80044ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449e:	f7ff f805 	bl	80034ac <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	1ad2      	subs	r2, r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d802      	bhi.n	80044b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d113      	bne.n	80044dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e007      	b.n	80044ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	d1cf      	bne.n	800448a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b10      	cmp	r3, #16
 800450c:	d151      	bne.n	80045b2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800450e:	e022      	b.n	8004556 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004516:	d01e      	beq.n	8004556 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004518:	f7fe ffc8 	bl	80034ac <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	1ad2      	subs	r2, r2, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	429a      	cmp	r2, r3
 8004526:	d802      	bhi.n	800452e <I2C_IsAcknowledgeFailed+0x3a>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d113      	bne.n	8004556 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	f043 0220 	orr.w	r2, r3, #32
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2220      	movs	r2, #32
 800453e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e02e      	b.n	80045b4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	f003 0320 	and.w	r3, r3, #32
 8004560:	2b20      	cmp	r3, #32
 8004562:	d1d5      	bne.n	8004510 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2210      	movs	r2, #16
 800456a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2220      	movs	r2, #32
 8004572:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f7ff fedd 	bl	8004334 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6859      	ldr	r1, [r3, #4]
 8004584:	4b0d      	ldr	r3, [pc, #52]	; (80045bc <I2C_IsAcknowledgeFailed+0xc8>)
 8004586:	400b      	ands	r3, r1
 8004588:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	f043 0204 	orr.w	r2, r3, #4
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	fe00e800 	.word	0xfe00e800

080045c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	607b      	str	r3, [r7, #4]
 80045ca:	460b      	mov	r3, r1
 80045cc:	817b      	strh	r3, [r7, #10]
 80045ce:	4613      	mov	r3, r2
 80045d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6859      	ldr	r1, [r3, #4]
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	0d5b      	lsrs	r3, r3, #21
 80045e0:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <I2C_TransferConfig+0x54>)
 80045e6:	4303      	orrs	r3, r0
 80045e8:	43db      	mvns	r3, r3
 80045ea:	4019      	ands	r1, r3
 80045ec:	897b      	ldrh	r3, [r7, #10]
 80045ee:	f3c3 0009 	ubfx	r0, r3, #0, #10
 80045f2:	7a7b      	ldrb	r3, [r7, #9]
 80045f4:	041b      	lsls	r3, r3, #16
 80045f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045fa:	4318      	orrs	r0, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4318      	orrs	r0, r3
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	4303      	orrs	r3, r0
 8004604:	430b      	orrs	r3, r1
 8004606:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004608:	bf00      	nop
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	03ff63ff 	.word	0x03ff63ff

08004618 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b20      	cmp	r3, #32
 800462c:	d138      	bne.n	80046a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004638:	2302      	movs	r3, #2
 800463a:	e032      	b.n	80046a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2224      	movs	r2, #36	; 0x24
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6812      	ldr	r2, [r2, #0]
 8004654:	6812      	ldr	r2, [r2, #0]
 8004656:	f022 0201 	bic.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	6812      	ldr	r2, [r2, #0]
 8004666:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800466a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6812      	ldr	r2, [r2, #0]
 8004674:	6811      	ldr	r1, [r2, #0]
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	f042 0201 	orr.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	e000      	b.n	80046a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
  }
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b085      	sub	sp, #20
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d139      	bne.n	8004738 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e033      	b.n	800473a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2224      	movs	r2, #36	; 0x24
 80046de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6812      	ldr	r2, [r2, #0]
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	f022 0201 	bic.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004700:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	6812      	ldr	r2, [r2, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim: LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_LPTIM_Init+0x16>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e076      	b.n	800484c <HAL_LPTIM_Init+0x104>

#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <HAL_LPTIM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f006 ff2e 	bl	800b5d4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d103      	bne.n	8004798 <HAL_LPTIM_Init+0x50>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 031e 	bic.w	r3, r3, #30
 8004796:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d005      	beq.n	80047b0 <HAL_LPTIM_Init+0x68>
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80047aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80047ae:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4b28      	ldr	r3, [pc, #160]	; (8004854 <HAL_LPTIM_Init+0x10c>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80047c0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80047c6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80047cc:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80047d2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d107      	bne.n	80047f2 <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 80047ea:	4313      	orrs	r3, r2
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00a      	beq.n	8004814 <HAL_LPTIM_Init+0xcc>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004806:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800480c:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a0d      	ldr	r2, [pc, #52]	; (8004858 <HAL_LPTIM_Init+0x110>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d108      	bne.n	8004838 <HAL_LPTIM_Init+0xf0>
    /* Check LPTIM1 Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));

    /* Configure LPTIM1 Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004832:	430a      	orrs	r2, r1
 8004834:	621a      	str	r2, [r3, #32]
 8004836:	e004      	b.n	8004842 <HAL_LPTIM_Init+0xfa>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004840:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	ff19f1fe 	.word	0xff19f1fe
 8004858:	40007c00 	.word	0x40007c00

0800485c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim: LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b01      	cmp	r3, #1
 8004870:	d10d      	bne.n	800488e <HAL_LPTIM_IRQHandler+0x32>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b01      	cmp	r3, #1
 800487e:	d106      	bne.n	800488e <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2201      	movs	r2, #1
 8004886:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f882 	bl	8004992 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b02      	cmp	r3, #2
 800489a:	d10d      	bne.n	80048b8 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d106      	bne.n	80048b8 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2202      	movs	r2, #2
 80048b0:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f877 	bl	80049a6 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0304 	and.w	r3, r3, #4
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d10d      	bne.n	80048e2 <HAL_LPTIM_IRQHandler+0x86>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d106      	bne.n	80048e2 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2204      	movs	r2, #4
 80048da:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f86c 	bl	80049ba <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d10d      	bne.n	800490c <HAL_LPTIM_IRQHandler+0xb0>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d106      	bne.n	800490c <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2208      	movs	r2, #8
 8004904:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f861 	bl	80049ce <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b10      	cmp	r3, #16
 8004918:	d10d      	bne.n	8004936 <HAL_LPTIM_IRQHandler+0xda>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b10      	cmp	r3, #16
 8004926:	d106      	bne.n	8004936 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2210      	movs	r2, #16
 800492e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f856 	bl	80049e2 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0320 	and.w	r3, r3, #32
 8004940:	2b20      	cmp	r3, #32
 8004942:	d10d      	bne.n	8004960 <HAL_LPTIM_IRQHandler+0x104>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b20      	cmp	r3, #32
 8004950:	d106      	bne.n	8004960 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2220      	movs	r2, #32
 8004958:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f84b 	bl	80049f6 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496a:	2b40      	cmp	r3, #64	; 0x40
 800496c:	d10d      	bne.n	800498a <HAL_LPTIM_IRQHandler+0x12e>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	d106      	bne.n	800498a <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2240      	movs	r2, #64	; 0x40
 8004982:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f840 	bl	8004a0a <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */      
    }
  }
#endif
}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a20:	b08b      	sub	sp, #44	; 0x2c
 8004a22:	af06      	add	r7, sp, #24
 8004a24:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0cb      	b.n	8004bc8 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d106      	bne.n	8004a4a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f007 fc41 	bl	800c2cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2203      	movs	r2, #3
 8004a4e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f003 f9a6 	bl	8007da8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	603b      	str	r3, [r7, #0]
 8004a62:	687e      	ldr	r6, [r7, #4]
 8004a64:	466d      	mov	r5, sp
 8004a66:	f106 0410 	add.w	r4, r6, #16
 8004a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	602b      	str	r3, [r5, #0]
 8004a72:	1d33      	adds	r3, r6, #4
 8004a74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a76:	6838      	ldr	r0, [r7, #0]
 8004a78:	f003 f96d 	bl	8007d56 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2100      	movs	r1, #0
 8004a82:	4618      	mov	r0, r3
 8004a84:	f003 f9ad 	bl	8007de2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
 8004a88:	2300      	movs	r3, #0
 8004a8a:	73fb      	strb	r3, [r7, #15]
 8004a8c:	e035      	b.n	8004afa <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	015b      	lsls	r3, r3, #5
 8004a94:	4413      	add	r3, r2
 8004a96:	3329      	adds	r3, #41	; 0x29
 8004a98:	2201      	movs	r2, #1
 8004a9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	015b      	lsls	r3, r3, #5
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3328      	adds	r3, #40	; 0x28
 8004aa6:	7bfa      	ldrb	r2, [r7, #15]
 8004aa8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	7bfa      	ldrb	r2, [r7, #15]
 8004aae:	b291      	uxth	r1, r2
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	015b      	lsls	r3, r3, #5
 8004ab4:	4413      	add	r3, r2
 8004ab6:	3336      	adds	r3, #54	; 0x36
 8004ab8:	460a      	mov	r2, r1
 8004aba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	015b      	lsls	r3, r3, #5
 8004ac2:	4413      	add	r3, r2
 8004ac4:	332b      	adds	r3, #43	; 0x2b
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	015b      	lsls	r3, r3, #5
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3338      	adds	r3, #56	; 0x38
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	015b      	lsls	r3, r3, #5
 8004ade:	4413      	add	r3, r2
 8004ae0:	333c      	adds	r3, #60	; 0x3c
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	3302      	adds	r3, #2
 8004aec:	015b      	lsls	r3, r3, #5
 8004aee:	4413      	add	r3, r2
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < 15U; i++)
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	3301      	adds	r3, #1
 8004af8:	73fb      	strb	r3, [r7, #15]
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	2b0e      	cmp	r3, #14
 8004afe:	d9c6      	bls.n	8004a8e <HAL_PCD_Init+0x70>
  }

  for (i = 0U; i < 15U; i++)
 8004b00:	2300      	movs	r3, #0
 8004b02:	73fb      	strb	r3, [r7, #15]
 8004b04:	e031      	b.n	8004b6a <HAL_PCD_Init+0x14c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	015b      	lsls	r3, r3, #5
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f203 2329 	addw	r3, r3, #553	; 0x229
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	015b      	lsls	r3, r3, #5
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004b22:	7bfa      	ldrb	r2, [r7, #15]
 8004b24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	015b      	lsls	r3, r3, #5
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f203 232b 	addw	r3, r3, #555	; 0x22b
 8004b32:	2200      	movs	r2, #0
 8004b34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	015b      	lsls	r3, r3, #5
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	015b      	lsls	r3, r3, #5
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	3312      	adds	r3, #18
 8004b5c:	015b      	lsls	r3, r3, #5
 8004b5e:	4413      	add	r3, r2
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < 15U; i++)
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	3301      	adds	r3, #1
 8004b68:	73fb      	strb	r3, [r7, #15]
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	2b0e      	cmp	r3, #14
 8004b6e:	d9ca      	bls.n	8004b06 <HAL_PCD_Init+0xe8>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	687e      	ldr	r6, [r7, #4]
 8004b78:	466d      	mov	r5, sp
 8004b7a:	f106 0410 	add.w	r4, r6, #16
 8004b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	602b      	str	r3, [r5, #0]
 8004b86:	1d33      	adds	r3, r6, #4
 8004b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b8a:	6838      	ldr	r0, [r7, #0]
 8004b8c:	f003 f936 	bl	8007dfc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d102      	bne.n	8004bae <HAL_PCD_Init+0x190>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 fe5e 	bl	800586a <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d102      	bne.n	8004bbc <HAL_PCD_Init+0x19e>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fe31 	bl	800581e <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f004 f966 	bl	8008e92 <USB_DevDisconnect>

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bd0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_PCD_Start+0x16>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e012      	b.n	8004c0c <HAL_PCD_Start+0x3c>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_DevConnect(hpcd->Instance);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f004 f936 	bl	8008e64 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f003 f8bb 	bl	8007d78 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f004 f94b 	bl	8008ebc <USB_ReadInterrupts>
 8004c26:	4603      	mov	r3, r0
 8004c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c30:	d102      	bne.n	8004c38 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fb40 	bl	80052b8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f004 f93d 	bl	8008ebc <USB_ReadInterrupts>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4c:	d112      	bne.n	8004c74 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004c5a:	b292      	uxth	r2, r2
 8004c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c60:	b292      	uxth	r2, r2
 8004c62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f007 fbb7 	bl	800c3da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f929 	bl	8004ec6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f004 f91f 	bl	8008ebc <USB_ReadInterrupts>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c88:	d10b      	bne.n	8004ca2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6812      	ldr	r2, [r2, #0]
 8004c92:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004c96:	b292      	uxth	r2, r2
 8004c98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c9c:	b292      	uxth	r2, r2
 8004c9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f004 f908 	bl	8008ebc <USB_ReadInterrupts>
 8004cac:	4603      	mov	r3, r0
 8004cae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb6:	d10b      	bne.n	8004cd0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6812      	ldr	r2, [r2, #0]
 8004cc0:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004cc4:	b292      	uxth	r2, r2
 8004cc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cca:	b292      	uxth	r2, r2
 8004ccc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f004 f8f1 	bl	8008ebc <USB_ReadInterrupts>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce4:	d133      	bne.n	8004d4e <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8004cf2:	b292      	uxth	r2, r2
 8004cf4:	f022 0204 	bic.w	r2, r2, #4
 8004cf8:	b292      	uxth	r2, r2
 8004cfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6812      	ldr	r2, [r2, #0]
 8004d06:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8004d0a:	b292      	uxth	r2, r2
 8004d0c:	f022 0208 	bic.w	r2, r2, #8
 8004d10:	b292      	uxth	r2, r2
 8004d12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d107      	bne.n	8004d30 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004d28:	2100      	movs	r1, #0
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f007 fe08 	bl	800c940 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f007 fb8f 	bl	800c454 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6812      	ldr	r2, [r2, #0]
 8004d3e:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004d42:	b292      	uxth	r2, r2
 8004d44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d48:	b292      	uxth	r2, r2
 8004d4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f004 f8b2 	bl	8008ebc <USB_ReadInterrupts>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d62:	d131      	bne.n	8004dc8 <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6812      	ldr	r2, [r2, #0]
 8004d6c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8004d70:	b292      	uxth	r2, r2
 8004d72:	f042 0208 	orr.w	r2, r2, #8
 8004d76:	b292      	uxth	r2, r2
 8004d78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004d88:	b292      	uxth	r2, r2
 8004d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d8e:	b292      	uxth	r2, r2
 8004d90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8004da0:	b292      	uxth	r2, r2
 8004da2:	f042 0204 	orr.w	r2, r2, #4
 8004da6:	b292      	uxth	r2, r2
 8004da8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f004 f883 	bl	8008ebc <USB_ReadInterrupts>
 8004db6:	4603      	mov	r3, r0
 8004db8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc0:	d002      	beq.n	8004dc8 <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f007 fb2c 	bl	800c420 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f004 f875 	bl	8008ebc <USB_ReadInterrupts>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd8:	2b80      	cmp	r3, #128	; 0x80
 8004dda:	d13f      	bne.n	8004e5c <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004de8:	b292      	uxth	r2, r2
 8004dea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dee:	b292      	uxth	r2, r2
 8004df0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d12b      	bne.n	8004e56 <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6812      	ldr	r2, [r2, #0]
 8004e06:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8004e0a:	b292      	uxth	r2, r2
 8004e0c:	f042 0204 	orr.w	r2, r2, #4
 8004e10:	b292      	uxth	r2, r2
 8004e12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6812      	ldr	r2, [r2, #0]
 8004e1e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8004e22:	b292      	uxth	r2, r2
 8004e24:	f042 0208 	orr.w	r2, r2, #8
 8004e28:	b292      	uxth	r2, r2
 8004e2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	089b      	lsrs	r3, r3, #2
 8004e42:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f007 fd76 	bl	800c940 <HAL_PCDEx_LPM_Callback>
 8004e54:	e002      	b.n	8004e5c <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f007 fae2 	bl	800c420 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f004 f82b 	bl	8008ebc <USB_ReadInterrupts>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e70:	d10e      	bne.n	8004e90 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004e7e:	b292      	uxth	r2, r2
 8004e80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e84:	b292      	uxth	r2, r2
 8004e86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f007 fa97 	bl	800c3be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f004 f811 	bl	8008ebc <USB_ReadInterrupts>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea4:	d10b      	bne.n	8004ebe <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004eb2:	b292      	uxth	r2, r2
 8004eb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eb8:	b292      	uxth	r2, r2
 8004eba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004ebe:	bf00      	nop
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_PCD_SetAddress+0x1a>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e013      	b.n	8004f08 <HAL_PCD_SetAddress+0x42>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	78fa      	ldrb	r2, [r7, #3]
 8004eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	78fa      	ldrb	r2, [r7, #3]
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f003 ff9f 	bl	8008e3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	4608      	mov	r0, r1
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	4603      	mov	r3, r0
 8004f20:	70fb      	strb	r3, [r7, #3]
 8004f22:	460b      	mov	r3, r1
 8004f24:	803b      	strh	r3, [r7, #0]
 8004f26:	4613      	mov	r3, r2
 8004f28:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	da0b      	bge.n	8004f4e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004f36:	78fb      	ldrb	r3, [r7, #3]
 8004f38:	f003 030f 	and.w	r3, r3, #15
 8004f3c:	015b      	lsls	r3, r3, #5
 8004f3e:	3328      	adds	r3, #40	; 0x28
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	4413      	add	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	705a      	strb	r2, [r3, #1]
 8004f4c:	e00b      	b.n	8004f66 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8004f4e:	78fb      	ldrb	r3, [r7, #3]
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	015b      	lsls	r3, r3, #5
 8004f56:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & 0xFU;
 8004f66:	78fb      	ldrb	r3, [r7, #3]
 8004f68:	f003 030f 	and.w	r3, r3, #15
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004f72:	883a      	ldrh	r2, [r7, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	78ba      	ldrb	r2, [r7, #2]
 8004f7c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	785b      	ldrb	r3, [r3, #1]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d004      	beq.n	8004f90 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f90:	78bb      	ldrb	r3, [r7, #2]
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d102      	bne.n	8004f9c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d101      	bne.n	8004faa <HAL_PCD_EP_Open+0x9a>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	e00e      	b.n	8004fc8 <HAL_PCD_EP_Open+0xb8>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68f9      	ldr	r1, [r7, #12]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f002 ff43 	bl	8007e44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return ret;
 8004fc6:	7afb      	ldrb	r3, [r7, #11]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004fdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	da0b      	bge.n	8004ffc <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	015b      	lsls	r3, r3, #5
 8004fec:	3328      	adds	r3, #40	; 0x28
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	705a      	strb	r2, [r3, #1]
 8004ffa:	e00b      	b.n	8005014 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8004ffc:	78fb      	ldrb	r3, [r7, #3]
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	015b      	lsls	r3, r3, #5
 8005004:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	4413      	add	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & 0xFU;
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	b2da      	uxtb	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <HAL_PCD_EP_Close+0x5e>
 800502a:	2302      	movs	r3, #2
 800502c:	e00e      	b.n	800504c <HAL_PCD_EP_Close+0x7c>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68f9      	ldr	r1, [r7, #12]
 800503c:	4618      	mov	r0, r3
 800503e:	f003 f9e3 	bl	8008408 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	607a      	str	r2, [r7, #4]
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	460b      	mov	r3, r1
 8005062:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8005064:	7afb      	ldrb	r3, [r7, #11]
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	015b      	lsls	r3, r3, #5
 800506c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2200      	movs	r2, #0
 8005086:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2200      	movs	r2, #0
 800508c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0xFU;
 800508e:	7afb      	ldrb	r3, [r7, #11]
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	b2da      	uxtb	r2, r3
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0xFU) == 0U)
 800509a:	7afb      	ldrb	r3, [r7, #11]
 800509c:	f003 030f 	and.w	r3, r3, #15
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d106      	bne.n	80050b2 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6979      	ldr	r1, [r7, #20]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f003 fb42 	bl	8008734 <USB_EPStartXfer>
 80050b0:	e005      	b.n	80050be <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6979      	ldr	r1, [r7, #20]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f003 fb3b 	bl	8008734 <USB_EPStartXfer>
  }

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	70fb      	strb	r3, [r7, #3]
  return (uint16_t)hpcd->OUT_ep[ep_addr & 0xFU].xfer_count;
 80050d4:	78fb      	ldrb	r3, [r7, #3]
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	3312      	adds	r3, #18
 80050de:	015b      	lsls	r3, r3, #5
 80050e0:	4413      	add	r3, r2
 80050e2:	3304      	adds	r3, #4
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	b29b      	uxth	r3, r3
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	607a      	str	r2, [r7, #4]
 80050fe:	603b      	str	r3, [r7, #0]
 8005100:	460b      	mov	r3, r1
 8005102:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8005104:	7afb      	ldrb	r3, [r7, #11]
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	015b      	lsls	r3, r3, #5
 800510c:	3328      	adds	r3, #40	; 0x28
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4413      	add	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2200      	movs	r2, #0
 8005124:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2201      	movs	r2, #1
 800512a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0xFU;
 800512c:	7afb      	ldrb	r3, [r7, #11]
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	b2da      	uxtb	r2, r3
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0xFU) == 0U)
 8005138:	7afb      	ldrb	r3, [r7, #11]
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6979      	ldr	r1, [r7, #20]
 8005148:	4618      	mov	r0, r3
 800514a:	f003 faf3 	bl	8008734 <USB_EPStartXfer>
 800514e:	e005      	b.n	800515c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6979      	ldr	r1, [r7, #20]
 8005156:	4618      	mov	r0, r3
 8005158:	f003 faec 	bl	8008734 <USB_EPStartXfer>
  }

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	460b      	mov	r3, r1
 8005170:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8005172:	78fb      	ldrb	r3, [r7, #3]
 8005174:	f003 020f 	and.w	r2, r3, #15
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	d901      	bls.n	8005184 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e046      	b.n	8005212 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005184:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005188:	2b00      	cmp	r3, #0
 800518a:	da0b      	bge.n	80051a4 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800518c:	78fb      	ldrb	r3, [r7, #3]
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	015b      	lsls	r3, r3, #5
 8005194:	3328      	adds	r3, #40	; 0x28
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	4413      	add	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2201      	movs	r2, #1
 80051a0:	705a      	strb	r2, [r3, #1]
 80051a2:	e009      	b.n	80051b8 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	015b      	lsls	r3, r3, #5
 80051a8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	4413      	add	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2201      	movs	r2, #1
 80051bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	f003 030f 	and.w	r3, r3, #15
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_PCD_EP_SetStall+0x72>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e01c      	b.n	8005212 <HAL_PCD_EP_SetStall+0xac>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68f9      	ldr	r1, [r7, #12]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f003 fd58 	bl	8008c9c <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d108      	bne.n	8005208 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8005200:	4619      	mov	r1, r3
 8005202:	4610      	mov	r0, r2
 8005204:	f003 fe6a 	bl	8008edc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	460b      	mov	r3, r1
 8005224:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005226:	78fb      	ldrb	r3, [r7, #3]
 8005228:	f003 020f 	and.w	r2, r3, #15
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	429a      	cmp	r2, r3
 8005232:	d901      	bls.n	8005238 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e03a      	b.n	80052ae <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800523c:	2b00      	cmp	r3, #0
 800523e:	da0b      	bge.n	8005258 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	015b      	lsls	r3, r3, #5
 8005248:	3328      	adds	r3, #40	; 0x28
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	4413      	add	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	705a      	strb	r2, [r3, #1]
 8005256:	e00b      	b.n	8005270 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	015b      	lsls	r3, r3, #5
 8005260:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	4413      	add	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8005276:	78fb      	ldrb	r3, [r7, #3]
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	b2da      	uxtb	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <HAL_PCD_EP_ClrStall+0x76>
 800528c:	2302      	movs	r3, #2
 800528e:	e00e      	b.n	80052ae <HAL_PCD_EP_ClrStall+0x94>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68f9      	ldr	r1, [r7, #12]
 800529e:	4618      	mov	r0, r3
 80052a0:	f003 fd3e 	bl	8008d20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80052b8:	b590      	push	{r4, r7, lr}
 80052ba:	b089      	sub	sp, #36	; 0x24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80052c0:	e25e      	b.n	8005780 <PCD_EP_ISR_Handler+0x4c8>
  {
    wIstr = hpcd->Instance->ISTR;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052ca:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80052cc:	8afb      	ldrh	r3, [r7, #22]
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	f003 030f 	and.w	r3, r3, #15
 80052d4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80052d6:	7d7b      	ldrb	r3, [r7, #21]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f040 812c 	bne.w	8005536 <PCD_EP_ISR_Handler+0x27e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80052de:	8afb      	ldrh	r3, [r7, #22]
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d14b      	bne.n	8005380 <PCD_EP_ISR_Handler+0xc8>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80052f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f8:	b29c      	uxth	r4, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4622      	mov	r2, r4
 8005300:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	3328      	adds	r3, #40	; 0x28
 8005306:	613b      	str	r3, [r7, #16]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005310:	b29b      	uxth	r3, r3
 8005312:	461a      	mov	r2, r3
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	4413      	add	r3, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	4413      	add	r3, r2
 8005322:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	695a      	ldr	r2, [r3, #20]
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	441a      	add	r2, r3
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800533e:	2100      	movs	r1, #0
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f007 f825 	bl	800c390 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 8216 	beq.w	8005780 <PCD_EP_ISR_Handler+0x4c8>
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	f040 8211 	bne.w	8005780 <PCD_EP_ISR_Handler+0x4c8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	b292      	uxth	r2, r2
 8005372:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800537e:	e1ff      	b.n	8005780 <PCD_EP_ISR_Handler+0x4c8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8005386:	613b      	str	r3, [r7, #16]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	81fb      	strh	r3, [r7, #14]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005390:	89fb      	ldrh	r3, [r7, #14]
 8005392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005396:	2b00      	cmp	r3, #0
 8005398:	d02f      	beq.n	80053fa <PCD_EP_ISR_Handler+0x142>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	461a      	mov	r2, r3
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	4413      	add	r3, r2
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	4413      	add	r3, r2
 80053b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f503 6186 	add.w	r1, r3, #1072	; 0x430
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	88da      	ldrh	r2, [r3, #6]
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	f003 fdce 	bl	8008f76 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80053e6:	4013      	ands	r3, r2
 80053e8:	b29c      	uxth	r4, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4622      	mov	r2, r4
 80053f0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f006 ffa2 	bl	800c33c <HAL_PCD_SetupStageCallback>
 80053f8:	e1c2      	b.n	8005780 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80053fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f280 81be 	bge.w	8005780 <PCD_EP_ISR_Handler+0x4c8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	b29a      	uxth	r2, r3
 800540c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005410:	4013      	ands	r3, r2
 8005412:	b29c      	uxth	r4, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4622      	mov	r2, r4
 800541a:	801a      	strh	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005424:	b29b      	uxth	r3, r3
 8005426:	461a      	mov	r2, r3
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	4413      	add	r3, r2
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6812      	ldr	r2, [r2, #0]
 8005434:	4413      	add	r3, r2
 8005436:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 0U)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d011      	beq.n	8005470 <PCD_EP_ISR_Handler+0x1b8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	6959      	ldr	r1, [r3, #20]
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	88da      	ldrh	r2, [r3, #6]
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	b29b      	uxth	r3, r3
 800545e:	f003 fd8a 	bl	8008f76 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	695a      	ldr	r2, [r3, #20]
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	441a      	add	r2, r3
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	615a      	str	r2, [r3, #20]

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005470:	2100      	movs	r1, #0
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f006 ff74 	bl	800c360 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461c      	mov	r4, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005486:	b29b      	uxth	r3, r3
 8005488:	441c      	add	r4, r3
 800548a:	f204 4306 	addw	r3, r4, #1030	; 0x406
 800548e:	60bb      	str	r3, [r7, #8]
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d111      	bne.n	80054bc <PCD_EP_ISR_Handler+0x204>
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	881a      	ldrh	r2, [r3, #0]
 800549c:	f243 33ff 	movw	r3, #13311	; 0x33ff
 80054a0:	4013      	ands	r3, r2
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	801a      	strh	r2, [r3, #0]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	801a      	strh	r2, [r3, #0]
 80054ba:	e026      	b.n	800550a <PCD_EP_ISR_Handler+0x252>
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	2b3d      	cmp	r3, #61	; 0x3d
 80054c2:	d813      	bhi.n	80054ec <PCD_EP_ISR_Handler+0x234>
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	085b      	lsrs	r3, r3, #1
 80054ca:	61bb      	str	r3, [r7, #24]
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <PCD_EP_ISR_Handler+0x226>
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	3301      	adds	r3, #1
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	029b      	lsls	r3, r3, #10
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	801a      	strh	r2, [r3, #0]
 80054ea:	e00e      	b.n	800550a <PCD_EP_ISR_Handler+0x252>
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	095b      	lsrs	r3, r3, #5
 80054f2:	61bb      	str	r3, [r7, #24]
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	029b      	lsls	r3, r3, #10
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005504:	b29a      	uxth	r2, r3
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551a:	b29c      	uxth	r4, r3
 800551c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005520:	b29c      	uxth	r4, r3
 8005522:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005526:	b29c      	uxth	r4, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	4b9b      	ldr	r3, [pc, #620]	; (800579c <PCD_EP_ISR_Handler+0x4e4>)
 800552e:	4323      	orrs	r3, r4
 8005530:	b29b      	uxth	r3, r3
 8005532:	8013      	strh	r3, [r2, #0]
 8005534:	e124      	b.n	8005780 <PCD_EP_ISR_Handler+0x4c8>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	7d7b      	ldrb	r3, [r7, #21]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	81fb      	strh	r3, [r7, #14]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005546:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800554a:	2b00      	cmp	r3, #0
 800554c:	f280 80c9 	bge.w	80056e2 <PCD_EP_ISR_Handler+0x42a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	461a      	mov	r2, r3
 8005556:	7d7b      	ldrb	r3, [r7, #21]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	b29a      	uxth	r2, r3
 8005560:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005564:	4013      	ands	r3, r2
 8005566:	b29c      	uxth	r4, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	7d7b      	ldrb	r3, [r7, #21]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	4622      	mov	r2, r4
 8005576:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005578:	7d7b      	ldrb	r3, [r7, #21]
 800557a:	015b      	lsls	r3, r3, #5
 800557c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	4413      	add	r3, r2
 8005584:	613b      	str	r3, [r7, #16]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	7b1b      	ldrb	r3, [r3, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d11f      	bne.n	80055ce <PCD_EP_ISR_Handler+0x316>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005596:	b29b      	uxth	r3, r3
 8005598:	461a      	mov	r2, r3
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	4413      	add	r3, r2
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6812      	ldr	r2, [r2, #0]
 80055a6:	4413      	add	r3, r2
 80055a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055b2:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80055b4:	8bfb      	ldrh	r3, [r7, #30]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d06e      	beq.n	8005698 <PCD_EP_ISR_Handler+0x3e0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	6959      	ldr	r1, [r3, #20]
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	88da      	ldrh	r2, [r3, #6]
 80055c6:	8bfb      	ldrh	r3, [r7, #30]
 80055c8:	f003 fcd5 	bl	8008f76 <USB_ReadPMA>
 80055cc:	e064      	b.n	8005698 <PCD_EP_ISR_Handler+0x3e0>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01f      	beq.n	8005628 <PCD_EP_ISR_Handler+0x370>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	461a      	mov	r2, r3
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	4413      	add	r3, r2
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	4413      	add	r3, r2
 8005602:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800560c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800560e:	8bfb      	ldrh	r3, [r7, #30]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d028      	beq.n	8005666 <PCD_EP_ISR_Handler+0x3ae>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6818      	ldr	r0, [r3, #0]
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	6959      	ldr	r1, [r3, #20]
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	891a      	ldrh	r2, [r3, #8]
 8005620:	8bfb      	ldrh	r3, [r7, #30]
 8005622:	f003 fca8 	bl	8008f76 <USB_ReadPMA>
 8005626:	e01e      	b.n	8005666 <PCD_EP_ISR_Handler+0x3ae>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005630:	b29b      	uxth	r3, r3
 8005632:	461a      	mov	r2, r3
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	4413      	add	r3, r2
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6812      	ldr	r2, [r2, #0]
 8005640:	4413      	add	r3, r2
 8005642:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800564c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800564e:	8bfb      	ldrh	r3, [r7, #30]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d008      	beq.n	8005666 <PCD_EP_ISR_Handler+0x3ae>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	6959      	ldr	r1, [r3, #20]
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	895a      	ldrh	r2, [r3, #10]
 8005660:	8bfb      	ldrh	r3, [r7, #30]
 8005662:	f003 fc88 	bl	8008f76 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	b29b      	uxth	r3, r3
 8005678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005680:	b29c      	uxth	r4, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	441a      	add	r2, r3
 8005690:	4b43      	ldr	r3, [pc, #268]	; (80057a0 <PCD_EP_ISR_Handler+0x4e8>)
 8005692:	4323      	orrs	r3, r4
 8005694:	b29b      	uxth	r3, r3
 8005696:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	69da      	ldr	r2, [r3, #28]
 800569c:	8bfb      	ldrh	r3, [r7, #30]
 800569e:	441a      	add	r2, r3
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	695a      	ldr	r2, [r3, #20]
 80056a8:	8bfb      	ldrh	r3, [r7, #30]
 80056aa:	441a      	add	r2, r3
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d004      	beq.n	80056c2 <PCD_EP_ISR_Handler+0x40a>
 80056b8:	8bfa      	ldrh	r2, [r7, #30]
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d206      	bcs.n	80056d0 <PCD_EP_ISR_Handler+0x418>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	4619      	mov	r1, r3
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f006 fe49 	bl	800c360 <HAL_PCD_DataOutStageCallback>
 80056ce:	e008      	b.n	80056e2 <PCD_EP_ISR_Handler+0x42a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	7819      	ldrb	r1, [r3, #0]
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7ff fcb9 	bl	8005054 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80056e2:	89fb      	ldrh	r3, [r7, #14]
 80056e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d049      	beq.n	8005780 <PCD_EP_ISR_Handler+0x4c8>
      {
        ep = &hpcd->IN_ep[epindex];
 80056ec:	7d7b      	ldrb	r3, [r7, #21]
 80056ee:	015b      	lsls	r3, r3, #5
 80056f0:	3328      	adds	r3, #40	; 0x28
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	4413      	add	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	7d7b      	ldrb	r3, [r7, #21]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	b29b      	uxth	r3, r3
 8005708:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800570c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005710:	b29c      	uxth	r4, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	7d7b      	ldrb	r3, [r7, #21]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	4622      	mov	r2, r4
 8005720:	801a      	strh	r2, [r3, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800572a:	b29b      	uxth	r3, r3
 800572c:	461a      	mov	r2, r3
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	4413      	add	r3, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6812      	ldr	r2, [r2, #0]
 800573a:	4413      	add	r3, r2
 800573c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	695a      	ldr	r2, [r3, #20]
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	441a      	add	r2, r3
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d106      	bne.n	800576e <PCD_EP_ISR_Handler+0x4b6>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	4619      	mov	r1, r3
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f006 fe12 	bl	800c390 <HAL_PCD_DataInStageCallback>
 800576c:	e008      	b.n	8005780 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	7819      	ldrb	r1, [r3, #0]
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	695a      	ldr	r2, [r3, #20]
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7ff fcba 	bl	80050f4 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005788:	b29b      	uxth	r3, r3
 800578a:	b21b      	sxth	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	f6ff ad98 	blt.w	80052c2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3724      	adds	r7, #36	; 0x24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd90      	pop	{r4, r7, pc}
 800579c:	ffff8080 	.word	0xffff8080
 80057a0:	ffff80c0 	.word	0xffff80c0

080057a4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	607b      	str	r3, [r7, #4]
 80057ae:	460b      	mov	r3, r1
 80057b0:	817b      	strh	r3, [r7, #10]
 80057b2:	4613      	mov	r3, r2
 80057b4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80057b6:	897b      	ldrh	r3, [r7, #10]
 80057b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d008      	beq.n	80057d4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80057c2:	897b      	ldrh	r3, [r7, #10]
 80057c4:	f003 030f 	and.w	r3, r3, #15
 80057c8:	015b      	lsls	r3, r3, #5
 80057ca:	3328      	adds	r3, #40	; 0x28
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	e006      	b.n	80057e2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80057d4:	897b      	ldrh	r3, [r7, #10]
 80057d6:	015b      	lsls	r3, r3, #5
 80057d8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4413      	add	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80057e2:	893b      	ldrh	r3, [r7, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d107      	bne.n	80057f8 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2200      	movs	r2, #0
 80057ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	80da      	strh	r2, [r3, #6]
 80057f6:	e00b      	b.n	8005810 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2201      	movs	r2, #1
 80057fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	b29a      	uxth	r2, r3
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	0c1b      	lsrs	r3, r3, #16
 800580a:	b29a      	uxth	r2, r3
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 800581e:	b480      	push	{r7}
 8005820:	b085      	sub	sp, #20
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800583a:	b29b      	uxth	r3, r3
 800583c:	f043 0301 	orr.w	r3, r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800584e:	b29b      	uxth	r3, r3
 8005850:	f043 0302 	orr.w	r3, r3, #2
 8005854:	b29a      	uxth	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800586a:	b480      	push	{r7}
 800586c:	b085      	sub	sp, #20
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
  hpcd->LPM_State = LPM_L0;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800588e:	b29b      	uxth	r3, r3
 8005890:	f043 0301 	orr.w	r3, r3, #1
 8005894:	b29a      	uxth	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	f043 0302 	orr.w	r3, r3, #2
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
	...

080058c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80058c0:	b480      	push	{r7}
 80058c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80058c4:	4b04      	ldr	r3, [pc, #16]	; (80058d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	40007000 	.word	0x40007000

080058dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ea:	d130      	bne.n	800594e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80058ec:	4b23      	ldr	r3, [pc, #140]	; (800597c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058f8:	d038      	beq.n	800596c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058fa:	4a20      	ldr	r2, [pc, #128]	; (800597c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058fc:	4b1f      	ldr	r3, [pc, #124]	; (800597c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005904:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005908:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800590a:	4b1d      	ldr	r3, [pc, #116]	; (8005980 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2232      	movs	r2, #50	; 0x32
 8005910:	fb02 f303 	mul.w	r3, r2, r3
 8005914:	4a1b      	ldr	r2, [pc, #108]	; (8005984 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005916:	fba2 2303 	umull	r2, r3, r2, r3
 800591a:	0c9b      	lsrs	r3, r3, #18
 800591c:	3301      	adds	r3, #1
 800591e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005920:	e002      	b.n	8005928 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3b01      	subs	r3, #1
 8005926:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005928:	4b14      	ldr	r3, [pc, #80]	; (800597c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005934:	d102      	bne.n	800593c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f2      	bne.n	8005922 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800593c:	4b0f      	ldr	r3, [pc, #60]	; (800597c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005948:	d110      	bne.n	800596c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e00f      	b.n	800596e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800594e:	4b0b      	ldr	r3, [pc, #44]	; (800597c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595a:	d007      	beq.n	800596c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800595c:	4a07      	ldr	r2, [pc, #28]	; (800597c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800595e:	4b07      	ldr	r3, [pc, #28]	; (800597c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800596a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40007000 	.word	0x40007000
 8005980:	2000129c 	.word	0x2000129c
 8005984:	431bde83 	.word	0x431bde83

08005988 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800598c:	4a05      	ldr	r2, [pc, #20]	; (80059a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800598e:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005996:	6053      	str	r3, [r2, #4]
}
 8005998:	bf00      	nop
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40007000 	.word	0x40007000

080059a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_oscsource;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e395      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ba:	4ba3      	ldr	r3, [pc, #652]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 030c 	and.w	r3, r3, #12
 80059c2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059c4:	4ba0      	ldr	r3, [pc, #640]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0303 	and.w	r3, r3, #3
 80059cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0310 	and.w	r3, r3, #16
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 80df 	beq.w	8005b9a <HAL_RCC_OscConfig+0x1f2>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d007      	beq.n	80059f2 <HAL_RCC_OscConfig+0x4a>
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b0c      	cmp	r3, #12
 80059e6:	f040 8086 	bne.w	8005af6 <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	f040 8082 	bne.w	8005af6 <HAL_RCC_OscConfig+0x14e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059f2:	4b95      	ldr	r3, [pc, #596]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <HAL_RCC_OscConfig+0x62>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e36d      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1a      	ldr	r2, [r3, #32]
 8005a0e:	4b8e      	ldr	r3, [pc, #568]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d004      	beq.n	8005a24 <HAL_RCC_OscConfig+0x7c>
 8005a1a:	4b8b      	ldr	r3, [pc, #556]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a22:	e005      	b.n	8005a30 <HAL_RCC_OscConfig+0x88>
 8005a24:	4b88      	ldr	r3, [pc, #544]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a2a:	091b      	lsrs	r3, r3, #4
 8005a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d923      	bls.n	8005a7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 fd0d 	bl	8006458 <RCC_SetFlashLatencyFromMSIRange>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e34e      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a48:	4a7f      	ldr	r2, [pc, #508]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005a4a:	4b7f      	ldr	r3, [pc, #508]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f043 0308 	orr.w	r3, r3, #8
 8005a52:	6013      	str	r3, [r2, #0]
 8005a54:	497c      	ldr	r1, [pc, #496]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005a56:	4b7c      	ldr	r3, [pc, #496]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a66:	4978      	ldr	r1, [pc, #480]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005a68:	4b77      	ldr	r3, [pc, #476]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	4313      	orrs	r3, r2
 8005a78:	604b      	str	r3, [r1, #4]
 8005a7a:	e022      	b.n	8005ac2 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a7c:	4a72      	ldr	r2, [pc, #456]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005a7e:	4b72      	ldr	r3, [pc, #456]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f043 0308 	orr.w	r3, r3, #8
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	496f      	ldr	r1, [pc, #444]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005a8a:	4b6f      	ldr	r3, [pc, #444]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a9a:	496b      	ldr	r1, [pc, #428]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005a9c:	4b6a      	ldr	r3, [pc, #424]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	021b      	lsls	r3, r3, #8
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fcd0 	bl	8006458 <RCC_SetFlashLatencyFromMSIRange>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e311      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ac2:	f000 fbf5 	bl	80062b0 <HAL_RCC_GetSysClockFreq>
 8005ac6:	4601      	mov	r1, r0
 8005ac8:	4b5f      	ldr	r3, [pc, #380]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	091b      	lsrs	r3, r3, #4
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	4a5e      	ldr	r2, [pc, #376]	; (8005c4c <HAL_RCC_OscConfig+0x2a4>)
 8005ad4:	5cd3      	ldrb	r3, [r2, r3]
 8005ad6:	f003 031f 	and.w	r3, r3, #31
 8005ada:	fa21 f303 	lsr.w	r3, r1, r3
 8005ade:	4a5c      	ldr	r2, [pc, #368]	; (8005c50 <HAL_RCC_OscConfig+0x2a8>)
 8005ae0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	f7fd fcb0 	bl	8003448 <HAL_InitTick>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d052      	beq.n	8005b98 <HAL_RCC_OscConfig+0x1f0>
        {
          return status;
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	e2f7      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d032      	beq.n	8005b64 <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005afe:	4a52      	ldr	r2, [pc, #328]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005b00:	4b51      	ldr	r3, [pc, #324]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f043 0301 	orr.w	r3, r3, #1
 8005b08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b0a:	f7fd fccf 	bl	80034ac <HAL_GetTick>
 8005b0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b10:	e008      	b.n	8005b24 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b12:	f7fd fccb 	bl	80034ac <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e2e0      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b24:	4b48      	ldr	r3, [pc, #288]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f0      	beq.n	8005b12 <HAL_RCC_OscConfig+0x16a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b30:	4a45      	ldr	r2, [pc, #276]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005b32:	4b45      	ldr	r3, [pc, #276]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f043 0308 	orr.w	r3, r3, #8
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	4942      	ldr	r1, [pc, #264]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005b3e:	4b42      	ldr	r3, [pc, #264]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b4e:	493e      	ldr	r1, [pc, #248]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005b50:	4b3d      	ldr	r3, [pc, #244]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	604b      	str	r3, [r1, #4]
 8005b62:	e01a      	b.n	8005b9a <HAL_RCC_OscConfig+0x1f2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b64:	4a38      	ldr	r2, [pc, #224]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005b66:	4b38      	ldr	r3, [pc, #224]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f023 0301 	bic.w	r3, r3, #1
 8005b6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b70:	f7fd fc9c 	bl	80034ac <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b78:	f7fd fc98 	bl	80034ac <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e2ad      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b8a:	4b2f      	ldr	r3, [pc, #188]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1f0      	bne.n	8005b78 <HAL_RCC_OscConfig+0x1d0>
 8005b96:	e000      	b.n	8005b9a <HAL_RCC_OscConfig+0x1f2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d072      	beq.n	8005c8c <HAL_RCC_OscConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d005      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x210>
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	2b0c      	cmp	r3, #12
 8005bb0:	d10e      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x228>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	d10b      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x228>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb8:	4b23      	ldr	r3, [pc, #140]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d062      	beq.n	8005c8a <HAL_RCC_OscConfig+0x2e2>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d15e      	bne.n	8005c8a <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e28a      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd8:	d106      	bne.n	8005be8 <HAL_RCC_OscConfig+0x240>
 8005bda:	4a1b      	ldr	r2, [pc, #108]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005bdc:	4b1a      	ldr	r3, [pc, #104]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	e01d      	b.n	8005c24 <HAL_RCC_OscConfig+0x27c>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bf0:	d10c      	bne.n	8005c0c <HAL_RCC_OscConfig+0x264>
 8005bf2:	4a15      	ldr	r2, [pc, #84]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005bf4:	4b14      	ldr	r3, [pc, #80]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	4a12      	ldr	r2, [pc, #72]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005c00:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	e00b      	b.n	8005c24 <HAL_RCC_OscConfig+0x27c>
 8005c0c:	4a0e      	ldr	r2, [pc, #56]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005c0e:	4b0e      	ldr	r3, [pc, #56]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c16:	6013      	str	r3, [r2, #0]
 8005c18:	4a0b      	ldr	r2, [pc, #44]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005c1a:	4b0b      	ldr	r3, [pc, #44]	; (8005c48 <HAL_RCC_OscConfig+0x2a0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01a      	beq.n	8005c62 <HAL_RCC_OscConfig+0x2ba>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2c:	f7fd fc3e 	bl	80034ac <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c32:	e00f      	b.n	8005c54 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c34:	f7fd fc3a 	bl	80034ac <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b64      	cmp	r3, #100	; 0x64
 8005c40:	d908      	bls.n	8005c54 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e24f      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
 8005c46:	bf00      	nop
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	0800d758 	.word	0x0800d758
 8005c50:	2000129c 	.word	0x2000129c
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c54:	4bae      	ldr	r3, [pc, #696]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d0e9      	beq.n	8005c34 <HAL_RCC_OscConfig+0x28c>
 8005c60:	e014      	b.n	8005c8c <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c62:	f7fd fc23 	bl	80034ac <HAL_GetTick>
 8005c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c68:	e008      	b.n	8005c7c <HAL_RCC_OscConfig+0x2d4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c6a:	f7fd fc1f 	bl	80034ac <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b64      	cmp	r3, #100	; 0x64
 8005c76:	d901      	bls.n	8005c7c <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e234      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c7c:	4ba4      	ldr	r3, [pc, #656]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1f0      	bne.n	8005c6a <HAL_RCC_OscConfig+0x2c2>
 8005c88:	e000      	b.n	8005c8c <HAL_RCC_OscConfig+0x2e4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d060      	beq.n	8005d5a <HAL_RCC_OscConfig+0x3b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d005      	beq.n	8005caa <HAL_RCC_OscConfig+0x302>
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	2b0c      	cmp	r3, #12
 8005ca2:	d119      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d116      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x330>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005caa:	4b99      	ldr	r3, [pc, #612]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d005      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x31a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e211      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc2:	4993      	ldr	r1, [pc, #588]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005cc4:	4b92      	ldr	r3, [pc, #584]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	061b      	lsls	r3, r3, #24
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cd6:	e040      	b.n	8005d5a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d023      	beq.n	8005d28 <HAL_RCC_OscConfig+0x380>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ce0:	4a8b      	ldr	r2, [pc, #556]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005ce2:	4b8b      	ldr	r3, [pc, #556]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cec:	f7fd fbde 	bl	80034ac <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cf4:	f7fd fbda 	bl	80034ac <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e1ef      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d06:	4b82      	ldr	r3, [pc, #520]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0f0      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x34c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d12:	497f      	ldr	r1, [pc, #508]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005d14:	4b7e      	ldr	r3, [pc, #504]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	061b      	lsls	r3, r3, #24
 8005d22:	4313      	orrs	r3, r2
 8005d24:	604b      	str	r3, [r1, #4]
 8005d26:	e018      	b.n	8005d5a <HAL_RCC_OscConfig+0x3b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d28:	4a79      	ldr	r2, [pc, #484]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005d2a:	4b79      	ldr	r3, [pc, #484]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d34:	f7fd fbba 	bl	80034ac <HAL_GetTick>
 8005d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d3a:	e008      	b.n	8005d4e <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d3c:	f7fd fbb6 	bl	80034ac <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e1cb      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d4e:	4b70      	ldr	r3, [pc, #448]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1f0      	bne.n	8005d3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d03c      	beq.n	8005de0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d01c      	beq.n	8005da8 <HAL_RCC_OscConfig+0x400>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d6e:	4a68      	ldr	r2, [pc, #416]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005d70:	4b67      	ldr	r3, [pc, #412]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d76:	f043 0301 	orr.w	r3, r3, #1
 8005d7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d7e:	f7fd fb95 	bl	80034ac <HAL_GetTick>
 8005d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d84:	e008      	b.n	8005d98 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d86:	f7fd fb91 	bl	80034ac <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d901      	bls.n	8005d98 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e1a6      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d98:	4b5d      	ldr	r3, [pc, #372]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0ef      	beq.n	8005d86 <HAL_RCC_OscConfig+0x3de>
 8005da6:	e01b      	b.n	8005de0 <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005da8:	4a59      	ldr	r2, [pc, #356]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005daa:	4b59      	ldr	r3, [pc, #356]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005db0:	f023 0301 	bic.w	r3, r3, #1
 8005db4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db8:	f7fd fb78 	bl	80034ac <HAL_GetTick>
 8005dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005dbe:	e008      	b.n	8005dd2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dc0:	f7fd fb74 	bl	80034ac <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e189      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005dd2:	4b4f      	ldr	r3, [pc, #316]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1ef      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 80a5 	beq.w	8005f38 <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dee:	2300      	movs	r3, #0
 8005df0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005df2:	4b47      	ldr	r3, [pc, #284]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10d      	bne.n	8005e1a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dfe:	4a44      	ldr	r2, [pc, #272]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005e00:	4b43      	ldr	r3, [pc, #268]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e08:	6593      	str	r3, [r2, #88]	; 0x58
 8005e0a:	4b41      	ldr	r3, [pc, #260]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e12:	60bb      	str	r3, [r7, #8]
 8005e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e16:	2301      	movs	r3, #1
 8005e18:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e1a:	4b3e      	ldr	r3, [pc, #248]	; (8005f14 <HAL_RCC_OscConfig+0x56c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d118      	bne.n	8005e58 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e26:	4a3b      	ldr	r2, [pc, #236]	; (8005f14 <HAL_RCC_OscConfig+0x56c>)
 8005e28:	4b3a      	ldr	r3, [pc, #232]	; (8005f14 <HAL_RCC_OscConfig+0x56c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e32:	f7fd fb3b 	bl	80034ac <HAL_GetTick>
 8005e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e38:	e008      	b.n	8005e4c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e3a:	f7fd fb37 	bl	80034ac <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d901      	bls.n	8005e4c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e14c      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e4c:	4b31      	ldr	r3, [pc, #196]	; (8005f14 <HAL_RCC_OscConfig+0x56c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0f0      	beq.n	8005e3a <HAL_RCC_OscConfig+0x492>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d108      	bne.n	8005e72 <HAL_RCC_OscConfig+0x4ca>
 8005e60:	4a2b      	ldr	r2, [pc, #172]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005e62:	4b2b      	ldr	r3, [pc, #172]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e68:	f043 0301 	orr.w	r3, r3, #1
 8005e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e70:	e024      	b.n	8005ebc <HAL_RCC_OscConfig+0x514>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	2b05      	cmp	r3, #5
 8005e78:	d110      	bne.n	8005e9c <HAL_RCC_OscConfig+0x4f4>
 8005e7a:	4a25      	ldr	r2, [pc, #148]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005e7c:	4b24      	ldr	r3, [pc, #144]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e82:	f043 0304 	orr.w	r3, r3, #4
 8005e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e8a:	4a21      	ldr	r2, [pc, #132]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005e8c:	4b20      	ldr	r3, [pc, #128]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e92:	f043 0301 	orr.w	r3, r3, #1
 8005e96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e9a:	e00f      	b.n	8005ebc <HAL_RCC_OscConfig+0x514>
 8005e9c:	4a1c      	ldr	r2, [pc, #112]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005e9e:	4b1c      	ldr	r3, [pc, #112]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea4:	f023 0301 	bic.w	r3, r3, #1
 8005ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005eac:	4a18      	ldr	r2, [pc, #96]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005eae:	4b18      	ldr	r3, [pc, #96]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb4:	f023 0304 	bic.w	r3, r3, #4
 8005eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d016      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec4:	f7fd faf2 	bl	80034ac <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eca:	e00a      	b.n	8005ee2 <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ecc:	f7fd faee 	bl	80034ac <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e101      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ee2:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <HAL_RCC_OscConfig+0x568>)
 8005ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0ed      	beq.n	8005ecc <HAL_RCC_OscConfig+0x524>
 8005ef0:	e019      	b.n	8005f26 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef2:	f7fd fadb 	bl	80034ac <HAL_GetTick>
 8005ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ef8:	e00e      	b.n	8005f18 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005efa:	f7fd fad7 	bl	80034ac <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d905      	bls.n	8005f18 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e0ea      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
 8005f10:	40021000 	.word	0x40021000
 8005f14:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f18:	4b75      	ldr	r3, [pc, #468]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8005f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1e9      	bne.n	8005efa <HAL_RCC_OscConfig+0x552>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f26:	7ffb      	ldrb	r3, [r7, #31]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d105      	bne.n	8005f38 <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f2c:	4a70      	ldr	r2, [pc, #448]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8005f2e:	4b70      	ldr	r3, [pc, #448]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8005f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d03c      	beq.n	8005fbe <HAL_RCC_OscConfig+0x616>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d01c      	beq.n	8005f86 <HAL_RCC_OscConfig+0x5de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f4c:	4a68      	ldr	r2, [pc, #416]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8005f4e:	4b68      	ldr	r3, [pc, #416]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8005f50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f54:	f043 0301 	orr.w	r3, r3, #1
 8005f58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f5c:	f7fd faa6 	bl	80034ac <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x5ce>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f64:	f7fd faa2 	bl	80034ac <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e0b7      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f76:	4b5e      	ldr	r3, [pc, #376]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8005f78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0ef      	beq.n	8005f64 <HAL_RCC_OscConfig+0x5bc>
 8005f84:	e01b      	b.n	8005fbe <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f86:	4a5a      	ldr	r2, [pc, #360]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8005f88:	4b59      	ldr	r3, [pc, #356]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8005f8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f8e:	f023 0301 	bic.w	r3, r3, #1
 8005f92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f96:	f7fd fa89 	bl	80034ac <HAL_GetTick>
 8005f9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f9c:	e008      	b.n	8005fb0 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f9e:	f7fd fa85 	bl	80034ac <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e09a      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fb0:	4b4f      	ldr	r3, [pc, #316]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8005fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1ef      	bne.n	8005f9e <HAL_RCC_OscConfig+0x5f6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 808e 	beq.w	80060e4 <HAL_RCC_OscConfig+0x73c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	2b0c      	cmp	r3, #12
 8005fcc:	f000 8088 	beq.w	80060e0 <HAL_RCC_OscConfig+0x738>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d155      	bne.n	8006084 <HAL_RCC_OscConfig+0x6dc>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fd8:	4a45      	ldr	r2, [pc, #276]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8005fda:	4b45      	ldr	r3, [pc, #276]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe4:	f7fd fa62 	bl	80034ac <HAL_GetTick>
 8005fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fea:	e008      	b.n	8005ffe <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fec:	f7fd fa5e 	bl	80034ac <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e073      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ffe:	4b3c      	ldr	r3, [pc, #240]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1f0      	bne.n	8005fec <HAL_RCC_OscConfig+0x644>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800600a:	4939      	ldr	r1, [pc, #228]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006010:	3b01      	subs	r3, #1
 8006012:	011a      	lsls	r2, r3, #4
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006018:	021b      	lsls	r3, r3, #8
 800601a:	431a      	orrs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	431a      	orrs	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006026:	085b      	lsrs	r3, r3, #1
 8006028:	3b01      	subs	r3, #1
 800602a:	055b      	lsls	r3, r3, #21
 800602c:	431a      	orrs	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	3b01      	subs	r3, #1
 8006036:	065b      	lsls	r3, r3, #25
 8006038:	431a      	orrs	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603e:	06db      	lsls	r3, r3, #27
 8006040:	4313      	orrs	r3, r2
 8006042:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006044:	4a2a      	ldr	r2, [pc, #168]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8006046:	4b2a      	ldr	r3, [pc, #168]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800604e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006050:	4a27      	ldr	r2, [pc, #156]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8006052:	4b27      	ldr	r3, [pc, #156]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800605a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605c:	f7fd fa26 	bl	80034ac <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x6ce>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006064:	f7fd fa22 	bl	80034ac <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x6ce>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e037      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006076:	4b1e      	ldr	r3, [pc, #120]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0f0      	beq.n	8006064 <HAL_RCC_OscConfig+0x6bc>
 8006082:	e02f      	b.n	80060e4 <HAL_RCC_OscConfig+0x73c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006084:	4a1a      	ldr	r2, [pc, #104]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8006086:	4b1a      	ldr	r3, [pc, #104]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800608e:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006090:	4b17      	ldr	r3, [pc, #92]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d105      	bne.n	80060a8 <HAL_RCC_OscConfig+0x700>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800609c:	4a14      	ldr	r2, [pc, #80]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 800609e:	4b14      	ldr	r3, [pc, #80]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f023 0303 	bic.w	r3, r3, #3
 80060a6:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80060a8:	4a11      	ldr	r2, [pc, #68]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 80060aa:	4b11      	ldr	r3, [pc, #68]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80060b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060b6:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b8:	f7fd f9f8 	bl	80034ac <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c0:	f7fd f9f4 	bl	80034ac <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0x72a>
          {
            return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e009      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060d2:	4b07      	ldr	r3, [pc, #28]	; (80060f0 <HAL_RCC_OscConfig+0x748>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f0      	bne.n	80060c0 <HAL_RCC_OscConfig+0x718>
 80060de:	e001      	b.n	80060e4 <HAL_RCC_OscConfig+0x73c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e000      	b.n	80060e6 <HAL_RCC_OscConfig+0x73e>
    }
  }
  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3720      	adds	r7, #32
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	40021000 	.word	0x40021000

080060f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e0c6      	b.n	8006296 <HAL_RCC_ClockConfig+0x1a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006108:	4b65      	ldr	r3, [pc, #404]	; (80062a0 <HAL_RCC_ClockConfig+0x1ac>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0207 	and.w	r2, r3, #7
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	429a      	cmp	r2, r3
 8006114:	d210      	bcs.n	8006138 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006116:	4962      	ldr	r1, [pc, #392]	; (80062a0 <HAL_RCC_ClockConfig+0x1ac>)
 8006118:	4b61      	ldr	r3, [pc, #388]	; (80062a0 <HAL_RCC_ClockConfig+0x1ac>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f023 0207 	bic.w	r2, r3, #7
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	4313      	orrs	r3, r2
 8006124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006126:	4b5e      	ldr	r3, [pc, #376]	; (80062a0 <HAL_RCC_ClockConfig+0x1ac>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0207 	and.w	r2, r3, #7
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	429a      	cmp	r2, r3
 8006132:	d001      	beq.n	8006138 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e0ae      	b.n	8006296 <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d04c      	beq.n	80061de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	2b03      	cmp	r3, #3
 800614a:	d107      	bne.n	800615c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800614c:	4b55      	ldr	r3, [pc, #340]	; (80062a4 <HAL_RCC_ClockConfig+0x1b0>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d121      	bne.n	800619c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e09c      	b.n	8006296 <HAL_RCC_ClockConfig+0x1a2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	2b02      	cmp	r3, #2
 8006162:	d107      	bne.n	8006174 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006164:	4b4f      	ldr	r3, [pc, #316]	; (80062a4 <HAL_RCC_ClockConfig+0x1b0>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d115      	bne.n	800619c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e090      	b.n	8006296 <HAL_RCC_ClockConfig+0x1a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d107      	bne.n	800618c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800617c:	4b49      	ldr	r3, [pc, #292]	; (80062a4 <HAL_RCC_ClockConfig+0x1b0>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d109      	bne.n	800619c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e084      	b.n	8006296 <HAL_RCC_ClockConfig+0x1a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800618c:	4b45      	ldr	r3, [pc, #276]	; (80062a4 <HAL_RCC_ClockConfig+0x1b0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e07c      	b.n	8006296 <HAL_RCC_ClockConfig+0x1a2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800619c:	4941      	ldr	r1, [pc, #260]	; (80062a4 <HAL_RCC_ClockConfig+0x1b0>)
 800619e:	4b41      	ldr	r3, [pc, #260]	; (80062a4 <HAL_RCC_ClockConfig+0x1b0>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f023 0203 	bic.w	r2, r3, #3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ae:	f7fd f97d 	bl	80034ac <HAL_GetTick>
 80061b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061b4:	e00a      	b.n	80061cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061b6:	f7fd f979 	bl	80034ac <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d901      	bls.n	80061cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e064      	b.n	8006296 <HAL_RCC_ClockConfig+0x1a2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061cc:	4b35      	ldr	r3, [pc, #212]	; (80062a4 <HAL_RCC_ClockConfig+0x1b0>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f003 020c 	and.w	r2, r3, #12
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	429a      	cmp	r2, r3
 80061dc:	d1eb      	bne.n	80061b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d008      	beq.n	80061fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061ea:	492e      	ldr	r1, [pc, #184]	; (80062a4 <HAL_RCC_ClockConfig+0x1b0>)
 80061ec:	4b2d      	ldr	r3, [pc, #180]	; (80062a4 <HAL_RCC_ClockConfig+0x1b0>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061fc:	4b28      	ldr	r3, [pc, #160]	; (80062a0 <HAL_RCC_ClockConfig+0x1ac>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0207 	and.w	r2, r3, #7
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	429a      	cmp	r2, r3
 8006208:	d910      	bls.n	800622c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800620a:	4925      	ldr	r1, [pc, #148]	; (80062a0 <HAL_RCC_ClockConfig+0x1ac>)
 800620c:	4b24      	ldr	r3, [pc, #144]	; (80062a0 <HAL_RCC_ClockConfig+0x1ac>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f023 0207 	bic.w	r2, r3, #7
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	4313      	orrs	r3, r2
 8006218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800621a:	4b21      	ldr	r3, [pc, #132]	; (80062a0 <HAL_RCC_ClockConfig+0x1ac>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0207 	and.w	r2, r3, #7
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	429a      	cmp	r2, r3
 8006226:	d001      	beq.n	800622c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e034      	b.n	8006296 <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b00      	cmp	r3, #0
 8006236:	d008      	beq.n	800624a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006238:	491a      	ldr	r1, [pc, #104]	; (80062a4 <HAL_RCC_ClockConfig+0x1b0>)
 800623a:	4b1a      	ldr	r3, [pc, #104]	; (80062a4 <HAL_RCC_ClockConfig+0x1b0>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	4313      	orrs	r3, r2
 8006248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0308 	and.w	r3, r3, #8
 8006252:	2b00      	cmp	r3, #0
 8006254:	d009      	beq.n	800626a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006256:	4913      	ldr	r1, [pc, #76]	; (80062a4 <HAL_RCC_ClockConfig+0x1b0>)
 8006258:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <HAL_RCC_ClockConfig+0x1b0>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	4313      	orrs	r3, r2
 8006268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800626a:	f000 f821 	bl	80062b0 <HAL_RCC_GetSysClockFreq>
 800626e:	4601      	mov	r1, r0
 8006270:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <HAL_RCC_ClockConfig+0x1b0>)
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	091b      	lsrs	r3, r3, #4
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	4a0b      	ldr	r2, [pc, #44]	; (80062a8 <HAL_RCC_ClockConfig+0x1b4>)
 800627c:	5cd3      	ldrb	r3, [r2, r3]
 800627e:	f003 031f 	and.w	r3, r3, #31
 8006282:	fa21 f303 	lsr.w	r3, r1, r3
 8006286:	4a09      	ldr	r2, [pc, #36]	; (80062ac <HAL_RCC_ClockConfig+0x1b8>)
 8006288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800628a:	2000      	movs	r0, #0
 800628c:	f7fd f8dc 	bl	8003448 <HAL_InitTick>
 8006290:	4603      	mov	r3, r0
 8006292:	72fb      	strb	r3, [r7, #11]

  return status;
 8006294:	7afb      	ldrb	r3, [r7, #11]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	40022000 	.word	0x40022000
 80062a4:	40021000 	.word	0x40021000
 80062a8:	0800d758 	.word	0x0800d758
 80062ac:	2000129c 	.word	0x2000129c

080062b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b089      	sub	sp, #36	; 0x24
 80062b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	61fb      	str	r3, [r7, #28]
 80062ba:	2300      	movs	r3, #0
 80062bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062be:	4b46      	ldr	r3, [pc, #280]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x128>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 030c 	and.w	r3, r3, #12
 80062c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062c8:	4b43      	ldr	r3, [pc, #268]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x128>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f003 0303 	and.w	r3, r3, #3
 80062d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d005      	beq.n	80062e4 <HAL_RCC_GetSysClockFreq+0x34>
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	2b0c      	cmp	r3, #12
 80062dc:	d121      	bne.n	8006322 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d11e      	bne.n	8006322 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80062e4:	4b3c      	ldr	r3, [pc, #240]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x128>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0308 	and.w	r3, r3, #8
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d107      	bne.n	8006300 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80062f0:	4b39      	ldr	r3, [pc, #228]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x128>)
 80062f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062f6:	0a1b      	lsrs	r3, r3, #8
 80062f8:	f003 030f 	and.w	r3, r3, #15
 80062fc:	61fb      	str	r3, [r7, #28]
 80062fe:	e005      	b.n	800630c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006300:	4b35      	ldr	r3, [pc, #212]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x128>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	091b      	lsrs	r3, r3, #4
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800630c:	4a33      	ldr	r2, [pc, #204]	; (80063dc <HAL_RCC_GetSysClockFreq+0x12c>)
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006314:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10d      	bne.n	8006338 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006320:	e00a      	b.n	8006338 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	2b04      	cmp	r3, #4
 8006326:	d102      	bne.n	800632e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006328:	4b2d      	ldr	r3, [pc, #180]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x130>)
 800632a:	61bb      	str	r3, [r7, #24]
 800632c:	e004      	b.n	8006338 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	2b08      	cmp	r3, #8
 8006332:	d101      	bne.n	8006338 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006334:	4b2b      	ldr	r3, [pc, #172]	; (80063e4 <HAL_RCC_GetSysClockFreq+0x134>)
 8006336:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	2b0c      	cmp	r3, #12
 800633c:	d145      	bne.n	80063ca <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800633e:	4b26      	ldr	r3, [pc, #152]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x128>)
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006348:	4b23      	ldr	r3, [pc, #140]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x128>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	091b      	lsrs	r3, r3, #4
 800634e:	f003 0307 	and.w	r3, r3, #7
 8006352:	3301      	adds	r3, #1
 8006354:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d002      	beq.n	8006362 <HAL_RCC_GetSysClockFreq+0xb2>
 800635c:	2b03      	cmp	r3, #3
 800635e:	d00d      	beq.n	800637c <HAL_RCC_GetSysClockFreq+0xcc>
 8006360:	e019      	b.n	8006396 <HAL_RCC_GetSysClockFreq+0xe6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006362:	4a1f      	ldr	r2, [pc, #124]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x130>)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	fbb2 f3f3 	udiv	r3, r2, r3
 800636a:	4a1b      	ldr	r2, [pc, #108]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x128>)
 800636c:	68d2      	ldr	r2, [r2, #12]
 800636e:	0a12      	lsrs	r2, r2, #8
 8006370:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006374:	fb02 f303 	mul.w	r3, r2, r3
 8006378:	617b      	str	r3, [r7, #20]
      break;
 800637a:	e019      	b.n	80063b0 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800637c:	4a19      	ldr	r2, [pc, #100]	; (80063e4 <HAL_RCC_GetSysClockFreq+0x134>)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	fbb2 f3f3 	udiv	r3, r2, r3
 8006384:	4a14      	ldr	r2, [pc, #80]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x128>)
 8006386:	68d2      	ldr	r2, [r2, #12]
 8006388:	0a12      	lsrs	r2, r2, #8
 800638a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800638e:	fb02 f303 	mul.w	r3, r2, r3
 8006392:	617b      	str	r3, [r7, #20]
      break;
 8006394:	e00c      	b.n	80063b0 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	fbb2 f3f3 	udiv	r3, r2, r3
 800639e:	4a0e      	ldr	r2, [pc, #56]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x128>)
 80063a0:	68d2      	ldr	r2, [r2, #12]
 80063a2:	0a12      	lsrs	r2, r2, #8
 80063a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80063a8:	fb02 f303 	mul.w	r3, r2, r3
 80063ac:	617b      	str	r3, [r7, #20]
      break;
 80063ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063b0:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x128>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	0e5b      	lsrs	r3, r3, #25
 80063b6:	f003 0303 	and.w	r3, r3, #3
 80063ba:	3301      	adds	r3, #1
 80063bc:	005b      	lsls	r3, r3, #1
 80063be:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco/pllr;
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80063ca:	69bb      	ldr	r3, [r7, #24]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3724      	adds	r7, #36	; 0x24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	40021000 	.word	0x40021000
 80063dc:	0800d770 	.word	0x0800d770
 80063e0:	00f42400 	.word	0x00f42400
 80063e4:	007a1200 	.word	0x007a1200

080063e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063e8:	b480      	push	{r7}
 80063ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063ec:	4b03      	ldr	r3, [pc, #12]	; (80063fc <HAL_RCC_GetHCLKFreq+0x14>)
 80063ee:	681b      	ldr	r3, [r3, #0]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	2000129c 	.word	0x2000129c

08006400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006404:	f7ff fff0 	bl	80063e8 <HAL_RCC_GetHCLKFreq>
 8006408:	4601      	mov	r1, r0
 800640a:	4b06      	ldr	r3, [pc, #24]	; (8006424 <HAL_RCC_GetPCLK1Freq+0x24>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	0a1b      	lsrs	r3, r3, #8
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	4a04      	ldr	r2, [pc, #16]	; (8006428 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006416:	5cd3      	ldrb	r3, [r2, r3]
 8006418:	f003 031f 	and.w	r3, r3, #31
 800641c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006420:	4618      	mov	r0, r3
 8006422:	bd80      	pop	{r7, pc}
 8006424:	40021000 	.word	0x40021000
 8006428:	0800d768 	.word	0x0800d768

0800642c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006430:	f7ff ffda 	bl	80063e8 <HAL_RCC_GetHCLKFreq>
 8006434:	4601      	mov	r1, r0
 8006436:	4b06      	ldr	r3, [pc, #24]	; (8006450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	0adb      	lsrs	r3, r3, #11
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	4a04      	ldr	r2, [pc, #16]	; (8006454 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006442:	5cd3      	ldrb	r3, [r2, r3]
 8006444:	f003 031f 	and.w	r3, r3, #31
 8006448:	fa21 f303 	lsr.w	r3, r1, r3
}
 800644c:	4618      	mov	r0, r3
 800644e:	bd80      	pop	{r7, pc}
 8006450:	40021000 	.word	0x40021000
 8006454:	0800d768 	.word	0x0800d768

08006458 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006460:	2300      	movs	r3, #0
 8006462:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006464:	4b2a      	ldr	r3, [pc, #168]	; (8006510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006470:	f7ff fa26 	bl	80058c0 <HAL_PWREx_GetVoltageRange>
 8006474:	6178      	str	r0, [r7, #20]
 8006476:	e014      	b.n	80064a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006478:	4a25      	ldr	r2, [pc, #148]	; (8006510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800647a:	4b25      	ldr	r3, [pc, #148]	; (8006510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800647c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006482:	6593      	str	r3, [r2, #88]	; 0x58
 8006484:	4b22      	ldr	r3, [pc, #136]	; (8006510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006490:	f7ff fa16 	bl	80058c0 <HAL_PWREx_GetVoltageRange>
 8006494:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006496:	4a1e      	ldr	r2, [pc, #120]	; (8006510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006498:	4b1d      	ldr	r3, [pc, #116]	; (8006510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800649a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064a8:	d10b      	bne.n	80064c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b80      	cmp	r3, #128	; 0x80
 80064ae:	d919      	bls.n	80064e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2ba0      	cmp	r3, #160	; 0xa0
 80064b4:	d902      	bls.n	80064bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80064b6:	2302      	movs	r3, #2
 80064b8:	613b      	str	r3, [r7, #16]
 80064ba:	e013      	b.n	80064e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80064bc:	2301      	movs	r3, #1
 80064be:	613b      	str	r3, [r7, #16]
 80064c0:	e010      	b.n	80064e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b80      	cmp	r3, #128	; 0x80
 80064c6:	d902      	bls.n	80064ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80064c8:	2303      	movs	r3, #3
 80064ca:	613b      	str	r3, [r7, #16]
 80064cc:	e00a      	b.n	80064e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b80      	cmp	r3, #128	; 0x80
 80064d2:	d102      	bne.n	80064da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80064d4:	2302      	movs	r3, #2
 80064d6:	613b      	str	r3, [r7, #16]
 80064d8:	e004      	b.n	80064e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b70      	cmp	r3, #112	; 0x70
 80064de:	d101      	bne.n	80064e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80064e0:	2301      	movs	r3, #1
 80064e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80064e4:	490b      	ldr	r1, [pc, #44]	; (8006514 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80064e6:	4b0b      	ldr	r3, [pc, #44]	; (8006514 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f023 0207 	bic.w	r2, r3, #7
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80064f4:	4b07      	ldr	r3, [pc, #28]	; (8006514 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0207 	and.w	r2, r3, #7
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d001      	beq.n	8006506 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e000      	b.n	8006508 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3718      	adds	r7, #24
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	40021000 	.word	0x40021000
 8006514:	40022000 	.word	0x40022000

08006518 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006520:	2300      	movs	r3, #0
 8006522:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006524:	2300      	movs	r3, #0
 8006526:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006530:	2b00      	cmp	r3, #0
 8006532:	d02f      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006538:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800653c:	d005      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x32>
 800653e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006542:	d015      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d007      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006548:	e00f      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800654a:	4a5d      	ldr	r2, [pc, #372]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800654c:	4b5c      	ldr	r3, [pc, #368]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006554:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006556:	e00c      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3304      	adds	r3, #4
 800655c:	2100      	movs	r1, #0
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fa44 	bl	80069ec <RCCEx_PLLSAI1_Config>
 8006564:	4603      	mov	r3, r0
 8006566:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006568:	e003      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	74fb      	strb	r3, [r7, #19]
      break;
 800656e:	e000      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8006570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006572:	7cfb      	ldrb	r3, [r7, #19]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10b      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006578:	4951      	ldr	r1, [pc, #324]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800657a:	4b51      	ldr	r3, [pc, #324]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800657c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006580:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006588:	4313      	orrs	r3, r2
 800658a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800658e:	e001      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006590:	7cfb      	ldrb	r3, [r7, #19]
 8006592:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 809e 	beq.w	80066de <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065a2:	2300      	movs	r3, #0
 80065a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80065a6:	4b46      	ldr	r3, [pc, #280]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80065a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80065b2:	2301      	movs	r3, #1
 80065b4:	e000      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80065b6:	2300      	movs	r3, #0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00d      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065bc:	4a40      	ldr	r2, [pc, #256]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80065be:	4b40      	ldr	r3, [pc, #256]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80065c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c6:	6593      	str	r3, [r2, #88]	; 0x58
 80065c8:	4b3d      	ldr	r3, [pc, #244]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80065ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d0:	60bb      	str	r3, [r7, #8]
 80065d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065d4:	2301      	movs	r3, #1
 80065d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065d8:	4a3a      	ldr	r2, [pc, #232]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065da:	4b3a      	ldr	r3, [pc, #232]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065e4:	f7fc ff62 	bl	80034ac <HAL_GetTick>
 80065e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065ea:	e009      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ec:	f7fc ff5e 	bl	80034ac <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d902      	bls.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	74fb      	strb	r3, [r7, #19]
        break;
 80065fe:	e005      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006600:	4b30      	ldr	r3, [pc, #192]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006608:	2b00      	cmp	r3, #0
 800660a:	d0ef      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800660c:	7cfb      	ldrb	r3, [r7, #19]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d15a      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006612:	4b2b      	ldr	r3, [pc, #172]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800661c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d01e      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	429a      	cmp	r2, r3
 800662c:	d019      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800662e:	4b24      	ldr	r3, [pc, #144]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006638:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800663a:	4a21      	ldr	r2, [pc, #132]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800663c:	4b20      	ldr	r3, [pc, #128]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800663e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800664a:	4a1d      	ldr	r2, [pc, #116]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800664c:	4b1c      	ldr	r3, [pc, #112]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800664e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006656:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800665a:	4a19      	ldr	r2, [pc, #100]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d016      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800666c:	f7fc ff1e 	bl	80034ac <HAL_GetTick>
 8006670:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006672:	e00b      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006674:	f7fc ff1a 	bl	80034ac <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006682:	4293      	cmp	r3, r2
 8006684:	d902      	bls.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	74fb      	strb	r3, [r7, #19]
            break;
 800668a:	e006      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800668c:	4b0c      	ldr	r3, [pc, #48]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800668e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0ec      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800669a:	7cfb      	ldrb	r3, [r7, #19]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10b      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066a0:	4907      	ldr	r1, [pc, #28]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80066a2:	4b07      	ldr	r3, [pc, #28]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80066a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066b0:	4313      	orrs	r3, r2
 80066b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80066b6:	e009      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066b8:	7cfb      	ldrb	r3, [r7, #19]
 80066ba:	74bb      	strb	r3, [r7, #18]
 80066bc:	e006      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80066be:	bf00      	nop
 80066c0:	40021000 	.word	0x40021000
 80066c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c8:	7cfb      	ldrb	r3, [r7, #19]
 80066ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066cc:	7c7b      	ldrb	r3, [r7, #17]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d105      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066d2:	4a9e      	ldr	r2, [pc, #632]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80066d4:	4b9d      	ldr	r3, [pc, #628]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80066d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066ea:	4998      	ldr	r1, [pc, #608]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80066ec:	4b97      	ldr	r3, [pc, #604]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80066ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f2:	f023 0203 	bic.w	r2, r3, #3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00a      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800670c:	498f      	ldr	r1, [pc, #572]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800670e:	4b8f      	ldr	r3, [pc, #572]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006714:	f023 020c 	bic.w	r2, r3, #12
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	4313      	orrs	r3, r2
 800671e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0304 	and.w	r3, r3, #4
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800672e:	4987      	ldr	r1, [pc, #540]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006730:	4b86      	ldr	r3, [pc, #536]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006736:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673e:	4313      	orrs	r3, r2
 8006740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0308 	and.w	r3, r3, #8
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006750:	497e      	ldr	r1, [pc, #504]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006752:	4b7e      	ldr	r3, [pc, #504]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006758:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	4313      	orrs	r3, r2
 8006762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0320 	and.w	r3, r3, #32
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006772:	4976      	ldr	r1, [pc, #472]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006774:	4b75      	ldr	r3, [pc, #468]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006782:	4313      	orrs	r3, r2
 8006784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00a      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006794:	496d      	ldr	r1, [pc, #436]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006796:	4b6d      	ldr	r3, [pc, #436]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067b6:	4965      	ldr	r1, [pc, #404]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80067b8:	4b64      	ldr	r3, [pc, #400]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80067ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00a      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067d8:	495c      	ldr	r1, [pc, #368]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80067da:	4b5c      	ldr	r3, [pc, #368]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80067dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067fa:	4954      	ldr	r1, [pc, #336]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80067fc:	4b53      	ldr	r3, [pc, #332]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80067fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006802:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680a:	4313      	orrs	r3, r2
 800680c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00a      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800681c:	494b      	ldr	r1, [pc, #300]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800681e:	4b4b      	ldr	r3, [pc, #300]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006824:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682c:	4313      	orrs	r3, r2
 800682e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800683e:	4943      	ldr	r1, [pc, #268]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006840:	4b42      	ldr	r3, [pc, #264]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006846:	f023 0203 	bic.w	r2, r3, #3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	4313      	orrs	r3, r2
 8006850:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d028      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006860:	493a      	ldr	r1, [pc, #232]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006862:	4b3a      	ldr	r3, [pc, #232]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006868:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006870:	4313      	orrs	r3, r2
 8006872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800687a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800687e:	d106      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006880:	4a32      	ldr	r2, [pc, #200]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006882:	4b32      	ldr	r3, [pc, #200]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800688a:	60d3      	str	r3, [r2, #12]
 800688c:	e011      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006892:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006896:	d10c      	bne.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3304      	adds	r3, #4
 800689c:	2101      	movs	r1, #1
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 f8a4 	bl	80069ec <RCCEx_PLLSAI1_Config>
 80068a4:	4603      	mov	r3, r0
 80068a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80068a8:	7cfb      	ldrb	r3, [r7, #19]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 80068ae:	7cfb      	ldrb	r3, [r7, #19]
 80068b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d028      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80068be:	4923      	ldr	r1, [pc, #140]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80068c0:	4b22      	ldr	r3, [pc, #136]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80068c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ce:	4313      	orrs	r3, r2
 80068d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068dc:	d106      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068de:	4a1b      	ldr	r2, [pc, #108]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80068e0:	4b1a      	ldr	r3, [pc, #104]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068e8:	60d3      	str	r3, [r2, #12]
 80068ea:	e011      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068f4:	d10c      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	3304      	adds	r3, #4
 80068fa:	2101      	movs	r1, #1
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 f875 	bl	80069ec <RCCEx_PLLSAI1_Config>
 8006902:	4603      	mov	r3, r0
 8006904:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006906:	7cfb      	ldrb	r3, [r7, #19]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 800690c:	7cfb      	ldrb	r3, [r7, #19]
 800690e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d02b      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800691c:	490b      	ldr	r1, [pc, #44]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800691e:	4b0b      	ldr	r3, [pc, #44]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006924:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800692c:	4313      	orrs	r3, r2
 800692e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006936:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800693a:	d109      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800693c:	4a03      	ldr	r2, [pc, #12]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800693e:	4b03      	ldr	r3, [pc, #12]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006946:	60d3      	str	r3, [r2, #12]
 8006948:	e014      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 800694a:	bf00      	nop
 800694c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006954:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006958:	d10c      	bne.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3304      	adds	r3, #4
 800695e:	2101      	movs	r1, #1
 8006960:	4618      	mov	r0, r3
 8006962:	f000 f843 	bl	80069ec <RCCEx_PLLSAI1_Config>
 8006966:	4603      	mov	r3, r0
 8006968:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800696a:	7cfb      	ldrb	r3, [r7, #19]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8006970:	7cfb      	ldrb	r3, [r7, #19]
 8006972:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01c      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006980:	4919      	ldr	r1, [pc, #100]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8006982:	4b19      	ldr	r3, [pc, #100]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8006984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006988:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006990:	4313      	orrs	r3, r2
 8006992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800699a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800699e:	d10c      	bne.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3304      	adds	r3, #4
 80069a4:	2102      	movs	r1, #2
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 f820 	bl	80069ec <RCCEx_PLLSAI1_Config>
 80069ac:	4603      	mov	r3, r0
 80069ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069b0:	7cfb      	ldrb	r3, [r7, #19]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 80069b6:	7cfb      	ldrb	r3, [r7, #19]
 80069b8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80069c6:	4908      	ldr	r1, [pc, #32]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80069c8:	4b07      	ldr	r3, [pc, #28]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80069ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80069dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	40021000 	.word	0x40021000

080069ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069fa:	4b73      	ldr	r3, [pc, #460]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f003 0303 	and.w	r3, r3, #3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d018      	beq.n	8006a38 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006a06:	4b70      	ldr	r3, [pc, #448]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f003 0203 	and.w	r2, r3, #3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d10d      	bne.n	8006a32 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
       ||
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d009      	beq.n	8006a32 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006a1e:	4b6a      	ldr	r3, [pc, #424]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	091b      	lsrs	r3, r3, #4
 8006a24:	f003 0307 	and.w	r3, r3, #7
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
       ||
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d044      	beq.n	8006abc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	73fb      	strb	r3, [r7, #15]
 8006a36:	e041      	b.n	8006abc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d00c      	beq.n	8006a5a <RCCEx_PLLSAI1_Config+0x6e>
 8006a40:	2b03      	cmp	r3, #3
 8006a42:	d013      	beq.n	8006a6c <RCCEx_PLLSAI1_Config+0x80>
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d120      	bne.n	8006a8a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a48:	4b5f      	ldr	r3, [pc, #380]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d11d      	bne.n	8006a90 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a58:	e01a      	b.n	8006a90 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a5a:	4b5b      	ldr	r3, [pc, #364]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d116      	bne.n	8006a94 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a6a:	e013      	b.n	8006a94 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a6c:	4b56      	ldr	r3, [pc, #344]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10f      	bne.n	8006a98 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a78:	4b53      	ldr	r3, [pc, #332]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d109      	bne.n	8006a98 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a88:	e006      	b.n	8006a98 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a8e:	e004      	b.n	8006a9a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006a90:	bf00      	nop
 8006a92:	e002      	b.n	8006a9a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006a94:	bf00      	nop
 8006a96:	e000      	b.n	8006a9a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006a98:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10d      	bne.n	8006abc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006aa0:	4849      	ldr	r0, [pc, #292]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006aa2:	4b49      	ldr	r3, [pc, #292]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6819      	ldr	r1, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	011b      	lsls	r3, r3, #4
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d17c      	bne.n	8006bbc <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006ac2:	4a41      	ldr	r2, [pc, #260]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ac4:	4b40      	ldr	r3, [pc, #256]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ace:	f7fc fced 	bl	80034ac <HAL_GetTick>
 8006ad2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ad4:	e009      	b.n	8006aea <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ad6:	f7fc fce9 	bl	80034ac <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d902      	bls.n	8006aea <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	73fb      	strb	r3, [r7, #15]
        break;
 8006ae8:	e005      	b.n	8006af6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006aea:	4b37      	ldr	r3, [pc, #220]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1ef      	bne.n	8006ad6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006af6:	7bfb      	ldrb	r3, [r7, #15]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d15f      	bne.n	8006bbc <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d110      	bne.n	8006b24 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b02:	4831      	ldr	r0, [pc, #196]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b04:	4b30      	ldr	r3, [pc, #192]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006b0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	6892      	ldr	r2, [r2, #8]
 8006b14:	0211      	lsls	r1, r2, #8
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	68d2      	ldr	r2, [r2, #12]
 8006b1a:	06d2      	lsls	r2, r2, #27
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	6103      	str	r3, [r0, #16]
 8006b22:	e027      	b.n	8006b74 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d112      	bne.n	8006b50 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b2a:	4827      	ldr	r0, [pc, #156]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b2c:	4b26      	ldr	r3, [pc, #152]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006b34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	6892      	ldr	r2, [r2, #8]
 8006b3c:	0211      	lsls	r1, r2, #8
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6912      	ldr	r2, [r2, #16]
 8006b42:	0852      	lsrs	r2, r2, #1
 8006b44:	3a01      	subs	r2, #1
 8006b46:	0552      	lsls	r2, r2, #21
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	6103      	str	r3, [r0, #16]
 8006b4e:	e011      	b.n	8006b74 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b50:	481d      	ldr	r0, [pc, #116]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b52:	4b1d      	ldr	r3, [pc, #116]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006b5a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	6892      	ldr	r2, [r2, #8]
 8006b62:	0211      	lsls	r1, r2, #8
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	6952      	ldr	r2, [r2, #20]
 8006b68:	0852      	lsrs	r2, r2, #1
 8006b6a:	3a01      	subs	r2, #1
 8006b6c:	0652      	lsls	r2, r2, #25
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	4313      	orrs	r3, r2
 8006b72:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006b74:	4a14      	ldr	r2, [pc, #80]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b76:	4b14      	ldr	r3, [pc, #80]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b80:	f7fc fc94 	bl	80034ac <HAL_GetTick>
 8006b84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b86:	e009      	b.n	8006b9c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b88:	f7fc fc90 	bl	80034ac <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d902      	bls.n	8006b9c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	73fb      	strb	r3, [r7, #15]
          break;
 8006b9a:	e005      	b.n	8006ba8 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b9c:	4b0a      	ldr	r3, [pc, #40]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0ef      	beq.n	8006b88 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d106      	bne.n	8006bbc <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006bae:	4906      	ldr	r1, [pc, #24]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006bb0:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006bb2:	691a      	ldr	r2, [r3, #16]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	40021000 	.word	0x40021000

08006bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e01d      	b.n	8006c1a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d106      	bne.n	8006bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f005 f870 	bl	800bcd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	3304      	adds	r3, #4
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	f000 fa18 	bl	8007040 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b082      	sub	sp, #8
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e01d      	b.n	8006c70 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d106      	bne.n	8006c4e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f004 ffc3 	bl	800bbd4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2202      	movs	r2, #2
 8006c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4610      	mov	r0, r2
 8006c62:	f000 f9ed 	bl	8007040 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d122      	bne.n	8006cd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d11b      	bne.n	8006cd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f06f 0202 	mvn.w	r2, #2
 8006ca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f9a1 	bl	8007002 <HAL_TIM_IC_CaptureCallback>
 8006cc0:	e005      	b.n	8006cce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f993 	bl	8006fee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f9a4 	bl	8007016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	f003 0304 	and.w	r3, r3, #4
 8006cde:	2b04      	cmp	r3, #4
 8006ce0:	d122      	bne.n	8006d28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b04      	cmp	r3, #4
 8006cee:	d11b      	bne.n	8006d28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f06f 0204 	mvn.w	r2, #4
 8006cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f977 	bl	8007002 <HAL_TIM_IC_CaptureCallback>
 8006d14:	e005      	b.n	8006d22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f969 	bl	8006fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f97a 	bl	8007016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	f003 0308 	and.w	r3, r3, #8
 8006d32:	2b08      	cmp	r3, #8
 8006d34:	d122      	bne.n	8006d7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f003 0308 	and.w	r3, r3, #8
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d11b      	bne.n	8006d7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f06f 0208 	mvn.w	r2, #8
 8006d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2204      	movs	r2, #4
 8006d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	f003 0303 	and.w	r3, r3, #3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f94d 	bl	8007002 <HAL_TIM_IC_CaptureCallback>
 8006d68:	e005      	b.n	8006d76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f93f 	bl	8006fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f950 	bl	8007016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 0310 	and.w	r3, r3, #16
 8006d86:	2b10      	cmp	r3, #16
 8006d88:	d122      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f003 0310 	and.w	r3, r3, #16
 8006d94:	2b10      	cmp	r3, #16
 8006d96:	d11b      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f06f 0210 	mvn.w	r2, #16
 8006da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2208      	movs	r2, #8
 8006da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f923 	bl	8007002 <HAL_TIM_IC_CaptureCallback>
 8006dbc:	e005      	b.n	8006dca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f915 	bl	8006fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f926 	bl	8007016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d10e      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d107      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f06f 0201 	mvn.w	r2, #1
 8006df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7fc fac4 	bl	8003384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e06:	2b80      	cmp	r3, #128	; 0x80
 8006e08:	d10e      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e14:	2b80      	cmp	r3, #128	; 0x80
 8006e16:	d107      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 faec 	bl	8007400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e36:	d10e      	bne.n	8006e56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e42:	2b80      	cmp	r3, #128	; 0x80
 8006e44:	d107      	bne.n	8006e56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fadf 	bl	8007414 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e60:	2b40      	cmp	r3, #64	; 0x40
 8006e62:	d10e      	bne.n	8006e82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6e:	2b40      	cmp	r3, #64	; 0x40
 8006e70:	d107      	bne.n	8006e82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f8d4 	bl	800702a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f003 0320 	and.w	r3, r3, #32
 8006e8c:	2b20      	cmp	r3, #32
 8006e8e:	d10e      	bne.n	8006eae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	f003 0320 	and.w	r3, r3, #32
 8006e9a:	2b20      	cmp	r3, #32
 8006e9c:	d107      	bne.n	8006eae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f06f 0220 	mvn.w	r2, #32
 8006ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fa9f 	bl	80073ec <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006eae:	bf00      	nop
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	60f8      	str	r0, [r7, #12]
 8006ebe:	60b9      	str	r1, [r7, #8]
 8006ec0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_TIM_IC_ConfigChannel+0x1a>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e08a      	b.n	8006fe6 <HAL_TIM_IC_ConfigChannel+0x130>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d11b      	bne.n	8006f1e <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	6819      	ldr	r1, [r3, #0]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f000 f911 	bl	800711c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	6812      	ldr	r2, [r2, #0]
 8006f02:	6992      	ldr	r2, [r2, #24]
 8006f04:	f022 020c 	bic.w	r2, r2, #12
 8006f08:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	6812      	ldr	r2, [r2, #0]
 8006f12:	6991      	ldr	r1, [r2, #24]
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	6892      	ldr	r2, [r2, #8]
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	619a      	str	r2, [r3, #24]
 8006f1c:	e05a      	b.n	8006fd4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b04      	cmp	r3, #4
 8006f22:	d11c      	bne.n	8006f5e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6818      	ldr	r0, [r3, #0]
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	6819      	ldr	r1, [r3, #0]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f000 f94e 	bl	80071d4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	6812      	ldr	r2, [r2, #0]
 8006f40:	6992      	ldr	r2, [r2, #24]
 8006f42:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006f46:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	6812      	ldr	r2, [r2, #0]
 8006f50:	6991      	ldr	r1, [r2, #24]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	6892      	ldr	r2, [r2, #8]
 8006f56:	0212      	lsls	r2, r2, #8
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	619a      	str	r2, [r3, #24]
 8006f5c:	e03a      	b.n	8006fd4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	d11b      	bne.n	8006f9c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6818      	ldr	r0, [r3, #0]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	6819      	ldr	r1, [r3, #0]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	f000 f96b 	bl	800724e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	6812      	ldr	r2, [r2, #0]
 8006f80:	69d2      	ldr	r2, [r2, #28]
 8006f82:	f022 020c 	bic.w	r2, r2, #12
 8006f86:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	6812      	ldr	r2, [r2, #0]
 8006f90:	69d1      	ldr	r1, [r2, #28]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	6892      	ldr	r2, [r2, #8]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	61da      	str	r2, [r3, #28]
 8006f9a:	e01b      	b.n	8006fd4 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6818      	ldr	r0, [r3, #0]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	6819      	ldr	r1, [r3, #0]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f000 f98b 	bl	80072c6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	6812      	ldr	r2, [r2, #0]
 8006fb8:	69d2      	ldr	r2, [r2, #28]
 8006fba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006fbe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	69d1      	ldr	r1, [r2, #28]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	6892      	ldr	r2, [r2, #8]
 8006fce:	0212      	lsls	r2, r2, #8
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b083      	sub	sp, #12
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
	...

08007040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a2e      	ldr	r2, [pc, #184]	; (800710c <TIM_Base_SetConfig+0xcc>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d007      	beq.n	8007068 <TIM_Base_SetConfig+0x28>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800705e:	d003      	beq.n	8007068 <TIM_Base_SetConfig+0x28>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a2b      	ldr	r2, [pc, #172]	; (8007110 <TIM_Base_SetConfig+0xd0>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d108      	bne.n	800707a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a23      	ldr	r2, [pc, #140]	; (800710c <TIM_Base_SetConfig+0xcc>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d00f      	beq.n	80070a2 <TIM_Base_SetConfig+0x62>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007088:	d00b      	beq.n	80070a2 <TIM_Base_SetConfig+0x62>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a20      	ldr	r2, [pc, #128]	; (8007110 <TIM_Base_SetConfig+0xd0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d007      	beq.n	80070a2 <TIM_Base_SetConfig+0x62>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a1f      	ldr	r2, [pc, #124]	; (8007114 <TIM_Base_SetConfig+0xd4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d003      	beq.n	80070a2 <TIM_Base_SetConfig+0x62>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a1e      	ldr	r2, [pc, #120]	; (8007118 <TIM_Base_SetConfig+0xd8>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d108      	bne.n	80070b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	4313      	orrs	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a0c      	ldr	r2, [pc, #48]	; (800710c <TIM_Base_SetConfig+0xcc>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d007      	beq.n	80070f0 <TIM_Base_SetConfig+0xb0>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a0c      	ldr	r2, [pc, #48]	; (8007114 <TIM_Base_SetConfig+0xd4>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d003      	beq.n	80070f0 <TIM_Base_SetConfig+0xb0>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a0b      	ldr	r2, [pc, #44]	; (8007118 <TIM_Base_SetConfig+0xd8>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d103      	bne.n	80070f8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	691a      	ldr	r2, [r3, #16]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	615a      	str	r2, [r3, #20]
}
 80070fe:	bf00      	nop
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	40012c00 	.word	0x40012c00
 8007110:	40000400 	.word	0x40000400
 8007114:	40014000 	.word	0x40014000
 8007118:	40014400 	.word	0x40014400

0800711c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	f023 0201 	bic.w	r2, r3, #1
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	4a20      	ldr	r2, [pc, #128]	; (80071c8 <TIM_TI1_SetConfig+0xac>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00b      	beq.n	8007162 <TIM_TI1_SetConfig+0x46>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007150:	d007      	beq.n	8007162 <TIM_TI1_SetConfig+0x46>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	4a1d      	ldr	r2, [pc, #116]	; (80071cc <TIM_TI1_SetConfig+0xb0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d003      	beq.n	8007162 <TIM_TI1_SetConfig+0x46>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	4a1c      	ldr	r2, [pc, #112]	; (80071d0 <TIM_TI1_SetConfig+0xb4>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d101      	bne.n	8007166 <TIM_TI1_SetConfig+0x4a>
 8007162:	2301      	movs	r3, #1
 8007164:	e000      	b.n	8007168 <TIM_TI1_SetConfig+0x4c>
 8007166:	2300      	movs	r3, #0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d008      	beq.n	800717e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f023 0303 	bic.w	r3, r3, #3
 8007172:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4313      	orrs	r3, r2
 800717a:	617b      	str	r3, [r7, #20]
 800717c:	e003      	b.n	8007186 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f043 0301 	orr.w	r3, r3, #1
 8007184:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800718c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	011b      	lsls	r3, r3, #4
 8007192:	b2db      	uxtb	r3, r3
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	4313      	orrs	r3, r2
 8007198:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	f023 030a 	bic.w	r3, r3, #10
 80071a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f003 030a 	and.w	r3, r3, #10
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	621a      	str	r2, [r3, #32]
}
 80071ba:	bf00      	nop
 80071bc:	371c      	adds	r7, #28
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	40012c00 	.word	0x40012c00
 80071cc:	40000400 	.word	0x40000400
 80071d0:	40014000 	.word	0x40014000

080071d4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
 80071e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	f023 0210 	bic.w	r2, r3, #16
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007200:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	021b      	lsls	r3, r3, #8
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	4313      	orrs	r3, r2
 800720a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007212:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	031b      	lsls	r3, r3, #12
 8007218:	b29b      	uxth	r3, r3
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	4313      	orrs	r3, r2
 800721e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007226:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	4313      	orrs	r3, r2
 8007234:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	621a      	str	r2, [r3, #32]
}
 8007242:	bf00      	nop
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800724e:	b480      	push	{r7}
 8007250:	b087      	sub	sp, #28
 8007252:	af00      	add	r7, sp, #0
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	607a      	str	r2, [r7, #4]
 800725a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f023 0303 	bic.w	r3, r3, #3
 800727a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4313      	orrs	r3, r2
 8007282:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800728a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	011b      	lsls	r3, r3, #4
 8007290:	b2db      	uxtb	r3, r3
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	4313      	orrs	r3, r2
 8007296:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800729e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	021b      	lsls	r3, r3, #8
 80072a4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	621a      	str	r2, [r3, #32]
}
 80072ba:	bf00      	nop
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b087      	sub	sp, #28
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	607a      	str	r2, [r7, #4]
 80072d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	69db      	ldr	r3, [r3, #28]
 80072e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	021b      	lsls	r3, r3, #8
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007304:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	031b      	lsls	r3, r3, #12
 800730a:	b29b      	uxth	r3, r3
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	4313      	orrs	r3, r2
 8007310:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007318:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	031b      	lsls	r3, r3, #12
 800731e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	621a      	str	r2, [r3, #32]
}
 8007334:	bf00      	nop
 8007336:	371c      	adds	r7, #28
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007350:	2b01      	cmp	r3, #1
 8007352:	d101      	bne.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007354:	2302      	movs	r3, #2
 8007356:	e040      	b.n	80073da <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2202      	movs	r2, #2
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a1a      	ldr	r2, [pc, #104]	; (80073e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d108      	bne.n	8007394 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007388:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ac:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	40012c00 	.word	0x40012c00

080073ec <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e043      	b.n	80074c2 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d106      	bne.n	8007454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f004 fd88 	bl	800bf64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2224      	movs	r2, #36	; 0x24
 8007458:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	6812      	ldr	r2, [r2, #0]
 8007464:	6812      	ldr	r2, [r2, #0]
 8007466:	f022 0201 	bic.w	r2, r2, #1
 800746a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f82d 	bl	80074cc <UART_SetConfig>
 8007472:	4603      	mov	r3, r0
 8007474:	2b01      	cmp	r3, #1
 8007476:	d101      	bne.n	800747c <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e022      	b.n	80074c2 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fb31 	bl	8007aec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	6812      	ldr	r2, [r2, #0]
 8007492:	6852      	ldr	r2, [r2, #4]
 8007494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007498:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	6812      	ldr	r2, [r2, #0]
 80074a2:	6892      	ldr	r2, [r2, #8]
 80074a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074a8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	6812      	ldr	r2, [r2, #0]
 80074b2:	6812      	ldr	r2, [r2, #0]
 80074b4:	f042 0201 	orr.w	r2, r2, #1
 80074b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fbb8 	bl	8007c30 <UART_CheckIdleState>
 80074c0:	4603      	mov	r3, r0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
	...

080074cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80074d0:	b088      	sub	sp, #32
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80074da:	2310      	movs	r3, #16
 80074dc:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 80074de:	2300      	movs	r3, #0
 80074e0:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689a      	ldr	r2, [r3, #8]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	431a      	orrs	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	4313      	orrs	r3, r2
 8007504:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6819      	ldr	r1, [r3, #0]
 8007510:	4bad      	ldr	r3, [pc, #692]	; (80077c8 <UART_SetConfig+0x2fc>)
 8007512:	400b      	ands	r3, r1
 8007514:	69f9      	ldr	r1, [r7, #28]
 8007516:	430b      	orrs	r3, r1
 8007518:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	6812      	ldr	r2, [r2, #0]
 8007522:	6852      	ldr	r2, [r2, #4]
 8007524:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	68d2      	ldr	r2, [r2, #12]
 800752c:	430a      	orrs	r2, r1
 800752e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4aa4      	ldr	r2, [pc, #656]	; (80077cc <UART_SetConfig+0x300>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d004      	beq.n	800754a <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a1b      	ldr	r3, [r3, #32]
 8007544:	69fa      	ldr	r2, [r7, #28]
 8007546:	4313      	orrs	r3, r2
 8007548:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	6812      	ldr	r2, [r2, #0]
 8007552:	6892      	ldr	r2, [r2, #8]
 8007554:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8007558:	69fa      	ldr	r2, [r7, #28]
 800755a:	430a      	orrs	r2, r1
 800755c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a9b      	ldr	r2, [pc, #620]	; (80077d0 <UART_SetConfig+0x304>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d121      	bne.n	80075ac <UART_SetConfig+0xe0>
 8007568:	4b9a      	ldr	r3, [pc, #616]	; (80077d4 <UART_SetConfig+0x308>)
 800756a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756e:	f003 0303 	and.w	r3, r3, #3
 8007572:	2b03      	cmp	r3, #3
 8007574:	d816      	bhi.n	80075a4 <UART_SetConfig+0xd8>
 8007576:	a201      	add	r2, pc, #4	; (adr r2, 800757c <UART_SetConfig+0xb0>)
 8007578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757c:	0800758d 	.word	0x0800758d
 8007580:	08007599 	.word	0x08007599
 8007584:	08007593 	.word	0x08007593
 8007588:	0800759f 	.word	0x0800759f
 800758c:	2301      	movs	r3, #1
 800758e:	76fb      	strb	r3, [r7, #27]
 8007590:	e0ba      	b.n	8007708 <UART_SetConfig+0x23c>
 8007592:	2302      	movs	r3, #2
 8007594:	76fb      	strb	r3, [r7, #27]
 8007596:	e0b7      	b.n	8007708 <UART_SetConfig+0x23c>
 8007598:	2304      	movs	r3, #4
 800759a:	76fb      	strb	r3, [r7, #27]
 800759c:	e0b4      	b.n	8007708 <UART_SetConfig+0x23c>
 800759e:	2308      	movs	r3, #8
 80075a0:	76fb      	strb	r3, [r7, #27]
 80075a2:	e0b1      	b.n	8007708 <UART_SetConfig+0x23c>
 80075a4:	2310      	movs	r3, #16
 80075a6:	76fb      	strb	r3, [r7, #27]
 80075a8:	bf00      	nop
 80075aa:	e0ad      	b.n	8007708 <UART_SetConfig+0x23c>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a89      	ldr	r2, [pc, #548]	; (80077d8 <UART_SetConfig+0x30c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d134      	bne.n	8007620 <UART_SetConfig+0x154>
 80075b6:	4b87      	ldr	r3, [pc, #540]	; (80077d4 <UART_SetConfig+0x308>)
 80075b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075bc:	f003 030c 	and.w	r3, r3, #12
 80075c0:	2b0c      	cmp	r3, #12
 80075c2:	d829      	bhi.n	8007618 <UART_SetConfig+0x14c>
 80075c4:	a201      	add	r2, pc, #4	; (adr r2, 80075cc <UART_SetConfig+0x100>)
 80075c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ca:	bf00      	nop
 80075cc:	08007601 	.word	0x08007601
 80075d0:	08007619 	.word	0x08007619
 80075d4:	08007619 	.word	0x08007619
 80075d8:	08007619 	.word	0x08007619
 80075dc:	0800760d 	.word	0x0800760d
 80075e0:	08007619 	.word	0x08007619
 80075e4:	08007619 	.word	0x08007619
 80075e8:	08007619 	.word	0x08007619
 80075ec:	08007607 	.word	0x08007607
 80075f0:	08007619 	.word	0x08007619
 80075f4:	08007619 	.word	0x08007619
 80075f8:	08007619 	.word	0x08007619
 80075fc:	08007613 	.word	0x08007613
 8007600:	2300      	movs	r3, #0
 8007602:	76fb      	strb	r3, [r7, #27]
 8007604:	e080      	b.n	8007708 <UART_SetConfig+0x23c>
 8007606:	2302      	movs	r3, #2
 8007608:	76fb      	strb	r3, [r7, #27]
 800760a:	e07d      	b.n	8007708 <UART_SetConfig+0x23c>
 800760c:	2304      	movs	r3, #4
 800760e:	76fb      	strb	r3, [r7, #27]
 8007610:	e07a      	b.n	8007708 <UART_SetConfig+0x23c>
 8007612:	2308      	movs	r3, #8
 8007614:	76fb      	strb	r3, [r7, #27]
 8007616:	e077      	b.n	8007708 <UART_SetConfig+0x23c>
 8007618:	2310      	movs	r3, #16
 800761a:	76fb      	strb	r3, [r7, #27]
 800761c:	bf00      	nop
 800761e:	e073      	b.n	8007708 <UART_SetConfig+0x23c>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a6d      	ldr	r2, [pc, #436]	; (80077dc <UART_SetConfig+0x310>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d120      	bne.n	800766c <UART_SetConfig+0x1a0>
 800762a:	4b6a      	ldr	r3, [pc, #424]	; (80077d4 <UART_SetConfig+0x308>)
 800762c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007630:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007634:	2b10      	cmp	r3, #16
 8007636:	d00f      	beq.n	8007658 <UART_SetConfig+0x18c>
 8007638:	2b10      	cmp	r3, #16
 800763a:	d802      	bhi.n	8007642 <UART_SetConfig+0x176>
 800763c:	2b00      	cmp	r3, #0
 800763e:	d005      	beq.n	800764c <UART_SetConfig+0x180>
 8007640:	e010      	b.n	8007664 <UART_SetConfig+0x198>
 8007642:	2b20      	cmp	r3, #32
 8007644:	d005      	beq.n	8007652 <UART_SetConfig+0x186>
 8007646:	2b30      	cmp	r3, #48	; 0x30
 8007648:	d009      	beq.n	800765e <UART_SetConfig+0x192>
 800764a:	e00b      	b.n	8007664 <UART_SetConfig+0x198>
 800764c:	2300      	movs	r3, #0
 800764e:	76fb      	strb	r3, [r7, #27]
 8007650:	e05a      	b.n	8007708 <UART_SetConfig+0x23c>
 8007652:	2302      	movs	r3, #2
 8007654:	76fb      	strb	r3, [r7, #27]
 8007656:	e057      	b.n	8007708 <UART_SetConfig+0x23c>
 8007658:	2304      	movs	r3, #4
 800765a:	76fb      	strb	r3, [r7, #27]
 800765c:	e054      	b.n	8007708 <UART_SetConfig+0x23c>
 800765e:	2308      	movs	r3, #8
 8007660:	76fb      	strb	r3, [r7, #27]
 8007662:	e051      	b.n	8007708 <UART_SetConfig+0x23c>
 8007664:	2310      	movs	r3, #16
 8007666:	76fb      	strb	r3, [r7, #27]
 8007668:	bf00      	nop
 800766a:	e04d      	b.n	8007708 <UART_SetConfig+0x23c>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a5b      	ldr	r2, [pc, #364]	; (80077e0 <UART_SetConfig+0x314>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d120      	bne.n	80076b8 <UART_SetConfig+0x1ec>
 8007676:	4b57      	ldr	r3, [pc, #348]	; (80077d4 <UART_SetConfig+0x308>)
 8007678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007680:	2b40      	cmp	r3, #64	; 0x40
 8007682:	d00f      	beq.n	80076a4 <UART_SetConfig+0x1d8>
 8007684:	2b40      	cmp	r3, #64	; 0x40
 8007686:	d802      	bhi.n	800768e <UART_SetConfig+0x1c2>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d005      	beq.n	8007698 <UART_SetConfig+0x1cc>
 800768c:	e010      	b.n	80076b0 <UART_SetConfig+0x1e4>
 800768e:	2b80      	cmp	r3, #128	; 0x80
 8007690:	d005      	beq.n	800769e <UART_SetConfig+0x1d2>
 8007692:	2bc0      	cmp	r3, #192	; 0xc0
 8007694:	d009      	beq.n	80076aa <UART_SetConfig+0x1de>
 8007696:	e00b      	b.n	80076b0 <UART_SetConfig+0x1e4>
 8007698:	2300      	movs	r3, #0
 800769a:	76fb      	strb	r3, [r7, #27]
 800769c:	e034      	b.n	8007708 <UART_SetConfig+0x23c>
 800769e:	2302      	movs	r3, #2
 80076a0:	76fb      	strb	r3, [r7, #27]
 80076a2:	e031      	b.n	8007708 <UART_SetConfig+0x23c>
 80076a4:	2304      	movs	r3, #4
 80076a6:	76fb      	strb	r3, [r7, #27]
 80076a8:	e02e      	b.n	8007708 <UART_SetConfig+0x23c>
 80076aa:	2308      	movs	r3, #8
 80076ac:	76fb      	strb	r3, [r7, #27]
 80076ae:	e02b      	b.n	8007708 <UART_SetConfig+0x23c>
 80076b0:	2310      	movs	r3, #16
 80076b2:	76fb      	strb	r3, [r7, #27]
 80076b4:	bf00      	nop
 80076b6:	e027      	b.n	8007708 <UART_SetConfig+0x23c>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a43      	ldr	r2, [pc, #268]	; (80077cc <UART_SetConfig+0x300>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d123      	bne.n	800770a <UART_SetConfig+0x23e>
 80076c2:	4b44      	ldr	r3, [pc, #272]	; (80077d4 <UART_SetConfig+0x308>)
 80076c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80076cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076d0:	d012      	beq.n	80076f8 <UART_SetConfig+0x22c>
 80076d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076d6:	d802      	bhi.n	80076de <UART_SetConfig+0x212>
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d007      	beq.n	80076ec <UART_SetConfig+0x220>
 80076dc:	e012      	b.n	8007704 <UART_SetConfig+0x238>
 80076de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076e2:	d006      	beq.n	80076f2 <UART_SetConfig+0x226>
 80076e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076e8:	d009      	beq.n	80076fe <UART_SetConfig+0x232>
 80076ea:	e00b      	b.n	8007704 <UART_SetConfig+0x238>
 80076ec:	2300      	movs	r3, #0
 80076ee:	76fb      	strb	r3, [r7, #27]
 80076f0:	e00a      	b.n	8007708 <UART_SetConfig+0x23c>
 80076f2:	2302      	movs	r3, #2
 80076f4:	76fb      	strb	r3, [r7, #27]
 80076f6:	e007      	b.n	8007708 <UART_SetConfig+0x23c>
 80076f8:	2304      	movs	r3, #4
 80076fa:	76fb      	strb	r3, [r7, #27]
 80076fc:	e004      	b.n	8007708 <UART_SetConfig+0x23c>
 80076fe:	2308      	movs	r3, #8
 8007700:	76fb      	strb	r3, [r7, #27]
 8007702:	e001      	b.n	8007708 <UART_SetConfig+0x23c>
 8007704:	2310      	movs	r3, #16
 8007706:	76fb      	strb	r3, [r7, #27]
 8007708:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a2f      	ldr	r2, [pc, #188]	; (80077cc <UART_SetConfig+0x300>)
 8007710:	4293      	cmp	r3, r2
 8007712:	f040 80ea 	bne.w	80078ea <UART_SetConfig+0x41e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007716:	7efb      	ldrb	r3, [r7, #27]
 8007718:	2b08      	cmp	r3, #8
 800771a:	d824      	bhi.n	8007766 <UART_SetConfig+0x29a>
 800771c:	a201      	add	r2, pc, #4	; (adr r2, 8007724 <UART_SetConfig+0x258>)
 800771e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007722:	bf00      	nop
 8007724:	08007749 	.word	0x08007749
 8007728:	08007767 	.word	0x08007767
 800772c:	08007751 	.word	0x08007751
 8007730:	08007767 	.word	0x08007767
 8007734:	08007757 	.word	0x08007757
 8007738:	08007767 	.word	0x08007767
 800773c:	08007767 	.word	0x08007767
 8007740:	08007767 	.word	0x08007767
 8007744:	0800775f 	.word	0x0800775f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8007748:	f7fe fe5a 	bl	8006400 <HAL_RCC_GetPCLK1Freq>
 800774c:	60f8      	str	r0, [r7, #12]
#endif
        break;
 800774e:	e00d      	b.n	800776c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007750:	4b24      	ldr	r3, [pc, #144]	; (80077e4 <UART_SetConfig+0x318>)
 8007752:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8007754:	e00a      	b.n	800776c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007756:	f7fe fdab 	bl	80062b0 <HAL_RCC_GetSysClockFreq>
 800775a:	60f8      	str	r0, [r7, #12]
#endif
        break;
 800775c:	e006      	b.n	800776c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800775e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007762:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8007764:	e002      	b.n	800776c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	74fb      	strb	r3, [r7, #19]
        break;
 800776a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 81ad 	beq.w	8007ace <UART_SetConfig+0x602>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	4613      	mov	r3, r2
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	441a      	add	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	429a      	cmp	r2, r3
 8007782:	d805      	bhi.n	8007790 <UART_SetConfig+0x2c4>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	429a      	cmp	r2, r3
 800778e:	d202      	bcs.n	8007796 <UART_SetConfig+0x2ca>
      {
        ret = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	74fb      	strb	r3, [r7, #19]
 8007794:	e19b      	b.n	8007ace <UART_SetConfig+0x602>
      }
      else
      {
        switch (clocksource)
 8007796:	7efb      	ldrb	r3, [r7, #27]
 8007798:	2b08      	cmp	r3, #8
 800779a:	f200 8093 	bhi.w	80078c4 <UART_SetConfig+0x3f8>
 800779e:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <UART_SetConfig+0x2d8>)
 80077a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a4:	080077e9 	.word	0x080077e9
 80077a8:	080078c5 	.word	0x080078c5
 80077ac:	08007829 	.word	0x08007829
 80077b0:	080078c5 	.word	0x080078c5
 80077b4:	0800785d 	.word	0x0800785d
 80077b8:	080078c5 	.word	0x080078c5
 80077bc:	080078c5 	.word	0x080078c5
 80077c0:	080078c5 	.word	0x080078c5
 80077c4:	0800789b 	.word	0x0800789b
 80077c8:	efff69f3 	.word	0xefff69f3
 80077cc:	40008000 	.word	0x40008000
 80077d0:	40013800 	.word	0x40013800
 80077d4:	40021000 	.word	0x40021000
 80077d8:	40004400 	.word	0x40004400
 80077dc:	40004800 	.word	0x40004800
 80077e0:	40004c00 	.word	0x40004c00
 80077e4:	00f42400 	.word	0x00f42400
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80077e8:	f7fe fe0a 	bl	8006400 <HAL_RCC_GetPCLK1Freq>
 80077ec:	4603      	mov	r3, r0
 80077ee:	f04f 0400 	mov.w	r4, #0
 80077f2:	ea4f 2904 	mov.w	r9, r4, lsl #8
 80077f6:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 80077fa:	ea4f 2803 	mov.w	r8, r3, lsl #8
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	085b      	lsrs	r3, r3, #1
 8007804:	f04f 0400 	mov.w	r4, #0
 8007808:	eb18 0003 	adds.w	r0, r8, r3
 800780c:	eb49 0104 	adc.w	r1, r9, r4
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f04f 0400 	mov.w	r4, #0
 8007818:	461a      	mov	r2, r3
 800781a:	4623      	mov	r3, r4
 800781c:	f7f8 fd38 	bl	8000290 <__aeabi_uldivmod>
 8007820:	4603      	mov	r3, r0
 8007822:	460c      	mov	r4, r1
 8007824:	617b      	str	r3, [r7, #20]
#endif
            break;
 8007826:	e050      	b.n	80078ca <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	085b      	lsrs	r3, r3, #1
 800782e:	f04f 0400 	mov.w	r4, #0
 8007832:	49ad      	ldr	r1, [pc, #692]	; (8007ae8 <UART_SetConfig+0x61c>)
 8007834:	f04f 0200 	mov.w	r2, #0
 8007838:	eb13 0801 	adds.w	r8, r3, r1
 800783c:	eb44 0902 	adc.w	r9, r4, r2
 8007840:	4640      	mov	r0, r8
 8007842:	4649      	mov	r1, r9
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f04f 0400 	mov.w	r4, #0
 800784c:	461a      	mov	r2, r3
 800784e:	4623      	mov	r3, r4
 8007850:	f7f8 fd1e 	bl	8000290 <__aeabi_uldivmod>
 8007854:	4603      	mov	r3, r0
 8007856:	460c      	mov	r4, r1
 8007858:	617b      	str	r3, [r7, #20]
#endif
            break;
 800785a:	e036      	b.n	80078ca <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800785c:	f7fe fd28 	bl	80062b0 <HAL_RCC_GetSysClockFreq>
 8007860:	4603      	mov	r3, r0
 8007862:	461a      	mov	r2, r3
 8007864:	f04f 0300 	mov.w	r3, #0
 8007868:	021d      	lsls	r5, r3, #8
 800786a:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 800786e:	0214      	lsls	r4, r2, #8
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	085b      	lsrs	r3, r3, #1
 8007876:	461a      	mov	r2, r3
 8007878:	f04f 0300 	mov.w	r3, #0
 800787c:	18a0      	adds	r0, r4, r2
 800787e:	eb45 0103 	adc.w	r1, r5, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f04f 0400 	mov.w	r4, #0
 800788a:	461a      	mov	r2, r3
 800788c:	4623      	mov	r3, r4
 800788e:	f7f8 fcff 	bl	8000290 <__aeabi_uldivmod>
 8007892:	4603      	mov	r3, r0
 8007894:	460c      	mov	r4, r1
 8007896:	617b      	str	r3, [r7, #20]
#endif
            break;
 8007898:	e017      	b.n	80078ca <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	085b      	lsrs	r3, r3, #1
 80078a0:	f04f 0400 	mov.w	r4, #0
 80078a4:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80078a8:	f144 0100 	adc.w	r1, r4, #0
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f04f 0400 	mov.w	r4, #0
 80078b4:	461a      	mov	r2, r3
 80078b6:	4623      	mov	r3, r4
 80078b8:	f7f8 fcea 	bl	8000290 <__aeabi_uldivmod>
 80078bc:	4603      	mov	r3, r0
 80078be:	460c      	mov	r4, r1
 80078c0:	617b      	str	r3, [r7, #20]
#endif
            break;
 80078c2:	e002      	b.n	80078ca <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	74fb      	strb	r3, [r7, #19]
            break;
 80078c8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078d0:	d308      	bcc.n	80078e4 <UART_SetConfig+0x418>
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078d8:	d204      	bcs.n	80078e4 <UART_SetConfig+0x418>
        {
          huart->Instance->BRR = usartdiv;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	60da      	str	r2, [r3, #12]
 80078e2:	e0f4      	b.n	8007ace <UART_SetConfig+0x602>
        }
        else
        {
          ret = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	74fb      	strb	r3, [r7, #19]
 80078e8:	e0f1      	b.n	8007ace <UART_SetConfig+0x602>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078f2:	d17e      	bne.n	80079f2 <UART_SetConfig+0x526>
  {
    switch (clocksource)
 80078f4:	7efb      	ldrb	r3, [r7, #27]
 80078f6:	2b08      	cmp	r3, #8
 80078f8:	d85b      	bhi.n	80079b2 <UART_SetConfig+0x4e6>
 80078fa:	a201      	add	r2, pc, #4	; (adr r2, 8007900 <UART_SetConfig+0x434>)
 80078fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007900:	08007925 	.word	0x08007925
 8007904:	08007943 	.word	0x08007943
 8007908:	08007961 	.word	0x08007961
 800790c:	080079b3 	.word	0x080079b3
 8007910:	0800797d 	.word	0x0800797d
 8007914:	080079b3 	.word	0x080079b3
 8007918:	080079b3 	.word	0x080079b3
 800791c:	080079b3 	.word	0x080079b3
 8007920:	0800799b 	.word	0x0800799b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007924:	f7fe fd6c 	bl	8006400 <HAL_RCC_GetPCLK1Freq>
 8007928:	4603      	mov	r3, r0
 800792a:	005a      	lsls	r2, r3, #1
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	085b      	lsrs	r3, r3, #1
 8007932:	441a      	add	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	fbb2 f3f3 	udiv	r3, r2, r3
 800793c:	b29b      	uxth	r3, r3
 800793e:	617b      	str	r3, [r7, #20]
#endif
        break;
 8007940:	e03a      	b.n	80079b8 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007942:	f7fe fd73 	bl	800642c <HAL_RCC_GetPCLK2Freq>
 8007946:	4603      	mov	r3, r0
 8007948:	005a      	lsls	r2, r3, #1
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	085b      	lsrs	r3, r3, #1
 8007950:	441a      	add	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	fbb2 f3f3 	udiv	r3, r2, r3
 800795a:	b29b      	uxth	r3, r3
 800795c:	617b      	str	r3, [r7, #20]
#endif
        break;
 800795e:	e02b      	b.n	80079b8 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	085b      	lsrs	r3, r3, #1
 8007966:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800796a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	6852      	ldr	r2, [r2, #4]
 8007972:	fbb3 f3f2 	udiv	r3, r3, r2
 8007976:	b29b      	uxth	r3, r3
 8007978:	617b      	str	r3, [r7, #20]
#endif
        break;
 800797a:	e01d      	b.n	80079b8 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800797c:	f7fe fc98 	bl	80062b0 <HAL_RCC_GetSysClockFreq>
 8007980:	4603      	mov	r3, r0
 8007982:	005a      	lsls	r2, r3, #1
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	085b      	lsrs	r3, r3, #1
 800798a:	441a      	add	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	fbb2 f3f3 	udiv	r3, r2, r3
 8007994:	b29b      	uxth	r3, r3
 8007996:	617b      	str	r3, [r7, #20]
#endif
        break;
 8007998:	e00e      	b.n	80079b8 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	085b      	lsrs	r3, r3, #1
 80079a0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	617b      	str	r3, [r7, #20]
#endif
        break;
 80079b0:	e002      	b.n	80079b8 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	74fb      	strb	r3, [r7, #19]
        break;
 80079b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	2b0f      	cmp	r3, #15
 80079bc:	d916      	bls.n	80079ec <UART_SetConfig+0x520>
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079c4:	d212      	bcs.n	80079ec <UART_SetConfig+0x520>
    {
      brrtemp = usartdiv & 0xFFF0U;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	f023 030f 	bic.w	r3, r3, #15
 80079ce:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	085b      	lsrs	r3, r3, #1
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	f003 0307 	and.w	r3, r3, #7
 80079da:	b29a      	uxth	r2, r3
 80079dc:	897b      	ldrh	r3, [r7, #10]
 80079de:	4313      	orrs	r3, r2
 80079e0:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	897a      	ldrh	r2, [r7, #10]
 80079e8:	60da      	str	r2, [r3, #12]
 80079ea:	e070      	b.n	8007ace <UART_SetConfig+0x602>
    }
    else
    {
      ret = HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	74fb      	strb	r3, [r7, #19]
 80079f0:	e06d      	b.n	8007ace <UART_SetConfig+0x602>
    }
  }
  else
  {
    switch (clocksource)
 80079f2:	7efb      	ldrb	r3, [r7, #27]
 80079f4:	2b08      	cmp	r3, #8
 80079f6:	d859      	bhi.n	8007aac <UART_SetConfig+0x5e0>
 80079f8:	a201      	add	r2, pc, #4	; (adr r2, 8007a00 <UART_SetConfig+0x534>)
 80079fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fe:	bf00      	nop
 8007a00:	08007a25 	.word	0x08007a25
 8007a04:	08007a41 	.word	0x08007a41
 8007a08:	08007a5d 	.word	0x08007a5d
 8007a0c:	08007aad 	.word	0x08007aad
 8007a10:	08007a79 	.word	0x08007a79
 8007a14:	08007aad 	.word	0x08007aad
 8007a18:	08007aad 	.word	0x08007aad
 8007a1c:	08007aad 	.word	0x08007aad
 8007a20:	08007a95 	.word	0x08007a95
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007a24:	f7fe fcec 	bl	8006400 <HAL_RCC_GetPCLK1Freq>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	085b      	lsrs	r3, r3, #1
 8007a30:	441a      	add	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	617b      	str	r3, [r7, #20]
#endif
        break;
 8007a3e:	e038      	b.n	8007ab2 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007a40:	f7fe fcf4 	bl	800642c <HAL_RCC_GetPCLK2Freq>
 8007a44:	4602      	mov	r2, r0
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	085b      	lsrs	r3, r3, #1
 8007a4c:	441a      	add	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	617b      	str	r3, [r7, #20]
#endif
        break;
 8007a5a:	e02a      	b.n	8007ab2 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	085b      	lsrs	r3, r3, #1
 8007a62:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007a66:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	6852      	ldr	r2, [r2, #4]
 8007a6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	617b      	str	r3, [r7, #20]
#endif
        break;
 8007a76:	e01c      	b.n	8007ab2 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007a78:	f7fe fc1a 	bl	80062b0 <HAL_RCC_GetSysClockFreq>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	085b      	lsrs	r3, r3, #1
 8007a84:	441a      	add	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	617b      	str	r3, [r7, #20]
#endif
        break;
 8007a92:	e00e      	b.n	8007ab2 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	085b      	lsrs	r3, r3, #1
 8007a9a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	617b      	str	r3, [r7, #20]
#endif
        break;
 8007aaa:	e002      	b.n	8007ab2 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	74fb      	strb	r3, [r7, #19]
        break;
 8007ab0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	2b0f      	cmp	r3, #15
 8007ab6:	d908      	bls.n	8007aca <UART_SetConfig+0x5fe>
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007abe:	d204      	bcs.n	8007aca <UART_SetConfig+0x5fe>
    {
      huart->Instance->BRR = usartdiv;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	60da      	str	r2, [r3, #12]
 8007ac8:	e001      	b.n	8007ace <UART_SetConfig+0x602>
    }
    else
    {
      ret = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007ada:	7cfb      	ldrb	r3, [r7, #19]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3720      	adds	r7, #32
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007ae6:	bf00      	nop
 8007ae8:	f4240000 	.word	0xf4240000

08007aec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	f003 0301 	and.w	r3, r3, #1
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00a      	beq.n	8007b16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	6812      	ldr	r2, [r2, #0]
 8007b08:	6852      	ldr	r2, [r2, #4]
 8007b0a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007b12:	430a      	orrs	r2, r1
 8007b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00a      	beq.n	8007b38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	6812      	ldr	r2, [r2, #0]
 8007b2a:	6852      	ldr	r2, [r2, #4]
 8007b2c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007b34:	430a      	orrs	r2, r1
 8007b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	f003 0304 	and.w	r3, r3, #4
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00a      	beq.n	8007b5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	6812      	ldr	r2, [r2, #0]
 8007b4c:	6852      	ldr	r2, [r2, #4]
 8007b4e:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007b56:	430a      	orrs	r2, r1
 8007b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5e:	f003 0308 	and.w	r3, r3, #8
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00a      	beq.n	8007b7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	6812      	ldr	r2, [r2, #0]
 8007b6e:	6852      	ldr	r2, [r2, #4]
 8007b70:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007b78:	430a      	orrs	r2, r1
 8007b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	f003 0310 	and.w	r3, r3, #16
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00a      	beq.n	8007b9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6812      	ldr	r2, [r2, #0]
 8007b90:	6892      	ldr	r2, [r2, #8]
 8007b92:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	f003 0320 	and.w	r3, r3, #32
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6812      	ldr	r2, [r2, #0]
 8007bb2:	6892      	ldr	r2, [r2, #8]
 8007bb4:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d01a      	beq.n	8007c02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	6812      	ldr	r2, [r2, #0]
 8007bd4:	6852      	ldr	r2, [r2, #4]
 8007bd6:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bea:	d10a      	bne.n	8007c02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	6812      	ldr	r2, [r2, #0]
 8007bf4:	6852      	ldr	r2, [r2, #4]
 8007bf6:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	6812      	ldr	r2, [r2, #0]
 8007c16:	6852      	ldr	r2, [r2, #4]
 8007c18:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007c20:	430a      	orrs	r2, r1
 8007c22:	605a      	str	r2, [r3, #4]
  }
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af02      	add	r7, sp, #8
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007c42:	f7fb fc33 	bl	80034ac <HAL_GetTick>
 8007c46:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0308 	and.w	r3, r3, #8
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	d10e      	bne.n	8007c74 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f82c 	bl	8007cc2 <UART_WaitOnFlagUntilTimeout>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c70:	2303      	movs	r3, #3
 8007c72:	e022      	b.n	8007cba <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0304 	and.w	r3, r3, #4
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	d10e      	bne.n	8007ca0 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f816 	bl	8007cc2 <UART_WaitOnFlagUntilTimeout>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e00c      	b.n	8007cba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2220      	movs	r2, #32
 8007cac:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	60f8      	str	r0, [r7, #12]
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	603b      	str	r3, [r7, #0]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cd2:	e02c      	b.n	8007d2e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cda:	d028      	beq.n	8007d2e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d007      	beq.n	8007cf2 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ce2:	f7fb fbe3 	bl	80034ac <HAL_GetTick>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	1ad2      	subs	r2, r2, r3
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d91d      	bls.n	8007d2e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	6812      	ldr	r2, [r2, #0]
 8007cfa:	6812      	ldr	r2, [r2, #0]
 8007cfc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d00:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	6812      	ldr	r2, [r2, #0]
 8007d0a:	6892      	ldr	r2, [r2, #8]
 8007d0c:	f022 0201 	bic.w	r2, r2, #1
 8007d10:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e00f      	b.n	8007d4e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69da      	ldr	r2, [r3, #28]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	401a      	ands	r2, r3
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	bf0c      	ite	eq
 8007d3e:	2301      	moveq	r3, #1
 8007d40:	2300      	movne	r3, #0
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	461a      	mov	r2, r3
 8007d46:	79fb      	ldrb	r3, [r7, #7]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d0c3      	beq.n	8007cd4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007d56:	b084      	sub	sp, #16
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	f107 0014 	add.w	r0, r7, #20
 8007d64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	b004      	add	sp, #16
 8007d76:	4770      	bx	lr

08007d78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d80:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007d84:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	89fb      	ldrh	r3, [r7, #14]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007db0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007db4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	b21a      	sxth	r2, r3
 8007dc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007dc4:	43db      	mvns	r3, r3
 8007dc6:	b21b      	sxth	r3, r3
 8007dc8:	4013      	ands	r3, r2
 8007dca:	b21b      	sxth	r3, r3
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	460b      	mov	r3, r1
 8007dec:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b082      	sub	sp, #8
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	f107 0014 	add.w	r0, r7, #20
 8007e0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff ffa2 	bl	8007d78 <USB_EnableGlobalInt>

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e40:	b004      	add	sp, #16
 8007e42:	4770      	bx	lr

08007e44 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e44:	b490      	push	{r4, r7}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e68:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	78db      	ldrb	r3, [r3, #3]
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d819      	bhi.n	8007ea6 <USB_ActivateEndpoint+0x62>
 8007e72:	a201      	add	r2, pc, #4	; (adr r2, 8007e78 <USB_ActivateEndpoint+0x34>)
 8007e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e78:	08007e89 	.word	0x08007e89
 8007e7c:	08007e9d 	.word	0x08007e9d
 8007e80:	08007ead 	.word	0x08007ead
 8007e84:	08007e93 	.word	0x08007e93
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007e88:	8abb      	ldrh	r3, [r7, #20]
 8007e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e8e:	82bb      	strh	r3, [r7, #20]
      break;
 8007e90:	e00d      	b.n	8007eae <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007e92:	8abb      	ldrh	r3, [r7, #20]
 8007e94:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007e98:	82bb      	strh	r3, [r7, #20]
      break;
 8007e9a:	e008      	b.n	8007eae <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007e9c:	8abb      	ldrh	r3, [r7, #20]
 8007e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ea2:	82bb      	strh	r3, [r7, #20]
      break;
 8007ea4:	e003      	b.n	8007eae <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8007eaa:	e000      	b.n	8007eae <USB_ActivateEndpoint+0x6a>
      break;
 8007eac:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal);
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	8aba      	ldrh	r2, [r7, #20]
 8007eba:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	b21b      	sxth	r3, r3
 8007ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed4:	b21a      	sxth	r2, r3
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	b21b      	sxth	r3, r3
 8007edc:	4313      	orrs	r3, r2
 8007ede:	b21b      	sxth	r3, r3
 8007ee0:	b29c      	uxth	r4, r3
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	441a      	add	r2, r3
 8007eec:	4b87      	ldr	r3, [pc, #540]	; (800810c <USB_ActivateEndpoint+0x2c8>)
 8007eee:	4323      	orrs	r3, r4
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	7b1b      	ldrb	r3, [r3, #12]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f040 810d 	bne.w	8008118 <USB_ActivateEndpoint+0x2d4>
  {
    if (ep->is_in != 0U)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	785b      	ldrb	r3, [r3, #1]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d067      	beq.n	8007fd6 <USB_ActivateEndpoint+0x192>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007f06:	687c      	ldr	r4, [r7, #4]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	441c      	add	r4, r3
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	00db      	lsls	r3, r3, #3
 8007f18:	4423      	add	r3, r4
 8007f1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f1e:	461c      	mov	r4, r3
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	88db      	ldrh	r3, [r3, #6]
 8007f24:	085b      	lsrs	r3, r3, #1
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	b29c      	uxth	r4, r3
 8007f3c:	4623      	mov	r3, r4
 8007f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d014      	beq.n	8007f70 <USB_ActivateEndpoint+0x12c>
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	881b      	ldrh	r3, [r3, #0]
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f5c:	b29c      	uxth	r4, r3
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	441a      	add	r2, r3
 8007f68:	4b69      	ldr	r3, [pc, #420]	; (8008110 <USB_ActivateEndpoint+0x2cc>)
 8007f6a:	4323      	orrs	r3, r4
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	78db      	ldrb	r3, [r3, #3]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d018      	beq.n	8007faa <USB_ActivateEndpoint+0x166>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f8e:	b29c      	uxth	r4, r3
 8007f90:	f084 0320 	eor.w	r3, r4, #32
 8007f94:	b29c      	uxth	r4, r3
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	441a      	add	r2, r3
 8007fa0:	4b5a      	ldr	r3, [pc, #360]	; (800810c <USB_ActivateEndpoint+0x2c8>)
 8007fa2:	4323      	orrs	r3, r4
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	8013      	strh	r3, [r2, #0]
 8007fa8:	e226      	b.n	80083f8 <USB_ActivateEndpoint+0x5b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fc0:	b29c      	uxth	r4, r3
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	441a      	add	r2, r3
 8007fcc:	4b4f      	ldr	r3, [pc, #316]	; (800810c <USB_ActivateEndpoint+0x2c8>)
 8007fce:	4323      	orrs	r3, r4
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	8013      	strh	r3, [r2, #0]
 8007fd4:	e210      	b.n	80083f8 <USB_ActivateEndpoint+0x5b4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007fd6:	687c      	ldr	r4, [r7, #4]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	441c      	add	r4, r3
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	00db      	lsls	r3, r3, #3
 8007fe8:	4423      	add	r3, r4
 8007fea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fee:	461c      	mov	r4, r3
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	88db      	ldrh	r3, [r3, #6]
 8007ff4:	085b      	lsrs	r3, r3, #1
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	005b      	lsls	r3, r3, #1
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007ffe:	687c      	ldr	r4, [r7, #4]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008006:	b29b      	uxth	r3, r3
 8008008:	441c      	add	r4, r3
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	00db      	lsls	r3, r3, #3
 8008010:	4423      	add	r3, r4
 8008012:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008016:	60fb      	str	r3, [r7, #12]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d111      	bne.n	8008044 <USB_ActivateEndpoint+0x200>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	881a      	ldrh	r2, [r3, #0]
 8008024:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8008028:	4013      	ands	r3, r2
 800802a:	b29a      	uxth	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	801a      	strh	r2, [r3, #0]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800803c:	b29a      	uxth	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	801a      	strh	r2, [r3, #0]
 8008042:	e026      	b.n	8008092 <USB_ActivateEndpoint+0x24e>
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	2b3d      	cmp	r3, #61	; 0x3d
 800804a:	d813      	bhi.n	8008074 <USB_ActivateEndpoint+0x230>
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	085b      	lsrs	r3, r3, #1
 8008052:	613b      	str	r3, [r7, #16]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <USB_ActivateEndpoint+0x222>
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	3301      	adds	r3, #1
 8008064:	613b      	str	r3, [r7, #16]
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	b29b      	uxth	r3, r3
 800806a:	029b      	lsls	r3, r3, #10
 800806c:	b29a      	uxth	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	801a      	strh	r2, [r3, #0]
 8008072:	e00e      	b.n	8008092 <USB_ActivateEndpoint+0x24e>
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	095b      	lsrs	r3, r3, #5
 800807a:	613b      	str	r3, [r7, #16]
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	b29b      	uxth	r3, r3
 8008080:	029b      	lsls	r3, r3, #10
 8008082:	b29b      	uxth	r3, r3
 8008084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800808c:	b29a      	uxth	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	b29c      	uxth	r4, r3
 80080a0:	4623      	mov	r3, r4
 80080a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d014      	beq.n	80080d4 <USB_ActivateEndpoint+0x290>
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c0:	b29c      	uxth	r4, r3
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	441a      	add	r2, r3
 80080cc:	4b11      	ldr	r3, [pc, #68]	; (8008114 <USB_ActivateEndpoint+0x2d0>)
 80080ce:	4323      	orrs	r3, r4
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ea:	b29c      	uxth	r4, r3
 80080ec:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80080f0:	b29c      	uxth	r4, r3
 80080f2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80080f6:	b29c      	uxth	r4, r3
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	441a      	add	r2, r3
 8008102:	4b02      	ldr	r3, [pc, #8]	; (800810c <USB_ActivateEndpoint+0x2c8>)
 8008104:	4323      	orrs	r3, r4
 8008106:	b29b      	uxth	r3, r3
 8008108:	8013      	strh	r3, [r2, #0]
 800810a:	e175      	b.n	80083f8 <USB_ActivateEndpoint+0x5b4>
 800810c:	ffff8080 	.word	0xffff8080
 8008110:	ffff80c0 	.word	0xffff80c0
 8008114:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	881b      	ldrh	r3, [r3, #0]
 8008124:	b29b      	uxth	r3, r3
 8008126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800812a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800812e:	b29c      	uxth	r4, r3
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	441a      	add	r2, r3
 800813a:	4b96      	ldr	r3, [pc, #600]	; (8008394 <USB_ActivateEndpoint+0x550>)
 800813c:	4323      	orrs	r3, r4
 800813e:	b29b      	uxth	r3, r3
 8008140:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008142:	687c      	ldr	r4, [r7, #4]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800814a:	b29b      	uxth	r3, r3
 800814c:	441c      	add	r4, r3
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	00db      	lsls	r3, r3, #3
 8008154:	4423      	add	r3, r4
 8008156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800815a:	461c      	mov	r4, r3
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	891b      	ldrh	r3, [r3, #8]
 8008160:	085b      	lsrs	r3, r3, #1
 8008162:	b29b      	uxth	r3, r3
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	b29b      	uxth	r3, r3
 8008168:	8023      	strh	r3, [r4, #0]
 800816a:	687c      	ldr	r4, [r7, #4]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008172:	b29b      	uxth	r3, r3
 8008174:	441c      	add	r4, r3
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	00db      	lsls	r3, r3, #3
 800817c:	4423      	add	r3, r4
 800817e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008182:	461c      	mov	r4, r3
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	895b      	ldrh	r3, [r3, #10]
 8008188:	085b      	lsrs	r3, r3, #1
 800818a:	b29b      	uxth	r3, r3
 800818c:	005b      	lsls	r3, r3, #1
 800818e:	b29b      	uxth	r3, r3
 8008190:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	785b      	ldrb	r3, [r3, #1]
 8008196:	2b00      	cmp	r3, #0
 8008198:	f040 8088 	bne.w	80082ac <USB_ActivateEndpoint+0x468>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	b29c      	uxth	r4, r3
 80081aa:	4623      	mov	r3, r4
 80081ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d014      	beq.n	80081de <USB_ActivateEndpoint+0x39a>
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	881b      	ldrh	r3, [r3, #0]
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ca:	b29c      	uxth	r4, r3
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	441a      	add	r2, r3
 80081d6:	4b70      	ldr	r3, [pc, #448]	; (8008398 <USB_ActivateEndpoint+0x554>)
 80081d8:	4323      	orrs	r3, r4
 80081da:	b29b      	uxth	r3, r3
 80081dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	b29c      	uxth	r4, r3
 80081ec:	4623      	mov	r3, r4
 80081ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d014      	beq.n	8008220 <USB_ActivateEndpoint+0x3dc>
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	b29b      	uxth	r3, r3
 8008204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800820c:	b29c      	uxth	r4, r3
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	441a      	add	r2, r3
 8008218:	4b60      	ldr	r3, [pc, #384]	; (800839c <USB_ActivateEndpoint+0x558>)
 800821a:	4323      	orrs	r3, r4
 800821c:	b29b      	uxth	r3, r3
 800821e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	881b      	ldrh	r3, [r3, #0]
 800822c:	b29b      	uxth	r3, r3
 800822e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008236:	b29c      	uxth	r4, r3
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	441a      	add	r2, r3
 8008242:	4b56      	ldr	r3, [pc, #344]	; (800839c <USB_ActivateEndpoint+0x558>)
 8008244:	4323      	orrs	r3, r4
 8008246:	b29b      	uxth	r3, r3
 8008248:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4413      	add	r3, r2
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	b29b      	uxth	r3, r3
 8008258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800825c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008260:	b29c      	uxth	r4, r3
 8008262:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008266:	b29c      	uxth	r4, r3
 8008268:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800826c:	b29c      	uxth	r4, r3
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	441a      	add	r2, r3
 8008278:	4b49      	ldr	r3, [pc, #292]	; (80083a0 <USB_ActivateEndpoint+0x55c>)
 800827a:	4323      	orrs	r3, r4
 800827c:	b29b      	uxth	r3, r3
 800827e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	b29b      	uxth	r3, r3
 800828e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008296:	b29c      	uxth	r4, r3
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	441a      	add	r2, r3
 80082a2:	4b3f      	ldr	r3, [pc, #252]	; (80083a0 <USB_ActivateEndpoint+0x55c>)
 80082a4:	4323      	orrs	r3, r4
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	8013      	strh	r3, [r2, #0]
 80082aa:	e0a5      	b.n	80083f8 <USB_ActivateEndpoint+0x5b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	881b      	ldrh	r3, [r3, #0]
 80082b8:	b29c      	uxth	r4, r3
 80082ba:	4623      	mov	r3, r4
 80082bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d014      	beq.n	80082ee <USB_ActivateEndpoint+0x4aa>
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	881b      	ldrh	r3, [r3, #0]
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082da:	b29c      	uxth	r4, r3
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	441a      	add	r2, r3
 80082e6:	4b2c      	ldr	r3, [pc, #176]	; (8008398 <USB_ActivateEndpoint+0x554>)
 80082e8:	4323      	orrs	r3, r4
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4413      	add	r3, r2
 80082f8:	881b      	ldrh	r3, [r3, #0]
 80082fa:	b29c      	uxth	r4, r3
 80082fc:	4623      	mov	r3, r4
 80082fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008302:	2b00      	cmp	r3, #0
 8008304:	d014      	beq.n	8008330 <USB_ActivateEndpoint+0x4ec>
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4413      	add	r3, r2
 8008310:	881b      	ldrh	r3, [r3, #0]
 8008312:	b29b      	uxth	r3, r3
 8008314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831c:	b29c      	uxth	r4, r3
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	441a      	add	r2, r3
 8008328:	4b1c      	ldr	r3, [pc, #112]	; (800839c <USB_ActivateEndpoint+0x558>)
 800832a:	4323      	orrs	r3, r4
 800832c:	b29b      	uxth	r3, r3
 800832e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4413      	add	r3, r2
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	b29b      	uxth	r3, r3
 800833e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008346:	b29c      	uxth	r4, r3
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	441a      	add	r2, r3
 8008352:	4b11      	ldr	r3, [pc, #68]	; (8008398 <USB_ActivateEndpoint+0x554>)
 8008354:	4323      	orrs	r3, r4
 8008356:	b29b      	uxth	r3, r3
 8008358:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	78db      	ldrb	r3, [r3, #3]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d020      	beq.n	80083a4 <USB_ActivateEndpoint+0x560>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	b29b      	uxth	r3, r3
 8008370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008378:	b29c      	uxth	r4, r3
 800837a:	f084 0320 	eor.w	r3, r4, #32
 800837e:	b29c      	uxth	r4, r3
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	441a      	add	r2, r3
 800838a:	4b05      	ldr	r3, [pc, #20]	; (80083a0 <USB_ActivateEndpoint+0x55c>)
 800838c:	4323      	orrs	r3, r4
 800838e:	b29b      	uxth	r3, r3
 8008390:	8013      	strh	r3, [r2, #0]
 8008392:	e01c      	b.n	80083ce <USB_ActivateEndpoint+0x58a>
 8008394:	ffff8180 	.word	0xffff8180
 8008398:	ffffc080 	.word	0xffffc080
 800839c:	ffff80c0 	.word	0xffff80c0
 80083a0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083ba:	b29c      	uxth	r4, r3
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	441a      	add	r2, r3
 80083c6:	4b0f      	ldr	r3, [pc, #60]	; (8008404 <USB_ActivateEndpoint+0x5c0>)
 80083c8:	4323      	orrs	r3, r4
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	b29b      	uxth	r3, r3
 80083dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083e4:	b29c      	uxth	r4, r3
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	441a      	add	r2, r3
 80083f0:	4b04      	ldr	r3, [pc, #16]	; (8008404 <USB_ActivateEndpoint+0x5c0>)
 80083f2:	4323      	orrs	r3, r4
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80083f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bc90      	pop	{r4, r7}
 8008402:	4770      	bx	lr
 8008404:	ffff8080 	.word	0xffff8080

08008408 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008408:	b490      	push	{r4, r7}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	7b1b      	ldrb	r3, [r3, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d171      	bne.n	80084fe <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	785b      	ldrb	r3, [r3, #1]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d036      	beq.n	8008490 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	b29c      	uxth	r4, r3
 8008430:	4623      	mov	r3, r4
 8008432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008436:	2b00      	cmp	r3, #0
 8008438:	d014      	beq.n	8008464 <USB_DeactivateEndpoint+0x5c>
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	b29b      	uxth	r3, r3
 8008448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800844c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008450:	b29c      	uxth	r4, r3
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	441a      	add	r2, r3
 800845c:	4b6b      	ldr	r3, [pc, #428]	; (800860c <USB_DeactivateEndpoint+0x204>)
 800845e:	4323      	orrs	r3, r4
 8008460:	b29b      	uxth	r3, r3
 8008462:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	881b      	ldrh	r3, [r3, #0]
 8008470:	b29b      	uxth	r3, r3
 8008472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800847a:	b29c      	uxth	r4, r3
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	441a      	add	r2, r3
 8008486:	4b62      	ldr	r3, [pc, #392]	; (8008610 <USB_DeactivateEndpoint+0x208>)
 8008488:	4323      	orrs	r3, r4
 800848a:	b29b      	uxth	r3, r3
 800848c:	8013      	strh	r3, [r2, #0]
 800848e:	e144      	b.n	800871a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	b29c      	uxth	r4, r3
 800849e:	4623      	mov	r3, r4
 80084a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d014      	beq.n	80084d2 <USB_DeactivateEndpoint+0xca>
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	881b      	ldrh	r3, [r3, #0]
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084be:	b29c      	uxth	r4, r3
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	441a      	add	r2, r3
 80084ca:	4b52      	ldr	r3, [pc, #328]	; (8008614 <USB_DeactivateEndpoint+0x20c>)
 80084cc:	4323      	orrs	r3, r4
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	881b      	ldrh	r3, [r3, #0]
 80084de:	b29b      	uxth	r3, r3
 80084e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e8:	b29c      	uxth	r4, r3
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	441a      	add	r2, r3
 80084f4:	4b46      	ldr	r3, [pc, #280]	; (8008610 <USB_DeactivateEndpoint+0x208>)
 80084f6:	4323      	orrs	r3, r4
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	8013      	strh	r3, [r2, #0]
 80084fc:	e10d      	b.n	800871a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	785b      	ldrb	r3, [r3, #1]
 8008502:	2b00      	cmp	r3, #0
 8008504:	f040 8088 	bne.w	8008618 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4413      	add	r3, r2
 8008512:	881b      	ldrh	r3, [r3, #0]
 8008514:	b29c      	uxth	r4, r3
 8008516:	4623      	mov	r3, r4
 8008518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d014      	beq.n	800854a <USB_DeactivateEndpoint+0x142>
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	881b      	ldrh	r3, [r3, #0]
 800852c:	b29b      	uxth	r3, r3
 800852e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008536:	b29c      	uxth	r4, r3
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	441a      	add	r2, r3
 8008542:	4b34      	ldr	r3, [pc, #208]	; (8008614 <USB_DeactivateEndpoint+0x20c>)
 8008544:	4323      	orrs	r3, r4
 8008546:	b29b      	uxth	r3, r3
 8008548:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	b29c      	uxth	r4, r3
 8008558:	4623      	mov	r3, r4
 800855a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855e:	2b00      	cmp	r3, #0
 8008560:	d014      	beq.n	800858c <USB_DeactivateEndpoint+0x184>
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	b29b      	uxth	r3, r3
 8008570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008578:	b29c      	uxth	r4, r3
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	441a      	add	r2, r3
 8008584:	4b21      	ldr	r3, [pc, #132]	; (800860c <USB_DeactivateEndpoint+0x204>)
 8008586:	4323      	orrs	r3, r4
 8008588:	b29b      	uxth	r3, r3
 800858a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	b29b      	uxth	r3, r3
 800859a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800859e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a2:	b29c      	uxth	r4, r3
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	441a      	add	r2, r3
 80085ae:	4b17      	ldr	r3, [pc, #92]	; (800860c <USB_DeactivateEndpoint+0x204>)
 80085b0:	4323      	orrs	r3, r4
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	881b      	ldrh	r3, [r3, #0]
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085cc:	b29c      	uxth	r4, r3
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	441a      	add	r2, r3
 80085d8:	4b0d      	ldr	r3, [pc, #52]	; (8008610 <USB_DeactivateEndpoint+0x208>)
 80085da:	4323      	orrs	r3, r4
 80085dc:	b29b      	uxth	r3, r3
 80085de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085f6:	b29c      	uxth	r4, r3
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	441a      	add	r2, r3
 8008602:	4b03      	ldr	r3, [pc, #12]	; (8008610 <USB_DeactivateEndpoint+0x208>)
 8008604:	4323      	orrs	r3, r4
 8008606:	b29b      	uxth	r3, r3
 8008608:	8013      	strh	r3, [r2, #0]
 800860a:	e086      	b.n	800871a <USB_DeactivateEndpoint+0x312>
 800860c:	ffff80c0 	.word	0xffff80c0
 8008610:	ffff8080 	.word	0xffff8080
 8008614:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	881b      	ldrh	r3, [r3, #0]
 8008624:	b29c      	uxth	r4, r3
 8008626:	4623      	mov	r3, r4
 8008628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d014      	beq.n	800865a <USB_DeactivateEndpoint+0x252>
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4413      	add	r3, r2
 800863a:	881b      	ldrh	r3, [r3, #0]
 800863c:	b29b      	uxth	r3, r3
 800863e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008646:	b29c      	uxth	r4, r3
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	441a      	add	r2, r3
 8008652:	4b35      	ldr	r3, [pc, #212]	; (8008728 <USB_DeactivateEndpoint+0x320>)
 8008654:	4323      	orrs	r3, r4
 8008656:	b29b      	uxth	r3, r3
 8008658:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	881b      	ldrh	r3, [r3, #0]
 8008666:	b29c      	uxth	r4, r3
 8008668:	4623      	mov	r3, r4
 800866a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800866e:	2b00      	cmp	r3, #0
 8008670:	d014      	beq.n	800869c <USB_DeactivateEndpoint+0x294>
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	b29b      	uxth	r3, r3
 8008680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008688:	b29c      	uxth	r4, r3
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	441a      	add	r2, r3
 8008694:	4b25      	ldr	r3, [pc, #148]	; (800872c <USB_DeactivateEndpoint+0x324>)
 8008696:	4323      	orrs	r3, r4
 8008698:	b29b      	uxth	r3, r3
 800869a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086b2:	b29c      	uxth	r4, r3
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	441a      	add	r2, r3
 80086be:	4b1a      	ldr	r3, [pc, #104]	; (8008728 <USB_DeactivateEndpoint+0x320>)
 80086c0:	4323      	orrs	r3, r4
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	881b      	ldrh	r3, [r3, #0]
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086dc:	b29c      	uxth	r4, r3
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	441a      	add	r2, r3
 80086e8:	4b11      	ldr	r3, [pc, #68]	; (8008730 <USB_DeactivateEndpoint+0x328>)
 80086ea:	4323      	orrs	r3, r4
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	881b      	ldrh	r3, [r3, #0]
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008706:	b29c      	uxth	r4, r3
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	441a      	add	r2, r3
 8008712:	4b07      	ldr	r3, [pc, #28]	; (8008730 <USB_DeactivateEndpoint+0x328>)
 8008714:	4323      	orrs	r3, r4
 8008716:	b29b      	uxth	r3, r3
 8008718:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bc90      	pop	{r4, r7}
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	ffffc080 	.word	0xffffc080
 800872c:	ffff80c0 	.word	0xffff80c0
 8008730:	ffff8080 	.word	0xffff8080

08008734 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008734:	b590      	push	{r4, r7, lr}
 8008736:	b095      	sub	sp, #84	; 0x54
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len = ep->xfer_len;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	64bb      	str	r3, [r7, #72]	; 0x48

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	785b      	ldrb	r3, [r3, #1]
 8008748:	2b01      	cmp	r3, #1
 800874a:	f040 815f 	bne.w	8008a0c <USB_EPStartXfer+0x2d8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	699a      	ldr	r2, [r3, #24]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	429a      	cmp	r2, r3
 8008758:	d909      	bls.n	800876e <USB_EPStartXfer+0x3a>
    {
      len = ep->maxpacket;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	699a      	ldr	r2, [r3, #24]
 8008764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008766:	1ad2      	subs	r2, r2, r3
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	619a      	str	r2, [r3, #24]
 800876c:	e005      	b.n	800877a <USB_EPStartXfer+0x46>
    }
    else
    {
      len = ep->xfer_len;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	2200      	movs	r2, #0
 8008778:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	7b1b      	ldrb	r3, [r3, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d11a      	bne.n	80087b8 <USB_EPStartXfer+0x84>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	6959      	ldr	r1, [r3, #20]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	88da      	ldrh	r2, [r3, #6]
 800878a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800878c:	b29b      	uxth	r3, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fbb0 	bl	8008ef4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008794:	687c      	ldr	r4, [r7, #4]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800879c:	b29b      	uxth	r3, r3
 800879e:	441c      	add	r4, r3
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	00db      	lsls	r3, r3, #3
 80087a6:	4423      	add	r3, r4
 80087a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80087ac:	633b      	str	r3, [r7, #48]	; 0x30
 80087ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b4:	801a      	strh	r2, [r3, #0]
 80087b6:	e10d      	b.n	80089d4 <USB_EPStartXfer+0x2a0>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d063      	beq.n	8008896 <USB_EPStartXfer+0x162>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80087ce:	687c      	ldr	r4, [r7, #4]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	785b      	ldrb	r3, [r3, #1]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d145      	bne.n	8008864 <USB_EPStartXfer+0x130>
 80087d8:	687c      	ldr	r4, [r7, #4]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	441c      	add	r4, r3
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	00db      	lsls	r3, r3, #3
 80087ea:	4423      	add	r3, r4
 80087ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80087f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d111      	bne.n	800881c <USB_EPStartXfer+0xe8>
 80087f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fa:	881a      	ldrh	r2, [r3, #0]
 80087fc:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8008800:	4013      	ands	r3, r2
 8008802:	b29a      	uxth	r2, r3
 8008804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008806:	801a      	strh	r2, [r3, #0]
 8008808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880a:	881b      	ldrh	r3, [r3, #0]
 800880c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008814:	b29a      	uxth	r2, r3
 8008816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008818:	801a      	strh	r2, [r3, #0]
 800881a:	e037      	b.n	800888c <USB_EPStartXfer+0x158>
 800881c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800881e:	2b3d      	cmp	r3, #61	; 0x3d
 8008820:	d811      	bhi.n	8008846 <USB_EPStartXfer+0x112>
 8008822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008824:	085b      	lsrs	r3, r3, #1
 8008826:	647b      	str	r3, [r7, #68]	; 0x44
 8008828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	2b00      	cmp	r3, #0
 8008830:	d002      	beq.n	8008838 <USB_EPStartXfer+0x104>
 8008832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008834:	3301      	adds	r3, #1
 8008836:	647b      	str	r3, [r7, #68]	; 0x44
 8008838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800883a:	b29b      	uxth	r3, r3
 800883c:	029b      	lsls	r3, r3, #10
 800883e:	b29a      	uxth	r2, r3
 8008840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008842:	801a      	strh	r2, [r3, #0]
 8008844:	e022      	b.n	800888c <USB_EPStartXfer+0x158>
 8008846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008848:	095b      	lsrs	r3, r3, #5
 800884a:	647b      	str	r3, [r7, #68]	; 0x44
 800884c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800884e:	b29b      	uxth	r3, r3
 8008850:	029b      	lsls	r3, r3, #10
 8008852:	b29b      	uxth	r3, r3
 8008854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800885c:	b29a      	uxth	r2, r3
 800885e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008860:	801a      	strh	r2, [r3, #0]
 8008862:	e013      	b.n	800888c <USB_EPStartXfer+0x158>
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	785b      	ldrb	r3, [r3, #1]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d10f      	bne.n	800888c <USB_EPStartXfer+0x158>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008872:	b29b      	uxth	r3, r3
 8008874:	441c      	add	r4, r3
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	00db      	lsls	r3, r3, #3
 800887c:	4423      	add	r3, r4
 800887e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008882:	62bb      	str	r3, [r7, #40]	; 0x28
 8008884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008886:	b29a      	uxth	r2, r3
 8008888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888a:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	895b      	ldrh	r3, [r3, #10]
 8008890:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008894:	e062      	b.n	800895c <USB_EPStartXfer+0x228>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	785b      	ldrb	r3, [r3, #1]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d145      	bne.n	800892a <USB_EPStartXfer+0x1f6>
 800889e:	687c      	ldr	r4, [r7, #4]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	441c      	add	r4, r3
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	00db      	lsls	r3, r3, #3
 80088b0:	4423      	add	r3, r4
 80088b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80088b6:	627b      	str	r3, [r7, #36]	; 0x24
 80088b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d111      	bne.n	80088e2 <USB_EPStartXfer+0x1ae>
 80088be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c0:	881a      	ldrh	r2, [r3, #0]
 80088c2:	f243 33ff 	movw	r3, #13311	; 0x33ff
 80088c6:	4013      	ands	r3, r2
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	801a      	strh	r2, [r3, #0]
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	881b      	ldrh	r3, [r3, #0]
 80088d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088da:	b29a      	uxth	r2, r3
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	801a      	strh	r2, [r3, #0]
 80088e0:	e038      	b.n	8008954 <USB_EPStartXfer+0x220>
 80088e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088e4:	2b3d      	cmp	r3, #61	; 0x3d
 80088e6:	d811      	bhi.n	800890c <USB_EPStartXfer+0x1d8>
 80088e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ea:	085b      	lsrs	r3, r3, #1
 80088ec:	643b      	str	r3, [r7, #64]	; 0x40
 80088ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088f0:	f003 0301 	and.w	r3, r3, #1
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <USB_EPStartXfer+0x1ca>
 80088f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088fa:	3301      	adds	r3, #1
 80088fc:	643b      	str	r3, [r7, #64]	; 0x40
 80088fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008900:	b29b      	uxth	r3, r3
 8008902:	029b      	lsls	r3, r3, #10
 8008904:	b29a      	uxth	r2, r3
 8008906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008908:	801a      	strh	r2, [r3, #0]
 800890a:	e023      	b.n	8008954 <USB_EPStartXfer+0x220>
 800890c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800890e:	095b      	lsrs	r3, r3, #5
 8008910:	643b      	str	r3, [r7, #64]	; 0x40
 8008912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008914:	b29b      	uxth	r3, r3
 8008916:	029b      	lsls	r3, r3, #10
 8008918:	b29b      	uxth	r3, r3
 800891a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800891e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008922:	b29a      	uxth	r2, r3
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	801a      	strh	r2, [r3, #0]
 8008928:	e014      	b.n	8008954 <USB_EPStartXfer+0x220>
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	785b      	ldrb	r3, [r3, #1]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d110      	bne.n	8008954 <USB_EPStartXfer+0x220>
 8008932:	687c      	ldr	r4, [r7, #4]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800893a:	b29b      	uxth	r3, r3
 800893c:	441c      	add	r4, r3
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	00db      	lsls	r3, r3, #3
 8008944:	4423      	add	r3, r4
 8008946:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800894a:	623b      	str	r3, [r7, #32]
 800894c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800894e:	b29a      	uxth	r2, r3
 8008950:	6a3b      	ldr	r3, [r7, #32]
 8008952:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	891b      	ldrh	r3, [r3, #8]
 8008958:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	6959      	ldr	r1, [r3, #20]
 8008960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008962:	b29b      	uxth	r3, r3
 8008964:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fac3 	bl	8008ef4 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	785b      	ldrb	r3, [r3, #1]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d115      	bne.n	80089a2 <USB_EPStartXfer+0x26e>
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	881b      	ldrh	r3, [r3, #0]
 8008982:	b29b      	uxth	r3, r3
 8008984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800898c:	b29c      	uxth	r4, r3
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	441a      	add	r2, r3
 8008998:	4b9a      	ldr	r3, [pc, #616]	; (8008c04 <USB_EPStartXfer+0x4d0>)
 800899a:	4323      	orrs	r3, r4
 800899c:	b29b      	uxth	r3, r3
 800899e:	8013      	strh	r3, [r2, #0]
 80089a0:	e018      	b.n	80089d4 <USB_EPStartXfer+0x2a0>
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	785b      	ldrb	r3, [r3, #1]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d114      	bne.n	80089d4 <USB_EPStartXfer+0x2a0>
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	881b      	ldrh	r3, [r3, #0]
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c0:	b29c      	uxth	r4, r3
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	441a      	add	r2, r3
 80089cc:	4b8e      	ldr	r3, [pc, #568]	; (8008c08 <USB_EPStartXfer+0x4d4>)
 80089ce:	4323      	orrs	r3, r4
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	881b      	ldrh	r3, [r3, #0]
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089ea:	b29c      	uxth	r4, r3
 80089ec:	f084 0310 	eor.w	r3, r4, #16
 80089f0:	b29c      	uxth	r4, r3
 80089f2:	f084 0320 	eor.w	r3, r4, #32
 80089f6:	b29c      	uxth	r4, r3
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	441a      	add	r2, r3
 8008a02:	4b82      	ldr	r3, [pc, #520]	; (8008c0c <USB_EPStartXfer+0x4d8>)
 8008a04:	4323      	orrs	r3, r4
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	8013      	strh	r3, [r2, #0]
 8008a0a:	e13f      	b.n	8008c8c <USB_EPStartXfer+0x558>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	699a      	ldr	r2, [r3, #24]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d909      	bls.n	8008a2c <USB_EPStartXfer+0x2f8>
    {
      len = ep->maxpacket;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	699a      	ldr	r2, [r3, #24]
 8008a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a24:	1ad2      	subs	r2, r2, r3
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	619a      	str	r2, [r3, #24]
 8008a2a:	e005      	b.n	8008a38 <USB_EPStartXfer+0x304>
    }
    else
    {
      len = ep->xfer_len;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	2200      	movs	r2, #0
 8008a36:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	7b1b      	ldrb	r3, [r3, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d145      	bne.n	8008acc <USB_EPStartXfer+0x398>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008a40:	687c      	ldr	r4, [r7, #4]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	441c      	add	r4, r3
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	00db      	lsls	r3, r3, #3
 8008a52:	4423      	add	r3, r4
 8008a54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a58:	61fb      	str	r3, [r7, #28]
 8008a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d111      	bne.n	8008a84 <USB_EPStartXfer+0x350>
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	881a      	ldrh	r2, [r3, #0]
 8008a64:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8008a68:	4013      	ands	r3, r2
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	801a      	strh	r2, [r3, #0]
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	881b      	ldrh	r3, [r3, #0]
 8008a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	801a      	strh	r2, [r3, #0]
 8008a82:	e0e8      	b.n	8008c56 <USB_EPStartXfer+0x522>
 8008a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a86:	2b3d      	cmp	r3, #61	; 0x3d
 8008a88:	d811      	bhi.n	8008aae <USB_EPStartXfer+0x37a>
 8008a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a8c:	085b      	lsrs	r3, r3, #1
 8008a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <USB_EPStartXfer+0x36c>
 8008a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	029b      	lsls	r3, r3, #10
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	801a      	strh	r2, [r3, #0]
 8008aac:	e0d3      	b.n	8008c56 <USB_EPStartXfer+0x522>
 8008aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ab0:	095b      	lsrs	r3, r3, #5
 8008ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	029b      	lsls	r3, r3, #10
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	801a      	strh	r2, [r3, #0]
 8008aca:	e0c4      	b.n	8008c56 <USB_EPStartXfer+0x522>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	785b      	ldrb	r3, [r3, #1]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d145      	bne.n	8008b60 <USB_EPStartXfer+0x42c>
 8008ad4:	687c      	ldr	r4, [r7, #4]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	441c      	add	r4, r3
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	00db      	lsls	r3, r3, #3
 8008ae6:	4423      	add	r3, r4
 8008ae8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008aec:	61bb      	str	r3, [r7, #24]
 8008aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d111      	bne.n	8008b18 <USB_EPStartXfer+0x3e4>
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	881a      	ldrh	r2, [r3, #0]
 8008af8:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8008afc:	4013      	ands	r3, r2
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	801a      	strh	r2, [r3, #0]
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	881b      	ldrh	r3, [r3, #0]
 8008b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	801a      	strh	r2, [r3, #0]
 8008b16:	e038      	b.n	8008b8a <USB_EPStartXfer+0x456>
 8008b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b1a:	2b3d      	cmp	r3, #61	; 0x3d
 8008b1c:	d811      	bhi.n	8008b42 <USB_EPStartXfer+0x40e>
 8008b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b20:	085b      	lsrs	r3, r3, #1
 8008b22:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d002      	beq.n	8008b34 <USB_EPStartXfer+0x400>
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b30:	3301      	adds	r3, #1
 8008b32:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	029b      	lsls	r3, r3, #10
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	801a      	strh	r2, [r3, #0]
 8008b40:	e023      	b.n	8008b8a <USB_EPStartXfer+0x456>
 8008b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b44:	095b      	lsrs	r3, r3, #5
 8008b46:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	029b      	lsls	r3, r3, #10
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	801a      	strh	r2, [r3, #0]
 8008b5e:	e014      	b.n	8008b8a <USB_EPStartXfer+0x456>
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	785b      	ldrb	r3, [r3, #1]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d110      	bne.n	8008b8a <USB_EPStartXfer+0x456>
 8008b68:	687c      	ldr	r4, [r7, #4]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	441c      	add	r4, r3
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	00db      	lsls	r3, r3, #3
 8008b7a:	4423      	add	r3, r4
 8008b7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b80:	617b      	str	r3, [r7, #20]
 8008b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	801a      	strh	r2, [r3, #0]
 8008b8a:	687c      	ldr	r4, [r7, #4]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	785b      	ldrb	r3, [r3, #1]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d14c      	bne.n	8008c2e <USB_EPStartXfer+0x4fa>
 8008b94:	687c      	ldr	r4, [r7, #4]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	441c      	add	r4, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	00db      	lsls	r3, r3, #3
 8008ba6:	4423      	add	r3, r4
 8008ba8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008bac:	613b      	str	r3, [r7, #16]
 8008bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d111      	bne.n	8008bd8 <USB_EPStartXfer+0x4a4>
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	881a      	ldrh	r2, [r3, #0]
 8008bb8:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	801a      	strh	r2, [r3, #0]
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	881b      	ldrh	r3, [r3, #0]
 8008bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	801a      	strh	r2, [r3, #0]
 8008bd6:	e03e      	b.n	8008c56 <USB_EPStartXfer+0x522>
 8008bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bda:	2b3d      	cmp	r3, #61	; 0x3d
 8008bdc:	d818      	bhi.n	8008c10 <USB_EPStartXfer+0x4dc>
 8008bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008be0:	085b      	lsrs	r3, r3, #1
 8008be2:	637b      	str	r3, [r7, #52]	; 0x34
 8008be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <USB_EPStartXfer+0x4c0>
 8008bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8008bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	029b      	lsls	r3, r3, #10
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	801a      	strh	r2, [r3, #0]
 8008c00:	e029      	b.n	8008c56 <USB_EPStartXfer+0x522>
 8008c02:	bf00      	nop
 8008c04:	ffff80c0 	.word	0xffff80c0
 8008c08:	ffffc080 	.word	0xffffc080
 8008c0c:	ffff8080 	.word	0xffff8080
 8008c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c12:	095b      	lsrs	r3, r3, #5
 8008c14:	637b      	str	r3, [r7, #52]	; 0x34
 8008c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	029b      	lsls	r3, r3, #10
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	801a      	strh	r2, [r3, #0]
 8008c2c:	e013      	b.n	8008c56 <USB_EPStartXfer+0x522>
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	785b      	ldrb	r3, [r3, #1]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d10f      	bne.n	8008c56 <USB_EPStartXfer+0x522>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	441c      	add	r4, r3
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	00db      	lsls	r3, r3, #3
 8008c46:	4423      	add	r3, r4
 8008c48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c4c:	60fb      	str	r3, [r7, #12]
 8008c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c6c:	b29c      	uxth	r4, r3
 8008c6e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008c72:	b29c      	uxth	r4, r3
 8008c74:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008c78:	b29c      	uxth	r4, r3
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	441a      	add	r2, r3
 8008c84:	4b04      	ldr	r3, [pc, #16]	; (8008c98 <USB_EPStartXfer+0x564>)
 8008c86:	4323      	orrs	r3, r4
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3754      	adds	r7, #84	; 0x54
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd90      	pop	{r4, r7, pc}
 8008c96:	bf00      	nop
 8008c98:	ffff8080 	.word	0xffff8080

08008c9c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c9c:	b490      	push	{r4, r7}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	785b      	ldrb	r3, [r3, #1]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d018      	beq.n	8008ce0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	881b      	ldrh	r3, [r3, #0]
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cc4:	b29c      	uxth	r4, r3
 8008cc6:	f084 0310 	eor.w	r3, r4, #16
 8008cca:	b29c      	uxth	r4, r3
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	441a      	add	r2, r3
 8008cd6:	4b11      	ldr	r3, [pc, #68]	; (8008d1c <USB_EPSetStall+0x80>)
 8008cd8:	4323      	orrs	r3, r4
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	8013      	strh	r3, [r2, #0]
 8008cde:	e017      	b.n	8008d10 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4413      	add	r3, r2
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cf6:	b29c      	uxth	r4, r3
 8008cf8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008cfc:	b29c      	uxth	r4, r3
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	441a      	add	r2, r3
 8008d08:	4b04      	ldr	r3, [pc, #16]	; (8008d1c <USB_EPSetStall+0x80>)
 8008d0a:	4323      	orrs	r3, r4
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bc90      	pop	{r4, r7}
 8008d1a:	4770      	bx	lr
 8008d1c:	ffff8080 	.word	0xffff8080

08008d20 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d20:	b490      	push	{r4, r7}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	785b      	ldrb	r3, [r3, #1]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d03c      	beq.n	8008dac <USB_EPClearStall+0x8c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	881b      	ldrh	r3, [r3, #0]
 8008d3e:	b29c      	uxth	r4, r3
 8008d40:	4623      	mov	r3, r4
 8008d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d014      	beq.n	8008d74 <USB_EPClearStall+0x54>
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d60:	b29c      	uxth	r4, r3
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	441a      	add	r2, r3
 8008d6c:	4b30      	ldr	r3, [pc, #192]	; (8008e30 <USB_EPClearStall+0x110>)
 8008d6e:	4323      	orrs	r3, r4
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	4413      	add	r3, r2
 8008d7e:	881b      	ldrh	r3, [r3, #0]
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d8a:	b29c      	uxth	r4, r3
 8008d8c:	f084 0310 	eor.w	r3, r4, #16
 8008d90:	b29c      	uxth	r4, r3
 8008d92:	f084 0320 	eor.w	r3, r4, #32
 8008d96:	b29c      	uxth	r4, r3
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	441a      	add	r2, r3
 8008da2:	4b24      	ldr	r3, [pc, #144]	; (8008e34 <USB_EPClearStall+0x114>)
 8008da4:	4323      	orrs	r3, r4
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	8013      	strh	r3, [r2, #0]
 8008daa:	e03b      	b.n	8008e24 <USB_EPClearStall+0x104>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	881b      	ldrh	r3, [r3, #0]
 8008db8:	b29c      	uxth	r4, r3
 8008dba:	4623      	mov	r3, r4
 8008dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d014      	beq.n	8008dee <USB_EPClearStall+0xce>
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	4413      	add	r3, r2
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dda:	b29c      	uxth	r4, r3
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	441a      	add	r2, r3
 8008de6:	4b14      	ldr	r3, [pc, #80]	; (8008e38 <USB_EPClearStall+0x118>)
 8008de8:	4323      	orrs	r3, r4
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e04:	b29c      	uxth	r4, r3
 8008e06:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008e0a:	b29c      	uxth	r4, r3
 8008e0c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008e10:	b29c      	uxth	r4, r3
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	441a      	add	r2, r3
 8008e1c:	4b05      	ldr	r3, [pc, #20]	; (8008e34 <USB_EPClearStall+0x114>)
 8008e1e:	4323      	orrs	r3, r4
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bc90      	pop	{r4, r7}
 8008e2e:	4770      	bx	lr
 8008e30:	ffff80c0 	.word	0xffff80c0
 8008e34:	ffff8080 	.word	0xffff8080
 8008e38:	ffffc080 	.word	0xffffc080

08008e3c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	460b      	mov	r3, r1
 8008e46:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008e48:	78fb      	ldrb	r3, [r7, #3]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d103      	bne.n	8008e56 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2280      	movs	r2, #128	; 0x80
 8008e52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b083      	sub	sp, #12
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008ece:	68fb      	ldr	r3, [r7, #12]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3714      	adds	r7, #20
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b08d      	sub	sp, #52	; 0x34
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	4611      	mov	r1, r2
 8008f00:	461a      	mov	r2, r3
 8008f02:	460b      	mov	r3, r1
 8008f04:	80fb      	strh	r3, [r7, #6]
 8008f06:	4613      	mov	r3, r2
 8008f08:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f0a:	88bb      	ldrh	r3, [r7, #4]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	085b      	lsrs	r3, r3, #1
 8008f10:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f1a:	88fa      	ldrh	r2, [r7, #6]
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f24:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f2a:	e01b      	b.n	8008f64 <USB_WritePMA+0x70>
  {
    temp1 = (uint16_t) * pBuf;
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	3301      	adds	r3, #1
 8008f36:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 8008f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	021b      	lsls	r3, r3, #8
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	461a      	mov	r2, r3
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f50:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f54:	3302      	adds	r3, #2
 8008f56:	62bb      	str	r3, [r7, #40]	; 0x28

    if (PMA_ACCESS > 1U)
    {
      pdwVal++;
    }
    pBuf++;
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	3b01      	subs	r3, #1
 8008f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1e0      	bne.n	8008f2c <USB_WritePMA+0x38>
  }
}
 8008f6a:	bf00      	nop
 8008f6c:	3734      	adds	r7, #52	; 0x34
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr

08008f76 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b08b      	sub	sp, #44	; 0x2c
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	60f8      	str	r0, [r7, #12]
 8008f7e:	60b9      	str	r1, [r7, #8]
 8008f80:	4611      	mov	r1, r2
 8008f82:	461a      	mov	r2, r3
 8008f84:	460b      	mov	r3, r1
 8008f86:	80fb      	strh	r3, [r7, #6]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008f8c:	88bb      	ldrh	r3, [r7, #4]
 8008f8e:	085b      	lsrs	r3, r3, #1
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f9c:	88fa      	ldrh	r2, [r7, #6]
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fa6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	627b      	str	r3, [r7, #36]	; 0x24
 8008fac:	e017      	b.n	8008fde <USB_ReadPMA+0x68>
  {
    temp = *pdwVal;
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008fb4:	6a3b      	ldr	r3, [r7, #32]
 8008fb6:	3302      	adds	r3, #2
 8008fb8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	0a1b      	lsrs	r3, r3, #8
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8008fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1e4      	bne.n	8008fae <USB_ReadPMA+0x38>
    {
      pdwVal++;
    }
  }

  if ((wNBytes % 2U) != 0U)
 8008fe4:	88bb      	ldrh	r3, [r7, #4]
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00c      	beq.n	800900a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	881b      	ldrh	r3, [r3, #0]
 8008ff4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	3302      	adds	r3, #2
 8008ffa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	b2da      	uxtb	r2, r3
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	3301      	adds	r3, #1
 8009008:	61fb      	str	r3, [r7, #28]
  }
}
 800900a:	bf00      	nop
 800900c:	372c      	adds	r7, #44	; 0x2c
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <dmx_registerCallback>:
* Variable Declarations
*******************************************************************************/
/******************************************************************************
* Function Definitions
*******************************************************************************/
void dmx_registerCallback(dmx_cfg_Instance *dmx, dmx_cfg_callback callback){
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	6039      	str	r1, [r7, #0]
	dmx->callback = callback;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	655a      	str	r2, [r3, #84]	; 0x54
}
 8009026:	bf00      	nop
 8009028:	370c      	adds	r7, #12
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
	...

08009034 <dmx_init>:

void dmx_init(dmx_cfg_Instance *dmx){
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
	if(dmx->type == dmx_cfg_TYPE_TRANSMITTER){
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d126      	bne.n	8009092 <dmx_init+0x5e>
		gpio_ConfigureToFloating(dmx->txBreakPort, dmx->txBreakPin);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	685a      	ldr	r2, [r3, #4]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	891b      	ldrh	r3, [r3, #8]
 800904c:	4619      	mov	r1, r3
 800904e:	4610      	mov	r0, r2
 8009050:	f002 f9a0 	bl	800b394 <gpio_ConfigureToFloating>
		dmx->txState = dmx_cfg_TX_STATE_NONE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	705a      	strb	r2, [r3, #1]
		dmx->txBreakToBreakCnt = 0;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	621a      	str	r2, [r3, #32]
		dmx->txBreakToBreakTime_ms = dmx->txBreakToBreakTime_ms + (dmx->txBreakTime_us + dmx->txMarkAfterBreakTime_us + dmx->txMarkBetweenTime_us*dmx->universeSize)/1000;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	69da      	ldr	r2, [r3, #28]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6919      	ldr	r1, [r3, #16]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	695b      	ldr	r3, [r3, #20]
 800906c:	4419      	add	r1, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
 8009078:	fb00 f303 	mul.w	r3, r0, r3
 800907c:	440b      	add	r3, r1
 800907e:	4911      	ldr	r1, [pc, #68]	; (80090c4 <dmx_init+0x90>)
 8009080:	fb81 0103 	smull	r0, r1, r1, r3
 8009084:	1189      	asrs	r1, r1, #6
 8009086:	17db      	asrs	r3, r3, #31
 8009088:	1acb      	subs	r3, r1, r3
 800908a:	441a      	add	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	61da      	str	r2, [r3, #28]
 8009090:	e010      	b.n	80090b4 <dmx_init+0x80>
	}else if(dmx->type == dmx_cfg_TYPE_RECEIVER){
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	2b01      	cmp	r3, #1
 8009098:	d10c      	bne.n	80090b4 <dmx_init+0x80>
		dmx->rxState = dmx_cfg_RX_STATE_NONE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		dmx->rxFallingTime = 0;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	631a      	str	r2, [r3, #48]	; 0x30
		dmx->rxRisingTime = 0;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	635a      	str	r2, [r3, #52]	; 0x34
		dmx->rxTimerUpdateCnt = 0;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	641a      	str	r2, [r3, #64]	; 0x40
	}
	dmx->universeCnt = 0;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 80090bc:	bf00      	nop
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	10624dd3 	.word	0x10624dd3

080090c8 <dmx_loop>:

void dmx_loop(dmx_cfg_Instance *dmx){
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
	if(dmx->type == dmx_cfg_TYPE_TRANSMITTER){
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10e      	bne.n	80090f6 <dmx_loop+0x2e>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	785b      	ldrb	r3, [r3, #1]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d029      	beq.n	8009134 <dmx_loop+0x6c>
		if(dmx->txBreakToBreakCnt == 0){
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a1b      	ldr	r3, [r3, #32]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d106      	bne.n	80090f6 <dmx_loop+0x2e>
			dmx_sendStart(dmx);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f83a 	bl	8009162 <dmx_sendStart>
			dmx->txBreakToBreakCnt = dmx->txBreakToBreakTime_ms;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	69da      	ldr	r2, [r3, #28]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	621a      	str	r2, [r3, #32]
		}
	}else if(dmx->type == dmx_cfg_TYPE_RECEIVER){
	}
	/*Loop flags*/
	if(dmx->universeComplete){
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d01a      	beq.n	8009136 <dmx_loop+0x6e>
		dmx->universeComplete = false;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
		if(dmx->type == dmx_cfg_TYPE_TRANSMITTER) dmx->callbackType = dmx_cfg_CALL_TX_COMPLETE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d104      	bne.n	800911a <dmx_loop+0x52>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8009118:	e003      	b.n	8009122 <dmx_loop+0x5a>
		else dmx->callbackType = dmx_cfg_CALL_RX_COMPLETE;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2201      	movs	r2, #1
 800911e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		if(dmx->callback) dmx->callback(dmx);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009126:	2b00      	cmp	r3, #0
 8009128:	d005      	beq.n	8009136 <dmx_loop+0x6e>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	4798      	blx	r3
 8009132:	e000      	b.n	8009136 <dmx_loop+0x6e>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8009134:	bf00      	nop
	}
}
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <dmx_1ms>:

void dmx_1ms(dmx_cfg_Instance *dmx){
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
	if(dmx->txBreakToBreakCnt > 0) --dmx->txBreakToBreakCnt;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6a1b      	ldr	r3, [r3, #32]
 8009148:	2b00      	cmp	r3, #0
 800914a:	dd04      	ble.n	8009156 <dmx_1ms+0x1a>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a1b      	ldr	r3, [r3, #32]
 8009150:	1e5a      	subs	r2, r3, #1
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	621a      	str	r2, [r3, #32]
}
 8009156:	bf00      	nop
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <dmx_sendStart>:

void dmx_sendStart(dmx_cfg_Instance *dmx){
 8009162:	b580      	push	{r7, lr}
 8009164:	b082      	sub	sp, #8
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d130      	bne.n	80091d4 <dmx_sendStart+0x72>
	if(dmx->universe == NULL) return;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009176:	2b00      	cmp	r3, #0
 8009178:	d02e      	beq.n	80091d8 <dmx_sendStart+0x76>
	if(dmx->txBreakToBreakTime_ms < dmx_cfg_MIN_BREAK_TO_BREAK_TIME_MS) dmx->txBreakToBreakTime_ms = dmx_cfg_MIN_BREAK_TO_BREAK_TIME_MS;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	69db      	ldr	r3, [r3, #28]
 800917e:	2b18      	cmp	r3, #24
 8009180:	dc02      	bgt.n	8009188 <dmx_sendStart+0x26>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2219      	movs	r2, #25
 8009186:	61da      	str	r2, [r3, #28]
	if(dmx->txBreakTime_us < dmx_cfg_MIN_BREAK_TIME_US) dmx->txBreakTime_us = dmx_cfg_MIN_BREAK_TIME_US;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	2b5f      	cmp	r3, #95	; 0x5f
 800918e:	dc02      	bgt.n	8009196 <dmx_sendStart+0x34>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2260      	movs	r2, #96	; 0x60
 8009194:	611a      	str	r2, [r3, #16]
	if(dmx->txMarkAfterBreakTime_us < dmx_cfg_MIN_MARK_AFTER_BREAK_TIME_US) dmx->txMarkAfterBreakTime_us = dmx_cfg_MIN_MARK_AFTER_BREAK_TIME_US;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	2b0b      	cmp	r3, #11
 800919c:	dc02      	bgt.n	80091a4 <dmx_sendStart+0x42>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	220c      	movs	r2, #12
 80091a2:	615a      	str	r2, [r3, #20]
	dmx->universeComplete = false;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	dmx->txState = dmx_cfg_TX_STATE_SEND_BREAK;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2202      	movs	r2, #2
 80091b0:	705a      	strb	r2, [r3, #1]
	tim_setNewTimeAndStart(dmx->txTimer, dmx->txBreakTime_us);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68da      	ldr	r2, [r3, #12]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	4619      	mov	r1, r3
 80091bc:	4610      	mov	r0, r2
 80091be:	f002 fde9 	bl	800bd94 <tim_setNewTimeAndStart>
	gpio_ConfigureToPushPull(dmx->txBreakPort, dmx->txBreakPin);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	891b      	ldrh	r3, [r3, #8]
 80091ca:	4619      	mov	r1, r3
 80091cc:	4610      	mov	r0, r2
 80091ce:	f002 f8ff 	bl	800b3d0 <gpio_ConfigureToPushPull>
 80091d2:	e002      	b.n	80091da <dmx_sendStart+0x78>
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 80091d4:	bf00      	nop
 80091d6:	e000      	b.n	80091da <dmx_sendStart+0x78>
	if(dmx->universe == NULL) return;
 80091d8:	bf00      	nop
}
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <dmx_txStart>:
	else if(timeIdx == dmx_cfg_TIME_MARK_AFTER_BREAK) dmx->txMarkAfterBreakTime_us = time_us;
	else if(timeIdx == dmx_cfg_TIME_MARK_BETWEEN) dmx->txMarkBetweenTime_us = time_us;
	else if(timeIdx == dmx_cfg_TIME_BREAK_TO_BREAK) dmx->txBreakToBreakTime_ms = (time_us + dmx->txBreakTime_us + dmx->txMarkAfterBreakTime_us + dmx->txMarkBetweenTime_us*dmx->universeSize)/1000;
}

void dmx_txStart(dmx_cfg_Instance *dmx){
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d103      	bne.n	80091f8 <dmx_txStart+0x18>
	dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	705a      	strb	r2, [r3, #1]
 80091f6:	e000      	b.n	80091fa <dmx_txStart+0x1a>
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 80091f8:	bf00      	nop
}
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <dmx_rxStart>:
void dmx_txStop(dmx_cfg_Instance *dmx){
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
	dmx->txState = dmx_cfg_TX_STATE_NONE;
}

void dmx_rxStart(dmx_cfg_Instance *dmx){
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_RECEIVER) return;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d109      	bne.n	8009228 <dmx_rxStart+0x24>
	app_uart_enableReceiveInt(dmx->uart);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009218:	4618      	mov	r0, r3
 800921a:	f7f9 fe98 	bl	8002f4e <app_uart_enableReceiveInt>
	dmx->rxState = dmx_cfg_RX_STATE_WAIT_FOR_BREAK;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009226:	e000      	b.n	800922a <dmx_rxStart+0x26>
	if(dmx->type != dmx_cfg_TYPE_RECEIVER) return;
 8009228:	bf00      	nop
}
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <dmx_irqTxTimerHandler>:
void dmx_incrementRxUpdateCnt(dmx_cfg_Instance *dmx){
	++dmx->rxTimerUpdateCnt;
}

/*Transmit IRQs*/
void dmx_irqTxTimerHandler(dmx_cfg_Instance *dmx){
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
	if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	785b      	ldrb	r3, [r3, #1]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d05c      	beq.n	80092fa <dmx_irqTxTimerHandler+0xca>
	if(dmx->txState == dmx_cfg_TX_STATE_SEND_BREAK){
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	785b      	ldrb	r3, [r3, #1]
 8009244:	2b02      	cmp	r3, #2
 8009246:	d113      	bne.n	8009270 <dmx_irqTxTimerHandler+0x40>
		gpio_ConfigureToFloating(dmx->txBreakPort, dmx->txBreakPin);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	685a      	ldr	r2, [r3, #4]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	891b      	ldrh	r3, [r3, #8]
 8009250:	4619      	mov	r1, r3
 8009252:	4610      	mov	r0, r2
 8009254:	f002 f89e 	bl	800b394 <gpio_ConfigureToFloating>
		tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkAfterBreakTime_us);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	68da      	ldr	r2, [r3, #12]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	695b      	ldr	r3, [r3, #20]
 8009260:	4619      	mov	r1, r3
 8009262:	4610      	mov	r0, r2
 8009264:	f002 fd96 	bl	800bd94 <tim_setNewTimeAndStart>
		dmx->txState = dmx_cfg_TX_STATE_SEND_MARK;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2203      	movs	r2, #3
 800926c:	705a      	strb	r2, [r3, #1]
 800926e:	e045      	b.n	80092fc <dmx_irqTxTimerHandler+0xcc>
	}else if(dmx->txState == dmx_cfg_TX_STATE_SEND_MARK){
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	785b      	ldrb	r3, [r3, #1]
 8009274:	2b03      	cmp	r3, #3
 8009276:	d133      	bne.n	80092e0 <dmx_irqTxTimerHandler+0xb0>
		dmx->universeCnt = 0;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		dmx->uart->CR1 &= ~USART_CR1_TXEIE;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009288:	6812      	ldr	r2, [r2, #0]
 800928a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800928e:	601a      	str	r2, [r3, #0]
		dmx->uart->TDR = dmx->universeStartCode;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800929a:	b292      	uxth	r2, r2
 800929c:	851a      	strh	r2, [r3, #40]	; 0x28
		if(dmx->txMarkBetweenTime_us == 0) {
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	699b      	ldr	r3, [r3, #24]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d110      	bne.n	80092c8 <dmx_irqTxTimerHandler+0x98>
			dmx->uart->CR1 |= USART_CR1_TXEIE;		//start with transmission --> enable transmitbuffer empty interrupt
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80092ae:	6812      	ldr	r2, [r2, #0]
 80092b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80092b4:	601a      	str	r2, [r3, #0]
			tim_stop(dmx->txTimer);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	4618      	mov	r0, r3
 80092bc:	f002 fda2 	bl	800be04 <tim_stop>
			dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;	//The whole universe can be transmitted as fast as possible
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	705a      	strb	r2, [r3, #1]
 80092c6:	e019      	b.n	80092fc <dmx_irqTxTimerHandler+0xcc>
		}
		else{
			tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkBetweenTime_us);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	68da      	ldr	r2, [r3, #12]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	4619      	mov	r1, r3
 80092d2:	4610      	mov	r0, r2
 80092d4:	f002 fd5e 	bl	800bd94 <tim_setNewTimeAndStart>
			dmx->txState = dmx_cfg_TX_STATE_SEND_UNIVERSE;	//The universe can be transmitted with defined delay between all data bytes
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2205      	movs	r2, #5
 80092dc:	705a      	strb	r2, [r3, #1]
 80092de:	e00d      	b.n	80092fc <dmx_irqTxTimerHandler+0xcc>
		}
	}else if(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE){
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	785b      	ldrb	r3, [r3, #1]
 80092e4:	2b05      	cmp	r3, #5
 80092e6:	d109      	bne.n	80092fc <dmx_irqTxTimerHandler+0xcc>
		dmx->uart->CR1 |= USART_CR1_TXEIE;		//start with transmission --> enable transmitbuffer empty interrupt
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80092f0:	6812      	ldr	r2, [r2, #0]
 80092f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80092f6:	601a      	str	r2, [r3, #0]
 80092f8:	e000      	b.n	80092fc <dmx_irqTxTimerHandler+0xcc>
	if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 80092fa:	bf00      	nop
	}
}
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <dmx_irqTxInterfaceHandler>:

void dmx_irqTxInterfaceHandler(dmx_cfg_Instance *dmx){
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
	if (dmx->uart->ISR & USART_ISR_TXE){				//transmit dmx values
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800930e:	69db      	ldr	r3, [r3, #28]
 8009310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009314:	2b00      	cmp	r3, #0
 8009316:	d066      	beq.n	80093e6 <dmx_irqTxInterfaceHandler+0xe4>
		dmx->uart->ISR &= ~USART_ISR_TXE; //Kill transmit-buffer empty flag
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009320:	69d2      	ldr	r2, [r2, #28]
 8009322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009326:	61da      	str	r2, [r3, #28]
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	785b      	ldrb	r3, [r3, #1]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d059      	beq.n	80093e4 <dmx_irqTxInterfaceHandler+0xe2>
		if((dmx->txState == dmx_cfg_TX_STATE_WAIT_FOR_BREAK)||(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE)){
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	785b      	ldrb	r3, [r3, #1]
 8009334:	2b01      	cmp	r3, #1
 8009336:	d003      	beq.n	8009340 <dmx_irqTxInterfaceHandler+0x3e>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	785b      	ldrb	r3, [r3, #1]
 800933c:	2b05      	cmp	r3, #5
 800933e:	d152      	bne.n	80093e6 <dmx_irqTxInterfaceHandler+0xe4>
			if(dmx->universeCnt < dmx->universeSize){
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800934c:	429a      	cmp	r2, r3
 800934e:	d230      	bcs.n	80093b2 <dmx_irqTxInterfaceHandler+0xb0>
				dmx->uart->CR1 &= ~USART_CR1_TXEIE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009358:	6812      	ldr	r2, [r2, #0]
 800935a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800935e:	601a      	str	r2, [r3, #0]
				dmx->uart->TDR = dmx->universe[dmx->universeCnt];
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009368:	6879      	ldr	r1, [r7, #4]
 800936a:	f8b1 1050 	ldrh.w	r1, [r1, #80]	; 0x50
 800936e:	440a      	add	r2, r1
 8009370:	7812      	ldrb	r2, [r2, #0]
 8009372:	b292      	uxth	r2, r2
 8009374:	851a      	strh	r2, [r3, #40]	; 0x28
				dmx->universeCnt++;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800937c:	3301      	adds	r3, #1
 800937e:	b29a      	uxth	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				if(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE) tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkBetweenTime_us);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	785b      	ldrb	r3, [r3, #1]
 800938a:	2b05      	cmp	r3, #5
 800938c:	d108      	bne.n	80093a0 <dmx_irqTxInterfaceHandler+0x9e>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68da      	ldr	r2, [r3, #12]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	4619      	mov	r1, r3
 8009398:	4610      	mov	r0, r2
 800939a:	f002 fcfb 	bl	800bd94 <tim_setNewTimeAndStart>
 800939e:	e022      	b.n	80093e6 <dmx_irqTxInterfaceHandler+0xe4>
				else dmx->uart->CR1 |= USART_CR1_TXEIE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80093a8:	6812      	ldr	r2, [r2, #0]
 80093aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80093ae:	601a      	str	r2, [r3, #0]
 80093b0:	e019      	b.n	80093e6 <dmx_irqTxInterfaceHandler+0xe4>
			}else{
				dmx->universeCnt = 0;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				dmx->uart->CR1 &= ~USART_CR1_TXEIE;	//disable transmit-buffer empty interrupt
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80093c2:	6812      	ldr	r2, [r2, #0]
 80093c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093c8:	601a      	str	r2, [r3, #0]
				dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	705a      	strb	r2, [r3, #1]
				tim_stop(dmx->txTimer);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f002 fd15 	bl	800be04 <tim_stop>
				dmx->universeComplete = true;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80093e2:	e000      	b.n	80093e6 <dmx_irqTxInterfaceHandler+0xe4>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 80093e4:	bf00      	nop
			}
		}

	}
}
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <dmx_irqRxInterfaceHandler>:
/*Receive IRQs*/
void dmx_irqRxTimerHandler(dmx_cfg_Instance *dmx){
//TODO: Add measurement of break
}

void dmx_irqRxInterfaceHandler(dmx_cfg_Instance *dmx){
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
	uint32_t sr = dmx->uart->ISR;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093f8:	69db      	ldr	r3, [r3, #28]
 80093fa:	60fb      	str	r3, [r7, #12]
	if (sr & USART_ISR_RXNE){
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f003 0320 	and.w	r3, r3, #32
 8009402:	2b00      	cmp	r3, #0
 8009404:	d065      	beq.n	80094d2 <dmx_irqRxInterfaceHandler+0xe6>
		if(sr & USART_ISR_ORE) dmx->uart->ICR |= USART_ICR_ORECF; /*Kill overrun error*/
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f003 0308 	and.w	r3, r3, #8
 800940c:	2b00      	cmp	r3, #0
 800940e:	d007      	beq.n	8009420 <dmx_irqRxInterfaceHandler+0x34>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009418:	6a12      	ldr	r2, [r2, #32]
 800941a:	f042 0208 	orr.w	r2, r2, #8
 800941e:	621a      	str	r2, [r3, #32]
		uint8_t  dmxByte = (uint8_t)dmx->uart->RDR;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009424:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009426:	b29b      	uxth	r3, r3
 8009428:	72fb      	strb	r3, [r7, #11]
		if(dmx->rxState == dmx_cfg_RX_STATE_NONE) return;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009430:	2b00      	cmp	r3, #0
 8009432:	d04d      	beq.n	80094d0 <dmx_irqRxInterfaceHandler+0xe4>
		if(sr & USART_ISR_FE){	/*Frame error*/
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f003 0302 	and.w	r3, r3, #2
 800943a:	2b00      	cmp	r3, #0
 800943c:	d014      	beq.n	8009468 <dmx_irqRxInterfaceHandler+0x7c>
			dmx->uart->ICR |= USART_ICR_FECF; /*Kill frame error*/
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009446:	6a12      	ldr	r2, [r2, #32]
 8009448:	f042 0202 	orr.w	r2, r2, #2
 800944c:	621a      	str	r2, [r3, #32]
			dmx->universeCnt = 0;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			dmx->rxState = dmx_cfg_RX_STATE_RECEIVE_START_CODE;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2203      	movs	r2, #3
 800945a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			dmx->universeComplete = false;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8009466:	e034      	b.n	80094d2 <dmx_irqRxInterfaceHandler+0xe6>
		}else if(dmx->rxState == dmx_cfg_RX_STATE_RECEIVE_START_CODE){
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800946e:	2b03      	cmp	r3, #3
 8009470:	d108      	bne.n	8009484 <dmx_irqRxInterfaceHandler+0x98>
			dmx->rxState = dmx_cfg_RX_STATE_RECEIVE_UNIVERSE;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2204      	movs	r2, #4
 8009476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			dmx->universeStartCode = dmxByte;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	7afa      	ldrb	r2, [r7, #11]
 800947e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8009482:	e026      	b.n	80094d2 <dmx_irqRxInterfaceHandler+0xe6>
		}else if(dmx->rxState == dmx_cfg_RX_STATE_RECEIVE_UNIVERSE){
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800948a:	2b04      	cmp	r3, #4
 800948c:	d121      	bne.n	80094d2 <dmx_irqRxInterfaceHandler+0xe6>
			dmx->universe[dmx->universeCnt] = dmxByte;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8009498:	4413      	add	r3, r2
 800949a:	7afa      	ldrb	r2, [r7, #11]
 800949c:	701a      	strb	r2, [r3, #0]
			dmx->universeCnt++;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094a4:	3301      	adds	r3, #1
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			if(dmx->universeCnt >= dmx->universeSize){
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d309      	bcc.n	80094d2 <dmx_irqRxInterfaceHandler+0xe6>
				dmx->universeComplete = true;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2201      	movs	r2, #1
 80094c2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
				dmx->rxState = dmx_cfg_RX_STATE_WAIT_FOR_BREAK;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2201      	movs	r2, #1
 80094ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80094ce:	e000      	b.n	80094d2 <dmx_irqRxInterfaceHandler+0xe6>
		if(dmx->rxState == dmx_cfg_RX_STATE_NONE) return;
 80094d0:	bf00      	nop
			}
		}
	}
}
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <eeprom_registerCallback>:
static inline void readData(eeprom_cfg_Config *config, uint8_t *data, uint16_t dataSize);
static inline void callbackError(uint8_t type);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void eeprom_registerCallback(eeprom_cfg_Config *config, eeprom_cfg_callback callback){
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
	config->callback = callback;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	683a      	ldr	r2, [r7, #0]
 80094ea:	60da      	str	r2, [r3, #12]
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <eeprom_init>:
void eeprom_init(eeprom_cfg_Config *config){
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
	if(config->callback != NULL){
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d004      	beq.n	8009512 <eeprom_init+0x1a>
		config->maxAddress = config->memorySize >> 3; /*Convert Bit to Byte*/
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	08da      	lsrs	r2, r3, #3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	611a      	str	r2, [r3, #16]
	}
}
 8009512:	bf00      	nop
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <eeprom_write>:

void eeprom_write(eeprom_cfg_Config *config, uint16_t startAddr, uint8_t *data, uint16_t dataSize){
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	607a      	str	r2, [r7, #4]
 8009528:	461a      	mov	r2, r3
 800952a:	460b      	mov	r3, r1
 800952c:	817b      	strh	r3, [r7, #10]
 800952e:	4613      	mov	r3, r2
 8009530:	813b      	strh	r3, [r7, #8]
	if(writeValidation(config, startAddr, data, dataSize) == OK){
 8009532:	893b      	ldrh	r3, [r7, #8]
 8009534:	8979      	ldrh	r1, [r7, #10]
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f000 f89d 	bl	8009678 <writeValidation>
 800953e:	4603      	mov	r3, r0
 8009540:	2b01      	cmp	r3, #1
 8009542:	d10a      	bne.n	800955a <eeprom_write+0x3c>
		writeStartAddr(config, startAddr);
 8009544:	897b      	ldrh	r3, [r7, #10]
 8009546:	4619      	mov	r1, r3
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 f84a 	bl	80095e2 <writeStartAddr>
		writeData(config, data, dataSize);
 800954e:	893b      	ldrh	r3, [r7, #8]
 8009550:	461a      	mov	r2, r3
 8009552:	6879      	ldr	r1, [r7, #4]
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f000 f853 	bl	8009600 <writeData>
	}
}
 800955a:	bf00      	nop
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <eeprom_read>:

void eeprom_read(eeprom_cfg_Config *config, uint16_t startAddr, uint8_t *data, uint16_t dataSize){
 8009562:	b580      	push	{r7, lr}
 8009564:	b084      	sub	sp, #16
 8009566:	af00      	add	r7, sp, #0
 8009568:	60f8      	str	r0, [r7, #12]
 800956a:	607a      	str	r2, [r7, #4]
 800956c:	461a      	mov	r2, r3
 800956e:	460b      	mov	r3, r1
 8009570:	817b      	strh	r3, [r7, #10]
 8009572:	4613      	mov	r3, r2
 8009574:	813b      	strh	r3, [r7, #8]
	if(readValidation(config, startAddr, data, dataSize) == OK){
 8009576:	893b      	ldrh	r3, [r7, #8]
 8009578:	8979      	ldrh	r1, [r7, #10]
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f000 f8a8 	bl	80096d2 <readValidation>
 8009582:	4603      	mov	r3, r0
 8009584:	2b01      	cmp	r3, #1
 8009586:	d10a      	bne.n	800959e <eeprom_read+0x3c>
		writeStartAddr(config, startAddr);
 8009588:	897b      	ldrh	r3, [r7, #10]
 800958a:	4619      	mov	r1, r3
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 f828 	bl	80095e2 <writeStartAddr>
		readData(config, data, dataSize);
 8009592:	893b      	ldrh	r3, [r7, #8]
 8009594:	461a      	mov	r2, r3
 8009596:	6879      	ldr	r1, [r7, #4]
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f000 f84f 	bl	800963c <readData>
	}
}
 800959e:	bf00      	nop
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <eeprom_isFree>:

bool eeprom_isFree(eeprom_cfg_Config *config){
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b084      	sub	sp, #16
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
	config->dataSize = 0;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	615a      	str	r2, [r3, #20]
	uint8_t dummyData = 0xFF;
 80095b4:	23ff      	movs	r3, #255	; 0xff
 80095b6:	73fb      	strb	r3, [r7, #15]
	config->txBuffer = &dummyData;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f107 020f 	add.w	r2, r7, #15
 80095be:	61da      	str	r2, [r3, #28]
	config->callbackType = EEPROM_CFG_CALL_CHECK_TX_STATE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2204      	movs	r2, #4
 80095c4:	729a      	strb	r2, [r3, #10]
	if(config->callback(config) != OK) return false;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	4798      	blx	r3
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d001      	beq.n	80095d8 <eeprom_isFree+0x32>
 80095d4:	2300      	movs	r3, #0
 80095d6:	e000      	b.n	80095da <eeprom_isFree+0x34>
	else return true;
 80095d8:	2301      	movs	r3, #1
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <writeStartAddr>:


static inline void writeStartAddr(eeprom_cfg_Config *config, uint16_t startAddr){
 80095e2:	b480      	push	{r7}
 80095e4:	b083      	sub	sp, #12
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	460b      	mov	r3, r1
 80095ec:	807b      	strh	r3, [r7, #2]
	config->memAddr = startAddr;
 80095ee:	887a      	ldrh	r2, [r7, #2]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	619a      	str	r2, [r3, #24]
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <writeData>:

static inline void writeData(eeprom_cfg_Config *config, uint8_t *data, uint16_t dataSize){
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	4613      	mov	r3, r2
 800960c:	80fb      	strh	r3, [r7, #6]
	config->dataSize = dataSize;
 800960e:	88fa      	ldrh	r2, [r7, #6]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	615a      	str	r2, [r3, #20]
	config->txBuffer = data;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	68ba      	ldr	r2, [r7, #8]
 8009618:	61da      	str	r2, [r3, #28]
	config->callbackType = EEPROM_CFG_CALL_TX_START;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	729a      	strb	r2, [r3, #10]
	if(config->callback(config) != OK) callbackError(EEPROM_CFG_CALL_TX_ERROR);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	4798      	blx	r3
 8009628:	4603      	mov	r3, r0
 800962a:	2b01      	cmp	r3, #1
 800962c:	d002      	beq.n	8009634 <writeData+0x34>
 800962e:	2002      	movs	r0, #2
 8009630:	f000 f875 	bl	800971e <callbackError>
}
 8009634:	bf00      	nop
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <readData>:

static inline void readData(eeprom_cfg_Config *config, uint8_t *data, uint16_t dataSize){
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	4613      	mov	r3, r2
 8009648:	80fb      	strh	r3, [r7, #6]
	config->dataSize = dataSize;
 800964a:	88fa      	ldrh	r2, [r7, #6]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	615a      	str	r2, [r3, #20]
	config->rxBuffer = data;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	68ba      	ldr	r2, [r7, #8]
 8009654:	621a      	str	r2, [r3, #32]
	config->callbackType = EEPROM_CFG_CALL_RX_START;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2201      	movs	r2, #1
 800965a:	729a      	strb	r2, [r3, #10]
	if(config->callback(config) != OK) callbackError(EEPROM_CFG_CALL_RX_ERROR);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	4798      	blx	r3
 8009664:	4603      	mov	r3, r0
 8009666:	2b01      	cmp	r3, #1
 8009668:	d002      	beq.n	8009670 <readData+0x34>
 800966a:	2003      	movs	r0, #3
 800966c:	f000 f857 	bl	800971e <callbackError>
}
 8009670:	bf00      	nop
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <writeValidation>:

static inline uint8_t writeValidation(eeprom_cfg_Config *config, uint16_t startAddr, uint8_t *data, uint16_t dataSize){
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	607a      	str	r2, [r7, #4]
 8009682:	461a      	mov	r2, r3
 8009684:	460b      	mov	r3, r1
 8009686:	817b      	strh	r3, [r7, #10]
 8009688:	4613      	mov	r3, r2
 800968a:	813b      	strh	r3, [r7, #8]
	if(config->callback == NULL) return NOK;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d101      	bne.n	8009698 <writeValidation+0x20>
 8009694:	2300      	movs	r3, #0
 8009696:	e016      	b.n	80096c6 <writeValidation+0x4e>
	if(data == NULL) return NOK;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d101      	bne.n	80096a2 <writeValidation+0x2a>
 800969e:	2300      	movs	r3, #0
 80096a0:	e011      	b.n	80096c6 <writeValidation+0x4e>
	if((startAddr + dataSize) > config->maxAddress) return NOK;
 80096a2:	897a      	ldrh	r2, [r7, #10]
 80096a4:	893b      	ldrh	r3, [r7, #8]
 80096a6:	4413      	add	r3, r2
 80096a8:	461a      	mov	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d901      	bls.n	80096b6 <writeValidation+0x3e>
 80096b2:	2300      	movs	r3, #0
 80096b4:	e007      	b.n	80096c6 <writeValidation+0x4e>
	if(dataSize > config->pageBufferSize) return NOK;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	891b      	ldrh	r3, [r3, #8]
 80096ba:	893a      	ldrh	r2, [r7, #8]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d901      	bls.n	80096c4 <writeValidation+0x4c>
 80096c0:	2300      	movs	r3, #0
 80096c2:	e000      	b.n	80096c6 <writeValidation+0x4e>
	else return OK;
 80096c4:	2301      	movs	r3, #1
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <readValidation>:
static inline uint8_t readValidation(eeprom_cfg_Config *config, uint16_t startAddr, uint8_t *data, uint16_t dataSize){
 80096d2:	b480      	push	{r7}
 80096d4:	b085      	sub	sp, #20
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	60f8      	str	r0, [r7, #12]
 80096da:	607a      	str	r2, [r7, #4]
 80096dc:	461a      	mov	r2, r3
 80096de:	460b      	mov	r3, r1
 80096e0:	817b      	strh	r3, [r7, #10]
 80096e2:	4613      	mov	r3, r2
 80096e4:	813b      	strh	r3, [r7, #8]
	if(config->callback == NULL) return NOK;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d101      	bne.n	80096f2 <readValidation+0x20>
 80096ee:	2300      	movs	r3, #0
 80096f0:	e00f      	b.n	8009712 <readValidation+0x40>
	if(data == NULL) return NOK;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d101      	bne.n	80096fc <readValidation+0x2a>
 80096f8:	2300      	movs	r3, #0
 80096fa:	e00a      	b.n	8009712 <readValidation+0x40>
	if((startAddr + dataSize) > config->maxAddress) return NOK;
 80096fc:	897a      	ldrh	r2, [r7, #10]
 80096fe:	893b      	ldrh	r3, [r7, #8]
 8009700:	4413      	add	r3, r2
 8009702:	461a      	mov	r2, r3
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	429a      	cmp	r2, r3
 800970a:	d901      	bls.n	8009710 <readValidation+0x3e>
 800970c:	2300      	movs	r3, #0
 800970e:	e000      	b.n	8009712 <readValidation+0x40>
	else return OK;
 8009710:	2301      	movs	r3, #1
}
 8009712:	4618      	mov	r0, r3
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <callbackError>:

static inline void callbackError(uint8_t type){
 800971e:	b480      	push	{r7}
 8009720:	b083      	sub	sp, #12
 8009722:	af00      	add	r7, sp, #0
 8009724:	4603      	mov	r3, r0
 8009726:	71fb      	strb	r3, [r7, #7]
	//TODO: Do something with the error
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <isSimilarToLast>:
	message->origin = 0;
	message->value = 0;
	message->ctx = 0;
}

static inline uint8_t isSimilarToLast(msg_Message *message, msg_Buffer *buf){
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
	char type;
	uint16_t idx;
	if(RINGBUFFER_isEmpty(&buf->buffer)) return 0;
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	4618      	mov	r0, r3
 8009742:	f000 fa16 	bl	8009b72 <RINGBUFFER_isEmpty>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d001      	beq.n	8009750 <isSimilarToLast+0x1c>
 800974c:	2300      	movs	r3, #0
 800974e:	e039      	b.n	80097c4 <isSimilarToLast+0x90>
	uint16_t lastTmp = buf->lastMsg;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	899b      	ldrh	r3, [r3, #12]
 8009754:	81fb      	strh	r3, [r7, #14]
	type = buf->buffer.data[lastTmp];
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	689a      	ldr	r2, [r3, #8]
 800975a:	89fb      	ldrh	r3, [r7, #14]
 800975c:	4413      	add	r3, r2
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	737b      	strb	r3, [r7, #13]
	if(++lastTmp >= buf->buffer.size) lastTmp = 0;
 8009762:	89fb      	ldrh	r3, [r7, #14]
 8009764:	3301      	adds	r3, #1
 8009766:	81fb      	strh	r3, [r7, #14]
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	889b      	ldrh	r3, [r3, #4]
 800976c:	89fa      	ldrh	r2, [r7, #14]
 800976e:	429a      	cmp	r2, r3
 8009770:	d301      	bcc.n	8009776 <isSimilarToLast+0x42>
 8009772:	2300      	movs	r3, #0
 8009774:	81fb      	strh	r3, [r7, #14]
	idx = (buf->buffer.data[lastTmp] << 8) & 0xFF00;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	689a      	ldr	r2, [r3, #8]
 800977a:	89fb      	ldrh	r3, [r7, #14]
 800977c:	4413      	add	r3, r2
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	021b      	lsls	r3, r3, #8
 8009782:	817b      	strh	r3, [r7, #10]
	if(++lastTmp >= buf->buffer.size) lastTmp = 0;
 8009784:	89fb      	ldrh	r3, [r7, #14]
 8009786:	3301      	adds	r3, #1
 8009788:	81fb      	strh	r3, [r7, #14]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	889b      	ldrh	r3, [r3, #4]
 800978e:	89fa      	ldrh	r2, [r7, #14]
 8009790:	429a      	cmp	r2, r3
 8009792:	d301      	bcc.n	8009798 <isSimilarToLast+0x64>
 8009794:	2300      	movs	r3, #0
 8009796:	81fb      	strh	r3, [r7, #14]
	idx |= (buf->buffer.data[lastTmp] << 0) & 0xFF;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	689a      	ldr	r2, [r3, #8]
 800979c:	89fb      	ldrh	r3, [r7, #14]
 800979e:	4413      	add	r3, r2
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	897b      	ldrh	r3, [r7, #10]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	817b      	strh	r3, [r7, #10]
	if((type == message->type) && (idx == message->index)) return 1;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	791b      	ldrb	r3, [r3, #4]
 80097ae:	7b7a      	ldrb	r2, [r7, #13]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d106      	bne.n	80097c2 <isSimilarToLast+0x8e>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	897a      	ldrh	r2, [r7, #10]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d101      	bne.n	80097c2 <isSimilarToLast+0x8e>
 80097be:	2301      	movs	r3, #1
 80097c0:	e000      	b.n	80097c4 <isSimilarToLast+0x90>
	else return 0;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <writeMsg>:

static inline uint8_t writeMsg(msg_Message *message, msg_Buffer *buf){
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
	uint8_t bufferState =  ringbuffer_NO_BUF;
 80097d6:	2300      	movs	r3, #0
 80097d8:	73fb      	strb	r3, [r7, #15]
	uint8_t isSimilarActive = 0;
 80097da:	2300      	movs	r3, #0
 80097dc:	73bb      	strb	r3, [r7, #14]
	uint16_t nextMsgTmp = buf->buffer.in;
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	881b      	ldrh	r3, [r3, #0]
 80097e2:	81bb      	strh	r3, [r7, #12]
	if(message != NULL){
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d064      	beq.n	80098b4 <writeMsg+0xe8>
		if(isSimilarToLast(message, buf)){
 80097ea:	6839      	ldr	r1, [r7, #0]
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f7ff ffa1 	bl	8009734 <isSimilarToLast>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d005      	beq.n	8009804 <writeMsg+0x38>
			buf->buffer.in = buf->lastMsg;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	899a      	ldrh	r2, [r3, #12]
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	801a      	strh	r2, [r3, #0]
			isSimilarActive = 1;
 8009800:	2301      	movs	r3, #1
 8009802:	73bb      	strb	r3, [r7, #14]
		}
		bufferState = RINGBUFFER_cIn(message->type, &buf->buffer);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	791b      	ldrb	r3, [r3, #4]
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	4611      	mov	r1, r2
 800980c:	4618      	mov	r0, r3
 800980e:	f000 f942 	bl	8009a96 <RINGBUFFER_cIn>
 8009812:	4603      	mov	r3, r0
 8009814:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->index >> 8), &buf->buffer);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	0a1b      	lsrs	r3, r3, #8
 800981c:	b29b      	uxth	r3, r3
 800981e:	b2db      	uxtb	r3, r3
 8009820:	683a      	ldr	r2, [r7, #0]
 8009822:	4611      	mov	r1, r2
 8009824:	4618      	mov	r0, r3
 8009826:	f000 f936 	bl	8009a96 <RINGBUFFER_cIn>
 800982a:	4603      	mov	r3, r0
 800982c:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->index), &buf->buffer);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	881b      	ldrh	r3, [r3, #0]
 8009832:	b2db      	uxtb	r3, r3
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	4611      	mov	r1, r2
 8009838:	4618      	mov	r0, r3
 800983a:	f000 f92c 	bl	8009a96 <RINGBUFFER_cIn>
 800983e:	4603      	mov	r3, r0
 8009840:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->value >> 8), &buf->buffer);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009848:	121b      	asrs	r3, r3, #8
 800984a:	b21b      	sxth	r3, r3
 800984c:	b2db      	uxtb	r3, r3
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	4611      	mov	r1, r2
 8009852:	4618      	mov	r0, r3
 8009854:	f000 f91f 	bl	8009a96 <RINGBUFFER_cIn>
 8009858:	4603      	mov	r3, r0
 800985a:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->value), &buf->buffer);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009862:	b2db      	uxtb	r3, r3
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	4611      	mov	r1, r2
 8009868:	4618      	mov	r0, r3
 800986a:	f000 f914 	bl	8009a96 <RINGBUFFER_cIn>
 800986e:	4603      	mov	r3, r0
 8009870:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->ctx >> 8), &buf->buffer);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009878:	121b      	asrs	r3, r3, #8
 800987a:	b21b      	sxth	r3, r3
 800987c:	b2db      	uxtb	r3, r3
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	4611      	mov	r1, r2
 8009882:	4618      	mov	r0, r3
 8009884:	f000 f907 	bl	8009a96 <RINGBUFFER_cIn>
 8009888:	4603      	mov	r3, r0
 800988a:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->ctx), &buf->buffer);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009892:	b2db      	uxtb	r3, r3
 8009894:	683a      	ldr	r2, [r7, #0]
 8009896:	4611      	mov	r1, r2
 8009898:	4618      	mov	r0, r3
 800989a:	f000 f8fc 	bl	8009a96 <RINGBUFFER_cIn>
 800989e:	4603      	mov	r3, r0
 80098a0:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn(message->origin, &buf->buffer);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	795b      	ldrb	r3, [r3, #5]
 80098a6:	683a      	ldr	r2, [r7, #0]
 80098a8:	4611      	mov	r1, r2
 80098aa:	4618      	mov	r0, r3
 80098ac:	f000 f8f3 	bl	8009a96 <RINGBUFFER_cIn>
 80098b0:	4603      	mov	r3, r0
 80098b2:	73fb      	strb	r3, [r7, #15]
	}
	if(bufferState ==  ringbuffer_FULL) buf->buffer.in = nextMsgTmp;
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
 80098b6:	2b03      	cmp	r3, #3
 80098b8:	d103      	bne.n	80098c2 <writeMsg+0xf6>
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	89ba      	ldrh	r2, [r7, #12]
 80098be:	801a      	strh	r2, [r3, #0]
 80098c0:	e005      	b.n	80098ce <writeMsg+0x102>
	else if(!isSimilarActive) buf->lastMsg = nextMsgTmp;
 80098c2:	7bbb      	ldrb	r3, [r7, #14]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d102      	bne.n	80098ce <writeMsg+0x102>
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	89ba      	ldrh	r2, [r7, #12]
 80098cc:	819a      	strh	r2, [r3, #12]
	return bufferState;
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <msg_writeEvent>:
	msgBuffer.out = 0;
	msgBuffer.size = size;
	msgBuffer.data = pData;
}

uint8_t msg_writeEvent(msg_Message *message, msg_Buffer *buf){
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
	message->index = CAST_MSG_TO_EVENT(message->index);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	881b      	ldrh	r3, [r3, #0]
 80098e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	801a      	strh	r2, [r3, #0]
	uint8_t bufferState = writeMsg(message, buf);
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7ff ff6a 	bl	80097cc <writeMsg>
 80098f8:	4603      	mov	r3, r0
 80098fa:	73fb      	strb	r3, [r7, #15]
	return bufferState;
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <msg_writeAction>:

uint8_t msg_writeAction(msg_Message *message, msg_Buffer *buf){
 8009906:	b580      	push	{r7, lr}
 8009908:	b084      	sub	sp, #16
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	6039      	str	r1, [r7, #0]
	message->index = CAST_MSG_TO_ACTION(message->index);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	881b      	ldrh	r3, [r3, #0]
 8009914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800991c:	b29a      	uxth	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	801a      	strh	r2, [r3, #0]
	uint8_t bufferState = writeMsg(message, buf);
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7ff ff51 	bl	80097cc <writeMsg>
 800992a:	4603      	mov	r3, r0
 800992c:	73fb      	strb	r3, [r7, #15]
	return bufferState;
 800992e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <msg_getNext>:

msg_Message *msg_getNext(msg_Message *message, msg_Buffer *buf){
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
	uint8_t bufferState =  ringbuffer_OK;
 8009942:	2301      	movs	r3, #1
 8009944:	73fb      	strb	r3, [r7, #15]
	char tmp = 0;
 8009946:	2300      	movs	r3, #0
 8009948:	73bb      	strb	r3, [r7, #14]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	f107 030e 	add.w	r3, r7, #14
 8009950:	4611      	mov	r1, r2
 8009952:	4618      	mov	r0, r3
 8009954:	f000 f8dc 	bl	8009b10 <RINGBUFFER_cOut>
 8009958:	4603      	mov	r3, r0
 800995a:	73fb      	strb	r3, [r7, #15]
	message->type = tmp;
 800995c:	7bba      	ldrb	r2, [r7, #14]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	711a      	strb	r2, [r3, #4]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	f107 030e 	add.w	r3, r7, #14
 8009968:	4611      	mov	r1, r2
 800996a:	4618      	mov	r0, r3
 800996c:	f000 f8d0 	bl	8009b10 <RINGBUFFER_cOut>
 8009970:	4603      	mov	r3, r0
 8009972:	73fb      	strb	r3, [r7, #15]
	message->index |= (uint16_t)((tmp & 0xFF) << 8);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	881a      	ldrh	r2, [r3, #0]
 8009978:	7bbb      	ldrb	r3, [r7, #14]
 800997a:	b29b      	uxth	r3, r3
 800997c:	021b      	lsls	r3, r3, #8
 800997e:	b29b      	uxth	r3, r3
 8009980:	4313      	orrs	r3, r2
 8009982:	b29a      	uxth	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	801a      	strh	r2, [r3, #0]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8009988:	683a      	ldr	r2, [r7, #0]
 800998a:	f107 030e 	add.w	r3, r7, #14
 800998e:	4611      	mov	r1, r2
 8009990:	4618      	mov	r0, r3
 8009992:	f000 f8bd 	bl	8009b10 <RINGBUFFER_cOut>
 8009996:	4603      	mov	r3, r0
 8009998:	73fb      	strb	r3, [r7, #15]
	message->index |= (uint16_t)(tmp & 0xFF);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	881a      	ldrh	r2, [r3, #0]
 800999e:	7bbb      	ldrb	r3, [r7, #14]
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	4313      	orrs	r3, r2
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	801a      	strh	r2, [r3, #0]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	f107 030e 	add.w	r3, r7, #14
 80099b0:	4611      	mov	r1, r2
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 f8ac 	bl	8009b10 <RINGBUFFER_cOut>
 80099b8:	4603      	mov	r3, r0
 80099ba:	73fb      	strb	r3, [r7, #15]
	message->value |= (uint16_t)((tmp & 0xFF) << 8);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80099c2:	7bbb      	ldrb	r3, [r7, #14]
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	021b      	lsls	r3, r3, #8
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	b21b      	sxth	r3, r3
 80099cc:	4313      	orrs	r3, r2
 80099ce:	b21a      	sxth	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	805a      	strh	r2, [r3, #2]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	f107 030e 	add.w	r3, r7, #14
 80099da:	4611      	mov	r1, r2
 80099dc:	4618      	mov	r0, r3
 80099de:	f000 f897 	bl	8009b10 <RINGBUFFER_cOut>
 80099e2:	4603      	mov	r3, r0
 80099e4:	73fb      	strb	r3, [r7, #15]
	message->value |= (uint16_t)(tmp & 0xFF);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80099ec:	7bbb      	ldrb	r3, [r7, #14]
 80099ee:	b21b      	sxth	r3, r3
 80099f0:	4313      	orrs	r3, r2
 80099f2:	b21a      	sxth	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	805a      	strh	r2, [r3, #2]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	f107 030e 	add.w	r3, r7, #14
 80099fe:	4611      	mov	r1, r2
 8009a00:	4618      	mov	r0, r3
 8009a02:	f000 f885 	bl	8009b10 <RINGBUFFER_cOut>
 8009a06:	4603      	mov	r3, r0
 8009a08:	73fb      	strb	r3, [r7, #15]
	message->ctx |= (uint16_t)((tmp & 0xFF) << 8);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8009a10:	7bbb      	ldrb	r3, [r7, #14]
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	021b      	lsls	r3, r3, #8
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	b21b      	sxth	r3, r3
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	b21a      	sxth	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	80da      	strh	r2, [r3, #6]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8009a22:	683a      	ldr	r2, [r7, #0]
 8009a24:	f107 030e 	add.w	r3, r7, #14
 8009a28:	4611      	mov	r1, r2
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 f870 	bl	8009b10 <RINGBUFFER_cOut>
 8009a30:	4603      	mov	r3, r0
 8009a32:	73fb      	strb	r3, [r7, #15]
	message->ctx |= (uint16_t)(tmp & 0xFF);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
 8009a3c:	b21b      	sxth	r3, r3
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	b21a      	sxth	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	80da      	strh	r2, [r3, #6]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	f107 030e 	add.w	r3, r7, #14
 8009a4c:	4611      	mov	r1, r2
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 f85e 	bl	8009b10 <RINGBUFFER_cOut>
 8009a54:	4603      	mov	r3, r0
 8009a56:	73fb      	strb	r3, [r7, #15]
	message->origin = tmp;
 8009a58:	7bba      	ldrb	r2, [r7, #14]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	715a      	strb	r2, [r3, #5]
	if(bufferState ==  ringbuffer_OK)return message;
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d101      	bne.n	8009a68 <msg_getNext+0x130>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	e000      	b.n	8009a6a <msg_getNext+0x132>
	else return NULL;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <msg_isAction>:

uint8_t msg_isAction(msg_Message *message){
 8009a72:	b480      	push	{r7}
 8009a74:	b083      	sub	sp, #12
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
	if((message->index & ACTION_MSK) == ACTION_MSK) return TRUE;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	b21b      	sxth	r3, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	da01      	bge.n	8009a88 <msg_isAction+0x16>
 8009a84:	2301      	movs	r3, #1
 8009a86:	e000      	b.n	8009a8a <msg_isAction+0x18>
	else return FALSE;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	370c      	adds	r7, #12
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <RINGBUFFER_cIn>:
 *  Created on: 15.01.2018
 *      Author: sawadee
 */
#include "ringbuffer.h"

uint8_t RINGBUFFER_cIn(char data, stRingBuf *pBuf){
 8009a96:	b480      	push	{r7}
 8009a98:	b083      	sub	sp, #12
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	6039      	str	r1, [r7, #0]
 8009aa0:	71fb      	strb	r3, [r7, #7]
	if(pBuf->data != NULL){
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d02b      	beq.n	8009b02 <RINGBUFFER_cIn+0x6c>
		if ( ( pBuf->in + 1 == pBuf->out ) || ( pBuf->out == 0 && pBuf->in + 1 == pBuf->size ) ) return ringbuffer_FULL;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	8852      	ldrh	r2, [r2, #2]
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d00a      	beq.n	8009ace <RINGBUFFER_cIn+0x38>
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	885b      	ldrh	r3, [r3, #2]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d108      	bne.n	8009ad2 <RINGBUFFER_cIn+0x3c>
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	8892      	ldrh	r2, [r2, #4]
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d101      	bne.n	8009ad2 <RINGBUFFER_cIn+0x3c>
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e018      	b.n	8009b04 <RINGBUFFER_cIn+0x6e>
		pBuf->data[pBuf->in] = data;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	8812      	ldrh	r2, [r2, #0]
 8009ada:	4413      	add	r3, r2
 8009adc:	79fa      	ldrb	r2, [r7, #7]
 8009ade:	701a      	strb	r2, [r3, #0]
		pBuf->in++;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	881b      	ldrh	r3, [r3, #0]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	801a      	strh	r2, [r3, #0]
		if (pBuf->in >= pBuf->size) pBuf->in = 0;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	881a      	ldrh	r2, [r3, #0]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	889b      	ldrh	r3, [r3, #4]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d302      	bcc.n	8009afe <RINGBUFFER_cIn+0x68>
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	2200      	movs	r2, #0
 8009afc:	801a      	strh	r2, [r3, #0]
		return ringbuffer_OK;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e000      	b.n	8009b04 <RINGBUFFER_cIn+0x6e>
	}else return ringbuffer_NO_BUF;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <RINGBUFFER_cOut>:
uint8_t RINGBUFFER_cOut(char *pData, stRingBuf *pBuf){
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
	if(pBuf->data != NULL){
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d020      	beq.n	8009b64 <RINGBUFFER_cOut+0x54>
		if (pBuf->out == pBuf->in) return ringbuffer_EMPTY;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	885a      	ldrh	r2, [r3, #2]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	881b      	ldrh	r3, [r3, #0]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d101      	bne.n	8009b32 <RINGBUFFER_cOut+0x22>
 8009b2e:	2302      	movs	r3, #2
 8009b30:	e019      	b.n	8009b66 <RINGBUFFER_cOut+0x56>
		*pData = pBuf->data[pBuf->out];
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	8852      	ldrh	r2, [r2, #2]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	781a      	ldrb	r2, [r3, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	701a      	strb	r2, [r3, #0]
		pBuf->out++;
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	885b      	ldrh	r3, [r3, #2]
 8009b46:	3301      	adds	r3, #1
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	805a      	strh	r2, [r3, #2]
		if (pBuf->out >= pBuf->size)
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	885a      	ldrh	r2, [r3, #2]
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	889b      	ldrh	r3, [r3, #4]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d302      	bcc.n	8009b60 <RINGBUFFER_cOut+0x50>
		  pBuf->out = 0;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	805a      	strh	r2, [r3, #2]
		return ringbuffer_OK;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e000      	b.n	8009b66 <RINGBUFFER_cOut+0x56>
	}else return ringbuffer_NO_BUF;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <RINGBUFFER_isEmpty>:

uint8_t RINGBUFFER_isEmpty(stRingBuf *pBuf){
 8009b72:	b480      	push	{r7}
 8009b74:	b083      	sub	sp, #12
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
	if(pBuf->out == pBuf->in) return 1;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	885a      	ldrh	r2, [r3, #2]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	881b      	ldrh	r3, [r3, #0]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d101      	bne.n	8009b8a <RINGBUFFER_isEmpty+0x18>
 8009b86:	2301      	movs	r3, #1
 8009b88:	e000      	b.n	8009b8c <RINGBUFFER_isEmpty+0x1a>
	else return 0;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	7c1b      	ldrb	r3, [r3, #16]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d115      	bne.n	8009bdc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	2181      	movs	r1, #129	; 0x81
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f002 fcfd 	bl	800c5b8 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bc8:	2202      	movs	r2, #2
 8009bca:	2101      	movs	r1, #1
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f002 fcf3 	bl	800c5b8 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8009bda:	e012      	b.n	8009c02 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009bdc:	2340      	movs	r3, #64	; 0x40
 8009bde:	2202      	movs	r2, #2
 8009be0:	2181      	movs	r1, #129	; 0x81
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f002 fce8 	bl	800c5b8 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009bee:	2340      	movs	r3, #64	; 0x40
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f002 fcdf 	bl	800c5b8 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c02:	2308      	movs	r3, #8
 8009c04:	2203      	movs	r2, #3
 8009c06:	2182      	movs	r1, #130	; 0x82
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f002 fcd5 	bl	800c5b8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8009c14:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009c18:	f002 fec8 	bl	800c9ac <USBD_static_malloc>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d102      	bne.n	8009c34 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	73fb      	strb	r3, [r7, #15]
 8009c32:	e026      	b.n	8009c82 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009c3a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	7c1b      	ldrb	r3, [r3, #16]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d109      	bne.n	8009c72 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c68:	2101      	movs	r1, #1
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f002 fe1a 	bl	800c8a4 <USBD_LL_PrepareReceive>
 8009c70:	e007      	b.n	8009c82 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c78:	2340      	movs	r3, #64	; 0x40
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f002 fe11 	bl	800c8a4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	460b      	mov	r3, r1
 8009c96:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009c9c:	2181      	movs	r1, #129	; 0x81
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f002 fcc8 	bl	800c634 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009caa:	2101      	movs	r1, #1
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f002 fcc1 	bl	800c634 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009cba:	2182      	movs	r1, #130	; 0x82
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f002 fcb9 	bl	800c634 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00e      	beq.n	8009cf0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f002 fe70 	bl	800c9c8 <USBD_static_free>
    pdev->pClassData = NULL;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8009cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b086      	sub	sp, #24
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
 8009d02:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009d0a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009d10:	2300      	movs	r3, #0
 8009d12:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009d14:	2300      	movs	r3, #0
 8009d16:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d039      	beq.n	8009d98 <USBD_CDC_Setup+0x9e>
 8009d24:	2b20      	cmp	r3, #32
 8009d26:	d17c      	bne.n	8009e22 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	88db      	ldrh	r3, [r3, #6]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d029      	beq.n	8009d84 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	b25b      	sxtb	r3, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	da11      	bge.n	8009d5e <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8009d46:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d48:	683a      	ldr	r2, [r7, #0]
 8009d4a:	88d2      	ldrh	r2, [r2, #6]
 8009d4c:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009d4e:	6939      	ldr	r1, [r7, #16]
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	88db      	ldrh	r3, [r3, #6]
 8009d54:	461a      	mov	r2, r3
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f001 f9a2 	bl	800b0a0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8009d5c:	e068      	b.n	8009e30 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	785a      	ldrb	r2, [r3, #1]
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	88db      	ldrh	r3, [r3, #6]
 8009d6c:	b2da      	uxtb	r2, r3
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009d74:	6939      	ldr	r1, [r7, #16]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	88db      	ldrh	r3, [r3, #6]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f001 f9bd 	bl	800b0fc <USBD_CtlPrepareRx>
    break;
 8009d82:	e055      	b.n	8009e30 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	683a      	ldr	r2, [r7, #0]
 8009d8e:	7850      	ldrb	r0, [r2, #1]
 8009d90:	2200      	movs	r2, #0
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	4798      	blx	r3
    break;
 8009d96:	e04b      	b.n	8009e30 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	785b      	ldrb	r3, [r3, #1]
 8009d9c:	2b0a      	cmp	r3, #10
 8009d9e:	d017      	beq.n	8009dd0 <USBD_CDC_Setup+0xd6>
 8009da0:	2b0b      	cmp	r3, #11
 8009da2:	d029      	beq.n	8009df8 <USBD_CDC_Setup+0xfe>
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d133      	bne.n	8009e10 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009dae:	2b03      	cmp	r3, #3
 8009db0:	d107      	bne.n	8009dc2 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8009db2:	f107 030c 	add.w	r3, r7, #12
 8009db6:	2202      	movs	r2, #2
 8009db8:	4619      	mov	r1, r3
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f001 f970 	bl	800b0a0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8009dc0:	e02e      	b.n	8009e20 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8009dc2:	6839      	ldr	r1, [r7, #0]
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f001 f900 	bl	800afca <USBD_CtlError>
			  ret = USBD_FAIL;
 8009dca:	2302      	movs	r3, #2
 8009dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8009dce:	e027      	b.n	8009e20 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009dd6:	2b03      	cmp	r3, #3
 8009dd8:	d107      	bne.n	8009dea <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8009dda:	f107 030f 	add.w	r3, r7, #15
 8009dde:	2201      	movs	r2, #1
 8009de0:	4619      	mov	r1, r3
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f001 f95c 	bl	800b0a0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8009de8:	e01a      	b.n	8009e20 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f001 f8ec 	bl	800afca <USBD_CtlError>
			  ret = USBD_FAIL;
 8009df2:	2302      	movs	r3, #2
 8009df4:	75fb      	strb	r3, [r7, #23]
      break;
 8009df6:	e013      	b.n	8009e20 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009dfe:	2b03      	cmp	r3, #3
 8009e00:	d00d      	beq.n	8009e1e <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8009e02:	6839      	ldr	r1, [r7, #0]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f001 f8e0 	bl	800afca <USBD_CtlError>
			  ret = USBD_FAIL;
 8009e0a:	2302      	movs	r3, #2
 8009e0c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009e0e:	e006      	b.n	8009e1e <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8009e10:	6839      	ldr	r1, [r7, #0]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f001 f8d9 	bl	800afca <USBD_CtlError>
      ret = USBD_FAIL;
 8009e18:	2302      	movs	r3, #2
 8009e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e1c:	e000      	b.n	8009e20 <USBD_CDC_Setup+0x126>
      break;
 8009e1e:	bf00      	nop
    }
    break;
 8009e20:	e006      	b.n	8009e30 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f001 f8d0 	bl	800afca <USBD_CtlError>
    ret = USBD_FAIL;
 8009e2a:	2302      	movs	r3, #2
 8009e2c:	75fb      	strb	r3, [r7, #23]
    break;
 8009e2e:	bf00      	nop
  }

  return ret;
 8009e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3718      	adds	r7, #24
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	460b      	mov	r3, r1
 8009e44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009e4c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009e54:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d037      	beq.n	8009ed0 <USBD_CDC_DataIn+0x96>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009e60:	78fa      	ldrb	r2, [r7, #3]
 8009e62:	6879      	ldr	r1, [r7, #4]
 8009e64:	4613      	mov	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	4413      	add	r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	440b      	add	r3, r1
 8009e6e:	331c      	adds	r3, #28
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d026      	beq.n	8009ec4 <USBD_CDC_DataIn+0x8a>
 8009e76:	78fa      	ldrb	r2, [r7, #3]
 8009e78:	6879      	ldr	r1, [r7, #4]
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	4413      	add	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	440b      	add	r3, r1
 8009e84:	331c      	adds	r3, #28
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	78fa      	ldrb	r2, [r7, #3]
 8009e8a:	68b9      	ldr	r1, [r7, #8]
 8009e8c:	0152      	lsls	r2, r2, #5
 8009e8e:	440a      	add	r2, r1
 8009e90:	3238      	adds	r2, #56	; 0x38
 8009e92:	6812      	ldr	r2, [r2, #0]
 8009e94:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e98:	fb02 f201 	mul.w	r2, r2, r1
 8009e9c:	1a9b      	subs	r3, r3, r2
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d110      	bne.n	8009ec4 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009ea2:	78fa      	ldrb	r2, [r7, #3]
 8009ea4:	6879      	ldr	r1, [r7, #4]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4413      	add	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	440b      	add	r3, r1
 8009eb0:	331c      	adds	r3, #28
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8009eb6:	78f9      	ldrb	r1, [r7, #3]
 8009eb8:	2300      	movs	r3, #0
 8009eba:	2200      	movs	r2, #0
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f002 fcb7 	bl	800c830 <USBD_LL_Transmit>
 8009ec2:	e003      	b.n	8009ecc <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	e000      	b.n	8009ed2 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8009ed0:	2302      	movs	r3, #2
  }
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b084      	sub	sp, #16
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009eec:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8009eee:	78fb      	ldrb	r3, [r7, #3]
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f002 fd10 	bl	800c918 <USBD_LL_GetRxDataSize>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00d      	beq.n	8009f26 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009f1e:	4611      	mov	r1, r2
 8009f20:	4798      	blx	r3

    return USBD_OK;
 8009f22:	2300      	movs	r3, #0
 8009f24:	e000      	b.n	8009f28 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009f26:	2302      	movs	r3, #2
  }
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009f3e:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d015      	beq.n	8009f76 <USBD_CDC_EP0_RxReady+0x46>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009f50:	2bff      	cmp	r3, #255	; 0xff
 8009f52:	d010      	beq.n	8009f76 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009f62:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009f6a:	b292      	uxth	r2, r2
 8009f6c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	22ff      	movs	r2, #255	; 0xff
 8009f72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2243      	movs	r2, #67	; 0x43
 8009f8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009f8e:	4b03      	ldr	r3, [pc, #12]	; (8009f9c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr
 8009f9c:	20001214 	.word	0x20001214

08009fa0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2243      	movs	r2, #67	; 0x43
 8009fac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009fae:	4b03      	ldr	r3, [pc, #12]	; (8009fbc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	200011d0 	.word	0x200011d0

08009fc0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2243      	movs	r2, #67	; 0x43
 8009fcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009fce:	4b03      	ldr	r3, [pc, #12]	; (8009fdc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	20001258 	.word	0x20001258

08009fe0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	220a      	movs	r2, #10
 8009fec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009fee:	4b03      	ldr	r3, [pc, #12]	; (8009ffc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	2000118c 	.word	0x2000118c

0800a000 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a00a:	2302      	movs	r3, #2
 800a00c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d005      	beq.n	800a020 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	683a      	ldr	r2, [r7, #0]
 800a018:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a020:	7bfb      	ldrb	r3, [r7, #15]
}
 800a022:	4618      	mov	r0, r3
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800a02e:	b480      	push	{r7}
 800a030:	b087      	sub	sp, #28
 800a032:	af00      	add	r7, sp, #0
 800a034:	60f8      	str	r0, [r7, #12]
 800a036:	60b9      	str	r1, [r7, #8]
 800a038:	4613      	mov	r3, r2
 800a03a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a042:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a04c:	88fa      	ldrh	r2, [r7, #6]
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	371c      	adds	r7, #28
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr

0800a062 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800a062:	b480      	push	{r7}
 800a064:	b085      	sub	sp, #20
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a072:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	683a      	ldr	r2, [r7, #0]
 800a078:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3714      	adds	r7, #20
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b084      	sub	sp, #16
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a098:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d01c      	beq.n	800a0de <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d115      	bne.n	800a0da <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	2181      	movs	r1, #129	; 0x81
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f002 fbad 	bl	800c830 <USBD_LL_Transmit>

      return USBD_OK;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	e002      	b.n	800a0e0 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e000      	b.n	800a0e0 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a0de:	2302      	movs	r3, #2
  }
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a0f6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d017      	beq.n	800a132 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	7c1b      	ldrb	r3, [r3, #16]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d109      	bne.n	800a11e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a110:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a114:	2101      	movs	r1, #1
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f002 fbc4 	bl	800c8a4 <USBD_LL_PrepareReceive>
 800a11c:	e007      	b.n	800a12e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a124:	2340      	movs	r3, #64	; 0x40
 800a126:	2101      	movs	r1, #1
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f002 fbbb 	bl	800c8a4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a12e:	2300      	movs	r3, #0
 800a130:	e000      	b.n	800a134 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a132:	2302      	movs	r3, #2
  }
}
 800a134:	4618      	mov	r0, r3
 800a136:	3710      	adds	r7, #16
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	4613      	mov	r3, r2
 800a148:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d101      	bne.n	800a154 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a150:	2302      	movs	r3, #2
 800a152:	e01a      	b.n	800a18a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d003      	beq.n	800a166 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d003      	beq.n	800a174 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	79fa      	ldrb	r2, [r7, #7]
 800a180:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f002 f982 	bl	800c48c <USBD_LL_Init>

  return USBD_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a192:	b480      	push	{r7}
 800a194:	b085      	sub	sp, #20
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d006      	beq.n	800a1b4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	683a      	ldr	r2, [r7, #0]
 800a1aa:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	73fb      	strb	r3, [r7, #15]
 800a1b2:	e001      	b.n	800a1b8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b082      	sub	sp, #8
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f002 f9c0 	bl	800c554 <USBD_LL_Start>

  return USBD_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800a1de:	b480      	push	{r7}
 800a1e0:	b083      	sub	sp, #12
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800a200:	2302      	movs	r3, #2
 800a202:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00c      	beq.n	800a228 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	78fa      	ldrb	r2, [r7, #3]
 800a218:	4611      	mov	r1, r2
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	4798      	blx	r3
 800a21e:	4603      	mov	r3, r0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a228:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b082      	sub	sp, #8
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	460b      	mov	r3, r1
 800a23c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	78fa      	ldrb	r2, [r7, #3]
 800a248:	4611      	mov	r1, r2
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	4798      	blx	r3
  return USBD_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a268:	6839      	ldr	r1, [r7, #0]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 fe70 	bl	800af50 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800a27e:	461a      	mov	r2, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800a28c:	f003 031f 	and.w	r3, r3, #31
 800a290:	2b01      	cmp	r3, #1
 800a292:	d00c      	beq.n	800a2ae <USBD_LL_SetupStage+0x56>
 800a294:	2b01      	cmp	r3, #1
 800a296:	d302      	bcc.n	800a29e <USBD_LL_SetupStage+0x46>
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d010      	beq.n	800a2be <USBD_LL_SetupStage+0x66>
 800a29c:	e017      	b.n	800a2ce <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f9c4 	bl	800a634 <USBD_StdDevReq>
    break;
 800a2ac:	e01a      	b.n	800a2e4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fa26 	bl	800a708 <USBD_StdItfReq>
    break;
 800a2bc:	e012      	b.n	800a2e4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 fa64 	bl	800a794 <USBD_StdEPReq>
    break;
 800a2cc:	e00a      	b.n	800a2e4 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800a2d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	4619      	mov	r1, r3
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f002 f9df 	bl	800c6a0 <USBD_LL_StallEP>
    break;
 800a2e2:	bf00      	nop
  }

  return USBD_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b086      	sub	sp, #24
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	60f8      	str	r0, [r7, #12]
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	607a      	str	r2, [r7, #4]
 800a2fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800a2fc:	7afb      	ldrb	r3, [r7, #11]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d147      	bne.n	800a392 <USBD_LL_DataOutStage+0xa4>
  {
    pep = &pdev->ep_out[0];
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a308:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a310:	2b03      	cmp	r3, #3
 800a312:	d134      	bne.n	800a37e <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	68da      	ldr	r2, [r3, #12]
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d919      	bls.n	800a354 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	68da      	ldr	r2, [r3, #12]
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	1ad2      	subs	r2, r2, r3
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	68da      	ldr	r2, [r3, #12]
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800a336:	429a      	cmp	r2, r3
 800a338:	d203      	bcs.n	800a342 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800a33e:	b29b      	uxth	r3, r3
 800a340:	e002      	b.n	800a348 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800a346:	b29b      	uxth	r3, r3
 800a348:	461a      	mov	r2, r3
 800a34a:	6879      	ldr	r1, [r7, #4]
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f000 fef3 	bl	800b138 <USBD_CtlContinueRx>
 800a352:	e034      	b.n	800a3be <USBD_LL_DataOutStage+0xd0>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00a      	beq.n	800a376 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800a366:	2b03      	cmp	r3, #3
 800a368:	d105      	bne.n	800a376 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a370:	691b      	ldr	r3, [r3, #16]
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a376:	68f8      	ldr	r0, [r7, #12]
 800a378:	f000 fef0 	bl	800b15c <USBD_CtlSendStatus>
 800a37c:	e01f      	b.n	800a3be <USBD_LL_DataOutStage+0xd0>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a384:	2b05      	cmp	r3, #5
 800a386:	d11a      	bne.n	800a3be <USBD_LL_DataOutStage+0xd0>
      {
        USBD_LL_StallEP(pdev, 0U);
 800a388:	2100      	movs	r1, #0
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f002 f988 	bl	800c6a0 <USBD_LL_StallEP>
 800a390:	e015      	b.n	800a3be <USBD_LL_DataOutStage+0xd0>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00d      	beq.n	800a3ba <USBD_LL_DataOutStage+0xcc>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800a3a4:	2b03      	cmp	r3, #3
 800a3a6:	d108      	bne.n	800a3ba <USBD_LL_DataOutStage+0xcc>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	7afa      	ldrb	r2, [r7, #11]
 800a3b2:	4611      	mov	r1, r2
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	4798      	blx	r3
 800a3b8:	e001      	b.n	800a3be <USBD_LL_DataOutStage+0xd0>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	e000      	b.n	800a3c0 <USBD_LL_DataOutStage+0xd2>
  }

  return USBD_OK;
 800a3be:	2300      	movs	r3, #0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3718      	adds	r7, #24
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	607a      	str	r2, [r7, #4]
 800a3d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800a3d6:	7afb      	ldrb	r3, [r7, #11]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d17f      	bne.n	800a4dc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	3314      	adds	r3, #20
 800a3e0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d15c      	bne.n	800a4a6 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	68da      	ldr	r2, [r3, #12]
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d915      	bls.n	800a424 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	68da      	ldr	r2, [r3, #12]
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	691b      	ldr	r3, [r3, #16]
 800a400:	1ad2      	subs	r2, r2, r3
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	461a      	mov	r2, r3
 800a40e:	6879      	ldr	r1, [r7, #4]
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f000 fe61 	bl	800b0d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a416:	2300      	movs	r3, #0
 800a418:	2200      	movs	r2, #0
 800a41a:	2100      	movs	r1, #0
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f002 fa41 	bl	800c8a4 <USBD_LL_PrepareReceive>
 800a422:	e04e      	b.n	800a4c2 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	6912      	ldr	r2, [r2, #16]
 800a42c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a430:	fb02 f201 	mul.w	r2, r2, r1
 800a434:	1a9b      	subs	r3, r3, r2
 800a436:	2b00      	cmp	r3, #0
 800a438:	d11c      	bne.n	800a474 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	689a      	ldr	r2, [r3, #8]
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a442:	429a      	cmp	r2, r3
 800a444:	d316      	bcc.n	800a474 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	689a      	ldr	r2, [r3, #8]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800a450:	429a      	cmp	r2, r3
 800a452:	d20f      	bcs.n	800a474 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a454:	2200      	movs	r2, #0
 800a456:	2100      	movs	r1, #0
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f000 fe3d 	bl	800b0d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a466:	2300      	movs	r3, #0
 800a468:	2200      	movs	r2, #0
 800a46a:	2100      	movs	r1, #0
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f002 fa19 	bl	800c8a4 <USBD_LL_PrepareReceive>
 800a472:	e026      	b.n	800a4c2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d00a      	beq.n	800a496 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a486:	2b03      	cmp	r3, #3
 800a488:	d105      	bne.n	800a496 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a496:	2180      	movs	r1, #128	; 0x80
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f002 f901 	bl	800c6a0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f000 fe6f 	bl	800b182 <USBD_CtlReceiveStatus>
 800a4a4:	e00d      	b.n	800a4c2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a4ac:	2b04      	cmp	r3, #4
 800a4ae:	d004      	beq.n	800a4ba <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d103      	bne.n	800a4c2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a4ba:	2180      	movs	r1, #128	; 0x80
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f002 f8ef 	bl	800c6a0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d11d      	bne.n	800a508 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f7ff fe86 	bl	800a1de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800a4da:	e015      	b.n	800a508 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00d      	beq.n	800a504 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	d108      	bne.n	800a504 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a4f8:	695b      	ldr	r3, [r3, #20]
 800a4fa:	7afa      	ldrb	r2, [r7, #11]
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	4798      	blx	r3
 800a502:	e001      	b.n	800a508 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a504:	2302      	movs	r3, #2
 800a506:	e000      	b.n	800a50a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3718      	adds	r7, #24
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b082      	sub	sp, #8
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a51a:	2340      	movs	r3, #64	; 0x40
 800a51c:	2200      	movs	r2, #0
 800a51e:	2100      	movs	r1, #0
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f002 f849 	bl	800c5b8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2240      	movs	r2, #64	; 0x40
 800a532:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a536:	2340      	movs	r3, #64	; 0x40
 800a538:	2200      	movs	r2, #0
 800a53a:	2180      	movs	r1, #128	; 0x80
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f002 f83b 	bl	800c5b8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2201      	movs	r2, #1
 800a546:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2240      	movs	r2, #64	; 0x40
 800a54c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2201      	movs	r2, #1
 800a552:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a572:	2b00      	cmp	r3, #0
 800a574:	d009      	beq.n	800a58a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	6852      	ldr	r2, [r2, #4]
 800a582:	b2d2      	uxtb	r2, r2
 800a584:	4611      	mov	r1, r2
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	4798      	blx	r3
  }

  return USBD_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	460b      	mov	r3, r1
 800a59e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	78fa      	ldrb	r2, [r7, #3]
 800a5a4:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2204      	movs	r2, #4
 800a5cc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	370c      	adds	r7, #12
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr

0800a5de <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800a5de:	b480      	push	{r7}
 800a5e0:	b083      	sub	sp, #12
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a60e:	2b03      	cmp	r3, #3
 800a610:	d10b      	bne.n	800a62a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a618:	69db      	ldr	r3, [r3, #28]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d005      	beq.n	800a62a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a624:	69db      	ldr	r3, [r3, #28]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3708      	adds	r7, #8
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a64a:	2b20      	cmp	r3, #32
 800a64c:	d004      	beq.n	800a658 <USBD_StdDevReq+0x24>
 800a64e:	2b40      	cmp	r3, #64	; 0x40
 800a650:	d002      	beq.n	800a658 <USBD_StdDevReq+0x24>
 800a652:	2b00      	cmp	r3, #0
 800a654:	d008      	beq.n	800a668 <USBD_StdDevReq+0x34>
 800a656:	e04c      	b.n	800a6f2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	6839      	ldr	r1, [r7, #0]
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	4798      	blx	r3
    break;
 800a666:	e049      	b.n	800a6fc <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	785b      	ldrb	r3, [r3, #1]
 800a66c:	2b09      	cmp	r3, #9
 800a66e:	d83a      	bhi.n	800a6e6 <USBD_StdDevReq+0xb2>
 800a670:	a201      	add	r2, pc, #4	; (adr r2, 800a678 <USBD_StdDevReq+0x44>)
 800a672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a676:	bf00      	nop
 800a678:	0800a6c9 	.word	0x0800a6c9
 800a67c:	0800a6dd 	.word	0x0800a6dd
 800a680:	0800a6e7 	.word	0x0800a6e7
 800a684:	0800a6d3 	.word	0x0800a6d3
 800a688:	0800a6e7 	.word	0x0800a6e7
 800a68c:	0800a6ab 	.word	0x0800a6ab
 800a690:	0800a6a1 	.word	0x0800a6a1
 800a694:	0800a6e7 	.word	0x0800a6e7
 800a698:	0800a6bf 	.word	0x0800a6bf
 800a69c:	0800a6b5 	.word	0x0800a6b5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800a6a0:	6839      	ldr	r1, [r7, #0]
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f9d2 	bl	800aa4c <USBD_GetDescriptor>
      break;
 800a6a8:	e022      	b.n	800a6f0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800a6aa:	6839      	ldr	r1, [r7, #0]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 fae3 	bl	800ac78 <USBD_SetAddress>
      break;
 800a6b2:	e01d      	b.n	800a6f0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800a6b4:	6839      	ldr	r1, [r7, #0]
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 fb20 	bl	800acfc <USBD_SetConfig>
      break;
 800a6bc:	e018      	b.n	800a6f0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800a6be:	6839      	ldr	r1, [r7, #0]
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 fba9 	bl	800ae18 <USBD_GetConfig>
      break;
 800a6c6:	e013      	b.n	800a6f0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800a6c8:	6839      	ldr	r1, [r7, #0]
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 fbd8 	bl	800ae80 <USBD_GetStatus>
      break;
 800a6d0:	e00e      	b.n	800a6f0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800a6d2:	6839      	ldr	r1, [r7, #0]
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fc06 	bl	800aee6 <USBD_SetFeature>
      break;
 800a6da:	e009      	b.n	800a6f0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800a6dc:	6839      	ldr	r1, [r7, #0]
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fc15 	bl	800af0e <USBD_ClrFeature>
      break;
 800a6e4:	e004      	b.n	800a6f0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800a6e6:	6839      	ldr	r1, [r7, #0]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fc6e 	bl	800afca <USBD_CtlError>
      break;
 800a6ee:	bf00      	nop
    }
    break;
 800a6f0:	e004      	b.n	800a6fc <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800a6f2:	6839      	ldr	r1, [r7, #0]
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fc68 	bl	800afca <USBD_CtlError>
    break;
 800a6fa:	bf00      	nop
  }

  return ret;
 800a6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop

0800a708 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a71e:	2b20      	cmp	r3, #32
 800a720:	d003      	beq.n	800a72a <USBD_StdItfReq+0x22>
 800a722:	2b40      	cmp	r3, #64	; 0x40
 800a724:	d001      	beq.n	800a72a <USBD_StdItfReq+0x22>
 800a726:	2b00      	cmp	r3, #0
 800a728:	d12a      	bne.n	800a780 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a730:	3b01      	subs	r3, #1
 800a732:	2b02      	cmp	r3, #2
 800a734:	d81d      	bhi.n	800a772 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	889b      	ldrh	r3, [r3, #4]
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d813      	bhi.n	800a768 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	6839      	ldr	r1, [r7, #0]
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	4798      	blx	r3
 800a74e:	4603      	mov	r3, r0
 800a750:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	88db      	ldrh	r3, [r3, #6]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d110      	bne.n	800a77c <USBD_StdItfReq+0x74>
 800a75a:	7bfb      	ldrb	r3, [r7, #15]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d10d      	bne.n	800a77c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 fcfb 	bl	800b15c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a766:	e009      	b.n	800a77c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800a768:	6839      	ldr	r1, [r7, #0]
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 fc2d 	bl	800afca <USBD_CtlError>
      break;
 800a770:	e004      	b.n	800a77c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800a772:	6839      	ldr	r1, [r7, #0]
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 fc28 	bl	800afca <USBD_CtlError>
      break;
 800a77a:	e000      	b.n	800a77e <USBD_StdItfReq+0x76>
      break;
 800a77c:	bf00      	nop
    }
    break;
 800a77e:	e004      	b.n	800a78a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fc21 	bl	800afca <USBD_CtlError>
    break;
 800a788:	bf00      	nop
  }

  return USBD_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	889b      	ldrh	r3, [r3, #4]
 800a7a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7b0:	2b20      	cmp	r3, #32
 800a7b2:	d004      	beq.n	800a7be <USBD_StdEPReq+0x2a>
 800a7b4:	2b40      	cmp	r3, #64	; 0x40
 800a7b6:	d002      	beq.n	800a7be <USBD_StdEPReq+0x2a>
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d008      	beq.n	800a7ce <USBD_StdEPReq+0x3a>
 800a7bc:	e13b      	b.n	800aa36 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	6839      	ldr	r1, [r7, #0]
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	4798      	blx	r3
    break;
 800a7cc:	e138      	b.n	800aa40 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7d6:	2b20      	cmp	r3, #32
 800a7d8:	d10a      	bne.n	800a7f0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	6839      	ldr	r1, [r7, #0]
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	4798      	blx	r3
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	73fb      	strb	r3, [r7, #15]

      return ret;
 800a7ec:	7bfb      	ldrb	r3, [r7, #15]
 800a7ee:	e128      	b.n	800aa42 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	785b      	ldrb	r3, [r3, #1]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d03e      	beq.n	800a876 <USBD_StdEPReq+0xe2>
 800a7f8:	2b03      	cmp	r3, #3
 800a7fa:	d002      	beq.n	800a802 <USBD_StdEPReq+0x6e>
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d070      	beq.n	800a8e2 <USBD_StdEPReq+0x14e>
 800a800:	e113      	b.n	800aa2a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a808:	2b02      	cmp	r3, #2
 800a80a:	d002      	beq.n	800a812 <USBD_StdEPReq+0x7e>
 800a80c:	2b03      	cmp	r3, #3
 800a80e:	d015      	beq.n	800a83c <USBD_StdEPReq+0xa8>
 800a810:	e02b      	b.n	800a86a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a812:	7bbb      	ldrb	r3, [r7, #14]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00c      	beq.n	800a832 <USBD_StdEPReq+0x9e>
 800a818:	7bbb      	ldrb	r3, [r7, #14]
 800a81a:	2b80      	cmp	r3, #128	; 0x80
 800a81c:	d009      	beq.n	800a832 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800a81e:	7bbb      	ldrb	r3, [r7, #14]
 800a820:	4619      	mov	r1, r3
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f001 ff3c 	bl	800c6a0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800a828:	2180      	movs	r1, #128	; 0x80
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f001 ff38 	bl	800c6a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a830:	e020      	b.n	800a874 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800a832:	6839      	ldr	r1, [r7, #0]
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 fbc8 	bl	800afca <USBD_CtlError>
        break;
 800a83a:	e01b      	b.n	800a874 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	885b      	ldrh	r3, [r3, #2]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10e      	bne.n	800a862 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a844:	7bbb      	ldrb	r3, [r7, #14]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00b      	beq.n	800a862 <USBD_StdEPReq+0xce>
 800a84a:	7bbb      	ldrb	r3, [r7, #14]
 800a84c:	2b80      	cmp	r3, #128	; 0x80
 800a84e:	d008      	beq.n	800a862 <USBD_StdEPReq+0xce>
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	88db      	ldrh	r3, [r3, #6]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d104      	bne.n	800a862 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800a858:	7bbb      	ldrb	r3, [r7, #14]
 800a85a:	4619      	mov	r1, r3
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f001 ff1f 	bl	800c6a0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fc7a 	bl	800b15c <USBD_CtlSendStatus>

        break;
 800a868:	e004      	b.n	800a874 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800a86a:	6839      	ldr	r1, [r7, #0]
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fbac 	bl	800afca <USBD_CtlError>
        break;
 800a872:	bf00      	nop
      }
      break;
 800a874:	e0de      	b.n	800aa34 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	d002      	beq.n	800a886 <USBD_StdEPReq+0xf2>
 800a880:	2b03      	cmp	r3, #3
 800a882:	d015      	beq.n	800a8b0 <USBD_StdEPReq+0x11c>
 800a884:	e026      	b.n	800a8d4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a886:	7bbb      	ldrb	r3, [r7, #14]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00c      	beq.n	800a8a6 <USBD_StdEPReq+0x112>
 800a88c:	7bbb      	ldrb	r3, [r7, #14]
 800a88e:	2b80      	cmp	r3, #128	; 0x80
 800a890:	d009      	beq.n	800a8a6 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800a892:	7bbb      	ldrb	r3, [r7, #14]
 800a894:	4619      	mov	r1, r3
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f001 ff02 	bl	800c6a0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800a89c:	2180      	movs	r1, #128	; 0x80
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f001 fefe 	bl	800c6a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a8a4:	e01c      	b.n	800a8e0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800a8a6:	6839      	ldr	r1, [r7, #0]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 fb8e 	bl	800afca <USBD_CtlError>
        break;
 800a8ae:	e017      	b.n	800a8e0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	885b      	ldrh	r3, [r3, #2]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d112      	bne.n	800a8de <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a8b8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d004      	beq.n	800a8cc <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800a8c2:	7bbb      	ldrb	r3, [r7, #14]
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f001 ff20 	bl	800c70c <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 fc45 	bl	800b15c <USBD_CtlSendStatus>
        }
        break;
 800a8d2:	e004      	b.n	800a8de <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800a8d4:	6839      	ldr	r1, [r7, #0]
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fb77 	bl	800afca <USBD_CtlError>
        break;
 800a8dc:	e000      	b.n	800a8e0 <USBD_StdEPReq+0x14c>
        break;
 800a8de:	bf00      	nop
      }
      break;
 800a8e0:	e0a8      	b.n	800aa34 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d002      	beq.n	800a8f2 <USBD_StdEPReq+0x15e>
 800a8ec:	2b03      	cmp	r3, #3
 800a8ee:	d031      	beq.n	800a954 <USBD_StdEPReq+0x1c0>
 800a8f0:	e095      	b.n	800aa1e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8f2:	7bbb      	ldrb	r3, [r7, #14]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d007      	beq.n	800a908 <USBD_StdEPReq+0x174>
 800a8f8:	7bbb      	ldrb	r3, [r7, #14]
 800a8fa:	2b80      	cmp	r3, #128	; 0x80
 800a8fc:	d004      	beq.n	800a908 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fb62 	bl	800afca <USBD_CtlError>
          break;
 800a906:	e08f      	b.n	800aa28 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	da0b      	bge.n	800a928 <USBD_StdEPReq+0x194>
 800a910:	7bbb      	ldrb	r3, [r7, #14]
 800a912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a916:	4613      	mov	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4413      	add	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	3310      	adds	r3, #16
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	4413      	add	r3, r2
 800a924:	3304      	adds	r3, #4
 800a926:	e00a      	b.n	800a93e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800a928:	7bbb      	ldrb	r3, [r7, #14]
 800a92a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a92e:	4613      	mov	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	4413      	add	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	4413      	add	r3, r2
 800a93e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	2200      	movs	r2, #0
 800a944:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	2202      	movs	r2, #2
 800a94a:	4619      	mov	r1, r3
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 fba7 	bl	800b0a0 <USBD_CtlSendData>
          break;
 800a952:	e069      	b.n	800aa28 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800a954:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	da11      	bge.n	800a980 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
 800a95e:	f003 020f 	and.w	r2, r3, #15
 800a962:	6879      	ldr	r1, [r7, #4]
 800a964:	4613      	mov	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	4413      	add	r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	440b      	add	r3, r1
 800a96e:	3318      	adds	r3, #24
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d117      	bne.n	800a9a6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800a976:	6839      	ldr	r1, [r7, #0]
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 fb26 	bl	800afca <USBD_CtlError>
            break;
 800a97e:	e053      	b.n	800aa28 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a980:	7bbb      	ldrb	r3, [r7, #14]
 800a982:	f003 020f 	and.w	r2, r3, #15
 800a986:	6879      	ldr	r1, [r7, #4]
 800a988:	4613      	mov	r3, r2
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	4413      	add	r3, r2
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	440b      	add	r3, r1
 800a992:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d104      	bne.n	800a9a6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800a99c:	6839      	ldr	r1, [r7, #0]
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 fb13 	bl	800afca <USBD_CtlError>
            break;
 800a9a4:	e040      	b.n	800aa28 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a9a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	da0b      	bge.n	800a9c6 <USBD_StdEPReq+0x232>
 800a9ae:	7bbb      	ldrb	r3, [r7, #14]
 800a9b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4413      	add	r3, r2
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	3310      	adds	r3, #16
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	e00a      	b.n	800a9dc <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800a9c6:	7bbb      	ldrb	r3, [r7, #14]
 800a9c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	4413      	add	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	4413      	add	r3, r2
 800a9dc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a9de:	7bbb      	ldrb	r3, [r7, #14]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d002      	beq.n	800a9ea <USBD_StdEPReq+0x256>
 800a9e4:	7bbb      	ldrb	r3, [r7, #14]
 800a9e6:	2b80      	cmp	r3, #128	; 0x80
 800a9e8:	d103      	bne.n	800a9f2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	601a      	str	r2, [r3, #0]
 800a9f0:	e00e      	b.n	800aa10 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800a9f2:	7bbb      	ldrb	r3, [r7, #14]
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f001 febe 	bl	800c778 <USBD_LL_IsStallEP>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d003      	beq.n	800aa0a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	2201      	movs	r2, #1
 800aa06:	601a      	str	r2, [r3, #0]
 800aa08:	e002      	b.n	800aa10 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	2202      	movs	r2, #2
 800aa14:	4619      	mov	r1, r3
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 fb42 	bl	800b0a0 <USBD_CtlSendData>
          break;
 800aa1c:	e004      	b.n	800aa28 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 fad2 	bl	800afca <USBD_CtlError>
        break;
 800aa26:	bf00      	nop
      }
      break;
 800aa28:	e004      	b.n	800aa34 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 facc 	bl	800afca <USBD_CtlError>
      break;
 800aa32:	bf00      	nop
    }
    break;
 800aa34:	e004      	b.n	800aa40 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fac6 	bl	800afca <USBD_CtlError>
    break;
 800aa3e:	bf00      	nop
  }

  return ret;
 800aa40:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
	...

0800aa4c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	885b      	ldrh	r3, [r3, #2]
 800aa5a:	0a1b      	lsrs	r3, r3, #8
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	2b0e      	cmp	r3, #14
 800aa62:	f200 80e5 	bhi.w	800ac30 <USBD_GetDescriptor+0x1e4>
 800aa66:	a201      	add	r2, pc, #4	; (adr r2, 800aa6c <USBD_GetDescriptor+0x20>)
 800aa68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6c:	0800aac1 	.word	0x0800aac1
 800aa70:	0800aad9 	.word	0x0800aad9
 800aa74:	0800ab19 	.word	0x0800ab19
 800aa78:	0800ac31 	.word	0x0800ac31
 800aa7c:	0800ac31 	.word	0x0800ac31
 800aa80:	0800abdd 	.word	0x0800abdd
 800aa84:	0800ac03 	.word	0x0800ac03
 800aa88:	0800ac31 	.word	0x0800ac31
 800aa8c:	0800ac31 	.word	0x0800ac31
 800aa90:	0800ac31 	.word	0x0800ac31
 800aa94:	0800ac31 	.word	0x0800ac31
 800aa98:	0800ac31 	.word	0x0800ac31
 800aa9c:	0800ac31 	.word	0x0800ac31
 800aaa0:	0800ac31 	.word	0x0800ac31
 800aaa4:	0800aaa9 	.word	0x0800aaa9
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800aaae:	69db      	ldr	r3, [r3, #28]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	7c12      	ldrb	r2, [r2, #16]
 800aab4:	f107 010a 	add.w	r1, r7, #10
 800aab8:	4610      	mov	r0, r2
 800aaba:	4798      	blx	r3
 800aabc:	60f8      	str	r0, [r7, #12]
    break;
 800aabe:	e0bc      	b.n	800ac3a <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	7c12      	ldrb	r2, [r2, #16]
 800aacc:	f107 010a 	add.w	r1, r7, #10
 800aad0:	4610      	mov	r0, r2
 800aad2:	4798      	blx	r3
 800aad4:	60f8      	str	r0, [r7, #12]
    break;
 800aad6:	e0b0      	b.n	800ac3a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	7c1b      	ldrb	r3, [r3, #16]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d10d      	bne.n	800aafc <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae8:	f107 020a 	add.w	r2, r7, #10
 800aaec:	4610      	mov	r0, r2
 800aaee:	4798      	blx	r3
 800aaf0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800aafa:	e09e      	b.n	800ac3a <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ab02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab04:	f107 020a 	add.w	r2, r7, #10
 800ab08:	4610      	mov	r0, r2
 800ab0a:	4798      	blx	r3
 800ab0c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	3301      	adds	r3, #1
 800ab12:	2202      	movs	r2, #2
 800ab14:	701a      	strb	r2, [r3, #0]
    break;
 800ab16:	e090      	b.n	800ac3a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	885b      	ldrh	r3, [r3, #2]
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	2b05      	cmp	r3, #5
 800ab20:	d856      	bhi.n	800abd0 <USBD_GetDescriptor+0x184>
 800ab22:	a201      	add	r2, pc, #4	; (adr r2, 800ab28 <USBD_GetDescriptor+0xdc>)
 800ab24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab28:	0800ab41 	.word	0x0800ab41
 800ab2c:	0800ab59 	.word	0x0800ab59
 800ab30:	0800ab71 	.word	0x0800ab71
 800ab34:	0800ab89 	.word	0x0800ab89
 800ab38:	0800aba1 	.word	0x0800aba1
 800ab3c:	0800abb9 	.word	0x0800abb9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	7c12      	ldrb	r2, [r2, #16]
 800ab4c:	f107 010a 	add.w	r1, r7, #10
 800ab50:	4610      	mov	r0, r2
 800ab52:	4798      	blx	r3
 800ab54:	60f8      	str	r0, [r7, #12]
      break;
 800ab56:	e040      	b.n	800abda <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	7c12      	ldrb	r2, [r2, #16]
 800ab64:	f107 010a 	add.w	r1, r7, #10
 800ab68:	4610      	mov	r0, r2
 800ab6a:	4798      	blx	r3
 800ab6c:	60f8      	str	r0, [r7, #12]
      break;
 800ab6e:	e034      	b.n	800abda <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	7c12      	ldrb	r2, [r2, #16]
 800ab7c:	f107 010a 	add.w	r1, r7, #10
 800ab80:	4610      	mov	r0, r2
 800ab82:	4798      	blx	r3
 800ab84:	60f8      	str	r0, [r7, #12]
      break;
 800ab86:	e028      	b.n	800abda <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	7c12      	ldrb	r2, [r2, #16]
 800ab94:	f107 010a 	add.w	r1, r7, #10
 800ab98:	4610      	mov	r0, r2
 800ab9a:	4798      	blx	r3
 800ab9c:	60f8      	str	r0, [r7, #12]
      break;
 800ab9e:	e01c      	b.n	800abda <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	7c12      	ldrb	r2, [r2, #16]
 800abac:	f107 010a 	add.w	r1, r7, #10
 800abb0:	4610      	mov	r0, r2
 800abb2:	4798      	blx	r3
 800abb4:	60f8      	str	r0, [r7, #12]
      break;
 800abb6:	e010      	b.n	800abda <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800abbe:	699b      	ldr	r3, [r3, #24]
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	7c12      	ldrb	r2, [r2, #16]
 800abc4:	f107 010a 	add.w	r1, r7, #10
 800abc8:	4610      	mov	r0, r2
 800abca:	4798      	blx	r3
 800abcc:	60f8      	str	r0, [r7, #12]
      break;
 800abce:	e004      	b.n	800abda <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800abd0:	6839      	ldr	r1, [r7, #0]
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 f9f9 	bl	800afca <USBD_CtlError>
      return;
 800abd8:	e04b      	b.n	800ac72 <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 800abda:	e02e      	b.n	800ac3a <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	7c1b      	ldrb	r3, [r3, #16]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d109      	bne.n	800abf8 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800abea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abec:	f107 020a 	add.w	r2, r7, #10
 800abf0:	4610      	mov	r0, r2
 800abf2:	4798      	blx	r3
 800abf4:	60f8      	str	r0, [r7, #12]
      break;
 800abf6:	e020      	b.n	800ac3a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800abf8:	6839      	ldr	r1, [r7, #0]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f9e5 	bl	800afca <USBD_CtlError>
      return;
 800ac00:	e037      	b.n	800ac72 <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	7c1b      	ldrb	r3, [r3, #16]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d10d      	bne.n	800ac26 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ac10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac12:	f107 020a 	add.w	r2, r7, #10
 800ac16:	4610      	mov	r0, r2
 800ac18:	4798      	blx	r3
 800ac1a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	2207      	movs	r2, #7
 800ac22:	701a      	strb	r2, [r3, #0]
      break;
 800ac24:	e009      	b.n	800ac3a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ac26:	6839      	ldr	r1, [r7, #0]
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 f9ce 	bl	800afca <USBD_CtlError>
      return;
 800ac2e:	e020      	b.n	800ac72 <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 800ac30:	6839      	ldr	r1, [r7, #0]
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 f9c9 	bl	800afca <USBD_CtlError>
    return;
 800ac38:	e01b      	b.n	800ac72 <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 800ac3a:	897b      	ldrh	r3, [r7, #10]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d011      	beq.n	800ac64 <USBD_GetDescriptor+0x218>
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	88db      	ldrh	r3, [r3, #6]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00d      	beq.n	800ac64 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	88da      	ldrh	r2, [r3, #6]
 800ac4c:	897b      	ldrh	r3, [r7, #10]
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	bf28      	it	cs
 800ac52:	4613      	movcs	r3, r2
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800ac58:	897b      	ldrh	r3, [r7, #10]
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	68f9      	ldr	r1, [r7, #12]
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fa1e 	bl	800b0a0 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	88db      	ldrh	r3, [r3, #6]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d102      	bne.n	800ac72 <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 fa75 	bl	800b15c <USBD_CtlSendStatus>
  }
}
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	889b      	ldrh	r3, [r3, #4]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d130      	bne.n	800acec <USBD_SetAddress+0x74>
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	88db      	ldrh	r3, [r3, #6]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d12c      	bne.n	800acec <USBD_SetAddress+0x74>
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	885b      	ldrh	r3, [r3, #2]
 800ac96:	2b7f      	cmp	r3, #127	; 0x7f
 800ac98:	d828      	bhi.n	800acec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	885b      	ldrh	r3, [r3, #2]
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aca4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800acac:	2b03      	cmp	r3, #3
 800acae:	d104      	bne.n	800acba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800acb0:	6839      	ldr	r1, [r7, #0]
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 f989 	bl	800afca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acb8:	e01c      	b.n	800acf4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	7bfa      	ldrb	r2, [r7, #15]
 800acbe:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800acc2:	7bfb      	ldrb	r3, [r7, #15]
 800acc4:	4619      	mov	r1, r3
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f001 fd7c 	bl	800c7c4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fa45 	bl	800b15c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800acd2:	7bfb      	ldrb	r3, [r7, #15]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d004      	beq.n	800ace2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2202      	movs	r2, #2
 800acdc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ace0:	e008      	b.n	800acf4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2201      	movs	r2, #1
 800ace6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acea:	e003      	b.n	800acf4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800acec:	6839      	ldr	r1, [r7, #0]
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 f96b 	bl	800afca <USBD_CtlError>
  }
}
 800acf4:	bf00      	nop
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	885b      	ldrh	r3, [r3, #2]
 800ad0a:	b2da      	uxtb	r2, r3
 800ad0c:	4b41      	ldr	r3, [pc, #260]	; (800ae14 <USBD_SetConfig+0x118>)
 800ad0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad10:	4b40      	ldr	r3, [pc, #256]	; (800ae14 <USBD_SetConfig+0x118>)
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d904      	bls.n	800ad22 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ad18:	6839      	ldr	r1, [r7, #0]
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 f955 	bl	800afca <USBD_CtlError>
 800ad20:	e075      	b.n	800ae0e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ad28:	2b02      	cmp	r3, #2
 800ad2a:	d002      	beq.n	800ad32 <USBD_SetConfig+0x36>
 800ad2c:	2b03      	cmp	r3, #3
 800ad2e:	d023      	beq.n	800ad78 <USBD_SetConfig+0x7c>
 800ad30:	e062      	b.n	800adf8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800ad32:	4b38      	ldr	r3, [pc, #224]	; (800ae14 <USBD_SetConfig+0x118>)
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d01a      	beq.n	800ad70 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800ad3a:	4b36      	ldr	r3, [pc, #216]	; (800ae14 <USBD_SetConfig+0x118>)
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2203      	movs	r2, #3
 800ad48:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ad4c:	4b31      	ldr	r3, [pc, #196]	; (800ae14 <USBD_SetConfig+0x118>)
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	4619      	mov	r1, r3
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7ff fa4e 	bl	800a1f4 <USBD_SetClassConfig>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b02      	cmp	r3, #2
 800ad5c:	d104      	bne.n	800ad68 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800ad5e:	6839      	ldr	r1, [r7, #0]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 f932 	bl	800afca <USBD_CtlError>
          return;
 800ad66:	e052      	b.n	800ae0e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 f9f7 	bl	800b15c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800ad6e:	e04e      	b.n	800ae0e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 f9f3 	bl	800b15c <USBD_CtlSendStatus>
      break;
 800ad76:	e04a      	b.n	800ae0e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ad78:	4b26      	ldr	r3, [pc, #152]	; (800ae14 <USBD_SetConfig+0x118>)
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d112      	bne.n	800ada6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2202      	movs	r2, #2
 800ad84:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800ad88:	4b22      	ldr	r3, [pc, #136]	; (800ae14 <USBD_SetConfig+0x118>)
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800ad92:	4b20      	ldr	r3, [pc, #128]	; (800ae14 <USBD_SetConfig+0x118>)
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	4619      	mov	r1, r3
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f7ff fa4a 	bl	800a232 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 f9dc 	bl	800b15c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800ada4:	e033      	b.n	800ae0e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800ada6:	4b1b      	ldr	r3, [pc, #108]	; (800ae14 <USBD_SetConfig+0x118>)
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	461a      	mov	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d01d      	beq.n	800adf0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	4619      	mov	r1, r3
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f7ff fa38 	bl	800a232 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800adc2:	4b14      	ldr	r3, [pc, #80]	; (800ae14 <USBD_SetConfig+0x118>)
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	461a      	mov	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800adcc:	4b11      	ldr	r3, [pc, #68]	; (800ae14 <USBD_SetConfig+0x118>)
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	4619      	mov	r1, r3
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f7ff fa0e 	bl	800a1f4 <USBD_SetClassConfig>
 800add8:	4603      	mov	r3, r0
 800adda:	2b02      	cmp	r3, #2
 800addc:	d104      	bne.n	800ade8 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800adde:	6839      	ldr	r1, [r7, #0]
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 f8f2 	bl	800afca <USBD_CtlError>
          return;
 800ade6:	e012      	b.n	800ae0e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 f9b7 	bl	800b15c <USBD_CtlSendStatus>
      break;
 800adee:	e00e      	b.n	800ae0e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f9b3 	bl	800b15c <USBD_CtlSendStatus>
      break;
 800adf6:	e00a      	b.n	800ae0e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800adf8:	6839      	ldr	r1, [r7, #0]
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 f8e5 	bl	800afca <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800ae00:	4b04      	ldr	r3, [pc, #16]	; (800ae14 <USBD_SetConfig+0x118>)
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	4619      	mov	r1, r3
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f7ff fa13 	bl	800a232 <USBD_ClrClassConfig>
      break;
 800ae0c:	bf00      	nop
    }
  }
}
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	2000a1a6 	.word	0x2000a1a6

0800ae18 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	88db      	ldrh	r3, [r3, #6]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d004      	beq.n	800ae34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800ae2a:	6839      	ldr	r1, [r7, #0]
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 f8cc 	bl	800afca <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800ae32:	e021      	b.n	800ae78 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	db17      	blt.n	800ae6e <USBD_GetConfig+0x56>
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	dd02      	ble.n	800ae48 <USBD_GetConfig+0x30>
 800ae42:	2b03      	cmp	r3, #3
 800ae44:	d00b      	beq.n	800ae5e <USBD_GetConfig+0x46>
 800ae46:	e012      	b.n	800ae6e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	3308      	adds	r3, #8
 800ae52:	2201      	movs	r2, #1
 800ae54:	4619      	mov	r1, r3
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 f922 	bl	800b0a0 <USBD_CtlSendData>
      break;
 800ae5c:	e00c      	b.n	800ae78 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	3304      	adds	r3, #4
 800ae62:	2201      	movs	r2, #1
 800ae64:	4619      	mov	r1, r3
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 f91a 	bl	800b0a0 <USBD_CtlSendData>
      break;
 800ae6c:	e004      	b.n	800ae78 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800ae6e:	6839      	ldr	r1, [r7, #0]
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 f8aa 	bl	800afca <USBD_CtlError>
      break;
 800ae76:	bf00      	nop
}
 800ae78:	bf00      	nop
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ae90:	3b01      	subs	r3, #1
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d81e      	bhi.n	800aed4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	88db      	ldrh	r3, [r3, #6]
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	d004      	beq.n	800aea8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800ae9e:	6839      	ldr	r1, [r7, #0]
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 f892 	bl	800afca <USBD_CtlError>
      break;
 800aea6:	e01a      	b.n	800aede <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d005      	beq.n	800aec4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	f043 0202 	orr.w	r2, r3, #2
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	330c      	adds	r3, #12
 800aec8:	2202      	movs	r2, #2
 800aeca:	4619      	mov	r1, r3
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 f8e7 	bl	800b0a0 <USBD_CtlSendData>
    break;
 800aed2:	e004      	b.n	800aede <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 f877 	bl	800afca <USBD_CtlError>
    break;
 800aedc:	bf00      	nop
  }
}
 800aede:	bf00      	nop
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b082      	sub	sp, #8
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	885b      	ldrh	r3, [r3, #2]
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d106      	bne.n	800af06 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2201      	movs	r2, #1
 800aefc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 f92b 	bl	800b15c <USBD_CtlSendStatus>
  }

}
 800af06:	bf00      	nop
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b082      	sub	sp, #8
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800af1e:	3b01      	subs	r3, #1
 800af20:	2b02      	cmp	r3, #2
 800af22:	d80b      	bhi.n	800af3c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	885b      	ldrh	r3, [r3, #2]
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d10c      	bne.n	800af46 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 f911 	bl	800b15c <USBD_CtlSendStatus>
    }
    break;
 800af3a:	e004      	b.n	800af46 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800af3c:	6839      	ldr	r1, [r7, #0]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f843 	bl	800afca <USBD_CtlError>
    break;
 800af44:	e000      	b.n	800af48 <USBD_ClrFeature+0x3a>
    break;
 800af46:	bf00      	nop
  }
}
 800af48:	bf00      	nop
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	781a      	ldrb	r2, [r3, #0]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	785a      	ldrb	r2, [r3, #1]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	3302      	adds	r3, #2
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	b29a      	uxth	r2, r3
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	3303      	adds	r3, #3
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	b29b      	uxth	r3, r3
 800af7a:	021b      	lsls	r3, r3, #8
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	4413      	add	r3, r2
 800af80:	b29a      	uxth	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	3304      	adds	r3, #4
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	3305      	adds	r3, #5
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	b29b      	uxth	r3, r3
 800af96:	021b      	lsls	r3, r3, #8
 800af98:	b29b      	uxth	r3, r3
 800af9a:	4413      	add	r3, r2
 800af9c:	b29a      	uxth	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	3306      	adds	r3, #6
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	3307      	adds	r3, #7
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	021b      	lsls	r3, r3, #8
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	4413      	add	r3, r2
 800afb8:	b29a      	uxth	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	80da      	strh	r2, [r3, #6]

}
 800afbe:	bf00      	nop
 800afc0:	370c      	adds	r7, #12
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr

0800afca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b082      	sub	sp, #8
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
 800afd2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800afd4:	2180      	movs	r1, #128	; 0x80
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f001 fb62 	bl	800c6a0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800afdc:	2100      	movs	r1, #0
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f001 fb5e 	bl	800c6a0 <USBD_LL_StallEP>
}
 800afe4:	bf00      	nop
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b086      	sub	sp, #24
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aff8:	2300      	movs	r3, #0
 800affa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d032      	beq.n	800b068 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f000 f834 	bl	800b070 <USBD_GetLen>
 800b008:	4603      	mov	r3, r0
 800b00a:	3301      	adds	r3, #1
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	005b      	lsls	r3, r3, #1
 800b010:	b29a      	uxth	r2, r3
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b016:	7dfb      	ldrb	r3, [r7, #23]
 800b018:	1c5a      	adds	r2, r3, #1
 800b01a:	75fa      	strb	r2, [r7, #23]
 800b01c:	461a      	mov	r2, r3
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	4413      	add	r3, r2
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	7812      	ldrb	r2, [r2, #0]
 800b026:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b028:	7dfb      	ldrb	r3, [r7, #23]
 800b02a:	1c5a      	adds	r2, r3, #1
 800b02c:	75fa      	strb	r2, [r7, #23]
 800b02e:	461a      	mov	r2, r3
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	4413      	add	r3, r2
 800b034:	2203      	movs	r2, #3
 800b036:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b038:	e012      	b.n	800b060 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b03a:	7dfb      	ldrb	r3, [r7, #23]
 800b03c:	1c5a      	adds	r2, r3, #1
 800b03e:	75fa      	strb	r2, [r7, #23]
 800b040:	461a      	mov	r2, r3
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	441a      	add	r2, r3
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	1c59      	adds	r1, r3, #1
 800b04a:	60f9      	str	r1, [r7, #12]
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b050:	7dfb      	ldrb	r3, [r7, #23]
 800b052:	1c5a      	adds	r2, r3, #1
 800b054:	75fa      	strb	r2, [r7, #23]
 800b056:	461a      	mov	r2, r3
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	4413      	add	r3, r2
 800b05c:	2200      	movs	r2, #0
 800b05e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1e8      	bne.n	800b03a <USBD_GetString+0x4e>
    }
  }
}
 800b068:	bf00      	nop
 800b06a:	3718      	adds	r7, #24
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b070:	b480      	push	{r7}
 800b072:	b085      	sub	sp, #20
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800b078:	2300      	movs	r3, #0
 800b07a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800b07c:	e005      	b.n	800b08a <USBD_GetLen+0x1a>
    {
        len++;
 800b07e:	7bfb      	ldrb	r3, [r7, #15]
 800b080:	3301      	adds	r3, #1
 800b082:	73fb      	strb	r3, [r7, #15]
        buf++;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	3301      	adds	r3, #1
 800b088:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1f5      	bne.n	800b07e <USBD_GetLen+0xe>
    }

    return len;
 800b092:	7bfb      	ldrb	r3, [r7, #15]
}
 800b094:	4618      	mov	r0, r3
 800b096:	3714      	adds	r7, #20
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2202      	movs	r2, #2
 800b0b2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800b0b6:	88fa      	ldrh	r2, [r7, #6]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b0bc:	88fa      	ldrh	r2, [r7, #6]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b0c2:	88fb      	ldrh	r3, [r7, #6]
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f001 fbb1 	bl	800c830 <USBD_LL_Transmit>

  return USBD_OK;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3710      	adds	r7, #16
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b0e6:	88fb      	ldrh	r3, [r7, #6]
 800b0e8:	68ba      	ldr	r2, [r7, #8]
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f001 fb9f 	bl	800c830 <USBD_LL_Transmit>

  return USBD_OK;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	4613      	mov	r3, r2
 800b108:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2203      	movs	r2, #3
 800b10e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800b112:	88fa      	ldrh	r2, [r7, #6]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800b11a:	88fa      	ldrh	r2, [r7, #6]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800b122:	88fb      	ldrh	r3, [r7, #6]
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	2100      	movs	r1, #0
 800b128:	68f8      	ldr	r0, [r7, #12]
 800b12a:	f001 fbbb 	bl	800c8a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b12e:	2300      	movs	r3, #0
}
 800b130:	4618      	mov	r0, r3
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	4613      	mov	r3, r2
 800b144:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b146:	88fb      	ldrh	r3, [r7, #6]
 800b148:	68ba      	ldr	r2, [r7, #8]
 800b14a:	2100      	movs	r1, #0
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f001 fba9 	bl	800c8a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3710      	adds	r7, #16
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2204      	movs	r2, #4
 800b168:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b16c:	2300      	movs	r3, #0
 800b16e:	2200      	movs	r2, #0
 800b170:	2100      	movs	r1, #0
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f001 fb5c 	bl	800c830 <USBD_LL_Transmit>

  return USBD_OK;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3708      	adds	r7, #8
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800b182:	b580      	push	{r7, lr}
 800b184:	b082      	sub	sp, #8
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2205      	movs	r2, #5
 800b18e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b192:	2300      	movs	r3, #0
 800b194:	2200      	movs	r2, #0
 800b196:	2100      	movs	r1, #0
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f001 fb83 	bl	800c8a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b08a      	sub	sp, #40	; 0x28
 800b1ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1ae:	f107 0314 	add.w	r3, r7, #20
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	601a      	str	r2, [r3, #0]
 800b1b6:	605a      	str	r2, [r3, #4]
 800b1b8:	609a      	str	r2, [r3, #8]
 800b1ba:	60da      	str	r2, [r3, #12]
 800b1bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b1be:	4a70      	ldr	r2, [pc, #448]	; (800b380 <MX_GPIO_Init+0x1d8>)
 800b1c0:	4b6f      	ldr	r3, [pc, #444]	; (800b380 <MX_GPIO_Init+0x1d8>)
 800b1c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b1ca:	4b6d      	ldr	r3, [pc, #436]	; (800b380 <MX_GPIO_Init+0x1d8>)
 800b1cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1d2:	613b      	str	r3, [r7, #16]
 800b1d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b1d6:	4a6a      	ldr	r2, [pc, #424]	; (800b380 <MX_GPIO_Init+0x1d8>)
 800b1d8:	4b69      	ldr	r3, [pc, #420]	; (800b380 <MX_GPIO_Init+0x1d8>)
 800b1da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1dc:	f043 0304 	orr.w	r3, r3, #4
 800b1e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b1e2:	4b67      	ldr	r3, [pc, #412]	; (800b380 <MX_GPIO_Init+0x1d8>)
 800b1e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1e6:	f003 0304 	and.w	r3, r3, #4
 800b1ea:	60fb      	str	r3, [r7, #12]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1ee:	4a64      	ldr	r2, [pc, #400]	; (800b380 <MX_GPIO_Init+0x1d8>)
 800b1f0:	4b63      	ldr	r3, [pc, #396]	; (800b380 <MX_GPIO_Init+0x1d8>)
 800b1f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1f4:	f043 0301 	orr.w	r3, r3, #1
 800b1f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b1fa:	4b61      	ldr	r3, [pc, #388]	; (800b380 <MX_GPIO_Init+0x1d8>)
 800b1fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1fe:	f003 0301 	and.w	r3, r3, #1
 800b202:	60bb      	str	r3, [r7, #8]
 800b204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b206:	4a5e      	ldr	r2, [pc, #376]	; (800b380 <MX_GPIO_Init+0x1d8>)
 800b208:	4b5d      	ldr	r3, [pc, #372]	; (800b380 <MX_GPIO_Init+0x1d8>)
 800b20a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b20c:	f043 0302 	orr.w	r3, r3, #2
 800b210:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b212:	4b5b      	ldr	r3, [pc, #364]	; (800b380 <MX_GPIO_Init+0x1d8>)
 800b214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b216:	f003 0302 	and.w	r3, r3, #2
 800b21a:	607b      	str	r3, [r7, #4]
 800b21c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b21e:	4a58      	ldr	r2, [pc, #352]	; (800b380 <MX_GPIO_Init+0x1d8>)
 800b220:	4b57      	ldr	r3, [pc, #348]	; (800b380 <MX_GPIO_Init+0x1d8>)
 800b222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b224:	f043 0308 	orr.w	r3, r3, #8
 800b228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b22a:	4b55      	ldr	r3, [pc, #340]	; (800b380 <MX_GPIO_Init+0x1d8>)
 800b22c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b22e:	f003 0308 	and.w	r3, r3, #8
 800b232:	603b      	str	r3, [r7, #0]
 800b234:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, O_USART2_DIR_Pin|O_USART1_DIR_Pin, GPIO_PIN_RESET);
 800b236:	2200      	movs	r2, #0
 800b238:	f241 0104 	movw	r1, #4100	; 0x1004
 800b23c:	4851      	ldr	r0, [pc, #324]	; (800b384 <MX_GPIO_Init+0x1dc>)
 800b23e:	f7f8 fbdf 	bl	8003a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O_BT_PWR_GPIO_Port, O_BT_PWR_Pin, GPIO_PIN_SET);
 800b242:	2201      	movs	r2, #1
 800b244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b24c:	f7f8 fbd8 	bl	8003a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = O_USART2_DIR_Pin|O_USART1_DIR_Pin;
 800b250:	f241 0304 	movw	r3, #4100	; 0x1004
 800b254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b256:	2301      	movs	r3, #1
 800b258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b25a:	2300      	movs	r3, #0
 800b25c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b25e:	2300      	movs	r3, #0
 800b260:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b262:	f107 0314 	add.w	r3, r7, #20
 800b266:	4619      	mov	r1, r3
 800b268:	4846      	ldr	r0, [pc, #280]	; (800b384 <MX_GPIO_Init+0x1dc>)
 800b26a:	f7f8 fa37 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_USART2_BREAK_Pin;
 800b26e:	2308      	movs	r3, #8
 800b270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b272:	2300      	movs	r3, #0
 800b274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b276:	2300      	movs	r3, #0
 800b278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(O_USART2_BREAK_GPIO_Port, &GPIO_InitStruct);
 800b27a:	f107 0314 	add.w	r3, r7, #20
 800b27e:	4619      	mov	r1, r3
 800b280:	4840      	ldr	r0, [pc, #256]	; (800b384 <MX_GPIO_Init+0x1dc>)
 800b282:	f7f8 fa2b 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = I_GPIO1_Pin|I_GPIO2_Pin|I_GPIO3_Pin|I_GPIO4_Pin;
 800b286:	23f0      	movs	r3, #240	; 0xf0
 800b288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b28a:	2300      	movs	r3, #0
 800b28c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b28e:	2300      	movs	r3, #0
 800b290:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b292:	f107 0314 	add.w	r3, r7, #20
 800b296:	4619      	mov	r1, r3
 800b298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b29c:	f7f8 fa1e 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_USB_VBUS_Pin;
 800b2a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800b2a6:	4b38      	ldr	r3, [pc, #224]	; (800b388 <MX_GPIO_Init+0x1e0>)
 800b2a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I_USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b2ae:	f107 0314 	add.w	r3, r7, #20
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b2b8:	f7f8 fa10 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_SW2_Pin;
 800b2bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I_SW2_GPIO_Port, &GPIO_InitStruct);
 800b2ca:	f107 0314 	add.w	r3, r7, #20
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b2d4:	f7f8 fa02 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_BT_PWR_Pin;
 800b2d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(O_BT_PWR_GPIO_Port, &GPIO_InitStruct);
 800b2ea:	f107 0314 	add.w	r3, r7, #20
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b2f4:	f7f8 f9f2 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_USART1_BREAK_Pin;
 800b2f8:	2304      	movs	r3, #4
 800b2fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b300:	2300      	movs	r3, #0
 800b302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(O_USART1_BREAK_GPIO_Port, &GPIO_InitStruct);
 800b304:	f107 0314 	add.w	r3, r7, #20
 800b308:	4619      	mov	r1, r3
 800b30a:	4820      	ldr	r0, [pc, #128]	; (800b38c <MX_GPIO_Init+0x1e4>)
 800b30c:	f7f8 f9e6 	bl	80036dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = O_PWM_LED3_Pin;
 800b310:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b316:	2301      	movs	r3, #1
 800b318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b31a:	2300      	movs	r3, #0
 800b31c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b31e:	2300      	movs	r3, #0
 800b320:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(O_PWM_LED3_GPIO_Port, &GPIO_InitStruct);
 800b322:	f107 0314 	add.w	r3, r7, #20
 800b326:	4619      	mov	r1, r3
 800b328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b32c:	f7f8 f9d6 	bl	80036dc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(O_PWM_LED3_GPIO_Port, O_PWM_LED3_Pin, GPIO_PIN_RESET);
 800b330:	2200      	movs	r2, #0
 800b332:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b33a:	f7f8 fb61 	bl	8003a00 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = O_PWM_LED2_Pin|O_PWM_LED1_Pin;
 800b33e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800b342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b344:	2301      	movs	r3, #1
 800b346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b348:	2300      	movs	r3, #0
 800b34a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b34c:	2300      	movs	r3, #0
 800b34e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b350:	f107 0314 	add.w	r3, r7, #20
 800b354:	4619      	mov	r1, r3
 800b356:	480e      	ldr	r0, [pc, #56]	; (800b390 <MX_GPIO_Init+0x1e8>)
 800b358:	f7f8 f9c0 	bl	80036dc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, O_PWM_LED2_Pin|O_PWM_LED1_Pin, GPIO_PIN_RESET);
 800b35c:	2200      	movs	r2, #0
 800b35e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800b362:	480b      	ldr	r0, [pc, #44]	; (800b390 <MX_GPIO_Init+0x1e8>)
 800b364:	f7f8 fb4c 	bl	8003a00 <HAL_GPIO_WritePin>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800b368:	2200      	movs	r2, #0
 800b36a:	2101      	movs	r1, #1
 800b36c:	2017      	movs	r0, #23
 800b36e:	f7f8 f97e 	bl	800366e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800b372:	2017      	movs	r0, #23
 800b374:	f7f8 f997 	bl	80036a6 <HAL_NVIC_EnableIRQ>

}
 800b378:	bf00      	nop
 800b37a:	3728      	adds	r7, #40	; 0x28
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	40021000 	.word	0x40021000
 800b384:	48000800 	.word	0x48000800
 800b388:	10310000 	.word	0x10310000
 800b38c:	48000c00 	.word	0x48000c00
 800b390:	48000400 	.word	0x48000400

0800b394 <gpio_ConfigureToFloating>:

/* USER CODE BEGIN 2 */
void gpio_ConfigureToFloating(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 800b394:	b580      	push	{r7, lr}
 800b396:	b088      	sub	sp, #32
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3a0:	f107 030c 	add.w	r3, r7, #12
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	601a      	str	r2, [r3, #0]
 800b3a8:	605a      	str	r2, [r3, #4]
 800b3aa:	609a      	str	r2, [r3, #8]
 800b3ac:	60da      	str	r2, [r3, #12]
 800b3ae:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800b3b0:	887b      	ldrh	r3, [r7, #2]
 800b3b2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800b3bc:	f107 030c 	add.w	r3, r7, #12
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f7f8 f98a 	bl	80036dc <HAL_GPIO_Init>
}
 800b3c8:	bf00      	nop
 800b3ca:	3720      	adds	r7, #32
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <gpio_ConfigureToPushPull>:
void gpio_ConfigureToPushPull(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b088      	sub	sp, #32
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	460b      	mov	r3, r1
 800b3da:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3dc:	f107 030c 	add.w	r3, r7, #12
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	601a      	str	r2, [r3, #0]
 800b3e4:	605a      	str	r2, [r3, #4]
 800b3e6:	609a      	str	r2, [r3, #8]
 800b3e8:	60da      	str	r2, [r3, #12]
 800b3ea:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800b3ec:	887b      	ldrh	r3, [r7, #2]
 800b3ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3f8:	2303      	movs	r3, #3
 800b3fa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800b3fc:	f107 030c 	add.w	r3, r7, #12
 800b400:	4619      	mov	r1, r3
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f7f8 f96a 	bl	80036dc <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800b408:	887b      	ldrh	r3, [r7, #2]
 800b40a:	2200      	movs	r2, #0
 800b40c:	4619      	mov	r1, r3
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f7f8 faf6 	bl	8003a00 <HAL_GPIO_WritePin>
}
 800b414:	bf00      	nop
 800b416:	3720      	adds	r7, #32
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800b420:	4b1b      	ldr	r3, [pc, #108]	; (800b490 <MX_I2C2_Init+0x74>)
 800b422:	4a1c      	ldr	r2, [pc, #112]	; (800b494 <MX_I2C2_Init+0x78>)
 800b424:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800b426:	4b1a      	ldr	r3, [pc, #104]	; (800b490 <MX_I2C2_Init+0x74>)
 800b428:	4a1b      	ldr	r2, [pc, #108]	; (800b498 <MX_I2C2_Init+0x7c>)
 800b42a:	605a      	str	r2, [r3, #4]
//  hi2c2.Init.Timing = 0x00702991;
  hi2c2.Init.OwnAddress1 = 0;
 800b42c:	4b18      	ldr	r3, [pc, #96]	; (800b490 <MX_I2C2_Init+0x74>)
 800b42e:	2200      	movs	r2, #0
 800b430:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b432:	4b17      	ldr	r3, [pc, #92]	; (800b490 <MX_I2C2_Init+0x74>)
 800b434:	2201      	movs	r2, #1
 800b436:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b438:	4b15      	ldr	r3, [pc, #84]	; (800b490 <MX_I2C2_Init+0x74>)
 800b43a:	2200      	movs	r2, #0
 800b43c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800b43e:	4b14      	ldr	r3, [pc, #80]	; (800b490 <MX_I2C2_Init+0x74>)
 800b440:	2200      	movs	r2, #0
 800b442:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b444:	4b12      	ldr	r3, [pc, #72]	; (800b490 <MX_I2C2_Init+0x74>)
 800b446:	2200      	movs	r2, #0
 800b448:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b44a:	4b11      	ldr	r3, [pc, #68]	; (800b490 <MX_I2C2_Init+0x74>)
 800b44c:	2200      	movs	r2, #0
 800b44e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b450:	4b0f      	ldr	r3, [pc, #60]	; (800b490 <MX_I2C2_Init+0x74>)
 800b452:	2200      	movs	r2, #0
 800b454:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800b456:	480e      	ldr	r0, [pc, #56]	; (800b490 <MX_I2C2_Init+0x74>)
 800b458:	f7f8 fb14 	bl	8003a84 <HAL_I2C_Init>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d001      	beq.n	800b466 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800b462:	f000 f9a3 	bl	800b7ac <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b466:	2100      	movs	r1, #0
 800b468:	4809      	ldr	r0, [pc, #36]	; (800b490 <MX_I2C2_Init+0x74>)
 800b46a:	f7f9 f8d5 	bl	8004618 <HAL_I2CEx_ConfigAnalogFilter>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d001      	beq.n	800b478 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800b474:	f000 f99a 	bl	800b7ac <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800b478:	2100      	movs	r1, #0
 800b47a:	4805      	ldr	r0, [pc, #20]	; (800b490 <MX_I2C2_Init+0x74>)
 800b47c:	f7f9 f917 	bl	80046ae <HAL_I2CEx_ConfigDigitalFilter>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d001      	beq.n	800b48a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800b486:	f000 f991 	bl	800b7ac <Error_Handler>
  }

}
 800b48a:	bf00      	nop
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	2000a3dc 	.word	0x2000a3dc
 800b494:	40005800 	.word	0x40005800
 800b498:	10909cec 	.word	0x10909cec

0800b49c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b08a      	sub	sp, #40	; 0x28
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4a4:	f107 0314 	add.w	r3, r7, #20
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	601a      	str	r2, [r3, #0]
 800b4ac:	605a      	str	r2, [r3, #4]
 800b4ae:	609a      	str	r2, [r3, #8]
 800b4b0:	60da      	str	r2, [r3, #12]
 800b4b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a17      	ldr	r2, [pc, #92]	; (800b518 <HAL_I2C_MspInit+0x7c>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d128      	bne.n	800b510 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b4be:	4a17      	ldr	r2, [pc, #92]	; (800b51c <HAL_I2C_MspInit+0x80>)
 800b4c0:	4b16      	ldr	r3, [pc, #88]	; (800b51c <HAL_I2C_MspInit+0x80>)
 800b4c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4c4:	f043 0302 	orr.w	r3, r3, #2
 800b4c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b4ca:	4b14      	ldr	r3, [pc, #80]	; (800b51c <HAL_I2C_MspInit+0x80>)
 800b4cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4ce:	f003 0302 	and.w	r3, r3, #2
 800b4d2:	613b      	str	r3, [r7, #16]
 800b4d4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b4d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b4da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b4dc:	2312      	movs	r3, #18
 800b4de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4e4:	2303      	movs	r3, #3
 800b4e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b4e8:	2304      	movs	r3, #4
 800b4ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b4ec:	f107 0314 	add.w	r3, r7, #20
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	480b      	ldr	r0, [pc, #44]	; (800b520 <HAL_I2C_MspInit+0x84>)
 800b4f4:	f7f8 f8f2 	bl	80036dc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b4f8:	4a08      	ldr	r2, [pc, #32]	; (800b51c <HAL_I2C_MspInit+0x80>)
 800b4fa:	4b08      	ldr	r3, [pc, #32]	; (800b51c <HAL_I2C_MspInit+0x80>)
 800b4fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b502:	6593      	str	r3, [r2, #88]	; 0x58
 800b504:	4b05      	ldr	r3, [pc, #20]	; (800b51c <HAL_I2C_MspInit+0x80>)
 800b506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b50c:	60fb      	str	r3, [r7, #12]
 800b50e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800b510:	bf00      	nop
 800b512:	3728      	adds	r7, #40	; 0x28
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	40005800 	.word	0x40005800
 800b51c:	40021000 	.word	0x40021000
 800b520:	48000400 	.word	0x48000400

0800b524 <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim1;
LPTIM_HandleTypeDef hlptim2;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	af00      	add	r7, sp, #0

  hlptim1.Instance = LPTIM1;
 800b528:	4b12      	ldr	r3, [pc, #72]	; (800b574 <MX_LPTIM1_Init+0x50>)
 800b52a:	4a13      	ldr	r2, [pc, #76]	; (800b578 <MX_LPTIM1_Init+0x54>)
 800b52c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800b52e:	4b11      	ldr	r3, [pc, #68]	; (800b574 <MX_LPTIM1_Init+0x50>)
 800b530:	2200      	movs	r2, #0
 800b532:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800b534:	4b0f      	ldr	r3, [pc, #60]	; (800b574 <MX_LPTIM1_Init+0x50>)
 800b536:	2200      	movs	r2, #0
 800b538:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800b53a:	4b0e      	ldr	r3, [pc, #56]	; (800b574 <MX_LPTIM1_Init+0x50>)
 800b53c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b540:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800b542:	4b0c      	ldr	r3, [pc, #48]	; (800b574 <MX_LPTIM1_Init+0x50>)
 800b544:	2200      	movs	r2, #0
 800b546:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800b548:	4b0a      	ldr	r3, [pc, #40]	; (800b574 <MX_LPTIM1_Init+0x50>)
 800b54a:	2200      	movs	r2, #0
 800b54c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800b54e:	4b09      	ldr	r3, [pc, #36]	; (800b574 <MX_LPTIM1_Init+0x50>)
 800b550:	2200      	movs	r2, #0
 800b552:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800b554:	4b07      	ldr	r3, [pc, #28]	; (800b574 <MX_LPTIM1_Init+0x50>)
 800b556:	2200      	movs	r2, #0
 800b558:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800b55a:	4b06      	ldr	r3, [pc, #24]	; (800b574 <MX_LPTIM1_Init+0x50>)
 800b55c:	2200      	movs	r2, #0
 800b55e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800b560:	4804      	ldr	r0, [pc, #16]	; (800b574 <MX_LPTIM1_Init+0x50>)
 800b562:	f7f9 f8f1 	bl	8004748 <HAL_LPTIM_Init>
 800b566:	4603      	mov	r3, r0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d001      	beq.n	800b570 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 800b56c:	f000 f91e 	bl	800b7ac <Error_Handler>
  }

}
 800b570:	bf00      	nop
 800b572:	bd80      	pop	{r7, pc}
 800b574:	2000a460 	.word	0x2000a460
 800b578:	40007c00 	.word	0x40007c00

0800b57c <MX_LPTIM2_Init>:
/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	af00      	add	r7, sp, #0

  hlptim2.Instance = LPTIM2;
 800b580:	4b12      	ldr	r3, [pc, #72]	; (800b5cc <MX_LPTIM2_Init+0x50>)
 800b582:	4a13      	ldr	r2, [pc, #76]	; (800b5d0 <MX_LPTIM2_Init+0x54>)
 800b584:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800b586:	4b11      	ldr	r3, [pc, #68]	; (800b5cc <MX_LPTIM2_Init+0x50>)
 800b588:	2200      	movs	r2, #0
 800b58a:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800b58c:	4b0f      	ldr	r3, [pc, #60]	; (800b5cc <MX_LPTIM2_Init+0x50>)
 800b58e:	2200      	movs	r2, #0
 800b590:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800b592:	4b0e      	ldr	r3, [pc, #56]	; (800b5cc <MX_LPTIM2_Init+0x50>)
 800b594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b598:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800b59a:	4b0c      	ldr	r3, [pc, #48]	; (800b5cc <MX_LPTIM2_Init+0x50>)
 800b59c:	2200      	movs	r2, #0
 800b59e:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800b5a0:	4b0a      	ldr	r3, [pc, #40]	; (800b5cc <MX_LPTIM2_Init+0x50>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800b5a6:	4b09      	ldr	r3, [pc, #36]	; (800b5cc <MX_LPTIM2_Init+0x50>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800b5ac:	4b07      	ldr	r3, [pc, #28]	; (800b5cc <MX_LPTIM2_Init+0x50>)
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800b5b2:	4b06      	ldr	r3, [pc, #24]	; (800b5cc <MX_LPTIM2_Init+0x50>)
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 800b5b8:	4804      	ldr	r0, [pc, #16]	; (800b5cc <MX_LPTIM2_Init+0x50>)
 800b5ba:	f7f9 f8c5 	bl	8004748 <HAL_LPTIM_Init>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d001      	beq.n	800b5c8 <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 800b5c4:	f000 f8f2 	bl	800b7ac <Error_Handler>
  }

}
 800b5c8:	bf00      	nop
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	2000a428 	.word	0x2000a428
 800b5d0:	40009400 	.word	0x40009400

0800b5d4 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]

  if(lptimHandle->Instance==LPTIM1)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a1a      	ldr	r2, [pc, #104]	; (800b64c <HAL_LPTIM_MspInit+0x78>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d114      	bne.n	800b610 <HAL_LPTIM_MspInit+0x3c>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800b5e6:	4a1a      	ldr	r2, [pc, #104]	; (800b650 <HAL_LPTIM_MspInit+0x7c>)
 800b5e8:	4b19      	ldr	r3, [pc, #100]	; (800b650 <HAL_LPTIM_MspInit+0x7c>)
 800b5ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b5f0:	6593      	str	r3, [r2, #88]	; 0x58
 800b5f2:	4b17      	ldr	r3, [pc, #92]	; (800b650 <HAL_LPTIM_MspInit+0x7c>)
 800b5f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5fa:	60fb      	str	r3, [r7, #12]
 800b5fc:	68fb      	ldr	r3, [r7, #12]

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800b5fe:	2200      	movs	r2, #0
 800b600:	2100      	movs	r1, #0
 800b602:	2041      	movs	r0, #65	; 0x41
 800b604:	f7f8 f833 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800b608:	2041      	movs	r0, #65	; 0x41
 800b60a:	f7f8 f84c 	bl	80036a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }
}
 800b60e:	e018      	b.n	800b642 <HAL_LPTIM_MspInit+0x6e>
  else if(lptimHandle->Instance==LPTIM2)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a0f      	ldr	r2, [pc, #60]	; (800b654 <HAL_LPTIM_MspInit+0x80>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d113      	bne.n	800b642 <HAL_LPTIM_MspInit+0x6e>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800b61a:	4a0d      	ldr	r2, [pc, #52]	; (800b650 <HAL_LPTIM_MspInit+0x7c>)
 800b61c:	4b0c      	ldr	r3, [pc, #48]	; (800b650 <HAL_LPTIM_MspInit+0x7c>)
 800b61e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b620:	f043 0320 	orr.w	r3, r3, #32
 800b624:	65d3      	str	r3, [r2, #92]	; 0x5c
 800b626:	4b0a      	ldr	r3, [pc, #40]	; (800b650 <HAL_LPTIM_MspInit+0x7c>)
 800b628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b62a:	f003 0320 	and.w	r3, r3, #32
 800b62e:	60bb      	str	r3, [r7, #8]
 800b630:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 800b632:	2200      	movs	r2, #0
 800b634:	2100      	movs	r1, #0
 800b636:	2042      	movs	r0, #66	; 0x42
 800b638:	f7f8 f819 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 800b63c:	2042      	movs	r0, #66	; 0x42
 800b63e:	f7f8 f832 	bl	80036a6 <HAL_NVIC_EnableIRQ>
}
 800b642:	bf00      	nop
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	40007c00 	.word	0x40007c00
 800b650:	40021000 	.word	0x40021000
 800b654:	40009400 	.word	0x40009400

0800b658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b65c:	f7f7 fedc 	bl	8003418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b660:	f000 f81b 	bl	800b69a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b664:	f7ff fda0 	bl	800b1a8 <MX_GPIO_Init>
  MX_I2C2_Init();
 800b668:	f7ff fed8 	bl	800b41c <MX_I2C2_Init>
  MX_LPTIM1_Init();
 800b66c:	f7ff ff5a 	bl	800b524 <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 800b670:	f7ff ff84 	bl	800b57c <MX_LPTIM2_Init>
//  MX_TIM1_Init();
  MX_TIM2_Init();
 800b674:	f000 f992 	bl	800b99c <MX_TIM2_Init>
  MX_TIM3_Init();
 800b678:	f000 f9f0 	bl	800ba5c <MX_TIM3_Init>
  MX_TIM6_Init();
 800b67c:	f000 fa4e 	bl	800bb1c <MX_TIM6_Init>
  //MX_TIM15_Init();
  MX_TIM16_Init();
 800b680:	f000 fa82 	bl	800bb88 <MX_TIM16_Init>
  MX_UART4_Init();
 800b684:	f000 fbda 	bl	800be3c <MX_UART4_Init>
  MX_USART1_UART_Init();
 800b688:	f000 fc08 	bl	800be9c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b68c:	f000 fc38 	bl	800bf00 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800b690:	f000 fd28 	bl	800c0e4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
//  TIM15->CCR4 = 255;
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
  app_main();
 800b694:	f7f7 fd04 	bl	80030a0 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800b698:	e7fe      	b.n	800b698 <main+0x40>

0800b69a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b0b0      	sub	sp, #192	; 0xc0
 800b69e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b6a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b6a4:	2244      	movs	r2, #68	; 0x44
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f001 face 	bl	800cc4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b6ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	601a      	str	r2, [r3, #0]
 800b6b6:	605a      	str	r2, [r3, #4]
 800b6b8:	609a      	str	r2, [r3, #8]
 800b6ba:	60da      	str	r2, [r3, #12]
 800b6bc:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b6be:	463b      	mov	r3, r7
 800b6c0:	2268      	movs	r2, #104	; 0x68
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f001 fac0 	bl	800cc4a <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b6ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b6d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b6d6:	2302      	movs	r3, #2
 800b6d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b6dc:	2303      	movs	r3, #3
 800b6de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 20;
 800b6e8:	2314      	movs	r3, #20
 800b6ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800b6ee:	2307      	movs	r3, #7
 800b6f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800b6fa:	2302      	movs	r3, #2
 800b6fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b700:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b704:	4618      	mov	r0, r3
 800b706:	f7fa f94f 	bl	80059a8 <HAL_RCC_OscConfig>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d001      	beq.n	800b714 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800b710:	f000 f84c 	bl	800b7ac <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b714:	230f      	movs	r3, #15
 800b716:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b718:	2303      	movs	r3, #3
 800b71a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b71c:	2300      	movs	r3, #0
 800b71e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b720:	2300      	movs	r3, #0
 800b722:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b724:	2300      	movs	r3, #0
 800b726:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800b728:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b72c:	2104      	movs	r1, #4
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fa fce0 	bl	80060f4 <HAL_RCC_ClockConfig>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	d001      	beq.n	800b73e <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800b73a:	f000 f837 	bl	800b7ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800b73e:	f242 638b 	movw	r3, #9867	; 0x268b
 800b742:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_LPTIM1
                              |RCC_PERIPHCLK_LPTIM2|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800b744:	2300      	movs	r3, #0
 800b746:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b748:	2300      	movs	r3, #0
 800b74a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800b74c:	2300      	movs	r3, #0
 800b74e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800b750:	2300      	movs	r3, #0
 800b752:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800b754:	2300      	movs	r3, #0
 800b756:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 800b758:	2300      	movs	r3, #0
 800b75a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b75c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b760:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800b762:	2303      	movs	r3, #3
 800b764:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800b766:	2301      	movs	r3, #1
 800b768:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800b76a:	230c      	movs	r3, #12
 800b76c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800b76e:	2307      	movs	r3, #7
 800b770:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800b772:	2302      	movs	r3, #2
 800b774:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800b776:	2302      	movs	r3, #2
 800b778:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800b77a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b77e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b780:	463b      	mov	r3, r7
 800b782:	4618      	mov	r0, r3
 800b784:	f7fa fec8 	bl	8006518 <HAL_RCCEx_PeriphCLKConfig>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d001      	beq.n	800b792 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800b78e:	f000 f80d 	bl	800b7ac <Error_Handler>
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800b792:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b796:	f7fa f8a1 	bl	80058dc <HAL_PWREx_ControlVoltageScaling>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d001      	beq.n	800b7a4 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800b7a0:	f000 f804 	bl	800b7ac <Error_Handler>
  }
}
 800b7a4:	bf00      	nop
 800b7a6:	37c0      	adds	r7, #192	; 0xc0
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800b7b0:	bf00      	nop
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
	...

0800b7bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b7c2:	4a0f      	ldr	r2, [pc, #60]	; (800b800 <HAL_MspInit+0x44>)
 800b7c4:	4b0e      	ldr	r3, [pc, #56]	; (800b800 <HAL_MspInit+0x44>)
 800b7c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7c8:	f043 0301 	orr.w	r3, r3, #1
 800b7cc:	6613      	str	r3, [r2, #96]	; 0x60
 800b7ce:	4b0c      	ldr	r3, [pc, #48]	; (800b800 <HAL_MspInit+0x44>)
 800b7d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7d2:	f003 0301 	and.w	r3, r3, #1
 800b7d6:	607b      	str	r3, [r7, #4]
 800b7d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b7da:	4a09      	ldr	r2, [pc, #36]	; (800b800 <HAL_MspInit+0x44>)
 800b7dc:	4b08      	ldr	r3, [pc, #32]	; (800b800 <HAL_MspInit+0x44>)
 800b7de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7e4:	6593      	str	r3, [r2, #88]	; 0x58
 800b7e6:	4b06      	ldr	r3, [pc, #24]	; (800b800 <HAL_MspInit+0x44>)
 800b7e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7ee:	603b      	str	r3, [r7, #0]
 800b7f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b7f2:	bf00      	nop
 800b7f4:	370c      	adds	r7, #12
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr
 800b7fe:	bf00      	nop
 800b800:	40021000 	.word	0x40021000

0800b804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b804:	b480      	push	{r7}
 800b806:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b808:	bf00      	nop
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr

0800b812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b812:	b480      	push	{r7}
 800b814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b816:	e7fe      	b.n	800b816 <HardFault_Handler+0x4>

0800b818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b818:	b480      	push	{r7}
 800b81a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b81c:	e7fe      	b.n	800b81c <MemManage_Handler+0x4>

0800b81e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b81e:	b480      	push	{r7}
 800b820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b822:	e7fe      	b.n	800b822 <BusFault_Handler+0x4>

0800b824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b824:	b480      	push	{r7}
 800b826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b828:	e7fe      	b.n	800b828 <UsageFault_Handler+0x4>

0800b82a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b82a:	b480      	push	{r7}
 800b82c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b82e:	bf00      	nop
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b838:	b480      	push	{r7}
 800b83a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b83c:	bf00      	nop
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr

0800b846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b846:	b480      	push	{r7}
 800b848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b84a:	bf00      	nop
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b858:	f7f7 fe1a 	bl	8003490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  app_1ms();
 800b85c:	f7f7 fc54 	bl	8003108 <app_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 800b860:	bf00      	nop
 800b862:	bd80      	pop	{r7, pc}

0800b864 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800b868:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b86c:	f7f8 f8f2 	bl	8003a54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800b870:	bf00      	nop
 800b872:	bd80      	pop	{r7, pc}

0800b874 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b878:	4803      	ldr	r0, [pc, #12]	; (800b888 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800b87a:	f7fb f9fd 	bl	8006c78 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800b87e:	4803      	ldr	r0, [pc, #12]	; (800b88c <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800b880:	f7fb f9fa 	bl	8006c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800b884:	bf00      	nop
 800b886:	bd80      	pop	{r7, pc}
 800b888:	2000a558 	.word	0x2000a558
 800b88c:	2000a498 	.word	0x2000a498

0800b890 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b894:	4802      	ldr	r0, [pc, #8]	; (800b8a0 <TIM1_TRG_COM_IRQHandler+0x10>)
 800b896:	f7fb f9ef 	bl	8006c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800b89a:	bf00      	nop
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	2000a558 	.word	0x2000a558

0800b8a4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b8a8:	4802      	ldr	r0, [pc, #8]	; (800b8b4 <TIM1_CC_IRQHandler+0x10>)
 800b8aa:	f7fb f9e5 	bl	8006c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800b8ae:	bf00      	nop
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	2000a558 	.word	0x2000a558

0800b8b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b8bc:	4802      	ldr	r0, [pc, #8]	; (800b8c8 <TIM2_IRQHandler+0x10>)
 800b8be:	f7fb f9db 	bl	8006c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b8c2:	bf00      	nop
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	2000a598 	.word	0x2000a598

0800b8cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800b8d0:	4802      	ldr	r0, [pc, #8]	; (800b8dc <TIM3_IRQHandler+0x10>)
 800b8d2:	f7fb f9d1 	bl	8006c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800b8d6:	bf00      	nop
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	2000a4d8 	.word	0x2000a4d8

0800b8e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b8e4:	4802      	ldr	r0, [pc, #8]	; (800b8f0 <TIM6_DAC_IRQHandler+0x10>)
 800b8e6:	f7fb f9c7 	bl	8006c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b8ea:	bf00      	nop
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	2000a518 	.word	0x2000a518

0800b8f4 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800b8f8:	4802      	ldr	r0, [pc, #8]	; (800b904 <LPTIM1_IRQHandler+0x10>)
 800b8fa:	f7f8 ffaf 	bl	800485c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800b8fe:	bf00      	nop
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	2000a460 	.word	0x2000a460

0800b908 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 800b90c:	4802      	ldr	r0, [pc, #8]	; (800b918 <LPTIM2_IRQHandler+0x10>)
 800b90e:	f7f8 ffa5 	bl	800485c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 800b912:	bf00      	nop
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	2000a428 	.word	0x2000a428

0800b91c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800b920:	4802      	ldr	r0, [pc, #8]	; (800b92c <USB_IRQHandler+0x10>)
 800b922:	f7f9 f977 	bl	8004c14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800b926:	bf00      	nop
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	2000ba1c 	.word	0x2000ba1c

0800b930 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800b930:	b480      	push	{r7}
 800b932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b934:	4a17      	ldr	r2, [pc, #92]	; (800b994 <SystemInit+0x64>)
 800b936:	4b17      	ldr	r3, [pc, #92]	; (800b994 <SystemInit+0x64>)
 800b938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b93c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800b944:	4a14      	ldr	r2, [pc, #80]	; (800b998 <SystemInit+0x68>)
 800b946:	4b14      	ldr	r3, [pc, #80]	; (800b998 <SystemInit+0x68>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f043 0301 	orr.w	r3, r3, #1
 800b94e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800b950:	4b11      	ldr	r3, [pc, #68]	; (800b998 <SystemInit+0x68>)
 800b952:	2200      	movs	r2, #0
 800b954:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800b956:	4a10      	ldr	r2, [pc, #64]	; (800b998 <SystemInit+0x68>)
 800b958:	4b0f      	ldr	r3, [pc, #60]	; (800b998 <SystemInit+0x68>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800b960:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800b964:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800b966:	4b0c      	ldr	r3, [pc, #48]	; (800b998 <SystemInit+0x68>)
 800b968:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b96c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b96e:	4a0a      	ldr	r2, [pc, #40]	; (800b998 <SystemInit+0x68>)
 800b970:	4b09      	ldr	r3, [pc, #36]	; (800b998 <SystemInit+0x68>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b978:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800b97a:	4b07      	ldr	r3, [pc, #28]	; (800b998 <SystemInit+0x68>)
 800b97c:	2200      	movs	r2, #0
 800b97e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b980:	4b04      	ldr	r3, [pc, #16]	; (800b994 <SystemInit+0x64>)
 800b982:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b986:	609a      	str	r2, [r3, #8]
#endif
}
 800b988:	bf00      	nop
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	e000ed00 	.word	0xe000ed00
 800b998:	40021000 	.word	0x40021000

0800b99c <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b088      	sub	sp, #32
 800b9a0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b9a2:	f107 0314 	add.w	r3, r7, #20
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	601a      	str	r2, [r3, #0]
 800b9aa:	605a      	str	r2, [r3, #4]
 800b9ac:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800b9ae:	1d3b      	adds	r3, r7, #4
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	601a      	str	r2, [r3, #0]
 800b9b4:	605a      	str	r2, [r3, #4]
 800b9b6:	609a      	str	r2, [r3, #8]
 800b9b8:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800b9ba:	4b27      	ldr	r3, [pc, #156]	; (800ba58 <MX_TIM2_Init+0xbc>)
 800b9bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b9c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800b9c2:	4b25      	ldr	r3, [pc, #148]	; (800ba58 <MX_TIM2_Init+0xbc>)
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b9c8:	4b23      	ldr	r3, [pc, #140]	; (800ba58 <MX_TIM2_Init+0xbc>)
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800b9ce:	4b22      	ldr	r3, [pc, #136]	; (800ba58 <MX_TIM2_Init+0xbc>)
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b9d4:	4b20      	ldr	r3, [pc, #128]	; (800ba58 <MX_TIM2_Init+0xbc>)
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b9da:	4b1f      	ldr	r3, [pc, #124]	; (800ba58 <MX_TIM2_Init+0xbc>)
 800b9dc:	2200      	movs	r2, #0
 800b9de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800b9e0:	481d      	ldr	r0, [pc, #116]	; (800ba58 <MX_TIM2_Init+0xbc>)
 800b9e2:	f7fb f91e 	bl	8006c22 <HAL_TIM_IC_Init>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d001      	beq.n	800b9f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800b9ec:	f7ff fede 	bl	800b7ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b9f8:	f107 0314 	add.w	r3, r7, #20
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	4816      	ldr	r0, [pc, #88]	; (800ba58 <MX_TIM2_Init+0xbc>)
 800ba00:	f7fb fc9e 	bl	8007340 <HAL_TIMEx_MasterConfigSynchronization>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d001      	beq.n	800ba0e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800ba0a:	f7ff fecf 	bl	800b7ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ba12:	2301      	movs	r3, #1
 800ba14:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ba16:	2300      	movs	r3, #0
 800ba18:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ba1e:	1d3b      	adds	r3, r7, #4
 800ba20:	2200      	movs	r2, #0
 800ba22:	4619      	mov	r1, r3
 800ba24:	480c      	ldr	r0, [pc, #48]	; (800ba58 <MX_TIM2_Init+0xbc>)
 800ba26:	f7fb fa46 	bl	8006eb6 <HAL_TIM_IC_ConfigChannel>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d001      	beq.n	800ba34 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800ba30:	f7ff febc 	bl	800b7ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800ba34:	2302      	movs	r3, #2
 800ba36:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800ba38:	1d3b      	adds	r3, r7, #4
 800ba3a:	2204      	movs	r2, #4
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	4806      	ldr	r0, [pc, #24]	; (800ba58 <MX_TIM2_Init+0xbc>)
 800ba40:	f7fb fa39 	bl	8006eb6 <HAL_TIM_IC_ConfigChannel>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d001      	beq.n	800ba4e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800ba4a:	f7ff feaf 	bl	800b7ac <Error_Handler>
  }

}
 800ba4e:	bf00      	nop
 800ba50:	3720      	adds	r7, #32
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	2000a598 	.word	0x2000a598

0800ba5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b088      	sub	sp, #32
 800ba60:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ba62:	f107 0314 	add.w	r3, r7, #20
 800ba66:	2200      	movs	r2, #0
 800ba68:	601a      	str	r2, [r3, #0]
 800ba6a:	605a      	str	r2, [r3, #4]
 800ba6c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800ba6e:	1d3b      	adds	r3, r7, #4
 800ba70:	2200      	movs	r2, #0
 800ba72:	601a      	str	r2, [r3, #0]
 800ba74:	605a      	str	r2, [r3, #4]
 800ba76:	609a      	str	r2, [r3, #8]
 800ba78:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 800ba7a:	4b26      	ldr	r3, [pc, #152]	; (800bb14 <MX_TIM3_Init+0xb8>)
 800ba7c:	4a26      	ldr	r2, [pc, #152]	; (800bb18 <MX_TIM3_Init+0xbc>)
 800ba7e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800ba80:	4b24      	ldr	r3, [pc, #144]	; (800bb14 <MX_TIM3_Init+0xb8>)
 800ba82:	2200      	movs	r2, #0
 800ba84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ba86:	4b23      	ldr	r3, [pc, #140]	; (800bb14 <MX_TIM3_Init+0xb8>)
 800ba88:	2200      	movs	r2, #0
 800ba8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800ba8c:	4b21      	ldr	r3, [pc, #132]	; (800bb14 <MX_TIM3_Init+0xb8>)
 800ba8e:	2200      	movs	r2, #0
 800ba90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ba92:	4b20      	ldr	r3, [pc, #128]	; (800bb14 <MX_TIM3_Init+0xb8>)
 800ba94:	2200      	movs	r2, #0
 800ba96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ba98:	4b1e      	ldr	r3, [pc, #120]	; (800bb14 <MX_TIM3_Init+0xb8>)
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800ba9e:	481d      	ldr	r0, [pc, #116]	; (800bb14 <MX_TIM3_Init+0xb8>)
 800baa0:	f7fb f8bf 	bl	8006c22 <HAL_TIM_IC_Init>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d001      	beq.n	800baae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800baaa:	f7ff fe7f 	bl	800b7ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800baae:	2300      	movs	r3, #0
 800bab0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bab2:	2300      	movs	r3, #0
 800bab4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800bab6:	f107 0314 	add.w	r3, r7, #20
 800baba:	4619      	mov	r1, r3
 800babc:	4815      	ldr	r0, [pc, #84]	; (800bb14 <MX_TIM3_Init+0xb8>)
 800babe:	f7fb fc3f 	bl	8007340 <HAL_TIMEx_MasterConfigSynchronization>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d001      	beq.n	800bacc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800bac8:	f7ff fe70 	bl	800b7ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800bacc:	2300      	movs	r3, #0
 800bace:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800bad0:	2301      	movs	r3, #1
 800bad2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800bad4:	2300      	movs	r3, #0
 800bad6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800bad8:	2300      	movs	r3, #0
 800bada:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800badc:	1d3b      	adds	r3, r7, #4
 800bade:	2200      	movs	r2, #0
 800bae0:	4619      	mov	r1, r3
 800bae2:	480c      	ldr	r0, [pc, #48]	; (800bb14 <MX_TIM3_Init+0xb8>)
 800bae4:	f7fb f9e7 	bl	8006eb6 <HAL_TIM_IC_ConfigChannel>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d001      	beq.n	800baf2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800baee:	f7ff fe5d 	bl	800b7ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800baf2:	2302      	movs	r3, #2
 800baf4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800baf6:	1d3b      	adds	r3, r7, #4
 800baf8:	2204      	movs	r2, #4
 800bafa:	4619      	mov	r1, r3
 800bafc:	4805      	ldr	r0, [pc, #20]	; (800bb14 <MX_TIM3_Init+0xb8>)
 800bafe:	f7fb f9da 	bl	8006eb6 <HAL_TIM_IC_ConfigChannel>
 800bb02:	4603      	mov	r3, r0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d001      	beq.n	800bb0c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800bb08:	f7ff fe50 	bl	800b7ac <Error_Handler>
  }

}
 800bb0c:	bf00      	nop
 800bb0e:	3720      	adds	r7, #32
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	2000a4d8 	.word	0x2000a4d8
 800bb18:	40000400 	.word	0x40000400

0800bb1c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bb22:	1d3b      	adds	r3, r7, #4
 800bb24:	2200      	movs	r2, #0
 800bb26:	601a      	str	r2, [r3, #0]
 800bb28:	605a      	str	r2, [r3, #4]
 800bb2a:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 800bb2c:	4b14      	ldr	r3, [pc, #80]	; (800bb80 <MX_TIM6_Init+0x64>)
 800bb2e:	4a15      	ldr	r2, [pc, #84]	; (800bb84 <MX_TIM6_Init+0x68>)
 800bb30:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80;
 800bb32:	4b13      	ldr	r3, [pc, #76]	; (800bb80 <MX_TIM6_Init+0x64>)
 800bb34:	2250      	movs	r2, #80	; 0x50
 800bb36:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bb38:	4b11      	ldr	r3, [pc, #68]	; (800bb80 <MX_TIM6_Init+0x64>)
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 92;
 800bb3e:	4b10      	ldr	r3, [pc, #64]	; (800bb80 <MX_TIM6_Init+0x64>)
 800bb40:	225c      	movs	r2, #92	; 0x5c
 800bb42:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bb44:	4b0e      	ldr	r3, [pc, #56]	; (800bb80 <MX_TIM6_Init+0x64>)
 800bb46:	2200      	movs	r2, #0
 800bb48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800bb4a:	480d      	ldr	r0, [pc, #52]	; (800bb80 <MX_TIM6_Init+0x64>)
 800bb4c:	f7fb f83e 	bl	8006bcc <HAL_TIM_Base_Init>
 800bb50:	4603      	mov	r3, r0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d001      	beq.n	800bb5a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800bb56:	f7ff fe29 	bl	800b7ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800bb62:	1d3b      	adds	r3, r7, #4
 800bb64:	4619      	mov	r1, r3
 800bb66:	4806      	ldr	r0, [pc, #24]	; (800bb80 <MX_TIM6_Init+0x64>)
 800bb68:	f7fb fbea 	bl	8007340 <HAL_TIMEx_MasterConfigSynchronization>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d001      	beq.n	800bb76 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800bb72:	f7ff fe1b 	bl	800b7ac <Error_Handler>
  }

}
 800bb76:	bf00      	nop
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	2000a518 	.word	0x2000a518
 800bb84:	40001000 	.word	0x40001000

0800bb88 <MX_TIM16_Init>:
  HAL_TIM_MspPostInit(&htim15);

}
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800bb8c:	4b0f      	ldr	r3, [pc, #60]	; (800bbcc <MX_TIM16_Init+0x44>)
 800bb8e:	4a10      	ldr	r2, [pc, #64]	; (800bbd0 <MX_TIM16_Init+0x48>)
 800bb90:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800bb92:	4b0e      	ldr	r3, [pc, #56]	; (800bbcc <MX_TIM16_Init+0x44>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bb98:	4b0c      	ldr	r3, [pc, #48]	; (800bbcc <MX_TIM16_Init+0x44>)
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 800bb9e:	4b0b      	ldr	r3, [pc, #44]	; (800bbcc <MX_TIM16_Init+0x44>)
 800bba0:	2200      	movs	r2, #0
 800bba2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bba4:	4b09      	ldr	r3, [pc, #36]	; (800bbcc <MX_TIM16_Init+0x44>)
 800bba6:	2200      	movs	r2, #0
 800bba8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800bbaa:	4b08      	ldr	r3, [pc, #32]	; (800bbcc <MX_TIM16_Init+0x44>)
 800bbac:	2200      	movs	r2, #0
 800bbae:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bbb0:	4b06      	ldr	r3, [pc, #24]	; (800bbcc <MX_TIM16_Init+0x44>)
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800bbb6:	4805      	ldr	r0, [pc, #20]	; (800bbcc <MX_TIM16_Init+0x44>)
 800bbb8:	f7fb f808 	bl	8006bcc <HAL_TIM_Base_Init>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d001      	beq.n	800bbc6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800bbc2:	f7ff fdf3 	bl	800b7ac <Error_Handler>
  }

}
 800bbc6:	bf00      	nop
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	2000a5d8 	.word	0x2000a5d8
 800bbd0:	40014400 	.word	0x40014400

0800bbd4 <HAL_TIM_IC_MspInit>:
  /* USER CODE END TIM1_MspInit 1 */
  }
}

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b08c      	sub	sp, #48	; 0x30
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbdc:	f107 031c 	add.w	r3, r7, #28
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	601a      	str	r2, [r3, #0]
 800bbe4:	605a      	str	r2, [r3, #4]
 800bbe6:	609a      	str	r2, [r3, #8]
 800bbe8:	60da      	str	r2, [r3, #12]
 800bbea:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbf4:	d131      	bne.n	800bc5a <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800bbf6:	4a35      	ldr	r2, [pc, #212]	; (800bccc <HAL_TIM_IC_MspInit+0xf8>)
 800bbf8:	4b34      	ldr	r3, [pc, #208]	; (800bccc <HAL_TIM_IC_MspInit+0xf8>)
 800bbfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbfc:	f043 0301 	orr.w	r3, r3, #1
 800bc00:	6593      	str	r3, [r2, #88]	; 0x58
 800bc02:	4b32      	ldr	r3, [pc, #200]	; (800bccc <HAL_TIM_IC_MspInit+0xf8>)
 800bc04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc06:	f003 0301 	and.w	r3, r3, #1
 800bc0a:	61bb      	str	r3, [r7, #24]
 800bc0c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc0e:	4a2f      	ldr	r2, [pc, #188]	; (800bccc <HAL_TIM_IC_MspInit+0xf8>)
 800bc10:	4b2e      	ldr	r3, [pc, #184]	; (800bccc <HAL_TIM_IC_MspInit+0xf8>)
 800bc12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc14:	f043 0301 	orr.w	r3, r3, #1
 800bc18:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bc1a:	4b2c      	ldr	r3, [pc, #176]	; (800bccc <HAL_TIM_IC_MspInit+0xf8>)
 800bc1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc1e:	f003 0301 	and.w	r3, r3, #1
 800bc22:	617b      	str	r3, [r7, #20]
 800bc24:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800bc26:	2303      	movs	r3, #3
 800bc28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc2a:	2302      	movs	r3, #2
 800bc2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc32:	2300      	movs	r3, #0
 800bc34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800bc36:	2301      	movs	r3, #1
 800bc38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc3a:	f107 031c 	add.w	r3, r7, #28
 800bc3e:	4619      	mov	r1, r3
 800bc40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bc44:	f7f7 fd4a 	bl	80036dc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800bc48:	2200      	movs	r2, #0
 800bc4a:	2100      	movs	r1, #0
 800bc4c:	201c      	movs	r0, #28
 800bc4e:	f7f7 fd0e 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800bc52:	201c      	movs	r0, #28
 800bc54:	f7f7 fd27 	bl	80036a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800bc58:	e034      	b.n	800bcc4 <HAL_TIM_IC_MspInit+0xf0>
  else if(tim_icHandle->Instance==TIM3)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4a1c      	ldr	r2, [pc, #112]	; (800bcd0 <HAL_TIM_IC_MspInit+0xfc>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d12f      	bne.n	800bcc4 <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800bc64:	4a19      	ldr	r2, [pc, #100]	; (800bccc <HAL_TIM_IC_MspInit+0xf8>)
 800bc66:	4b19      	ldr	r3, [pc, #100]	; (800bccc <HAL_TIM_IC_MspInit+0xf8>)
 800bc68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc6a:	f043 0302 	orr.w	r3, r3, #2
 800bc6e:	6593      	str	r3, [r2, #88]	; 0x58
 800bc70:	4b16      	ldr	r3, [pc, #88]	; (800bccc <HAL_TIM_IC_MspInit+0xf8>)
 800bc72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc74:	f003 0302 	and.w	r3, r3, #2
 800bc78:	613b      	str	r3, [r7, #16]
 800bc7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bc7c:	4a13      	ldr	r2, [pc, #76]	; (800bccc <HAL_TIM_IC_MspInit+0xf8>)
 800bc7e:	4b13      	ldr	r3, [pc, #76]	; (800bccc <HAL_TIM_IC_MspInit+0xf8>)
 800bc80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc82:	f043 0302 	orr.w	r3, r3, #2
 800bc86:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bc88:	4b10      	ldr	r3, [pc, #64]	; (800bccc <HAL_TIM_IC_MspInit+0xf8>)
 800bc8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc8c:	f003 0302 	and.w	r3, r3, #2
 800bc90:	60fb      	str	r3, [r7, #12]
 800bc92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800bc94:	2330      	movs	r3, #48	; 0x30
 800bc96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc98:	2302      	movs	r3, #2
 800bc9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bca0:	2300      	movs	r3, #0
 800bca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800bca4:	2302      	movs	r3, #2
 800bca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bca8:	f107 031c 	add.w	r3, r7, #28
 800bcac:	4619      	mov	r1, r3
 800bcae:	4809      	ldr	r0, [pc, #36]	; (800bcd4 <HAL_TIM_IC_MspInit+0x100>)
 800bcb0:	f7f7 fd14 	bl	80036dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	201d      	movs	r0, #29
 800bcba:	f7f7 fcd8 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800bcbe:	201d      	movs	r0, #29
 800bcc0:	f7f7 fcf1 	bl	80036a6 <HAL_NVIC_EnableIRQ>
}
 800bcc4:	bf00      	nop
 800bcc6:	3730      	adds	r7, #48	; 0x30
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	40021000 	.word	0x40021000
 800bcd0:	40000400 	.word	0x40000400
 800bcd4:	48000400 	.word	0x48000400

0800bcd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a27      	ldr	r2, [pc, #156]	; (800bd84 <HAL_TIM_Base_MspInit+0xac>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d114      	bne.n	800bd14 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800bcea:	4a27      	ldr	r2, [pc, #156]	; (800bd88 <HAL_TIM_Base_MspInit+0xb0>)
 800bcec:	4b26      	ldr	r3, [pc, #152]	; (800bd88 <HAL_TIM_Base_MspInit+0xb0>)
 800bcee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcf0:	f043 0310 	orr.w	r3, r3, #16
 800bcf4:	6593      	str	r3, [r2, #88]	; 0x58
 800bcf6:	4b24      	ldr	r3, [pc, #144]	; (800bd88 <HAL_TIM_Base_MspInit+0xb0>)
 800bcf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcfa:	f003 0310 	and.w	r3, r3, #16
 800bcfe:	617b      	str	r3, [r7, #20]
 800bd00:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800bd02:	2200      	movs	r2, #0
 800bd04:	2100      	movs	r1, #0
 800bd06:	2036      	movs	r0, #54	; 0x36
 800bd08:	f7f7 fcb1 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800bd0c:	2036      	movs	r0, #54	; 0x36
 800bd0e:	f7f7 fcca 	bl	80036a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800bd12:	e032      	b.n	800bd7a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM15)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a1c      	ldr	r2, [pc, #112]	; (800bd8c <HAL_TIM_Base_MspInit+0xb4>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d114      	bne.n	800bd48 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800bd1e:	4a1a      	ldr	r2, [pc, #104]	; (800bd88 <HAL_TIM_Base_MspInit+0xb0>)
 800bd20:	4b19      	ldr	r3, [pc, #100]	; (800bd88 <HAL_TIM_Base_MspInit+0xb0>)
 800bd22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd28:	6613      	str	r3, [r2, #96]	; 0x60
 800bd2a:	4b17      	ldr	r3, [pc, #92]	; (800bd88 <HAL_TIM_Base_MspInit+0xb0>)
 800bd2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd32:	613b      	str	r3, [r7, #16]
 800bd34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800bd36:	2200      	movs	r2, #0
 800bd38:	2100      	movs	r1, #0
 800bd3a:	2018      	movs	r0, #24
 800bd3c:	f7f7 fc97 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800bd40:	2018      	movs	r0, #24
 800bd42:	f7f7 fcb0 	bl	80036a6 <HAL_NVIC_EnableIRQ>
}
 800bd46:	e018      	b.n	800bd7a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM16)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a10      	ldr	r2, [pc, #64]	; (800bd90 <HAL_TIM_Base_MspInit+0xb8>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d113      	bne.n	800bd7a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800bd52:	4a0d      	ldr	r2, [pc, #52]	; (800bd88 <HAL_TIM_Base_MspInit+0xb0>)
 800bd54:	4b0c      	ldr	r3, [pc, #48]	; (800bd88 <HAL_TIM_Base_MspInit+0xb0>)
 800bd56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd5c:	6613      	str	r3, [r2, #96]	; 0x60
 800bd5e:	4b0a      	ldr	r3, [pc, #40]	; (800bd88 <HAL_TIM_Base_MspInit+0xb0>)
 800bd60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd66:	60fb      	str	r3, [r7, #12]
 800bd68:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	2100      	movs	r1, #0
 800bd6e:	2019      	movs	r0, #25
 800bd70:	f7f7 fc7d 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800bd74:	2019      	movs	r0, #25
 800bd76:	f7f7 fc96 	bl	80036a6 <HAL_NVIC_EnableIRQ>
}
 800bd7a:	bf00      	nop
 800bd7c:	3718      	adds	r7, #24
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	40001000 	.word	0x40001000
 800bd88:	40021000 	.word	0x40021000
 800bd8c:	40014000 	.word	0x40014000
 800bd90:	40014400 	.word	0x40014400

0800bd94 <tim_setNewTimeAndStart>:
  /* USER CODE END TIM16_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void tim_setNewTimeAndStart(TIM_TypeDef *tim, uint32_t time){
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
	tim->CR1 &= ~TIM_CR1_CEN;	//Stop counter
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f023 0201 	bic.w	r2, r3, #1
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	601a      	str	r2, [r3, #0]
	tim->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f043 0202 	orr.w	r2, r3, #2
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	601a      	str	r2, [r3, #0]
	tim->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	f023 0201 	bic.w	r2, r3, #1
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	611a      	str	r2, [r3, #16]
	tim->ARR = time;				//Load new time
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	683a      	ldr	r2, [r7, #0]
 800bdc6:	62da      	str	r2, [r3, #44]	; 0x2c
	tim->EGR |= TIM_EGR_UG;		//Force reload of shadow register -> Start from beginning
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	695b      	ldr	r3, [r3, #20]
 800bdcc:	f043 0201 	orr.w	r2, r3, #1
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	615a      	str	r2, [r3, #20]
	tim->CR1 &= ~TIM_CR1_UDIS;	//Allow new updates to be triggered
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f023 0202 	bic.w	r2, r3, #2
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	601a      	str	r2, [r3, #0]
	tim->DIER |= TIM_DIER_UIE;	//Enable update interrupts
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	f043 0201 	orr.w	r2, r3, #1
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	60da      	str	r2, [r3, #12]
	tim->CR1 |= TIM_CR1_CEN;		//Enable counter
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f043 0201 	orr.w	r2, r3, #1
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	601a      	str	r2, [r3, #0]
}
 800bdf8:	bf00      	nop
 800bdfa:	370c      	adds	r7, #12
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr

0800be04 <tim_stop>:
void tim_stop(TIM_TypeDef *tim){
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
	tim->CR1 &= ~TIM_CR1_CEN;	//Stop counter
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f023 0201 	bic.w	r2, r3, #1
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	601a      	str	r2, [r3, #0]
	tim->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f043 0202 	orr.w	r2, r3, #2
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	601a      	str	r2, [r3, #0]
	tim->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	691b      	ldr	r3, [r3, #16]
 800be28:	f023 0201 	bic.w	r2, r3, #1
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	611a      	str	r2, [r3, #16]
}
 800be30:	bf00      	nop
 800be32:	370c      	adds	r7, #12
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr

0800be3c <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800be40:	4b14      	ldr	r3, [pc, #80]	; (800be94 <MX_UART4_Init+0x58>)
 800be42:	4a15      	ldr	r2, [pc, #84]	; (800be98 <MX_UART4_Init+0x5c>)
 800be44:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800be46:	4b13      	ldr	r3, [pc, #76]	; (800be94 <MX_UART4_Init+0x58>)
 800be48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800be4c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800be4e:	4b11      	ldr	r3, [pc, #68]	; (800be94 <MX_UART4_Init+0x58>)
 800be50:	2200      	movs	r2, #0
 800be52:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800be54:	4b0f      	ldr	r3, [pc, #60]	; (800be94 <MX_UART4_Init+0x58>)
 800be56:	2200      	movs	r2, #0
 800be58:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800be5a:	4b0e      	ldr	r3, [pc, #56]	; (800be94 <MX_UART4_Init+0x58>)
 800be5c:	2200      	movs	r2, #0
 800be5e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800be60:	4b0c      	ldr	r3, [pc, #48]	; (800be94 <MX_UART4_Init+0x58>)
 800be62:	220c      	movs	r2, #12
 800be64:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800be66:	4b0b      	ldr	r3, [pc, #44]	; (800be94 <MX_UART4_Init+0x58>)
 800be68:	2200      	movs	r2, #0
 800be6a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800be6c:	4b09      	ldr	r3, [pc, #36]	; (800be94 <MX_UART4_Init+0x58>)
 800be6e:	2200      	movs	r2, #0
 800be70:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800be72:	4b08      	ldr	r3, [pc, #32]	; (800be94 <MX_UART4_Init+0x58>)
 800be74:	2200      	movs	r2, #0
 800be76:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800be78:	4b06      	ldr	r3, [pc, #24]	; (800be94 <MX_UART4_Init+0x58>)
 800be7a:	2200      	movs	r2, #0
 800be7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800be7e:	4805      	ldr	r0, [pc, #20]	; (800be94 <MX_UART4_Init+0x58>)
 800be80:	f7fb fad2 	bl	8007428 <HAL_UART_Init>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d001      	beq.n	800be8e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800be8a:	f7ff fc8f 	bl	800b7ac <Error_Handler>
  }

}
 800be8e:	bf00      	nop
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	2000a690 	.word	0x2000a690
 800be98:	40004c00 	.word	0x40004c00

0800be9c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800bea0:	4b14      	ldr	r3, [pc, #80]	; (800bef4 <MX_USART1_UART_Init+0x58>)
 800bea2:	4a15      	ldr	r2, [pc, #84]	; (800bef8 <MX_USART1_UART_Init+0x5c>)
 800bea4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 800bea6:	4b13      	ldr	r3, [pc, #76]	; (800bef4 <MX_USART1_UART_Init+0x58>)
 800bea8:	4a14      	ldr	r2, [pc, #80]	; (800befc <MX_USART1_UART_Init+0x60>)
 800beaa:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800beac:	4b11      	ldr	r3, [pc, #68]	; (800bef4 <MX_USART1_UART_Init+0x58>)
 800beae:	2200      	movs	r2, #0
 800beb0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 800beb2:	4b10      	ldr	r3, [pc, #64]	; (800bef4 <MX_USART1_UART_Init+0x58>)
 800beb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800beb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800beba:	4b0e      	ldr	r3, [pc, #56]	; (800bef4 <MX_USART1_UART_Init+0x58>)
 800bebc:	2200      	movs	r2, #0
 800bebe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800bec0:	4b0c      	ldr	r3, [pc, #48]	; (800bef4 <MX_USART1_UART_Init+0x58>)
 800bec2:	220c      	movs	r2, #12
 800bec4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bec6:	4b0b      	ldr	r3, [pc, #44]	; (800bef4 <MX_USART1_UART_Init+0x58>)
 800bec8:	2200      	movs	r2, #0
 800beca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800becc:	4b09      	ldr	r3, [pc, #36]	; (800bef4 <MX_USART1_UART_Init+0x58>)
 800bece:	2200      	movs	r2, #0
 800bed0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800bed2:	4b08      	ldr	r3, [pc, #32]	; (800bef4 <MX_USART1_UART_Init+0x58>)
 800bed4:	2200      	movs	r2, #0
 800bed6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800bed8:	4b06      	ldr	r3, [pc, #24]	; (800bef4 <MX_USART1_UART_Init+0x58>)
 800beda:	2200      	movs	r2, #0
 800bedc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800bede:	4805      	ldr	r0, [pc, #20]	; (800bef4 <MX_USART1_UART_Init+0x58>)
 800bee0:	f7fb faa2 	bl	8007428 <HAL_UART_Init>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d001      	beq.n	800beee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800beea:	f7ff fc5f 	bl	800b7ac <Error_Handler>
  }

}
 800beee:	bf00      	nop
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	2000a618 	.word	0x2000a618
 800bef8:	40013800 	.word	0x40013800
 800befc:	0003d090 	.word	0x0003d090

0800bf00 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800bf04:	4b14      	ldr	r3, [pc, #80]	; (800bf58 <MX_USART2_UART_Init+0x58>)
 800bf06:	4a15      	ldr	r2, [pc, #84]	; (800bf5c <MX_USART2_UART_Init+0x5c>)
 800bf08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 800bf0a:	4b13      	ldr	r3, [pc, #76]	; (800bf58 <MX_USART2_UART_Init+0x58>)
 800bf0c:	4a14      	ldr	r2, [pc, #80]	; (800bf60 <MX_USART2_UART_Init+0x60>)
 800bf0e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800bf10:	4b11      	ldr	r3, [pc, #68]	; (800bf58 <MX_USART2_UART_Init+0x58>)
 800bf12:	2200      	movs	r2, #0
 800bf14:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800bf16:	4b10      	ldr	r3, [pc, #64]	; (800bf58 <MX_USART2_UART_Init+0x58>)
 800bf18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bf1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800bf1e:	4b0e      	ldr	r3, [pc, #56]	; (800bf58 <MX_USART2_UART_Init+0x58>)
 800bf20:	2200      	movs	r2, #0
 800bf22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800bf24:	4b0c      	ldr	r3, [pc, #48]	; (800bf58 <MX_USART2_UART_Init+0x58>)
 800bf26:	220c      	movs	r2, #12
 800bf28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bf2a:	4b0b      	ldr	r3, [pc, #44]	; (800bf58 <MX_USART2_UART_Init+0x58>)
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800bf30:	4b09      	ldr	r3, [pc, #36]	; (800bf58 <MX_USART2_UART_Init+0x58>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800bf36:	4b08      	ldr	r3, [pc, #32]	; (800bf58 <MX_USART2_UART_Init+0x58>)
 800bf38:	2200      	movs	r2, #0
 800bf3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800bf3c:	4b06      	ldr	r3, [pc, #24]	; (800bf58 <MX_USART2_UART_Init+0x58>)
 800bf3e:	2200      	movs	r2, #0
 800bf40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800bf42:	4805      	ldr	r0, [pc, #20]	; (800bf58 <MX_USART2_UART_Init+0x58>)
 800bf44:	f7fb fa70 	bl	8007428 <HAL_UART_Init>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d001      	beq.n	800bf52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800bf4e:	f7ff fc2d 	bl	800b7ac <Error_Handler>
  }

}
 800bf52:	bf00      	nop
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	2000a708 	.word	0x2000a708
 800bf5c:	40004400 	.word	0x40004400
 800bf60:	0003d090 	.word	0x0003d090

0800bf64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b08e      	sub	sp, #56	; 0x38
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf70:	2200      	movs	r2, #0
 800bf72:	601a      	str	r2, [r3, #0]
 800bf74:	605a      	str	r2, [r3, #4]
 800bf76:	609a      	str	r2, [r3, #8]
 800bf78:	60da      	str	r2, [r3, #12]
 800bf7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a52      	ldr	r2, [pc, #328]	; (800c0cc <HAL_UART_MspInit+0x168>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d131      	bne.n	800bfea <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800bf86:	4a52      	ldr	r2, [pc, #328]	; (800c0d0 <HAL_UART_MspInit+0x16c>)
 800bf88:	4b51      	ldr	r3, [pc, #324]	; (800c0d0 <HAL_UART_MspInit+0x16c>)
 800bf8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf90:	6593      	str	r3, [r2, #88]	; 0x58
 800bf92:	4b4f      	ldr	r3, [pc, #316]	; (800c0d0 <HAL_UART_MspInit+0x16c>)
 800bf94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bf9a:	623b      	str	r3, [r7, #32]
 800bf9c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bf9e:	4a4c      	ldr	r2, [pc, #304]	; (800c0d0 <HAL_UART_MspInit+0x16c>)
 800bfa0:	4b4b      	ldr	r3, [pc, #300]	; (800c0d0 <HAL_UART_MspInit+0x16c>)
 800bfa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfa4:	f043 0304 	orr.w	r3, r3, #4
 800bfa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bfaa:	4b49      	ldr	r3, [pc, #292]	; (800c0d0 <HAL_UART_MspInit+0x16c>)
 800bfac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfae:	f003 0304 	and.w	r3, r3, #4
 800bfb2:	61fb      	str	r3, [r7, #28]
 800bfb4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800bfb6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800bfba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfbc:	2302      	movs	r3, #2
 800bfbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfc4:	2303      	movs	r3, #3
 800bfc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800bfc8:	2308      	movs	r3, #8
 800bfca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bfcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	4840      	ldr	r0, [pc, #256]	; (800c0d4 <HAL_UART_MspInit+0x170>)
 800bfd4:	f7f7 fb82 	bl	80036dc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800bfd8:	2200      	movs	r2, #0
 800bfda:	2100      	movs	r1, #0
 800bfdc:	2034      	movs	r0, #52	; 0x34
 800bfde:	f7f7 fb46 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800bfe2:	2034      	movs	r0, #52	; 0x34
 800bfe4:	f7f7 fb5f 	bl	80036a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800bfe8:	e06b      	b.n	800c0c2 <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART1)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4a3a      	ldr	r2, [pc, #232]	; (800c0d8 <HAL_UART_MspInit+0x174>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d130      	bne.n	800c056 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 800bff4:	4a36      	ldr	r2, [pc, #216]	; (800c0d0 <HAL_UART_MspInit+0x16c>)
 800bff6:	4b36      	ldr	r3, [pc, #216]	; (800c0d0 <HAL_UART_MspInit+0x16c>)
 800bff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bffe:	6613      	str	r3, [r2, #96]	; 0x60
 800c000:	4b33      	ldr	r3, [pc, #204]	; (800c0d0 <HAL_UART_MspInit+0x16c>)
 800c002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c008:	61bb      	str	r3, [r7, #24]
 800c00a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c00c:	4a30      	ldr	r2, [pc, #192]	; (800c0d0 <HAL_UART_MspInit+0x16c>)
 800c00e:	4b30      	ldr	r3, [pc, #192]	; (800c0d0 <HAL_UART_MspInit+0x16c>)
 800c010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c012:	f043 0302 	orr.w	r3, r3, #2
 800c016:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c018:	4b2d      	ldr	r3, [pc, #180]	; (800c0d0 <HAL_UART_MspInit+0x16c>)
 800c01a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c01c:	f003 0302 	and.w	r3, r3, #2
 800c020:	617b      	str	r3, [r7, #20]
 800c022:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c024:	23c0      	movs	r3, #192	; 0xc0
 800c026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c028:	2302      	movs	r3, #2
 800c02a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c02c:	2300      	movs	r3, #0
 800c02e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c030:	2303      	movs	r3, #3
 800c032:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c034:	2307      	movs	r3, #7
 800c036:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c03c:	4619      	mov	r1, r3
 800c03e:	4827      	ldr	r0, [pc, #156]	; (800c0dc <HAL_UART_MspInit+0x178>)
 800c040:	f7f7 fb4c 	bl	80036dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800c044:	2200      	movs	r2, #0
 800c046:	2100      	movs	r1, #0
 800c048:	2025      	movs	r0, #37	; 0x25
 800c04a:	f7f7 fb10 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c04e:	2025      	movs	r0, #37	; 0x25
 800c050:	f7f7 fb29 	bl	80036a6 <HAL_NVIC_EnableIRQ>
}
 800c054:	e035      	b.n	800c0c2 <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART2)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a21      	ldr	r2, [pc, #132]	; (800c0e0 <HAL_UART_MspInit+0x17c>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d130      	bne.n	800c0c2 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800c060:	4a1b      	ldr	r2, [pc, #108]	; (800c0d0 <HAL_UART_MspInit+0x16c>)
 800c062:	4b1b      	ldr	r3, [pc, #108]	; (800c0d0 <HAL_UART_MspInit+0x16c>)
 800c064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c06a:	6593      	str	r3, [r2, #88]	; 0x58
 800c06c:	4b18      	ldr	r3, [pc, #96]	; (800c0d0 <HAL_UART_MspInit+0x16c>)
 800c06e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c074:	613b      	str	r3, [r7, #16]
 800c076:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c078:	4a15      	ldr	r2, [pc, #84]	; (800c0d0 <HAL_UART_MspInit+0x16c>)
 800c07a:	4b15      	ldr	r3, [pc, #84]	; (800c0d0 <HAL_UART_MspInit+0x16c>)
 800c07c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c07e:	f043 0301 	orr.w	r3, r3, #1
 800c082:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c084:	4b12      	ldr	r3, [pc, #72]	; (800c0d0 <HAL_UART_MspInit+0x16c>)
 800c086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c088:	f003 0301 	and.w	r3, r3, #1
 800c08c:	60fb      	str	r3, [r7, #12]
 800c08e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800c090:	230c      	movs	r3, #12
 800c092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c094:	2302      	movs	r3, #2
 800c096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c098:	2300      	movs	r3, #0
 800c09a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c09c:	2303      	movs	r3, #3
 800c09e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c0a0:	2307      	movs	r3, #7
 800c0a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c0a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c0ae:	f7f7 fb15 	bl	80036dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	2100      	movs	r1, #0
 800c0b6:	2026      	movs	r0, #38	; 0x26
 800c0b8:	f7f7 fad9 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800c0bc:	2026      	movs	r0, #38	; 0x26
 800c0be:	f7f7 faf2 	bl	80036a6 <HAL_NVIC_EnableIRQ>
}
 800c0c2:	bf00      	nop
 800c0c4:	3738      	adds	r7, #56	; 0x38
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	40004c00 	.word	0x40004c00
 800c0d0:	40021000 	.word	0x40021000
 800c0d4:	48000800 	.word	0x48000800
 800c0d8:	40013800 	.word	0x40013800
 800c0dc:	48000400 	.word	0x48000400
 800c0e0:	40004400 	.word	0x40004400

0800c0e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	490b      	ldr	r1, [pc, #44]	; (800c118 <MX_USB_DEVICE_Init+0x34>)
 800c0ec:	480b      	ldr	r0, [pc, #44]	; (800c11c <MX_USB_DEVICE_Init+0x38>)
 800c0ee:	f7fe f825 	bl	800a13c <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 800c0f2:	490b      	ldr	r1, [pc, #44]	; (800c120 <MX_USB_DEVICE_Init+0x3c>)
 800c0f4:	4809      	ldr	r0, [pc, #36]	; (800c11c <MX_USB_DEVICE_Init+0x38>)
 800c0f6:	f7fe f84c 	bl	800a192 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800c0fa:	490a      	ldr	r1, [pc, #40]	; (800c124 <MX_USB_DEVICE_Init+0x40>)
 800c0fc:	4807      	ldr	r0, [pc, #28]	; (800c11c <MX_USB_DEVICE_Init+0x38>)
 800c0fe:	f7fd ff7f 	bl	800a000 <USBD_CDC_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 800c102:	4806      	ldr	r0, [pc, #24]	; (800c11c <MX_USB_DEVICE_Init+0x38>)
 800c104:	f000 fc70 	bl	800c9e8 <USBD_LL_BatteryCharging>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d002      	beq.n	800c114 <MX_USB_DEVICE_Init+0x30>
  USBD_Start(&hUsbDeviceFS);
 800c10e:	4803      	ldr	r0, [pc, #12]	; (800c11c <MX_USB_DEVICE_Init+0x38>)
 800c110:	f7fe f859 	bl	800a1c6 <USBD_Start>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c114:	bf00      	nop
 800c116:	bd80      	pop	{r7, pc}
 800c118:	200012b0 	.word	0x200012b0
 800c11c:	2000a780 	.word	0x2000a780
 800c120:	20001198 	.word	0x20001198
 800c124:	200012a0 	.word	0x200012a0

0800c128 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c12c:	2200      	movs	r2, #0
 800c12e:	4905      	ldr	r1, [pc, #20]	; (800c144 <CDC_Init_FS+0x1c>)
 800c130:	4805      	ldr	r0, [pc, #20]	; (800c148 <CDC_Init_FS+0x20>)
 800c132:	f7fd ff7c 	bl	800a02e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c136:	4905      	ldr	r1, [pc, #20]	; (800c14c <CDC_Init_FS+0x24>)
 800c138:	4803      	ldr	r0, [pc, #12]	; (800c148 <CDC_Init_FS+0x20>)
 800c13a:	f7fd ff92 	bl	800a062 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c13e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c140:	4618      	mov	r0, r3
 800c142:	bd80      	pop	{r7, pc}
 800c144:	2000b21c 	.word	0x2000b21c
 800c148:	2000a780 	.word	0x2000a780
 800c14c:	2000aa1c 	.word	0x2000aa1c

0800c150 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c150:	b480      	push	{r7}
 800c152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c154:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c156:	4618      	mov	r0, r3
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
 800c166:	4603      	mov	r3, r0
 800c168:	6039      	str	r1, [r7, #0]
 800c16a:	71fb      	strb	r3, [r7, #7]
 800c16c:	4613      	mov	r3, r2
 800c16e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c170:	79fb      	ldrb	r3, [r7, #7]
 800c172:	2b23      	cmp	r3, #35	; 0x23
 800c174:	d84a      	bhi.n	800c20c <CDC_Control_FS+0xac>
 800c176:	a201      	add	r2, pc, #4	; (adr r2, 800c17c <CDC_Control_FS+0x1c>)
 800c178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c17c:	0800c20d 	.word	0x0800c20d
 800c180:	0800c20d 	.word	0x0800c20d
 800c184:	0800c20d 	.word	0x0800c20d
 800c188:	0800c20d 	.word	0x0800c20d
 800c18c:	0800c20d 	.word	0x0800c20d
 800c190:	0800c20d 	.word	0x0800c20d
 800c194:	0800c20d 	.word	0x0800c20d
 800c198:	0800c20d 	.word	0x0800c20d
 800c19c:	0800c20d 	.word	0x0800c20d
 800c1a0:	0800c20d 	.word	0x0800c20d
 800c1a4:	0800c20d 	.word	0x0800c20d
 800c1a8:	0800c20d 	.word	0x0800c20d
 800c1ac:	0800c20d 	.word	0x0800c20d
 800c1b0:	0800c20d 	.word	0x0800c20d
 800c1b4:	0800c20d 	.word	0x0800c20d
 800c1b8:	0800c20d 	.word	0x0800c20d
 800c1bc:	0800c20d 	.word	0x0800c20d
 800c1c0:	0800c20d 	.word	0x0800c20d
 800c1c4:	0800c20d 	.word	0x0800c20d
 800c1c8:	0800c20d 	.word	0x0800c20d
 800c1cc:	0800c20d 	.word	0x0800c20d
 800c1d0:	0800c20d 	.word	0x0800c20d
 800c1d4:	0800c20d 	.word	0x0800c20d
 800c1d8:	0800c20d 	.word	0x0800c20d
 800c1dc:	0800c20d 	.word	0x0800c20d
 800c1e0:	0800c20d 	.word	0x0800c20d
 800c1e4:	0800c20d 	.word	0x0800c20d
 800c1e8:	0800c20d 	.word	0x0800c20d
 800c1ec:	0800c20d 	.word	0x0800c20d
 800c1f0:	0800c20d 	.word	0x0800c20d
 800c1f4:	0800c20d 	.word	0x0800c20d
 800c1f8:	0800c20d 	.word	0x0800c20d
 800c1fc:	0800c20d 	.word	0x0800c20d
 800c200:	0800c20d 	.word	0x0800c20d
 800c204:	0800c20d 	.word	0x0800c20d
 800c208:	0800c20d 	.word	0x0800c20d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c20c:	bf00      	nop
  }

  return (USBD_OK);
 800c20e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c210:	4618      	mov	r0, r3
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(myUSBRxCallback) myUSBRxCallback((char *)Buf, *Len);
 800c226:	4b0c      	ldr	r3, [pc, #48]	; (800c258 <CDC_Receive_FS+0x3c>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d007      	beq.n	800c23e <CDC_Receive_FS+0x22>
 800c22e:	4b0a      	ldr	r3, [pc, #40]	; (800c258 <CDC_Receive_FS+0x3c>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	683a      	ldr	r2, [r7, #0]
 800c234:	6812      	ldr	r2, [r2, #0]
 800c236:	b292      	uxth	r2, r2
 800c238:	4611      	mov	r1, r2
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	4798      	blx	r3
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c23e:	6879      	ldr	r1, [r7, #4]
 800c240:	4806      	ldr	r0, [pc, #24]	; (800c25c <CDC_Receive_FS+0x40>)
 800c242:	f7fd ff0e 	bl	800a062 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c246:	4805      	ldr	r0, [pc, #20]	; (800c25c <CDC_Receive_FS+0x40>)
 800c248:	f7fd ff4e 	bl	800a0e8 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800c24c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	2000a1a8 	.word	0x2000a1a8
 800c25c:	2000a780 	.word	0x2000a780

0800c260 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	460b      	mov	r3, r1
 800c26a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c26c:	2300      	movs	r3, #0
 800c26e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c270:	4b0d      	ldr	r3, [pc, #52]	; (800c2a8 <CDC_Transmit_FS+0x48>)
 800c272:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c276:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d001      	beq.n	800c286 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c282:	2301      	movs	r3, #1
 800c284:	e00b      	b.n	800c29e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c286:	887b      	ldrh	r3, [r7, #2]
 800c288:	461a      	mov	r2, r3
 800c28a:	6879      	ldr	r1, [r7, #4]
 800c28c:	4806      	ldr	r0, [pc, #24]	; (800c2a8 <CDC_Transmit_FS+0x48>)
 800c28e:	f7fd fece 	bl	800a02e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c292:	4805      	ldr	r0, [pc, #20]	; (800c2a8 <CDC_Transmit_FS+0x48>)
 800c294:	f7fd fef9 	bl	800a08a <USBD_CDC_TransmitPacket>
 800c298:	4603      	mov	r3, r0
 800c29a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3710      	adds	r7, #16
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	2000a780 	.word	0x2000a780

0800c2ac <usb_registerRxCallback>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void usb_registerRxCallback(usb_rxCallback callback){
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
	myUSBRxCallback = callback;
 800c2b4:	4a04      	ldr	r2, [pc, #16]	; (800c2c8 <usb_registerRxCallback+0x1c>)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6013      	str	r3, [r2, #0]
}
 800c2ba:	bf00      	nop
 800c2bc:	370c      	adds	r7, #12
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	2000a1a8 	.word	0x2000a1a8

0800c2cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b088      	sub	sp, #32
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a16      	ldr	r2, [pc, #88]	; (800c334 <HAL_PCD_MspInit+0x68>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d125      	bne.n	800c32a <HAL_PCD_MspInit+0x5e>
  
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c2de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c2e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2e4:	2302      	movs	r3, #2
 800c2e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800c2f0:	230a      	movs	r3, #10
 800c2f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2f4:	f107 030c 	add.w	r3, r7, #12
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c2fe:	f7f7 f9ed 	bl	80036dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c302:	4a0d      	ldr	r2, [pc, #52]	; (800c338 <HAL_PCD_MspInit+0x6c>)
 800c304:	4b0c      	ldr	r3, [pc, #48]	; (800c338 <HAL_PCD_MspInit+0x6c>)
 800c306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c308:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c30c:	6593      	str	r3, [r2, #88]	; 0x58
 800c30e:	4b0a      	ldr	r3, [pc, #40]	; (800c338 <HAL_PCD_MspInit+0x6c>)
 800c310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c312:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c316:	60bb      	str	r3, [r7, #8]
 800c318:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c31a:	2200      	movs	r2, #0
 800c31c:	2100      	movs	r1, #0
 800c31e:	2043      	movs	r0, #67	; 0x43
 800c320:	f7f7 f9a5 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c324:	2043      	movs	r0, #67	; 0x43
 800c326:	f7f7 f9be 	bl	80036a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c32a:	bf00      	nop
 800c32c:	3720      	adds	r7, #32
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	40006800 	.word	0x40006800
 800c338:	40021000 	.word	0x40021000

0800c33c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800c350:	4619      	mov	r1, r3
 800c352:	4610      	mov	r0, r2
 800c354:	f7fd ff80 	bl	800a258 <USBD_LL_SetupStage>
}
 800c358:	bf00      	nop
 800c35a:	3708      	adds	r7, #8
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	460b      	mov	r3, r1
 800c36a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 0470 	ldr.w	r0, [r3, #1136]	; 0x470
 800c372:	78fb      	ldrb	r3, [r7, #3]
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	015b      	lsls	r3, r3, #5
 800c378:	4413      	add	r3, r2
 800c37a:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800c37e:	681a      	ldr	r2, [r3, #0]
 800c380:	78fb      	ldrb	r3, [r7, #3]
 800c382:	4619      	mov	r1, r3
 800c384:	f7fd ffb3 	bl	800a2ee <USBD_LL_DataOutStage>
}
 800c388:	bf00      	nop
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	460b      	mov	r3, r1
 800c39a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 0470 	ldr.w	r0, [r3, #1136]	; 0x470
 800c3a2:	78fb      	ldrb	r3, [r7, #3]
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	015b      	lsls	r3, r3, #5
 800c3a8:	4413      	add	r3, r2
 800c3aa:	333c      	adds	r3, #60	; 0x3c
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	78fb      	ldrb	r3, [r7, #3]
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	f7fe f809 	bl	800a3c8 <USBD_LL_DataInStage>
}
 800c3b6:	bf00      	nop
 800c3b8:	3708      	adds	r7, #8
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b082      	sub	sp, #8
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7fe f917 	bl	800a600 <USBD_LL_SOF>
}
 800c3d2:	bf00      	nop
 800c3d4:	3708      	adds	r7, #8
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b084      	sub	sp, #16
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	2b02      	cmp	r3, #2
 800c3ec:	d102      	bne.n	800c3f4 <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	73fb      	strb	r3, [r7, #15]
    break;
 800c3f2:	e002      	b.n	800c3fa <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	73fb      	strb	r3, [r7, #15]
    break;    
 800c3f8:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800c400:	7bfa      	ldrb	r2, [r7, #15]
 800c402:	4611      	mov	r1, r2
 800c404:	4618      	mov	r0, r3
 800c406:	f7fe f8c5 	bl	800a594 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800c410:	4618      	mov	r0, r3
 800c412:	f7fe f87e 	bl	800a512 <USBD_LL_Reset>
}
 800c416:	bf00      	nop
 800c418:	3710      	adds	r7, #16
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
	...

0800c420 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800c42e:	4618      	mov	r0, r3
 800c430:	f7fe f8c0 	bl	800a5b4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	699b      	ldr	r3, [r3, #24]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d005      	beq.n	800c448 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c43c:	4a04      	ldr	r2, [pc, #16]	; (800c450 <HAL_PCD_SuspendCallback+0x30>)
 800c43e:	4b04      	ldr	r3, [pc, #16]	; (800c450 <HAL_PCD_SuspendCallback+0x30>)
 800c440:	691b      	ldr	r3, [r3, #16]
 800c442:	f043 0306 	orr.w	r3, r3, #6
 800c446:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c448:	bf00      	nop
 800c44a:	3708      	adds	r7, #8
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	e000ed00 	.word	0xe000ed00

0800c454 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d007      	beq.n	800c474 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c464:	4a08      	ldr	r2, [pc, #32]	; (800c488 <HAL_PCD_ResumeCallback+0x34>)
 800c466:	4b08      	ldr	r3, [pc, #32]	; (800c488 <HAL_PCD_ResumeCallback+0x34>)
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	f023 0306 	bic.w	r3, r3, #6
 800c46e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c470:	f000 fab4 	bl	800c9dc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7fe f8af 	bl	800a5de <USBD_LL_Resume>
}
 800c480:	bf00      	nop
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	e000ed00 	.word	0xe000ed00

0800c48c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800c494:	f7f9 fa78 	bl	8005988 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c498:	4a2c      	ldr	r2, [pc, #176]	; (800c54c <USBD_LL_Init+0xc0>)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
  pdev->pData = &hpcd_USB_FS;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	4a2a      	ldr	r2, [pc, #168]	; (800c54c <USBD_LL_Init+0xc0>)
 800c4a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800c4a8:	4b28      	ldr	r3, [pc, #160]	; (800c54c <USBD_LL_Init+0xc0>)
 800c4aa:	4a29      	ldr	r2, [pc, #164]	; (800c550 <USBD_LL_Init+0xc4>)
 800c4ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c4ae:	4b27      	ldr	r3, [pc, #156]	; (800c54c <USBD_LL_Init+0xc0>)
 800c4b0:	2208      	movs	r2, #8
 800c4b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c4b4:	4b25      	ldr	r3, [pc, #148]	; (800c54c <USBD_LL_Init+0xc0>)
 800c4b6:	2202      	movs	r2, #2
 800c4b8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800c4ba:	4b24      	ldr	r3, [pc, #144]	; (800c54c <USBD_LL_Init+0xc0>)
 800c4bc:	2200      	movs	r2, #0
 800c4be:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c4c0:	4b22      	ldr	r3, [pc, #136]	; (800c54c <USBD_LL_Init+0xc0>)
 800c4c2:	2202      	movs	r2, #2
 800c4c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c4c6:	4b21      	ldr	r3, [pc, #132]	; (800c54c <USBD_LL_Init+0xc0>)
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c4cc:	4b1f      	ldr	r3, [pc, #124]	; (800c54c <USBD_LL_Init+0xc0>)
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c4d2:	4b1e      	ldr	r3, [pc, #120]	; (800c54c <USBD_LL_Init+0xc0>)
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c4d8:	4b1c      	ldr	r3, [pc, #112]	; (800c54c <USBD_LL_Init+0xc0>)
 800c4da:	2200      	movs	r2, #0
 800c4dc:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c4de:	481b      	ldr	r0, [pc, #108]	; (800c54c <USBD_LL_Init+0xc0>)
 800c4e0:	f7f8 fa9d 	bl	8004a1e <HAL_PCD_Init>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d001      	beq.n	800c4ee <USBD_LL_Init+0x62>
  {
    Error_Handler( );
 800c4ea:	f7ff f95f 	bl	800b7ac <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c4f4:	2318      	movs	r3, #24
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	f7f9 f953 	bl	80057a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c504:	2358      	movs	r3, #88	; 0x58
 800c506:	2200      	movs	r2, #0
 800c508:	2180      	movs	r1, #128	; 0x80
 800c50a:	f7f9 f94b 	bl	80057a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c514:	23c0      	movs	r3, #192	; 0xc0
 800c516:	2200      	movs	r2, #0
 800c518:	2181      	movs	r1, #129	; 0x81
 800c51a:	f7f9 f943 	bl	80057a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c524:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c528:	2200      	movs	r2, #0
 800c52a:	2101      	movs	r1, #1
 800c52c:	f7f9 f93a 	bl	80057a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c53a:	2200      	movs	r2, #0
 800c53c:	2182      	movs	r1, #130	; 0x82
 800c53e:	f7f9 f931 	bl	80057a4 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 800c542:	2300      	movs	r3, #0
}
 800c544:	4618      	mov	r0, r3
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	2000ba1c 	.word	0x2000ba1c
 800c550:	40006800 	.word	0x40006800

0800c554 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c55c:	2300      	movs	r3, #0
 800c55e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c560:	2300      	movs	r3, #0
 800c562:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7f8 fb30 	bl	8004bd0 <HAL_PCD_Start>
 800c570:	4603      	mov	r3, r0
 800c572:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800c574:	7bbb      	ldrb	r3, [r7, #14]
 800c576:	2b03      	cmp	r3, #3
 800c578:	d816      	bhi.n	800c5a8 <USBD_LL_Start+0x54>
 800c57a:	a201      	add	r2, pc, #4	; (adr r2, 800c580 <USBD_LL_Start+0x2c>)
 800c57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c580:	0800c591 	.word	0x0800c591
 800c584:	0800c597 	.word	0x0800c597
 800c588:	0800c59d 	.word	0x0800c59d
 800c58c:	0800c5a3 	.word	0x0800c5a3
    case HAL_OK :
      usb_status = USBD_OK;
 800c590:	2300      	movs	r3, #0
 800c592:	73fb      	strb	r3, [r7, #15]
    break;
 800c594:	e00b      	b.n	800c5ae <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c596:	2302      	movs	r3, #2
 800c598:	73fb      	strb	r3, [r7, #15]
    break;
 800c59a:	e008      	b.n	800c5ae <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c59c:	2301      	movs	r3, #1
 800c59e:	73fb      	strb	r3, [r7, #15]
    break;
 800c5a0:	e005      	b.n	800c5ae <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5a2:	2302      	movs	r3, #2
 800c5a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c5a6:	e002      	b.n	800c5ae <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c5a8:	2302      	movs	r3, #2
 800c5aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ac:	bf00      	nop
  }
  return usb_status;
 800c5ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3710      	adds	r7, #16
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	4608      	mov	r0, r1
 800c5c2:	4611      	mov	r1, r2
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	70fb      	strb	r3, [r7, #3]
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	70bb      	strb	r3, [r7, #2]
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c5e0:	78bb      	ldrb	r3, [r7, #2]
 800c5e2:	883a      	ldrh	r2, [r7, #0]
 800c5e4:	78f9      	ldrb	r1, [r7, #3]
 800c5e6:	f7f8 fc93 	bl	8004f10 <HAL_PCD_EP_Open>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c5ee:	7bbb      	ldrb	r3, [r7, #14]
 800c5f0:	2b03      	cmp	r3, #3
 800c5f2:	d817      	bhi.n	800c624 <USBD_LL_OpenEP+0x6c>
 800c5f4:	a201      	add	r2, pc, #4	; (adr r2, 800c5fc <USBD_LL_OpenEP+0x44>)
 800c5f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5fa:	bf00      	nop
 800c5fc:	0800c60d 	.word	0x0800c60d
 800c600:	0800c613 	.word	0x0800c613
 800c604:	0800c619 	.word	0x0800c619
 800c608:	0800c61f 	.word	0x0800c61f
    case HAL_OK :
      usb_status = USBD_OK;
 800c60c:	2300      	movs	r3, #0
 800c60e:	73fb      	strb	r3, [r7, #15]
    break;
 800c610:	e00b      	b.n	800c62a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c612:	2302      	movs	r3, #2
 800c614:	73fb      	strb	r3, [r7, #15]
    break;
 800c616:	e008      	b.n	800c62a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c618:	2301      	movs	r3, #1
 800c61a:	73fb      	strb	r3, [r7, #15]
    break;
 800c61c:	e005      	b.n	800c62a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c61e:	2302      	movs	r3, #2
 800c620:	73fb      	strb	r3, [r7, #15]
    break;
 800c622:	e002      	b.n	800c62a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c624:	2302      	movs	r3, #2
 800c626:	73fb      	strb	r3, [r7, #15]
    break;
 800c628:	bf00      	nop
  }
  return usb_status;
 800c62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	460b      	mov	r3, r1
 800c63e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c640:	2300      	movs	r3, #0
 800c642:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c644:	2300      	movs	r3, #0
 800c646:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c64e:	78fa      	ldrb	r2, [r7, #3]
 800c650:	4611      	mov	r1, r2
 800c652:	4618      	mov	r0, r3
 800c654:	f7f8 fcbc 	bl	8004fd0 <HAL_PCD_EP_Close>
 800c658:	4603      	mov	r3, r0
 800c65a:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800c65c:	7bbb      	ldrb	r3, [r7, #14]
 800c65e:	2b03      	cmp	r3, #3
 800c660:	d816      	bhi.n	800c690 <USBD_LL_CloseEP+0x5c>
 800c662:	a201      	add	r2, pc, #4	; (adr r2, 800c668 <USBD_LL_CloseEP+0x34>)
 800c664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c668:	0800c679 	.word	0x0800c679
 800c66c:	0800c67f 	.word	0x0800c67f
 800c670:	0800c685 	.word	0x0800c685
 800c674:	0800c68b 	.word	0x0800c68b
    case HAL_OK :
      usb_status = USBD_OK;
 800c678:	2300      	movs	r3, #0
 800c67a:	73fb      	strb	r3, [r7, #15]
    break;
 800c67c:	e00b      	b.n	800c696 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c67e:	2302      	movs	r3, #2
 800c680:	73fb      	strb	r3, [r7, #15]
    break;
 800c682:	e008      	b.n	800c696 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c684:	2301      	movs	r3, #1
 800c686:	73fb      	strb	r3, [r7, #15]
    break;
 800c688:	e005      	b.n	800c696 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c68a:	2302      	movs	r3, #2
 800c68c:	73fb      	strb	r3, [r7, #15]
    break;
 800c68e:	e002      	b.n	800c696 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c690:	2302      	movs	r3, #2
 800c692:	73fb      	strb	r3, [r7, #15]
    break;
 800c694:	bf00      	nop
  }
  return usb_status;  
 800c696:	7bfb      	ldrb	r3, [r7, #15]
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3710      	adds	r7, #16
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c6ba:	78fa      	ldrb	r2, [r7, #3]
 800c6bc:	4611      	mov	r1, r2
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7f8 fd51 	bl	8005166 <HAL_PCD_EP_SetStall>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c6c8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ca:	2b03      	cmp	r3, #3
 800c6cc:	d816      	bhi.n	800c6fc <USBD_LL_StallEP+0x5c>
 800c6ce:	a201      	add	r2, pc, #4	; (adr r2, 800c6d4 <USBD_LL_StallEP+0x34>)
 800c6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6d4:	0800c6e5 	.word	0x0800c6e5
 800c6d8:	0800c6eb 	.word	0x0800c6eb
 800c6dc:	0800c6f1 	.word	0x0800c6f1
 800c6e0:	0800c6f7 	.word	0x0800c6f7
    case HAL_OK :
      usb_status = USBD_OK;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	73fb      	strb	r3, [r7, #15]
    break;
 800c6e8:	e00b      	b.n	800c702 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c6ea:	2302      	movs	r3, #2
 800c6ec:	73fb      	strb	r3, [r7, #15]
    break;
 800c6ee:	e008      	b.n	800c702 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	73fb      	strb	r3, [r7, #15]
    break;
 800c6f4:	e005      	b.n	800c702 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c6f6:	2302      	movs	r3, #2
 800c6f8:	73fb      	strb	r3, [r7, #15]
    break;
 800c6fa:	e002      	b.n	800c702 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c6fc:	2302      	movs	r3, #2
 800c6fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c700:	bf00      	nop
  }
  return usb_status;  
 800c702:	7bfb      	ldrb	r3, [r7, #15]
}
 800c704:	4618      	mov	r0, r3
 800c706:	3710      	adds	r7, #16
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	460b      	mov	r3, r1
 800c716:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c718:	2300      	movs	r3, #0
 800c71a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c71c:	2300      	movs	r3, #0
 800c71e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c726:	78fa      	ldrb	r2, [r7, #3]
 800c728:	4611      	mov	r1, r2
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7f8 fd75 	bl	800521a <HAL_PCD_EP_ClrStall>
 800c730:	4603      	mov	r3, r0
 800c732:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800c734:	7bbb      	ldrb	r3, [r7, #14]
 800c736:	2b03      	cmp	r3, #3
 800c738:	d816      	bhi.n	800c768 <USBD_LL_ClearStallEP+0x5c>
 800c73a:	a201      	add	r2, pc, #4	; (adr r2, 800c740 <USBD_LL_ClearStallEP+0x34>)
 800c73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c740:	0800c751 	.word	0x0800c751
 800c744:	0800c757 	.word	0x0800c757
 800c748:	0800c75d 	.word	0x0800c75d
 800c74c:	0800c763 	.word	0x0800c763
    case HAL_OK :
      usb_status = USBD_OK;
 800c750:	2300      	movs	r3, #0
 800c752:	73fb      	strb	r3, [r7, #15]
    break;
 800c754:	e00b      	b.n	800c76e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c756:	2302      	movs	r3, #2
 800c758:	73fb      	strb	r3, [r7, #15]
    break;
 800c75a:	e008      	b.n	800c76e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c75c:	2301      	movs	r3, #1
 800c75e:	73fb      	strb	r3, [r7, #15]
    break;
 800c760:	e005      	b.n	800c76e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c762:	2302      	movs	r3, #2
 800c764:	73fb      	strb	r3, [r7, #15]
    break;
 800c766:	e002      	b.n	800c76e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c768:	2302      	movs	r3, #2
 800c76a:	73fb      	strb	r3, [r7, #15]
    break;
 800c76c:	bf00      	nop
  }
  return usb_status; 
 800c76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c770:	4618      	mov	r0, r3
 800c772:	3710      	adds	r7, #16
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	460b      	mov	r3, r1
 800c782:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c78a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800c78c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c790:	2b00      	cmp	r3, #0
 800c792:	da08      	bge.n	800c7a6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800c794:	78fb      	ldrb	r3, [r7, #3]
 800c796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c79a:	68fa      	ldr	r2, [r7, #12]
 800c79c:	015b      	lsls	r3, r3, #5
 800c79e:	4413      	add	r3, r2
 800c7a0:	332a      	adds	r3, #42	; 0x2a
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	e008      	b.n	800c7b8 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800c7a6:	78fb      	ldrb	r3, [r7, #3]
 800c7a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	015b      	lsls	r3, r3, #5
 800c7b0:	4413      	add	r3, r2
 800c7b2:	f203 232a 	addw	r3, r3, #554	; 0x22a
 800c7b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3714      	adds	r7, #20
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c7de:	78fa      	ldrb	r2, [r7, #3]
 800c7e0:	4611      	mov	r1, r2
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7f8 fb6f 	bl	8004ec6 <HAL_PCD_SetAddress>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800c7ec:	7bbb      	ldrb	r3, [r7, #14]
 800c7ee:	2b03      	cmp	r3, #3
 800c7f0:	d816      	bhi.n	800c820 <USBD_LL_SetUSBAddress+0x5c>
 800c7f2:	a201      	add	r2, pc, #4	; (adr r2, 800c7f8 <USBD_LL_SetUSBAddress+0x34>)
 800c7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7f8:	0800c809 	.word	0x0800c809
 800c7fc:	0800c80f 	.word	0x0800c80f
 800c800:	0800c815 	.word	0x0800c815
 800c804:	0800c81b 	.word	0x0800c81b
    case HAL_OK :
      usb_status = USBD_OK;
 800c808:	2300      	movs	r3, #0
 800c80a:	73fb      	strb	r3, [r7, #15]
    break;
 800c80c:	e00b      	b.n	800c826 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c80e:	2302      	movs	r3, #2
 800c810:	73fb      	strb	r3, [r7, #15]
    break;
 800c812:	e008      	b.n	800c826 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c814:	2301      	movs	r3, #1
 800c816:	73fb      	strb	r3, [r7, #15]
    break;
 800c818:	e005      	b.n	800c826 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c81a:	2302      	movs	r3, #2
 800c81c:	73fb      	strb	r3, [r7, #15]
    break;
 800c81e:	e002      	b.n	800c826 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c820:	2302      	movs	r3, #2
 800c822:	73fb      	strb	r3, [r7, #15]
    break;
 800c824:	bf00      	nop
  }
  return usb_status;  
 800c826:	7bfb      	ldrb	r3, [r7, #15]
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3710      	adds	r7, #16
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b086      	sub	sp, #24
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	607a      	str	r2, [r7, #4]
 800c83a:	461a      	mov	r2, r3
 800c83c:	460b      	mov	r3, r1
 800c83e:	72fb      	strb	r3, [r7, #11]
 800c840:	4613      	mov	r3, r2
 800c842:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c844:	2300      	movs	r3, #0
 800c846:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c848:	2300      	movs	r3, #0
 800c84a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c852:	893b      	ldrh	r3, [r7, #8]
 800c854:	7af9      	ldrb	r1, [r7, #11]
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	f7f8 fc4c 	bl	80050f4 <HAL_PCD_EP_Transmit>
 800c85c:	4603      	mov	r3, r0
 800c85e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800c860:	7dbb      	ldrb	r3, [r7, #22]
 800c862:	2b03      	cmp	r3, #3
 800c864:	d816      	bhi.n	800c894 <USBD_LL_Transmit+0x64>
 800c866:	a201      	add	r2, pc, #4	; (adr r2, 800c86c <USBD_LL_Transmit+0x3c>)
 800c868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c86c:	0800c87d 	.word	0x0800c87d
 800c870:	0800c883 	.word	0x0800c883
 800c874:	0800c889 	.word	0x0800c889
 800c878:	0800c88f 	.word	0x0800c88f
    case HAL_OK :
      usb_status = USBD_OK;
 800c87c:	2300      	movs	r3, #0
 800c87e:	75fb      	strb	r3, [r7, #23]
    break;
 800c880:	e00b      	b.n	800c89a <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c882:	2302      	movs	r3, #2
 800c884:	75fb      	strb	r3, [r7, #23]
    break;
 800c886:	e008      	b.n	800c89a <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c888:	2301      	movs	r3, #1
 800c88a:	75fb      	strb	r3, [r7, #23]
    break;
 800c88c:	e005      	b.n	800c89a <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c88e:	2302      	movs	r3, #2
 800c890:	75fb      	strb	r3, [r7, #23]
    break;
 800c892:	e002      	b.n	800c89a <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800c894:	2302      	movs	r3, #2
 800c896:	75fb      	strb	r3, [r7, #23]
    break;
 800c898:	bf00      	nop
  }
  return usb_status;    
 800c89a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3718      	adds	r7, #24
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b086      	sub	sp, #24
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	607a      	str	r2, [r7, #4]
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	72fb      	strb	r3, [r7, #11]
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c8c6:	893b      	ldrh	r3, [r7, #8]
 800c8c8:	7af9      	ldrb	r1, [r7, #11]
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	f7f8 fbc2 	bl	8005054 <HAL_PCD_EP_Receive>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800c8d4:	7dbb      	ldrb	r3, [r7, #22]
 800c8d6:	2b03      	cmp	r3, #3
 800c8d8:	d816      	bhi.n	800c908 <USBD_LL_PrepareReceive+0x64>
 800c8da:	a201      	add	r2, pc, #4	; (adr r2, 800c8e0 <USBD_LL_PrepareReceive+0x3c>)
 800c8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e0:	0800c8f1 	.word	0x0800c8f1
 800c8e4:	0800c8f7 	.word	0x0800c8f7
 800c8e8:	0800c8fd 	.word	0x0800c8fd
 800c8ec:	0800c903 	.word	0x0800c903
    case HAL_OK :
      usb_status = USBD_OK;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	75fb      	strb	r3, [r7, #23]
    break;
 800c8f4:	e00b      	b.n	800c90e <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c8f6:	2302      	movs	r3, #2
 800c8f8:	75fb      	strb	r3, [r7, #23]
    break;
 800c8fa:	e008      	b.n	800c90e <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	75fb      	strb	r3, [r7, #23]
    break;
 800c900:	e005      	b.n	800c90e <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c902:	2302      	movs	r3, #2
 800c904:	75fb      	strb	r3, [r7, #23]
    break;
 800c906:	e002      	b.n	800c90e <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800c908:	2302      	movs	r3, #2
 800c90a:	75fb      	strb	r3, [r7, #23]
    break;
 800c90c:	bf00      	nop
  }
  return usb_status; 
 800c90e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c910:	4618      	mov	r0, r3
 800c912:	3718      	adds	r7, #24
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	460b      	mov	r3, r1
 800c922:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c92a:	78fa      	ldrb	r2, [r7, #3]
 800c92c:	4611      	mov	r1, r2
 800c92e:	4618      	mov	r0, r3
 800c930:	f7f8 fbca 	bl	80050c8 <HAL_PCD_EP_GetRxCount>
 800c934:	4603      	mov	r3, r0
}
 800c936:	4618      	mov	r0, r3
 800c938:	3708      	adds	r7, #8
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
	...

0800c940 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	460b      	mov	r3, r1
 800c94a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c94c:	78fb      	ldrb	r3, [r7, #3]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d002      	beq.n	800c958 <HAL_PCDEx_LPM_Callback+0x18>
 800c952:	2b01      	cmp	r3, #1
 800c954:	d013      	beq.n	800c97e <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800c956:	e023      	b.n	800c9a0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	699b      	ldr	r3, [r3, #24]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d007      	beq.n	800c970 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c960:	f7fe fe9b 	bl	800b69a <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c964:	4a10      	ldr	r2, [pc, #64]	; (800c9a8 <HAL_PCDEx_LPM_Callback+0x68>)
 800c966:	4b10      	ldr	r3, [pc, #64]	; (800c9a8 <HAL_PCDEx_LPM_Callback+0x68>)
 800c968:	691b      	ldr	r3, [r3, #16]
 800c96a:	f023 0306 	bic.w	r3, r3, #6
 800c96e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800c976:	4618      	mov	r0, r3
 800c978:	f7fd fe31 	bl	800a5de <USBD_LL_Resume>
    break;
 800c97c:	e010      	b.n	800c9a0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800c984:	4618      	mov	r0, r3
 800c986:	f7fd fe15 	bl	800a5b4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	699b      	ldr	r3, [r3, #24]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d005      	beq.n	800c99e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c992:	4a05      	ldr	r2, [pc, #20]	; (800c9a8 <HAL_PCDEx_LPM_Callback+0x68>)
 800c994:	4b04      	ldr	r3, [pc, #16]	; (800c9a8 <HAL_PCDEx_LPM_Callback+0x68>)
 800c996:	691b      	ldr	r3, [r3, #16]
 800c998:	f043 0306 	orr.w	r3, r3, #6
 800c99c:	6113      	str	r3, [r2, #16]
    break;   
 800c99e:	bf00      	nop
}
 800c9a0:	bf00      	nop
 800c9a2:	3708      	adds	r7, #8
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	e000ed00 	.word	0xe000ed00

0800c9ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c9b4:	4b03      	ldr	r3, [pc, #12]	; (800c9c4 <USBD_static_malloc+0x18>)
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	370c      	adds	r7, #12
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr
 800c9c2:	bf00      	nop
 800c9c4:	2000a1ac 	.word	0x2000a1ac

0800c9c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]

}
 800c9d0:	bf00      	nop
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c9e0:	f7fe fe5b 	bl	800b69a <SystemClock_Config>
}
 800c9e4:	bf00      	nop
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <USBD_LL_BatteryCharging>:
  *         else return USBD_FAIL if false
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c9f6:	60fb      	str	r3, [r7, #12]
  if (hpcd->Init.battery_charging_enable == ENABLE)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	6a1b      	ldr	r3, [r3, #32]
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d101      	bne.n	800ca04 <USBD_LL_BatteryCharging+0x1c>
  {
    return USBD_OK;
 800ca00:	2300      	movs	r3, #0
 800ca02:	e000      	b.n	800ca06 <USBD_LL_BatteryCharging+0x1e>
  }
  else
  {
    return USBD_FAIL;
 800ca04:	2302      	movs	r3, #2
  }
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3714      	adds	r7, #20
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr
	...

0800ca14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	6039      	str	r1, [r7, #0]
 800ca1e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	2212      	movs	r2, #18
 800ca24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ca26:	4b03      	ldr	r3, [pc, #12]	; (800ca34 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	370c      	adds	r7, #12
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr
 800ca34:	200012d0 	.word	0x200012d0

0800ca38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	4603      	mov	r3, r0
 800ca40:	6039      	str	r1, [r7, #0]
 800ca42:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	2204      	movs	r2, #4
 800ca48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ca4a:	4b03      	ldr	r3, [pc, #12]	; (800ca58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	370c      	adds	r7, #12
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr
 800ca58:	200012f0 	.word	0x200012f0

0800ca5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	4603      	mov	r3, r0
 800ca64:	6039      	str	r1, [r7, #0]
 800ca66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ca68:	79fb      	ldrb	r3, [r7, #7]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d105      	bne.n	800ca7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ca6e:	683a      	ldr	r2, [r7, #0]
 800ca70:	4907      	ldr	r1, [pc, #28]	; (800ca90 <USBD_FS_ProductStrDescriptor+0x34>)
 800ca72:	4808      	ldr	r0, [pc, #32]	; (800ca94 <USBD_FS_ProductStrDescriptor+0x38>)
 800ca74:	f7fe faba 	bl	800afec <USBD_GetString>
 800ca78:	e004      	b.n	800ca84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ca7a:	683a      	ldr	r2, [r7, #0]
 800ca7c:	4904      	ldr	r1, [pc, #16]	; (800ca90 <USBD_FS_ProductStrDescriptor+0x34>)
 800ca7e:	4805      	ldr	r0, [pc, #20]	; (800ca94 <USBD_FS_ProductStrDescriptor+0x38>)
 800ca80:	f7fe fab4 	bl	800afec <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca84:	4b02      	ldr	r3, [pc, #8]	; (800ca90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3708      	adds	r7, #8
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	2000be90 	.word	0x2000be90
 800ca94:	0800d700 	.word	0x0800d700

0800ca98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	4603      	mov	r3, r0
 800caa0:	6039      	str	r1, [r7, #0]
 800caa2:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800caa4:	683a      	ldr	r2, [r7, #0]
 800caa6:	4904      	ldr	r1, [pc, #16]	; (800cab8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800caa8:	4804      	ldr	r0, [pc, #16]	; (800cabc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800caaa:	f7fe fa9f 	bl	800afec <USBD_GetString>
  return USBD_StrDesc;
 800caae:	4b02      	ldr	r3, [pc, #8]	; (800cab8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	2000be90 	.word	0x2000be90
 800cabc:	0800d710 	.word	0x0800d710

0800cac0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	4603      	mov	r3, r0
 800cac8:	6039      	str	r1, [r7, #0]
 800caca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cacc:	79fb      	ldrb	r3, [r7, #7]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d105      	bne.n	800cade <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800cad2:	683a      	ldr	r2, [r7, #0]
 800cad4:	4907      	ldr	r1, [pc, #28]	; (800caf4 <USBD_FS_SerialStrDescriptor+0x34>)
 800cad6:	4808      	ldr	r0, [pc, #32]	; (800caf8 <USBD_FS_SerialStrDescriptor+0x38>)
 800cad8:	f7fe fa88 	bl	800afec <USBD_GetString>
 800cadc:	e004      	b.n	800cae8 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800cade:	683a      	ldr	r2, [r7, #0]
 800cae0:	4904      	ldr	r1, [pc, #16]	; (800caf4 <USBD_FS_SerialStrDescriptor+0x34>)
 800cae2:	4805      	ldr	r0, [pc, #20]	; (800caf8 <USBD_FS_SerialStrDescriptor+0x38>)
 800cae4:	f7fe fa82 	bl	800afec <USBD_GetString>
  }
  return USBD_StrDesc;
 800cae8:	4b02      	ldr	r3, [pc, #8]	; (800caf4 <USBD_FS_SerialStrDescriptor+0x34>)
}
 800caea:	4618      	mov	r0, r3
 800caec:	3708      	adds	r7, #8
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop
 800caf4:	2000be90 	.word	0x2000be90
 800caf8:	0800d724 	.word	0x0800d724

0800cafc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	4603      	mov	r3, r0
 800cb04:	6039      	str	r1, [r7, #0]
 800cb06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cb08:	79fb      	ldrb	r3, [r7, #7]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d105      	bne.n	800cb1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb0e:	683a      	ldr	r2, [r7, #0]
 800cb10:	4907      	ldr	r1, [pc, #28]	; (800cb30 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb12:	4808      	ldr	r0, [pc, #32]	; (800cb34 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb14:	f7fe fa6a 	bl	800afec <USBD_GetString>
 800cb18:	e004      	b.n	800cb24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb1a:	683a      	ldr	r2, [r7, #0]
 800cb1c:	4904      	ldr	r1, [pc, #16]	; (800cb30 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb1e:	4805      	ldr	r0, [pc, #20]	; (800cb34 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb20:	f7fe fa64 	bl	800afec <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb24:	4b02      	ldr	r3, [pc, #8]	; (800cb30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3708      	adds	r7, #8
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	2000be90 	.word	0x2000be90
 800cb34:	0800d734 	.word	0x0800d734

0800cb38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	4603      	mov	r3, r0
 800cb40:	6039      	str	r1, [r7, #0]
 800cb42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb44:	79fb      	ldrb	r3, [r7, #7]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d105      	bne.n	800cb56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb4a:	683a      	ldr	r2, [r7, #0]
 800cb4c:	4907      	ldr	r1, [pc, #28]	; (800cb6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb4e:	4808      	ldr	r0, [pc, #32]	; (800cb70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb50:	f7fe fa4c 	bl	800afec <USBD_GetString>
 800cb54:	e004      	b.n	800cb60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb56:	683a      	ldr	r2, [r7, #0]
 800cb58:	4904      	ldr	r1, [pc, #16]	; (800cb6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb5a:	4805      	ldr	r0, [pc, #20]	; (800cb70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb5c:	f7fe fa46 	bl	800afec <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb60:	4b02      	ldr	r3, [pc, #8]	; (800cb6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3708      	adds	r7, #8
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	2000be90 	.word	0x2000be90
 800cb70:	0800d740 	.word	0x0800d740

0800cb74 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	6039      	str	r1, [r7, #0]
 800cb7e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_BOSDesc);
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	220c      	movs	r2, #12
 800cb84:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cb86:	4b03      	ldr	r3, [pc, #12]	; (800cb94 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	370c      	adds	r7, #12
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr
 800cb94:	200012e4 	.word	0x200012e4

0800cb98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800cb98:	f8df d034 	ldr.w	sp, [pc, #52]	; 800cbd0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800cb9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800cb9e:	e003      	b.n	800cba8 <LoopCopyDataInit>

0800cba0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800cba0:	4b0c      	ldr	r3, [pc, #48]	; (800cbd4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800cba2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800cba4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800cba6:	3104      	adds	r1, #4

0800cba8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800cba8:	480b      	ldr	r0, [pc, #44]	; (800cbd8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800cbaa:	4b0c      	ldr	r3, [pc, #48]	; (800cbdc <LoopForever+0xe>)
	adds	r2, r0, r1
 800cbac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800cbae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800cbb0:	d3f6      	bcc.n	800cba0 <CopyDataInit>
	ldr	r2, =_sbss
 800cbb2:	4a0b      	ldr	r2, [pc, #44]	; (800cbe0 <LoopForever+0x12>)
	b	LoopFillZerobss
 800cbb4:	e002      	b.n	800cbbc <LoopFillZerobss>

0800cbb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800cbb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800cbb8:	f842 3b04 	str.w	r3, [r2], #4

0800cbbc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800cbbc:	4b09      	ldr	r3, [pc, #36]	; (800cbe4 <LoopForever+0x16>)
	cmp	r2, r3
 800cbbe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800cbc0:	d3f9      	bcc.n	800cbb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800cbc2:	f7fe feb5 	bl	800b930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800cbc6:	f000 f811 	bl	800cbec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800cbca:	f7fe fd45 	bl	800b658 <main>

0800cbce <LoopForever>:

LoopForever:
    b LoopForever
 800cbce:	e7fe      	b.n	800cbce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800cbd0:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 800cbd4:	0800d8f0 	.word	0x0800d8f0
	ldr	r0, =_sdata
 800cbd8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800cbdc:	200014c4 	.word	0x200014c4
	ldr	r2, =_sbss
 800cbe0:	200014c4 	.word	0x200014c4
	ldr	r3, = _ebss
 800cbe4:	2000c094 	.word	0x2000c094

0800cbe8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800cbe8:	e7fe      	b.n	800cbe8 <ADC1_IRQHandler>
	...

0800cbec <__libc_init_array>:
 800cbec:	b570      	push	{r4, r5, r6, lr}
 800cbee:	4e0d      	ldr	r6, [pc, #52]	; (800cc24 <__libc_init_array+0x38>)
 800cbf0:	4c0d      	ldr	r4, [pc, #52]	; (800cc28 <__libc_init_array+0x3c>)
 800cbf2:	1ba4      	subs	r4, r4, r6
 800cbf4:	10a4      	asrs	r4, r4, #2
 800cbf6:	2500      	movs	r5, #0
 800cbf8:	42a5      	cmp	r5, r4
 800cbfa:	d109      	bne.n	800cc10 <__libc_init_array+0x24>
 800cbfc:	4e0b      	ldr	r6, [pc, #44]	; (800cc2c <__libc_init_array+0x40>)
 800cbfe:	4c0c      	ldr	r4, [pc, #48]	; (800cc30 <__libc_init_array+0x44>)
 800cc00:	f000 fd2a 	bl	800d658 <_init>
 800cc04:	1ba4      	subs	r4, r4, r6
 800cc06:	10a4      	asrs	r4, r4, #2
 800cc08:	2500      	movs	r5, #0
 800cc0a:	42a5      	cmp	r5, r4
 800cc0c:	d105      	bne.n	800cc1a <__libc_init_array+0x2e>
 800cc0e:	bd70      	pop	{r4, r5, r6, pc}
 800cc10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cc14:	4798      	blx	r3
 800cc16:	3501      	adds	r5, #1
 800cc18:	e7ee      	b.n	800cbf8 <__libc_init_array+0xc>
 800cc1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cc1e:	4798      	blx	r3
 800cc20:	3501      	adds	r5, #1
 800cc22:	e7f2      	b.n	800cc0a <__libc_init_array+0x1e>
 800cc24:	0800d8e8 	.word	0x0800d8e8
 800cc28:	0800d8e8 	.word	0x0800d8e8
 800cc2c:	0800d8e8 	.word	0x0800d8e8
 800cc30:	0800d8ec 	.word	0x0800d8ec

0800cc34 <memcpy>:
 800cc34:	b510      	push	{r4, lr}
 800cc36:	1e43      	subs	r3, r0, #1
 800cc38:	440a      	add	r2, r1
 800cc3a:	4291      	cmp	r1, r2
 800cc3c:	d100      	bne.n	800cc40 <memcpy+0xc>
 800cc3e:	bd10      	pop	{r4, pc}
 800cc40:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc44:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc48:	e7f7      	b.n	800cc3a <memcpy+0x6>

0800cc4a <memset>:
 800cc4a:	4402      	add	r2, r0
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d100      	bne.n	800cc54 <memset+0xa>
 800cc52:	4770      	bx	lr
 800cc54:	f803 1b01 	strb.w	r1, [r3], #1
 800cc58:	e7f9      	b.n	800cc4e <memset+0x4>
	...

0800cc5c <sniprintf>:
 800cc5c:	b40c      	push	{r2, r3}
 800cc5e:	b530      	push	{r4, r5, lr}
 800cc60:	4b17      	ldr	r3, [pc, #92]	; (800ccc0 <sniprintf+0x64>)
 800cc62:	1e0c      	subs	r4, r1, #0
 800cc64:	b09d      	sub	sp, #116	; 0x74
 800cc66:	681d      	ldr	r5, [r3, #0]
 800cc68:	da08      	bge.n	800cc7c <sniprintf+0x20>
 800cc6a:	238b      	movs	r3, #139	; 0x8b
 800cc6c:	602b      	str	r3, [r5, #0]
 800cc6e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc72:	b01d      	add	sp, #116	; 0x74
 800cc74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc78:	b002      	add	sp, #8
 800cc7a:	4770      	bx	lr
 800cc7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cc80:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cc84:	bf14      	ite	ne
 800cc86:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cc8a:	4623      	moveq	r3, r4
 800cc8c:	9304      	str	r3, [sp, #16]
 800cc8e:	9307      	str	r3, [sp, #28]
 800cc90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cc94:	9002      	str	r0, [sp, #8]
 800cc96:	9006      	str	r0, [sp, #24]
 800cc98:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cc9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cc9e:	ab21      	add	r3, sp, #132	; 0x84
 800cca0:	a902      	add	r1, sp, #8
 800cca2:	4628      	mov	r0, r5
 800cca4:	9301      	str	r3, [sp, #4]
 800cca6:	f000 f929 	bl	800cefc <_svfiprintf_r>
 800ccaa:	1c43      	adds	r3, r0, #1
 800ccac:	bfbc      	itt	lt
 800ccae:	238b      	movlt	r3, #139	; 0x8b
 800ccb0:	602b      	strlt	r3, [r5, #0]
 800ccb2:	2c00      	cmp	r4, #0
 800ccb4:	d0dd      	beq.n	800cc72 <sniprintf+0x16>
 800ccb6:	9b02      	ldr	r3, [sp, #8]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	701a      	strb	r2, [r3, #0]
 800ccbc:	e7d9      	b.n	800cc72 <sniprintf+0x16>
 800ccbe:	bf00      	nop
 800ccc0:	200012f4 	.word	0x200012f4

0800ccc4 <strncpy>:
 800ccc4:	b570      	push	{r4, r5, r6, lr}
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	b902      	cbnz	r2, 800cccc <strncpy+0x8>
 800ccca:	bd70      	pop	{r4, r5, r6, pc}
 800cccc:	4623      	mov	r3, r4
 800ccce:	f811 5b01 	ldrb.w	r5, [r1], #1
 800ccd2:	f803 5b01 	strb.w	r5, [r3], #1
 800ccd6:	1e56      	subs	r6, r2, #1
 800ccd8:	b91d      	cbnz	r5, 800cce2 <strncpy+0x1e>
 800ccda:	4414      	add	r4, r2
 800ccdc:	42a3      	cmp	r3, r4
 800ccde:	d103      	bne.n	800cce8 <strncpy+0x24>
 800cce0:	bd70      	pop	{r4, r5, r6, pc}
 800cce2:	461c      	mov	r4, r3
 800cce4:	4632      	mov	r2, r6
 800cce6:	e7ef      	b.n	800ccc8 <strncpy+0x4>
 800cce8:	f803 5b01 	strb.w	r5, [r3], #1
 800ccec:	e7f6      	b.n	800ccdc <strncpy+0x18>

0800ccee <_strtol_l.isra.0>:
 800ccee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf2:	4680      	mov	r8, r0
 800ccf4:	4689      	mov	r9, r1
 800ccf6:	4692      	mov	sl, r2
 800ccf8:	461f      	mov	r7, r3
 800ccfa:	468b      	mov	fp, r1
 800ccfc:	465d      	mov	r5, fp
 800ccfe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cd00:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd04:	f000 f88a 	bl	800ce1c <__locale_ctype_ptr_l>
 800cd08:	4420      	add	r0, r4
 800cd0a:	7846      	ldrb	r6, [r0, #1]
 800cd0c:	f016 0608 	ands.w	r6, r6, #8
 800cd10:	d10b      	bne.n	800cd2a <_strtol_l.isra.0+0x3c>
 800cd12:	2c2d      	cmp	r4, #45	; 0x2d
 800cd14:	d10b      	bne.n	800cd2e <_strtol_l.isra.0+0x40>
 800cd16:	782c      	ldrb	r4, [r5, #0]
 800cd18:	2601      	movs	r6, #1
 800cd1a:	f10b 0502 	add.w	r5, fp, #2
 800cd1e:	b167      	cbz	r7, 800cd3a <_strtol_l.isra.0+0x4c>
 800cd20:	2f10      	cmp	r7, #16
 800cd22:	d114      	bne.n	800cd4e <_strtol_l.isra.0+0x60>
 800cd24:	2c30      	cmp	r4, #48	; 0x30
 800cd26:	d00a      	beq.n	800cd3e <_strtol_l.isra.0+0x50>
 800cd28:	e011      	b.n	800cd4e <_strtol_l.isra.0+0x60>
 800cd2a:	46ab      	mov	fp, r5
 800cd2c:	e7e6      	b.n	800ccfc <_strtol_l.isra.0+0xe>
 800cd2e:	2c2b      	cmp	r4, #43	; 0x2b
 800cd30:	bf04      	itt	eq
 800cd32:	782c      	ldrbeq	r4, [r5, #0]
 800cd34:	f10b 0502 	addeq.w	r5, fp, #2
 800cd38:	e7f1      	b.n	800cd1e <_strtol_l.isra.0+0x30>
 800cd3a:	2c30      	cmp	r4, #48	; 0x30
 800cd3c:	d127      	bne.n	800cd8e <_strtol_l.isra.0+0xa0>
 800cd3e:	782b      	ldrb	r3, [r5, #0]
 800cd40:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cd44:	2b58      	cmp	r3, #88	; 0x58
 800cd46:	d14b      	bne.n	800cde0 <_strtol_l.isra.0+0xf2>
 800cd48:	786c      	ldrb	r4, [r5, #1]
 800cd4a:	2710      	movs	r7, #16
 800cd4c:	3502      	adds	r5, #2
 800cd4e:	2e00      	cmp	r6, #0
 800cd50:	bf0c      	ite	eq
 800cd52:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800cd56:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	fbb1 fef7 	udiv	lr, r1, r7
 800cd60:	4610      	mov	r0, r2
 800cd62:	fb07 1c1e 	mls	ip, r7, lr, r1
 800cd66:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800cd6a:	2b09      	cmp	r3, #9
 800cd6c:	d811      	bhi.n	800cd92 <_strtol_l.isra.0+0xa4>
 800cd6e:	461c      	mov	r4, r3
 800cd70:	42a7      	cmp	r7, r4
 800cd72:	dd1d      	ble.n	800cdb0 <_strtol_l.isra.0+0xc2>
 800cd74:	1c53      	adds	r3, r2, #1
 800cd76:	d007      	beq.n	800cd88 <_strtol_l.isra.0+0x9a>
 800cd78:	4586      	cmp	lr, r0
 800cd7a:	d316      	bcc.n	800cdaa <_strtol_l.isra.0+0xbc>
 800cd7c:	d101      	bne.n	800cd82 <_strtol_l.isra.0+0x94>
 800cd7e:	45a4      	cmp	ip, r4
 800cd80:	db13      	blt.n	800cdaa <_strtol_l.isra.0+0xbc>
 800cd82:	fb00 4007 	mla	r0, r0, r7, r4
 800cd86:	2201      	movs	r2, #1
 800cd88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd8c:	e7eb      	b.n	800cd66 <_strtol_l.isra.0+0x78>
 800cd8e:	270a      	movs	r7, #10
 800cd90:	e7dd      	b.n	800cd4e <_strtol_l.isra.0+0x60>
 800cd92:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800cd96:	2b19      	cmp	r3, #25
 800cd98:	d801      	bhi.n	800cd9e <_strtol_l.isra.0+0xb0>
 800cd9a:	3c37      	subs	r4, #55	; 0x37
 800cd9c:	e7e8      	b.n	800cd70 <_strtol_l.isra.0+0x82>
 800cd9e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800cda2:	2b19      	cmp	r3, #25
 800cda4:	d804      	bhi.n	800cdb0 <_strtol_l.isra.0+0xc2>
 800cda6:	3c57      	subs	r4, #87	; 0x57
 800cda8:	e7e2      	b.n	800cd70 <_strtol_l.isra.0+0x82>
 800cdaa:	f04f 32ff 	mov.w	r2, #4294967295
 800cdae:	e7eb      	b.n	800cd88 <_strtol_l.isra.0+0x9a>
 800cdb0:	1c53      	adds	r3, r2, #1
 800cdb2:	d108      	bne.n	800cdc6 <_strtol_l.isra.0+0xd8>
 800cdb4:	2322      	movs	r3, #34	; 0x22
 800cdb6:	f8c8 3000 	str.w	r3, [r8]
 800cdba:	4608      	mov	r0, r1
 800cdbc:	f1ba 0f00 	cmp.w	sl, #0
 800cdc0:	d107      	bne.n	800cdd2 <_strtol_l.isra.0+0xe4>
 800cdc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdc6:	b106      	cbz	r6, 800cdca <_strtol_l.isra.0+0xdc>
 800cdc8:	4240      	negs	r0, r0
 800cdca:	f1ba 0f00 	cmp.w	sl, #0
 800cdce:	d00c      	beq.n	800cdea <_strtol_l.isra.0+0xfc>
 800cdd0:	b122      	cbz	r2, 800cddc <_strtol_l.isra.0+0xee>
 800cdd2:	3d01      	subs	r5, #1
 800cdd4:	f8ca 5000 	str.w	r5, [sl]
 800cdd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cddc:	464d      	mov	r5, r9
 800cdde:	e7f9      	b.n	800cdd4 <_strtol_l.isra.0+0xe6>
 800cde0:	2430      	movs	r4, #48	; 0x30
 800cde2:	2f00      	cmp	r7, #0
 800cde4:	d1b3      	bne.n	800cd4e <_strtol_l.isra.0+0x60>
 800cde6:	2708      	movs	r7, #8
 800cde8:	e7b1      	b.n	800cd4e <_strtol_l.isra.0+0x60>
 800cdea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800cdf0 <strtol>:
 800cdf0:	4b08      	ldr	r3, [pc, #32]	; (800ce14 <strtol+0x24>)
 800cdf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdf4:	681c      	ldr	r4, [r3, #0]
 800cdf6:	4d08      	ldr	r5, [pc, #32]	; (800ce18 <strtol+0x28>)
 800cdf8:	6a23      	ldr	r3, [r4, #32]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	bf08      	it	eq
 800cdfe:	462b      	moveq	r3, r5
 800ce00:	9300      	str	r3, [sp, #0]
 800ce02:	4613      	mov	r3, r2
 800ce04:	460a      	mov	r2, r1
 800ce06:	4601      	mov	r1, r0
 800ce08:	4620      	mov	r0, r4
 800ce0a:	f7ff ff70 	bl	800ccee <_strtol_l.isra.0>
 800ce0e:	b003      	add	sp, #12
 800ce10:	bd30      	pop	{r4, r5, pc}
 800ce12:	bf00      	nop
 800ce14:	200012f4 	.word	0x200012f4
 800ce18:	20001358 	.word	0x20001358

0800ce1c <__locale_ctype_ptr_l>:
 800ce1c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ce20:	4770      	bx	lr

0800ce22 <__ascii_mbtowc>:
 800ce22:	b082      	sub	sp, #8
 800ce24:	b901      	cbnz	r1, 800ce28 <__ascii_mbtowc+0x6>
 800ce26:	a901      	add	r1, sp, #4
 800ce28:	b142      	cbz	r2, 800ce3c <__ascii_mbtowc+0x1a>
 800ce2a:	b14b      	cbz	r3, 800ce40 <__ascii_mbtowc+0x1e>
 800ce2c:	7813      	ldrb	r3, [r2, #0]
 800ce2e:	600b      	str	r3, [r1, #0]
 800ce30:	7812      	ldrb	r2, [r2, #0]
 800ce32:	1c10      	adds	r0, r2, #0
 800ce34:	bf18      	it	ne
 800ce36:	2001      	movne	r0, #1
 800ce38:	b002      	add	sp, #8
 800ce3a:	4770      	bx	lr
 800ce3c:	4610      	mov	r0, r2
 800ce3e:	e7fb      	b.n	800ce38 <__ascii_mbtowc+0x16>
 800ce40:	f06f 0001 	mvn.w	r0, #1
 800ce44:	e7f8      	b.n	800ce38 <__ascii_mbtowc+0x16>

0800ce46 <__ssputs_r>:
 800ce46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce4a:	688e      	ldr	r6, [r1, #8]
 800ce4c:	429e      	cmp	r6, r3
 800ce4e:	4682      	mov	sl, r0
 800ce50:	460c      	mov	r4, r1
 800ce52:	4691      	mov	r9, r2
 800ce54:	4698      	mov	r8, r3
 800ce56:	d835      	bhi.n	800cec4 <__ssputs_r+0x7e>
 800ce58:	898a      	ldrh	r2, [r1, #12]
 800ce5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce5e:	d031      	beq.n	800cec4 <__ssputs_r+0x7e>
 800ce60:	6825      	ldr	r5, [r4, #0]
 800ce62:	6909      	ldr	r1, [r1, #16]
 800ce64:	1a6f      	subs	r7, r5, r1
 800ce66:	6965      	ldr	r5, [r4, #20]
 800ce68:	2302      	movs	r3, #2
 800ce6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce6e:	fb95 f5f3 	sdiv	r5, r5, r3
 800ce72:	f108 0301 	add.w	r3, r8, #1
 800ce76:	443b      	add	r3, r7
 800ce78:	429d      	cmp	r5, r3
 800ce7a:	bf38      	it	cc
 800ce7c:	461d      	movcc	r5, r3
 800ce7e:	0553      	lsls	r3, r2, #21
 800ce80:	d531      	bpl.n	800cee6 <__ssputs_r+0xa0>
 800ce82:	4629      	mov	r1, r5
 800ce84:	f000 fb3a 	bl	800d4fc <_malloc_r>
 800ce88:	4606      	mov	r6, r0
 800ce8a:	b950      	cbnz	r0, 800cea2 <__ssputs_r+0x5c>
 800ce8c:	230c      	movs	r3, #12
 800ce8e:	f8ca 3000 	str.w	r3, [sl]
 800ce92:	89a3      	ldrh	r3, [r4, #12]
 800ce94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce98:	81a3      	strh	r3, [r4, #12]
 800ce9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cea2:	463a      	mov	r2, r7
 800cea4:	6921      	ldr	r1, [r4, #16]
 800cea6:	f7ff fec5 	bl	800cc34 <memcpy>
 800ceaa:	89a3      	ldrh	r3, [r4, #12]
 800ceac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ceb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceb4:	81a3      	strh	r3, [r4, #12]
 800ceb6:	6126      	str	r6, [r4, #16]
 800ceb8:	6165      	str	r5, [r4, #20]
 800ceba:	443e      	add	r6, r7
 800cebc:	1bed      	subs	r5, r5, r7
 800cebe:	6026      	str	r6, [r4, #0]
 800cec0:	60a5      	str	r5, [r4, #8]
 800cec2:	4646      	mov	r6, r8
 800cec4:	4546      	cmp	r6, r8
 800cec6:	bf28      	it	cs
 800cec8:	4646      	movcs	r6, r8
 800ceca:	4632      	mov	r2, r6
 800cecc:	4649      	mov	r1, r9
 800cece:	6820      	ldr	r0, [r4, #0]
 800ced0:	f000 faab 	bl	800d42a <memmove>
 800ced4:	68a3      	ldr	r3, [r4, #8]
 800ced6:	1b9b      	subs	r3, r3, r6
 800ced8:	60a3      	str	r3, [r4, #8]
 800ceda:	6823      	ldr	r3, [r4, #0]
 800cedc:	441e      	add	r6, r3
 800cede:	6026      	str	r6, [r4, #0]
 800cee0:	2000      	movs	r0, #0
 800cee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee6:	462a      	mov	r2, r5
 800cee8:	f000 fb66 	bl	800d5b8 <_realloc_r>
 800ceec:	4606      	mov	r6, r0
 800ceee:	2800      	cmp	r0, #0
 800cef0:	d1e1      	bne.n	800ceb6 <__ssputs_r+0x70>
 800cef2:	6921      	ldr	r1, [r4, #16]
 800cef4:	4650      	mov	r0, sl
 800cef6:	f000 fab3 	bl	800d460 <_free_r>
 800cefa:	e7c7      	b.n	800ce8c <__ssputs_r+0x46>

0800cefc <_svfiprintf_r>:
 800cefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf00:	b09d      	sub	sp, #116	; 0x74
 800cf02:	4680      	mov	r8, r0
 800cf04:	9303      	str	r3, [sp, #12]
 800cf06:	898b      	ldrh	r3, [r1, #12]
 800cf08:	061c      	lsls	r4, r3, #24
 800cf0a:	460d      	mov	r5, r1
 800cf0c:	4616      	mov	r6, r2
 800cf0e:	d50f      	bpl.n	800cf30 <_svfiprintf_r+0x34>
 800cf10:	690b      	ldr	r3, [r1, #16]
 800cf12:	b96b      	cbnz	r3, 800cf30 <_svfiprintf_r+0x34>
 800cf14:	2140      	movs	r1, #64	; 0x40
 800cf16:	f000 faf1 	bl	800d4fc <_malloc_r>
 800cf1a:	6028      	str	r0, [r5, #0]
 800cf1c:	6128      	str	r0, [r5, #16]
 800cf1e:	b928      	cbnz	r0, 800cf2c <_svfiprintf_r+0x30>
 800cf20:	230c      	movs	r3, #12
 800cf22:	f8c8 3000 	str.w	r3, [r8]
 800cf26:	f04f 30ff 	mov.w	r0, #4294967295
 800cf2a:	e0c5      	b.n	800d0b8 <_svfiprintf_r+0x1bc>
 800cf2c:	2340      	movs	r3, #64	; 0x40
 800cf2e:	616b      	str	r3, [r5, #20]
 800cf30:	2300      	movs	r3, #0
 800cf32:	9309      	str	r3, [sp, #36]	; 0x24
 800cf34:	2320      	movs	r3, #32
 800cf36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf3a:	2330      	movs	r3, #48	; 0x30
 800cf3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf40:	f04f 0b01 	mov.w	fp, #1
 800cf44:	4637      	mov	r7, r6
 800cf46:	463c      	mov	r4, r7
 800cf48:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d13c      	bne.n	800cfca <_svfiprintf_r+0xce>
 800cf50:	ebb7 0a06 	subs.w	sl, r7, r6
 800cf54:	d00b      	beq.n	800cf6e <_svfiprintf_r+0x72>
 800cf56:	4653      	mov	r3, sl
 800cf58:	4632      	mov	r2, r6
 800cf5a:	4629      	mov	r1, r5
 800cf5c:	4640      	mov	r0, r8
 800cf5e:	f7ff ff72 	bl	800ce46 <__ssputs_r>
 800cf62:	3001      	adds	r0, #1
 800cf64:	f000 80a3 	beq.w	800d0ae <_svfiprintf_r+0x1b2>
 800cf68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf6a:	4453      	add	r3, sl
 800cf6c:	9309      	str	r3, [sp, #36]	; 0x24
 800cf6e:	783b      	ldrb	r3, [r7, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	f000 809c 	beq.w	800d0ae <_svfiprintf_r+0x1b2>
 800cf76:	2300      	movs	r3, #0
 800cf78:	f04f 32ff 	mov.w	r2, #4294967295
 800cf7c:	9304      	str	r3, [sp, #16]
 800cf7e:	9307      	str	r3, [sp, #28]
 800cf80:	9205      	str	r2, [sp, #20]
 800cf82:	9306      	str	r3, [sp, #24]
 800cf84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf88:	931a      	str	r3, [sp, #104]	; 0x68
 800cf8a:	2205      	movs	r2, #5
 800cf8c:	7821      	ldrb	r1, [r4, #0]
 800cf8e:	4850      	ldr	r0, [pc, #320]	; (800d0d0 <_svfiprintf_r+0x1d4>)
 800cf90:	f7f3 f92e 	bl	80001f0 <memchr>
 800cf94:	1c67      	adds	r7, r4, #1
 800cf96:	9b04      	ldr	r3, [sp, #16]
 800cf98:	b9d8      	cbnz	r0, 800cfd2 <_svfiprintf_r+0xd6>
 800cf9a:	06d9      	lsls	r1, r3, #27
 800cf9c:	bf44      	itt	mi
 800cf9e:	2220      	movmi	r2, #32
 800cfa0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cfa4:	071a      	lsls	r2, r3, #28
 800cfa6:	bf44      	itt	mi
 800cfa8:	222b      	movmi	r2, #43	; 0x2b
 800cfaa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cfae:	7822      	ldrb	r2, [r4, #0]
 800cfb0:	2a2a      	cmp	r2, #42	; 0x2a
 800cfb2:	d016      	beq.n	800cfe2 <_svfiprintf_r+0xe6>
 800cfb4:	9a07      	ldr	r2, [sp, #28]
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	200a      	movs	r0, #10
 800cfba:	4627      	mov	r7, r4
 800cfbc:	3401      	adds	r4, #1
 800cfbe:	783b      	ldrb	r3, [r7, #0]
 800cfc0:	3b30      	subs	r3, #48	; 0x30
 800cfc2:	2b09      	cmp	r3, #9
 800cfc4:	d951      	bls.n	800d06a <_svfiprintf_r+0x16e>
 800cfc6:	b1c9      	cbz	r1, 800cffc <_svfiprintf_r+0x100>
 800cfc8:	e011      	b.n	800cfee <_svfiprintf_r+0xf2>
 800cfca:	2b25      	cmp	r3, #37	; 0x25
 800cfcc:	d0c0      	beq.n	800cf50 <_svfiprintf_r+0x54>
 800cfce:	4627      	mov	r7, r4
 800cfd0:	e7b9      	b.n	800cf46 <_svfiprintf_r+0x4a>
 800cfd2:	4a3f      	ldr	r2, [pc, #252]	; (800d0d0 <_svfiprintf_r+0x1d4>)
 800cfd4:	1a80      	subs	r0, r0, r2
 800cfd6:	fa0b f000 	lsl.w	r0, fp, r0
 800cfda:	4318      	orrs	r0, r3
 800cfdc:	9004      	str	r0, [sp, #16]
 800cfde:	463c      	mov	r4, r7
 800cfe0:	e7d3      	b.n	800cf8a <_svfiprintf_r+0x8e>
 800cfe2:	9a03      	ldr	r2, [sp, #12]
 800cfe4:	1d11      	adds	r1, r2, #4
 800cfe6:	6812      	ldr	r2, [r2, #0]
 800cfe8:	9103      	str	r1, [sp, #12]
 800cfea:	2a00      	cmp	r2, #0
 800cfec:	db01      	blt.n	800cff2 <_svfiprintf_r+0xf6>
 800cfee:	9207      	str	r2, [sp, #28]
 800cff0:	e004      	b.n	800cffc <_svfiprintf_r+0x100>
 800cff2:	4252      	negs	r2, r2
 800cff4:	f043 0302 	orr.w	r3, r3, #2
 800cff8:	9207      	str	r2, [sp, #28]
 800cffa:	9304      	str	r3, [sp, #16]
 800cffc:	783b      	ldrb	r3, [r7, #0]
 800cffe:	2b2e      	cmp	r3, #46	; 0x2e
 800d000:	d10e      	bne.n	800d020 <_svfiprintf_r+0x124>
 800d002:	787b      	ldrb	r3, [r7, #1]
 800d004:	2b2a      	cmp	r3, #42	; 0x2a
 800d006:	f107 0101 	add.w	r1, r7, #1
 800d00a:	d132      	bne.n	800d072 <_svfiprintf_r+0x176>
 800d00c:	9b03      	ldr	r3, [sp, #12]
 800d00e:	1d1a      	adds	r2, r3, #4
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	9203      	str	r2, [sp, #12]
 800d014:	2b00      	cmp	r3, #0
 800d016:	bfb8      	it	lt
 800d018:	f04f 33ff 	movlt.w	r3, #4294967295
 800d01c:	3702      	adds	r7, #2
 800d01e:	9305      	str	r3, [sp, #20]
 800d020:	4c2c      	ldr	r4, [pc, #176]	; (800d0d4 <_svfiprintf_r+0x1d8>)
 800d022:	7839      	ldrb	r1, [r7, #0]
 800d024:	2203      	movs	r2, #3
 800d026:	4620      	mov	r0, r4
 800d028:	f7f3 f8e2 	bl	80001f0 <memchr>
 800d02c:	b138      	cbz	r0, 800d03e <_svfiprintf_r+0x142>
 800d02e:	2340      	movs	r3, #64	; 0x40
 800d030:	1b00      	subs	r0, r0, r4
 800d032:	fa03 f000 	lsl.w	r0, r3, r0
 800d036:	9b04      	ldr	r3, [sp, #16]
 800d038:	4303      	orrs	r3, r0
 800d03a:	9304      	str	r3, [sp, #16]
 800d03c:	3701      	adds	r7, #1
 800d03e:	7839      	ldrb	r1, [r7, #0]
 800d040:	4825      	ldr	r0, [pc, #148]	; (800d0d8 <_svfiprintf_r+0x1dc>)
 800d042:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d046:	2206      	movs	r2, #6
 800d048:	1c7e      	adds	r6, r7, #1
 800d04a:	f7f3 f8d1 	bl	80001f0 <memchr>
 800d04e:	2800      	cmp	r0, #0
 800d050:	d035      	beq.n	800d0be <_svfiprintf_r+0x1c2>
 800d052:	4b22      	ldr	r3, [pc, #136]	; (800d0dc <_svfiprintf_r+0x1e0>)
 800d054:	b9fb      	cbnz	r3, 800d096 <_svfiprintf_r+0x19a>
 800d056:	9b03      	ldr	r3, [sp, #12]
 800d058:	3307      	adds	r3, #7
 800d05a:	f023 0307 	bic.w	r3, r3, #7
 800d05e:	3308      	adds	r3, #8
 800d060:	9303      	str	r3, [sp, #12]
 800d062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d064:	444b      	add	r3, r9
 800d066:	9309      	str	r3, [sp, #36]	; 0x24
 800d068:	e76c      	b.n	800cf44 <_svfiprintf_r+0x48>
 800d06a:	fb00 3202 	mla	r2, r0, r2, r3
 800d06e:	2101      	movs	r1, #1
 800d070:	e7a3      	b.n	800cfba <_svfiprintf_r+0xbe>
 800d072:	2300      	movs	r3, #0
 800d074:	9305      	str	r3, [sp, #20]
 800d076:	4618      	mov	r0, r3
 800d078:	240a      	movs	r4, #10
 800d07a:	460f      	mov	r7, r1
 800d07c:	3101      	adds	r1, #1
 800d07e:	783a      	ldrb	r2, [r7, #0]
 800d080:	3a30      	subs	r2, #48	; 0x30
 800d082:	2a09      	cmp	r2, #9
 800d084:	d903      	bls.n	800d08e <_svfiprintf_r+0x192>
 800d086:	2b00      	cmp	r3, #0
 800d088:	d0ca      	beq.n	800d020 <_svfiprintf_r+0x124>
 800d08a:	9005      	str	r0, [sp, #20]
 800d08c:	e7c8      	b.n	800d020 <_svfiprintf_r+0x124>
 800d08e:	fb04 2000 	mla	r0, r4, r0, r2
 800d092:	2301      	movs	r3, #1
 800d094:	e7f1      	b.n	800d07a <_svfiprintf_r+0x17e>
 800d096:	ab03      	add	r3, sp, #12
 800d098:	9300      	str	r3, [sp, #0]
 800d09a:	462a      	mov	r2, r5
 800d09c:	4b10      	ldr	r3, [pc, #64]	; (800d0e0 <_svfiprintf_r+0x1e4>)
 800d09e:	a904      	add	r1, sp, #16
 800d0a0:	4640      	mov	r0, r8
 800d0a2:	f3af 8000 	nop.w
 800d0a6:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d0aa:	4681      	mov	r9, r0
 800d0ac:	d1d9      	bne.n	800d062 <_svfiprintf_r+0x166>
 800d0ae:	89ab      	ldrh	r3, [r5, #12]
 800d0b0:	065b      	lsls	r3, r3, #25
 800d0b2:	f53f af38 	bmi.w	800cf26 <_svfiprintf_r+0x2a>
 800d0b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0b8:	b01d      	add	sp, #116	; 0x74
 800d0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0be:	ab03      	add	r3, sp, #12
 800d0c0:	9300      	str	r3, [sp, #0]
 800d0c2:	462a      	mov	r2, r5
 800d0c4:	4b06      	ldr	r3, [pc, #24]	; (800d0e0 <_svfiprintf_r+0x1e4>)
 800d0c6:	a904      	add	r1, sp, #16
 800d0c8:	4640      	mov	r0, r8
 800d0ca:	f000 f881 	bl	800d1d0 <_printf_i>
 800d0ce:	e7ea      	b.n	800d0a6 <_svfiprintf_r+0x1aa>
 800d0d0:	0800d7aa 	.word	0x0800d7aa
 800d0d4:	0800d7b0 	.word	0x0800d7b0
 800d0d8:	0800d7b4 	.word	0x0800d7b4
 800d0dc:	00000000 	.word	0x00000000
 800d0e0:	0800ce47 	.word	0x0800ce47

0800d0e4 <_printf_common>:
 800d0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e8:	4691      	mov	r9, r2
 800d0ea:	461f      	mov	r7, r3
 800d0ec:	688a      	ldr	r2, [r1, #8]
 800d0ee:	690b      	ldr	r3, [r1, #16]
 800d0f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	bfb8      	it	lt
 800d0f8:	4613      	movlt	r3, r2
 800d0fa:	f8c9 3000 	str.w	r3, [r9]
 800d0fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d102:	4606      	mov	r6, r0
 800d104:	460c      	mov	r4, r1
 800d106:	b112      	cbz	r2, 800d10e <_printf_common+0x2a>
 800d108:	3301      	adds	r3, #1
 800d10a:	f8c9 3000 	str.w	r3, [r9]
 800d10e:	6823      	ldr	r3, [r4, #0]
 800d110:	0699      	lsls	r1, r3, #26
 800d112:	bf42      	ittt	mi
 800d114:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d118:	3302      	addmi	r3, #2
 800d11a:	f8c9 3000 	strmi.w	r3, [r9]
 800d11e:	6825      	ldr	r5, [r4, #0]
 800d120:	f015 0506 	ands.w	r5, r5, #6
 800d124:	d107      	bne.n	800d136 <_printf_common+0x52>
 800d126:	f104 0a19 	add.w	sl, r4, #25
 800d12a:	68e3      	ldr	r3, [r4, #12]
 800d12c:	f8d9 2000 	ldr.w	r2, [r9]
 800d130:	1a9b      	subs	r3, r3, r2
 800d132:	429d      	cmp	r5, r3
 800d134:	db29      	blt.n	800d18a <_printf_common+0xa6>
 800d136:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d13a:	6822      	ldr	r2, [r4, #0]
 800d13c:	3300      	adds	r3, #0
 800d13e:	bf18      	it	ne
 800d140:	2301      	movne	r3, #1
 800d142:	0692      	lsls	r2, r2, #26
 800d144:	d42e      	bmi.n	800d1a4 <_printf_common+0xc0>
 800d146:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d14a:	4639      	mov	r1, r7
 800d14c:	4630      	mov	r0, r6
 800d14e:	47c0      	blx	r8
 800d150:	3001      	adds	r0, #1
 800d152:	d021      	beq.n	800d198 <_printf_common+0xb4>
 800d154:	6823      	ldr	r3, [r4, #0]
 800d156:	68e5      	ldr	r5, [r4, #12]
 800d158:	f8d9 2000 	ldr.w	r2, [r9]
 800d15c:	f003 0306 	and.w	r3, r3, #6
 800d160:	2b04      	cmp	r3, #4
 800d162:	bf08      	it	eq
 800d164:	1aad      	subeq	r5, r5, r2
 800d166:	68a3      	ldr	r3, [r4, #8]
 800d168:	6922      	ldr	r2, [r4, #16]
 800d16a:	bf0c      	ite	eq
 800d16c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d170:	2500      	movne	r5, #0
 800d172:	4293      	cmp	r3, r2
 800d174:	bfc4      	itt	gt
 800d176:	1a9b      	subgt	r3, r3, r2
 800d178:	18ed      	addgt	r5, r5, r3
 800d17a:	f04f 0900 	mov.w	r9, #0
 800d17e:	341a      	adds	r4, #26
 800d180:	454d      	cmp	r5, r9
 800d182:	d11b      	bne.n	800d1bc <_printf_common+0xd8>
 800d184:	2000      	movs	r0, #0
 800d186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d18a:	2301      	movs	r3, #1
 800d18c:	4652      	mov	r2, sl
 800d18e:	4639      	mov	r1, r7
 800d190:	4630      	mov	r0, r6
 800d192:	47c0      	blx	r8
 800d194:	3001      	adds	r0, #1
 800d196:	d103      	bne.n	800d1a0 <_printf_common+0xbc>
 800d198:	f04f 30ff 	mov.w	r0, #4294967295
 800d19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1a0:	3501      	adds	r5, #1
 800d1a2:	e7c2      	b.n	800d12a <_printf_common+0x46>
 800d1a4:	18e1      	adds	r1, r4, r3
 800d1a6:	1c5a      	adds	r2, r3, #1
 800d1a8:	2030      	movs	r0, #48	; 0x30
 800d1aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d1ae:	4422      	add	r2, r4
 800d1b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d1b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d1b8:	3302      	adds	r3, #2
 800d1ba:	e7c4      	b.n	800d146 <_printf_common+0x62>
 800d1bc:	2301      	movs	r3, #1
 800d1be:	4622      	mov	r2, r4
 800d1c0:	4639      	mov	r1, r7
 800d1c2:	4630      	mov	r0, r6
 800d1c4:	47c0      	blx	r8
 800d1c6:	3001      	adds	r0, #1
 800d1c8:	d0e6      	beq.n	800d198 <_printf_common+0xb4>
 800d1ca:	f109 0901 	add.w	r9, r9, #1
 800d1ce:	e7d7      	b.n	800d180 <_printf_common+0x9c>

0800d1d0 <_printf_i>:
 800d1d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1d4:	4617      	mov	r7, r2
 800d1d6:	7e0a      	ldrb	r2, [r1, #24]
 800d1d8:	b085      	sub	sp, #20
 800d1da:	2a6e      	cmp	r2, #110	; 0x6e
 800d1dc:	4698      	mov	r8, r3
 800d1de:	4606      	mov	r6, r0
 800d1e0:	460c      	mov	r4, r1
 800d1e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1e4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800d1e8:	f000 80bc 	beq.w	800d364 <_printf_i+0x194>
 800d1ec:	d81a      	bhi.n	800d224 <_printf_i+0x54>
 800d1ee:	2a63      	cmp	r2, #99	; 0x63
 800d1f0:	d02e      	beq.n	800d250 <_printf_i+0x80>
 800d1f2:	d80a      	bhi.n	800d20a <_printf_i+0x3a>
 800d1f4:	2a00      	cmp	r2, #0
 800d1f6:	f000 80c8 	beq.w	800d38a <_printf_i+0x1ba>
 800d1fa:	2a58      	cmp	r2, #88	; 0x58
 800d1fc:	f000 808a 	beq.w	800d314 <_printf_i+0x144>
 800d200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d204:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800d208:	e02a      	b.n	800d260 <_printf_i+0x90>
 800d20a:	2a64      	cmp	r2, #100	; 0x64
 800d20c:	d001      	beq.n	800d212 <_printf_i+0x42>
 800d20e:	2a69      	cmp	r2, #105	; 0x69
 800d210:	d1f6      	bne.n	800d200 <_printf_i+0x30>
 800d212:	6821      	ldr	r1, [r4, #0]
 800d214:	681a      	ldr	r2, [r3, #0]
 800d216:	f011 0f80 	tst.w	r1, #128	; 0x80
 800d21a:	d023      	beq.n	800d264 <_printf_i+0x94>
 800d21c:	1d11      	adds	r1, r2, #4
 800d21e:	6019      	str	r1, [r3, #0]
 800d220:	6813      	ldr	r3, [r2, #0]
 800d222:	e027      	b.n	800d274 <_printf_i+0xa4>
 800d224:	2a73      	cmp	r2, #115	; 0x73
 800d226:	f000 80b4 	beq.w	800d392 <_printf_i+0x1c2>
 800d22a:	d808      	bhi.n	800d23e <_printf_i+0x6e>
 800d22c:	2a6f      	cmp	r2, #111	; 0x6f
 800d22e:	d02a      	beq.n	800d286 <_printf_i+0xb6>
 800d230:	2a70      	cmp	r2, #112	; 0x70
 800d232:	d1e5      	bne.n	800d200 <_printf_i+0x30>
 800d234:	680a      	ldr	r2, [r1, #0]
 800d236:	f042 0220 	orr.w	r2, r2, #32
 800d23a:	600a      	str	r2, [r1, #0]
 800d23c:	e003      	b.n	800d246 <_printf_i+0x76>
 800d23e:	2a75      	cmp	r2, #117	; 0x75
 800d240:	d021      	beq.n	800d286 <_printf_i+0xb6>
 800d242:	2a78      	cmp	r2, #120	; 0x78
 800d244:	d1dc      	bne.n	800d200 <_printf_i+0x30>
 800d246:	2278      	movs	r2, #120	; 0x78
 800d248:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800d24c:	496e      	ldr	r1, [pc, #440]	; (800d408 <_printf_i+0x238>)
 800d24e:	e064      	b.n	800d31a <_printf_i+0x14a>
 800d250:	681a      	ldr	r2, [r3, #0]
 800d252:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800d256:	1d11      	adds	r1, r2, #4
 800d258:	6019      	str	r1, [r3, #0]
 800d25a:	6813      	ldr	r3, [r2, #0]
 800d25c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d260:	2301      	movs	r3, #1
 800d262:	e0a3      	b.n	800d3ac <_printf_i+0x1dc>
 800d264:	f011 0f40 	tst.w	r1, #64	; 0x40
 800d268:	f102 0104 	add.w	r1, r2, #4
 800d26c:	6019      	str	r1, [r3, #0]
 800d26e:	d0d7      	beq.n	800d220 <_printf_i+0x50>
 800d270:	f9b2 3000 	ldrsh.w	r3, [r2]
 800d274:	2b00      	cmp	r3, #0
 800d276:	da03      	bge.n	800d280 <_printf_i+0xb0>
 800d278:	222d      	movs	r2, #45	; 0x2d
 800d27a:	425b      	negs	r3, r3
 800d27c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d280:	4962      	ldr	r1, [pc, #392]	; (800d40c <_printf_i+0x23c>)
 800d282:	220a      	movs	r2, #10
 800d284:	e017      	b.n	800d2b6 <_printf_i+0xe6>
 800d286:	6820      	ldr	r0, [r4, #0]
 800d288:	6819      	ldr	r1, [r3, #0]
 800d28a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800d28e:	d003      	beq.n	800d298 <_printf_i+0xc8>
 800d290:	1d08      	adds	r0, r1, #4
 800d292:	6018      	str	r0, [r3, #0]
 800d294:	680b      	ldr	r3, [r1, #0]
 800d296:	e006      	b.n	800d2a6 <_printf_i+0xd6>
 800d298:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d29c:	f101 0004 	add.w	r0, r1, #4
 800d2a0:	6018      	str	r0, [r3, #0]
 800d2a2:	d0f7      	beq.n	800d294 <_printf_i+0xc4>
 800d2a4:	880b      	ldrh	r3, [r1, #0]
 800d2a6:	4959      	ldr	r1, [pc, #356]	; (800d40c <_printf_i+0x23c>)
 800d2a8:	2a6f      	cmp	r2, #111	; 0x6f
 800d2aa:	bf14      	ite	ne
 800d2ac:	220a      	movne	r2, #10
 800d2ae:	2208      	moveq	r2, #8
 800d2b0:	2000      	movs	r0, #0
 800d2b2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800d2b6:	6865      	ldr	r5, [r4, #4]
 800d2b8:	60a5      	str	r5, [r4, #8]
 800d2ba:	2d00      	cmp	r5, #0
 800d2bc:	f2c0 809c 	blt.w	800d3f8 <_printf_i+0x228>
 800d2c0:	6820      	ldr	r0, [r4, #0]
 800d2c2:	f020 0004 	bic.w	r0, r0, #4
 800d2c6:	6020      	str	r0, [r4, #0]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d13f      	bne.n	800d34c <_printf_i+0x17c>
 800d2cc:	2d00      	cmp	r5, #0
 800d2ce:	f040 8095 	bne.w	800d3fc <_printf_i+0x22c>
 800d2d2:	4675      	mov	r5, lr
 800d2d4:	2a08      	cmp	r2, #8
 800d2d6:	d10b      	bne.n	800d2f0 <_printf_i+0x120>
 800d2d8:	6823      	ldr	r3, [r4, #0]
 800d2da:	07da      	lsls	r2, r3, #31
 800d2dc:	d508      	bpl.n	800d2f0 <_printf_i+0x120>
 800d2de:	6923      	ldr	r3, [r4, #16]
 800d2e0:	6862      	ldr	r2, [r4, #4]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	bfde      	ittt	le
 800d2e6:	2330      	movle	r3, #48	; 0x30
 800d2e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d2ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d2f0:	ebae 0305 	sub.w	r3, lr, r5
 800d2f4:	6123      	str	r3, [r4, #16]
 800d2f6:	f8cd 8000 	str.w	r8, [sp]
 800d2fa:	463b      	mov	r3, r7
 800d2fc:	aa03      	add	r2, sp, #12
 800d2fe:	4621      	mov	r1, r4
 800d300:	4630      	mov	r0, r6
 800d302:	f7ff feef 	bl	800d0e4 <_printf_common>
 800d306:	3001      	adds	r0, #1
 800d308:	d155      	bne.n	800d3b6 <_printf_i+0x1e6>
 800d30a:	f04f 30ff 	mov.w	r0, #4294967295
 800d30e:	b005      	add	sp, #20
 800d310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d314:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800d318:	493c      	ldr	r1, [pc, #240]	; (800d40c <_printf_i+0x23c>)
 800d31a:	6822      	ldr	r2, [r4, #0]
 800d31c:	6818      	ldr	r0, [r3, #0]
 800d31e:	f012 0f80 	tst.w	r2, #128	; 0x80
 800d322:	f100 0504 	add.w	r5, r0, #4
 800d326:	601d      	str	r5, [r3, #0]
 800d328:	d001      	beq.n	800d32e <_printf_i+0x15e>
 800d32a:	6803      	ldr	r3, [r0, #0]
 800d32c:	e002      	b.n	800d334 <_printf_i+0x164>
 800d32e:	0655      	lsls	r5, r2, #25
 800d330:	d5fb      	bpl.n	800d32a <_printf_i+0x15a>
 800d332:	8803      	ldrh	r3, [r0, #0]
 800d334:	07d0      	lsls	r0, r2, #31
 800d336:	bf44      	itt	mi
 800d338:	f042 0220 	orrmi.w	r2, r2, #32
 800d33c:	6022      	strmi	r2, [r4, #0]
 800d33e:	b91b      	cbnz	r3, 800d348 <_printf_i+0x178>
 800d340:	6822      	ldr	r2, [r4, #0]
 800d342:	f022 0220 	bic.w	r2, r2, #32
 800d346:	6022      	str	r2, [r4, #0]
 800d348:	2210      	movs	r2, #16
 800d34a:	e7b1      	b.n	800d2b0 <_printf_i+0xe0>
 800d34c:	4675      	mov	r5, lr
 800d34e:	fbb3 f0f2 	udiv	r0, r3, r2
 800d352:	fb02 3310 	mls	r3, r2, r0, r3
 800d356:	5ccb      	ldrb	r3, [r1, r3]
 800d358:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d35c:	4603      	mov	r3, r0
 800d35e:	2800      	cmp	r0, #0
 800d360:	d1f5      	bne.n	800d34e <_printf_i+0x17e>
 800d362:	e7b7      	b.n	800d2d4 <_printf_i+0x104>
 800d364:	6808      	ldr	r0, [r1, #0]
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	6949      	ldr	r1, [r1, #20]
 800d36a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800d36e:	d004      	beq.n	800d37a <_printf_i+0x1aa>
 800d370:	1d10      	adds	r0, r2, #4
 800d372:	6018      	str	r0, [r3, #0]
 800d374:	6813      	ldr	r3, [r2, #0]
 800d376:	6019      	str	r1, [r3, #0]
 800d378:	e007      	b.n	800d38a <_printf_i+0x1ba>
 800d37a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d37e:	f102 0004 	add.w	r0, r2, #4
 800d382:	6018      	str	r0, [r3, #0]
 800d384:	6813      	ldr	r3, [r2, #0]
 800d386:	d0f6      	beq.n	800d376 <_printf_i+0x1a6>
 800d388:	8019      	strh	r1, [r3, #0]
 800d38a:	2300      	movs	r3, #0
 800d38c:	6123      	str	r3, [r4, #16]
 800d38e:	4675      	mov	r5, lr
 800d390:	e7b1      	b.n	800d2f6 <_printf_i+0x126>
 800d392:	681a      	ldr	r2, [r3, #0]
 800d394:	1d11      	adds	r1, r2, #4
 800d396:	6019      	str	r1, [r3, #0]
 800d398:	6815      	ldr	r5, [r2, #0]
 800d39a:	6862      	ldr	r2, [r4, #4]
 800d39c:	2100      	movs	r1, #0
 800d39e:	4628      	mov	r0, r5
 800d3a0:	f7f2 ff26 	bl	80001f0 <memchr>
 800d3a4:	b108      	cbz	r0, 800d3aa <_printf_i+0x1da>
 800d3a6:	1b40      	subs	r0, r0, r5
 800d3a8:	6060      	str	r0, [r4, #4]
 800d3aa:	6863      	ldr	r3, [r4, #4]
 800d3ac:	6123      	str	r3, [r4, #16]
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3b4:	e79f      	b.n	800d2f6 <_printf_i+0x126>
 800d3b6:	6923      	ldr	r3, [r4, #16]
 800d3b8:	462a      	mov	r2, r5
 800d3ba:	4639      	mov	r1, r7
 800d3bc:	4630      	mov	r0, r6
 800d3be:	47c0      	blx	r8
 800d3c0:	3001      	adds	r0, #1
 800d3c2:	d0a2      	beq.n	800d30a <_printf_i+0x13a>
 800d3c4:	6823      	ldr	r3, [r4, #0]
 800d3c6:	079b      	lsls	r3, r3, #30
 800d3c8:	d507      	bpl.n	800d3da <_printf_i+0x20a>
 800d3ca:	2500      	movs	r5, #0
 800d3cc:	f104 0919 	add.w	r9, r4, #25
 800d3d0:	68e3      	ldr	r3, [r4, #12]
 800d3d2:	9a03      	ldr	r2, [sp, #12]
 800d3d4:	1a9b      	subs	r3, r3, r2
 800d3d6:	429d      	cmp	r5, r3
 800d3d8:	db05      	blt.n	800d3e6 <_printf_i+0x216>
 800d3da:	68e0      	ldr	r0, [r4, #12]
 800d3dc:	9b03      	ldr	r3, [sp, #12]
 800d3de:	4298      	cmp	r0, r3
 800d3e0:	bfb8      	it	lt
 800d3e2:	4618      	movlt	r0, r3
 800d3e4:	e793      	b.n	800d30e <_printf_i+0x13e>
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	464a      	mov	r2, r9
 800d3ea:	4639      	mov	r1, r7
 800d3ec:	4630      	mov	r0, r6
 800d3ee:	47c0      	blx	r8
 800d3f0:	3001      	adds	r0, #1
 800d3f2:	d08a      	beq.n	800d30a <_printf_i+0x13a>
 800d3f4:	3501      	adds	r5, #1
 800d3f6:	e7eb      	b.n	800d3d0 <_printf_i+0x200>
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d1a7      	bne.n	800d34c <_printf_i+0x17c>
 800d3fc:	780b      	ldrb	r3, [r1, #0]
 800d3fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d402:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d406:	e765      	b.n	800d2d4 <_printf_i+0x104>
 800d408:	0800d7cc 	.word	0x0800d7cc
 800d40c:	0800d7bb 	.word	0x0800d7bb

0800d410 <__ascii_wctomb>:
 800d410:	b149      	cbz	r1, 800d426 <__ascii_wctomb+0x16>
 800d412:	2aff      	cmp	r2, #255	; 0xff
 800d414:	bf85      	ittet	hi
 800d416:	238a      	movhi	r3, #138	; 0x8a
 800d418:	6003      	strhi	r3, [r0, #0]
 800d41a:	700a      	strbls	r2, [r1, #0]
 800d41c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d420:	bf98      	it	ls
 800d422:	2001      	movls	r0, #1
 800d424:	4770      	bx	lr
 800d426:	4608      	mov	r0, r1
 800d428:	4770      	bx	lr

0800d42a <memmove>:
 800d42a:	4288      	cmp	r0, r1
 800d42c:	b510      	push	{r4, lr}
 800d42e:	eb01 0302 	add.w	r3, r1, r2
 800d432:	d803      	bhi.n	800d43c <memmove+0x12>
 800d434:	1e42      	subs	r2, r0, #1
 800d436:	4299      	cmp	r1, r3
 800d438:	d10c      	bne.n	800d454 <memmove+0x2a>
 800d43a:	bd10      	pop	{r4, pc}
 800d43c:	4298      	cmp	r0, r3
 800d43e:	d2f9      	bcs.n	800d434 <memmove+0xa>
 800d440:	1881      	adds	r1, r0, r2
 800d442:	1ad2      	subs	r2, r2, r3
 800d444:	42d3      	cmn	r3, r2
 800d446:	d100      	bne.n	800d44a <memmove+0x20>
 800d448:	bd10      	pop	{r4, pc}
 800d44a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d44e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d452:	e7f7      	b.n	800d444 <memmove+0x1a>
 800d454:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d458:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d45c:	e7eb      	b.n	800d436 <memmove+0xc>
	...

0800d460 <_free_r>:
 800d460:	b538      	push	{r3, r4, r5, lr}
 800d462:	4605      	mov	r5, r0
 800d464:	2900      	cmp	r1, #0
 800d466:	d045      	beq.n	800d4f4 <_free_r+0x94>
 800d468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d46c:	1f0c      	subs	r4, r1, #4
 800d46e:	2b00      	cmp	r3, #0
 800d470:	bfb8      	it	lt
 800d472:	18e4      	addlt	r4, r4, r3
 800d474:	f000 f8d6 	bl	800d624 <__malloc_lock>
 800d478:	4a1f      	ldr	r2, [pc, #124]	; (800d4f8 <_free_r+0x98>)
 800d47a:	6813      	ldr	r3, [r2, #0]
 800d47c:	4610      	mov	r0, r2
 800d47e:	b933      	cbnz	r3, 800d48e <_free_r+0x2e>
 800d480:	6063      	str	r3, [r4, #4]
 800d482:	6014      	str	r4, [r2, #0]
 800d484:	4628      	mov	r0, r5
 800d486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d48a:	f000 b8cc 	b.w	800d626 <__malloc_unlock>
 800d48e:	42a3      	cmp	r3, r4
 800d490:	d90c      	bls.n	800d4ac <_free_r+0x4c>
 800d492:	6821      	ldr	r1, [r4, #0]
 800d494:	1862      	adds	r2, r4, r1
 800d496:	4293      	cmp	r3, r2
 800d498:	bf04      	itt	eq
 800d49a:	681a      	ldreq	r2, [r3, #0]
 800d49c:	685b      	ldreq	r3, [r3, #4]
 800d49e:	6063      	str	r3, [r4, #4]
 800d4a0:	bf04      	itt	eq
 800d4a2:	1852      	addeq	r2, r2, r1
 800d4a4:	6022      	streq	r2, [r4, #0]
 800d4a6:	6004      	str	r4, [r0, #0]
 800d4a8:	e7ec      	b.n	800d484 <_free_r+0x24>
 800d4aa:	4613      	mov	r3, r2
 800d4ac:	685a      	ldr	r2, [r3, #4]
 800d4ae:	b10a      	cbz	r2, 800d4b4 <_free_r+0x54>
 800d4b0:	42a2      	cmp	r2, r4
 800d4b2:	d9fa      	bls.n	800d4aa <_free_r+0x4a>
 800d4b4:	6819      	ldr	r1, [r3, #0]
 800d4b6:	1858      	adds	r0, r3, r1
 800d4b8:	42a0      	cmp	r0, r4
 800d4ba:	d10b      	bne.n	800d4d4 <_free_r+0x74>
 800d4bc:	6820      	ldr	r0, [r4, #0]
 800d4be:	4401      	add	r1, r0
 800d4c0:	1858      	adds	r0, r3, r1
 800d4c2:	4282      	cmp	r2, r0
 800d4c4:	6019      	str	r1, [r3, #0]
 800d4c6:	d1dd      	bne.n	800d484 <_free_r+0x24>
 800d4c8:	6810      	ldr	r0, [r2, #0]
 800d4ca:	6852      	ldr	r2, [r2, #4]
 800d4cc:	605a      	str	r2, [r3, #4]
 800d4ce:	4401      	add	r1, r0
 800d4d0:	6019      	str	r1, [r3, #0]
 800d4d2:	e7d7      	b.n	800d484 <_free_r+0x24>
 800d4d4:	d902      	bls.n	800d4dc <_free_r+0x7c>
 800d4d6:	230c      	movs	r3, #12
 800d4d8:	602b      	str	r3, [r5, #0]
 800d4da:	e7d3      	b.n	800d484 <_free_r+0x24>
 800d4dc:	6820      	ldr	r0, [r4, #0]
 800d4de:	1821      	adds	r1, r4, r0
 800d4e0:	428a      	cmp	r2, r1
 800d4e2:	bf04      	itt	eq
 800d4e4:	6811      	ldreq	r1, [r2, #0]
 800d4e6:	6852      	ldreq	r2, [r2, #4]
 800d4e8:	6062      	str	r2, [r4, #4]
 800d4ea:	bf04      	itt	eq
 800d4ec:	1809      	addeq	r1, r1, r0
 800d4ee:	6021      	streq	r1, [r4, #0]
 800d4f0:	605c      	str	r4, [r3, #4]
 800d4f2:	e7c7      	b.n	800d484 <_free_r+0x24>
 800d4f4:	bd38      	pop	{r3, r4, r5, pc}
 800d4f6:	bf00      	nop
 800d4f8:	2000a3cc 	.word	0x2000a3cc

0800d4fc <_malloc_r>:
 800d4fc:	b570      	push	{r4, r5, r6, lr}
 800d4fe:	1ccd      	adds	r5, r1, #3
 800d500:	f025 0503 	bic.w	r5, r5, #3
 800d504:	3508      	adds	r5, #8
 800d506:	2d0c      	cmp	r5, #12
 800d508:	bf38      	it	cc
 800d50a:	250c      	movcc	r5, #12
 800d50c:	2d00      	cmp	r5, #0
 800d50e:	4606      	mov	r6, r0
 800d510:	db01      	blt.n	800d516 <_malloc_r+0x1a>
 800d512:	42a9      	cmp	r1, r5
 800d514:	d903      	bls.n	800d51e <_malloc_r+0x22>
 800d516:	230c      	movs	r3, #12
 800d518:	6033      	str	r3, [r6, #0]
 800d51a:	2000      	movs	r0, #0
 800d51c:	bd70      	pop	{r4, r5, r6, pc}
 800d51e:	f000 f881 	bl	800d624 <__malloc_lock>
 800d522:	4a23      	ldr	r2, [pc, #140]	; (800d5b0 <_malloc_r+0xb4>)
 800d524:	6814      	ldr	r4, [r2, #0]
 800d526:	4621      	mov	r1, r4
 800d528:	b991      	cbnz	r1, 800d550 <_malloc_r+0x54>
 800d52a:	4c22      	ldr	r4, [pc, #136]	; (800d5b4 <_malloc_r+0xb8>)
 800d52c:	6823      	ldr	r3, [r4, #0]
 800d52e:	b91b      	cbnz	r3, 800d538 <_malloc_r+0x3c>
 800d530:	4630      	mov	r0, r6
 800d532:	f000 f867 	bl	800d604 <_sbrk_r>
 800d536:	6020      	str	r0, [r4, #0]
 800d538:	4629      	mov	r1, r5
 800d53a:	4630      	mov	r0, r6
 800d53c:	f000 f862 	bl	800d604 <_sbrk_r>
 800d540:	1c43      	adds	r3, r0, #1
 800d542:	d126      	bne.n	800d592 <_malloc_r+0x96>
 800d544:	230c      	movs	r3, #12
 800d546:	6033      	str	r3, [r6, #0]
 800d548:	4630      	mov	r0, r6
 800d54a:	f000 f86c 	bl	800d626 <__malloc_unlock>
 800d54e:	e7e4      	b.n	800d51a <_malloc_r+0x1e>
 800d550:	680b      	ldr	r3, [r1, #0]
 800d552:	1b5b      	subs	r3, r3, r5
 800d554:	d41a      	bmi.n	800d58c <_malloc_r+0x90>
 800d556:	2b0b      	cmp	r3, #11
 800d558:	d90f      	bls.n	800d57a <_malloc_r+0x7e>
 800d55a:	600b      	str	r3, [r1, #0]
 800d55c:	50cd      	str	r5, [r1, r3]
 800d55e:	18cc      	adds	r4, r1, r3
 800d560:	4630      	mov	r0, r6
 800d562:	f000 f860 	bl	800d626 <__malloc_unlock>
 800d566:	f104 000b 	add.w	r0, r4, #11
 800d56a:	1d23      	adds	r3, r4, #4
 800d56c:	f020 0007 	bic.w	r0, r0, #7
 800d570:	1ac3      	subs	r3, r0, r3
 800d572:	d01b      	beq.n	800d5ac <_malloc_r+0xb0>
 800d574:	425a      	negs	r2, r3
 800d576:	50e2      	str	r2, [r4, r3]
 800d578:	bd70      	pop	{r4, r5, r6, pc}
 800d57a:	428c      	cmp	r4, r1
 800d57c:	bf0d      	iteet	eq
 800d57e:	6863      	ldreq	r3, [r4, #4]
 800d580:	684b      	ldrne	r3, [r1, #4]
 800d582:	6063      	strne	r3, [r4, #4]
 800d584:	6013      	streq	r3, [r2, #0]
 800d586:	bf18      	it	ne
 800d588:	460c      	movne	r4, r1
 800d58a:	e7e9      	b.n	800d560 <_malloc_r+0x64>
 800d58c:	460c      	mov	r4, r1
 800d58e:	6849      	ldr	r1, [r1, #4]
 800d590:	e7ca      	b.n	800d528 <_malloc_r+0x2c>
 800d592:	1cc4      	adds	r4, r0, #3
 800d594:	f024 0403 	bic.w	r4, r4, #3
 800d598:	42a0      	cmp	r0, r4
 800d59a:	d005      	beq.n	800d5a8 <_malloc_r+0xac>
 800d59c:	1a21      	subs	r1, r4, r0
 800d59e:	4630      	mov	r0, r6
 800d5a0:	f000 f830 	bl	800d604 <_sbrk_r>
 800d5a4:	3001      	adds	r0, #1
 800d5a6:	d0cd      	beq.n	800d544 <_malloc_r+0x48>
 800d5a8:	6025      	str	r5, [r4, #0]
 800d5aa:	e7d9      	b.n	800d560 <_malloc_r+0x64>
 800d5ac:	bd70      	pop	{r4, r5, r6, pc}
 800d5ae:	bf00      	nop
 800d5b0:	2000a3cc 	.word	0x2000a3cc
 800d5b4:	2000a3d0 	.word	0x2000a3d0

0800d5b8 <_realloc_r>:
 800d5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ba:	4607      	mov	r7, r0
 800d5bc:	4614      	mov	r4, r2
 800d5be:	460e      	mov	r6, r1
 800d5c0:	b921      	cbnz	r1, 800d5cc <_realloc_r+0x14>
 800d5c2:	4611      	mov	r1, r2
 800d5c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d5c8:	f7ff bf98 	b.w	800d4fc <_malloc_r>
 800d5cc:	b922      	cbnz	r2, 800d5d8 <_realloc_r+0x20>
 800d5ce:	f7ff ff47 	bl	800d460 <_free_r>
 800d5d2:	4625      	mov	r5, r4
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5d8:	f000 f826 	bl	800d628 <_malloc_usable_size_r>
 800d5dc:	4284      	cmp	r4, r0
 800d5de:	d90f      	bls.n	800d600 <_realloc_r+0x48>
 800d5e0:	4621      	mov	r1, r4
 800d5e2:	4638      	mov	r0, r7
 800d5e4:	f7ff ff8a 	bl	800d4fc <_malloc_r>
 800d5e8:	4605      	mov	r5, r0
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	d0f2      	beq.n	800d5d4 <_realloc_r+0x1c>
 800d5ee:	4631      	mov	r1, r6
 800d5f0:	4622      	mov	r2, r4
 800d5f2:	f7ff fb1f 	bl	800cc34 <memcpy>
 800d5f6:	4631      	mov	r1, r6
 800d5f8:	4638      	mov	r0, r7
 800d5fa:	f7ff ff31 	bl	800d460 <_free_r>
 800d5fe:	e7e9      	b.n	800d5d4 <_realloc_r+0x1c>
 800d600:	4635      	mov	r5, r6
 800d602:	e7e7      	b.n	800d5d4 <_realloc_r+0x1c>

0800d604 <_sbrk_r>:
 800d604:	b538      	push	{r3, r4, r5, lr}
 800d606:	4c06      	ldr	r4, [pc, #24]	; (800d620 <_sbrk_r+0x1c>)
 800d608:	2300      	movs	r3, #0
 800d60a:	4605      	mov	r5, r0
 800d60c:	4608      	mov	r0, r1
 800d60e:	6023      	str	r3, [r4, #0]
 800d610:	f000 f814 	bl	800d63c <_sbrk>
 800d614:	1c43      	adds	r3, r0, #1
 800d616:	d102      	bne.n	800d61e <_sbrk_r+0x1a>
 800d618:	6823      	ldr	r3, [r4, #0]
 800d61a:	b103      	cbz	r3, 800d61e <_sbrk_r+0x1a>
 800d61c:	602b      	str	r3, [r5, #0]
 800d61e:	bd38      	pop	{r3, r4, r5, pc}
 800d620:	2000c090 	.word	0x2000c090

0800d624 <__malloc_lock>:
 800d624:	4770      	bx	lr

0800d626 <__malloc_unlock>:
 800d626:	4770      	bx	lr

0800d628 <_malloc_usable_size_r>:
 800d628:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800d62c:	2800      	cmp	r0, #0
 800d62e:	f1a0 0004 	sub.w	r0, r0, #4
 800d632:	bfbc      	itt	lt
 800d634:	580b      	ldrlt	r3, [r1, r0]
 800d636:	18c0      	addlt	r0, r0, r3
 800d638:	4770      	bx	lr
	...

0800d63c <_sbrk>:
 800d63c:	4b04      	ldr	r3, [pc, #16]	; (800d650 <_sbrk+0x14>)
 800d63e:	6819      	ldr	r1, [r3, #0]
 800d640:	4602      	mov	r2, r0
 800d642:	b909      	cbnz	r1, 800d648 <_sbrk+0xc>
 800d644:	4903      	ldr	r1, [pc, #12]	; (800d654 <_sbrk+0x18>)
 800d646:	6019      	str	r1, [r3, #0]
 800d648:	6818      	ldr	r0, [r3, #0]
 800d64a:	4402      	add	r2, r0
 800d64c:	601a      	str	r2, [r3, #0]
 800d64e:	4770      	bx	lr
 800d650:	2000a3d4 	.word	0x2000a3d4
 800d654:	2000c094 	.word	0x2000c094

0800d658 <_init>:
 800d658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65a:	bf00      	nop
 800d65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d65e:	bc08      	pop	{r3}
 800d660:	469e      	mov	lr, r3
 800d662:	4770      	bx	lr

0800d664 <_fini>:
 800d664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d666:	bf00      	nop
 800d668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d66a:	bc08      	pop	{r3}
 800d66c:	469e      	mov	lr, r3
 800d66e:	4770      	bx	lr
