
DMX_Merger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006140  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080062d4  080062d4  000162d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006384  08006384  00016384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800638c  0800638c  0001638c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006390  08006390  00016390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000005c4  20000000  08006394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002cfc  200005c4  08006958  000205c4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200032c0  08006958  000232c0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000205c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00035ede  00000000  00000000  000205f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000680d  00000000  00000000  000564d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001858  00000000  00000000  0005cce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e4ff  00000000  00000000  0005e538  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00008311  00000000  00000000  0006ca37  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00074d48  2**0
                  CONTENTS, READONLY
 16 .debug_loc    00010f0d  00000000  00000000  00074dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001e50  00000000  00000000  00085cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame  000043ec  00000000  00000000  00087b28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200005c4 	.word	0x200005c4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080062bc 	.word	0x080062bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200005c8 	.word	0x200005c8
 80001d0:	080062bc 	.word	0x080062bc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <dmx2ReceiverCallback>:
}

bool dmx2ReceiverCallback(dmx_cfg_Instance *dmx){
	bool state = true;
	return state;
}
 80004e4:	2001      	movs	r0, #1
 80004e6:	4770      	bx	lr

080004e8 <dmx1TransmitterCallback>:
 80004e8:	2001      	movs	r0, #1
 80004ea:	4770      	bx	lr

080004ec <app_dmx_init>:
void app_dmx_init(eal_task_Task *self){
 80004ec:	b510      	push	{r4, lr}
	dmx_registerCallback(&dmx1, dmx1TransmitterCallback);
 80004ee:	4c12      	ldr	r4, [pc, #72]	; (8000538 <app_dmx_init+0x4c>)
 80004f0:	4912      	ldr	r1, [pc, #72]	; (800053c <app_dmx_init+0x50>)
 80004f2:	4620      	mov	r0, r4
 80004f4:	f003 fee6 	bl	80042c4 <dmx_registerCallback>
	dmx_init(&dmx1);
 80004f8:	4620      	mov	r0, r4
 80004fa:	f003 fee5 	bl	80042c8 <dmx_init>
	dmx_txStart(&dmx1);
 80004fe:	4620      	mov	r0, r4
	dmx_registerCallback(&dmx2, dmx2ReceiverCallback);
 8000500:	4c0f      	ldr	r4, [pc, #60]	; (8000540 <app_dmx_init+0x54>)
	dmx_txStart(&dmx1);
 8000502:	f003 ff52 	bl	80043aa <dmx_txStart>
	dmx_registerCallback(&dmx2, dmx2ReceiverCallback);
 8000506:	490f      	ldr	r1, [pc, #60]	; (8000544 <app_dmx_init+0x58>)
 8000508:	4620      	mov	r0, r4
 800050a:	f003 fedb 	bl	80042c4 <dmx_registerCallback>
	dmx_init(&dmx2);
 800050e:	4620      	mov	r0, r4
 8000510:	f003 feda 	bl	80042c8 <dmx_init>
	dmx_rxStart(&dmx2);
 8000514:	4620      	mov	r0, r4
	HAL_GPIO_WritePin(O_USART1_DIR_GPIO_Port, O_USART1_DIR_Pin, GPIO_PIN_RESET);
 8000516:	4c0c      	ldr	r4, [pc, #48]	; (8000548 <app_dmx_init+0x5c>)
	dmx_rxStart(&dmx2);
 8000518:	f003 ff4c 	bl	80043b4 <dmx_rxStart>
	HAL_GPIO_WritePin(O_USART1_DIR_GPIO_Port, O_USART1_DIR_Pin, GPIO_PIN_RESET);
 800051c:	4620      	mov	r0, r4
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000524:	f000 fc42 	bl	8000dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(O_USART2_DIR_GPIO_Port, O_USART2_DIR_Pin, GPIO_PIN_SET);
 8000528:	4620      	mov	r0, r4
 800052a:	2201      	movs	r2, #1
 800052c:	2104      	movs	r1, #4
}
 800052e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(O_USART2_DIR_GPIO_Port, O_USART2_DIR_Pin, GPIO_PIN_SET);
 8000532:	f000 bc3b 	b.w	8000dac <HAL_GPIO_WritePin>
 8000536:	bf00      	nop
 8000538:	20000310 	.word	0x20000310
 800053c:	080004e9 	.word	0x080004e9
 8000540:	2000036c 	.word	0x2000036c
 8000544:	080004e5 	.word	0x080004e5
 8000548:	48000800 	.word	0x48000800

0800054c <app_dmx_process>:
	if(!self->enable) return;
 800054c:	7803      	ldrb	r3, [r0, #0]
void app_dmx_process(eal_task_Task *self){
 800054e:	b510      	push	{r4, lr}
	if(!self->enable) return;
 8000550:	b153      	cbz	r3, 8000568 <app_dmx_process+0x1c>
	if(!cyclicFlag) return;
 8000552:	4c06      	ldr	r4, [pc, #24]	; (800056c <app_dmx_process+0x20>)
 8000554:	7823      	ldrb	r3, [r4, #0]
 8000556:	b13b      	cbz	r3, 8000568 <app_dmx_process+0x1c>
	dmx_loop(&dmx1);
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <app_dmx_process+0x24>)
 800055a:	f003 ff07 	bl	800436c <dmx_loop>
	dmx_loop(&dmx2);
 800055e:	4805      	ldr	r0, [pc, #20]	; (8000574 <app_dmx_process+0x28>)
 8000560:	f003 ff04 	bl	800436c <dmx_loop>
	cyclicFlag = false;
 8000564:	2300      	movs	r3, #0
 8000566:	7023      	strb	r3, [r4, #0]
 8000568:	bd10      	pop	{r4, pc}
 800056a:	bf00      	nop
 800056c:	200009e0 	.word	0x200009e0
 8000570:	20000310 	.word	0x20000310
 8000574:	2000036c 	.word	0x2000036c

08000578 <app_dmx_cyclic1ms>:
	cyclicFlag = true;
 8000578:	4b01      	ldr	r3, [pc, #4]	; (8000580 <app_dmx_cyclic1ms+0x8>)
 800057a:	2201      	movs	r2, #1
 800057c:	701a      	strb	r2, [r3, #0]
 800057e:	4770      	bx	lr
 8000580:	200009e0 	.word	0x200009e0

08000584 <app_dmx_receiveMsg>:
void app_dmx_receiveMsg(eal_task_Task *self, msg_Message *message){
 8000584:	b510      	push	{r4, lr}
	if(message->type == app_cfg_DMX_MSG){
 8000586:	790b      	ldrb	r3, [r1, #4]
 8000588:	2b44      	cmp	r3, #68	; 0x44
void app_dmx_receiveMsg(eal_task_Task *self, msg_Message *message){
 800058a:	460c      	mov	r4, r1
	if(message->type == app_cfg_DMX_MSG){
 800058c:	d10a      	bne.n	80005a4 <app_dmx_receiveMsg+0x20>
		if(msg_isAction(message)){
 800058e:	4608      	mov	r0, r1
 8000590:	f004 f88b 	bl	80046aa <msg_isAction>
 8000594:	b130      	cbz	r0, 80005a4 <app_dmx_receiveMsg+0x20>
			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
 8000596:	8823      	ldrh	r3, [r4, #0]
			dmx1.universe[idx] = (uint8_t)message->value;
 8000598:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <app_dmx_receiveMsg+0x24>)
 800059a:	8861      	ldrh	r1, [r4, #2]
 800059c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800059e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005a2:	54d1      	strb	r1, [r2, r3]
 80005a4:	bd10      	pop	{r4, pc}
 80005a6:	bf00      	nop
 80005a8:	20000310 	.word	0x20000310

080005ac <USART1_IRQHandler>:
/* IRQs ---------------------------------------------------------------------*/
void USART1_IRQHandler(void){
	dmx_irqRxInterfaceHandler(&dmx2);
 80005ac:	4801      	ldr	r0, [pc, #4]	; (80005b4 <USART1_IRQHandler+0x8>)
 80005ae:	f003 bf7f 	b.w	80044b0 <dmx_irqRxInterfaceHandler>
 80005b2:	bf00      	nop
 80005b4:	2000036c 	.word	0x2000036c

080005b8 <USART2_IRQHandler>:
}

void USART2_IRQHandler(void){
	dmx_irqTxInterfaceHandler(&dmx1);
 80005b8:	4801      	ldr	r0, [pc, #4]	; (80005c0 <USART2_IRQHandler+0x8>)
 80005ba:	f003 bf3d 	b.w	8004438 <dmx_irqTxInterfaceHandler>
 80005be:	bf00      	nop
 80005c0:	20000310 	.word	0x20000310

080005c4 <HAL_TIM_PeriodElapsedCallback>:
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if(htim->Instance == dmx1.txTimer) dmx_irqTxTimerHandler(&dmx1);
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80005c6:	6801      	ldr	r1, [r0, #0]
 80005c8:	68da      	ldr	r2, [r3, #12]
 80005ca:	4291      	cmp	r1, r2
 80005cc:	d102      	bne.n	80005d4 <HAL_TIM_PeriodElapsedCallback+0x10>
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 befb 	b.w	80043ca <dmx_irqTxTimerHandler>
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000310 	.word	0x20000310

080005dc <performNextTransitionStep>:
		}
	}
}

/*Helper*/
static void performNextTransitionStep(eal_task_Task *self, uint8_t preset, uint8_t transition){
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	float actualTransitionTime = (float)(myPresets[preset].relTime_ms - myPresets[preset].presetTransitionSettings[transition].transDelay_ms);
	uint16_t newVal = 0;
	if(myPresets[preset].presetTransitionSettings[transition].transTime_ms == 0){
 80005de:	23c4      	movs	r3, #196	; 0xc4
static void performNextTransitionStep(eal_task_Task *self, uint8_t preset, uint8_t transition){
 80005e0:	460d      	mov	r5, r1
	if(myPresets[preset].presetTransitionSettings[transition].transTime_ms == 0){
 80005e2:	4c40      	ldr	r4, [pc, #256]	; (80006e4 <performNextTransitionStep+0x108>)
 80005e4:	1c51      	adds	r1, r2, #1
 80005e6:	436b      	muls	r3, r5
 80005e8:	eb03 1701 	add.w	r7, r3, r1, lsl #4
 80005ec:	4427      	add	r7, r4
static void performNextTransitionStep(eal_task_Task *self, uint8_t preset, uint8_t transition){
 80005ee:	4616      	mov	r6, r2
	if(myPresets[preset].presetTransitionSettings[transition].transTime_ms == 0){
 80005f0:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80005f4:	78fa      	ldrb	r2, [r7, #3]
static void performNextTransitionStep(eal_task_Task *self, uint8_t preset, uint8_t transition){
 80005f6:	b085      	sub	sp, #20
 80005f8:	eb04 0e03 	add.w	lr, r4, r3
	if(myPresets[preset].presetTransitionSettings[transition].transTime_ms == 0){
 80005fc:	f1bc 0f00 	cmp.w	ip, #0
 8000600:	d13a      	bne.n	8000678 <performNextTransitionStep+0x9c>
		newVal = myPresets[preset].presetTransitionSettings[transition].dmxEndVal;
 8000602:	b293      	uxth	r3, r2
		++myPresets[preset].transitionDoneCnt;
 8000604:	f8de 2008 	ldr.w	r2, [lr, #8]
 8000608:	3201      	adds	r2, #1
 800060a:	f8ce 2008 	str.w	r2, [lr, #8]
		myPresets[preset].presetTransitionStatus[transition].transStep = app_dmx_preset_cfg_TRANS_STEP_DONE;
 800060e:	2262      	movs	r2, #98	; 0x62
 8000610:	fb02 6205 	mla	r2, r2, r5, r6
 8000614:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8000618:	2702      	movs	r7, #2
 800061a:	f882 70b1 	strb.w	r7, [r2, #177]	; 0xb1
			myPresets[preset].presetTransitionStatus[transition].transStep = app_dmx_preset_cfg_TRANS_STEP_DONE;
		}
	}
	//If the if request is enabled 0 values can't be send because the comparison will be never true
//	if(newVal != myPresets[preset].presetTransitionStatus[transition].actualVal) {
		myPresets[preset].presetTransitionStatus[transition].actualVal = newVal;
 800061e:	2262      	movs	r2, #98	; 0x62
 8000620:	fb02 6205 	mla	r2, r2, r5, r6
 8000624:	3258      	adds	r2, #88	; 0x58
 8000626:	f804 3012 	strb.w	r3, [r4, r2, lsl #1]
		if(self->sendMsg != NULL){
 800062a:	6947      	ldr	r7, [r0, #20]
 800062c:	b1b7      	cbz	r7, 800065c <performNextTransitionStep+0x80>
			msg_Message newMessage = msg_LITERAL(app_cfg_DMX_MSG, msg_ACTION(myPresets[preset].presetTransitionSettings[transition].dmxCh), myPresets[preset].presetTransitionStatus[transition].actualVal, 0, 0);
 800062e:	22c4      	movs	r2, #196	; 0xc4
 8000630:	436a      	muls	r2, r5
 8000632:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000636:	f8ad 300a 	strh.w	r3, [sp, #10]
 800063a:	5aa2      	ldrh	r2, [r4, r2]
 800063c:	2344      	movs	r3, #68	; 0x44
 800063e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8000642:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8000646:	f88d 300c 	strb.w	r3, [sp, #12]
 800064a:	2300      	movs	r3, #0
 800064c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8000650:	f88d 300d 	strb.w	r3, [sp, #13]
 8000654:	f8ad 300e 	strh.w	r3, [sp, #14]
			self->sendMsg(self, &newMessage);
 8000658:	a902      	add	r1, sp, #8
 800065a:	47b8      	blx	r7
		}
		if(myPresets[preset].presetTransitionStatus[transition].transStep == app_dmx_preset_cfg_TRANS_STEP_DONE) myPresets[preset].presetTransitionStatus[transition].actualVal = 0;
 800065c:	2262      	movs	r2, #98	; 0x62
 800065e:	fb02 6505 	mla	r5, r2, r5, r6
 8000662:	3558      	adds	r5, #88	; 0x58
 8000664:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 8000668:	785b      	ldrb	r3, [r3, #1]
 800066a:	2b02      	cmp	r3, #2
 800066c:	bf04      	itt	eq
 800066e:	2300      	moveq	r3, #0
 8000670:	f804 3015 	strbeq.w	r3, [r4, r5, lsl #1]
//	}
}
 8000674:	b005      	add	sp, #20
 8000676:	bdf0      	pop	{r4, r5, r6, r7, pc}
		float diff = (float)((float)myPresets[preset].presetTransitionSettings[transition].dmxEndVal - (float)myPresets[preset].presetTransitionSettings[transition].dmxStartVal);
 8000678:	78bf      	ldrb	r7, [r7, #2]
 800067a:	ee06 2a90 	vmov	s13, r2
 800067e:	ee07 7a90 	vmov	s15, r7
 8000682:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8000686:	eef8 7a67 	vcvt.f32.u32	s15, s15
		float actualVal = (diff/((float)myPresets[preset].presetTransitionSettings[transition].transTime_ms)*actualTransitionTime) + (float)myPresets[preset].presetTransitionSettings[transition].dmxStartVal;
 800068a:	ee06 ca90 	vmov	s13, ip
		float diff = (float)((float)myPresets[preset].presetTransitionSettings[transition].dmxEndVal - (float)myPresets[preset].presetTransitionSettings[transition].dmxStartVal);
 800068e:	ee36 6a67 	vsub.f32	s12, s12, s15
		float actualVal = (diff/((float)myPresets[preset].presetTransitionSettings[transition].transTime_ms)*actualTransitionTime) + (float)myPresets[preset].presetTransitionSettings[transition].dmxStartVal;
 8000692:	eef8 6a66 	vcvt.f32.u32	s13, s13
	float actualTransitionTime = (float)(myPresets[preset].relTime_ms - myPresets[preset].presetTransitionSettings[transition].transDelay_ms);
 8000696:	eb03 1306 	add.w	r3, r3, r6, lsl #4
		float actualVal = (diff/((float)myPresets[preset].presetTransitionSettings[transition].transTime_ms)*actualTransitionTime) + (float)myPresets[preset].presetTransitionSettings[transition].dmxStartVal;
 800069a:	eec6 5a26 	vdiv.f32	s11, s12, s13
	float actualTransitionTime = (float)(myPresets[preset].relTime_ms - myPresets[preset].presetTransitionSettings[transition].transDelay_ms);
 800069e:	4423      	add	r3, r4
 80006a0:	f8de 7004 	ldr.w	r7, [lr, #4]
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	1aff      	subs	r7, r7, r3
		if(newVal >= myPresets[preset].presetTransitionSettings[transition].dmxEndVal){
 80006a8:	b292      	uxth	r2, r2
	float actualTransitionTime = (float)(myPresets[preset].relTime_ms - myPresets[preset].presetTransitionSettings[transition].transDelay_ms);
 80006aa:	ee07 7a10 	vmov	s14, r7
 80006ae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		float actualVal = (diff/((float)myPresets[preset].presetTransitionSettings[transition].transTime_ms)*actualTransitionTime) + (float)myPresets[preset].presetTransitionSettings[transition].dmxStartVal;
 80006b2:	eee7 7a25 	vfma.f32	s15, s14, s11
		newVal = (uint16_t)actualVal;
 80006b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006ba:	edcd 7a01 	vstr	s15, [sp, #4]
 80006be:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		if(newVal >= myPresets[preset].presetTransitionSettings[transition].dmxEndVal){
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d3ab      	bcc.n	800061e <performNextTransitionStep+0x42>
			++myPresets[preset].transitionDoneCnt;
 80006c6:	f8de 3008 	ldr.w	r3, [lr, #8]
 80006ca:	3301      	adds	r3, #1
 80006cc:	f8ce 3008 	str.w	r3, [lr, #8]
			myPresets[preset].presetTransitionStatus[transition].transStep = app_dmx_preset_cfg_TRANS_STEP_DONE;
 80006d0:	2362      	movs	r3, #98	; 0x62
 80006d2:	fb03 6305 	mla	r3, r3, r5, r6
 80006d6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80006da:	2702      	movs	r7, #2
 80006dc:	f883 70b1 	strb.w	r7, [r3, #177]	; 0xb1
 80006e0:	4613      	mov	r3, r2
 80006e2:	e79c      	b.n	800061e <performNextTransitionStep+0x42>
 80006e4:	20000000 	.word	0x20000000

080006e8 <app_dmx_preset_init>:
void app_dmx_preset_init(eal_task_Task *self){
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	4c0e      	ldr	r4, [pc, #56]	; (8000724 <app_dmx_preset_init+0x3c>)
		myPresets[i].relTime_ms = 0;
 80006ec:	2500      	movs	r5, #0
 80006ee:	f504 7644 	add.w	r6, r4, #784	; 0x310
		memset(myPresets[i].presetTransitionStatus, 0, sizeof(myPresets[i].presetTransitionStatus));
 80006f2:	2214      	movs	r2, #20
 80006f4:	2100      	movs	r1, #0
 80006f6:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
		myPresets[i].relTime_ms = 0;
 80006fa:	6065      	str	r5, [r4, #4]
		myPresets[i].trigger = false;
 80006fc:	7025      	strb	r5, [r4, #0]
		myPresets[i].transitionDoneCnt = 0;
 80006fe:	60a5      	str	r5, [r4, #8]
		myPresets[i].transitionEnableSize = 0;
 8000700:	60e5      	str	r5, [r4, #12]
		memset(myPresets[i].presetTransitionStatus, 0, sizeof(myPresets[i].presetTransitionStatus));
 8000702:	f005 fdd3 	bl	80062ac <memset>
		for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000706:	2300      	movs	r3, #0
			if(myPresets[i].presetTransitionSettings[j].enable) ++myPresets[i].transitionEnableSize;
 8000708:	eb04 1203 	add.w	r2, r4, r3, lsl #4
 800070c:	7f52      	ldrb	r2, [r2, #29]
 800070e:	b112      	cbz	r2, 8000716 <app_dmx_preset_init+0x2e>
 8000710:	68e2      	ldr	r2, [r4, #12]
 8000712:	3201      	adds	r2, #1
 8000714:	60e2      	str	r2, [r4, #12]
		for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000716:	3301      	adds	r3, #1
 8000718:	2b0a      	cmp	r3, #10
 800071a:	d1f5      	bne.n	8000708 <app_dmx_preset_init+0x20>
 800071c:	34c4      	adds	r4, #196	; 0xc4
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 800071e:	42b4      	cmp	r4, r6
 8000720:	d1e7      	bne.n	80006f2 <app_dmx_preset_init+0xa>
}
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	20000000 	.word	0x20000000

08000728 <app_dmx_preset_process>:
	if(!self->enable) return;
 8000728:	7803      	ldrb	r3, [r0, #0]
void app_dmx_preset_process(eal_task_Task *self){
 800072a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800072e:	4680      	mov	r8, r0
	if(!self->enable) return;
 8000730:	2b00      	cmp	r3, #0
 8000732:	d03b      	beq.n	80007ac <app_dmx_preset_process+0x84>
	if(!cyclicFlag) return;
 8000734:	4b25      	ldr	r3, [pc, #148]	; (80007cc <app_dmx_preset_process+0xa4>)
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	b3ba      	cbz	r2, 80007ac <app_dmx_preset_process+0x84>
 800073c:	2500      	movs	r5, #0
 800073e:	4c24      	ldr	r4, [pc, #144]	; (80007d0 <app_dmx_preset_process+0xa8>)
				myPresets[i].transitionDoneCnt = 0;
 8000740:	46a9      	mov	r9, r5
		if(myPresets[i].trigger){	/*Preset is triggered and can be executed*/
 8000742:	7823      	ldrb	r3, [r4, #0]
 8000744:	b353      	cbz	r3, 800079c <app_dmx_preset_process+0x74>
			++myPresets[i].relTime_ms;
 8000746:	6863      	ldr	r3, [r4, #4]
 8000748:	3301      	adds	r3, #1
 800074a:	6063      	str	r3, [r4, #4]
 800074c:	4627      	mov	r7, r4
 800074e:	46a3      	mov	fp, r4
			for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000750:	2600      	movs	r6, #0
						performNextTransitionStep(self, i, j);
 8000752:	fa5f fa85 	uxtb.w	sl, r5
				if(myPresets[i].presetTransitionSettings[j].enable){
 8000756:	f89b 201d 	ldrb.w	r2, [fp, #29]
 800075a:	b142      	cbz	r2, 800076e <app_dmx_preset_process+0x46>
					if(myPresets[i].presetTransitionStatus[j].transStep == app_dmx_preset_cfg_TRANS_STEP_EXE) performNextTransitionStep(self, i, j);
 800075c:	f897 20b1 	ldrb.w	r2, [r7, #177]	; 0xb1
 8000760:	2a01      	cmp	r2, #1
 8000762:	d126      	bne.n	80007b2 <app_dmx_preset_process+0x8a>
						performNextTransitionStep(self, i, j);
 8000764:	b2f2      	uxtb	r2, r6
 8000766:	4651      	mov	r1, sl
 8000768:	4640      	mov	r0, r8
 800076a:	f7ff ff37 	bl	80005dc <performNextTransitionStep>
			for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 800076e:	3601      	adds	r6, #1
 8000770:	2e0a      	cmp	r6, #10
 8000772:	f10b 0b10 	add.w	fp, fp, #16
 8000776:	f107 0702 	add.w	r7, r7, #2
 800077a:	d1ec      	bne.n	8000756 <app_dmx_preset_process+0x2e>
			if(myPresets[i].transitionDoneCnt >= myPresets[i].transitionEnableSize){	/*All transitions are performed*/
 800077c:	68a2      	ldr	r2, [r4, #8]
 800077e:	68e3      	ldr	r3, [r4, #12]
 8000780:	429a      	cmp	r2, r3
 8000782:	d30b      	bcc.n	800079c <app_dmx_preset_process+0x74>
				memset(myPresets[i].presetTransitionStatus, 0, sizeof(myPresets[i].presetTransitionStatus));
 8000784:	2214      	movs	r2, #20
 8000786:	2100      	movs	r1, #0
 8000788:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
				myPresets[i].transitionDoneCnt = 0;
 800078c:	f8c4 9008 	str.w	r9, [r4, #8]
				myPresets[i].trigger = false;
 8000790:	f884 9000 	strb.w	r9, [r4]
				myPresets[i].relTime_ms = 0;
 8000794:	f8c4 9004 	str.w	r9, [r4, #4]
				memset(myPresets[i].presetTransitionStatus, 0, sizeof(myPresets[i].presetTransitionStatus));
 8000798:	f005 fd88 	bl	80062ac <memset>
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 800079c:	3501      	adds	r5, #1
 800079e:	2d04      	cmp	r5, #4
 80007a0:	f104 04c4 	add.w	r4, r4, #196	; 0xc4
 80007a4:	d1cd      	bne.n	8000742 <app_dmx_preset_process+0x1a>
	cyclicFlag = false;
 80007a6:	9a01      	ldr	r2, [sp, #4]
 80007a8:	2300      	movs	r3, #0
 80007aa:	7013      	strb	r3, [r2, #0]
}
 80007ac:	b003      	add	sp, #12
 80007ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					else if((myPresets[i].relTime_ms >= myPresets[i].presetTransitionSettings[j].transDelay_ms) && (myPresets[i].presetTransitionStatus[j].transStep == app_dmx_preset_cfg_TRANS_STEP_NONE)){
 80007b2:	6860      	ldr	r0, [r4, #4]
 80007b4:	f8db 1018 	ldr.w	r1, [fp, #24]
 80007b8:	4288      	cmp	r0, r1
 80007ba:	d3d8      	bcc.n	800076e <app_dmx_preset_process+0x46>
 80007bc:	2a00      	cmp	r2, #0
 80007be:	d1d6      	bne.n	800076e <app_dmx_preset_process+0x46>
						myPresets[i].presetTransitionStatus[j].transStep = app_dmx_preset_cfg_TRANS_STEP_EXE;
 80007c0:	f04f 0301 	mov.w	r3, #1
 80007c4:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 80007c8:	e7cc      	b.n	8000764 <app_dmx_preset_process+0x3c>
 80007ca:	bf00      	nop
 80007cc:	200009e1 	.word	0x200009e1
 80007d0:	20000000 	.word	0x20000000

080007d4 <app_dmx_preset_cyclic1ms>:
	cyclicFlag = true;
 80007d4:	4b01      	ldr	r3, [pc, #4]	; (80007dc <app_dmx_preset_cyclic1ms+0x8>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	701a      	strb	r2, [r3, #0]
 80007da:	4770      	bx	lr
 80007dc:	200009e1 	.word	0x200009e1

080007e0 <app_dmx_preset_receiveMsg>:
void app_dmx_preset_receiveMsg(eal_task_Task *self, msg_Message *message){
 80007e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if(message->type == app_cfg_DMX_PRESET_MSG){
 80007e4:	790f      	ldrb	r7, [r1, #4]
 80007e6:	2f50      	cmp	r7, #80	; 0x50
void app_dmx_preset_receiveMsg(eal_task_Task *self, msg_Message *message){
 80007e8:	4606      	mov	r6, r0
 80007ea:	460c      	mov	r4, r1
	if(message->type == app_cfg_DMX_PRESET_MSG){
 80007ec:	d12d      	bne.n	800084a <app_dmx_preset_receiveMsg+0x6a>
		if(msg_isAction(message)){
 80007ee:	4608      	mov	r0, r1
 80007f0:	f003 ff5b 	bl	80046aa <msg_isAction>
 80007f4:	b348      	cbz	r0, 800084a <app_dmx_preset_receiveMsg+0x6a>
			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
 80007f6:	8825      	ldrh	r5, [r4, #0]
 80007f8:	f3c5 050e 	ubfx	r5, r5, #0, #15
			if(APP_CFG_IS_INDEX_IN_RANGE(idx, app_cfg_dmx_preset_TRIGGER_PRESET_OFFSET_IDX, app_cfg_dmx_preset_TRIGGER_PRESET4_IDX+1)){
 80007fc:	2d04      	cmp	r5, #4
 80007fe:	d824      	bhi.n	800084a <app_dmx_preset_receiveMsg+0x6a>
				if((message->value == app_cfg_dmx_preset_TRIGGER_ENABLE) && (myPresets[idx].trigger == false)) {	/*Can be triggered only once*/
 8000800:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
 8000804:	481e      	ldr	r0, [pc, #120]	; (8000880 <app_dmx_preset_receiveMsg+0xa0>)
 8000806:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800080a:	4598      	cmp	r8, r3
 800080c:	d120      	bne.n	8000850 <app_dmx_preset_receiveMsg+0x70>
 800080e:	23c4      	movs	r3, #196	; 0xc4
 8000810:	436b      	muls	r3, r5
 8000812:	18c2      	adds	r2, r0, r3
 8000814:	5cc4      	ldrb	r4, [r0, r3]
 8000816:	b9dc      	cbnz	r4, 8000850 <app_dmx_preset_receiveMsg+0x70>
					myPresets[idx].trigger = true;
 8000818:	2101      	movs	r1, #1
 800081a:	54c1      	strb	r1, [r0, r3]
					memset(myPresets[idx].presetTransitionStatus, 0, sizeof(myPresets[idx].presetTransitionStatus));
 800081c:	33b0      	adds	r3, #176	; 0xb0
					myPresets[idx].relTime_ms = 0;
 800081e:	6054      	str	r4, [r2, #4]
					myPresets[idx].transitionDoneCnt = 0;
 8000820:	6094      	str	r4, [r2, #8]
					memset(myPresets[idx].presetTransitionStatus, 0, sizeof(myPresets[idx].presetTransitionStatus));
 8000822:	4418      	add	r0, r3
 8000824:	2214      	movs	r2, #20
 8000826:	4621      	mov	r1, r4
 8000828:	f005 fd40 	bl	80062ac <memset>
					if(self->sendMsg != NULL){
 800082c:	6973      	ldr	r3, [r6, #20]
 800082e:	b163      	cbz	r3, 800084a <app_dmx_preset_receiveMsg+0x6a>
						msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_EVENT(idx), app_cfg_dmx_preset_TRIGGER_ENABLE, 0, 0);
 8000830:	f8ad 5000 	strh.w	r5, [sp]
 8000834:	f8ad 8002 	strh.w	r8, [sp, #2]
 8000838:	f88d 7004 	strb.w	r7, [sp, #4]
						msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_EVENT(idx), app_cfg_dmx_preset_TRIGGER_DISABLE, 0, 0);
 800083c:	f88d 4005 	strb.w	r4, [sp, #5]
 8000840:	f8ad 4006 	strh.w	r4, [sp, #6]
						self->sendMsg(self, &newMessage);
 8000844:	4669      	mov	r1, sp
 8000846:	4630      	mov	r0, r6
 8000848:	4798      	blx	r3
}
 800084a:	b002      	add	sp, #8
 800084c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					myPresets[idx].trigger = false;
 8000850:	23c4      	movs	r3, #196	; 0xc4
 8000852:	436b      	muls	r3, r5
 8000854:	18c2      	adds	r2, r0, r3
 8000856:	2400      	movs	r4, #0
 8000858:	54c4      	strb	r4, [r0, r3]
					memset(myPresets[idx].presetTransitionStatus, 0, sizeof(myPresets[idx].presetTransitionStatus));
 800085a:	33b0      	adds	r3, #176	; 0xb0
					myPresets[idx].relTime_ms = 0;
 800085c:	6054      	str	r4, [r2, #4]
					myPresets[idx].transitionDoneCnt = 0;
 800085e:	6094      	str	r4, [r2, #8]
					memset(myPresets[idx].presetTransitionStatus, 0, sizeof(myPresets[idx].presetTransitionStatus));
 8000860:	4418      	add	r0, r3
 8000862:	2214      	movs	r2, #20
 8000864:	4621      	mov	r1, r4
 8000866:	f005 fd21 	bl	80062ac <memset>
					if(self->sendMsg != NULL){
 800086a:	6973      	ldr	r3, [r6, #20]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d0ec      	beq.n	800084a <app_dmx_preset_receiveMsg+0x6a>
						msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_EVENT(idx), app_cfg_dmx_preset_TRIGGER_DISABLE, 0, 0);
 8000870:	2250      	movs	r2, #80	; 0x50
 8000872:	f8ad 5000 	strh.w	r5, [sp]
 8000876:	f8ad 4002 	strh.w	r4, [sp, #2]
 800087a:	f88d 2004 	strb.w	r2, [sp, #4]
 800087e:	e7dd      	b.n	800083c <app_dmx_preset_receiveMsg+0x5c>
 8000880:	20000000 	.word	0x20000000

08000884 <app_uart_irqHandler>:
	}
	return bufferState;
}


void app_uart_irqHandler(USART_TypeDef *uartHandler, stRingBuf *rxBuf, stRingBuf *txBuf){
 8000884:	b537      	push	{r0, r1, r2, r4, r5, lr}
		volatile uint16_t ISR;
		char bufferState;

		ISR = uartHandler->ISR;
 8000886:	69c3      	ldr	r3, [r0, #28]
 8000888:	b29b      	uxth	r3, r3
 800088a:	f8ad 3006 	strh.w	r3, [sp, #6]
		if(ISR & USART_ISR_RXNE){ //Bit 5 = Read Data Register Not Empty in SR
 800088e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
void app_uart_irqHandler(USART_TypeDef *uartHandler, stRingBuf *rxBuf, stRingBuf *txBuf){
 8000892:	4604      	mov	r4, r0
		if(ISR & USART_ISR_RXNE){ //Bit 5 = Read Data Register Not Empty in SR
 8000894:	0698      	lsls	r0, r3, #26
void app_uart_irqHandler(USART_TypeDef *uartHandler, stRingBuf *rxBuf, stRingBuf *txBuf){
 8000896:	4615      	mov	r5, r2
		if(ISR & USART_ISR_RXNE){ //Bit 5 = Read Data Register Not Empty in SR
 8000898:	d503      	bpl.n	80008a2 <app_uart_irqHandler+0x1e>
			bufferState = RINGBUFFER_cIn(uartHandler->RDR, rxBuf);
 800089a:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800089c:	b2c0      	uxtb	r0, r0
 800089e:	f003 ff07 	bl	80046b0 <RINGBUFFER_cIn>
			if(bufferState != ringbuffer_OK){
				//TODO Error handling
			}
		}
		if(ISR & USART_ISR_TXE){
 80008a2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80008a6:	061a      	lsls	r2, r3, #24
 80008a8:	d50e      	bpl.n	80008c8 <app_uart_irqHandler+0x44>
			uartHandler->ISR &= ~USART_ISR_TXE;
 80008aa:	69e3      	ldr	r3, [r4, #28]
 80008ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008b0:	61e3      	str	r3, [r4, #28]
			char data;
			bufferState = RINGBUFFER_cOut(&data, txBuf);
 80008b2:	4629      	mov	r1, r5
 80008b4:	f10d 0005 	add.w	r0, sp, #5
 80008b8:	f003 ff16 	bl	80046e8 <RINGBUFFER_cOut>
			if(bufferState == ringbuffer_EMPTY){
 80008bc:	2802      	cmp	r0, #2
 80008be:	d10d      	bne.n	80008dc <app_uart_irqHandler+0x58>
				uartHandler->CR1 &= ~USART_CR1_TXEIE;
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008c6:	6023      	str	r3, [r4, #0]

			}else{
				uartHandler->TDR = data;
			}
		}
		if(ISR & USART_ISR_ORE){
 80008c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80008cc:	071b      	lsls	r3, r3, #28
			uartHandler->ICR |= USART_ICR_ORECF;
 80008ce:	bf42      	ittt	mi
 80008d0:	6a23      	ldrmi	r3, [r4, #32]
 80008d2:	f043 0308 	orrmi.w	r3, r3, #8
 80008d6:	6223      	strmi	r3, [r4, #32]
		}
	}
 80008d8:	b003      	add	sp, #12
 80008da:	bd30      	pop	{r4, r5, pc}
			}else if (bufferState == ringbuffer_NO_BUF){
 80008dc:	2800      	cmp	r0, #0
 80008de:	d0f3      	beq.n	80008c8 <app_uart_irqHandler+0x44>
				uartHandler->TDR = data;
 80008e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80008e4:	8523      	strh	r3, [r4, #40]	; 0x28
 80008e6:	e7ef      	b.n	80008c8 <app_uart_irqHandler+0x44>

080008e8 <app_receiveMsg>:
	msg_Message *newMessage = msg_getNext(&buffer, &msgBuf);
	if(newMessage != NULL){
		self->receiveMsg(self, newMessage);
	}
}
static void app_receiveMsg(eal_task_Task *self, msg_Message *message){
 80008e8:	b510      	push	{r4, lr}
	dmxTask.receiveMsg(&dmxTask, message);
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <app_receiveMsg+0x18>)
 80008ec:	6903      	ldr	r3, [r0, #16]
static void app_receiveMsg(eal_task_Task *self, msg_Message *message){
 80008ee:	460c      	mov	r4, r1
	dmxTask.receiveMsg(&dmxTask, message);
 80008f0:	4798      	blx	r3
	dmxPresetTask.receiveMsg(&dmxPresetTask, message);
 80008f2:	4804      	ldr	r0, [pc, #16]	; (8000904 <app_receiveMsg+0x1c>)
 80008f4:	4621      	mov	r1, r4
 80008f6:	6903      	ldr	r3, [r0, #16]
}
 80008f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dmxPresetTask.receiveMsg(&dmxPresetTask, message);
 80008fc:	4718      	bx	r3
 80008fe:	bf00      	nop
 8000900:	20000404 	.word	0x20000404
 8000904:	200003ec 	.word	0x200003ec

08000908 <sendMessage>:
	dmxPresetTask.enable = true;
	if(dmxPresetTask.init) dmxPresetTask.init(&dmxPresetTask);
}

/* Messages --------------------------------------------------------------------*/
static void sendMessage(eal_task_Task *self, msg_Message *message){
 8000908:	b510      	push	{r4, lr}
	uint8_t msgBufState = 1;
	if(msg_isAction(message))msgBufState = msg_writeAction(message, &msgBuf);
 800090a:	4608      	mov	r0, r1
static void sendMessage(eal_task_Task *self, msg_Message *message){
 800090c:	460c      	mov	r4, r1
	if(msg_isAction(message))msgBufState = msg_writeAction(message, &msgBuf);
 800090e:	f003 fecc 	bl	80046aa <msg_isAction>
 8000912:	4906      	ldr	r1, [pc, #24]	; (800092c <sendMessage+0x24>)
 8000914:	b120      	cbz	r0, 8000920 <sendMessage+0x18>
 8000916:	4620      	mov	r0, r4
	else msgBufState = msg_writeEvent(message, &msgBuf);
	if(msgBufState != 1) messageBufferError(msgBufState);
}
 8000918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(msg_isAction(message))msgBufState = msg_writeAction(message, &msgBuf);
 800091c:	f003 be6a 	b.w	80045f4 <msg_writeAction>
	else msgBufState = msg_writeEvent(message, &msgBuf);
 8000920:	4620      	mov	r0, r4
}
 8000922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	else msgBufState = msg_writeEvent(message, &msgBuf);
 8000926:	f003 be5f 	b.w	80045e8 <msg_writeEvent>
 800092a:	bf00      	nop
 800092c:	2000041c 	.word	0x2000041c

08000930 <app_process>:
static void app_process(eal_task_Task *self){
 8000930:	b513      	push	{r0, r1, r4, lr}
	msg_Message buffer = {0};
 8000932:	2300      	movs	r3, #0
	msg_Message *newMessage = msg_getNext(&buffer, &msgBuf);
 8000934:	4906      	ldr	r1, [pc, #24]	; (8000950 <app_process+0x20>)
	msg_Message buffer = {0};
 8000936:	9300      	str	r3, [sp, #0]
static void app_process(eal_task_Task *self){
 8000938:	4604      	mov	r4, r0
	msg_Message *newMessage = msg_getNext(&buffer, &msgBuf);
 800093a:	4668      	mov	r0, sp
	msg_Message buffer = {0};
 800093c:	9301      	str	r3, [sp, #4]
	msg_Message *newMessage = msg_getNext(&buffer, &msgBuf);
 800093e:	f003 fe61 	bl	8004604 <msg_getNext>
	if(newMessage != NULL){
 8000942:	4601      	mov	r1, r0
 8000944:	b110      	cbz	r0, 800094c <app_process+0x1c>
		self->receiveMsg(self, newMessage);
 8000946:	6923      	ldr	r3, [r4, #16]
 8000948:	4620      	mov	r0, r4
 800094a:	4798      	blx	r3
}
 800094c:	b002      	add	sp, #8
 800094e:	bd10      	pop	{r4, pc}
 8000950:	2000041c 	.word	0x2000041c

08000954 <app_init>:
static void app_init(eal_task_Task *self){
 8000954:	b510      	push	{r4, lr}
	eeprom_registerCallback(&eepromDev1, eepromCallback);
 8000956:	490b      	ldr	r1, [pc, #44]	; (8000984 <app_init+0x30>)
 8000958:	480b      	ldr	r0, [pc, #44]	; (8000988 <app_init+0x34>)
 800095a:	f003 fde8 	bl	800452e <eeprom_registerCallback>
	eeprom_init(&eepromDev1);
 800095e:	480a      	ldr	r0, [pc, #40]	; (8000988 <app_init+0x34>)
 8000960:	f003 fde7 	bl	8004532 <eeprom_init>
	dmxTask.enable = true;
 8000964:	4809      	ldr	r0, [pc, #36]	; (800098c <app_init+0x38>)
	if(dmxTask.init) dmxTask.init(&dmxTask);
 8000966:	6842      	ldr	r2, [r0, #4]
	dmxTask.enable = true;
 8000968:	2301      	movs	r3, #1
 800096a:	7003      	strb	r3, [r0, #0]
 800096c:	461c      	mov	r4, r3
	if(dmxTask.init) dmxTask.init(&dmxTask);
 800096e:	b102      	cbz	r2, 8000972 <app_init+0x1e>
 8000970:	4790      	blx	r2
	dmxPresetTask.enable = true;
 8000972:	4807      	ldr	r0, [pc, #28]	; (8000990 <app_init+0x3c>)
	if(dmxPresetTask.init) dmxPresetTask.init(&dmxPresetTask);
 8000974:	6843      	ldr	r3, [r0, #4]
	dmxPresetTask.enable = true;
 8000976:	7004      	strb	r4, [r0, #0]
	if(dmxPresetTask.init) dmxPresetTask.init(&dmxPresetTask);
 8000978:	b113      	cbz	r3, 8000980 <app_init+0x2c>
}
 800097a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(dmxPresetTask.init) dmxPresetTask.init(&dmxPresetTask);
 800097e:	4718      	bx	r3
 8000980:	bd10      	pop	{r4, pc}
 8000982:	bf00      	nop
 8000984:	08000995 	.word	0x08000995
 8000988:	200003c8 	.word	0x200003c8
 800098c:	20000404 	.word	0x20000404
 8000990:	200003ec 	.word	0x200003ec

08000994 <eepromCallback>:
//	if(state == NO_BUF) USART3_WriteStringToBuffer("ERROR: MSG NO BUF\r\n", 18);
//	else if(state == FULL) USART3_WriteStringToBuffer("ERROR: MSG BUF OVR\r\n", 19);
}

/* Callback's ---------------------------------------------------------------------*/
uint8_t eepromCallback(eeprom_cfg_Config *config){
 8000994:	b530      	push	{r4, r5, lr}
	uint8_t state = 1;
	if(config->callbackType == EEPROM_CFG_CALL_TX_START){
 8000996:	7a83      	ldrb	r3, [r0, #10]
uint8_t eepromCallback(eeprom_cfg_Config *config){
 8000998:	b085      	sub	sp, #20
 800099a:	4604      	mov	r4, r0
	if(config->callbackType == EEPROM_CFG_CALL_TX_START){
 800099c:	2b00      	cmp	r3, #0
 800099e:	d131      	bne.n	8000a04 <eepromCallback+0x70>
		if(HAL_I2C_Mem_Write(&hi2c2, config->devAddr, config->memAddr, I2C_MEMADD_SIZE_16BIT, config->txBuffer, config->dataSize, 100) != HAL_OK) state = 0;
 80009a0:	2364      	movs	r3, #100	; 0x64
 80009a2:	8b02      	ldrh	r2, [r0, #24]
 80009a4:	7801      	ldrb	r1, [r0, #0]
 80009a6:	9302      	str	r3, [sp, #8]
 80009a8:	8a83      	ldrh	r3, [r0, #20]
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	69c3      	ldr	r3, [r0, #28]
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	4815      	ldr	r0, [pc, #84]	; (8000a08 <eepromCallback+0x74>)
 80009b2:	2302      	movs	r3, #2
 80009b4:	f000 fc24 	bl	8001200 <HAL_I2C_Mem_Write>
	uint8_t state = 1;
 80009b8:	fab0 f580 	clz	r5, r0
 80009bc:	096d      	lsrs	r5, r5, #5
	}
	if(config->callbackType == EEPROM_CFG_CALL_RX_START){
 80009be:	7aa3      	ldrb	r3, [r4, #10]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d10e      	bne.n	80009e2 <eepromCallback+0x4e>
		if(HAL_I2C_Mem_Read(&hi2c2, config->devAddr, config->memAddr, I2C_MEMADD_SIZE_16BIT, config->rxBuffer, config->dataSize, 10) != HAL_OK) state = 0;
 80009c4:	230a      	movs	r3, #10
 80009c6:	9302      	str	r3, [sp, #8]
 80009c8:	8aa3      	ldrh	r3, [r4, #20]
 80009ca:	9301      	str	r3, [sp, #4]
 80009cc:	6a23      	ldr	r3, [r4, #32]
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	8b22      	ldrh	r2, [r4, #24]
 80009d2:	7821      	ldrb	r1, [r4, #0]
 80009d4:	480c      	ldr	r0, [pc, #48]	; (8000a08 <eepromCallback+0x74>)
 80009d6:	2302      	movs	r3, #2
 80009d8:	f000 fcca 	bl	8001370 <HAL_I2C_Mem_Read>
 80009dc:	2800      	cmp	r0, #0
 80009de:	bf18      	it	ne
 80009e0:	2500      	movne	r5, #0
	}
	if(config->callbackType == EEPROM_CFG_CALL_CHECK_TX_STATE){
 80009e2:	7aa3      	ldrb	r3, [r4, #10]
 80009e4:	2b04      	cmp	r3, #4
 80009e6:	d10a      	bne.n	80009fe <eepromCallback+0x6a>
		if(HAL_I2C_Master_Transmit(&hi2c2, config->devAddr, config->rxBuffer, config->dataSize, 1) != HAL_OK) state = 0;
 80009e8:	2201      	movs	r2, #1
 80009ea:	9200      	str	r2, [sp, #0]
 80009ec:	8aa3      	ldrh	r3, [r4, #20]
 80009ee:	7821      	ldrb	r1, [r4, #0]
 80009f0:	6a22      	ldr	r2, [r4, #32]
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <eepromCallback+0x74>)
 80009f4:	f000 fb70 	bl	80010d8 <HAL_I2C_Master_Transmit>
 80009f8:	2800      	cmp	r0, #0
 80009fa:	bf18      	it	ne
 80009fc:	2500      	movne	r5, #0
	}
	return state;
}
 80009fe:	4628      	mov	r0, r5
 8000a00:	b005      	add	sp, #20
 8000a02:	bd30      	pop	{r4, r5, pc}
	uint8_t state = 1;
 8000a04:	2501      	movs	r5, #1
 8000a06:	e7da      	b.n	80009be <eepromCallback+0x2a>
 8000a08:	2000160c 	.word	0x2000160c

08000a0c <app_main>:
	msgTask.enable = true;
 8000a0c:	4c14      	ldr	r4, [pc, #80]	; (8000a60 <app_main+0x54>)
		dmxTask.mainLoop(&dmxTask);
 8000a0e:	4d15      	ldr	r5, [pc, #84]	; (8000a64 <app_main+0x58>)
		dmxPresetTask.mainLoop(&dmxPresetTask);
 8000a10:	4e15      	ldr	r6, [pc, #84]	; (8000a68 <app_main+0x5c>)
	msgTask.enable = true;
 8000a12:	2301      	movs	r3, #1
void app_main(){
 8000a14:	b583      	push	{r0, r1, r7, lr}
	msgTask.enable = true;
 8000a16:	7023      	strb	r3, [r4, #0]
	msgTask.init(&msgTask);
 8000a18:	4620      	mov	r0, r4
 8000a1a:	6863      	ldr	r3, [r4, #4]
 8000a1c:	4798      	blx	r3
		msgTask.mainLoop(&msgTask);
 8000a1e:	4627      	mov	r7, r4
 8000a20:	68a3      	ldr	r3, [r4, #8]
 8000a22:	4638      	mov	r0, r7
 8000a24:	4798      	blx	r3
		dmxTask.mainLoop(&dmxTask);
 8000a26:	480f      	ldr	r0, [pc, #60]	; (8000a64 <app_main+0x58>)
 8000a28:	68ab      	ldr	r3, [r5, #8]
 8000a2a:	4798      	blx	r3
		dmxPresetTask.mainLoop(&dmxPresetTask);
 8000a2c:	480e      	ldr	r0, [pc, #56]	; (8000a68 <app_main+0x5c>)
 8000a2e:	68b3      	ldr	r3, [r6, #8]
 8000a30:	4798      	blx	r3
		if((HAL_GPIO_ReadPin(I_SW2_GPIO_Port, I_SW2_Pin) == GPIO_PIN_RESET) && (myPresets[0].trigger != true)){
 8000a32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3a:	f000 f9b1 	bl	8000da0 <HAL_GPIO_ReadPin>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	d1ee      	bne.n	8000a20 <app_main+0x14>
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <app_main+0x60>)
 8000a44:	781a      	ldrb	r2, [r3, #0]
 8000a46:	2a00      	cmp	r2, #0
 8000a48:	d1ea      	bne.n	8000a20 <app_main+0x14>
			msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_ACTION(0), app_cfg_dmx_preset_TRIGGER_ENABLE, 0, 0);
 8000a4a:	4909      	ldr	r1, [pc, #36]	; (8000a70 <app_main+0x64>)
 8000a4c:	6808      	ldr	r0, [r1, #0]
 8000a4e:	6849      	ldr	r1, [r1, #4]
 8000a50:	466b      	mov	r3, sp
 8000a52:	c303      	stmia	r3!, {r0, r1}
			sendMessage(NULL, &newMessage);
 8000a54:	4669      	mov	r1, sp
 8000a56:	4610      	mov	r0, r2
 8000a58:	f7ff ff56 	bl	8000908 <sendMessage>
 8000a5c:	e7e0      	b.n	8000a20 <app_main+0x14>
 8000a5e:	bf00      	nop
 8000a60:	2000042c 	.word	0x2000042c
 8000a64:	20000404 	.word	0x20000404
 8000a68:	200003ec 	.word	0x200003ec
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	080062d4 	.word	0x080062d4

08000a74 <app_1ms>:
void app_1ms(){
 8000a74:	b508      	push	{r3, lr}
	dmx_1ms(&dmx1);
 8000a76:	480f      	ldr	r0, [pc, #60]	; (8000ab4 <app_1ms+0x40>)
 8000a78:	f003 fc4c 	bl	8004314 <dmx_1ms>
	if(dmxTask.timer) dmxTask.timer(&dmxTask, true);
 8000a7c:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <app_1ms+0x44>)
 8000a7e:	68c3      	ldr	r3, [r0, #12]
 8000a80:	b10b      	cbz	r3, 8000a86 <app_1ms+0x12>
 8000a82:	2101      	movs	r1, #1
 8000a84:	4798      	blx	r3
	if(dmxPresetTask.timer) dmxPresetTask.timer(&dmxPresetTask, true);
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <app_1ms+0x48>)
 8000a88:	68c3      	ldr	r3, [r0, #12]
 8000a8a:	b10b      	cbz	r3, 8000a90 <app_1ms+0x1c>
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4798      	blx	r3
	if(++timer100ms >= 100){
 8000a90:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <app_1ms+0x4c>)
 8000a92:	8813      	ldrh	r3, [r2, #0]
 8000a94:	3301      	adds	r3, #1
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	2b63      	cmp	r3, #99	; 0x63
		timer100ms = 0;
 8000a9a:	bf88      	it	hi
 8000a9c:	2300      	movhi	r3, #0
 8000a9e:	8013      	strh	r3, [r2, #0]
	if(++timer500ms >= 500){
 8000aa0:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <app_1ms+0x50>)
 8000aa2:	8813      	ldrh	r3, [r2, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
		timer500ms = 0;
 8000aac:	bf28      	it	cs
 8000aae:	2300      	movcs	r3, #0
 8000ab0:	8013      	strh	r3, [r2, #0]
 8000ab2:	bd08      	pop	{r3, pc}
 8000ab4:	20000310 	.word	0x20000310
 8000ab8:	20000404 	.word	0x20000404
 8000abc:	200003ec 	.word	0x200003ec
 8000ac0:	20000be2 	.word	0x20000be2
 8000ac4:	20000be4 	.word	0x20000be4

08000ac8 <UART4_IRQHandler>:

/* IRQs ---------------------------------------------------------------------*/
void UART4_IRQHandler(void){
	app_uart_irqHandler(huart4.Instance, &uart4RxBuf, &uart4TxBuf);
 8000ac8:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <UART4_IRQHandler+0xc>)
 8000aca:	4a03      	ldr	r2, [pc, #12]	; (8000ad8 <UART4_IRQHandler+0x10>)
 8000acc:	4903      	ldr	r1, [pc, #12]	; (8000adc <UART4_IRQHandler+0x14>)
 8000ace:	6818      	ldr	r0, [r3, #0]
 8000ad0:	f7ff bed8 	b.w	8000884 <app_uart_irqHandler>
 8000ad4:	200018c0 	.word	0x200018c0
 8000ad8:	20000450 	.word	0x20000450
 8000adc:	20000444 	.word	0x20000444

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_InitTick+0x2c>)
{
 8000ae4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000ae6:	6818      	ldr	r0, [r3, #0]
 8000ae8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aec:	fbb0 f0f3 	udiv	r0, r0, r3
 8000af0:	f000 f87e 	bl	8000bf0 <HAL_SYSTICK_Config>
 8000af4:	4604      	mov	r4, r0
 8000af6:	b938      	cbnz	r0, 8000b08 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000af8:	4602      	mov	r2, r0
 8000afa:	4629      	mov	r1, r5
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f000 f836 	bl	8000b70 <HAL_NVIC_SetPriority>
 8000b04:	4620      	mov	r0, r4
 8000b06:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000b08:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000b0a:	bd38      	pop	{r3, r4, r5, pc}
 8000b0c:	2000056c 	.word	0x2000056c

08000b10 <HAL_Init>:
{
 8000b10:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b12:	2003      	movs	r0, #3
 8000b14:	f000 f81a 	bl	8000b4c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f7ff ffe1 	bl	8000ae0 <HAL_InitTick>
 8000b1e:	4604      	mov	r4, r0
 8000b20:	b918      	cbnz	r0, 8000b2a <HAL_Init+0x1a>
    HAL_MspInit();
 8000b22:	f004 fcf9 	bl	8005518 <HAL_MspInit>
}
 8000b26:	4620      	mov	r0, r4
 8000b28:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000b2a:	2401      	movs	r4, #1
 8000b2c:	e7fb      	b.n	8000b26 <HAL_Init+0x16>
	...

08000b30 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000b30:	4a02      	ldr	r2, [pc, #8]	; (8000b3c <HAL_IncTick+0xc>)
 8000b32:	6813      	ldr	r3, [r2, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	6013      	str	r3, [r2, #0]
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20001608 	.word	0x20001608

08000b40 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b40:	4b01      	ldr	r3, [pc, #4]	; (8000b48 <HAL_GetTick+0x8>)
 8000b42:	6818      	ldr	r0, [r3, #0]
}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20001608 	.word	0x20001608

08000b4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b4e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b54:	041b      	lsls	r3, r3, #16
 8000b56:	0c1b      	lsrs	r3, r3, #16
 8000b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b5c:	0200      	lsls	r0, r0, #8
 8000b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b62:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000b66:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b68:	60d3      	str	r3, [r2, #12]
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b72:	b530      	push	{r4, r5, lr}
 8000b74:	68dc      	ldr	r4, [r3, #12]
 8000b76:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	bf28      	it	cs
 8000b84:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b86:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 0501 	mov.w	r5, #1
 8000b8c:	fa05 f303 	lsl.w	r3, r5, r3
 8000b90:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b94:	bf8c      	ite	hi
 8000b96:	3c03      	subhi	r4, #3
 8000b98:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9a:	4019      	ands	r1, r3
 8000b9c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9e:	fa05 f404 	lsl.w	r4, r5, r4
 8000ba2:	3c01      	subs	r4, #1
 8000ba4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000ba6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	ea42 0201 	orr.w	r2, r2, r1
 8000bac:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	bfaf      	iteee	ge
 8000bb2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	f000 000f 	andlt.w	r0, r0, #15
 8000bba:	4b06      	ldrlt	r3, [pc, #24]	; (8000bd4 <HAL_NVIC_SetPriority+0x64>)
 8000bbc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	bfa5      	ittet	ge
 8000bc0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000bc4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000bcc:	bd30      	pop	{r4, r5, pc}
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00
 8000bd4:	e000ed14 	.word	0xe000ed14

08000bd8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bd8:	0942      	lsrs	r2, r0, #5
 8000bda:	2301      	movs	r3, #1
 8000bdc:	f000 001f 	and.w	r0, r0, #31
 8000be0:	fa03 f000 	lsl.w	r0, r3, r0
 8000be4:	4b01      	ldr	r3, [pc, #4]	; (8000bec <HAL_NVIC_EnableIRQ+0x14>)
 8000be6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100

08000bf0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf0:	3801      	subs	r0, #1
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d20a      	bcs.n	8000c0e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	21f0      	movs	r1, #240	; 0xf0
 8000c00:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c04:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c0e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e010 	.word	0xe000e010
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c20:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c24:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8000d9c <HAL_GPIO_Init+0x180>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c28:	4a5a      	ldr	r2, [pc, #360]	; (8000d94 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00u;
 8000c2a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2c:	fa38 f403 	lsrs.w	r4, r8, r3
 8000c30:	d102      	bne.n	8000c38 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8000c32:	b003      	add	sp, #12
 8000c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c38:	2401      	movs	r4, #1
 8000c3a:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 8000c3e:	ea18 050a 	ands.w	r5, r8, sl
 8000c42:	f000 809c 	beq.w	8000d7e <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c46:	684c      	ldr	r4, [r1, #4]
 8000c48:	f024 0b10 	bic.w	fp, r4, #16
 8000c4c:	f1bb 0f02 	cmp.w	fp, #2
 8000c50:	d114      	bne.n	8000c7c <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3u];
 8000c52:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000c56:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c5a:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000c5e:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c62:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000c66:	270f      	movs	r7, #15
 8000c68:	fa07 f70c 	lsl.w	r7, r7, ip
 8000c6c:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c70:	690e      	ldr	r6, [r1, #16]
 8000c72:	fa06 f60c 	lsl.w	r6, r6, ip
 8000c76:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3u] = temp;
 8000c78:	f8ce 6020 	str.w	r6, [lr, #32]
 8000c7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c80:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000c82:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c84:	fa07 f70c 	lsl.w	r7, r7, ip
 8000c88:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c8a:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c8e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c90:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c94:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c98:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c9c:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000ca0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ca2:	d811      	bhi.n	8000cc8 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8000ca4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ca6:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000caa:	68ce      	ldr	r6, [r1, #12]
 8000cac:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000cb0:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000cb4:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000cb6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cb8:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cbc:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000cc0:	409e      	lsls	r6, r3
 8000cc2:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000cc6:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000cc8:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cca:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ccc:	688e      	ldr	r6, [r1, #8]
 8000cce:	fa06 f60c 	lsl.w	r6, r6, ip
 8000cd2:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cd4:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000cd6:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cd8:	d551      	bpl.n	8000d7e <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8000cde:	f046 0601 	orr.w	r6, r6, #1
 8000ce2:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8000ce6:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8000cea:	f023 0703 	bic.w	r7, r3, #3
 8000cee:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000cf2:	f006 0601 	and.w	r6, r6, #1
 8000cf6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000cfa:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cfc:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d00:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d02:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d04:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000d08:	f04f 0e0f 	mov.w	lr, #15
 8000d0c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d10:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d14:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d18:	d033      	beq.n	8000d82 <HAL_GPIO_Init+0x166>
 8000d1a:	4e1f      	ldr	r6, [pc, #124]	; (8000d98 <HAL_GPIO_Init+0x17c>)
 8000d1c:	42b0      	cmp	r0, r6
 8000d1e:	d032      	beq.n	8000d86 <HAL_GPIO_Init+0x16a>
 8000d20:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d24:	42b0      	cmp	r0, r6
 8000d26:	d030      	beq.n	8000d8a <HAL_GPIO_Init+0x16e>
 8000d28:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d2c:	42b0      	cmp	r0, r6
 8000d2e:	d02e      	beq.n	8000d8e <HAL_GPIO_Init+0x172>
 8000d30:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d34:	42b0      	cmp	r0, r6
 8000d36:	bf14      	ite	ne
 8000d38:	2607      	movne	r6, #7
 8000d3a:	2604      	moveq	r6, #4
 8000d3c:	fa06 f60c 	lsl.w	r6, r6, ip
 8000d40:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d44:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000d46:	6816      	ldr	r6, [r2, #0]
        temp &= ~(iocurrent);
 8000d48:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d4a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000d4e:	bf0c      	ite	eq
 8000d50:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000d52:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000d54:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8000d56:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d58:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000d5c:	bf0c      	ite	eq
 8000d5e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000d60:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000d62:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 8000d64:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d66:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000d6a:	bf0c      	ite	eq
 8000d6c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000d6e:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000d70:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 8000d72:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d74:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8000d76:	bf54      	ite	pl
 8000d78:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000d7a:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000d7c:	60d6      	str	r6, [r2, #12]
    position++;
 8000d7e:	3301      	adds	r3, #1
 8000d80:	e754      	b.n	8000c2c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d82:	2600      	movs	r6, #0
 8000d84:	e7da      	b.n	8000d3c <HAL_GPIO_Init+0x120>
 8000d86:	2601      	movs	r6, #1
 8000d88:	e7d8      	b.n	8000d3c <HAL_GPIO_Init+0x120>
 8000d8a:	2602      	movs	r6, #2
 8000d8c:	e7d6      	b.n	8000d3c <HAL_GPIO_Init+0x120>
 8000d8e:	2603      	movs	r6, #3
 8000d90:	e7d4      	b.n	8000d3c <HAL_GPIO_Init+0x120>
 8000d92:	bf00      	nop
 8000d94:	40010400 	.word	0x40010400
 8000d98:	48000400 	.word	0x48000400
 8000d9c:	40021000 	.word	0x40021000

08000da0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000da0:	6903      	ldr	r3, [r0, #16]
 8000da2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000da4:	bf14      	ite	ne
 8000da6:	2001      	movne	r0, #1
 8000da8:	2000      	moveq	r0, #0
 8000daa:	4770      	bx	lr

08000dac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dac:	b10a      	cbz	r2, 8000db2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dae:	6181      	str	r1, [r0, #24]
 8000db0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000db2:	6281      	str	r1, [r0, #40]	; 0x28
 8000db4:	4770      	bx	lr

08000db6 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000db6:	6803      	ldr	r3, [r0, #0]
 8000db8:	699a      	ldr	r2, [r3, #24]
 8000dba:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8000dbc:	bf44      	itt	mi
 8000dbe:	2200      	movmi	r2, #0
 8000dc0:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000dc2:	699a      	ldr	r2, [r3, #24]
 8000dc4:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000dc6:	bf5e      	ittt	pl
 8000dc8:	699a      	ldrpl	r2, [r3, #24]
 8000dca:	f042 0201 	orrpl.w	r2, r2, #1
 8000dce:	619a      	strpl	r2, [r3, #24]
 8000dd0:	4770      	bx	lr

08000dd2 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000dd2:	b530      	push	{r4, r5, lr}
 8000dd4:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000dd6:	6805      	ldr	r5, [r0, #0]
 8000dd8:	4323      	orrs	r3, r4
 8000dda:	0d64      	lsrs	r4, r4, #21
 8000ddc:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8000de0:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8000de4:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8000de8:	6868      	ldr	r0, [r5, #4]
 8000dea:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000dee:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8000df2:	4319      	orrs	r1, r3
 8000df4:	f044 0403 	orr.w	r4, r4, #3
 8000df8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000dfc:	ea20 0404 	bic.w	r4, r0, r4
 8000e00:	4321      	orrs	r1, r4
 8000e02:	6069      	str	r1, [r5, #4]
 8000e04:	bd30      	pop	{r4, r5, pc}

08000e06 <I2C_WaitOnFlagUntilTimeout>:
{
 8000e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e0a:	9f06      	ldr	r7, [sp, #24]
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	4688      	mov	r8, r1
 8000e10:	4616      	mov	r6, r2
 8000e12:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000e14:	6822      	ldr	r2, [r4, #0]
 8000e16:	6993      	ldr	r3, [r2, #24]
 8000e18:	ea38 0303 	bics.w	r3, r8, r3
 8000e1c:	bf0c      	ite	eq
 8000e1e:	2301      	moveq	r3, #1
 8000e20:	2300      	movne	r3, #0
 8000e22:	42b3      	cmp	r3, r6
 8000e24:	d002      	beq.n	8000e2c <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8000e26:	2000      	movs	r0, #0
}
 8000e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000e2c:	1c6b      	adds	r3, r5, #1
 8000e2e:	d0f2      	beq.n	8000e16 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e30:	f7ff fe86 	bl	8000b40 <HAL_GetTick>
 8000e34:	1bc0      	subs	r0, r0, r7
 8000e36:	4285      	cmp	r5, r0
 8000e38:	d301      	bcc.n	8000e3e <I2C_WaitOnFlagUntilTimeout+0x38>
 8000e3a:	2d00      	cmp	r5, #0
 8000e3c:	d1ea      	bne.n	8000e14 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e40:	f043 0320 	orr.w	r3, r3, #32
 8000e44:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000e46:	2320      	movs	r3, #32
 8000e48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000e52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000e56:	2001      	movs	r0, #1
 8000e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000e5c <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e5c:	6803      	ldr	r3, [r0, #0]
{
 8000e5e:	b570      	push	{r4, r5, r6, lr}
 8000e60:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e62:	6998      	ldr	r0, [r3, #24]
 8000e64:	f010 0010 	ands.w	r0, r0, #16
{
 8000e68:	460d      	mov	r5, r1
 8000e6a:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e6c:	d116      	bne.n	8000e9c <I2C_IsAcknowledgeFailed+0x40>
 8000e6e:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000e70:	1c69      	adds	r1, r5, #1
 8000e72:	d014      	beq.n	8000e9e <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e74:	f7ff fe64 	bl	8000b40 <HAL_GetTick>
 8000e78:	1b80      	subs	r0, r0, r6
 8000e7a:	4285      	cmp	r5, r0
 8000e7c:	d300      	bcc.n	8000e80 <I2C_IsAcknowledgeFailed+0x24>
 8000e7e:	b96d      	cbnz	r5, 8000e9c <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e82:	f043 0320 	orr.w	r3, r3, #32
 8000e86:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000e88:	2320      	movs	r3, #32
 8000e8a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000e94:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8000e98:	2001      	movs	r0, #1
}
 8000e9a:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e9c:	6823      	ldr	r3, [r4, #0]
 8000e9e:	6999      	ldr	r1, [r3, #24]
 8000ea0:	068a      	lsls	r2, r1, #26
 8000ea2:	d5e5      	bpl.n	8000e70 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ea4:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ea6:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ea8:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000eaa:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000eac:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000eae:	f7ff ff82 	bl	8000db6 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000eb2:	6822      	ldr	r2, [r4, #0]
 8000eb4:	6853      	ldr	r3, [r2, #4]
 8000eb6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000eba:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000ebe:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000ec2:	f023 0301 	bic.w	r3, r3, #1
 8000ec6:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000ec8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000ed0:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8000ed4:	e7db      	b.n	8000e8e <I2C_IsAcknowledgeFailed+0x32>

08000ed6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000ed6:	b570      	push	{r4, r5, r6, lr}
 8000ed8:	4604      	mov	r4, r0
 8000eda:	460d      	mov	r5, r1
 8000edc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	079b      	lsls	r3, r3, #30
 8000ee4:	d501      	bpl.n	8000eea <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000eea:	4632      	mov	r2, r6
 8000eec:	4629      	mov	r1, r5
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f7ff ffb4 	bl	8000e5c <I2C_IsAcknowledgeFailed>
 8000ef4:	b9a0      	cbnz	r0, 8000f20 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8000ef6:	1c6a      	adds	r2, r5, #1
 8000ef8:	d0f1      	beq.n	8000ede <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000efa:	f7ff fe21 	bl	8000b40 <HAL_GetTick>
 8000efe:	1b80      	subs	r0, r0, r6
 8000f00:	4285      	cmp	r5, r0
 8000f02:	d301      	bcc.n	8000f08 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000f04:	2d00      	cmp	r5, #0
 8000f06:	d1ea      	bne.n	8000ede <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f0a:	f043 0320 	orr.w	r3, r3, #32
 8000f0e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000f10:	2320      	movs	r3, #32
 8000f12:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000f1c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000f20:	2001      	movs	r0, #1
}
 8000f22:	bd70      	pop	{r4, r5, r6, pc}

08000f24 <I2C_RequestMemoryWrite>:
{
 8000f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f26:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000f28:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <I2C_RequestMemoryWrite+0x60>)
 8000f2c:	9300      	str	r3, [sp, #0]
{
 8000f2e:	4605      	mov	r5, r0
 8000f30:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000f32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f36:	b2fa      	uxtb	r2, r7
 8000f38:	f7ff ff4b 	bl	8000dd2 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f3c:	4632      	mov	r2, r6
 8000f3e:	9908      	ldr	r1, [sp, #32]
 8000f40:	4628      	mov	r0, r5
 8000f42:	f7ff ffc8 	bl	8000ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f46:	b110      	cbz	r0, 8000f4e <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8000f48:	2001      	movs	r0, #1
}
 8000f4a:	b003      	add	sp, #12
 8000f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000f4e:	2f01      	cmp	r7, #1
 8000f50:	682b      	ldr	r3, [r5, #0]
 8000f52:	d10c      	bne.n	8000f6e <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f54:	b2e4      	uxtb	r4, r4
 8000f56:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000f58:	9b08      	ldr	r3, [sp, #32]
 8000f5a:	9600      	str	r6, [sp, #0]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2180      	movs	r1, #128	; 0x80
 8000f60:	4628      	mov	r0, r5
 8000f62:	f7ff ff50 	bl	8000e06 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8000f66:	3000      	adds	r0, #0
 8000f68:	bf18      	it	ne
 8000f6a:	2001      	movne	r0, #1
 8000f6c:	e7ed      	b.n	8000f4a <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000f6e:	0a22      	lsrs	r2, r4, #8
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f72:	9908      	ldr	r1, [sp, #32]
 8000f74:	4632      	mov	r2, r6
 8000f76:	4628      	mov	r0, r5
 8000f78:	f7ff ffad 	bl	8000ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d1e3      	bne.n	8000f48 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f80:	682b      	ldr	r3, [r5, #0]
 8000f82:	e7e7      	b.n	8000f54 <I2C_RequestMemoryWrite+0x30>
 8000f84:	80002000 	.word	0x80002000

08000f88 <I2C_RequestMemoryRead>:
{
 8000f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000f8c:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <I2C_RequestMemoryRead+0x60>)
 8000f90:	9300      	str	r3, [sp, #0]
{
 8000f92:	4605      	mov	r5, r0
 8000f94:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000f96:	2300      	movs	r3, #0
 8000f98:	b2fa      	uxtb	r2, r7
 8000f9a:	f7ff ff1a 	bl	8000dd2 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f9e:	4632      	mov	r2, r6
 8000fa0:	9908      	ldr	r1, [sp, #32]
 8000fa2:	4628      	mov	r0, r5
 8000fa4:	f7ff ff97 	bl	8000ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 8000fa8:	b110      	cbz	r0, 8000fb0 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8000faa:	2001      	movs	r0, #1
}
 8000fac:	b003      	add	sp, #12
 8000fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000fb0:	2f01      	cmp	r7, #1
 8000fb2:	682b      	ldr	r3, [r5, #0]
 8000fb4:	d10c      	bne.n	8000fd0 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000fb6:	b2e4      	uxtb	r4, r4
 8000fb8:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000fba:	9b08      	ldr	r3, [sp, #32]
 8000fbc:	9600      	str	r6, [sp, #0]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2140      	movs	r1, #64	; 0x40
 8000fc2:	4628      	mov	r0, r5
 8000fc4:	f7ff ff1f 	bl	8000e06 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8000fc8:	3000      	adds	r0, #0
 8000fca:	bf18      	it	ne
 8000fcc:	2001      	movne	r0, #1
 8000fce:	e7ed      	b.n	8000fac <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000fd0:	0a22      	lsrs	r2, r4, #8
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fd4:	9908      	ldr	r1, [sp, #32]
 8000fd6:	4632      	mov	r2, r6
 8000fd8:	4628      	mov	r0, r5
 8000fda:	f7ff ff7c 	bl	8000ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 8000fde:	2800      	cmp	r0, #0
 8000fe0:	d1e3      	bne.n	8000faa <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000fe2:	682b      	ldr	r3, [r5, #0]
 8000fe4:	e7e7      	b.n	8000fb6 <I2C_RequestMemoryRead+0x2e>
 8000fe6:	bf00      	nop
 8000fe8:	80002000 	.word	0x80002000

08000fec <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000fec:	b570      	push	{r4, r5, r6, lr}
 8000fee:	4604      	mov	r4, r0
 8000ff0:	460d      	mov	r5, r1
 8000ff2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000ff4:	6823      	ldr	r3, [r4, #0]
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	069b      	lsls	r3, r3, #26
 8000ffa:	d501      	bpl.n	8001000 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001000:	4632      	mov	r2, r6
 8001002:	4629      	mov	r1, r5
 8001004:	4620      	mov	r0, r4
 8001006:	f7ff ff29 	bl	8000e5c <I2C_IsAcknowledgeFailed>
 800100a:	b990      	cbnz	r0, 8001032 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800100c:	f7ff fd98 	bl	8000b40 <HAL_GetTick>
 8001010:	1b80      	subs	r0, r0, r6
 8001012:	4285      	cmp	r5, r0
 8001014:	d301      	bcc.n	800101a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8001016:	2d00      	cmp	r5, #0
 8001018:	d1ec      	bne.n	8000ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800101a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800101c:	f043 0320 	orr.w	r3, r3, #32
 8001020:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001022:	2320      	movs	r3, #32
 8001024:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001028:	2300      	movs	r3, #0
 800102a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800102e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001032:	2001      	movs	r0, #1
}
 8001034:	bd70      	pop	{r4, r5, r6, pc}

08001036 <HAL_I2C_Init>:
{
 8001036:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001038:	4604      	mov	r4, r0
 800103a:	2800      	cmp	r0, #0
 800103c:	d04a      	beq.n	80010d4 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800103e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001042:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001046:	b91b      	cbnz	r3, 8001050 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001048:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800104c:	f004 f938 	bl	80052c0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001050:	2324      	movs	r3, #36	; 0x24
 8001052:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001056:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001058:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	f022 0201 	bic.w	r2, r2, #1
 8001060:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001062:	6862      	ldr	r2, [r4, #4]
 8001064:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001068:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800106a:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800106c:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800106e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001076:	d124      	bne.n	80010c2 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001078:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800107c:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800107e:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001080:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001082:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001086:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800108a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800108c:	68da      	ldr	r2, [r3, #12]
 800108e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001092:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001094:	6922      	ldr	r2, [r4, #16]
 8001096:	430a      	orrs	r2, r1
 8001098:	69a1      	ldr	r1, [r4, #24]
 800109a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800109e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010a0:	6a21      	ldr	r1, [r4, #32]
 80010a2:	69e2      	ldr	r2, [r4, #28]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	f042 0201 	orr.w	r2, r2, #1
 80010ae:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010b0:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80010b2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010b4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010ba:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010bc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 80010c0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010c6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010c8:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010ca:	bf04      	itt	eq
 80010cc:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80010d0:	605a      	streq	r2, [r3, #4]
 80010d2:	e7d4      	b.n	800107e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80010d4:	2001      	movs	r0, #1
}
 80010d6:	bd10      	pop	{r4, pc}

080010d8 <HAL_I2C_Master_Transmit>:
{
 80010d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80010dc:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010de:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80010e2:	2b20      	cmp	r3, #32
{
 80010e4:	4604      	mov	r4, r0
 80010e6:	460e      	mov	r6, r1
 80010e8:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010ea:	f040 8084 	bne.w	80011f6 <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 80010ee:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d07f      	beq.n	80011f6 <HAL_I2C_Master_Transmit+0x11e>
 80010f6:	2701      	movs	r7, #1
 80010f8:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80010fc:	f7ff fd20 	bl	8000b40 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001100:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001102:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001104:	9000      	str	r0, [sp, #0]
 8001106:	463a      	mov	r2, r7
 8001108:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800110c:	4620      	mov	r0, r4
 800110e:	f7ff fe7a 	bl	8000e06 <I2C_WaitOnFlagUntilTimeout>
 8001112:	b118      	cbz	r0, 800111c <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8001114:	2001      	movs	r0, #1
}
 8001116:	b003      	add	sp, #12
 8001118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800111c:	2321      	movs	r3, #33	; 0x21
 800111e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001122:	2310      	movs	r3, #16
 8001124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001128:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800112a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800112e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8001130:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001134:	b29b      	uxth	r3, r3
 8001136:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8001138:	6360      	str	r0, [r4, #52]	; 0x34
 800113a:	4b30      	ldr	r3, [pc, #192]	; (80011fc <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800113c:	d926      	bls.n	800118c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800113e:	22ff      	movs	r2, #255	; 0xff
 8001140:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001142:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001148:	4631      	mov	r1, r6
 800114a:	4620      	mov	r0, r4
 800114c:	f7ff fe41 	bl	8000dd2 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001150:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001152:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8001154:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001156:	462a      	mov	r2, r5
 8001158:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800115a:	b9fb      	cbnz	r3, 800119c <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800115c:	f7ff ff46 	bl	8000fec <I2C_WaitOnSTOPFlagUntilTimeout>
 8001160:	2800      	cmp	r0, #0
 8001162:	d1d7      	bne.n	8001114 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	2120      	movs	r1, #32
 8001168:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001170:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001174:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001178:	f022 0201 	bic.w	r2, r2, #1
 800117c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800117e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001182:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001186:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800118a:	e7c4      	b.n	8001116 <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 800118c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800118e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001190:	b292      	uxth	r2, r2
 8001192:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001194:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	e7d5      	b.n	8001148 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800119c:	f7ff fe9b 	bl	8000ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 80011a0:	2800      	cmp	r0, #0
 80011a2:	d1b7      	bne.n	8001114 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80011a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011a6:	6822      	ldr	r2, [r4, #0]
 80011a8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80011ac:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80011ae:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80011b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80011b2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80011b4:	3b01      	subs	r3, #1
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80011bc:	3a01      	subs	r2, #1
 80011be:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011c0:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80011c2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0c3      	beq.n	8001150 <HAL_I2C_Master_Transmit+0x78>
 80011c8:	2a00      	cmp	r2, #0
 80011ca:	d1c1      	bne.n	8001150 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011cc:	9500      	str	r5, [sp, #0]
 80011ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011d0:	2180      	movs	r1, #128	; 0x80
 80011d2:	4620      	mov	r0, r4
 80011d4:	f7ff fe17 	bl	8000e06 <I2C_WaitOnFlagUntilTimeout>
 80011d8:	2800      	cmp	r0, #0
 80011da:	d19b      	bne.n	8001114 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011de:	b29b      	uxth	r3, r3
 80011e0:	2bff      	cmp	r3, #255	; 0xff
 80011e2:	d903      	bls.n	80011ec <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011e4:	22ff      	movs	r2, #255	; 0xff
 80011e6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80011e8:	9000      	str	r0, [sp, #0]
 80011ea:	e7ab      	b.n	8001144 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 80011ec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011ee:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80011f0:	b292      	uxth	r2, r2
 80011f2:	8522      	strh	r2, [r4, #40]	; 0x28
 80011f4:	e7ce      	b.n	8001194 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 80011f6:	2002      	movs	r0, #2
 80011f8:	e78d      	b.n	8001116 <HAL_I2C_Master_Transmit+0x3e>
 80011fa:	bf00      	nop
 80011fc:	80002000 	.word	0x80002000

08001200 <HAL_I2C_Mem_Write>:
{
 8001200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001204:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001206:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800120a:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 800120c:	2b20      	cmp	r3, #32
{
 800120e:	4604      	mov	r4, r0
 8001210:	460f      	mov	r7, r1
 8001212:	9203      	str	r2, [sp, #12]
 8001214:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001218:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800121c:	f040 80a5 	bne.w	800136a <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 8001220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001222:	b113      	cbz	r3, 800122a <HAL_I2C_Mem_Write+0x2a>
 8001224:	f1ba 0f00 	cmp.w	sl, #0
 8001228:	d106      	bne.n	8001238 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800122a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800122e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001230:	2001      	movs	r0, #1
}
 8001232:	b005      	add	sp, #20
 8001234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001238:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800123c:	2b01      	cmp	r3, #1
 800123e:	f000 8094 	beq.w	800136a <HAL_I2C_Mem_Write+0x16a>
 8001242:	2501      	movs	r5, #1
 8001244:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001248:	f7ff fc7a 	bl	8000b40 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800124c:	2319      	movs	r3, #25
 800124e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001250:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001252:	462a      	mov	r2, r5
 8001254:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001258:	4620      	mov	r0, r4
 800125a:	f7ff fdd4 	bl	8000e06 <I2C_WaitOnFlagUntilTimeout>
 800125e:	4681      	mov	r9, r0
 8001260:	2800      	cmp	r0, #0
 8001262:	d1e5      	bne.n	8001230 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001264:	2321      	movs	r3, #33	; 0x21
 8001266:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800126a:	2340      	movs	r3, #64	; 0x40
 800126c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001272:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001274:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001276:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001278:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800127c:	9601      	str	r6, [sp, #4]
 800127e:	f8cd 8000 	str.w	r8, [sp]
 8001282:	465b      	mov	r3, fp
 8001284:	9a03      	ldr	r2, [sp, #12]
 8001286:	4639      	mov	r1, r7
 8001288:	4620      	mov	r0, r4
 800128a:	f7ff fe4b 	bl	8000f24 <I2C_RequestMemoryWrite>
 800128e:	b110      	cbz	r0, 8001296 <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 8001290:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8001294:	e7cc      	b.n	8001230 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001296:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001298:	b29b      	uxth	r3, r3
 800129a:	2bff      	cmp	r3, #255	; 0xff
 800129c:	d955      	bls.n	800134a <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800129e:	22ff      	movs	r2, #255	; 0xff
 80012a0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80012a2:	9000      	str	r0, [sp, #0]
 80012a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012a8:	4639      	mov	r1, r7
 80012aa:	4620      	mov	r0, r4
 80012ac:	f7ff fd91 	bl	8000dd2 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012b0:	4632      	mov	r2, r6
 80012b2:	4641      	mov	r1, r8
 80012b4:	4620      	mov	r0, r4
 80012b6:	f7ff fe0e 	bl	8000ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 80012ba:	2800      	cmp	r0, #0
 80012bc:	d1b8      	bne.n	8001230 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012c0:	6822      	ldr	r2, [r4, #0]
 80012c2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80012c6:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80012c8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80012ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80012cc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80012ce:	3b01      	subs	r3, #1
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80012d6:	3a01      	subs	r2, #1
 80012d8:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012da:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80012dc:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012de:	b1ab      	cbz	r3, 800130c <HAL_I2C_Mem_Write+0x10c>
 80012e0:	b9a2      	cbnz	r2, 800130c <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012e2:	9600      	str	r6, [sp, #0]
 80012e4:	4643      	mov	r3, r8
 80012e6:	2180      	movs	r1, #128	; 0x80
 80012e8:	4620      	mov	r0, r4
 80012ea:	f7ff fd8c 	bl	8000e06 <I2C_WaitOnFlagUntilTimeout>
 80012ee:	2800      	cmp	r0, #0
 80012f0:	d19e      	bne.n	8001230 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	2bff      	cmp	r3, #255	; 0xff
 80012f8:	d92f      	bls.n	800135a <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012fa:	22ff      	movs	r2, #255	; 0xff
 80012fc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80012fe:	9000      	str	r0, [sp, #0]
 8001300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001304:	4639      	mov	r1, r7
 8001306:	4620      	mov	r0, r4
 8001308:	f7ff fd63 	bl	8000dd2 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800130c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800130e:	b29b      	uxth	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1cd      	bne.n	80012b0 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001314:	4632      	mov	r2, r6
 8001316:	4641      	mov	r1, r8
 8001318:	4620      	mov	r0, r4
 800131a:	f7ff fe67 	bl	8000fec <I2C_WaitOnSTOPFlagUntilTimeout>
 800131e:	2800      	cmp	r0, #0
 8001320:	d186      	bne.n	8001230 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	2120      	movs	r1, #32
 8001326:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800132e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001332:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800133c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001340:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001344:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001348:	e773      	b.n	8001232 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800134a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800134c:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800134e:	b292      	uxth	r2, r2
 8001350:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	e7a6      	b.n	80012a8 <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 800135a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800135c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800135e:	b292      	uxth	r2, r2
 8001360:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	e7cc      	b.n	8001304 <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 800136a:	2002      	movs	r0, #2
 800136c:	e761      	b.n	8001232 <HAL_I2C_Mem_Write+0x32>
	...

08001370 <HAL_I2C_Mem_Read>:
{
 8001370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001374:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001376:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800137a:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 800137c:	2b20      	cmp	r3, #32
{
 800137e:	4604      	mov	r4, r0
 8001380:	460f      	mov	r7, r1
 8001382:	9203      	str	r2, [sp, #12]
 8001384:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001388:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800138c:	f040 80a9 	bne.w	80014e2 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8001390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001392:	b113      	cbz	r3, 800139a <HAL_I2C_Mem_Read+0x2a>
 8001394:	f1ba 0f00 	cmp.w	sl, #0
 8001398:	d106      	bne.n	80013a8 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800139a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80013a0:	2001      	movs	r0, #1
}
 80013a2:	b005      	add	sp, #20
 80013a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80013a8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	f000 8098 	beq.w	80014e2 <HAL_I2C_Mem_Read+0x172>
 80013b2:	2501      	movs	r5, #1
 80013b4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80013b8:	f7ff fbc2 	bl	8000b40 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013bc:	2319      	movs	r3, #25
 80013be:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80013c0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013c2:	462a      	mov	r2, r5
 80013c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c8:	4620      	mov	r0, r4
 80013ca:	f7ff fd1c 	bl	8000e06 <I2C_WaitOnFlagUntilTimeout>
 80013ce:	4681      	mov	r9, r0
 80013d0:	2800      	cmp	r0, #0
 80013d2:	d1e5      	bne.n	80013a0 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80013d4:	2322      	movs	r3, #34	; 0x22
 80013d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013da:	2340      	movs	r3, #64	; 0x40
 80013dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80013e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e2:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80013e4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 80013e6:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80013e8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013ec:	9601      	str	r6, [sp, #4]
 80013ee:	f8cd 8000 	str.w	r8, [sp]
 80013f2:	465b      	mov	r3, fp
 80013f4:	9a03      	ldr	r2, [sp, #12]
 80013f6:	4639      	mov	r1, r7
 80013f8:	4620      	mov	r0, r4
 80013fa:	f7ff fdc5 	bl	8000f88 <I2C_RequestMemoryRead>
 80013fe:	b110      	cbz	r0, 8001406 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8001400:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8001404:	e7cc      	b.n	80013a0 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001406:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001408:	b29b      	uxth	r3, r3
 800140a:	2bff      	cmp	r3, #255	; 0xff
 800140c:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <HAL_I2C_Mem_Read+0x178>)
 800140e:	d958      	bls.n	80014c2 <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001410:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001412:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001414:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001416:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800141a:	4639      	mov	r1, r7
 800141c:	4620      	mov	r0, r4
 800141e:	f7ff fcd8 	bl	8000dd2 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001422:	9600      	str	r6, [sp, #0]
 8001424:	4643      	mov	r3, r8
 8001426:	2200      	movs	r2, #0
 8001428:	2104      	movs	r1, #4
 800142a:	4620      	mov	r0, r4
 800142c:	f7ff fceb 	bl	8000e06 <I2C_WaitOnFlagUntilTimeout>
 8001430:	2800      	cmp	r0, #0
 8001432:	d1b5      	bne.n	80013a0 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001434:	6822      	ldr	r2, [r4, #0]
 8001436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001438:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800143a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800143c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800143e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001440:	3301      	adds	r3, #1
 8001442:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001444:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001446:	3b01      	subs	r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800144c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800144e:	3a01      	subs	r2, #1
 8001450:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001452:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001454:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001456:	b1ab      	cbz	r3, 8001484 <HAL_I2C_Mem_Read+0x114>
 8001458:	b9a2      	cbnz	r2, 8001484 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800145a:	9600      	str	r6, [sp, #0]
 800145c:	4643      	mov	r3, r8
 800145e:	2180      	movs	r1, #128	; 0x80
 8001460:	4620      	mov	r0, r4
 8001462:	f7ff fcd0 	bl	8000e06 <I2C_WaitOnFlagUntilTimeout>
 8001466:	2800      	cmp	r0, #0
 8001468:	d19a      	bne.n	80013a0 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800146a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800146c:	b29b      	uxth	r3, r3
 800146e:	2bff      	cmp	r3, #255	; 0xff
 8001470:	d92f      	bls.n	80014d2 <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001472:	22ff      	movs	r2, #255	; 0xff
 8001474:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001476:	9000      	str	r0, [sp, #0]
 8001478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800147c:	4639      	mov	r1, r7
 800147e:	4620      	mov	r0, r4
 8001480:	f7ff fca7 	bl	8000dd2 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001484:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001486:	b29b      	uxth	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1ca      	bne.n	8001422 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800148c:	4632      	mov	r2, r6
 800148e:	4641      	mov	r1, r8
 8001490:	4620      	mov	r0, r4
 8001492:	f7ff fdab 	bl	8000fec <I2C_WaitOnSTOPFlagUntilTimeout>
 8001496:	2800      	cmp	r0, #0
 8001498:	d182      	bne.n	80013a0 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	2120      	movs	r1, #32
 800149e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80014a6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80014aa:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80014ae:	f022 0201 	bic.w	r2, r2, #1
 80014b2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80014b4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80014b8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014bc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80014c0:	e76f      	b.n	80013a2 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80014c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80014c4:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80014c6:	b292      	uxth	r2, r2
 80014c8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80014ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	e7a3      	b.n	800141a <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 80014d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014d4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80014d6:	b292      	uxth	r2, r2
 80014d8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	e7cc      	b.n	800147c <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 80014e2:	2002      	movs	r0, #2
 80014e4:	e75d      	b.n	80013a2 <HAL_I2C_Mem_Read+0x32>
 80014e6:	bf00      	nop
 80014e8:	80002400 	.word	0x80002400

080014ec <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ec:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	2a20      	cmp	r2, #32
{
 80014f4:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80014f6:	d11d      	bne.n	8001534 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014f8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d019      	beq.n	8001534 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001500:	2324      	movs	r3, #36	; 0x24
 8001502:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001506:	6803      	ldr	r3, [r0, #0]
 8001508:	681c      	ldr	r4, [r3, #0]
 800150a:	f024 0401 	bic.w	r4, r4, #1
 800150e:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001510:	681c      	ldr	r4, [r3, #0]
 8001512:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001516:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001518:	681c      	ldr	r4, [r3, #0]
 800151a:	4321      	orrs	r1, r4
 800151c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800151e:	6819      	ldr	r1, [r3, #0]
 8001520:	f041 0101 	orr.w	r1, r1, #1
 8001524:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001526:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001528:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800152c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001530:	4618      	mov	r0, r3
 8001532:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001534:	2002      	movs	r0, #2
  }
}
 8001536:	bd10      	pop	{r4, pc}

08001538 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001538:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800153a:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800153e:	b2e4      	uxtb	r4, r4
 8001540:	2c20      	cmp	r4, #32
 8001542:	d11c      	bne.n	800157e <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001544:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001548:	2b01      	cmp	r3, #1
 800154a:	d018      	beq.n	800157e <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800154c:	2324      	movs	r3, #36	; 0x24
 800154e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001552:	6803      	ldr	r3, [r0, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	f022 0201 	bic.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800155c:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800155e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001562:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001566:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	f042 0201 	orr.w	r2, r2, #1
 800156e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001570:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001572:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001576:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800157a:	4618      	mov	r0, r3
 800157c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800157e:	2002      	movs	r0, #2
  }
}
 8001580:	bd10      	pop	{r4, pc}
	...

08001584 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim: LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001584:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcfgr = 0;

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 8001586:	4604      	mov	r4, r0
 8001588:	2800      	cmp	r0, #0
 800158a:	d047      	beq.n	800161c <HAL_LPTIM_Init+0x98>

#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 800158c:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8001590:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001594:	b91b      	cbnz	r3, 800159e <HAL_LPTIM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001596:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800159a:	f003 feff 	bl	800539c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800159e:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80015a0:	6820      	ldr	r0, [r4, #0]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 80015a2:	6865      	ldr	r5, [r4, #4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80015a4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  tmpcfgr = hlptim->Instance->CFGR;
 80015a8:	68c2      	ldr	r2, [r0, #12]
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 80015aa:	6961      	ldr	r1, [r4, #20]
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80015ac:	4e1c      	ldr	r6, [pc, #112]	; (8001620 <HAL_LPTIM_Init+0x9c>)
  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 80015ae:	2d01      	cmp	r5, #1
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 80015b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80015b4:	bf08      	it	eq
 80015b6:	f022 021e 	biceq.w	r2, r2, #30
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 80015ba:	4299      	cmp	r1, r3
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80015bc:	bf1c      	itt	ne
 80015be:	f422 4260 	bicne.w	r2, r2, #57344	; 0xe000
 80015c2:	f022 02c0 	bicne.w	r2, r2, #192	; 0xc0
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80015c6:	4016      	ands	r6, r2
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80015c8:	68a2      	ldr	r2, [r4, #8]
 80015ca:	ea45 0302 	orr.w	r3, r5, r2
              hlptim->Init.Clock.Prescaler |
 80015ce:	6a22      	ldr	r2, [r4, #32]
 80015d0:	4313      	orrs	r3, r2
              hlptim->Init.OutputPolarity  |
 80015d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015d4:	4313      	orrs	r3, r2
              hlptim->Init.UpdateMode      |
 80015d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
              hlptim->Init.CounterSource);

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 80015d8:	2d01      	cmp	r5, #1
              hlptim->Init.UpdateMode      |
 80015da:	ea43 0302 	orr.w	r3, r3, r2
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 80015de:	bf04      	itt	eq
 80015e0:	6925      	ldreq	r5, [r4, #16]
 80015e2:	68e2      	ldreq	r2, [r4, #12]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80015e4:	ea43 0306 	orr.w	r3, r3, r6
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 80015e8:	bf04      	itt	eq
 80015ea:	432a      	orreq	r2, r5
 80015ec:	4313      	orreq	r3, r2
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 80015ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015f2:	4291      	cmp	r1, r2
 80015f4:	d004      	beq.n	8001600 <HAL_LPTIM_Init+0x7c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80015f6:	69a2      	ldr	r2, [r4, #24]
 80015f8:	4311      	orrs	r1, r2
                hlptim->Init.Trigger.ActiveEdge |
 80015fa:	69e2      	ldr	r2, [r4, #28]
 80015fc:	4311      	orrs	r1, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80015fe:	430b      	orrs	r3, r1
                hlptim->Init.Trigger.SampleTime);
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001600:	60c3      	str	r3, [r0, #12]

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_LPTIM_Init+0xa0>)
 8001604:	4298      	cmp	r0, r3
    /* Check LPTIM1 Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));

    /* Configure LPTIM1 Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001606:	bf08      	it	eq
 8001608:	6b22      	ldreq	r2, [r4, #48]	; 0x30
 800160a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800160c:	bf08      	it	eq
 800160e:	4313      	orreq	r3, r2
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8001610:	6203      	str	r3, [r0, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001612:	2301      	movs	r3, #1
 8001614:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8001618:	2000      	movs	r0, #0
 800161a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800161c:	2001      	movs	r0, #1
}
 800161e:	bd70      	pop	{r4, r5, r6, pc}
 8001620:	ff19f1fe 	.word	0xff19f1fe
 8001624:	40007c00 	.word	0x40007c00

08001628 <HAL_LPTIM_CompareMatchCallback>:
 8001628:	4770      	bx	lr

0800162a <HAL_LPTIM_AutoReloadMatchCallback>:
 800162a:	4770      	bx	lr

0800162c <HAL_LPTIM_TriggerCallback>:
 800162c:	4770      	bx	lr

0800162e <HAL_LPTIM_CompareWriteCallback>:
 800162e:	4770      	bx	lr

08001630 <HAL_LPTIM_AutoReloadWriteCallback>:
 8001630:	4770      	bx	lr

08001632 <HAL_LPTIM_DirectionUpCallback>:
 8001632:	4770      	bx	lr

08001634 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001634:	4770      	bx	lr

08001636 <HAL_LPTIM_IRQHandler>:
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001636:	6803      	ldr	r3, [r0, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	07d1      	lsls	r1, r2, #31
{
 800163c:	b510      	push	{r4, lr}
 800163e:	4604      	mov	r4, r0
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001640:	d506      	bpl.n	8001650 <HAL_LPTIM_IRQHandler+0x1a>
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	07d2      	lsls	r2, r2, #31
 8001646:	d503      	bpl.n	8001650 <HAL_LPTIM_IRQHandler+0x1a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8001648:	2201      	movs	r2, #1
 800164a:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800164c:	f7ff ffec 	bl	8001628 <HAL_LPTIM_CompareMatchCallback>
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8001650:	6823      	ldr	r3, [r4, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	0790      	lsls	r0, r2, #30
 8001656:	d507      	bpl.n	8001668 <HAL_LPTIM_IRQHandler+0x32>
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	0791      	lsls	r1, r2, #30
 800165c:	d504      	bpl.n	8001668 <HAL_LPTIM_IRQHandler+0x32>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800165e:	2202      	movs	r2, #2
 8001660:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8001662:	4620      	mov	r0, r4
 8001664:	f7ff ffe1 	bl	800162a <HAL_LPTIM_AutoReloadMatchCallback>
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8001668:	6823      	ldr	r3, [r4, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	0752      	lsls	r2, r2, #29
 800166e:	d507      	bpl.n	8001680 <HAL_LPTIM_IRQHandler+0x4a>
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	0750      	lsls	r0, r2, #29
 8001674:	d504      	bpl.n	8001680 <HAL_LPTIM_IRQHandler+0x4a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8001676:	2204      	movs	r2, #4
 8001678:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_TriggerCallback(hlptim);
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff ffd6 	bl	800162c <HAL_LPTIM_TriggerCallback>
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8001680:	6823      	ldr	r3, [r4, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	0711      	lsls	r1, r2, #28
 8001686:	d507      	bpl.n	8001698 <HAL_LPTIM_IRQHandler+0x62>
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	0712      	lsls	r2, r2, #28
 800168c:	d504      	bpl.n	8001698 <HAL_LPTIM_IRQHandler+0x62>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800168e:	2208      	movs	r2, #8
 8001690:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8001692:	4620      	mov	r0, r4
 8001694:	f7ff ffcb 	bl	800162e <HAL_LPTIM_CompareWriteCallback>
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	06d0      	lsls	r0, r2, #27
 800169e:	d507      	bpl.n	80016b0 <HAL_LPTIM_IRQHandler+0x7a>
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	06d1      	lsls	r1, r2, #27
 80016a4:	d504      	bpl.n	80016b0 <HAL_LPTIM_IRQHandler+0x7a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80016a6:	2210      	movs	r2, #16
 80016a8:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80016aa:	4620      	mov	r0, r4
 80016ac:	f7ff ffc0 	bl	8001630 <HAL_LPTIM_AutoReloadWriteCallback>
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80016b0:	6823      	ldr	r3, [r4, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	0692      	lsls	r2, r2, #26
 80016b6:	d507      	bpl.n	80016c8 <HAL_LPTIM_IRQHandler+0x92>
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	0690      	lsls	r0, r2, #26
 80016bc:	d504      	bpl.n	80016c8 <HAL_LPTIM_IRQHandler+0x92>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80016be:	2220      	movs	r2, #32
 80016c0:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80016c2:	4620      	mov	r0, r4
 80016c4:	f7ff ffb5 	bl	8001632 <HAL_LPTIM_DirectionUpCallback>
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	0651      	lsls	r1, r2, #25
 80016ce:	d507      	bpl.n	80016e0 <HAL_LPTIM_IRQHandler+0xaa>
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	0652      	lsls	r2, r2, #25
 80016d4:	d504      	bpl.n	80016e0 <HAL_LPTIM_IRQHandler+0xaa>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80016d6:	2240      	movs	r2, #64	; 0x40
 80016d8:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80016da:	4620      	mov	r0, r4
 80016dc:	f7ff ffaa 	bl	8001634 <HAL_LPTIM_DirectionDownCallback>
 80016e0:	bd10      	pop	{r4, pc}

080016e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016e6:	4604      	mov	r4, r0
{
 80016e8:	b086      	sub	sp, #24
  if (hpcd == NULL)
 80016ea:	2800      	cmp	r0, #0
 80016ec:	d06b      	beq.n	80017c6 <HAL_PCD_Init+0xe4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016ee:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 80016f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016f6:	b91b      	cbnz	r3, 8001700 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016f8:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016fc:	f004 fbb8 	bl	8005e70 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001700:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001702:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8001704:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001708:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 800170c:	f002 f9bf 	bl	8003a8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001712:	466e      	mov	r6, sp
 8001714:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001716:	682b      	ldr	r3, [r5, #0]
 8001718:	6033      	str	r3, [r6, #0]
 800171a:	f104 0804 	add.w	r8, r4, #4
 800171e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001722:	6820      	ldr	r0, [r4, #0]
 8001724:	f002 f9a1 	bl	8003a6a <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001728:	2100      	movs	r1, #0
 800172a:	6820      	ldr	r0, [r4, #0]
 800172c:	f002 f9b9 	bl	8003aa2 <USB_SetCurrentMode>
 8001730:	2100      	movs	r1, #0
 8001732:	4622      	mov	r2, r4
 8001734:	4623      	mov	r3, r4
 8001736:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800173a:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800173c:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 800173e:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001742:	86d9      	strh	r1, [r3, #54]	; 0x36
 8001744:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 8001746:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 8001748:	f883 6029 	strb.w	r6, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800174c:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8001750:	6398      	str	r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001752:	63d8      	str	r0, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8001754:	6418      	str	r0, [r3, #64]	; 0x40
 8001756:	f103 0320 	add.w	r3, r3, #32
  for (i = 0U; i < 15U; i++)
 800175a:	d1f0      	bne.n	800173e <HAL_PCD_Init+0x5c>
 800175c:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800175e:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 8001760:	f882 3228 	strb.w	r3, [r2, #552]	; 0x228
 8001764:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 8001766:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 8001768:	f882 7229 	strb.w	r7, [r2, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800176c:	f882 722b 	strb.w	r7, [r2, #555]	; 0x22b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001770:	f8c2 7238 	str.w	r7, [r2, #568]	; 0x238
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001774:	f8c2 723c 	str.w	r7, [r2, #572]	; 0x23c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001778:	f8c2 7240 	str.w	r7, [r2, #576]	; 0x240
 800177c:	f102 0220 	add.w	r2, r2, #32
  for (i = 0U; i < 15U; i++)
 8001780:	d1ee      	bne.n	8001760 <HAL_PCD_Init+0x7e>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001784:	466e      	mov	r6, sp
 8001786:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001788:	682b      	ldr	r3, [r5, #0]
 800178a:	6033      	str	r3, [r6, #0]
 800178c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001790:	6820      	ldr	r0, [r4, #0]
 8001792:	f002 f988 	bl	8003aa6 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8001796:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8001798:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800179c:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017a0:	69e3      	ldr	r3, [r4, #28]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d102      	bne.n	80017ac <HAL_PCD_Init+0xca>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017a6:	4620      	mov	r0, r4
 80017a8:	f000 fbb0 	bl	8001f0c <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 80017ac:	6a23      	ldr	r3, [r4, #32]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d102      	bne.n	80017b8 <HAL_PCD_Init+0xd6>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 80017b2:	4620      	mov	r0, r4
 80017b4:	f000 fb96 	bl	8001ee4 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80017b8:	6820      	ldr	r0, [r4, #0]
 80017ba:	f002 fc60 	bl	800407e <USB_DevDisconnect>

  return HAL_OK;
 80017be:	2000      	movs	r0, #0
}
 80017c0:	b006      	add	sp, #24
 80017c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80017c6:	2001      	movs	r0, #1
 80017c8:	e7fa      	b.n	80017c0 <HAL_PCD_Init+0xde>

080017ca <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80017ca:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 80017ce:	2b01      	cmp	r3, #1
{
 80017d0:	b510      	push	{r4, lr}
 80017d2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80017d4:	d00c      	beq.n	80017f0 <HAL_PCD_Start+0x26>
 80017d6:	2301      	movs	r3, #1
 80017d8:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  (void)USB_DevConnect(hpcd->Instance);
 80017dc:	6800      	ldr	r0, [r0, #0]
 80017de:	f002 fc43 	bl	8004068 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80017e2:	6820      	ldr	r0, [r4, #0]
 80017e4:	f002 f948 	bl	8003a78 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80017e8:	2000      	movs	r0, #0
 80017ea:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80017ee:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80017f0:	2002      	movs	r0, #2
}
 80017f2:	bd10      	pop	{r4, pc}

080017f4 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80017f4:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 80017f8:	2a01      	cmp	r2, #1
{
 80017fa:	b510      	push	{r4, lr}
 80017fc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80017fe:	d00b      	beq.n	8001818 <HAL_PCD_SetAddress+0x24>
 8001800:	2201      	movs	r2, #1
 8001802:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 8001806:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800180a:	6800      	ldr	r0, [r0, #0]
 800180c:	f002 fc26 	bl	800405c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001810:	2000      	movs	r0, #0
 8001812:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 8001816:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001818:	2002      	movs	r0, #2
  return HAL_OK;
}
 800181a:	bd10      	pop	{r4, pc}

0800181c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800181c:	b570      	push	{r4, r5, r6, lr}
 800181e:	4604      	mov	r4, r0
 8001820:	f001 000f 	and.w	r0, r1, #15
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001824:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001828:	b2c5      	uxtb	r5, r0
 800182a:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800182e:	fb01 4105 	mla	r1, r1, r5, r4
    ep->is_in = 1U;
 8001832:	bf15      	itete	ne
 8001834:	eb04 1545 	addne.w	r5, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
    ep->is_in = 0U;
 8001838:	eb04 1545 	addeq.w	r5, r4, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800183c:	3128      	addne	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 800183e:	f501 710a 	addeq.w	r1, r1, #552	; 0x228
    ep->is_in = 1U;
 8001842:	bf15      	itete	ne
 8001844:	2601      	movne	r6, #1
    ep->is_in = 0U;
 8001846:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8001848:	f885 6029 	strbne.w	r6, [r5, #41]	; 0x29
    ep->is_in = 0U;
 800184c:	f885 6229 	strbeq.w	r6, [r5, #553]	; 0x229
  }

  ep->num = ep_addr & 0xFU;
  ep->maxpacket = ep_mps;
 8001850:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8001852:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8001854:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & 0xFU;
 8001856:	b2c0      	uxtb	r0, r0
 8001858:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 800185a:	b102      	cbz	r2, 800185e <HAL_PCD_EP_Open+0x42>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800185c:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800185e:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8001860:	bf04      	itt	eq
 8001862:	2300      	moveq	r3, #0
 8001864:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8001866:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
 800186a:	2b01      	cmp	r3, #1
 800186c:	d009      	beq.n	8001882 <HAL_PCD_EP_Open+0x66>
 800186e:	2301      	movs	r3, #1
 8001870:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001874:	6820      	ldr	r0, [r4, #0]
 8001876:	f002 f933 	bl	8003ae0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800187a:	2000      	movs	r0, #0
 800187c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428

  return ret;
 8001880:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8001882:	2002      	movs	r0, #2
}
 8001884:	bd70      	pop	{r4, r5, r6, pc}

08001886 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001886:	f001 030f 	and.w	r3, r1, #15
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800188a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800188e:	b2da      	uxtb	r2, r3
 8001890:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001894:	fb01 0102 	mla	r1, r1, r2, r0
{
 8001898:	b510      	push	{r4, lr}
 800189a:	4604      	mov	r4, r0
    ep->is_in = 1U;
 800189c:	bf19      	ittee	ne
 800189e:	eb00 1242 	addne.w	r2, r0, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80018a2:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80018a4:	f501 710a 	addeq.w	r1, r1, #552	; 0x228
    ep->is_in = 0U;
 80018a8:	eb04 1242 	addeq.w	r2, r4, r2, lsl #5
    ep->is_in = 1U;
 80018ac:	bf15      	itete	ne
 80018ae:	2001      	movne	r0, #1
    ep->is_in = 0U;
 80018b0:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 80018b2:	f882 0029 	strbne.w	r0, [r2, #41]	; 0x29
    ep->is_in = 0U;
 80018b6:	f882 0229 	strbeq.w	r0, [r2, #553]	; 0x229
  }
  ep->num   = ep_addr & 0xFU;
 80018ba:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 80018bc:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d009      	beq.n	80018d8 <HAL_PCD_EP_Close+0x52>
 80018c4:	2301      	movs	r3, #1
 80018c6:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018ca:	6820      	ldr	r0, [r4, #0]
 80018cc:	f002 fa7e 	bl	8003dcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018d0:	2000      	movs	r0, #0
 80018d2:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80018d6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80018d8:	2002      	movs	r0, #2
}
 80018da:	bd10      	pop	{r4, pc}

080018dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018dc:	b570      	push	{r4, r5, r6, lr}
 80018de:	f001 010f 	and.w	r1, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0xFU];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018e2:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 80018e6:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80018e8:	2500      	movs	r5, #0
  ep->is_in = 0U;
  ep->num = ep_addr & 0xFU;
 80018ea:	f886 1228 	strb.w	r1, [r6, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80018ee:	f504 710a 	add.w	r1, r4, #552	; 0x228
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018f2:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80018f4:	f8c6 223c 	str.w	r2, [r6, #572]	; 0x23c
  ep->xfer_len = len;
 80018f8:	f8c6 3240 	str.w	r3, [r6, #576]	; 0x240
  ep->xfer_count = 0U;
 80018fc:	f8c6 5244 	str.w	r5, [r6, #580]	; 0x244
  ep->is_in = 0U;
 8001900:	f886 5229 	strb.w	r5, [r6, #553]	; 0x229
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001904:	6800      	ldr	r0, [r0, #0]
 8001906:	f002 fbdb 	bl	80040c0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 800190a:	4628      	mov	r0, r5
 800190c:	bd70      	pop	{r4, r5, r6, pc}

0800190e <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return (uint16_t)hpcd->OUT_ep[ep_addr & 0xFU].xfer_count;
 800190e:	f001 010f 	and.w	r1, r1, #15
 8001912:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8001916:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 800191a:	4770      	bx	lr

0800191c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800191c:	b570      	push	{r4, r5, r6, lr}
 800191e:	f001 010f 	and.w	r1, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0xFU];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001922:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8001926:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
 8001928:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_count = 0U;
 800192a:	2600      	movs	r6, #0
  ep->is_in = 1U;
 800192c:	2301      	movs	r3, #1
  ep->num = ep_addr & 0xFU;
 800192e:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001932:	f104 0128 	add.w	r1, r4, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001936:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8001938:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_count = 0U;
 800193a:	646e      	str	r6, [r5, #68]	; 0x44
  ep->is_in = 1U;
 800193c:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001940:	6800      	ldr	r0, [r0, #0]
 8001942:	f002 fbbd 	bl	80040c0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001946:	4630      	mov	r0, r6
 8001948:	bd70      	pop	{r4, r5, r6, pc}
	...

0800194c <HAL_PCD_IRQHandler>:
{
 800194c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001950:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001952:	6800      	ldr	r0, [r0, #0]
 8001954:	f002 fb9b 	bl	800408e <USB_ReadInterrupts>
 8001958:	0400      	lsls	r0, r0, #16
 800195a:	f100 8230 	bmi.w	8001dbe <HAL_PCD_IRQHandler+0x472>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800195e:	6820      	ldr	r0, [r4, #0]
 8001960:	f002 fb95 	bl	800408e <USB_ReadInterrupts>
 8001964:	0541      	lsls	r1, r0, #21
 8001966:	d50f      	bpl.n	8001988 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001968:	6822      	ldr	r2, [r4, #0]
 800196a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800196e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001972:	041b      	lsls	r3, r3, #16
 8001974:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 8001976:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001978:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800197c:	f004 fabf 	bl	8005efe <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001980:	2100      	movs	r1, #0
 8001982:	4620      	mov	r0, r4
 8001984:	f7ff ff36 	bl	80017f4 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001988:	6820      	ldr	r0, [r4, #0]
 800198a:	f002 fb80 	bl	800408e <USB_ReadInterrupts>
 800198e:	0443      	lsls	r3, r0, #17
 8001990:	d508      	bpl.n	80019a4 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001992:	6822      	ldr	r2, [r4, #0]
 8001994:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800199c:	041b      	lsls	r3, r3, #16
 800199e:	0c1b      	lsrs	r3, r3, #16
 80019a0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80019a4:	6820      	ldr	r0, [r4, #0]
 80019a6:	f002 fb72 	bl	800408e <USB_ReadInterrupts>
 80019aa:	0487      	lsls	r7, r0, #18
 80019ac:	d508      	bpl.n	80019c0 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80019ae:	6822      	ldr	r2, [r4, #0]
 80019b0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80019b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019b8:	041b      	lsls	r3, r3, #16
 80019ba:	0c1b      	lsrs	r3, r3, #16
 80019bc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80019c0:	6820      	ldr	r0, [r4, #0]
 80019c2:	f002 fb64 	bl	800408e <USB_ReadInterrupts>
 80019c6:	04c6      	lsls	r6, r0, #19
 80019c8:	d526      	bpl.n	8001a18 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80019ca:	6822      	ldr	r2, [r4, #0]
 80019cc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80019d0:	f023 0304 	bic.w	r3, r3, #4
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	0c1b      	lsrs	r3, r3, #16
 80019d8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80019dc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80019e0:	f023 0308 	bic.w	r3, r3, #8
 80019e4:	041b      	lsls	r3, r3, #16
 80019e6:	0c1b      	lsrs	r3, r3, #16
 80019e8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 80019ec:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d105      	bne.n	8001a00 <HAL_PCD_IRQHandler+0xb4>
      hpcd->LPM_State = LPM_L0;
 80019f4:	2100      	movs	r1, #0
 80019f6:	f884 1460 	strb.w	r1, [r4, #1120]	; 0x460
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019fa:	4620      	mov	r0, r4
 80019fc:	f004 fb7e 	bl	80060fc <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8001a00:	4620      	mov	r0, r4
 8001a02:	f004 fa99 	bl	8005f38 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a06:	6822      	ldr	r2, [r4, #0]
 8001a08:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001a0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a10:	041b      	lsls	r3, r3, #16
 8001a12:	0c1b      	lsrs	r3, r3, #16
 8001a14:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001a18:	6820      	ldr	r0, [r4, #0]
 8001a1a:	f002 fb38 	bl	800408e <USB_ReadInterrupts>
 8001a1e:	0505      	lsls	r5, r0, #20
 8001a20:	d51d      	bpl.n	8001a5e <HAL_PCD_IRQHandler+0x112>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001a22:	6820      	ldr	r0, [r4, #0]
 8001a24:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	f043 0308 	orr.w	r3, r3, #8
 8001a2e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a32:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001a36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a3a:	041b      	lsls	r3, r3, #16
 8001a3c:	0c1b      	lsrs	r3, r3, #16
 8001a3e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001a42:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8001a50:	f002 fb1d 	bl	800408e <USB_ReadInterrupts>
 8001a54:	04c0      	lsls	r0, r0, #19
 8001a56:	d402      	bmi.n	8001a5e <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SuspendCallback(hpcd);
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f004 fa5d 	bl	8005f18 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001a5e:	6820      	ldr	r0, [r4, #0]
 8001a60:	f002 fb15 	bl	800408e <USB_ReadInterrupts>
 8001a64:	0601      	lsls	r1, r0, #24
 8001a66:	d529      	bpl.n	8001abc <HAL_PCD_IRQHandler+0x170>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001a6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a72:	0412      	lsls	r2, r2, #16
 8001a74:	0c12      	lsrs	r2, r2, #16
 8001a76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001a7a:	f894 2460 	ldrb.w	r2, [r4, #1120]	; 0x460
 8001a7e:	2a00      	cmp	r2, #0
 8001a80:	f040 81a2 	bne.w	8001dc8 <HAL_PCD_IRQHandler+0x47c>
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001a84:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001a88:	b292      	uxth	r2, r2
 8001a8a:	f042 0204 	orr.w	r2, r2, #4
 8001a8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001a92:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001a96:	b292      	uxth	r2, r2
 8001a98:	f042 0208 	orr.w	r2, r2, #8
 8001a9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001aa0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001aa4:	f3c3 038d 	ubfx	r3, r3, #2, #14
      hpcd->LPM_State = LPM_L1;
 8001aa8:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001aaa:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 8001aae:	f884 1460 	strb.w	r1, [r4, #1120]	; 0x460
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001ab2:	f8c4 3464 	str.w	r3, [r4, #1124]	; 0x464
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f004 fb20 	bl	80060fc <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001abc:	6820      	ldr	r0, [r4, #0]
 8001abe:	f002 fae6 	bl	800408e <USB_ReadInterrupts>
 8001ac2:	0582      	lsls	r2, r0, #22
 8001ac4:	d50b      	bpl.n	8001ade <HAL_PCD_IRQHandler+0x192>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ac6:	6822      	ldr	r2, [r4, #0]
 8001ac8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001acc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ad0:	041b      	lsls	r3, r3, #16
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f004 fa0c 	bl	8005ef6 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001ade:	6820      	ldr	r0, [r4, #0]
 8001ae0:	f002 fad5 	bl	800408e <USB_ReadInterrupts>
 8001ae4:	05c3      	lsls	r3, r0, #23
 8001ae6:	d508      	bpl.n	8001afa <HAL_PCD_IRQHandler+0x1ae>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ae8:	6822      	ldr	r2, [r4, #0]
 8001aea:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001aee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001af2:	041b      	lsls	r3, r3, #16
 8001af4:	0c1b      	lsrs	r3, r3, #16
 8001af6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8001afa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 8001afe:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8001b02:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 8001b04:	f011 070f 	ands.w	r7, r1, #15
 8001b08:	f040 80a5 	bne.w	8001c56 <HAL_PCD_IRQHandler+0x30a>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b0c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b0e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b12:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b14:	d129      	bne.n	8001b6a <HAL_PCD_IRQHandler+0x21e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b16:	ea03 030a 	and.w	r3, r3, sl
 8001b1a:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b1c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001b20:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001b24:	f200 4002 	addw	r0, r0, #1026	; 0x402
 8001b28:	fa10 f083 	uxtah	r0, r0, r3
 8001b2c:	f830 3032 	ldrh.w	r3, [r0, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 8001b30:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b36:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001b38:	4413      	add	r3, r2
 8001b3a:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f004 f9d3 	bl	8005ee8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b42:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001b46:	b153      	cbz	r3, 8001b5e <HAL_PCD_IRQHandler+0x212>
 8001b48:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b4a:	b942      	cbnz	r2, 8001b5e <HAL_PCD_IRQHandler+0x212>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b4c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001b50:	6821      	ldr	r1, [r4, #0]
 8001b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b56:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b5a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b5e:	6820      	ldr	r0, [r4, #0]
 8001b60:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001b64:	041a      	lsls	r2, r3, #16
 8001b66:	d4ca      	bmi.n	8001afe <HAL_PCD_IRQHandler+0x1b2>
 8001b68:	e6f9      	b.n	800195e <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b6a:	051a      	lsls	r2, r3, #20
 8001b6c:	d51e      	bpl.n	8001bac <HAL_PCD_IRQHandler+0x260>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b6e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001b72:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8001b76:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8001b7a:	fa11 f383 	uxtah	r3, r1, r3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b7e:	f504 6186 	add.w	r1, r4, #1072	; 0x430
 8001b82:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8001b86:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
 8001b8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b8e:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b92:	f002 fb7d 	bl	8004290 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b96:	6822      	ldr	r2, [r4, #0]
 8001b98:	8813      	ldrh	r3, [r2, #0]
 8001b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b9e:	051b      	lsls	r3, r3, #20
 8001ba0:	0d1b      	lsrs	r3, r3, #20
 8001ba2:	8013      	strh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f004 f991 	bl	8005ecc <HAL_PCD_SetupStageCallback>
 8001baa:	e7d8      	b.n	8001b5e <HAL_PCD_IRQHandler+0x212>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bac:	041f      	lsls	r7, r3, #16
 8001bae:	d5d6      	bpl.n	8001b5e <HAL_PCD_IRQHandler+0x212>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bb0:	8803      	ldrh	r3, [r0, #0]
 8001bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bb6:	051b      	lsls	r3, r3, #20
 8001bb8:	0d1b      	lsrs	r3, r3, #20
 8001bba:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bbc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001bc0:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8001bc4:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8001bc8:	fa11 f383 	uxtah	r3, r1, r3
 8001bcc:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8001bd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bd4:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244

          if (ep->xfer_count != 0U)
 8001bd8:	b163      	cbz	r3, 8001bf4 <HAL_PCD_IRQHandler+0x2a8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bda:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
 8001bde:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8001be2:	f002 fb55 	bl	8004290 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001be6:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8001bea:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8001bee:	4413      	add	r3, r2
 8001bf0:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f004 f96e 	bl	8005ed8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001bfc:	6822      	ldr	r2, [r4, #0]
 8001bfe:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
 8001c02:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001c06:	f202 4506 	addw	r5, r2, #1030	; 0x406
 8001c0a:	b289      	uxth	r1, r1
 8001c0c:	b953      	cbnz	r3, 8001c24 <HAL_PCD_IRQHandler+0x2d8>
 8001c0e:	5a6b      	ldrh	r3, [r5, r1]
 8001c10:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001c14:	049b      	lsls	r3, r3, #18
 8001c16:	0c9b      	lsrs	r3, r3, #18
 8001c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c20:	526b      	strh	r3, [r5, r1]
 8001c22:	e007      	b.n	8001c34 <HAL_PCD_IRQHandler+0x2e8>
 8001c24:	2b3d      	cmp	r3, #61	; 0x3d
 8001c26:	d811      	bhi.n	8001c4c <HAL_PCD_IRQHandler+0x300>
 8001c28:	0858      	lsrs	r0, r3, #1
 8001c2a:	07de      	lsls	r6, r3, #31
 8001c2c:	bf48      	it	mi
 8001c2e:	3001      	addmi	r0, #1
 8001c30:	0280      	lsls	r0, r0, #10
 8001c32:	5268      	strh	r0, [r5, r1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c34:	8813      	ldrh	r3, [r2, #0]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	ea03 030b 	and.w	r3, r3, fp
 8001c3c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c48:	8013      	strh	r3, [r2, #0]
 8001c4a:	e788      	b.n	8001b5e <HAL_PCD_IRQHandler+0x212>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c4c:	4860      	ldr	r0, [pc, #384]	; (8001dd0 <HAL_PCD_IRQHandler+0x484>)
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	ea40 2383 	orr.w	r3, r0, r3, lsl #10
 8001c54:	e7e4      	b.n	8001c20 <HAL_PCD_IRQHandler+0x2d4>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c56:	b23e      	sxth	r6, r7
 8001c58:	f830 9026 	ldrh.w	r9, [r0, r6, lsl #2]
 8001c5c:	fa1f f989 	uxth.w	r9, r9
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c60:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 8001c64:	d03e      	beq.n	8001ce4 <HAL_PCD_IRQHandler+0x398>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c66:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8001c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c6e:	051b      	lsls	r3, r3, #20
 8001c70:	0d1b      	lsrs	r3, r3, #20
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001c72:	ea4f 1847 	mov.w	r8, r7, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c76:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8001c7a:	eb04 0108 	add.w	r1, r4, r8
 8001c7e:	f891 3234 	ldrb.w	r3, [r1, #564]	; 0x234
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d157      	bne.n	8001d36 <HAL_PCD_IRQHandler+0x3ea>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c86:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001c8a:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8001c8e:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001c92:	fa15 f383 	uxtah	r3, r5, r3
 8001c96:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8001c9a:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8001c9e:	b135      	cbz	r5, 8001cae <HAL_PCD_IRQHandler+0x362>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ca0:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
 8001ca4:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8001ca8:	462b      	mov	r3, r5
 8001caa:	f002 faf1 	bl	8004290 <USB_ReadPMA>
 8001cae:	eb04 1346 	add.w	r3, r4, r6, lsl #5
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
        ep->xfer_buff += count;
 8001cb2:	eb04 0108 	add.w	r1, r4, r8
        ep->xfer_count += count;
 8001cb6:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8001cba:	442a      	add	r2, r5
 8001cbc:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        ep->xfer_buff += count;
 8001cc0:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
 8001cc4:	442a      	add	r2, r5
 8001cc6:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001cca:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001cce:	b11b      	cbz	r3, 8001cd8 <HAL_PCD_IRQHandler+0x38c>
 8001cd0:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8001cd4:	4285      	cmp	r5, r0
 8001cd6:	d269      	bcs.n	8001dac <HAL_PCD_IRQHandler+0x460>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001cd8:	44a0      	add	r8, r4
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f898 1228 	ldrb.w	r1, [r8, #552]	; 0x228
 8001ce0:	f004 f8fa 	bl	8005ed8 <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ce4:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001ce8:	f43f af39 	beq.w	8001b5e <HAL_PCD_IRQHandler+0x212>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8001cf2:	b292      	uxth	r2, r2
 8001cf4:	ea02 020a 	and.w	r2, r2, sl
 8001cf8:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cfc:	eb04 1747 	add.w	r7, r4, r7, lsl #5
 8001d00:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001d04:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001d08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d0c:	fa13 f382 	uxtah	r3, r3, r2
 8001d10:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8001d14:	f833 2031 	ldrh.w	r2, [r3, r1, lsl #3]
 8001d18:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001d1c:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d20:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001d24:	441a      	add	r2, r3
 8001d26:	63fa      	str	r2, [r7, #60]	; 0x3c

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001d28:	6c33      	ldr	r3, [r6, #64]	; 0x40
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d2a:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d143      	bne.n	8001db8 <HAL_PCD_IRQHandler+0x46c>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d30:	f004 f8da 	bl	8005ee8 <HAL_PCD_DataInStageCallback>
 8001d34:	e713      	b.n	8001b5e <HAL_PCD_IRQHandler+0x212>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d36:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8001d3a:	b213      	sxth	r3, r2
 8001d3c:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 8001d40:	f413 4f80 	tst.w	r3, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d44:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d48:	d022      	beq.n	8001d90 <HAL_PCD_IRQHandler+0x444>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d4a:	f200 4502 	addw	r5, r0, #1026	; 0x402
 8001d4e:	fa15 f383 	uxtah	r3, r5, r3
 8001d52:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8001d56:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8001d5a:	b135      	cbz	r5, 8001d6a <HAL_PCD_IRQHandler+0x41e>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d5c:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8001d60:	462b      	mov	r3, r5
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d62:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8001d66:	f002 fa93 	bl	8004290 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);
 8001d6a:	eb04 0308 	add.w	r3, r4, r8
 8001d6e:	6822      	ldr	r2, [r4, #0]
 8001d70:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8001d74:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d8a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001d8e:	e78e      	b.n	8001cae <HAL_PCD_IRQHandler+0x362>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d90:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001d94:	fa15 f383 	uxtah	r3, r5, r3
 8001d98:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8001d9c:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8001da0:	2d00      	cmp	r5, #0
 8001da2:	d0e2      	beq.n	8001d6a <HAL_PCD_IRQHandler+0x41e>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001da4:	462b      	mov	r3, r5
 8001da6:	f8b1 2232 	ldrh.w	r2, [r1, #562]	; 0x232
 8001daa:	e7da      	b.n	8001d62 <HAL_PCD_IRQHandler+0x416>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001dac:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8001db0:	4620      	mov	r0, r4
 8001db2:	f7ff fd93 	bl	80018dc <HAL_PCD_EP_Receive>
 8001db6:	e795      	b.n	8001ce4 <HAL_PCD_IRQHandler+0x398>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001db8:	f7ff fdb0 	bl	800191c <HAL_PCD_EP_Transmit>
 8001dbc:	e6cf      	b.n	8001b5e <HAL_PCD_IRQHandler+0x212>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001dbe:	f8df a014 	ldr.w	sl, [pc, #20]	; 8001dd4 <HAL_PCD_IRQHandler+0x488>
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001dc2:	f8df b014 	ldr.w	fp, [pc, #20]	; 8001dd8 <HAL_PCD_IRQHandler+0x48c>
 8001dc6:	e6ca      	b.n	8001b5e <HAL_PCD_IRQHandler+0x212>
      HAL_PCD_SuspendCallback(hpcd);
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f004 f8a5 	bl	8005f18 <HAL_PCD_SuspendCallback>
 8001dce:	e675      	b.n	8001abc <HAL_PCD_IRQHandler+0x170>
 8001dd0:	ffff8000 	.word	0xffff8000
 8001dd4:	ffff8f0f 	.word	0xffff8f0f
 8001dd8:	ffffbf8f 	.word	0xffffbf8f

08001ddc <HAL_PCD_EP_SetStall>:
{
 8001ddc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8001dde:	6843      	ldr	r3, [r0, #4]
 8001de0:	f001 050f 	and.w	r5, r1, #15
 8001de4:	429d      	cmp	r5, r3
{
 8001de6:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8001de8:	d82d      	bhi.n	8001e46 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8001dea:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001dee:	f04f 0320 	mov.w	r3, #32
 8001df2:	d01e      	beq.n	8001e32 <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 8001df4:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001df8:	fb03 0305 	mla	r3, r3, r5, r0
    ep->is_in = 1U;
 8001dfc:	2101      	movs	r1, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001dfe:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 8001e00:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
  ep->is_stall = 1U;
 8001e04:	2201      	movs	r2, #1
 8001e06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8001e08:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8001e0a:	f894 1428 	ldrb.w	r1, [r4, #1064]	; 0x428
 8001e0e:	4291      	cmp	r1, r2
 8001e10:	d01b      	beq.n	8001e4a <HAL_PCD_EP_SetStall+0x6e>
 8001e12:	f884 2428 	strb.w	r2, [r4, #1064]	; 0x428
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e16:	4619      	mov	r1, r3
 8001e18:	6820      	ldr	r0, [r4, #0]
 8001e1a:	f002 f8b7 	bl	8003f8c <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 8001e1e:	b925      	cbnz	r5, 8001e2a <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001e20:	f504 6186 	add.w	r1, r4, #1072	; 0x430
 8001e24:	6820      	ldr	r0, [r4, #0]
 8001e26:	f002 f936 	bl	8004096 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8001e30:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8001e32:	fb03 0301 	mla	r3, r3, r1, r0
    ep->is_in = 0U;
 8001e36:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8001e3a:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001e3c:	f503 730a 	add.w	r3, r3, #552	; 0x228
    ep->is_in = 0U;
 8001e40:	f881 2229 	strb.w	r2, [r1, #553]	; 0x229
 8001e44:	e7de      	b.n	8001e04 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8001e46:	2001      	movs	r0, #1
 8001e48:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001e4a:	2002      	movs	r0, #2
}
 8001e4c:	bd38      	pop	{r3, r4, r5, pc}

08001e4e <HAL_PCD_EP_ClrStall>:
{
 8001e4e:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e50:	6843      	ldr	r3, [r0, #4]
 8001e52:	f001 020f 	and.w	r2, r1, #15
 8001e56:	429a      	cmp	r2, r3
{
 8001e58:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e5a:	d827      	bhi.n	8001eac <HAL_PCD_EP_ClrStall+0x5e>
  if ((0x80U & ep_addr) == 0x80U)
 8001e5c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e60:	f04f 0120 	mov.w	r1, #32
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001e64:	fb01 0102 	mla	r1, r1, r2, r0
 8001e68:	ea4f 1342 	mov.w	r3, r2, lsl #5
    ep->is_in = 1U;
 8001e6c:	bf19      	ittee	ne
 8001e6e:	181b      	addne	r3, r3, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001e70:	3128      	addne	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8001e72:	f501 710a 	addeq.w	r1, r1, #552	; 0x228
    ep->is_in = 0U;
 8001e76:	191b      	addeq	r3, r3, r4
    ep->is_in = 1U;
 8001e78:	bf14      	ite	ne
 8001e7a:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8001e7c:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8001e7e:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8001e82:	bf14      	ite	ne
 8001e84:	f883 0029 	strbne.w	r0, [r3, #41]	; 0x29
    ep->is_in = 0U;
 8001e88:	f883 0229 	strbeq.w	r0, [r3, #553]	; 0x229
  ep->is_stall = 0U;
 8001e8c:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & 0xFU;
 8001e8e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001e90:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d00b      	beq.n	8001eb0 <HAL_PCD_EP_ClrStall+0x62>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e9e:	6820      	ldr	r0, [r4, #0]
 8001ea0:	f002 f895 	bl	8003fce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ea4:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
  return HAL_OK;
 8001ea8:	4628      	mov	r0, r5
 8001eaa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001eac:	2001      	movs	r0, #1
 8001eae:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001eb0:	2002      	movs	r0, #2
}
 8001eb2:	bd38      	pop	{r3, r4, r5, pc}

08001eb4 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001eb4:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001eb8:	bf1b      	ittet	ne
 8001eba:	f001 010f 	andne.w	r1, r1, #15
 8001ebe:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ec2:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8001ec6:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001ec8:	bf08      	it	eq
 8001eca:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001ece:	b91a      	cbnz	r2, 8001ed8 <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001ed0:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001ed2:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8001ed8:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001eda:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001edc:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8001ede:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001ee0:	8143      	strh	r3, [r0, #10]
 8001ee2:	e7f7      	b.n	8001ed4 <HAL_PCDEx_PMAConfig+0x20>

08001ee4 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_TypeDef *USBx = hpcd->Instance;
 8001ee4:	6802      	ldr	r2, [r0, #0]
  hpcd->battery_charging_active = 1U;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f8c0 346c 	str.w	r3, [r0, #1132]	; 0x46c

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8001eec:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 8001efa:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58

  return HAL_OK;
}
 8001f08:	2000      	movs	r0, #0
 8001f0a:	4770      	bx	lr

08001f0c <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8001f0c:	6802      	ldr	r2, [r0, #0]
{
 8001f0e:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8001f10:	2101      	movs	r1, #1
 8001f12:	f8c0 1468 	str.w	r1, [r0, #1128]	; 0x468
  hpcd->LPM_State = LPM_L0;
 8001f16:	2000      	movs	r0, #0
 8001f18:	f883 0460 	strb.w	r0, [r3, #1120]	; 0x460

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001f1c:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	430b      	orrs	r3, r1
 8001f24:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001f28:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	f043 0302 	orr.w	r3, r3, #2
 8001f32:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8001f36:	4770      	bx	lr

08001f38 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f38:	4b02      	ldr	r3, [pc, #8]	; (8001f44 <HAL_PWREx_GetVoltageRange+0xc>)
 8001f3a:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001f3c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40007000 	.word	0x40007000

08001f48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f48:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f4a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f4c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f50:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f54:	d11c      	bne.n	8001f90 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f56:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001f5a:	d015      	beq.n	8001f88 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f66:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f68:	4a10      	ldr	r2, [pc, #64]	; (8001fac <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001f6a:	6811      	ldr	r1, [r2, #0]
 8001f6c:	2232      	movs	r2, #50	; 0x32
 8001f6e:	434a      	muls	r2, r1
 8001f70:	490f      	ldr	r1, [pc, #60]	; (8001fb0 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001f72:	fbb2 f2f1 	udiv	r2, r2, r1
 8001f76:	4619      	mov	r1, r3
 8001f78:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f7a:	6958      	ldr	r0, [r3, #20]
 8001f7c:	0540      	lsls	r0, r0, #21
 8001f7e:	d500      	bpl.n	8001f82 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001f80:	b922      	cbnz	r2, 8001f8c <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f82:	694b      	ldr	r3, [r1, #20]
 8001f84:	055b      	lsls	r3, r3, #21
 8001f86:	d40d      	bmi.n	8001fa4 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f88:	2000      	movs	r0, #0
 8001f8a:	4770      	bx	lr
        wait_loop_index--;
 8001f8c:	3a01      	subs	r2, #1
 8001f8e:	e7f4      	b.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f90:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f94:	bf1f      	itttt	ne
 8001f96:	681a      	ldrne	r2, [r3, #0]
 8001f98:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001f9c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001fa0:	601a      	strne	r2, [r3, #0]
 8001fa2:	e7f1      	b.n	8001f88 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8001fa4:	2003      	movs	r0, #3
}
 8001fa6:	4770      	bx	lr
 8001fa8:	40007000 	.word	0x40007000
 8001fac:	2000056c 	.word	0x2000056c
 8001fb0:	000f4240 	.word	0x000f4240

08001fb4 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001fb4:	4a02      	ldr	r2, [pc, #8]	; (8001fc0 <HAL_PWREx_EnableVddUSB+0xc>)
 8001fb6:	6853      	ldr	r3, [r2, #4]
 8001fb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fbc:	6053      	str	r3, [r2, #4]
 8001fbe:	4770      	bx	lr
 8001fc0:	40007000 	.word	0x40007000

08001fc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fc6:	4d1e      	ldr	r5, [pc, #120]	; (8002040 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001fc8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001fca:	00da      	lsls	r2, r3, #3
{
 8001fcc:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fce:	d518      	bpl.n	8002002 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fd0:	f7ff ffb2 	bl	8001f38 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fd4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001fd8:	d123      	bne.n	8002022 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fda:	2c80      	cmp	r4, #128	; 0x80
 8001fdc:	d929      	bls.n	8002032 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fde:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fe0:	bf8c      	ite	hi
 8001fe2:	2002      	movhi	r0, #2
 8001fe4:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fe6:	4a17      	ldr	r2, [pc, #92]	; (8002044 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001fe8:	6813      	ldr	r3, [r2, #0]
 8001fea:	f023 0307 	bic.w	r3, r3, #7
 8001fee:	4303      	orrs	r3, r0
 8001ff0:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ff2:	6813      	ldr	r3, [r2, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001ff8:	1a18      	subs	r0, r3, r0
 8001ffa:	bf18      	it	ne
 8001ffc:	2001      	movne	r0, #1
 8001ffe:	b003      	add	sp, #12
 8002000:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002002:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002008:	65ab      	str	r3, [r5, #88]	; 0x58
 800200a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002014:	f7ff ff90 	bl	8001f38 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002018:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800201a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201e:	65ab      	str	r3, [r5, #88]	; 0x58
 8002020:	e7d8      	b.n	8001fd4 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8002022:	2c80      	cmp	r4, #128	; 0x80
 8002024:	d807      	bhi.n	8002036 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8002026:	d008      	beq.n	800203a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002028:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 800202c:	4258      	negs	r0, r3
 800202e:	4158      	adcs	r0, r3
 8002030:	e7d9      	b.n	8001fe6 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002032:	2000      	movs	r0, #0
 8002034:	e7d7      	b.n	8001fe6 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002036:	2003      	movs	r0, #3
 8002038:	e7d5      	b.n	8001fe6 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800203a:	2002      	movs	r0, #2
 800203c:	e7d3      	b.n	8001fe6 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	40022000 	.word	0x40022000

08002048 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002048:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800204a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800204c:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800204e:	f012 020c 	ands.w	r2, r2, #12
 8002052:	d005      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0x18>
 8002054:	2a0c      	cmp	r2, #12
 8002056:	d115      	bne.n	8002084 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002058:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800205c:	2901      	cmp	r1, #1
 800205e:	d118      	bne.n	8002092 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002060:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8002062:	4820      	ldr	r0, [pc, #128]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002064:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002066:	bf55      	itete	pl
 8002068:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800206c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800206e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002072:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002076:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800207a:	b382      	cbz	r2, 80020de <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800207c:	2a0c      	cmp	r2, #12
 800207e:	d009      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x4c>
 8002080:	2000      	movs	r0, #0
  return sysclockfreq;
 8002082:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002084:	2a04      	cmp	r2, #4
 8002086:	d029      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x94>
 8002088:	2a08      	cmp	r2, #8
 800208a:	4817      	ldr	r0, [pc, #92]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800208c:	bf18      	it	ne
 800208e:	2000      	movne	r0, #0
 8002090:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002092:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002094:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002096:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002098:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800209c:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 80020a0:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a2:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0x6c>
 80020a8:	2903      	cmp	r1, #3
 80020aa:	d012      	beq.n	80020d2 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020ac:	68d9      	ldr	r1, [r3, #12]
 80020ae:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80020b2:	e003      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020b4:	68d9      	ldr	r1, [r3, #12]
 80020b6:	480d      	ldr	r0, [pc, #52]	; (80020ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80020b8:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020bc:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020be:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020c2:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80020c6:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020c8:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020ca:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80020cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80020d0:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020d2:	68d9      	ldr	r1, [r3, #12]
 80020d4:	4804      	ldr	r0, [pc, #16]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020d6:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80020da:	e7ef      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 80020dc:	4803      	ldr	r0, [pc, #12]	; (80020ec <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80020de:	4770      	bx	lr
 80020e0:	40021000 	.word	0x40021000
 80020e4:	08006308 	.word	0x08006308
 80020e8:	007a1200 	.word	0x007a1200
 80020ec:	00f42400 	.word	0x00f42400

080020f0 <HAL_RCC_OscConfig>:
{
 80020f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80020f4:	4605      	mov	r5, r0
 80020f6:	b908      	cbnz	r0, 80020fc <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 80020f8:	2001      	movs	r0, #1
 80020fa:	e046      	b.n	800218a <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020fc:	4ca8      	ldr	r4, [pc, #672]	; (80023a0 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020fe:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002100:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002102:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002104:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002106:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800210a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800210e:	d572      	bpl.n	80021f6 <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002110:	b11e      	cbz	r6, 800211a <HAL_RCC_OscConfig+0x2a>
 8002112:	2e0c      	cmp	r6, #12
 8002114:	d151      	bne.n	80021ba <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002116:	2f01      	cmp	r7, #1
 8002118:	d14f      	bne.n	80021ba <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	0798      	lsls	r0, r3, #30
 800211e:	d502      	bpl.n	8002126 <HAL_RCC_OscConfig+0x36>
 8002120:	69ab      	ldr	r3, [r5, #24]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0e8      	beq.n	80020f8 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	6a28      	ldr	r0, [r5, #32]
 800212a:	0719      	lsls	r1, r3, #28
 800212c:	bf56      	itet	pl
 800212e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002132:	6823      	ldrmi	r3, [r4, #0]
 8002134:	091b      	lsrpl	r3, r3, #4
 8002136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800213a:	4283      	cmp	r3, r0
 800213c:	d228      	bcs.n	8002190 <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800213e:	f7ff ff41 	bl	8001fc4 <RCC_SetFlashLatencyFromMSIRange>
 8002142:	2800      	cmp	r0, #0
 8002144:	d1d8      	bne.n	80020f8 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	f043 0308 	orr.w	r3, r3, #8
 800214c:	6023      	str	r3, [r4, #0]
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	6a2a      	ldr	r2, [r5, #32]
 8002152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002156:	4313      	orrs	r3, r2
 8002158:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800215a:	6863      	ldr	r3, [r4, #4]
 800215c:	69ea      	ldr	r2, [r5, #28]
 800215e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002162:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002166:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002168:	f7ff ff6e 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 800216c:	68a3      	ldr	r3, [r4, #8]
 800216e:	4a8d      	ldr	r2, [pc, #564]	; (80023a4 <HAL_RCC_OscConfig+0x2b4>)
 8002170:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002174:	5cd3      	ldrb	r3, [r2, r3]
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	40d8      	lsrs	r0, r3
 800217c:	4b8a      	ldr	r3, [pc, #552]	; (80023a8 <HAL_RCC_OscConfig+0x2b8>)
 800217e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002180:	2000      	movs	r0, #0
 8002182:	f7fe fcad 	bl	8000ae0 <HAL_InitTick>
        if(status != HAL_OK)
 8002186:	2800      	cmp	r0, #0
 8002188:	d035      	beq.n	80021f6 <HAL_RCC_OscConfig+0x106>
}
 800218a:	b003      	add	sp, #12
 800218c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	f043 0308 	orr.w	r3, r3, #8
 8002196:	6023      	str	r3, [r4, #0]
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800219e:	4303      	orrs	r3, r0
 80021a0:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a2:	6863      	ldr	r3, [r4, #4]
 80021a4:	69ea      	ldr	r2, [r5, #28]
 80021a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80021ae:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021b0:	f7ff ff08 	bl	8001fc4 <RCC_SetFlashLatencyFromMSIRange>
 80021b4:	2800      	cmp	r0, #0
 80021b6:	d0d7      	beq.n	8002168 <HAL_RCC_OscConfig+0x78>
 80021b8:	e79e      	b.n	80020f8 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021ba:	69ab      	ldr	r3, [r5, #24]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d03a      	beq.n	8002236 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80021c8:	f7fe fcba 	bl	8000b40 <HAL_GetTick>
 80021cc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	079a      	lsls	r2, r3, #30
 80021d2:	d528      	bpl.n	8002226 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	f043 0308 	orr.w	r3, r3, #8
 80021da:	6023      	str	r3, [r4, #0]
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	6a2a      	ldr	r2, [r5, #32]
 80021e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021e4:	4313      	orrs	r3, r2
 80021e6:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021e8:	6863      	ldr	r3, [r4, #4]
 80021ea:	69ea      	ldr	r2, [r5, #28]
 80021ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80021f4:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f6:	682b      	ldr	r3, [r5, #0]
 80021f8:	07d8      	lsls	r0, r3, #31
 80021fa:	d42d      	bmi.n	8002258 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fc:	682b      	ldr	r3, [r5, #0]
 80021fe:	0799      	lsls	r1, r3, #30
 8002200:	d46b      	bmi.n	80022da <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002202:	682b      	ldr	r3, [r5, #0]
 8002204:	0718      	lsls	r0, r3, #28
 8002206:	f100 80a0 	bmi.w	800234a <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800220a:	682b      	ldr	r3, [r5, #0]
 800220c:	0759      	lsls	r1, r3, #29
 800220e:	f100 80cd 	bmi.w	80023ac <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002212:	682b      	ldr	r3, [r5, #0]
 8002214:	0699      	lsls	r1, r3, #26
 8002216:	f100 8136 	bmi.w	8002486 <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800221a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800221c:	2b00      	cmp	r3, #0
 800221e:	f040 815c 	bne.w	80024da <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8002222:	2000      	movs	r0, #0
 8002224:	e7b1      	b.n	800218a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002226:	f7fe fc8b 	bl	8000b40 <HAL_GetTick>
 800222a:	eba0 0008 	sub.w	r0, r0, r8
 800222e:	2802      	cmp	r0, #2
 8002230:	d9cd      	bls.n	80021ce <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 8002232:	2003      	movs	r0, #3
 8002234:	e7a9      	b.n	800218a <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800223e:	f7fe fc7f 	bl	8000b40 <HAL_GetTick>
 8002242:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002244:	6823      	ldr	r3, [r4, #0]
 8002246:	079b      	lsls	r3, r3, #30
 8002248:	d5d5      	bpl.n	80021f6 <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800224a:	f7fe fc79 	bl	8000b40 <HAL_GetTick>
 800224e:	eba0 0008 	sub.w	r0, r0, r8
 8002252:	2802      	cmp	r0, #2
 8002254:	d9f6      	bls.n	8002244 <HAL_RCC_OscConfig+0x154>
 8002256:	e7ec      	b.n	8002232 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002258:	2e08      	cmp	r6, #8
 800225a:	d003      	beq.n	8002264 <HAL_RCC_OscConfig+0x174>
 800225c:	2e0c      	cmp	r6, #12
 800225e:	d108      	bne.n	8002272 <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8002260:	2f03      	cmp	r7, #3
 8002262:	d106      	bne.n	8002272 <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	039a      	lsls	r2, r3, #14
 8002268:	d5c8      	bpl.n	80021fc <HAL_RCC_OscConfig+0x10c>
 800226a:	686b      	ldr	r3, [r5, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1c5      	bne.n	80021fc <HAL_RCC_OscConfig+0x10c>
 8002270:	e742      	b.n	80020f8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002272:	686b      	ldr	r3, [r5, #4]
 8002274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002278:	d110      	bne.n	800229c <HAL_RCC_OscConfig+0x1ac>
 800227a:	6823      	ldr	r3, [r4, #0]
 800227c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002280:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002282:	f7fe fc5d 	bl	8000b40 <HAL_GetTick>
 8002286:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002288:	6823      	ldr	r3, [r4, #0]
 800228a:	039b      	lsls	r3, r3, #14
 800228c:	d4b6      	bmi.n	80021fc <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800228e:	f7fe fc57 	bl	8000b40 <HAL_GetTick>
 8002292:	eba0 0008 	sub.w	r0, r0, r8
 8002296:	2864      	cmp	r0, #100	; 0x64
 8002298:	d9f6      	bls.n	8002288 <HAL_RCC_OscConfig+0x198>
 800229a:	e7ca      	b.n	8002232 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800229c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a0:	d104      	bne.n	80022ac <HAL_RCC_OscConfig+0x1bc>
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a8:	6023      	str	r3, [r4, #0]
 80022aa:	e7e6      	b.n	800227a <HAL_RCC_OscConfig+0x18a>
 80022ac:	6822      	ldr	r2, [r4, #0]
 80022ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022b2:	6022      	str	r2, [r4, #0]
 80022b4:	6822      	ldr	r2, [r4, #0]
 80022b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022ba:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1e0      	bne.n	8002282 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 80022c0:	f7fe fc3e 	bl	8000b40 <HAL_GetTick>
 80022c4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	0398      	lsls	r0, r3, #14
 80022ca:	d597      	bpl.n	80021fc <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022cc:	f7fe fc38 	bl	8000b40 <HAL_GetTick>
 80022d0:	eba0 0008 	sub.w	r0, r0, r8
 80022d4:	2864      	cmp	r0, #100	; 0x64
 80022d6:	d9f6      	bls.n	80022c6 <HAL_RCC_OscConfig+0x1d6>
 80022d8:	e7ab      	b.n	8002232 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022da:	2e04      	cmp	r6, #4
 80022dc:	d003      	beq.n	80022e6 <HAL_RCC_OscConfig+0x1f6>
 80022de:	2e0c      	cmp	r6, #12
 80022e0:	d110      	bne.n	8002304 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 80022e2:	2f02      	cmp	r7, #2
 80022e4:	d10e      	bne.n	8002304 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	0559      	lsls	r1, r3, #21
 80022ea:	d503      	bpl.n	80022f4 <HAL_RCC_OscConfig+0x204>
 80022ec:	68eb      	ldr	r3, [r5, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f43f af02 	beq.w	80020f8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f4:	6863      	ldr	r3, [r4, #4]
 80022f6:	692a      	ldr	r2, [r5, #16]
 80022f8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80022fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002300:	6063      	str	r3, [r4, #4]
 8002302:	e77e      	b.n	8002202 <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002304:	68eb      	ldr	r3, [r5, #12]
 8002306:	b17b      	cbz	r3, 8002328 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002310:	f7fe fc16 	bl	8000b40 <HAL_GetTick>
 8002314:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	055a      	lsls	r2, r3, #21
 800231a:	d4eb      	bmi.n	80022f4 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231c:	f7fe fc10 	bl	8000b40 <HAL_GetTick>
 8002320:	1bc0      	subs	r0, r0, r7
 8002322:	2802      	cmp	r0, #2
 8002324:	d9f7      	bls.n	8002316 <HAL_RCC_OscConfig+0x226>
 8002326:	e784      	b.n	8002232 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800232e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002330:	f7fe fc06 	bl	8000b40 <HAL_GetTick>
 8002334:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	055b      	lsls	r3, r3, #21
 800233a:	f57f af62 	bpl.w	8002202 <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233e:	f7fe fbff 	bl	8000b40 <HAL_GetTick>
 8002342:	1bc0      	subs	r0, r0, r7
 8002344:	2802      	cmp	r0, #2
 8002346:	d9f6      	bls.n	8002336 <HAL_RCC_OscConfig+0x246>
 8002348:	e773      	b.n	8002232 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800234a:	696b      	ldr	r3, [r5, #20]
 800234c:	b19b      	cbz	r3, 8002376 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 800234e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800235a:	f7fe fbf1 	bl	8000b40 <HAL_GetTick>
 800235e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002360:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002364:	079a      	lsls	r2, r3, #30
 8002366:	f53f af50 	bmi.w	800220a <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800236a:	f7fe fbe9 	bl	8000b40 <HAL_GetTick>
 800236e:	1bc0      	subs	r0, r0, r7
 8002370:	2802      	cmp	r0, #2
 8002372:	d9f5      	bls.n	8002360 <HAL_RCC_OscConfig+0x270>
 8002374:	e75d      	b.n	8002232 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 8002376:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800237a:	f023 0301 	bic.w	r3, r3, #1
 800237e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002382:	f7fe fbdd 	bl	8000b40 <HAL_GetTick>
 8002386:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002388:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800238c:	079b      	lsls	r3, r3, #30
 800238e:	f57f af3c 	bpl.w	800220a <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002392:	f7fe fbd5 	bl	8000b40 <HAL_GetTick>
 8002396:	1bc0      	subs	r0, r0, r7
 8002398:	2802      	cmp	r0, #2
 800239a:	d9f5      	bls.n	8002388 <HAL_RCC_OscConfig+0x298>
 800239c:	e749      	b.n	8002232 <HAL_RCC_OscConfig+0x142>
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
 80023a4:	080062ed 	.word	0x080062ed
 80023a8:	2000056c 	.word	0x2000056c
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023ae:	00d8      	lsls	r0, r3, #3
 80023b0:	d429      	bmi.n	8002406 <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80023ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c0:	9301      	str	r3, [sp, #4]
 80023c2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80023c4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c8:	4f71      	ldr	r7, [pc, #452]	; (8002590 <HAL_RCC_OscConfig+0x4a0>)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	05d9      	lsls	r1, r3, #23
 80023ce:	d51d      	bpl.n	800240c <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d0:	68ab      	ldr	r3, [r5, #8]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d12b      	bne.n	800242e <HAL_RCC_OscConfig+0x33e>
 80023d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80023e2:	f7fe fbad 	bl	8000b40 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80023ea:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ec:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80023f0:	079b      	lsls	r3, r3, #30
 80023f2:	d542      	bpl.n	800247a <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 80023f4:	f1b8 0f00 	cmp.w	r8, #0
 80023f8:	f43f af0b 	beq.w	8002212 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002402:	65a3      	str	r3, [r4, #88]	; 0x58
 8002404:	e705      	b.n	8002212 <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 8002406:	f04f 0800 	mov.w	r8, #0
 800240a:	e7dd      	b.n	80023c8 <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002412:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002414:	f7fe fb94 	bl	8000b40 <HAL_GetTick>
 8002418:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	05da      	lsls	r2, r3, #23
 800241e:	d4d7      	bmi.n	80023d0 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002420:	f7fe fb8e 	bl	8000b40 <HAL_GetTick>
 8002424:	eba0 0009 	sub.w	r0, r0, r9
 8002428:	2802      	cmp	r0, #2
 800242a:	d9f6      	bls.n	800241a <HAL_RCC_OscConfig+0x32a>
 800242c:	e701      	b.n	8002232 <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242e:	2b05      	cmp	r3, #5
 8002430:	d106      	bne.n	8002440 <HAL_RCC_OscConfig+0x350>
 8002432:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002436:	f043 0304 	orr.w	r3, r3, #4
 800243a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800243e:	e7ca      	b.n	80023d6 <HAL_RCC_OscConfig+0x2e6>
 8002440:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002444:	f022 0201 	bic.w	r2, r2, #1
 8002448:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800244c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002450:	f022 0204 	bic.w	r2, r2, #4
 8002454:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1c2      	bne.n	80023e2 <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 800245c:	f7fe fb70 	bl	8000b40 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002460:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002464:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002466:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800246a:	0798      	lsls	r0, r3, #30
 800246c:	d5c2      	bpl.n	80023f4 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246e:	f7fe fb67 	bl	8000b40 <HAL_GetTick>
 8002472:	1bc0      	subs	r0, r0, r7
 8002474:	4548      	cmp	r0, r9
 8002476:	d9f6      	bls.n	8002466 <HAL_RCC_OscConfig+0x376>
 8002478:	e6db      	b.n	8002232 <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247a:	f7fe fb61 	bl	8000b40 <HAL_GetTick>
 800247e:	1bc0      	subs	r0, r0, r7
 8002480:	4548      	cmp	r0, r9
 8002482:	d9b3      	bls.n	80023ec <HAL_RCC_OscConfig+0x2fc>
 8002484:	e6d5      	b.n	8002232 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002486:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002488:	b19b      	cbz	r3, 80024b2 <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 800248a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002496:	f7fe fb53 	bl	8000b40 <HAL_GetTick>
 800249a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800249c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80024a0:	079a      	lsls	r2, r3, #30
 80024a2:	f53f aeba 	bmi.w	800221a <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024a6:	f7fe fb4b 	bl	8000b40 <HAL_GetTick>
 80024aa:	1bc0      	subs	r0, r0, r7
 80024ac:	2802      	cmp	r0, #2
 80024ae:	d9f5      	bls.n	800249c <HAL_RCC_OscConfig+0x3ac>
 80024b0:	e6bf      	b.n	8002232 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 80024b2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80024b6:	f023 0301 	bic.w	r3, r3, #1
 80024ba:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80024be:	f7fe fb3f 	bl	8000b40 <HAL_GetTick>
 80024c2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024c4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80024c8:	079b      	lsls	r3, r3, #30
 80024ca:	f57f aea6 	bpl.w	800221a <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ce:	f7fe fb37 	bl	8000b40 <HAL_GetTick>
 80024d2:	1bc0      	subs	r0, r0, r7
 80024d4:	2802      	cmp	r0, #2
 80024d6:	d9f5      	bls.n	80024c4 <HAL_RCC_OscConfig+0x3d4>
 80024d8:	e6ab      	b.n	8002232 <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024da:	2e0c      	cmp	r6, #12
 80024dc:	f43f ae0c 	beq.w	80020f8 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024e0:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024e8:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024ea:	d136      	bne.n	800255a <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 80024ec:	f7fe fb28 	bl	8000b40 <HAL_GetTick>
 80024f0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	0198      	lsls	r0, r3, #6
 80024f6:	d42a      	bmi.n	800254e <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80024fa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80024fc:	06db      	lsls	r3, r3, #27
 80024fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002502:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002504:	4313      	orrs	r3, r2
 8002506:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002508:	3a01      	subs	r2, #1
 800250a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800250e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002510:	0852      	lsrs	r2, r2, #1
 8002512:	3a01      	subs	r2, #1
 8002514:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002518:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800251a:	0852      	lsrs	r2, r2, #1
 800251c:	3a01      	subs	r2, #1
 800251e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002522:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800252a:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800252c:	68e3      	ldr	r3, [r4, #12]
 800252e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002532:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002534:	f7fe fb04 	bl	8000b40 <HAL_GetTick>
 8002538:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253a:	6823      	ldr	r3, [r4, #0]
 800253c:	0199      	lsls	r1, r3, #6
 800253e:	f53f ae70 	bmi.w	8002222 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002542:	f7fe fafd 	bl	8000b40 <HAL_GetTick>
 8002546:	1b40      	subs	r0, r0, r5
 8002548:	2802      	cmp	r0, #2
 800254a:	d9f6      	bls.n	800253a <HAL_RCC_OscConfig+0x44a>
 800254c:	e671      	b.n	8002232 <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254e:	f7fe faf7 	bl	8000b40 <HAL_GetTick>
 8002552:	1b80      	subs	r0, r0, r6
 8002554:	2802      	cmp	r0, #2
 8002556:	d9cc      	bls.n	80024f2 <HAL_RCC_OscConfig+0x402>
 8002558:	e66b      	b.n	8002232 <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800255e:	bf5e      	ittt	pl
 8002560:	68e3      	ldrpl	r3, [r4, #12]
 8002562:	f023 0303 	bicpl.w	r3, r3, #3
 8002566:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002568:	68e3      	ldr	r3, [r4, #12]
 800256a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800256e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002572:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002574:	f7fe fae4 	bl	8000b40 <HAL_GetTick>
 8002578:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	019b      	lsls	r3, r3, #6
 800257e:	f57f ae50 	bpl.w	8002222 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002582:	f7fe fadd 	bl	8000b40 <HAL_GetTick>
 8002586:	1b40      	subs	r0, r0, r5
 8002588:	2802      	cmp	r0, #2
 800258a:	d9f6      	bls.n	800257a <HAL_RCC_OscConfig+0x48a>
 800258c:	e651      	b.n	8002232 <HAL_RCC_OscConfig+0x142>
 800258e:	bf00      	nop
 8002590:	40007000 	.word	0x40007000

08002594 <HAL_RCC_ClockConfig>:
{
 8002594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002598:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800259a:	4604      	mov	r4, r0
 800259c:	b910      	cbnz	r0, 80025a4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800259e:	2001      	movs	r0, #1
 80025a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025a4:	4a40      	ldr	r2, [pc, #256]	; (80026a8 <HAL_RCC_ClockConfig+0x114>)
 80025a6:	6813      	ldr	r3, [r2, #0]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	428b      	cmp	r3, r1
 80025ae:	d329      	bcc.n	8002604 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b0:	6823      	ldr	r3, [r4, #0]
 80025b2:	07d9      	lsls	r1, r3, #31
 80025b4:	d431      	bmi.n	800261a <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b6:	6821      	ldr	r1, [r4, #0]
 80025b8:	078a      	lsls	r2, r1, #30
 80025ba:	d45b      	bmi.n	8002674 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025bc:	4a3a      	ldr	r2, [pc, #232]	; (80026a8 <HAL_RCC_ClockConfig+0x114>)
 80025be:	6813      	ldr	r3, [r2, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	429e      	cmp	r6, r3
 80025c6:	d35d      	bcc.n	8002684 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	f011 0f04 	tst.w	r1, #4
 80025cc:	4d37      	ldr	r5, [pc, #220]	; (80026ac <HAL_RCC_ClockConfig+0x118>)
 80025ce:	d164      	bne.n	800269a <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d0:	070b      	lsls	r3, r1, #28
 80025d2:	d506      	bpl.n	80025e2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025d4:	68ab      	ldr	r3, [r5, #8]
 80025d6:	6922      	ldr	r2, [r4, #16]
 80025d8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80025dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80025e0:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025e2:	f7ff fd31 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 80025e6:	68ab      	ldr	r3, [r5, #8]
 80025e8:	4a31      	ldr	r2, [pc, #196]	; (80026b0 <HAL_RCC_ClockConfig+0x11c>)
 80025ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80025ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025f2:	5cd3      	ldrb	r3, [r2, r3]
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	40d8      	lsrs	r0, r3
 80025fa:	4b2e      	ldr	r3, [pc, #184]	; (80026b4 <HAL_RCC_ClockConfig+0x120>)
 80025fc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80025fe:	2000      	movs	r0, #0
 8002600:	f7fe ba6e 	b.w	8000ae0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002604:	6813      	ldr	r3, [r2, #0]
 8002606:	f023 0307 	bic.w	r3, r3, #7
 800260a:	430b      	orrs	r3, r1
 800260c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800260e:	6813      	ldr	r3, [r2, #0]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4299      	cmp	r1, r3
 8002616:	d1c2      	bne.n	800259e <HAL_RCC_ClockConfig+0xa>
 8002618:	e7ca      	b.n	80025b0 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800261a:	6862      	ldr	r2, [r4, #4]
 800261c:	4d23      	ldr	r5, [pc, #140]	; (80026ac <HAL_RCC_ClockConfig+0x118>)
 800261e:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002620:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002622:	d11b      	bne.n	800265c <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002624:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002628:	d0b9      	beq.n	800259e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800262a:	68ab      	ldr	r3, [r5, #8]
 800262c:	f023 0303 	bic.w	r3, r3, #3
 8002630:	4313      	orrs	r3, r2
 8002632:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8002634:	f7fe fa84 	bl	8000b40 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002638:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800263c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263e:	68ab      	ldr	r3, [r5, #8]
 8002640:	6862      	ldr	r2, [r4, #4]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800264a:	d0b4      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264c:	f7fe fa78 	bl	8000b40 <HAL_GetTick>
 8002650:	1bc0      	subs	r0, r0, r7
 8002652:	4540      	cmp	r0, r8
 8002654:	d9f3      	bls.n	800263e <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8002656:	2003      	movs	r0, #3
}
 8002658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265c:	2a02      	cmp	r2, #2
 800265e:	d102      	bne.n	8002666 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002660:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002664:	e7e0      	b.n	8002628 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002666:	b912      	cbnz	r2, 800266e <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002668:	f013 0f02 	tst.w	r3, #2
 800266c:	e7dc      	b.n	8002628 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800266e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002672:	e7d9      	b.n	8002628 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002674:	4a0d      	ldr	r2, [pc, #52]	; (80026ac <HAL_RCC_ClockConfig+0x118>)
 8002676:	68a0      	ldr	r0, [r4, #8]
 8002678:	6893      	ldr	r3, [r2, #8]
 800267a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800267e:	4303      	orrs	r3, r0
 8002680:	6093      	str	r3, [r2, #8]
 8002682:	e79b      	b.n	80025bc <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002684:	6813      	ldr	r3, [r2, #0]
 8002686:	f023 0307 	bic.w	r3, r3, #7
 800268a:	4333      	orrs	r3, r6
 800268c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	6813      	ldr	r3, [r2, #0]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	429e      	cmp	r6, r3
 8002696:	d182      	bne.n	800259e <HAL_RCC_ClockConfig+0xa>
 8002698:	e796      	b.n	80025c8 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800269a:	68ab      	ldr	r3, [r5, #8]
 800269c:	68e2      	ldr	r2, [r4, #12]
 800269e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60ab      	str	r3, [r5, #8]
 80026a6:	e793      	b.n	80025d0 <HAL_RCC_ClockConfig+0x3c>
 80026a8:	40022000 	.word	0x40022000
 80026ac:	40021000 	.word	0x40021000
 80026b0:	080062ed 	.word	0x080062ed
 80026b4:	2000056c 	.word	0x2000056c

080026b8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80026ba:	4a06      	ldr	r2, [pc, #24]	; (80026d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80026c2:	5cd3      	ldrb	r3, [r2, r3]
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026c6:	6810      	ldr	r0, [r2, #0]
 80026c8:	f003 031f 	and.w	r3, r3, #31
}
 80026cc:	40d8      	lsrs	r0, r3
 80026ce:	4770      	bx	lr
 80026d0:	40021000 	.word	0x40021000
 80026d4:	080062fd 	.word	0x080062fd
 80026d8:	2000056c 	.word	0x2000056c

080026dc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80026de:	4a06      	ldr	r2, [pc, #24]	; (80026f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80026e6:	5cd3      	ldrb	r3, [r2, r3]
 80026e8:	4a04      	ldr	r2, [pc, #16]	; (80026fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026ea:	6810      	ldr	r0, [r2, #0]
 80026ec:	f003 031f 	and.w	r3, r3, #31
}
 80026f0:	40d8      	lsrs	r0, r3
 80026f2:	4770      	bx	lr
 80026f4:	40021000 	.word	0x40021000
 80026f8:	080062fd 	.word	0x080062fd
 80026fc:	2000056c 	.word	0x2000056c

08002700 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002702:	4b44      	ldr	r3, [pc, #272]	; (8002814 <RCCEx_PLLSAI1_Config+0x114>)
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	f012 0f03 	tst.w	r2, #3
{
 800270a:	4605      	mov	r5, r0
 800270c:	460e      	mov	r6, r1
 800270e:	461c      	mov	r4, r3
 8002710:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002712:	d039      	beq.n	8002788 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	f002 0203 	and.w	r2, r2, #3
 800271a:	4282      	cmp	r2, r0
 800271c:	d14b      	bne.n	80027b6 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 800271e:	2a00      	cmp	r2, #0
 8002720:	d049      	beq.n	80027b6 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002722:	68db      	ldr	r3, [r3, #12]
       ||
 8002724:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002726:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800272a:	3301      	adds	r3, #1
       ||
 800272c:	4293      	cmp	r3, r2
 800272e:	d142      	bne.n	80027b6 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002736:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002738:	f7fe fa02 	bl	8000b40 <HAL_GetTick>
 800273c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	011a      	lsls	r2, r3, #4
 8002742:	d441      	bmi.n	80027c8 <RCCEx_PLLSAI1_Config+0xc8>
 8002744:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002746:	2e00      	cmp	r6, #0
 8002748:	d045      	beq.n	80027d6 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800274a:	2e01      	cmp	r6, #1
 800274c:	d14f      	bne.n	80027ee <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800274e:	6922      	ldr	r2, [r4, #16]
 8002750:	6928      	ldr	r0, [r5, #16]
 8002752:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002756:	0840      	lsrs	r0, r0, #1
 8002758:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800275c:	3801      	subs	r0, #1
 800275e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8002762:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8002766:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800276e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002770:	f7fe f9e6 	bl	8000b40 <HAL_GetTick>
 8002774:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002776:	6823      	ldr	r3, [r4, #0]
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	d545      	bpl.n	8002808 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800277c:	6923      	ldr	r3, [r4, #16]
 800277e:	69aa      	ldr	r2, [r5, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	6123      	str	r3, [r4, #16]
 8002784:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8002788:	2802      	cmp	r0, #2
 800278a:	d010      	beq.n	80027ae <RCCEx_PLLSAI1_Config+0xae>
 800278c:	2803      	cmp	r0, #3
 800278e:	d014      	beq.n	80027ba <RCCEx_PLLSAI1_Config+0xba>
 8002790:	2801      	cmp	r0, #1
 8002792:	d110      	bne.n	80027b6 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	079f      	lsls	r7, r3, #30
 8002798:	d5f5      	bpl.n	8002786 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800279a:	68e3      	ldr	r3, [r4, #12]
 800279c:	686a      	ldr	r2, [r5, #4]
 800279e:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80027a2:	3a01      	subs	r2, #1
 80027a4:	4318      	orrs	r0, r3
 80027a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80027aa:	60e0      	str	r0, [r4, #12]
 80027ac:	e7c0      	b.n	8002730 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027b4:	d1f1      	bne.n	800279a <RCCEx_PLLSAI1_Config+0x9a>
 80027b6:	2001      	movs	r0, #1
 80027b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	0391      	lsls	r1, r2, #14
 80027be:	d4ec      	bmi.n	800279a <RCCEx_PLLSAI1_Config+0x9a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80027c6:	e7f5      	b.n	80027b4 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027c8:	f7fe f9ba 	bl	8000b40 <HAL_GetTick>
 80027cc:	1bc0      	subs	r0, r0, r7
 80027ce:	2802      	cmp	r0, #2
 80027d0:	d9b5      	bls.n	800273e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80027d2:	2003      	movs	r0, #3
 80027d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027d6:	6922      	ldr	r2, [r4, #16]
 80027d8:	68e9      	ldr	r1, [r5, #12]
 80027da:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 80027de:	06c9      	lsls	r1, r1, #27
 80027e0:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 80027e4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80027e8:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027ea:	6123      	str	r3, [r4, #16]
 80027ec:	e7bc      	b.n	8002768 <RCCEx_PLLSAI1_Config+0x68>
 80027ee:	6923      	ldr	r3, [r4, #16]
 80027f0:	6968      	ldr	r0, [r5, #20]
 80027f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027f6:	0840      	lsrs	r0, r0, #1
 80027f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027fc:	3801      	subs	r0, #1
 80027fe:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002802:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002806:	e7f0      	b.n	80027ea <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002808:	f7fe f99a 	bl	8000b40 <HAL_GetTick>
 800280c:	1b80      	subs	r0, r0, r6
 800280e:	2802      	cmp	r0, #2
 8002810:	d9b1      	bls.n	8002776 <RCCEx_PLLSAI1_Config+0x76>
 8002812:	e7de      	b.n	80027d2 <RCCEx_PLLSAI1_Config+0xd2>
 8002814:	40021000 	.word	0x40021000

08002818 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002818:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800281c:	6805      	ldr	r5, [r0, #0]
 800281e:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8002822:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002824:	d00e      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002826:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8002828:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800282c:	d053      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800282e:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002832:	d055      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8002834:	2900      	cmp	r1, #0
 8002836:	d15e      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002838:	3004      	adds	r0, #4
 800283a:	f7ff ff61 	bl	8002700 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800283e:	4605      	mov	r5, r0
 8002840:	2800      	cmp	r0, #0
 8002842:	d04d      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002844:	6823      	ldr	r3, [r4, #0]
 8002846:	039e      	lsls	r6, r3, #14
 8002848:	d563      	bpl.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800284a:	4eb8      	ldr	r6, [pc, #736]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800284c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800284e:	00d8      	lsls	r0, r3, #3
 8002850:	f140 8160 	bpl.w	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    FlagStatus       pwrclkchanged = RESET;
 8002854:	2700      	movs	r7, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002856:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 8002b30 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800285a:	f8d8 3000 	ldr.w	r3, [r8]
 800285e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002862:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8002866:	f7fe f96b 	bl	8000b40 <HAL_GetTick>
 800286a:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800286c:	f8d8 3000 	ldr.w	r3, [r8]
 8002870:	05d9      	lsls	r1, r3, #23
 8002872:	d542      	bpl.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
    if(ret == HAL_OK)
 8002874:	2d00      	cmp	r5, #0
 8002876:	d147      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002878:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800287c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002880:	d014      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x94>
 8002882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002884:	4293      	cmp	r3, r2
 8002886:	d011      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x94>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002888:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800288c:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002890:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002894:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002898:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800289c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028a4:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80028a8:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028ac:	07da      	lsls	r2, r3, #31
 80028ae:	d509      	bpl.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        tickstart = HAL_GetTick();
 80028b0:	f7fe f946 	bl	8000b40 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b4:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80028b8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ba:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80028be:	079b      	lsls	r3, r3, #30
 80028c0:	f140 80ff 	bpl.w	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028c4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80028c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80028ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 80028d4:	e018      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80028d6:	4a95      	ldr	r2, [pc, #596]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80028d8:	68d3      	ldr	r3, [r2, #12]
 80028da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028de:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028e0:	4a92      	ldr	r2, [pc, #584]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80028e2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80028e4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80028e8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80028ec:	430b      	orrs	r3, r1
 80028ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80028f2:	2500      	movs	r5, #0
 80028f4:	e7a6      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 80028f6:	2501      	movs	r5, #1
 80028f8:	e7a4      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fa:	f7fe f921 	bl	8000b40 <HAL_GetTick>
 80028fe:	eba0 0009 	sub.w	r0, r0, r9
 8002902:	2802      	cmp	r0, #2
 8002904:	d9b2      	bls.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x54>
        ret = HAL_TIMEOUT;
 8002906:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002908:	b11f      	cbz	r7, 8002912 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
 800290a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800290c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002910:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002912:	6823      	ldr	r3, [r4, #0]
 8002914:	07df      	lsls	r7, r3, #31
 8002916:	d508      	bpl.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002918:	4984      	ldr	r1, [pc, #528]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800291a:	6a20      	ldr	r0, [r4, #32]
 800291c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002920:	f022 0203 	bic.w	r2, r2, #3
 8002924:	4302      	orrs	r2, r0
 8002926:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800292a:	079e      	lsls	r6, r3, #30
 800292c:	d508      	bpl.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800292e:	497f      	ldr	r1, [pc, #508]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002930:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002932:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002936:	f022 020c 	bic.w	r2, r2, #12
 800293a:	4302      	orrs	r2, r0
 800293c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002940:	0758      	lsls	r0, r3, #29
 8002942:	d508      	bpl.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002944:	4979      	ldr	r1, [pc, #484]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002946:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002948:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800294c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002950:	4302      	orrs	r2, r0
 8002952:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002956:	0719      	lsls	r1, r3, #28
 8002958:	d508      	bpl.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800295a:	4974      	ldr	r1, [pc, #464]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800295c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800295e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002962:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002966:	4302      	orrs	r2, r0
 8002968:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800296c:	069a      	lsls	r2, r3, #26
 800296e:	d508      	bpl.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002970:	496e      	ldr	r1, [pc, #440]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002972:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002974:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002978:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800297c:	4302      	orrs	r2, r0
 800297e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002982:	059f      	lsls	r7, r3, #22
 8002984:	d508      	bpl.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002986:	4969      	ldr	r1, [pc, #420]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002988:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800298a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800298e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002992:	4302      	orrs	r2, r0
 8002994:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002998:	055e      	lsls	r6, r3, #21
 800299a:	d508      	bpl.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800299c:	4963      	ldr	r1, [pc, #396]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800299e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80029a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80029a4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80029a8:	4302      	orrs	r2, r0
 80029aa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ae:	0658      	lsls	r0, r3, #25
 80029b0:	d508      	bpl.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029b2:	495e      	ldr	r1, [pc, #376]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80029b4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80029b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80029ba:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80029be:	4302      	orrs	r2, r0
 80029c0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029c4:	0619      	lsls	r1, r3, #24
 80029c6:	d508      	bpl.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029c8:	4958      	ldr	r1, [pc, #352]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80029ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80029cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80029d0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80029d4:	4302      	orrs	r2, r0
 80029d6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029da:	05da      	lsls	r2, r3, #23
 80029dc:	d508      	bpl.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029de:	4953      	ldr	r1, [pc, #332]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80029e0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80029e2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80029e6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80029ea:	4302      	orrs	r2, r0
 80029ec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029f0:	02df      	lsls	r7, r3, #11
 80029f2:	d508      	bpl.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029f4:	494d      	ldr	r1, [pc, #308]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80029f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80029f8:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 80029fc:	f022 0203 	bic.w	r2, r2, #3
 8002a00:	4302      	orrs	r2, r0
 8002a02:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a06:	049e      	lsls	r6, r3, #18
 8002a08:	d50f      	bpl.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a0a:	4a48      	ldr	r2, [pc, #288]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002a0c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002a0e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a12:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002a16:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a18:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a20:	d157      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a22:	68d3      	ldr	r3, [r2, #12]
 8002a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a28:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	0318      	lsls	r0, r3, #12
 8002a2e:	d50f      	bpl.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a30:	4a3e      	ldr	r2, [pc, #248]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002a32:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002a34:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a38:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002a3c:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a3e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a42:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a46:	d14f      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a48:	68d3      	ldr	r3, [r2, #12]
 8002a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a4e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	0359      	lsls	r1, r3, #13
 8002a54:	d50f      	bpl.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a56:	4a35      	ldr	r2, [pc, #212]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002a58:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002a5a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a5e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002a62:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a64:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a6c:	d147      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a6e:	68d3      	ldr	r3, [r2, #12]
 8002a70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a74:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	045a      	lsls	r2, r3, #17
 8002a7a:	d512      	bpl.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a7c:	492b      	ldr	r1, [pc, #172]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002a7e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002a80:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a84:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002a88:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a8a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a94:	2102      	movs	r1, #2
 8002a96:	1d20      	adds	r0, r4, #4
 8002a98:	f7ff fe32 	bl	8002700 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002a9c:	2800      	cmp	r0, #0
 8002a9e:	bf18      	it	ne
 8002aa0:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	03db      	lsls	r3, r3, #15
 8002aa6:	d508      	bpl.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002aa8:	4a20      	ldr	r2, [pc, #128]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002aaa:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002aac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002ab0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002aba:	4628      	mov	r0, r5
 8002abc:	b003      	add	sp, #12
 8002abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac2:	f7fe f83d 	bl	8000b40 <HAL_GetTick>
 8002ac6:	eba0 0008 	sub.w	r0, r0, r8
 8002aca:	4548      	cmp	r0, r9
 8002acc:	f67f aef5 	bls.w	80028ba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002ad0:	e719      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0xee>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ad2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002ad6:	d1a8      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x212>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ad8:	2101      	movs	r1, #1
 8002ada:	1d20      	adds	r0, r4, #4
 8002adc:	f7ff fe10 	bl	8002700 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	bf18      	it	ne
 8002ae4:	4605      	movne	r5, r0
 8002ae6:	e7a0      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x212>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ae8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002aec:	d1b0      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x238>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aee:	2101      	movs	r1, #1
 8002af0:	1d20      	adds	r0, r4, #4
 8002af2:	f7ff fe05 	bl	8002700 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002af6:	2800      	cmp	r0, #0
 8002af8:	bf18      	it	ne
 8002afa:	4605      	movne	r5, r0
 8002afc:	e7a8      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x238>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002afe:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002b02:	d1b8      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b04:	2101      	movs	r1, #1
 8002b06:	1d20      	adds	r0, r4, #4
 8002b08:	f7ff fdfa 	bl	8002700 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	bf18      	it	ne
 8002b10:	4605      	movne	r5, r0
 8002b12:	e7b0      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b14:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	65b3      	str	r3, [r6, #88]	; 0x58
 8002b1c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b26:	2701      	movs	r7, #1
 8002b28:	e695      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40007000 	.word	0x40007000

08002b34 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b34:	6a03      	ldr	r3, [r0, #32]
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b3c:	6a03      	ldr	r3, [r0, #32]
{
 8002b3e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b40:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b42:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b44:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b4a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002b4e:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b50:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002b52:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002b56:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b58:	4c12      	ldr	r4, [pc, #72]	; (8002ba4 <TIM_OC1_SetConfig+0x70>)
 8002b5a:	42a0      	cmp	r0, r4
 8002b5c:	d006      	beq.n	8002b6c <TIM_OC1_SetConfig+0x38>
 8002b5e:	4e12      	ldr	r6, [pc, #72]	; (8002ba8 <TIM_OC1_SetConfig+0x74>)
 8002b60:	42b0      	cmp	r0, r6
 8002b62:	d003      	beq.n	8002b6c <TIM_OC1_SetConfig+0x38>
 8002b64:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002b68:	42b0      	cmp	r0, r6
 8002b6a:	d114      	bne.n	8002b96 <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b6c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b6e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002b72:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b74:	42a0      	cmp	r0, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b76:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b7a:	d006      	beq.n	8002b8a <TIM_OC1_SetConfig+0x56>
 8002b7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ba8 <TIM_OC1_SetConfig+0x74>)
 8002b7e:	42a0      	cmp	r0, r4
 8002b80:	d003      	beq.n	8002b8a <TIM_OC1_SetConfig+0x56>
 8002b82:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002b86:	42a0      	cmp	r0, r4
 8002b88:	d105      	bne.n	8002b96 <TIM_OC1_SetConfig+0x62>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b8a:	694c      	ldr	r4, [r1, #20]
 8002b8c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b8e:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b92:	4334      	orrs	r4, r6
 8002b94:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b96:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b98:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b9a:	684a      	ldr	r2, [r1, #4]
 8002b9c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b9e:	6203      	str	r3, [r0, #32]
 8002ba0:	bd70      	pop	{r4, r5, r6, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40012c00 	.word	0x40012c00
 8002ba8:	40014000 	.word	0x40014000

08002bac <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bac:	6a03      	ldr	r3, [r0, #32]
 8002bae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bb2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb4:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb6:	6842      	ldr	r2, [r0, #4]
{
 8002bb8:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bba:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bbc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bbe:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002bc2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002bc6:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bc8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002bca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bd2:	4d0f      	ldr	r5, [pc, #60]	; (8002c10 <TIM_OC3_SetConfig+0x64>)
 8002bd4:	42a8      	cmp	r0, r5
 8002bd6:	d10e      	bne.n	8002bf6 <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bd8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bde:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002be2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002be6:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002be8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bea:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bee:	4335      	orrs	r5, r6
 8002bf0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8002bf4:	e005      	b.n	8002c02 <TIM_OC3_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf6:	4d07      	ldr	r5, [pc, #28]	; (8002c14 <TIM_OC3_SetConfig+0x68>)
 8002bf8:	42a8      	cmp	r0, r5
 8002bfa:	d0f4      	beq.n	8002be6 <TIM_OC3_SetConfig+0x3a>
 8002bfc:	4d06      	ldr	r5, [pc, #24]	; (8002c18 <TIM_OC3_SetConfig+0x6c>)
 8002bfe:	42a8      	cmp	r0, r5
 8002c00:	d0f1      	beq.n	8002be6 <TIM_OC3_SetConfig+0x3a>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c02:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c04:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002c06:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002c08:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c0a:	6203      	str	r3, [r0, #32]
}
 8002c0c:	bd70      	pop	{r4, r5, r6, pc}
 8002c0e:	bf00      	nop
 8002c10:	40012c00 	.word	0x40012c00
 8002c14:	40014000 	.word	0x40014000
 8002c18:	40014400 	.word	0x40014400

08002c1c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c1c:	6a03      	ldr	r3, [r0, #32]
 8002c1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c22:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c24:	6a02      	ldr	r2, [r0, #32]
{
 8002c26:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c2a:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c32:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c36:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c3a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002c3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c40:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c44:	4d0a      	ldr	r5, [pc, #40]	; (8002c70 <TIM_OC4_SetConfig+0x54>)
 8002c46:	42a8      	cmp	r0, r5
 8002c48:	d007      	beq.n	8002c5a <TIM_OC4_SetConfig+0x3e>
 8002c4a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002c4e:	42a8      	cmp	r0, r5
 8002c50:	d003      	beq.n	8002c5a <TIM_OC4_SetConfig+0x3e>
 8002c52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c56:	42a8      	cmp	r0, r5
 8002c58:	d104      	bne.n	8002c64 <TIM_OC4_SetConfig+0x48>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c5a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c5c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c60:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c64:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c66:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c68:	684b      	ldr	r3, [r1, #4]
 8002c6a:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c6c:	6202      	str	r2, [r0, #32]
 8002c6e:	bd30      	pop	{r4, r5, pc}
 8002c70:	40012c00 	.word	0x40012c00

08002c74 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002c74:	6a03      	ldr	r3, [r0, #32]
 8002c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7c:	6a02      	ldr	r2, [r0, #32]
{
 8002c7e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c80:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c82:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c84:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8002c8e:	432b      	orrs	r3, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002c90:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8002c92:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002c96:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c9a:	4d0b      	ldr	r5, [pc, #44]	; (8002cc8 <TIM_OC5_SetConfig+0x54>)
 8002c9c:	42a8      	cmp	r0, r5
 8002c9e:	d007      	beq.n	8002cb0 <TIM_OC5_SetConfig+0x3c>
 8002ca0:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002ca4:	42a8      	cmp	r0, r5
 8002ca6:	d003      	beq.n	8002cb0 <TIM_OC5_SetConfig+0x3c>
 8002ca8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002cac:	42a8      	cmp	r0, r5
 8002cae:	d104      	bne.n	8002cba <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002cb0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002cb2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002cb6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cba:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002cbc:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002cbe:	684b      	ldr	r3, [r1, #4]
 8002cc0:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc2:	6202      	str	r2, [r0, #32]
 8002cc4:	bd30      	pop	{r4, r5, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40012c00 	.word	0x40012c00

08002ccc <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002ccc:	6a03      	ldr	r3, [r0, #32]
 8002cce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002cd2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cd4:	6a02      	ldr	r2, [r0, #32]
{
 8002cd6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cd8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002cda:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cdc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ce6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002cea:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002cec:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002cf0:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cf4:	4d0a      	ldr	r5, [pc, #40]	; (8002d20 <TIM_OC6_SetConfig+0x54>)
 8002cf6:	42a8      	cmp	r0, r5
 8002cf8:	d007      	beq.n	8002d0a <TIM_OC6_SetConfig+0x3e>
 8002cfa:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002cfe:	42a8      	cmp	r0, r5
 8002d00:	d003      	beq.n	8002d0a <TIM_OC6_SetConfig+0x3e>
 8002d02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d06:	42a8      	cmp	r0, r5
 8002d08:	d104      	bne.n	8002d14 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002d0a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002d0c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002d10:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d14:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d16:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002d18:	684b      	ldr	r3, [r1, #4]
 8002d1a:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d1c:	6202      	str	r2, [r0, #32]
 8002d1e:	bd30      	pop	{r4, r5, pc}
 8002d20:	40012c00 	.word	0x40012c00

08002d24 <HAL_TIM_OC_DelayElapsedCallback>:
 8002d24:	4770      	bx	lr

08002d26 <HAL_TIM_IC_CaptureCallback>:
 8002d26:	4770      	bx	lr

08002d28 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002d28:	4770      	bx	lr

08002d2a <HAL_TIM_TriggerCallback>:
 8002d2a:	4770      	bx	lr

08002d2c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d2c:	6803      	ldr	r3, [r0, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	0791      	lsls	r1, r2, #30
{
 8002d32:	b510      	push	{r4, lr}
 8002d34:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d36:	d50f      	bpl.n	8002d58 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	0792      	lsls	r2, r2, #30
 8002d3c:	d50c      	bpl.n	8002d58 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d3e:	f06f 0202 	mvn.w	r2, #2
 8002d42:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d44:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d46:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d48:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d4a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d4c:	f000 8085 	beq.w	8002e5a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002d50:	f7ff ffe9 	bl	8002d26 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d54:	2300      	movs	r3, #0
 8002d56:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	691a      	ldr	r2, [r3, #16]
 8002d5c:	0752      	lsls	r2, r2, #29
 8002d5e:	d510      	bpl.n	8002d82 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	0750      	lsls	r0, r2, #29
 8002d64:	d50d      	bpl.n	8002d82 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d66:	f06f 0204 	mvn.w	r2, #4
 8002d6a:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d6c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d6e:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d70:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d74:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002d76:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d78:	d075      	beq.n	8002e66 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7a:	f7ff ffd4 	bl	8002d26 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	0711      	lsls	r1, r2, #28
 8002d88:	d50f      	bpl.n	8002daa <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	0712      	lsls	r2, r2, #28
 8002d8e:	d50c      	bpl.n	8002daa <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d90:	f06f 0208 	mvn.w	r2, #8
 8002d94:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d96:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d98:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d9a:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d9c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002da0:	d067      	beq.n	8002e72 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002da2:	f7ff ffc0 	bl	8002d26 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da6:	2300      	movs	r3, #0
 8002da8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	06d0      	lsls	r0, r2, #27
 8002db0:	d510      	bpl.n	8002dd4 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	06d1      	lsls	r1, r2, #27
 8002db6:	d50d      	bpl.n	8002dd4 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002db8:	f06f 0210 	mvn.w	r2, #16
 8002dbc:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dbe:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dc0:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dc2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dc6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dca:	d058      	beq.n	8002e7e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002dcc:	f7ff ffab 	bl	8002d26 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	07d2      	lsls	r2, r2, #31
 8002dda:	d508      	bpl.n	8002dee <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	07d0      	lsls	r0, r2, #31
 8002de0:	d505      	bpl.n	8002dee <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002de2:	f06f 0201 	mvn.w	r2, #1
 8002de6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002de8:	4620      	mov	r0, r4
 8002dea:	f7fd fbeb 	bl	80005c4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	0611      	lsls	r1, r2, #24
 8002df4:	d508      	bpl.n	8002e08 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	0612      	lsls	r2, r2, #24
 8002dfa:	d505      	bpl.n	8002e08 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e00:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002e02:	4620      	mov	r0, r4
 8002e04:	f000 fbc5 	bl	8003592 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e08:	6823      	ldr	r3, [r4, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	05d0      	lsls	r0, r2, #23
 8002e0e:	d508      	bpl.n	8002e22 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	0611      	lsls	r1, r2, #24
 8002e14:	d505      	bpl.n	8002e22 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e1a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	f000 fbb9 	bl	8003594 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	0652      	lsls	r2, r2, #25
 8002e28:	d508      	bpl.n	8002e3c <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	0650      	lsls	r0, r2, #25
 8002e2e:	d505      	bpl.n	8002e3c <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e34:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002e36:	4620      	mov	r0, r4
 8002e38:	f7ff ff77 	bl	8002d2a <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	0691      	lsls	r1, r2, #26
 8002e42:	d522      	bpl.n	8002e8a <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	0692      	lsls	r2, r2, #26
 8002e48:	d51f      	bpl.n	8002e8a <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e4a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002e4e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e50:	611a      	str	r2, [r3, #16]
}
 8002e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002e56:	f000 bb9b 	b.w	8003590 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5a:	f7ff ff63 	bl	8002d24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e5e:	4620      	mov	r0, r4
 8002e60:	f7ff ff62 	bl	8002d28 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e64:	e776      	b.n	8002d54 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e66:	f7ff ff5d 	bl	8002d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	f7ff ff5c 	bl	8002d28 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e70:	e785      	b.n	8002d7e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e72:	f7ff ff57 	bl	8002d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e76:	4620      	mov	r0, r4
 8002e78:	f7ff ff56 	bl	8002d28 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e7c:	e793      	b.n	8002da6 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7e:	f7ff ff51 	bl	8002d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e82:	4620      	mov	r0, r4
 8002e84:	f7ff ff50 	bl	8002d28 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e88:	e7a2      	b.n	8002dd0 <HAL_TIM_IRQHandler+0xa4>
 8002e8a:	bd10      	pop	{r4, pc}

08002e8c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e8c:	4a1d      	ldr	r2, [pc, #116]	; (8002f04 <TIM_Base_SetConfig+0x78>)
  tmpcr1 = TIMx->CR1;
 8002e8e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e90:	4290      	cmp	r0, r2
{
 8002e92:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e94:	d005      	beq.n	8002ea2 <TIM_Base_SetConfig+0x16>
 8002e96:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e9a:	d002      	beq.n	8002ea2 <TIM_Base_SetConfig+0x16>
 8002e9c:	4c1a      	ldr	r4, [pc, #104]	; (8002f08 <TIM_Base_SetConfig+0x7c>)
 8002e9e:	42a0      	cmp	r0, r4
 8002ea0:	d10c      	bne.n	8002ebc <TIM_Base_SetConfig+0x30>
    tmpcr1 |= Structure->CounterMode;
 8002ea2:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ea8:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8002eaa:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eae:	d00c      	beq.n	8002eca <TIM_Base_SetConfig+0x3e>
 8002eb0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002eb4:	d009      	beq.n	8002eca <TIM_Base_SetConfig+0x3e>
 8002eb6:	4a14      	ldr	r2, [pc, #80]	; (8002f08 <TIM_Base_SetConfig+0x7c>)
 8002eb8:	4290      	cmp	r0, r2
 8002eba:	d006      	beq.n	8002eca <TIM_Base_SetConfig+0x3e>
 8002ebc:	4a13      	ldr	r2, [pc, #76]	; (8002f0c <TIM_Base_SetConfig+0x80>)
 8002ebe:	4290      	cmp	r0, r2
 8002ec0:	d003      	beq.n	8002eca <TIM_Base_SetConfig+0x3e>
 8002ec2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ec6:	4290      	cmp	r0, r2
 8002ec8:	d103      	bne.n	8002ed2 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eca:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ed0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ed2:	694a      	ldr	r2, [r1, #20]
 8002ed4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ed8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002eda:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002edc:	688b      	ldr	r3, [r1, #8]
 8002ede:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002ee0:	680b      	ldr	r3, [r1, #0]
 8002ee2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ee4:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <TIM_Base_SetConfig+0x78>)
 8002ee6:	4298      	cmp	r0, r3
 8002ee8:	d007      	beq.n	8002efa <TIM_Base_SetConfig+0x6e>
 8002eea:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002eee:	4298      	cmp	r0, r3
 8002ef0:	d003      	beq.n	8002efa <TIM_Base_SetConfig+0x6e>
 8002ef2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ef6:	4298      	cmp	r0, r3
 8002ef8:	d101      	bne.n	8002efe <TIM_Base_SetConfig+0x72>
    TIMx->RCR = Structure->RepetitionCounter;
 8002efa:	690b      	ldr	r3, [r1, #16]
 8002efc:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002efe:	2301      	movs	r3, #1
 8002f00:	6143      	str	r3, [r0, #20]
 8002f02:	bd10      	pop	{r4, pc}
 8002f04:	40012c00 	.word	0x40012c00
 8002f08:	40000400 	.word	0x40000400
 8002f0c:	40014000 	.word	0x40014000

08002f10 <HAL_TIM_Base_Init>:
{
 8002f10:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002f12:	4604      	mov	r4, r0
 8002f14:	b1a0      	cbz	r0, 8002f40 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002f16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f1e:	b91b      	cbnz	r3, 8002f28 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002f20:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002f24:	f002 fcde 	bl	80058e4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f2e:	6820      	ldr	r0, [r4, #0]
 8002f30:	1d21      	adds	r1, r4, #4
 8002f32:	f7ff ffab 	bl	8002e8c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002f36:	2301      	movs	r3, #1
 8002f38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f40:	2001      	movs	r0, #1
}
 8002f42:	bd10      	pop	{r4, pc}

08002f44 <HAL_TIM_PWM_Init>:
{
 8002f44:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002f46:	4604      	mov	r4, r0
 8002f48:	b1a0      	cbz	r0, 8002f74 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f4e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f52:	b91b      	cbnz	r3, 8002f5c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002f54:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002f58:	f002 fc2c 	bl	80057b4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f62:	6820      	ldr	r0, [r4, #0]
 8002f64:	1d21      	adds	r1, r4, #4
 8002f66:	f7ff ff91 	bl	8002e8c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002f70:	2000      	movs	r0, #0
 8002f72:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f74:	2001      	movs	r0, #1
}
 8002f76:	bd10      	pop	{r4, pc}

08002f78 <HAL_TIM_IC_Init>:
{
 8002f78:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	b1a0      	cbz	r0, 8002fa8 <HAL_TIM_IC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f86:	b91b      	cbnz	r3, 8002f90 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002f88:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8002f8c:	f002 fc48 	bl	8005820 <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	2302      	movs	r3, #2
 8002f92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f96:	6820      	ldr	r0, [r4, #0]
 8002f98:	1d21      	adds	r1, r4, #4
 8002f9a:	f7ff ff77 	bl	8002e8c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002fa8:	2001      	movs	r0, #1
}
 8002faa:	bd10      	pop	{r4, pc}

08002fac <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fac:	6a03      	ldr	r3, [r0, #32]
 8002fae:	f023 0310 	bic.w	r3, r3, #16
 8002fb2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002fb4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002fb6:	6842      	ldr	r2, [r0, #4]
{
 8002fb8:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8002fba:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fbc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fbe:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8002fc2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fc6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fca:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002fcc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fd0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fd4:	4d0e      	ldr	r5, [pc, #56]	; (8003010 <TIM_OC2_SetConfig+0x64>)
 8002fd6:	42a8      	cmp	r0, r5
 8002fd8:	d10e      	bne.n	8002ff8 <TIM_OC2_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fda:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fe0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fe8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fea:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ff0:	4335      	orrs	r5, r6
 8002ff2:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8002ff6:	e005      	b.n	8003004 <TIM_OC2_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff8:	4d06      	ldr	r5, [pc, #24]	; (8003014 <TIM_OC2_SetConfig+0x68>)
 8002ffa:	42a8      	cmp	r0, r5
 8002ffc:	d0f4      	beq.n	8002fe8 <TIM_OC2_SetConfig+0x3c>
 8002ffe:	4d06      	ldr	r5, [pc, #24]	; (8003018 <TIM_OC2_SetConfig+0x6c>)
 8003000:	42a8      	cmp	r0, r5
 8003002:	d0f1      	beq.n	8002fe8 <TIM_OC2_SetConfig+0x3c>
  TIMx->CR2 = tmpcr2;
 8003004:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003006:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003008:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800300a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800300c:	6203      	str	r3, [r0, #32]
}
 800300e:	bd70      	pop	{r4, r5, r6, pc}
 8003010:	40012c00 	.word	0x40012c00
 8003014:	40014000 	.word	0x40014000
 8003018:	40014400 	.word	0x40014400

0800301c <HAL_TIM_PWM_ConfigChannel>:
{
 800301c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800301e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003022:	2b01      	cmp	r3, #1
{
 8003024:	4604      	mov	r4, r0
 8003026:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800302a:	d010      	beq.n	800304e <HAL_TIM_PWM_ConfigChannel+0x32>
 800302c:	2301      	movs	r3, #1
  switch (Channel)
 800302e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8003030:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003034:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8003038:	d043      	beq.n	80030c2 <HAL_TIM_PWM_ConfigChannel+0xa6>
 800303a:	d809      	bhi.n	8003050 <HAL_TIM_PWM_ConfigChannel+0x34>
 800303c:	b1fa      	cbz	r2, 800307e <HAL_TIM_PWM_ConfigChannel+0x62>
 800303e:	2a04      	cmp	r2, #4
 8003040:	d02e      	beq.n	80030a0 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 8003042:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003044:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003046:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800304a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800304e:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8003050:	2a10      	cmp	r2, #16
 8003052:	d047      	beq.n	80030e4 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8003054:	2a14      	cmp	r2, #20
 8003056:	d056      	beq.n	8003106 <HAL_TIM_PWM_ConfigChannel+0xea>
 8003058:	2a0c      	cmp	r2, #12
 800305a:	d1f2      	bne.n	8003042 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800305c:	6820      	ldr	r0, [r4, #0]
 800305e:	f7ff fddd 	bl	8002c1c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003062:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003064:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003066:	69da      	ldr	r2, [r3, #28]
 8003068:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800306c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800306e:	69da      	ldr	r2, [r3, #28]
 8003070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800307c:	e030      	b.n	80030e0 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800307e:	6820      	ldr	r0, [r4, #0]
 8003080:	f7ff fd58 	bl	8002b34 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003084:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003086:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	f042 0208 	orr.w	r2, r2, #8
 800308e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	f022 0204 	bic.w	r2, r2, #4
 8003096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800309c:	619a      	str	r2, [r3, #24]
      break;
 800309e:	e7d0      	b.n	8003042 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030a0:	6820      	ldr	r0, [r4, #0]
 80030a2:	f7ff ff83 	bl	8002fac <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030a6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030a8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030aa:	699a      	ldr	r2, [r3, #24]
 80030ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030b2:	699a      	ldr	r2, [r3, #24]
 80030b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030c0:	e7ec      	b.n	800309c <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030c2:	6820      	ldr	r0, [r4, #0]
 80030c4:	f7ff fd72 	bl	8002bac <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030c8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030ca:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030cc:	69da      	ldr	r2, [r3, #28]
 80030ce:	f042 0208 	orr.w	r2, r2, #8
 80030d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	f022 0204 	bic.w	r2, r2, #4
 80030da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030e0:	61da      	str	r2, [r3, #28]
      break;
 80030e2:	e7ae      	b.n	8003042 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80030e4:	6820      	ldr	r0, [r4, #0]
 80030e6:	f7ff fdc5 	bl	8002c74 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80030ea:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030ec:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80030ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030f0:	f042 0208 	orr.w	r2, r2, #8
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80030f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030f8:	f022 0204 	bic.w	r2, r2, #4
 80030fc:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003100:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003102:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003104:	e79d      	b.n	8003042 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003106:	6820      	ldr	r0, [r4, #0]
 8003108:	f7ff fde0 	bl	8002ccc <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800310c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800310e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003116:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800311a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003120:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003122:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003126:	e7ec      	b.n	8003102 <HAL_TIM_PWM_ConfigChannel+0xe6>

08003128 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003128:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800312a:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800312c:	4e12      	ldr	r6, [pc, #72]	; (8003178 <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800312e:	f024 0401 	bic.w	r4, r4, #1
 8003132:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003134:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8003136:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003138:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800313a:	d00a      	beq.n	8003152 <TIM_TI1_SetConfig+0x2a>
 800313c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003140:	d007      	beq.n	8003152 <TIM_TI1_SetConfig+0x2a>
 8003142:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8003146:	42b0      	cmp	r0, r6
 8003148:	d003      	beq.n	8003152 <TIM_TI1_SetConfig+0x2a>
 800314a:	f506 369e 	add.w	r6, r6, #80896	; 0x13c00
 800314e:	42b0      	cmp	r0, r6
 8003150:	d10f      	bne.n	8003172 <TIM_TI1_SetConfig+0x4a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003152:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8003156:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003158:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800315a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800315e:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003160:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003164:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003168:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800316a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800316c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800316e:	6201      	str	r1, [r0, #32]
}
 8003170:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003172:	f044 0201 	orr.w	r2, r4, #1
 8003176:	e7ef      	b.n	8003158 <TIM_TI1_SetConfig+0x30>
 8003178:	40012c00 	.word	0x40012c00

0800317c <HAL_TIM_IC_ConfigChannel>:
{
 800317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800317e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003182:	2b01      	cmp	r3, #1
{
 8003184:	4604      	mov	r4, r0
 8003186:	460d      	mov	r5, r1
 8003188:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800318c:	d019      	beq.n	80031c2 <HAL_TIM_IC_ConfigChannel+0x46>
 800318e:	2301      	movs	r3, #1
 8003190:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003194:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 8003198:	b9a2      	cbnz	r2, 80031c4 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 800319a:	68cb      	ldr	r3, [r1, #12]
 800319c:	6820      	ldr	r0, [r4, #0]
 800319e:	c906      	ldmia	r1, {r1, r2}
 80031a0:	f7ff ffc2 	bl	8003128 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80031a4:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80031a6:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	f022 020c 	bic.w	r2, r2, #12
 80031ae:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80031b6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80031b8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80031ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80031be:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80031c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 80031c4:	2a04      	cmp	r2, #4
 80031c6:	688e      	ldr	r6, [r1, #8]
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	68e8      	ldr	r0, [r5, #12]
 80031cc:	c982      	ldmia	r1, {r1, r7}
 80031ce:	d11f      	bne.n	8003210 <HAL_TIM_IC_ConfigChannel+0x94>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031d0:	6a1a      	ldr	r2, [r3, #32]
 80031d2:	f022 0210 	bic.w	r2, r2, #16
 80031d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031d8:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 80031da:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80031dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80031e0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80031e4:	0300      	lsls	r0, r0, #12
 80031e6:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031e8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80031ec:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80031ee:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80031f0:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031f4:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80031f8:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031fc:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003204:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003206:	699a      	ldr	r2, [r3, #24]
 8003208:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 800320c:	619e      	str	r6, [r3, #24]
 800320e:	e7d2      	b.n	80031b6 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8003210:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003212:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8003214:	d11c      	bne.n	8003250 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003216:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800321a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800321c:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 800321e:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003220:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8003224:	433a      	orrs	r2, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003226:	0100      	lsls	r0, r0, #4
 8003228:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800322a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800322e:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003230:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003232:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003236:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800323a:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800323c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800323e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003240:	69da      	ldr	r2, [r3, #28]
 8003242:	f022 020c 	bic.w	r2, r2, #12
 8003246:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003248:	69da      	ldr	r2, [r3, #28]
 800324a:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800324c:	61de      	str	r6, [r3, #28]
 800324e:	e7b2      	b.n	80031b6 <HAL_TIM_IC_ConfigChannel+0x3a>
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003250:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003254:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003256:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8003258:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800325a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800325e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003262:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003264:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003268:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800326a:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800326c:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800326e:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003272:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003276:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003278:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 800327a:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003282:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003284:	69da      	ldr	r2, [r3, #28]
 8003286:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 800328a:	e7df      	b.n	800324c <HAL_TIM_IC_ConfigChannel+0xd0>

0800328c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800328c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800328e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003290:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003292:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003296:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800329a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800329c:	6083      	str	r3, [r0, #8]
 800329e:	bd10      	pop	{r4, pc}

080032a0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80032a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80032a4:	2b01      	cmp	r3, #1
{
 80032a6:	b570      	push	{r4, r5, r6, lr}
 80032a8:	4604      	mov	r4, r0
 80032aa:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80032ae:	d017      	beq.n	80032e0 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80032b4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80032b6:	2301      	movs	r3, #1
 80032b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80032bc:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032be:	4b48      	ldr	r3, [pc, #288]	; (80033e0 <HAL_TIM_ConfigClockSource+0x140>)
 80032c0:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80032c2:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80032c4:	680b      	ldr	r3, [r1, #0]
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d072      	beq.n	80033b0 <HAL_TIM_ConfigClockSource+0x110>
 80032ca:	d815      	bhi.n	80032f8 <HAL_TIM_ConfigClockSource+0x58>
 80032cc:	2b10      	cmp	r3, #16
 80032ce:	d00c      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x4a>
 80032d0:	d807      	bhi.n	80032e2 <HAL_TIM_ConfigClockSource+0x42>
 80032d2:	b153      	cbz	r3, 80032ea <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 80032d4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80032d6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80032d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80032dc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80032e0:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	d001      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x4a>
 80032e6:	2b30      	cmp	r3, #48	; 0x30
 80032e8:	d1f4      	bne.n	80032d4 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 80032ea:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ec:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80032f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032f4:	4313      	orrs	r3, r2
 80032f6:	e033      	b.n	8003360 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 80032f8:	2b70      	cmp	r3, #112	; 0x70
 80032fa:	d033      	beq.n	8003364 <HAL_TIM_ConfigClockSource+0xc4>
 80032fc:	d81b      	bhi.n	8003336 <HAL_TIM_ConfigClockSource+0x96>
 80032fe:	2b50      	cmp	r3, #80	; 0x50
 8003300:	d03f      	beq.n	8003382 <HAL_TIM_ConfigClockSource+0xe2>
 8003302:	2b60      	cmp	r3, #96	; 0x60
 8003304:	d1e6      	bne.n	80032d4 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003306:	684d      	ldr	r5, [r1, #4]
 8003308:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800330a:	6a01      	ldr	r1, [r0, #32]
 800330c:	f021 0110 	bic.w	r1, r1, #16
 8003310:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003312:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003314:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003316:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800331a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800331e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003322:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003326:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003328:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800332a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800332c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003330:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8003334:	e014      	b.n	8003360 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 8003336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333a:	d00c      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0xb6>
 800333c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003340:	d1c8      	bne.n	80032d4 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8003342:	68cb      	ldr	r3, [r1, #12]
 8003344:	684a      	ldr	r2, [r1, #4]
 8003346:	6889      	ldr	r1, [r1, #8]
 8003348:	f7ff ffa0 	bl	800328c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800334c:	6822      	ldr	r2, [r4, #0]
 800334e:	6893      	ldr	r3, [r2, #8]
 8003350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003354:	e013      	b.n	800337e <HAL_TIM_ConfigClockSource+0xde>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003356:	6883      	ldr	r3, [r0, #8]
 8003358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335c:	f023 0307 	bic.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003360:	6083      	str	r3, [r0, #8]
 8003362:	e7b7      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8003364:	68cb      	ldr	r3, [r1, #12]
 8003366:	684a      	ldr	r2, [r1, #4]
 8003368:	6889      	ldr	r1, [r1, #8]
 800336a:	f7ff ff8f 	bl	800328c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800336e:	6822      	ldr	r2, [r4, #0]
 8003370:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003376:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800337a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800337e:	6093      	str	r3, [r2, #8]
      break;
 8003380:	e7a8      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003382:	684a      	ldr	r2, [r1, #4]
 8003384:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003386:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003388:	6a05      	ldr	r5, [r0, #32]
 800338a:	f025 0501 	bic.w	r5, r5, #1
 800338e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003390:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003392:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800339a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800339e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80033a0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80033a2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80033a4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80033a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033aa:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 80033ae:	e7d7      	b.n	8003360 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b0:	684a      	ldr	r2, [r1, #4]
 80033b2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80033b4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033b6:	6a05      	ldr	r5, [r0, #32]
 80033b8:	f025 0501 	bic.w	r5, r5, #1
 80033bc:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033be:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033c0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033c8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80033cc:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80033ce:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80033d0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80033d2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80033d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033d8:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80033dc:	e7c0      	b.n	8003360 <HAL_TIM_ConfigClockSource+0xc0>
 80033de:	bf00      	nop
 80033e0:	fffe0088 	.word	0xfffe0088

080033e4 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033e4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033e6:	f001 011f 	and.w	r1, r1, #31
{
 80033ea:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033ec:	2401      	movs	r4, #1
 80033ee:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80033f0:	ea23 0304 	bic.w	r3, r3, r4
 80033f4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033f6:	6a03      	ldr	r3, [r0, #32]
 80033f8:	408a      	lsls	r2, r1
 80033fa:	431a      	orrs	r2, r3
 80033fc:	6202      	str	r2, [r0, #32]
 80033fe:	bd10      	pop	{r4, pc}

08003400 <HAL_TIM_PWM_Start>:
{
 8003400:	b510      	push	{r4, lr}
 8003402:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003404:	2201      	movs	r2, #1
 8003406:	6800      	ldr	r0, [r0, #0]
 8003408:	f7ff ffec 	bl	80033e4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	4a10      	ldr	r2, [pc, #64]	; (8003450 <HAL_TIM_PWM_Start+0x50>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d017      	beq.n	8003444 <HAL_TIM_PWM_Start+0x44>
 8003414:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8003418:	4293      	cmp	r3, r2
 800341a:	d013      	beq.n	8003444 <HAL_TIM_PWM_Start+0x44>
 800341c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003420:	4293      	cmp	r3, r2
 8003422:	d00f      	beq.n	8003444 <HAL_TIM_PWM_Start+0x44>
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8003424:	6899      	ldr	r1, [r3, #8]
 8003426:	480b      	ldr	r0, [pc, #44]	; (8003454 <HAL_TIM_PWM_Start+0x54>)
 8003428:	4001      	ands	r1, r0
 800342a:	2906      	cmp	r1, #6
 800342c:	d008      	beq.n	8003440 <HAL_TIM_PWM_Start+0x40>
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	4002      	ands	r2, r0
 8003432:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003436:	d003      	beq.n	8003440 <HAL_TIM_PWM_Start+0x40>
    __HAL_TIM_ENABLE(htim);
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]
}
 8003440:	2000      	movs	r0, #0
 8003442:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8003444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003446:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800344a:	645a      	str	r2, [r3, #68]	; 0x44
 800344c:	e7ea      	b.n	8003424 <HAL_TIM_PWM_Start+0x24>
 800344e:	bf00      	nop
 8003450:	40012c00 	.word	0x40012c00
 8003454:	00010007 	.word	0x00010007

08003458 <HAL_TIM_PWM_Stop>:
{
 8003458:	b510      	push	{r4, lr}
 800345a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800345c:	2200      	movs	r2, #0
 800345e:	6800      	ldr	r0, [r0, #0]
 8003460:	f7ff ffc0 	bl	80033e4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	4a16      	ldr	r2, [pc, #88]	; (80034c0 <HAL_TIM_PWM_Stop+0x68>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d007      	beq.n	800347c <HAL_TIM_PWM_Stop+0x24>
 800346c:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8003470:	4293      	cmp	r3, r2
 8003472:	d003      	beq.n	800347c <HAL_TIM_PWM_Stop+0x24>
 8003474:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003478:	4293      	cmp	r3, r2
 800347a:	d10d      	bne.n	8003498 <HAL_TIM_PWM_Stop+0x40>
    __HAL_TIM_MOE_DISABLE(htim);
 800347c:	6a19      	ldr	r1, [r3, #32]
 800347e:	f241 1211 	movw	r2, #4369	; 0x1111
 8003482:	4211      	tst	r1, r2
 8003484:	d108      	bne.n	8003498 <HAL_TIM_PWM_Stop+0x40>
 8003486:	6a19      	ldr	r1, [r3, #32]
 8003488:	f240 4244 	movw	r2, #1092	; 0x444
 800348c:	4211      	tst	r1, r2
 800348e:	bf02      	ittt	eq
 8003490:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8003492:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8003496:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8003498:	6a19      	ldr	r1, [r3, #32]
 800349a:	f241 1211 	movw	r2, #4369	; 0x1111
 800349e:	4211      	tst	r1, r2
 80034a0:	d108      	bne.n	80034b4 <HAL_TIM_PWM_Stop+0x5c>
 80034a2:	6a19      	ldr	r1, [r3, #32]
 80034a4:	f240 4244 	movw	r2, #1092	; 0x444
 80034a8:	4211      	tst	r1, r2
 80034aa:	d103      	bne.n	80034b4 <HAL_TIM_PWM_Stop+0x5c>
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	f022 0201 	bic.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80034ba:	2000      	movs	r0, #0
 80034bc:	bd10      	pop	{r4, pc}
 80034be:	bf00      	nop
 80034c0:	40012c00 	.word	0x40012c00

080034c4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80034c8:	2b01      	cmp	r3, #1
{
 80034ca:	b530      	push	{r4, r5, lr}
 80034cc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80034d0:	d01b      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0x46>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034d2:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034d4:	4d0e      	ldr	r5, [pc, #56]	; (8003510 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80034d6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80034da:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80034dc:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034de:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034e0:	bf02      	ittt	eq
 80034e2:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034e4:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034e8:	432b      	orreq	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034ea:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034ec:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80034ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034f2:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80034f4:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034f8:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034fa:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034fc:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 80034fe:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003500:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003504:	2300      	movs	r3, #0
 8003506:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800350a:	4618      	mov	r0, r3

  return HAL_OK;
}
 800350c:	bd30      	pop	{r4, r5, pc}
 800350e:	bf00      	nop
 8003510:	40012c00 	.word	0x40012c00

08003514 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003514:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003518:	2b01      	cmp	r3, #1
{
 800351a:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800351c:	d034      	beq.n	8003588 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800351e:	68cb      	ldr	r3, [r1, #12]
 8003520:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003522:	4c1a      	ldr	r4, [pc, #104]	; (800358c <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003528:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800352a:	684a      	ldr	r2, [r1, #4]
 800352c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003530:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003532:	680a      	ldr	r2, [r1, #0]
 8003534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003538:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800353a:	690a      	ldr	r2, [r1, #16]
 800353c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003540:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003542:	694a      	ldr	r2, [r1, #20]
 8003544:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003548:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800354a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800354c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003550:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003552:	698a      	ldr	r2, [r1, #24]
 8003554:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003558:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800355c:	6802      	ldr	r2, [r0, #0]
 800355e:	42a2      	cmp	r2, r4
 8003560:	d10c      	bne.n	800357c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003562:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003564:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003568:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800356c:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800356e:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003570:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003574:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003576:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800357a:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800357c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800357e:	2300      	movs	r3, #0
 8003580:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003584:	4618      	mov	r0, r3
 8003586:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8003588:	2002      	movs	r0, #2
}
 800358a:	bd10      	pop	{r4, pc}
 800358c:	40012c00 	.word	0x40012c00

08003590 <HAL_TIMEx_CommutationCallback>:
 8003590:	4770      	bx	lr

08003592 <HAL_TIMEx_BreakCallback>:
 8003592:	4770      	bx	lr

08003594 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003594:	4770      	bx	lr
	...

08003598 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8003598:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800359a:	69c1      	ldr	r1, [r0, #28]
{
 800359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035a0:	6883      	ldr	r3, [r0, #8]
 80035a2:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035a4:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035a6:	4303      	orrs	r3, r0
 80035a8:	6960      	ldr	r0, [r4, #20]
 80035aa:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035ac:	48af      	ldr	r0, [pc, #700]	; (800386c <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035ae:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035b0:	4028      	ands	r0, r5
 80035b2:	4303      	orrs	r3, r0
 80035b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035b6:	6853      	ldr	r3, [r2, #4]
 80035b8:	68e0      	ldr	r0, [r4, #12]
 80035ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035be:	4303      	orrs	r3, r0
 80035c0:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035c2:	4bab      	ldr	r3, [pc, #684]	; (8003870 <UART_SetConfig+0x2d8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035c4:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035c6:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035c8:	bf1c      	itt	ne
 80035ca:	6a23      	ldrne	r3, [r4, #32]
 80035cc:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035ce:	6893      	ldr	r3, [r2, #8]
 80035d0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80035d4:	4303      	orrs	r3, r0
 80035d6:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035d8:	4ba6      	ldr	r3, [pc, #664]	; (8003874 <UART_SetConfig+0x2dc>)
 80035da:	429a      	cmp	r2, r3
 80035dc:	d118      	bne.n	8003610 <UART_SetConfig+0x78>
 80035de:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80035e2:	4aa5      	ldr	r2, [pc, #660]	; (8003878 <UART_SetConfig+0x2e0>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ec:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80035f0:	5cd3      	ldrb	r3, [r2, r3]
 80035f2:	f040 8123 	bne.w	800383c <UART_SetConfig+0x2a4>
  {
    switch (clocksource)
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d877      	bhi.n	80036ea <UART_SetConfig+0x152>
 80035fa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80035fe:	0100      	.short	0x0100
 8003600:	00e200b3 	.word	0x00e200b3
 8003604:	011c0076 	.word	0x011c0076
 8003608:	00760076 	.word	0x00760076
 800360c:	00360076 	.word	0x00360076
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003610:	4b9a      	ldr	r3, [pc, #616]	; (800387c <UART_SetConfig+0x2e4>)
 8003612:	429a      	cmp	r2, r3
 8003614:	d107      	bne.n	8003626 <UART_SetConfig+0x8e>
 8003616:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800361a:	4a99      	ldr	r2, [pc, #612]	; (8003880 <UART_SetConfig+0x2e8>)
 800361c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003620:	f003 030c 	and.w	r3, r3, #12
 8003624:	e7e2      	b.n	80035ec <UART_SetConfig+0x54>
 8003626:	4b97      	ldr	r3, [pc, #604]	; (8003884 <UART_SetConfig+0x2ec>)
 8003628:	429a      	cmp	r2, r3
 800362a:	d123      	bne.n	8003674 <UART_SetConfig+0xdc>
 800362c:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003638:	2b10      	cmp	r3, #16
 800363a:	f000 80f9 	beq.w	8003830 <UART_SetConfig+0x298>
 800363e:	d80b      	bhi.n	8003658 <UART_SetConfig+0xc0>
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80d9 	beq.w	80037f8 <UART_SetConfig+0x260>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003646:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800364a:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800364e:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003652:	f000 80de 	beq.w	8003812 <UART_SetConfig+0x27a>
 8003656:	e091      	b.n	800377c <UART_SetConfig+0x1e4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003658:	2b20      	cmp	r3, #32
 800365a:	f000 80af 	beq.w	80037bc <UART_SetConfig+0x224>
 800365e:	2b30      	cmp	r3, #48	; 0x30
 8003660:	d1f1      	bne.n	8003646 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003662:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003666:	f040 80a1 	bne.w	80037ac <UART_SetConfig+0x214>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800366a:	6860      	ldr	r0, [r4, #4]
 800366c:	0843      	lsrs	r3, r0, #1
 800366e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003672:	e0ac      	b.n	80037ce <UART_SetConfig+0x236>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003674:	4b84      	ldr	r3, [pc, #528]	; (8003888 <UART_SetConfig+0x2f0>)
 8003676:	429a      	cmp	r2, r3
 8003678:	d11c      	bne.n	80036b4 <UART_SetConfig+0x11c>
 800367a:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003682:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003686:	2b40      	cmp	r3, #64	; 0x40
 8003688:	f000 80af 	beq.w	80037ea <UART_SetConfig+0x252>
 800368c:	d806      	bhi.n	800369c <UART_SetConfig+0x104>
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80a0 	beq.w	80037d4 <UART_SetConfig+0x23c>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003694:	4b76      	ldr	r3, [pc, #472]	; (8003870 <UART_SetConfig+0x2d8>)
 8003696:	429a      	cmp	r2, r3
 8003698:	d1d5      	bne.n	8003646 <UART_SetConfig+0xae>
 800369a:	e026      	b.n	80036ea <UART_SetConfig+0x152>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800369c:	2b80      	cmp	r3, #128	; 0x80
 800369e:	f000 808a 	beq.w	80037b6 <UART_SetConfig+0x21e>
 80036a2:	2bc0      	cmp	r3, #192	; 0xc0
 80036a4:	d1f6      	bne.n	8003694 <UART_SetConfig+0xfc>
  if (UART_INSTANCE_LOWPOWER(huart))
 80036a6:	4b72      	ldr	r3, [pc, #456]	; (8003870 <UART_SetConfig+0x2d8>)
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d1da      	bne.n	8003662 <UART_SetConfig+0xca>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80036ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 80036b0:	2308      	movs	r3, #8
 80036b2:	e015      	b.n	80036e0 <UART_SetConfig+0x148>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036b4:	4b6e      	ldr	r3, [pc, #440]	; (8003870 <UART_SetConfig+0x2d8>)
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d1c5      	bne.n	8003646 <UART_SetConfig+0xae>
 80036ba:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ca:	f000 808e 	beq.w	80037ea <UART_SetConfig+0x252>
 80036ce:	d9de      	bls.n	800368e <UART_SetConfig+0xf6>
 80036d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036d4:	d06f      	beq.n	80037b6 <UART_SetConfig+0x21e>
 80036d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036da:	e7e3      	b.n	80036a4 <UART_SetConfig+0x10c>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80036dc:	486b      	ldr	r0, [pc, #428]	; (800388c <UART_SetConfig+0x2f4>)
  if (UART_INSTANCE_LOWPOWER(huart))
 80036de:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80036e0:	6862      	ldr	r2, [r4, #4]
 80036e2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80036e6:	4281      	cmp	r1, r0
 80036e8:	d905      	bls.n	80036f6 <UART_SetConfig+0x15e>
        ret = HAL_ERROR;
 80036ea:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80036f0:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80036f2:	4610      	mov	r0, r2
 80036f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80036f6:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80036fa:	d8f6      	bhi.n	80036ea <UART_SetConfig+0x152>
        switch (clocksource)
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d82e      	bhi.n	800375e <UART_SetConfig+0x1c6>
 8003700:	e8df f003 	tbb	[pc, r3]
 8003704:	2d1c2d05 	.word	0x2d1c2d05
 8003708:	2d2d2d24 	.word	0x2d2d2d24
 800370c:	27          	.byte	0x27
 800370d:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800370e:	f7fe ffd3 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003712:	6862      	ldr	r2, [r4, #4]
 8003714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003718:	0856      	lsrs	r6, r2, #1
 800371a:	2700      	movs	r7, #0
 800371c:	fbe1 6700 	umlal	r6, r7, r1, r0
 8003720:	2300      	movs	r3, #0
 8003722:	4630      	mov	r0, r6
 8003724:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003726:	f7fc fd55 	bl	80001d4 <__aeabi_uldivmod>
            break;
 800372a:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800372c:	4b58      	ldr	r3, [pc, #352]	; (8003890 <UART_SetConfig+0x2f8>)
 800372e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003732:	4299      	cmp	r1, r3
 8003734:	d8d9      	bhi.n	80036ea <UART_SetConfig+0x152>
          huart->Instance->BRR = usartdiv;
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	60d8      	str	r0, [r3, #12]
 800373a:	e7d7      	b.n	80036ec <UART_SetConfig+0x154>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800373c:	4855      	ldr	r0, [pc, #340]	; (8003894 <UART_SetConfig+0x2fc>)
 800373e:	0855      	lsrs	r5, r2, #1
 8003740:	2300      	movs	r3, #0
 8003742:	2100      	movs	r1, #0
 8003744:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003746:	f141 0100 	adc.w	r1, r1, #0
 800374a:	e7ec      	b.n	8003726 <UART_SetConfig+0x18e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800374c:	f7fe fc7c 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 8003750:	e7df      	b.n	8003712 <UART_SetConfig+0x17a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003752:	0850      	lsrs	r0, r2, #1
 8003754:	2100      	movs	r1, #0
 8003756:	2300      	movs	r3, #0
 8003758:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800375c:	e7f3      	b.n	8003746 <UART_SetConfig+0x1ae>
            ret = HAL_ERROR;
 800375e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003760:	2000      	movs	r0, #0
 8003762:	e7e3      	b.n	800372c <UART_SetConfig+0x194>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003764:	f7fe ffba 	bl	80026dc <HAL_RCC_GetPCLK2Freq>
 8003768:	e04b      	b.n	8003802 <UART_SetConfig+0x26a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800376a:	f7fe ffa5 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800376e:	6862      	ldr	r2, [r4, #4]
 8003770:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003774:	fbb3 f3f2 	udiv	r3, r3, r2
 8003778:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800377a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800377c:	f1a3 0010 	sub.w	r0, r3, #16
 8003780:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003784:	4288      	cmp	r0, r1
 8003786:	d8b0      	bhi.n	80036ea <UART_SetConfig+0x152>
      huart->Instance->BRR = usartdiv;
 8003788:	6821      	ldr	r1, [r4, #0]
 800378a:	60cb      	str	r3, [r1, #12]
 800378c:	e7ae      	b.n	80036ec <UART_SetConfig+0x154>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800378e:	f7fe ffa5 	bl	80026dc <HAL_RCC_GetPCLK2Freq>
 8003792:	e7ec      	b.n	800376e <UART_SetConfig+0x1d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003794:	6860      	ldr	r0, [r4, #4]
 8003796:	0843      	lsrs	r3, r0, #1
 8003798:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800379c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80037a0:	fbb3 f3f0 	udiv	r3, r3, r0
 80037a4:	e7e8      	b.n	8003778 <UART_SetConfig+0x1e0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80037a6:	f7fe fc4f 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 80037aa:	e7e0      	b.n	800376e <UART_SetConfig+0x1d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80037ac:	6860      	ldr	r0, [r4, #4]
 80037ae:	0843      	lsrs	r3, r0, #1
 80037b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80037b4:	e7f4      	b.n	80037a0 <UART_SetConfig+0x208>
  if (UART_INSTANCE_LOWPOWER(huart))
 80037b6:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <UART_SetConfig+0x2d8>)
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d08f      	beq.n	80036dc <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037bc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80037c0:	d1e8      	bne.n	8003794 <UART_SetConfig+0x1fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80037c2:	6860      	ldr	r0, [r4, #4]
 80037c4:	0843      	lsrs	r3, r0, #1
 80037c6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80037ca:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80037ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80037d2:	e01c      	b.n	800380e <UART_SetConfig+0x276>
  if (UART_INSTANCE_LOWPOWER(huart))
 80037d4:	4b26      	ldr	r3, [pc, #152]	; (8003870 <UART_SetConfig+0x2d8>)
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d10e      	bne.n	80037f8 <UART_SetConfig+0x260>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80037da:	f7fe ff6d 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
        break;
 80037de:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 80037e0:	2800      	cmp	r0, #0
 80037e2:	f47f af7d 	bne.w	80036e0 <UART_SetConfig+0x148>
 80037e6:	4602      	mov	r2, r0
 80037e8:	e780      	b.n	80036ec <UART_SetConfig+0x154>
  if (UART_INSTANCE_LOWPOWER(huart))
 80037ea:	4b21      	ldr	r3, [pc, #132]	; (8003870 <UART_SetConfig+0x2d8>)
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d11f      	bne.n	8003830 <UART_SetConfig+0x298>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80037f0:	f7fe fc2a 	bl	8002048 <HAL_RCC_GetSysClockFreq>
        break;
 80037f4:	2304      	movs	r3, #4
 80037f6:	e7f3      	b.n	80037e0 <UART_SetConfig+0x248>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037f8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80037fc:	d1b5      	bne.n	800376a <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80037fe:	f7fe ff5b 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003802:	6861      	ldr	r1, [r4, #4]
 8003804:	084a      	lsrs	r2, r1, #1
 8003806:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800380a:	fbb3 f3f1 	udiv	r3, r3, r1
 800380e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003810:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003812:	f1a3 0010 	sub.w	r0, r3, #16
 8003816:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800381a:	4288      	cmp	r0, r1
 800381c:	f63f af65 	bhi.w	80036ea <UART_SetConfig+0x152>
      brrtemp = usartdiv & 0xFFF0U;
 8003820:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8003824:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003826:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800382a:	430b      	orrs	r3, r1
 800382c:	60c3      	str	r3, [r0, #12]
 800382e:	e75d      	b.n	80036ec <UART_SetConfig+0x154>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003830:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003834:	d1b7      	bne.n	80037a6 <UART_SetConfig+0x20e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003836:	f7fe fc07 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 800383a:	e7e2      	b.n	8003802 <UART_SetConfig+0x26a>
    switch (clocksource)
 800383c:	2b08      	cmp	r3, #8
 800383e:	f63f af54 	bhi.w	80036ea <UART_SetConfig+0x152>
 8003842:	a201      	add	r2, pc, #4	; (adr r2, 8003848 <UART_SetConfig+0x2b0>)
 8003844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003848:	0800376b 	.word	0x0800376b
 800384c:	0800378f 	.word	0x0800378f
 8003850:	08003795 	.word	0x08003795
 8003854:	080036eb 	.word	0x080036eb
 8003858:	080037a7 	.word	0x080037a7
 800385c:	080036eb 	.word	0x080036eb
 8003860:	080036eb 	.word	0x080036eb
 8003864:	080036eb 	.word	0x080036eb
 8003868:	080037ad 	.word	0x080037ad
 800386c:	efff69f3 	.word	0xefff69f3
 8003870:	40008000 	.word	0x40008000
 8003874:	40013800 	.word	0x40013800
 8003878:	080062dc 	.word	0x080062dc
 800387c:	40004400 	.word	0x40004400
 8003880:	080062e0 	.word	0x080062e0
 8003884:	40004800 	.word	0x40004800
 8003888:	40004c00 	.word	0x40004c00
 800388c:	00f42400 	.word	0x00f42400
 8003890:	000ffcff 	.word	0x000ffcff
 8003894:	f4240000 	.word	0xf4240000

08003898 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003898:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800389a:	07da      	lsls	r2, r3, #31
{
 800389c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800389e:	d506      	bpl.n	80038ae <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038a0:	6801      	ldr	r1, [r0, #0]
 80038a2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80038a4:	684a      	ldr	r2, [r1, #4]
 80038a6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80038aa:	4322      	orrs	r2, r4
 80038ac:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ae:	079c      	lsls	r4, r3, #30
 80038b0:	d506      	bpl.n	80038c0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038b2:	6801      	ldr	r1, [r0, #0]
 80038b4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80038b6:	684a      	ldr	r2, [r1, #4]
 80038b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038bc:	4322      	orrs	r2, r4
 80038be:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038c0:	0759      	lsls	r1, r3, #29
 80038c2:	d506      	bpl.n	80038d2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038c4:	6801      	ldr	r1, [r0, #0]
 80038c6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80038c8:	684a      	ldr	r2, [r1, #4]
 80038ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038ce:	4322      	orrs	r2, r4
 80038d0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038d2:	071a      	lsls	r2, r3, #28
 80038d4:	d506      	bpl.n	80038e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038d6:	6801      	ldr	r1, [r0, #0]
 80038d8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80038da:	684a      	ldr	r2, [r1, #4]
 80038dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038e0:	4322      	orrs	r2, r4
 80038e2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038e4:	06dc      	lsls	r4, r3, #27
 80038e6:	d506      	bpl.n	80038f6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038e8:	6801      	ldr	r1, [r0, #0]
 80038ea:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80038ec:	688a      	ldr	r2, [r1, #8]
 80038ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038f2:	4322      	orrs	r2, r4
 80038f4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038f6:	0699      	lsls	r1, r3, #26
 80038f8:	d506      	bpl.n	8003908 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038fa:	6801      	ldr	r1, [r0, #0]
 80038fc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80038fe:	688a      	ldr	r2, [r1, #8]
 8003900:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003904:	4322      	orrs	r2, r4
 8003906:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003908:	065a      	lsls	r2, r3, #25
 800390a:	d50f      	bpl.n	800392c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800390c:	6801      	ldr	r1, [r0, #0]
 800390e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003910:	684a      	ldr	r2, [r1, #4]
 8003912:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003916:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003918:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800391c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800391e:	d105      	bne.n	800392c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003920:	684a      	ldr	r2, [r1, #4]
 8003922:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003924:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003928:	4322      	orrs	r2, r4
 800392a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	d506      	bpl.n	800393e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003930:	6802      	ldr	r2, [r0, #0]
 8003932:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003934:	6853      	ldr	r3, [r2, #4]
 8003936:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800393a:	430b      	orrs	r3, r1
 800393c:	6053      	str	r3, [r2, #4]
 800393e:	bd10      	pop	{r4, pc}

08003940 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003944:	9d06      	ldr	r5, [sp, #24]
 8003946:	4604      	mov	r4, r0
 8003948:	460f      	mov	r7, r1
 800394a:	4616      	mov	r6, r2
 800394c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800394e:	6821      	ldr	r1, [r4, #0]
 8003950:	69ca      	ldr	r2, [r1, #28]
 8003952:	ea37 0302 	bics.w	r3, r7, r2
 8003956:	bf0c      	ite	eq
 8003958:	2201      	moveq	r2, #1
 800395a:	2200      	movne	r2, #0
 800395c:	42b2      	cmp	r2, r6
 800395e:	d002      	beq.n	8003966 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003960:	2000      	movs	r0, #0
}
 8003962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003966:	1c6b      	adds	r3, r5, #1
 8003968:	d0f2      	beq.n	8003950 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800396a:	b99d      	cbnz	r5, 8003994 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003974:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	f022 0201 	bic.w	r2, r2, #1
 800397c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800397e:	2320      	movs	r3, #32
 8003980:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8003984:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8003988:	2300      	movs	r3, #0
 800398a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800398e:	2003      	movs	r0, #3
 8003990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003994:	f7fd f8d4 	bl	8000b40 <HAL_GetTick>
 8003998:	eba0 0008 	sub.w	r0, r0, r8
 800399c:	4285      	cmp	r5, r0
 800399e:	d2d6      	bcs.n	800394e <UART_WaitOnFlagUntilTimeout+0xe>
 80039a0:	e7e4      	b.n	800396c <UART_WaitOnFlagUntilTimeout+0x2c>

080039a2 <UART_CheckIdleState>:
{
 80039a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039a4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a6:	2600      	movs	r6, #0
 80039a8:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 80039aa:	f7fd f8c9 	bl	8000b40 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80039b4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039b6:	d417      	bmi.n	80039e8 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	075b      	lsls	r3, r3, #29
 80039be:	d50a      	bpl.n	80039d6 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	2200      	movs	r2, #0
 80039c8:	462b      	mov	r3, r5
 80039ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039ce:	4620      	mov	r0, r4
 80039d0:	f7ff ffb6 	bl	8003940 <UART_WaitOnFlagUntilTimeout>
 80039d4:	b9a0      	cbnz	r0, 8003a00 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 80039d6:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80039d8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80039da:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 80039de:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80039e2:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 80039e6:	e00c      	b.n	8003a02 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	4632      	mov	r2, r6
 80039f0:	4603      	mov	r3, r0
 80039f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039f6:	4620      	mov	r0, r4
 80039f8:	f7ff ffa2 	bl	8003940 <UART_WaitOnFlagUntilTimeout>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	d0db      	beq.n	80039b8 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003a00:	2003      	movs	r0, #3
}
 8003a02:	b002      	add	sp, #8
 8003a04:	bd70      	pop	{r4, r5, r6, pc}

08003a06 <HAL_UART_Init>:
{
 8003a06:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003a08:	4604      	mov	r4, r0
 8003a0a:	b360      	cbz	r0, 8003a66 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003a0c:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8003a10:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003a14:	b91b      	cbnz	r3, 8003a1e <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003a16:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003a1a:	f002 f947 	bl	8005cac <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003a1e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003a20:	2324      	movs	r3, #36	; 0x24
 8003a22:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8003a26:	6813      	ldr	r3, [r2, #0]
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a2e:	4620      	mov	r0, r4
 8003a30:	f7ff fdb2 	bl	8003598 <UART_SetConfig>
 8003a34:	2801      	cmp	r0, #1
 8003a36:	d016      	beq.n	8003a66 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a3a:	b113      	cbz	r3, 8003a42 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	f7ff ff2b 	bl	8003898 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a52:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003a5a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003a5c:	601a      	str	r2, [r3, #0]
}
 8003a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003a62:	f7ff bf9e 	b.w	80039a2 <UART_CheckIdleState>
}
 8003a66:	2001      	movs	r0, #1
 8003a68:	bd10      	pop	{r4, pc}

08003a6a <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	a801      	add	r0, sp, #4
 8003a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8003a72:	b004      	add	sp, #16
 8003a74:	2000      	movs	r0, #0
 8003a76:	4770      	bx	lr

08003a78 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003a78:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8003a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a86:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	4770      	bx	lr

08003a8e <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003a8e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003a92:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8003a96:	045b      	lsls	r3, r3, #17
 8003a98:	0c5b      	lsrs	r3, r3, #17
 8003a9a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	4770      	bx	lr

08003aa2 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	4770      	bx	lr

08003aa6 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	b510      	push	{r4, lr}
 8003aaa:	ac03      	add	r4, sp, #12
 8003aac:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003ab0:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8003ab8:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003abc:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ac0:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8003ac4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8003ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR |= winterruptmask;
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8003ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ad6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8003ada:	b004      	add	sp, #16
 8003adc:	4610      	mov	r0, r2
 8003ade:	4770      	bx	lr

08003ae0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003ae2:	780c      	ldrb	r4, [r1, #0]
 8003ae4:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8003ae8:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
{
 8003aec:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003aee:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8003af2:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003af4:	0412      	lsls	r2, r2, #16
 8003af6:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8003af8:	2803      	cmp	r0, #3
 8003afa:	d850      	bhi.n	8003b9e <USB_ActivateEndpoint+0xbe>
 8003afc:	e8df f000 	tbb	[pc, r0]
 8003b00:	49044c02 	.word	0x49044c02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8003b08:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal);
 8003b0a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003b0e:	780e      	ldrb	r6, [r1, #0]
 8003b10:	4cab      	ldr	r4, [pc, #684]	; (8003dc0 <USB_ActivateEndpoint+0x2e0>)
 8003b12:	b235      	sxth	r5, r6
 8003b14:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8003b18:	b292      	uxth	r2, r2
 8003b1a:	4022      	ands	r2, r4
 8003b1c:	4332      	orrs	r2, r6
 8003b1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b26:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  if (ep->doublebuffer == 0U)
 8003b2a:	7b0d      	ldrb	r5, [r1, #12]
 8003b2c:	780a      	ldrb	r2, [r1, #0]
 8003b2e:	2d00      	cmp	r5, #0
 8003b30:	f040 8082 	bne.w	8003c38 <USB_ActivateEndpoint+0x158>
  {
    if (ep->is_in != 0U)
 8003b34:	784f      	ldrb	r7, [r1, #1]
 8003b36:	88ce      	ldrh	r6, [r1, #6]
 8003b38:	2508      	movs	r5, #8
 8003b3a:	b397      	cbz	r7, 8003ba2 <USB_ActivateEndpoint+0xc2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b3c:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8003b40:	fb15 3202 	smlabb	r2, r5, r2, r3
 8003b44:	fa12 f287 	uxtah	r2, r2, r7
 8003b48:	f026 0601 	bic.w	r6, r6, #1
 8003b4c:	f8a2 6400 	strh.w	r6, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b50:	780d      	ldrb	r5, [r1, #0]
 8003b52:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8003b56:	0656      	lsls	r6, r2, #25
 8003b58:	d509      	bpl.n	8003b6e <USB_ActivateEndpoint+0x8e>
 8003b5a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8003b5e:	b292      	uxth	r2, r2
 8003b60:	4014      	ands	r4, r2
 8003b62:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003b66:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8003b6a:	f823 4025 	strh.w	r4, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003b6e:	78ca      	ldrb	r2, [r1, #3]
 8003b70:	7809      	ldrb	r1, [r1, #0]
 8003b72:	4c94      	ldr	r4, [pc, #592]	; (8003dc4 <USB_ActivateEndpoint+0x2e4>)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b74:	b209      	sxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8003b76:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b78:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003b7c:	b292      	uxth	r2, r2
 8003b7e:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 8003b82:	d001      	beq.n	8003b88 <USB_ActivateEndpoint+0xa8>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b84:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b90:	e0c5      	b.n	8003d1e <USB_ActivateEndpoint+0x23e>
      wEpRegVal |= USB_EP_INTERRUPT;
 8003b92:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8003b96:	e7b7      	b.n	8003b08 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003b98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b9c:	e7b4      	b.n	8003b08 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	e7b3      	b.n	8003b0a <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ba2:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8003ba6:	fb15 3202 	smlabb	r2, r5, r2, r3
 8003baa:	fa12 f284 	uxtah	r2, r2, r4
 8003bae:	f026 0601 	bic.w	r6, r6, #1
 8003bb2:	f8a2 6404 	strh.w	r6, [r2, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003bb6:	780a      	ldrb	r2, [r1, #0]
 8003bb8:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8003bbc:	690c      	ldr	r4, [r1, #16]
 8003bbe:	fb15 3202 	smlabb	r2, r5, r2, r3
 8003bc2:	b2b6      	uxth	r6, r6
 8003bc4:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8003bc8:	b954      	cbnz	r4, 8003be0 <USB_ActivateEndpoint+0x100>
 8003bca:	5b94      	ldrh	r4, [r2, r6]
 8003bcc:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 8003bd0:	04a4      	lsls	r4, r4, #18
 8003bd2:	0ca4      	lsrs	r4, r4, #18
 8003bd4:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8003bd8:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003bdc:	5394      	strh	r4, [r2, r6]
 8003bde:	e007      	b.n	8003bf0 <USB_ActivateEndpoint+0x110>
 8003be0:	2c3d      	cmp	r4, #61	; 0x3d
 8003be2:	d824      	bhi.n	8003c2e <USB_ActivateEndpoint+0x14e>
 8003be4:	0865      	lsrs	r5, r4, #1
 8003be6:	07e4      	lsls	r4, r4, #31
 8003be8:	bf48      	it	mi
 8003bea:	3501      	addmi	r5, #1
 8003bec:	02ad      	lsls	r5, r5, #10
 8003bee:	5395      	strh	r5, [r2, r6]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bf0:	780c      	ldrb	r4, [r1, #0]
 8003bf2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003bf6:	0452      	lsls	r2, r2, #17
 8003bf8:	d50d      	bpl.n	8003c16 <USB_ActivateEndpoint+0x136>
 8003bfa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003bfe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003c02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c06:	0412      	lsls	r2, r2, #16
 8003c08:	0c12      	lsrs	r2, r2, #16
 8003c0a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003c0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c12:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c16:	7809      	ldrb	r1, [r1, #0]
 8003c18:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003c1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c20:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c24:	0412      	lsls	r2, r2, #16
 8003c26:	0c12      	lsrs	r2, r2, #16
 8003c28:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003c2c:	e7ac      	b.n	8003b88 <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003c2e:	4d66      	ldr	r5, [pc, #408]	; (8003dc8 <USB_ActivateEndpoint+0x2e8>)
 8003c30:	0964      	lsrs	r4, r4, #5
 8003c32:	ea45 2484 	orr.w	r4, r5, r4, lsl #10
 8003c36:	e7d1      	b.n	8003bdc <USB_ActivateEndpoint+0xfc>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003c38:	b212      	sxth	r2, r2
 8003c3a:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8003c3e:	b2ad      	uxth	r5, r5
 8003c40:	4025      	ands	r5, r4
 8003c42:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 8003c46:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003c4a:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003c4e:	780e      	ldrb	r6, [r1, #0]
 8003c50:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003c54:	2208      	movs	r2, #8
 8003c56:	fb12 3606 	smlabb	r6, r2, r6, r3
 8003c5a:	fa16 f585 	uxtah	r5, r6, r5
 8003c5e:	890e      	ldrh	r6, [r1, #8]
 8003c60:	f026 0601 	bic.w	r6, r6, #1
 8003c64:	f8a5 6400 	strh.w	r6, [r5, #1024]	; 0x400
 8003c68:	780e      	ldrb	r6, [r1, #0]
 8003c6a:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003c6e:	fb12 3206 	smlabb	r2, r2, r6, r3
 8003c72:	fa12 f285 	uxtah	r2, r2, r5
 8003c76:	894d      	ldrh	r5, [r1, #10]
 8003c78:	f025 0501 	bic.w	r5, r5, #1
 8003c7c:	f8a2 5404 	strh.w	r5, [r2, #1028]	; 0x404
 8003c80:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 8003c82:	784d      	ldrb	r5, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c84:	b212      	sxth	r2, r2
    if (ep->is_in == 0U)
 8003c86:	2d00      	cmp	r5, #0
 8003c88:	d14c      	bne.n	8003d24 <USB_ActivateEndpoint+0x244>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c8a:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8003c8e:	046f      	lsls	r7, r5, #17
 8003c90:	d509      	bpl.n	8003ca6 <USB_ActivateEndpoint+0x1c6>
 8003c92:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8003c96:	b2ad      	uxth	r5, r5
 8003c98:	402c      	ands	r4, r5
 8003c9a:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8003c9e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003ca2:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ca6:	780c      	ldrb	r4, [r1, #0]
 8003ca8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003cac:	0656      	lsls	r6, r2, #25
 8003cae:	d50d      	bpl.n	8003ccc <USB_ActivateEndpoint+0x1ec>
 8003cb0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003cb4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003cb8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003cbc:	0412      	lsls	r2, r2, #16
 8003cbe:	0c12      	lsrs	r2, r2, #16
 8003cc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cc4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003cc8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003ccc:	780c      	ldrb	r4, [r1, #0]
 8003cce:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003cd2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003cd6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003cda:	0412      	lsls	r2, r2, #16
 8003cdc:	0c12      	lsrs	r2, r2, #16
 8003cde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ce2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003ce6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003cea:	780d      	ldrb	r5, [r1, #0]
 8003cec:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8003cf0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cf4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003cf8:	0412      	lsls	r2, r2, #16
 8003cfa:	0c12      	lsrs	r2, r2, #16
 8003cfc:	f248 0480 	movw	r4, #32896	; 0x8080
 8003d00:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003d04:	4322      	orrs	r2, r4
 8003d06:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d0a:	7809      	ldrb	r1, [r1, #0]
 8003d0c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003d10:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d18:	0412      	lsls	r2, r2, #16
 8003d1a:	0c12      	lsrs	r2, r2, #16
 8003d1c:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d1e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 8003d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d24:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8003d28:	046d      	lsls	r5, r5, #17
 8003d2a:	d509      	bpl.n	8003d40 <USB_ActivateEndpoint+0x260>
 8003d2c:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8003d30:	b2ad      	uxth	r5, r5
 8003d32:	402c      	ands	r4, r5
 8003d34:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8003d38:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003d3c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d40:	780c      	ldrb	r4, [r1, #0]
 8003d42:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003d46:	0652      	lsls	r2, r2, #25
 8003d48:	d50d      	bpl.n	8003d66 <USB_ActivateEndpoint+0x286>
 8003d4a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003d4e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d56:	0412      	lsls	r2, r2, #16
 8003d58:	0c12      	lsrs	r2, r2, #16
 8003d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d5e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003d62:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003d66:	780c      	ldrb	r4, [r1, #0]
 8003d68:	4d16      	ldr	r5, [pc, #88]	; (8003dc4 <USB_ActivateEndpoint+0x2e4>)
 8003d6a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003d6e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d76:	0412      	lsls	r2, r2, #16
 8003d78:	0c12      	lsrs	r2, r2, #16
 8003d7a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003d7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d82:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8003d86:	780c      	ldrb	r4, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8003d88:	78ca      	ldrb	r2, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d8a:	b224      	sxth	r4, r4
      if (ep->type != EP_TYPE_ISOC)
 8003d8c:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d8e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003d92:	b292      	uxth	r2, r2
 8003d94:	ea02 0205 	and.w	r2, r2, r5
 8003d98:	bf18      	it	ne
 8003d9a:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003da2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003da6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003daa:	7809      	ldrb	r1, [r1, #0]
 8003dac:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003db0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003db4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003db8:	0412      	lsls	r2, r2, #16
 8003dba:	0c12      	lsrs	r2, r2, #16
 8003dbc:	e6e4      	b.n	8003b88 <USB_ActivateEndpoint+0xa8>
 8003dbe:	bf00      	nop
 8003dc0:	ffff8f8f 	.word	0xffff8f8f
 8003dc4:	ffff8fbf 	.word	0xffff8fbf
 8003dc8:	ffff8000 	.word	0xffff8000

08003dcc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003dcc:	b510      	push	{r4, lr}
 8003dce:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8003dd0:	7b0c      	ldrb	r4, [r1, #12]
 8003dd2:	784a      	ldrb	r2, [r1, #1]
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dd4:	b21b      	sxth	r3, r3
  if (ep->doublebuffer == 0U)
 8003dd6:	2c00      	cmp	r4, #0
 8003dd8:	d13d      	bne.n	8003e56 <USB_DeactivateEndpoint+0x8a>
    if (ep->is_in != 0U)
 8003dda:	b312      	cbz	r2, 8003e22 <USB_DeactivateEndpoint+0x56>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ddc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003de0:	0652      	lsls	r2, r2, #25
 8003de2:	d50d      	bpl.n	8003e00 <USB_DeactivateEndpoint+0x34>
 8003de4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003de8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003dec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003df0:	0412      	lsls	r2, r2, #16
 8003df2:	0c12      	lsrs	r2, r2, #16
 8003df4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003df8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003dfc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e00:	780a      	ldrb	r2, [r1, #0]
 8003e02:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e0e:	041b      	lsls	r3, r3, #16
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e1a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8003e1e:	2000      	movs	r0, #0
 8003e20:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e22:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e26:	0454      	lsls	r4, r2, #17
 8003e28:	d50d      	bpl.n	8003e46 <USB_DeactivateEndpoint+0x7a>
 8003e2a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e2e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003e32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e36:	0412      	lsls	r2, r2, #16
 8003e38:	0c12      	lsrs	r2, r2, #16
 8003e3a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003e3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e42:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e46:	780a      	ldrb	r2, [r1, #0]
 8003e48:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e54:	e7db      	b.n	8003e0e <USB_DeactivateEndpoint+0x42>
    if (ep->is_in == 0U)
 8003e56:	2a00      	cmp	r2, #0
 8003e58:	d14e      	bne.n	8003ef8 <USB_DeactivateEndpoint+0x12c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e5a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e5e:	0452      	lsls	r2, r2, #17
 8003e60:	d50d      	bpl.n	8003e7e <USB_DeactivateEndpoint+0xb2>
 8003e62:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e66:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003e6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e6e:	0412      	lsls	r2, r2, #16
 8003e70:	0c12      	lsrs	r2, r2, #16
 8003e72:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003e76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e7a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e7e:	780a      	ldrb	r2, [r1, #0]
 8003e80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e84:	065c      	lsls	r4, r3, #25
 8003e86:	d50d      	bpl.n	8003ea4 <USB_DeactivateEndpoint+0xd8>
 8003e88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e94:	041b      	lsls	r3, r3, #16
 8003e96:	0c1b      	lsrs	r3, r3, #16
 8003e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ea0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003ea4:	780a      	ldrb	r2, [r1, #0]
 8003ea6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb2:	041b      	lsls	r3, r3, #16
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ebe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ec2:	780c      	ldrb	r4, [r1, #0]
 8003ec4:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003ec8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed0:	041b      	lsls	r3, r3, #16
 8003ed2:	0c1b      	lsrs	r3, r3, #16
 8003ed4:	f248 0280 	movw	r2, #32896	; 0x8080
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ede:	7809      	ldrb	r1, [r1, #0]
 8003ee0:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003ee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003eec:	041b      	lsls	r3, r3, #16
 8003eee:	0c1b      	lsrs	r3, r3, #16
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8003ef6:	e792      	b.n	8003e1e <USB_DeactivateEndpoint+0x52>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ef8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003efc:	0452      	lsls	r2, r2, #17
 8003efe:	d50d      	bpl.n	8003f1c <USB_DeactivateEndpoint+0x150>
 8003f00:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003f04:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003f08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f0c:	0412      	lsls	r2, r2, #16
 8003f0e:	0c12      	lsrs	r2, r2, #16
 8003f10:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003f14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f18:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f1c:	780a      	ldrb	r2, [r1, #0]
 8003f1e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f22:	065b      	lsls	r3, r3, #25
 8003f24:	d50d      	bpl.n	8003f42 <USB_DeactivateEndpoint+0x176>
 8003f26:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	0c1b      	lsrs	r3, r3, #16
 8003f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f3e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003f42:	780a      	ldrb	r2, [r1, #0]
 8003f44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f50:	041b      	lsls	r3, r3, #16
 8003f52:	0c1b      	lsrs	r3, r3, #16
 8003f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f5c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f60:	780c      	ldrb	r4, [r1, #0]
 8003f62:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f6e:	041b      	lsls	r3, r3, #16
 8003f70:	0c1b      	lsrs	r3, r3, #16
 8003f72:	f248 0280 	movw	r2, #32896	; 0x8080
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f7c:	7809      	ldrb	r1, [r1, #0]
 8003f7e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003f82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8a:	e7af      	b.n	8003eec <USB_DeactivateEndpoint+0x120>

08003f8c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f8c:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8003f8e:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003f90:	b212      	sxth	r2, r2
  if (ep->is_in != 0U)
 8003f92:	b18b      	cbz	r3, 8003fb8 <USB_EPSetStall+0x2c>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003f94:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fa0:	041b      	lsls	r3, r3, #16
 8003fa2:	0c1b      	lsrs	r3, r3, #16
 8003fa4:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003fb8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003fbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc4:	041b      	lsls	r3, r3, #16
 8003fc6:	0c1b      	lsrs	r3, r3, #16
 8003fc8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003fcc:	e7ec      	b.n	8003fa8 <USB_EPSetStall+0x1c>

08003fce <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003fce:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8003fd0:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fd2:	b212      	sxth	r2, r2
  if (ep->is_in != 0U)
 8003fd4:	b323      	cbz	r3, 8004020 <USB_EPClearStall+0x52>
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fd6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003fda:	065b      	lsls	r3, r3, #25
 8003fdc:	d50d      	bpl.n	8003ffa <USB_EPClearStall+0x2c>
 8003fde:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fea:	041b      	lsls	r3, r3, #16
 8003fec:	0c1b      	lsrs	r3, r3, #16
 8003fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ff2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ff6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003ffa:	780a      	ldrb	r2, [r1, #0]
 8003ffc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004008:	041b      	lsls	r3, r3, #16
 800400a:	0c1b      	lsrs	r3, r3, #16
 800400c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004018:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 800401c:	2000      	movs	r0, #0
 800401e:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004020:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004024:	045b      	lsls	r3, r3, #17
 8004026:	d50d      	bpl.n	8004044 <USB_EPClearStall+0x76>
 8004028:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800402c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004034:	041b      	lsls	r3, r3, #16
 8004036:	0c1b      	lsrs	r3, r3, #16
 8004038:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800403c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004040:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004044:	780a      	ldrb	r2, [r1, #0]
 8004046:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800404a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	041b      	lsls	r3, r3, #16
 8004054:	0c1b      	lsrs	r3, r3, #16
 8004056:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800405a:	e7d9      	b.n	8004010 <USB_EPClearStall+0x42>

0800405c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800405c:	b911      	cbnz	r1, 8004064 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800405e:	2380      	movs	r3, #128	; 0x80
 8004060:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8004064:	2000      	movs	r0, #0
 8004066:	4770      	bx	lr

08004068 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8004068:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 800406c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004074:	b29b      	uxth	r3, r3
 8004076:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 800407a:	2000      	movs	r0, #0
 800407c:	4770      	bx	lr

0800407e <USB_DevDisconnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800407e:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8004082:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004086:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 800408a:	2000      	movs	r0, #0
 800408c:	4770      	bx	lr

0800408e <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800408e:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8004092:	b280      	uxth	r0, r0
 8004094:	4770      	bx	lr

08004096 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004096:	2000      	movs	r0, #0
 8004098:	4770      	bx	lr

0800409a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800409a:	b510      	push	{r4, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800409c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80040a0:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80040a2:	4410      	add	r0, r2
 80040a4:	f023 0301 	bic.w	r3, r3, #1
 80040a8:	4602      	mov	r2, r0
 80040aa:	4403      	add	r3, r0
 80040ac:	1a14      	subs	r4, r2, r0

  for (i = n; i != 0U; i--)
 80040ae:	429a      	cmp	r2, r3
 80040b0:	440c      	add	r4, r1
 80040b2:	d100      	bne.n	80040b6 <USB_WritePMA+0x1c>
    {
      pdwVal++;
    }
    pBuf++;
  }
}
 80040b4:	bd10      	pop	{r4, pc}
 80040b6:	8824      	ldrh	r4, [r4, #0]
    *pdwVal = (uint16_t)temp2;
 80040b8:	f822 4b02 	strh.w	r4, [r2], #2
 80040bc:	e7f6      	b.n	80040ac <USB_WritePMA+0x12>
	...

080040c0 <USB_EPStartXfer>:
{
 80040c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c2:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 80040c4:	7848      	ldrb	r0, [r1, #1]
  uint32_t len = ep->xfer_len;
 80040c6:	698a      	ldr	r2, [r1, #24]
 80040c8:	690b      	ldr	r3, [r1, #16]
 80040ca:	7b0f      	ldrb	r7, [r1, #12]
  if (ep->is_in == 1U)
 80040cc:	2801      	cmp	r0, #1
{
 80040ce:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 80040d0:	d16b      	bne.n	80041aa <USB_EPStartXfer+0xea>
    if (ep->xfer_len > ep->maxpacket)
 80040d2:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 80040d4:	bf97      	itett	ls
 80040d6:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 80040d8:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 80040da:	618b      	strls	r3, [r1, #24]
 80040dc:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 80040de:	bf88      	it	hi
 80040e0:	618a      	strhi	r2, [r1, #24]
 80040e2:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 80040e4:	bb0f      	cbnz	r7, 800412a <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80040e6:	88ca      	ldrh	r2, [r1, #6]
 80040e8:	6949      	ldr	r1, [r1, #20]
 80040ea:	4633      	mov	r3, r6
 80040ec:	4620      	mov	r0, r4
 80040ee:	f7ff ffd4 	bl	800409a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80040f2:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80040f6:	782a      	ldrb	r2, [r5, #0]
 80040f8:	f204 4102 	addw	r1, r4, #1026	; 0x402
 80040fc:	fa11 f383 	uxtah	r3, r1, r3
 8004100:	f823 6032 	strh.w	r6, [r3, r2, lsl #3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004104:	782a      	ldrb	r2, [r5, #0]
 8004106:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800410a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800410e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004112:	041b      	lsls	r3, r3, #16
 8004114:	0c1b      	lsrs	r3, r3, #16
 8004116:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800411a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800411e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004122:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8004126:	2000      	movs	r0, #0
 8004128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800412a:	7809      	ldrb	r1, [r1, #0]
 800412c:	b20a      	sxth	r2, r1
 800412e:	f834 2022 	ldrh.w	r2, [r4, r2, lsl #2]
 8004132:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004136:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 800413a:	bf15      	itete	ne
 800413c:	f204 4006 	addwne	r0, r4, #1030	; 0x406
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004140:	f204 4002 	addweq	r0, r4, #1026	; 0x402
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004144:	fa10 f282 	uxtahne	r2, r0, r2
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004148:	fa10 f282 	uxtaheq	r2, r0, r2
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800414c:	bf15      	itete	ne
 800414e:	f822 3031 	strhne.w	r3, [r2, r1, lsl #3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004152:	f822 3031 	strheq.w	r3, [r2, r1, lsl #3]
        pmabuffer = ep->pmaaddr1;
 8004156:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8004158:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800415a:	6969      	ldr	r1, [r5, #20]
 800415c:	4633      	mov	r3, r6
 800415e:	4620      	mov	r0, r4
 8004160:	f7ff ff9b 	bl	800409a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004164:	786b      	ldrb	r3, [r5, #1]
 8004166:	782a      	ldrb	r2, [r5, #0]
 8004168:	b97b      	cbnz	r3, 800418a <USB_EPStartXfer+0xca>
 800416a:	b212      	sxth	r2, r2
 800416c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004178:	041b      	lsls	r3, r3, #16
 800417a:	0c1b      	lsrs	r3, r3, #16
 800417c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004180:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004184:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8004188:	e7bc      	b.n	8004104 <USB_EPStartXfer+0x44>
 800418a:	2b01      	cmp	r3, #1
 800418c:	d1ba      	bne.n	8004104 <USB_EPStartXfer+0x44>
 800418e:	b212      	sxth	r2, r2
 8004190:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419c:	041b      	lsls	r3, r3, #16
 800419e:	0c1b      	lsrs	r3, r3, #16
 80041a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a8:	e7ec      	b.n	8004184 <USB_EPStartXfer+0xc4>
    if (ep->xfer_len > ep->maxpacket)
 80041aa:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 80041ac:	bf95      	itete	ls
 80041ae:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 80041b0:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 80041b2:	618b      	strls	r3, [r1, #24]
      ep->xfer_len -= len;
 80041b4:	618a      	strhi	r2, [r1, #24]
      ep->xfer_len = 0U;
 80041b6:	bf98      	it	ls
 80041b8:	4613      	movls	r3, r2
 80041ba:	7809      	ldrb	r1, [r1, #0]
    if (ep->doublebuffer == 0U)
 80041bc:	b9a7      	cbnz	r7, 80041e8 <USB_EPStartXfer+0x128>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80041be:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80041c2:	f204 4006 	addw	r0, r4, #1030	; 0x406
 80041c6:	fa10 f282 	uxtah	r2, r0, r2
 80041ca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d137      	bne.n	8004242 <USB_EPStartXfer+0x182>
 80041d2:	8813      	ldrh	r3, [r2, #0]
 80041d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80041d8:	049b      	lsls	r3, r3, #18
 80041da:	0c9b      	lsrs	r3, r3, #18
 80041dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041e4:	8013      	strh	r3, [r2, #0]
 80041e6:	e034      	b.n	8004252 <USB_EPStartXfer+0x192>
 80041e8:	b990      	cbnz	r0, 8004210 <USB_EPStartXfer+0x150>
 80041ea:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80041ee:	f204 4002 	addw	r0, r4, #1026	; 0x402
 80041f2:	fa10 f282 	uxtah	r2, r0, r2
 80041f6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80041fa:	b9ab      	cbnz	r3, 8004228 <USB_EPStartXfer+0x168>
 80041fc:	8811      	ldrh	r1, [r2, #0]
 80041fe:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8004202:	0489      	lsls	r1, r1, #18
 8004204:	0c89      	lsrs	r1, r1, #18
 8004206:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800420a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800420e:	8011      	strh	r1, [r2, #0]
 8004210:	786a      	ldrb	r2, [r5, #1]
 8004212:	7828      	ldrb	r0, [r5, #0]
 8004214:	bb72      	cbnz	r2, 8004274 <USB_EPStartXfer+0x1b4>
 8004216:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 800421a:	f204 4106 	addw	r1, r4, #1030	; 0x406
 800421e:	fa11 f282 	uxtah	r2, r1, r2
 8004222:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004226:	e7d2      	b.n	80041ce <USB_EPStartXfer+0x10e>
 8004228:	2b3d      	cmp	r3, #61	; 0x3d
 800422a:	d805      	bhi.n	8004238 <USB_EPStartXfer+0x178>
 800422c:	0859      	lsrs	r1, r3, #1
 800422e:	07d8      	lsls	r0, r3, #31
 8004230:	bf48      	it	mi
 8004232:	3101      	addmi	r1, #1
 8004234:	0289      	lsls	r1, r1, #10
 8004236:	e7ea      	b.n	800420e <USB_EPStartXfer+0x14e>
 8004238:	4814      	ldr	r0, [pc, #80]	; (800428c <USB_EPStartXfer+0x1cc>)
 800423a:	0959      	lsrs	r1, r3, #5
 800423c:	ea40 2181 	orr.w	r1, r0, r1, lsl #10
 8004240:	e7e5      	b.n	800420e <USB_EPStartXfer+0x14e>
 8004242:	2b3d      	cmp	r3, #61	; 0x3d
 8004244:	d811      	bhi.n	800426a <USB_EPStartXfer+0x1aa>
 8004246:	0859      	lsrs	r1, r3, #1
 8004248:	07db      	lsls	r3, r3, #31
 800424a:	bf48      	it	mi
 800424c:	3101      	addmi	r1, #1
 800424e:	0289      	lsls	r1, r1, #10
 8004250:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004252:	782a      	ldrb	r2, [r5, #0]
 8004254:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800425c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004260:	041b      	lsls	r3, r3, #16
 8004262:	0c1b      	lsrs	r3, r3, #16
 8004264:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004268:	e757      	b.n	800411a <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800426a:	0959      	lsrs	r1, r3, #5
 800426c:	4b07      	ldr	r3, [pc, #28]	; (800428c <USB_EPStartXfer+0x1cc>)
 800426e:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8004272:	e7b7      	b.n	80041e4 <USB_EPStartXfer+0x124>
 8004274:	2a01      	cmp	r2, #1
 8004276:	bf01      	itttt	eq
 8004278:	f8b4 1050 	ldrheq.w	r1, [r4, #80]	; 0x50
 800427c:	f204 4206 	addweq	r2, r4, #1030	; 0x406
 8004280:	fa12 f181 	uxtaheq	r1, r2, r1
 8004284:	f821 3030 	strheq.w	r3, [r1, r0, lsl #3]
 8004288:	e7e3      	b.n	8004252 <USB_EPStartXfer+0x192>
 800428a:	bf00      	nop
 800428c:	ffff8000 	.word	0xffff8000

08004290 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004290:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 8004294:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004296:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004298:	085d      	lsrs	r5, r3, #1
 800429a:	460a      	mov	r2, r1
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800429c:	4607      	mov	r7, r0

  for (i = n; i != 0U; i--)
 800429e:	462e      	mov	r6, r5
 80042a0:	3202      	adds	r2, #2
 80042a2:	b936      	cbnz	r6, 80042b2 <USB_ReadPMA+0x22>
    {
      pdwVal++;
    }
  }

  if ((wNBytes % 2U) != 0U)
 80042a4:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80042a6:	bf44      	itt	mi
 80042a8:	f830 3015 	ldrhmi.w	r3, [r0, r5, lsl #1]
 80042ac:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
 80042b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *pdwVal;
 80042b2:	f837 4b02 	ldrh.w	r4, [r7], #2
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80042b6:	f802 4c02 	strb.w	r4, [r2, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80042ba:	0a24      	lsrs	r4, r4, #8
 80042bc:	f802 4c01 	strb.w	r4, [r2, #-1]
  for (i = n; i != 0U; i--)
 80042c0:	3e01      	subs	r6, #1
 80042c2:	e7ed      	b.n	80042a0 <USB_ReadPMA+0x10>

080042c4 <dmx_registerCallback>:
*******************************************************************************/
/******************************************************************************
* Function Definitions
*******************************************************************************/
void dmx_registerCallback(dmx_cfg_Instance *dmx, dmx_cfg_callback callback){
	dmx->callback = callback;
 80042c4:	6541      	str	r1, [r0, #84]	; 0x54
 80042c6:	4770      	bx	lr

080042c8 <dmx_init>:
}

void dmx_init(dmx_cfg_Instance *dmx){
 80042c8:	b538      	push	{r3, r4, r5, lr}
	if(dmx->type == dmx_cfg_TYPE_TRANSMITTER){
 80042ca:	7805      	ldrb	r5, [r0, #0]
void dmx_init(dmx_cfg_Instance *dmx){
 80042cc:	4604      	mov	r4, r0
	if(dmx->type == dmx_cfg_TYPE_TRANSMITTER){
 80042ce:	b9c5      	cbnz	r5, 8004302 <dmx_init+0x3a>
		gpio_ConfigureToFloating(dmx->txBreakPort, dmx->txBreakPin);
 80042d0:	8901      	ldrh	r1, [r0, #8]
 80042d2:	6840      	ldr	r0, [r0, #4]
 80042d4:	f000 ff9e 	bl	8005214 <gpio_ConfigureToFloating>
		dmx->txState = dmx_cfg_TX_STATE_NONE;
		dmx->txBreakToBreakCnt = 0;
		dmx->txBreakToBreakTime_ms = dmx->txBreakToBreakTime_ms + (dmx->txBreakTime_us + dmx->txMarkAfterBreakTime_us + dmx->txMarkBetweenTime_us*dmx->universeSize)/1000;
 80042d8:	6923      	ldr	r3, [r4, #16]
 80042da:	6962      	ldr	r2, [r4, #20]
 80042dc:	69a1      	ldr	r1, [r4, #24]
		dmx->txState = dmx_cfg_TX_STATE_NONE;
 80042de:	7065      	strb	r5, [r4, #1]
		dmx->txBreakToBreakTime_ms = dmx->txBreakToBreakTime_ms + (dmx->txBreakTime_us + dmx->txMarkAfterBreakTime_us + dmx->txMarkBetweenTime_us*dmx->universeSize)/1000;
 80042e0:	441a      	add	r2, r3
 80042e2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
		dmx->txBreakToBreakCnt = 0;
 80042e6:	6225      	str	r5, [r4, #32]
		dmx->txBreakToBreakTime_ms = dmx->txBreakToBreakTime_ms + (dmx->txBreakTime_us + dmx->txMarkAfterBreakTime_us + dmx->txMarkBetweenTime_us*dmx->universeSize)/1000;
 80042e8:	fb01 2303 	mla	r3, r1, r3, r2
 80042ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80042f4:	69e2      	ldr	r2, [r4, #28]
 80042f6:	4413      	add	r3, r2
 80042f8:	61e3      	str	r3, [r4, #28]
		dmx->rxState = dmx_cfg_RX_STATE_NONE;
		dmx->rxFallingTime = 0;
		dmx->rxRisingTime = 0;
		dmx->rxTimerUpdateCnt = 0;
	}
	dmx->universeCnt = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 8004300:	bd38      	pop	{r3, r4, r5, pc}
	}else if(dmx->type == dmx_cfg_TYPE_RECEIVER){
 8004302:	2d01      	cmp	r5, #1
 8004304:	d1f9      	bne.n	80042fa <dmx_init+0x32>
		dmx->rxState = dmx_cfg_RX_STATE_NONE;
 8004306:	2300      	movs	r3, #0
 8004308:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
		dmx->rxFallingTime = 0;
 800430c:	6303      	str	r3, [r0, #48]	; 0x30
		dmx->rxRisingTime = 0;
 800430e:	6343      	str	r3, [r0, #52]	; 0x34
		dmx->rxTimerUpdateCnt = 0;
 8004310:	6403      	str	r3, [r0, #64]	; 0x40
 8004312:	e7f2      	b.n	80042fa <dmx_init+0x32>

08004314 <dmx_1ms>:
		if(dmx->callback) dmx->callback(dmx);
	}
}

void dmx_1ms(dmx_cfg_Instance *dmx){
	if(dmx->txBreakToBreakCnt > 0) --dmx->txBreakToBreakCnt;
 8004314:	6a03      	ldr	r3, [r0, #32]
 8004316:	2b00      	cmp	r3, #0
 8004318:	bfc4      	itt	gt
 800431a:	f103 33ff 	addgt.w	r3, r3, #4294967295
 800431e:	6203      	strgt	r3, [r0, #32]
 8004320:	4770      	bx	lr

08004322 <dmx_sendStart>:
}

void dmx_sendStart(dmx_cfg_Instance *dmx){
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 8004322:	7803      	ldrb	r3, [r0, #0]
void dmx_sendStart(dmx_cfg_Instance *dmx){
 8004324:	b510      	push	{r4, lr}
 8004326:	4604      	mov	r4, r0
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 8004328:	b9fb      	cbnz	r3, 800436a <dmx_sendStart+0x48>
	if(dmx->universe == NULL) return;
 800432a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800432c:	b1eb      	cbz	r3, 800436a <dmx_sendStart+0x48>
	if(dmx->txBreakToBreakTime_ms < dmx_cfg_MIN_BREAK_TO_BREAK_TIME_MS) dmx->txBreakToBreakTime_ms = dmx_cfg_MIN_BREAK_TO_BREAK_TIME_MS;
 800432e:	69c3      	ldr	r3, [r0, #28]
 8004330:	2b18      	cmp	r3, #24
 8004332:	bfdc      	itt	le
 8004334:	2319      	movle	r3, #25
 8004336:	61c3      	strle	r3, [r0, #28]
	if(dmx->txBreakTime_us < dmx_cfg_MIN_BREAK_TIME_US) dmx->txBreakTime_us = dmx_cfg_MIN_BREAK_TIME_US;
 8004338:	6903      	ldr	r3, [r0, #16]
 800433a:	2b5f      	cmp	r3, #95	; 0x5f
 800433c:	bfdc      	itt	le
 800433e:	2360      	movle	r3, #96	; 0x60
 8004340:	6103      	strle	r3, [r0, #16]
	if(dmx->txMarkAfterBreakTime_us < dmx_cfg_MIN_MARK_AFTER_BREAK_TIME_US) dmx->txMarkAfterBreakTime_us = dmx_cfg_MIN_MARK_AFTER_BREAK_TIME_US;
 8004342:	6943      	ldr	r3, [r0, #20]
	dmx->universeComplete = false;
	dmx->txState = dmx_cfg_TX_STATE_SEND_BREAK;
	tim_setNewTimeAndStart(dmx->txTimer, dmx->txBreakTime_us);
 8004344:	6901      	ldr	r1, [r0, #16]
	if(dmx->txMarkAfterBreakTime_us < dmx_cfg_MIN_MARK_AFTER_BREAK_TIME_US) dmx->txMarkAfterBreakTime_us = dmx_cfg_MIN_MARK_AFTER_BREAK_TIME_US;
 8004346:	2b0b      	cmp	r3, #11
 8004348:	bfdc      	itt	le
 800434a:	230c      	movle	r3, #12
 800434c:	6143      	strle	r3, [r0, #20]
	dmx->universeComplete = false;
 800434e:	2300      	movs	r3, #0
 8004350:	f880 3053 	strb.w	r3, [r0, #83]	; 0x53
	dmx->txState = dmx_cfg_TX_STATE_SEND_BREAK;
 8004354:	2302      	movs	r3, #2
 8004356:	7043      	strb	r3, [r0, #1]
	tim_setNewTimeAndStart(dmx->txTimer, dmx->txBreakTime_us);
 8004358:	68c0      	ldr	r0, [r0, #12]
 800435a:	f001 fc1d 	bl	8005b98 <tim_setNewTimeAndStart>
	gpio_ConfigureToPushPull(dmx->txBreakPort, dmx->txBreakPin);
 800435e:	8921      	ldrh	r1, [r4, #8]
 8004360:	6860      	ldr	r0, [r4, #4]
}
 8004362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gpio_ConfigureToPushPull(dmx->txBreakPort, dmx->txBreakPin);
 8004366:	f000 bf65 	b.w	8005234 <gpio_ConfigureToPushPull>
 800436a:	bd10      	pop	{r4, pc}

0800436c <dmx_loop>:
	if(dmx->type == dmx_cfg_TYPE_TRANSMITTER){
 800436c:	7803      	ldrb	r3, [r0, #0]
void dmx_loop(dmx_cfg_Instance *dmx){
 800436e:	b510      	push	{r4, lr}
 8004370:	4604      	mov	r4, r0
	if(dmx->type == dmx_cfg_TYPE_TRANSMITTER){
 8004372:	b93b      	cbnz	r3, 8004384 <dmx_loop+0x18>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8004374:	7843      	ldrb	r3, [r0, #1]
 8004376:	b1bb      	cbz	r3, 80043a8 <dmx_loop+0x3c>
		if(dmx->txBreakToBreakCnt == 0){
 8004378:	6a03      	ldr	r3, [r0, #32]
 800437a:	b91b      	cbnz	r3, 8004384 <dmx_loop+0x18>
			dmx_sendStart(dmx);
 800437c:	f7ff ffd1 	bl	8004322 <dmx_sendStart>
			dmx->txBreakToBreakCnt = dmx->txBreakToBreakTime_ms;
 8004380:	69e3      	ldr	r3, [r4, #28]
 8004382:	6223      	str	r3, [r4, #32]
	if(dmx->universeComplete){
 8004384:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8004388:	b173      	cbz	r3, 80043a8 <dmx_loop+0x3c>
		dmx->universeComplete = false;
 800438a:	2300      	movs	r3, #0
 800438c:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
		if(dmx->type == dmx_cfg_TYPE_TRANSMITTER) dmx->callbackType = dmx_cfg_CALL_TX_COMPLETE;
 8004390:	7823      	ldrb	r3, [r4, #0]
 8004392:	b93b      	cbnz	r3, 80043a4 <dmx_loop+0x38>
		else dmx->callbackType = dmx_cfg_CALL_RX_COMPLETE;
 8004394:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
		if(dmx->callback) dmx->callback(dmx);
 8004398:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800439a:	b12b      	cbz	r3, 80043a8 <dmx_loop+0x3c>
 800439c:	4620      	mov	r0, r4
}
 800439e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if(dmx->callback) dmx->callback(dmx);
 80043a2:	4718      	bx	r3
		else dmx->callbackType = dmx_cfg_CALL_RX_COMPLETE;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e7f5      	b.n	8004394 <dmx_loop+0x28>
 80043a8:	bd10      	pop	{r4, pc}

080043aa <dmx_txStart>:
	else if(timeIdx == dmx_cfg_TIME_MARK_BETWEEN) dmx->txMarkBetweenTime_us = time_us;
	else if(timeIdx == dmx_cfg_TIME_BREAK_TO_BREAK) dmx->txBreakToBreakTime_ms = (time_us + dmx->txBreakTime_us + dmx->txMarkAfterBreakTime_us + dmx->txMarkBetweenTime_us*dmx->universeSize)/1000;
}

void dmx_txStart(dmx_cfg_Instance *dmx){
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 80043aa:	7803      	ldrb	r3, [r0, #0]
 80043ac:	b90b      	cbnz	r3, 80043b2 <dmx_txStart+0x8>
	dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;
 80043ae:	2301      	movs	r3, #1
 80043b0:	7043      	strb	r3, [r0, #1]
 80043b2:	4770      	bx	lr

080043b4 <dmx_rxStart>:
void dmx_txStop(dmx_cfg_Instance *dmx){
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
	dmx->txState = dmx_cfg_TX_STATE_NONE;
}

void dmx_rxStart(dmx_cfg_Instance *dmx){
 80043b4:	b538      	push	{r3, r4, r5, lr}
	if(dmx->type != dmx_cfg_TYPE_RECEIVER) return;
 80043b6:	7805      	ldrb	r5, [r0, #0]
 80043b8:	2d01      	cmp	r5, #1
void dmx_rxStart(dmx_cfg_Instance *dmx){
 80043ba:	4604      	mov	r4, r0
	if(dmx->type != dmx_cfg_TYPE_RECEIVER) return;
 80043bc:	d104      	bne.n	80043c8 <dmx_rxStart+0x14>
	uart_enableReceiveInt(dmx->uart);
 80043be:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80043c0:	f001 fd0a 	bl	8005dd8 <uart_enableReceiveInt>
	dmx->rxState = dmx_cfg_RX_STATE_WAIT_FOR_BREAK;
 80043c4:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 80043c8:	bd38      	pop	{r3, r4, r5, pc}

080043ca <dmx_irqTxTimerHandler>:
	++dmx->rxTimerUpdateCnt;
}

/*Transmit IRQs*/
void dmx_irqTxTimerHandler(dmx_cfg_Instance *dmx){
	if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 80043ca:	7843      	ldrb	r3, [r0, #1]
void dmx_irqTxTimerHandler(dmx_cfg_Instance *dmx){
 80043cc:	b510      	push	{r4, lr}
 80043ce:	4604      	mov	r4, r0
	if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d030      	beq.n	8004436 <dmx_irqTxTimerHandler+0x6c>
	if(dmx->txState == dmx_cfg_TX_STATE_SEND_BREAK){
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d10a      	bne.n	80043ee <dmx_irqTxTimerHandler+0x24>
		gpio_ConfigureToFloating(dmx->txBreakPort, dmx->txBreakPin);
 80043d8:	8901      	ldrh	r1, [r0, #8]
 80043da:	6840      	ldr	r0, [r0, #4]
 80043dc:	f000 ff1a 	bl	8005214 <gpio_ConfigureToFloating>
		tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkAfterBreakTime_us);
 80043e0:	6961      	ldr	r1, [r4, #20]
 80043e2:	68e0      	ldr	r0, [r4, #12]
 80043e4:	f001 fbd8 	bl	8005b98 <tim_setNewTimeAndStart>
		dmx->txState = dmx_cfg_TX_STATE_SEND_MARK;
 80043e8:	2303      	movs	r3, #3
		dmx->uart->CR1 &= ~USART_CR1_TXEIE;
		dmx->uart->TDR = dmx->universeStartCode;
		if(dmx->txMarkBetweenTime_us == 0) {
			dmx->uart->CR1 |= USART_CR1_TXEIE;		//start with transmission --> enable transmitbuffer empty interrupt
			tim_stop(dmx->txTimer);
			dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;	//The whole universe can be transmitted as fast as possible
 80043ea:	7063      	strb	r3, [r4, #1]
 80043ec:	bd10      	pop	{r4, pc}
	}else if(dmx->txState == dmx_cfg_TX_STATE_SEND_MARK){
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d11a      	bne.n	8004428 <dmx_irqTxTimerHandler+0x5e>
		dmx->universeCnt = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
		dmx->uart->CR1 &= ~USART_CR1_TXEIE;
 80043f8:	6c43      	ldr	r3, [r0, #68]	; 0x44
		if(dmx->txMarkBetweenTime_us == 0) {
 80043fa:	6981      	ldr	r1, [r0, #24]
		dmx->uart->CR1 &= ~USART_CR1_TXEIE;
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004402:	601a      	str	r2, [r3, #0]
		dmx->uart->TDR = dmx->universeStartCode;
 8004404:	f890 2052 	ldrb.w	r2, [r0, #82]	; 0x52
 8004408:	851a      	strh	r2, [r3, #40]	; 0x28
		if(dmx->txMarkBetweenTime_us == 0) {
 800440a:	b941      	cbnz	r1, 800441e <dmx_irqTxTimerHandler+0x54>
			dmx->uart->CR1 |= USART_CR1_TXEIE;		//start with transmission --> enable transmitbuffer empty interrupt
 800440c:	681a      	ldr	r2, [r3, #0]
			tim_stop(dmx->txTimer);
 800440e:	68c0      	ldr	r0, [r0, #12]
			dmx->uart->CR1 |= USART_CR1_TXEIE;		//start with transmission --> enable transmitbuffer empty interrupt
 8004410:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004414:	601a      	str	r2, [r3, #0]
			tim_stop(dmx->txTimer);
 8004416:	f001 fbdd 	bl	8005bd4 <tim_stop>
			dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;	//The whole universe can be transmitted as fast as possible
 800441a:	2301      	movs	r3, #1
 800441c:	e7e5      	b.n	80043ea <dmx_irqTxTimerHandler+0x20>
		}
		else{
			tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkBetweenTime_us);
 800441e:	68c0      	ldr	r0, [r0, #12]
 8004420:	f001 fbba 	bl	8005b98 <tim_setNewTimeAndStart>
			dmx->txState = dmx_cfg_TX_STATE_SEND_UNIVERSE;	//The universe can be transmitted with defined delay between all data bytes
 8004424:	2305      	movs	r3, #5
 8004426:	e7e0      	b.n	80043ea <dmx_irqTxTimerHandler+0x20>
		}
	}else if(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE){
 8004428:	2b05      	cmp	r3, #5
		dmx->uart->CR1 |= USART_CR1_TXEIE;		//start with transmission --> enable transmitbuffer empty interrupt
 800442a:	bf01      	itttt	eq
 800442c:	6c42      	ldreq	r2, [r0, #68]	; 0x44
 800442e:	6813      	ldreq	r3, [r2, #0]
 8004430:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 8004434:	6013      	streq	r3, [r2, #0]
 8004436:	bd10      	pop	{r4, pc}

08004438 <dmx_irqTxInterfaceHandler>:
	}
}

void dmx_irqTxInterfaceHandler(dmx_cfg_Instance *dmx){
 8004438:	b538      	push	{r3, r4, r5, lr}
	if (dmx->uart->ISR & USART_ISR_TXE){				//transmit dmx values
 800443a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800443c:	69da      	ldr	r2, [r3, #28]
 800443e:	0612      	lsls	r2, r2, #24
void dmx_irqTxInterfaceHandler(dmx_cfg_Instance *dmx){
 8004440:	4604      	mov	r4, r0
	if (dmx->uart->ISR & USART_ISR_TXE){				//transmit dmx values
 8004442:	d534      	bpl.n	80044ae <dmx_irqTxInterfaceHandler+0x76>
		dmx->uart->ISR &= ~USART_ISR_TXE; //Kill transmit-buffer empty flag
 8004444:	69da      	ldr	r2, [r3, #28]
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8004446:	7841      	ldrb	r1, [r0, #1]
		dmx->uart->ISR &= ~USART_ISR_TXE; //Kill transmit-buffer empty flag
 8004448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800444c:	61da      	str	r2, [r3, #28]
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 800444e:	b371      	cbz	r1, 80044ae <dmx_irqTxInterfaceHandler+0x76>
		if((dmx->txState == dmx_cfg_TX_STATE_WAIT_FOR_BREAK)||(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE)){
 8004450:	f001 05fb 	and.w	r5, r1, #251	; 0xfb
 8004454:	2d01      	cmp	r5, #1
 8004456:	d12a      	bne.n	80044ae <dmx_irqTxInterfaceHandler+0x76>
			if(dmx->universeCnt < dmx->universeSize){
 8004458:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800445c:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
 8004460:	4290      	cmp	r0, r2
 8004462:	d917      	bls.n	8004494 <dmx_irqTxInterfaceHandler+0x5c>
				dmx->uart->CR1 &= ~USART_CR1_TXEIE;
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800446a:	6018      	str	r0, [r3, #0]
				dmx->uart->TDR = dmx->universe[dmx->universeCnt];
 800446c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
				dmx->universeCnt++;
				if(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE) tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkBetweenTime_us);
 800446e:	2905      	cmp	r1, #5
				dmx->uart->TDR = dmx->universe[dmx->universeCnt];
 8004470:	5c80      	ldrb	r0, [r0, r2]
 8004472:	8518      	strh	r0, [r3, #40]	; 0x28
				dmx->universeCnt++;
 8004474:	f102 0201 	add.w	r2, r2, #1
 8004478:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
				if(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE) tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkBetweenTime_us);
 800447c:	d105      	bne.n	800448a <dmx_irqTxInterfaceHandler+0x52>
 800447e:	69a1      	ldr	r1, [r4, #24]
 8004480:	68e0      	ldr	r0, [r4, #12]
				dmx->universeComplete = true;
			}
		}

	}
}
 8004482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				if(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE) tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkBetweenTime_us);
 8004486:	f001 bb87 	b.w	8005b98 <tim_setNewTimeAndStart>
				else dmx->uart->CR1 |= USART_CR1_TXEIE;
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	bd38      	pop	{r3, r4, r5, pc}
				dmx->universeCnt = 0;
 8004494:	2200      	movs	r2, #0
 8004496:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
				dmx->uart->CR1 &= ~USART_CR1_TXEIE;	//disable transmit-buffer empty interrupt
 800449a:	681a      	ldr	r2, [r3, #0]
				tim_stop(dmx->txTimer);
 800449c:	68e0      	ldr	r0, [r4, #12]
				dmx->uart->CR1 &= ~USART_CR1_TXEIE;	//disable transmit-buffer empty interrupt
 800449e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044a2:	601a      	str	r2, [r3, #0]
				dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;
 80044a4:	7065      	strb	r5, [r4, #1]
				tim_stop(dmx->txTimer);
 80044a6:	f001 fb95 	bl	8005bd4 <tim_stop>
				dmx->universeComplete = true;
 80044aa:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 80044ae:	bd38      	pop	{r3, r4, r5, pc}

080044b0 <dmx_irqRxInterfaceHandler>:
void dmx_irqRxTimerHandler(dmx_cfg_Instance *dmx){
//TODO: Add measurement of break
}

void dmx_irqRxInterfaceHandler(dmx_cfg_Instance *dmx){
	uint32_t sr = dmx->uart->ISR;
 80044b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
void dmx_irqRxInterfaceHandler(dmx_cfg_Instance *dmx){
 80044b2:	b510      	push	{r4, lr}
	uint32_t sr = dmx->uart->ISR;
 80044b4:	69d4      	ldr	r4, [r2, #28]
	if (sr & USART_ISR_RXNE){
 80044b6:	06a1      	lsls	r1, r4, #26
 80044b8:	d538      	bpl.n	800452c <dmx_irqRxInterfaceHandler+0x7c>
		if(sr & USART_ISR_ORE) dmx->uart->ICR |= USART_ICR_ORECF; /*Kill overrun error*/
 80044ba:	0723      	lsls	r3, r4, #28
 80044bc:	bf48      	it	mi
 80044be:	6a13      	ldrmi	r3, [r2, #32]
		uint8_t  dmxByte = (uint8_t)dmx->uart->RDR;
		if(dmx->rxState == dmx_cfg_RX_STATE_NONE) return;
 80044c0:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
		if(sr & USART_ISR_ORE) dmx->uart->ICR |= USART_ICR_ORECF; /*Kill overrun error*/
 80044c4:	bf44      	itt	mi
 80044c6:	f043 0308 	orrmi.w	r3, r3, #8
 80044ca:	6213      	strmi	r3, [r2, #32]
		uint8_t  dmxByte = (uint8_t)dmx->uart->RDR;
 80044cc:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 80044ce:	b29b      	uxth	r3, r3
		if(dmx->rxState == dmx_cfg_RX_STATE_NONE) return;
 80044d0:	b361      	cbz	r1, 800452c <dmx_irqRxInterfaceHandler+0x7c>
		if(sr & USART_ISR_FE){	/*Frame error*/
 80044d2:	07a4      	lsls	r4, r4, #30
 80044d4:	d50c      	bpl.n	80044f0 <dmx_irqRxInterfaceHandler+0x40>
			dmx->uart->ICR |= USART_ICR_FECF; /*Kill frame error*/
 80044d6:	6a13      	ldr	r3, [r2, #32]
 80044d8:	f043 0302 	orr.w	r3, r3, #2
 80044dc:	6213      	str	r3, [r2, #32]
			dmx->universeCnt = 0;
 80044de:	2300      	movs	r3, #0
			dmx->rxState = dmx_cfg_RX_STATE_RECEIVE_START_CODE;
 80044e0:	2203      	movs	r2, #3
			dmx->universeCnt = 0;
 80044e2:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
			dmx->rxState = dmx_cfg_RX_STATE_RECEIVE_START_CODE;
 80044e6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
			dmx->universeComplete = false;
 80044ea:	f880 3053 	strb.w	r3, [r0, #83]	; 0x53
 80044ee:	bd10      	pop	{r4, pc}
		}else if(dmx->rxState == dmx_cfg_RX_STATE_RECEIVE_START_CODE){
 80044f0:	2903      	cmp	r1, #3
		uint8_t  dmxByte = (uint8_t)dmx->uart->RDR;
 80044f2:	b2db      	uxtb	r3, r3
		}else if(dmx->rxState == dmx_cfg_RX_STATE_RECEIVE_START_CODE){
 80044f4:	d105      	bne.n	8004502 <dmx_irqRxInterfaceHandler+0x52>
			dmx->rxState = dmx_cfg_RX_STATE_RECEIVE_UNIVERSE;
 80044f6:	2204      	movs	r2, #4
 80044f8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
			dmx->universeStartCode = dmxByte;
 80044fc:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
 8004500:	bd10      	pop	{r4, pc}
		}else if(dmx->rxState == dmx_cfg_RX_STATE_RECEIVE_UNIVERSE){
 8004502:	2904      	cmp	r1, #4
 8004504:	d112      	bne.n	800452c <dmx_irqRxInterfaceHandler+0x7c>
			dmx->universe[dmx->universeCnt] = dmxByte;
 8004506:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800450a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800450c:	548b      	strb	r3, [r1, r2]
			dmx->universeCnt++;
 800450e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
			if(dmx->universeCnt >= dmx->universeSize){
 8004512:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
			dmx->universeCnt++;
 8004516:	3301      	adds	r3, #1
 8004518:	b29b      	uxth	r3, r3
			if(dmx->universeCnt >= dmx->universeSize){
 800451a:	429a      	cmp	r2, r3
			dmx->universeCnt++;
 800451c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
				dmx->universeComplete = true;
 8004520:	bf9e      	ittt	ls
 8004522:	2301      	movls	r3, #1
 8004524:	f880 3053 	strbls.w	r3, [r0, #83]	; 0x53
				dmx->rxState = dmx_cfg_RX_STATE_WAIT_FOR_BREAK;
 8004528:	f880 3024 	strbls.w	r3, [r0, #36]	; 0x24
 800452c:	bd10      	pop	{r4, pc}

0800452e <eeprom_registerCallback>:
static inline void callbackError(uint8_t type);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void eeprom_registerCallback(eeprom_cfg_Config *config, eeprom_cfg_callback callback){
	config->callback = callback;
 800452e:	60c1      	str	r1, [r0, #12]
 8004530:	4770      	bx	lr

08004532 <eeprom_init>:
}
void eeprom_init(eeprom_cfg_Config *config){
	if(config->callback != NULL){
 8004532:	68c3      	ldr	r3, [r0, #12]
 8004534:	b113      	cbz	r3, 800453c <eeprom_init+0xa>
		config->maxAddress = config->memorySize >> 3; /*Convert Bit to Byte*/
 8004536:	6843      	ldr	r3, [r0, #4]
 8004538:	08db      	lsrs	r3, r3, #3
 800453a:	6103      	str	r3, [r0, #16]
 800453c:	4770      	bx	lr

0800453e <writeMsg>:
	idx |= (buf->buffer.data[lastTmp] << 0) & 0xFF;
	if((type == message->type) && (idx == message->index)) return 1;
	else return 0;
}

static inline uint8_t writeMsg(msg_Message *message, msg_Buffer *buf){
 800453e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004540:	460d      	mov	r5, r1
	uint8_t bufferState =  ringbuffer_NO_BUF;
	uint8_t isSimilarActive = 0;
	uint16_t nextMsgTmp = buf->buffer.in;
 8004542:	880e      	ldrh	r6, [r1, #0]
	if(message != NULL){
 8004544:	4604      	mov	r4, r0
 8004546:	2800      	cmp	r0, #0
 8004548:	d04c      	beq.n	80045e4 <writeMsg+0xa6>
	if(RINGBUFFER_isEmpty(&buf->buffer)) return 0;
 800454a:	4608      	mov	r0, r1
 800454c:	f000 f8e4 	bl	8004718 <RINGBUFFER_isEmpty>
 8004550:	4607      	mov	r7, r0
 8004552:	b9f0      	cbnz	r0, 8004592 <writeMsg+0x54>
	uint16_t lastTmp = buf->lastMsg;
 8004554:	89a9      	ldrh	r1, [r5, #12]
	if(++lastTmp >= buf->buffer.size) lastTmp = 0;
 8004556:	f8b5 e004 	ldrh.w	lr, [r5, #4]
	type = buf->buffer.data[lastTmp];
 800455a:	68a8      	ldr	r0, [r5, #8]
	if(++lastTmp >= buf->buffer.size) lastTmp = 0;
 800455c:	1c4b      	adds	r3, r1, #1
 800455e:	b29b      	uxth	r3, r3
 8004560:	4573      	cmp	r3, lr
 8004562:	bf28      	it	cs
 8004564:	2300      	movcs	r3, #0
	if(++lastTmp >= buf->buffer.size) lastTmp = 0;
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	b292      	uxth	r2, r2
 800456a:	4596      	cmp	lr, r2
 800456c:	bf98      	it	ls
 800456e:	2200      	movls	r2, #0
	type = buf->buffer.data[lastTmp];
 8004570:	f810 c001 	ldrb.w	ip, [r0, r1]
	if((type == message->type) && (idx == message->index)) return 1;
 8004574:	f894 e004 	ldrb.w	lr, [r4, #4]
 8004578:	45e6      	cmp	lr, ip
 800457a:	d10b      	bne.n	8004594 <writeMsg+0x56>
	idx = (buf->buffer.data[lastTmp] << 8) & 0xFF00;
 800457c:	f810 e003 	ldrb.w	lr, [r0, r3]
	idx |= (buf->buffer.data[lastTmp] << 0) & 0xFF;
 8004580:	5c83      	ldrb	r3, [r0, r2]
	if((type == message->type) && (idx == message->index)) return 1;
 8004582:	8822      	ldrh	r2, [r4, #0]
 8004584:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8004588:	429a      	cmp	r2, r3
 800458a:	d103      	bne.n	8004594 <writeMsg+0x56>
		if(isSimilarToLast(message, buf)){
			buf->buffer.in = buf->lastMsg;
 800458c:	8029      	strh	r1, [r5, #0]
			isSimilarActive = 1;
 800458e:	2701      	movs	r7, #1
 8004590:	e000      	b.n	8004594 <writeMsg+0x56>
	uint8_t isSimilarActive = 0;
 8004592:	2700      	movs	r7, #0
		}
		bufferState = RINGBUFFER_cIn(message->type, &buf->buffer);
 8004594:	4629      	mov	r1, r5
 8004596:	7920      	ldrb	r0, [r4, #4]
 8004598:	f000 f88a 	bl	80046b0 <RINGBUFFER_cIn>
		bufferState = RINGBUFFER_cIn((char)(message->index >> 8), &buf->buffer);
 800459c:	8820      	ldrh	r0, [r4, #0]
 800459e:	4629      	mov	r1, r5
 80045a0:	0a00      	lsrs	r0, r0, #8
 80045a2:	f000 f885 	bl	80046b0 <RINGBUFFER_cIn>
		bufferState = RINGBUFFER_cIn((char)(message->index), &buf->buffer);
 80045a6:	4629      	mov	r1, r5
 80045a8:	7820      	ldrb	r0, [r4, #0]
 80045aa:	f000 f881 	bl	80046b0 <RINGBUFFER_cIn>
		bufferState = RINGBUFFER_cIn((char)(message->value >> 8), &buf->buffer);
 80045ae:	4629      	mov	r1, r5
 80045b0:	78e0      	ldrb	r0, [r4, #3]
 80045b2:	f000 f87d 	bl	80046b0 <RINGBUFFER_cIn>
		bufferState = RINGBUFFER_cIn((char)(message->value), &buf->buffer);
 80045b6:	4629      	mov	r1, r5
 80045b8:	78a0      	ldrb	r0, [r4, #2]
 80045ba:	f000 f879 	bl	80046b0 <RINGBUFFER_cIn>
		bufferState = RINGBUFFER_cIn((char)(message->ctx >> 8), &buf->buffer);
 80045be:	4629      	mov	r1, r5
 80045c0:	79e0      	ldrb	r0, [r4, #7]
 80045c2:	f000 f875 	bl	80046b0 <RINGBUFFER_cIn>
		bufferState = RINGBUFFER_cIn((char)(message->ctx), &buf->buffer);
 80045c6:	4629      	mov	r1, r5
 80045c8:	79a0      	ldrb	r0, [r4, #6]
 80045ca:	f000 f871 	bl	80046b0 <RINGBUFFER_cIn>
		bufferState = RINGBUFFER_cIn(message->origin, &buf->buffer);
 80045ce:	4629      	mov	r1, r5
 80045d0:	7960      	ldrb	r0, [r4, #5]
 80045d2:	f000 f86d 	bl	80046b0 <RINGBUFFER_cIn>
	}
	if(bufferState ==  ringbuffer_FULL) buf->buffer.in = nextMsgTmp;
 80045d6:	2803      	cmp	r0, #3
 80045d8:	d101      	bne.n	80045de <writeMsg+0xa0>
 80045da:	802e      	strh	r6, [r5, #0]
 80045dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(!isSimilarActive) buf->lastMsg = nextMsgTmp;
 80045de:	b917      	cbnz	r7, 80045e6 <writeMsg+0xa8>
 80045e0:	81ae      	strh	r6, [r5, #12]
	return bufferState;
 80045e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045e4:	e7fc      	b.n	80045e0 <writeMsg+0xa2>
}
 80045e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080045e8 <msg_writeEvent>:
	msgBuffer.size = size;
	msgBuffer.data = pData;
}

uint8_t msg_writeEvent(msg_Message *message, msg_Buffer *buf){
	message->index = CAST_MSG_TO_EVENT(message->index);
 80045e8:	8803      	ldrh	r3, [r0, #0]
 80045ea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80045ee:	8003      	strh	r3, [r0, #0]
	uint8_t bufferState = writeMsg(message, buf);
 80045f0:	f7ff bfa5 	b.w	800453e <writeMsg>

080045f4 <msg_writeAction>:
	return bufferState;
}

uint8_t msg_writeAction(msg_Message *message, msg_Buffer *buf){
	message->index = CAST_MSG_TO_ACTION(message->index);
 80045f4:	8803      	ldrh	r3, [r0, #0]
 80045f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045fe:	8003      	strh	r3, [r0, #0]
	uint8_t bufferState = writeMsg(message, buf);
 8004600:	f7ff bf9d 	b.w	800453e <writeMsg>

08004604 <msg_getNext>:
	return bufferState;
}

msg_Message *msg_getNext(msg_Message *message, msg_Buffer *buf){
 8004604:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t bufferState =  ringbuffer_OK;
	char tmp = 0;
 8004606:	ad02      	add	r5, sp, #8
 8004608:	2300      	movs	r3, #0
 800460a:	f805 3d01 	strb.w	r3, [r5, #-1]!
msg_Message *msg_getNext(msg_Message *message, msg_Buffer *buf){
 800460e:	4604      	mov	r4, r0
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8004610:	4628      	mov	r0, r5
msg_Message *msg_getNext(msg_Message *message, msg_Buffer *buf){
 8004612:	460e      	mov	r6, r1
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8004614:	f000 f868 	bl	80046e8 <RINGBUFFER_cOut>
	message->type = tmp;
 8004618:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800461c:	7123      	strb	r3, [r4, #4]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 800461e:	4631      	mov	r1, r6
 8004620:	4628      	mov	r0, r5
 8004622:	f000 f861 	bl	80046e8 <RINGBUFFER_cOut>
	message->index |= (uint16_t)((tmp & 0xFF) << 8);
 8004626:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800462a:	8823      	ldrh	r3, [r4, #0]
 800462c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004630:	8023      	strh	r3, [r4, #0]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8004632:	4631      	mov	r1, r6
 8004634:	4628      	mov	r0, r5
 8004636:	f000 f857 	bl	80046e8 <RINGBUFFER_cOut>
	message->index |= (uint16_t)(tmp & 0xFF);
 800463a:	8822      	ldrh	r2, [r4, #0]
 800463c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004640:	4313      	orrs	r3, r2
 8004642:	8023      	strh	r3, [r4, #0]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8004644:	4631      	mov	r1, r6
 8004646:	4628      	mov	r0, r5
 8004648:	f000 f84e 	bl	80046e8 <RINGBUFFER_cOut>
	message->value |= (uint16_t)((tmp & 0xFF) << 8);
 800464c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004650:	8863      	ldrh	r3, [r4, #2]
 8004652:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004656:	8063      	strh	r3, [r4, #2]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8004658:	4631      	mov	r1, r6
 800465a:	4628      	mov	r0, r5
 800465c:	f000 f844 	bl	80046e8 <RINGBUFFER_cOut>
	message->value |= (uint16_t)(tmp & 0xFF);
 8004660:	8862      	ldrh	r2, [r4, #2]
 8004662:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004666:	4313      	orrs	r3, r2
 8004668:	8063      	strh	r3, [r4, #2]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 800466a:	4631      	mov	r1, r6
 800466c:	4628      	mov	r0, r5
 800466e:	f000 f83b 	bl	80046e8 <RINGBUFFER_cOut>
	message->ctx |= (uint16_t)((tmp & 0xFF) << 8);
 8004672:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004676:	88e3      	ldrh	r3, [r4, #6]
 8004678:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800467c:	80e3      	strh	r3, [r4, #6]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 800467e:	4631      	mov	r1, r6
 8004680:	4628      	mov	r0, r5
 8004682:	f000 f831 	bl	80046e8 <RINGBUFFER_cOut>
	message->ctx |= (uint16_t)(tmp & 0xFF);
 8004686:	88e2      	ldrh	r2, [r4, #6]
 8004688:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800468c:	4313      	orrs	r3, r2
 800468e:	80e3      	strh	r3, [r4, #6]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8004690:	4631      	mov	r1, r6
 8004692:	4628      	mov	r0, r5
 8004694:	f000 f828 	bl	80046e8 <RINGBUFFER_cOut>
	message->origin = tmp;
 8004698:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800469c:	7163      	strb	r3, [r4, #5]
	if(bufferState ==  ringbuffer_OK)return message;
 800469e:	2801      	cmp	r0, #1
	else return NULL;
}
 80046a0:	bf0c      	ite	eq
 80046a2:	4620      	moveq	r0, r4
 80046a4:	2000      	movne	r0, #0
 80046a6:	b002      	add	sp, #8
 80046a8:	bd70      	pop	{r4, r5, r6, pc}

080046aa <msg_isAction>:

uint8_t msg_isAction(msg_Message *message){
	if((message->index & ACTION_MSK) == ACTION_MSK) return TRUE;
 80046aa:	8800      	ldrh	r0, [r0, #0]
	else return FALSE;
}
 80046ac:	0bc0      	lsrs	r0, r0, #15
 80046ae:	4770      	bx	lr

080046b0 <RINGBUFFER_cIn>:
 *      Author: sawadee
 */
#include "ringbuffer.h"

uint8_t RINGBUFFER_cIn(char data, stRingBuf *pBuf){
	if(pBuf->data != NULL){
 80046b0:	688b      	ldr	r3, [r1, #8]
uint8_t RINGBUFFER_cIn(char data, stRingBuf *pBuf){
 80046b2:	b530      	push	{r4, r5, lr}
	if(pBuf->data != NULL){
 80046b4:	b1a3      	cbz	r3, 80046e0 <RINGBUFFER_cIn+0x30>
		if ( ( pBuf->in + 1 == pBuf->out ) || ( pBuf->out == 0 && pBuf->in + 1 == pBuf->size ) ) return ringbuffer_FULL;
 80046b6:	880a      	ldrh	r2, [r1, #0]
 80046b8:	884d      	ldrh	r5, [r1, #2]
 80046ba:	1c54      	adds	r4, r2, #1
 80046bc:	42ac      	cmp	r4, r5
 80046be:	d011      	beq.n	80046e4 <RINGBUFFER_cIn+0x34>
 80046c0:	b915      	cbnz	r5, 80046c8 <RINGBUFFER_cIn+0x18>
 80046c2:	888d      	ldrh	r5, [r1, #4]
 80046c4:	42ac      	cmp	r4, r5
 80046c6:	d00d      	beq.n	80046e4 <RINGBUFFER_cIn+0x34>
		pBuf->data[pBuf->in] = data;
 80046c8:	5498      	strb	r0, [r3, r2]
		pBuf->in++;
 80046ca:	880b      	ldrh	r3, [r1, #0]
		if (pBuf->in >= pBuf->size) pBuf->in = 0;
 80046cc:	888a      	ldrh	r2, [r1, #4]
		pBuf->in++;
 80046ce:	3301      	adds	r3, #1
 80046d0:	b29b      	uxth	r3, r3
		if (pBuf->in >= pBuf->size) pBuf->in = 0;
 80046d2:	429a      	cmp	r2, r3
		pBuf->in++;
 80046d4:	800b      	strh	r3, [r1, #0]
		if (pBuf->in >= pBuf->size) pBuf->in = 0;
 80046d6:	d801      	bhi.n	80046dc <RINGBUFFER_cIn+0x2c>
 80046d8:	2300      	movs	r3, #0
 80046da:	800b      	strh	r3, [r1, #0]
		return ringbuffer_OK;
 80046dc:	2001      	movs	r0, #1
	}else return ringbuffer_NO_BUF;
}
 80046de:	bd30      	pop	{r4, r5, pc}
	}else return ringbuffer_NO_BUF;
 80046e0:	4618      	mov	r0, r3
 80046e2:	bd30      	pop	{r4, r5, pc}
		if ( ( pBuf->in + 1 == pBuf->out ) || ( pBuf->out == 0 && pBuf->in + 1 == pBuf->size ) ) return ringbuffer_FULL;
 80046e4:	2003      	movs	r0, #3
 80046e6:	bd30      	pop	{r4, r5, pc}

080046e8 <RINGBUFFER_cOut>:
uint8_t RINGBUFFER_cOut(char *pData, stRingBuf *pBuf){
	if(pBuf->data != NULL){
 80046e8:	688b      	ldr	r3, [r1, #8]
uint8_t RINGBUFFER_cOut(char *pData, stRingBuf *pBuf){
 80046ea:	b510      	push	{r4, lr}
	if(pBuf->data != NULL){
 80046ec:	b183      	cbz	r3, 8004710 <RINGBUFFER_cOut+0x28>
		if (pBuf->out == pBuf->in) return ringbuffer_EMPTY;
 80046ee:	884a      	ldrh	r2, [r1, #2]
 80046f0:	880c      	ldrh	r4, [r1, #0]
 80046f2:	4294      	cmp	r4, r2
 80046f4:	d00e      	beq.n	8004714 <RINGBUFFER_cOut+0x2c>
		*pData = pBuf->data[pBuf->out];
 80046f6:	5c9b      	ldrb	r3, [r3, r2]
 80046f8:	7003      	strb	r3, [r0, #0]
		pBuf->out++;
 80046fa:	884b      	ldrh	r3, [r1, #2]
		if (pBuf->out >= pBuf->size)
 80046fc:	888a      	ldrh	r2, [r1, #4]
		pBuf->out++;
 80046fe:	3301      	adds	r3, #1
 8004700:	b29b      	uxth	r3, r3
		if (pBuf->out >= pBuf->size)
 8004702:	429a      	cmp	r2, r3
		pBuf->out++;
 8004704:	804b      	strh	r3, [r1, #2]
		if (pBuf->out >= pBuf->size)
 8004706:	d801      	bhi.n	800470c <RINGBUFFER_cOut+0x24>
		  pBuf->out = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	804b      	strh	r3, [r1, #2]
		return ringbuffer_OK;
 800470c:	2001      	movs	r0, #1
	}else return ringbuffer_NO_BUF;
}
 800470e:	bd10      	pop	{r4, pc}
	}else return ringbuffer_NO_BUF;
 8004710:	4618      	mov	r0, r3
 8004712:	bd10      	pop	{r4, pc}
		if (pBuf->out == pBuf->in) return ringbuffer_EMPTY;
 8004714:	2002      	movs	r0, #2
 8004716:	bd10      	pop	{r4, pc}

08004718 <RINGBUFFER_isEmpty>:

uint8_t RINGBUFFER_isEmpty(stRingBuf *pBuf){
	if(pBuf->out == pBuf->in) return 1;
 8004718:	8842      	ldrh	r2, [r0, #2]
 800471a:	8800      	ldrh	r0, [r0, #0]
	else return 0;
}
 800471c:	1a13      	subs	r3, r2, r0
 800471e:	4258      	negs	r0, r3
 8004720:	4158      	adcs	r0, r3
 8004722:	4770      	bx	lr

08004724 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004724:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
{
 8004728:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800472a:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800472e:	b15b      	cbz	r3, 8004748 <USBD_CDC_EP0_RxReady+0x24>
 8004730:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004734:	28ff      	cmp	r0, #255	; 0xff
 8004736:	d007      	beq.n	8004748 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800473e:	4621      	mov	r1, r4
 8004740:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 8004742:	23ff      	movs	r3, #255	; 0xff
 8004744:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8004748:	2000      	movs	r0, #0
 800474a:	bd10      	pop	{r4, pc}

0800474c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800474c:	2343      	movs	r3, #67	; 0x43
 800474e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8004750:	4800      	ldr	r0, [pc, #0]	; (8004754 <USBD_CDC_GetFSCfgDesc+0x8>)
 8004752:	4770      	bx	lr
 8004754:	20000494 	.word	0x20000494

08004758 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8004758:	2343      	movs	r3, #67	; 0x43
 800475a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800475c:	4800      	ldr	r0, [pc, #0]	; (8004760 <USBD_CDC_GetHSCfgDesc+0x8>)
 800475e:	4770      	bx	lr
 8004760:	200004d8 	.word	0x200004d8

08004764 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004764:	2343      	movs	r3, #67	; 0x43
 8004766:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004768:	4800      	ldr	r0, [pc, #0]	; (800476c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800476a:	4770      	bx	lr
 800476c:	20000528 	.word	0x20000528

08004770 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8004770:	230a      	movs	r3, #10
 8004772:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004774:	4800      	ldr	r0, [pc, #0]	; (8004778 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004776:	4770      	bx	lr
 8004778:	2000051c 	.word	0x2000051c

0800477c <USBD_CDC_DataOut>:
{
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004780:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004784:	f001 fcb4 	bl	80060f0 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8004788:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800478c:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8004790:	b14b      	cbz	r3, 80047a6 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004792:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 8004796:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80047a0:	4798      	blx	r3
    return USBD_OK;
 80047a2:	2000      	movs	r0, #0
 80047a4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80047a6:	2002      	movs	r0, #2
}
 80047a8:	bd38      	pop	{r3, r4, r5, pc}

080047aa <USBD_CDC_DataIn>:
{
 80047aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80047ac:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 80047b0:	b1ce      	cbz	r6, 80047e6 <USBD_CDC_DataIn+0x3c>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80047b2:	2314      	movs	r3, #20
 80047b4:	fb03 0301 	mla	r3, r3, r1, r0
 80047b8:	69da      	ldr	r2, [r3, #28]
 80047ba:	b182      	cbz	r2, 80047de <USBD_CDC_DataIn+0x34>
 80047bc:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 80047c0:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 80047c4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80047c6:	fbb2 f4f5 	udiv	r4, r2, r5
 80047ca:	fb05 2414 	mls	r4, r5, r4, r2
 80047ce:	b934      	cbnz	r4, 80047de <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 80047d0:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80047d2:	4622      	mov	r2, r4
 80047d4:	4623      	mov	r3, r4
 80047d6:	f001 fc6f 	bl	80060b8 <USBD_LL_Transmit>
    return USBD_OK;
 80047da:	4620      	mov	r0, r4
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80047dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 80047de:	2000      	movs	r0, #0
 80047e0:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 80047e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 80047e6:	2002      	movs	r0, #2
}
 80047e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080047ea <USBD_CDC_Setup>:
{
 80047ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047ee:	780a      	ldrb	r2, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80047f0:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 80047f4:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047f8:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 80047fc:	4605      	mov	r5, r0
 80047fe:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 8004800:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8004804:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004808:	d028      	beq.n	800485c <USBD_CDC_Setup+0x72>
 800480a:	2c20      	cmp	r4, #32
 800480c:	d147      	bne.n	800489e <USBD_CDC_Setup+0xb4>
    if (req->wLength)
 800480e:	88cc      	ldrh	r4, [r1, #6]
 8004810:	784b      	ldrb	r3, [r1, #1]
 8004812:	b1e4      	cbz	r4, 800484e <USBD_CDC_Setup+0x64>
      if (req->bmRequest & 0x80U)
 8004814:	0612      	lsls	r2, r2, #24
 8004816:	d511      	bpl.n	800483c <USBD_CDC_Setup+0x52>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004818:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800481c:	4639      	mov	r1, r7
 800481e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8004822:	4618      	mov	r0, r3
 8004824:	4622      	mov	r2, r4
 8004826:	47c8      	blx	r9
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004828:	88f2      	ldrh	r2, [r6, #6]
 800482a:	4639      	mov	r1, r7
 800482c:	4628      	mov	r0, r5
 800482e:	f000 fc27 	bl	8005080 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004832:	4644      	mov	r4, r8
}
 8004834:	4620      	mov	r0, r4
 8004836:	b003      	add	sp, #12
 8004838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hcdc->CmdOpCode = req->bRequest;
 800483c:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004840:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004844:	4622      	mov	r2, r4
 8004846:	4639      	mov	r1, r7
 8004848:	f000 fc2f 	bl	80050aa <USBD_CtlPrepareRx>
 800484c:	e7f1      	b.n	8004832 <USBD_CDC_Setup+0x48>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800484e:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004852:	4618      	mov	r0, r3
 8004854:	6895      	ldr	r5, [r2, #8]
 8004856:	4622      	mov	r2, r4
 8004858:	47a8      	blx	r5
 800485a:	e7eb      	b.n	8004834 <USBD_CDC_Setup+0x4a>
    switch (req->bRequest)
 800485c:	784f      	ldrb	r7, [r1, #1]
 800485e:	2f0a      	cmp	r7, #10
 8004860:	d00d      	beq.n	800487e <USBD_CDC_Setup+0x94>
 8004862:	2f0b      	cmp	r7, #11
 8004864:	d015      	beq.n	8004892 <USBD_CDC_Setup+0xa8>
 8004866:	b9d7      	cbnz	r7, 800489e <USBD_CDC_Setup+0xb4>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004868:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800486c:	2b03      	cmp	r3, #3
 800486e:	d114      	bne.n	800489a <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8004870:	2202      	movs	r2, #2
 8004872:	f10d 0106 	add.w	r1, sp, #6
 8004876:	f000 fc03 	bl	8005080 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800487a:	463c      	mov	r4, r7
 800487c:	e7da      	b.n	8004834 <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800487e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004882:	2b03      	cmp	r3, #3
 8004884:	d109      	bne.n	800489a <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8004886:	2201      	movs	r2, #1
 8004888:	f10d 0105 	add.w	r1, sp, #5
 800488c:	f000 fbf8 	bl	8005080 <USBD_CtlSendData>
 8004890:	e7d0      	b.n	8004834 <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004892:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004896:	2b03      	cmp	r3, #3
 8004898:	d0cc      	beq.n	8004834 <USBD_CDC_Setup+0x4a>
        USBD_CtlError (pdev, req);
 800489a:	4631      	mov	r1, r6
 800489c:	4628      	mov	r0, r5
    USBD_CtlError (pdev, req);
 800489e:	f000 fbc8 	bl	8005032 <USBD_CtlError>
    ret = USBD_FAIL;
 80048a2:	2402      	movs	r4, #2
    break;
 80048a4:	e7c6      	b.n	8004834 <USBD_CDC_Setup+0x4a>

080048a6 <USBD_CDC_DeInit>:
{
 80048a6:	b538      	push	{r3, r4, r5, lr}
 80048a8:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80048aa:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80048ac:	2181      	movs	r1, #129	; 0x81
 80048ae:	f001 fbbb 	bl	8006028 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80048b2:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80048b4:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80048b6:	4620      	mov	r0, r4
 80048b8:	f001 fbb6 	bl	8006028 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80048bc:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80048c0:	2182      	movs	r1, #130	; 0x82
 80048c2:	4620      	mov	r0, r4
 80048c4:	f001 fbb0 	bl	8006028 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 80048c8:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80048cc:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 80048ce:	b14b      	cbz	r3, 80048e4 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80048d0:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80048d8:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 80048dc:	f001 fc36 	bl	800614c <USBD_static_free>
    pdev->pClassData = NULL;
 80048e0:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 80048e4:	2000      	movs	r0, #0
 80048e6:	bd38      	pop	{r3, r4, r5, pc}

080048e8 <USBD_CDC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80048e8:	7c03      	ldrb	r3, [r0, #16]
{
 80048ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ee:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80048f0:	bbcb      	cbnz	r3, 8004966 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80048f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048f6:	2202      	movs	r2, #2
 80048f8:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80048fa:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80048fc:	f001 fb84 	bl	8006008 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004900:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004902:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004906:	4629      	mov	r1, r5
 8004908:	2202      	movs	r2, #2
 800490a:	4620      	mov	r0, r4
 800490c:	f001 fb7c 	bl	8006008 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004910:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004914:	2308      	movs	r3, #8
 8004916:	2203      	movs	r2, #3
 8004918:	2182      	movs	r1, #130	; 0x82
 800491a:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800491c:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800491e:	f001 fb73 	bl	8006008 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004922:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004924:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004928:	f001 fc0c 	bl	8006144 <USBD_static_malloc>
 800492c:	4606      	mov	r6, r0
 800492e:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 8004932:	b358      	cbz	r0, 800498c <USBD_CDC_Init+0xa4>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004934:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800493c:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8004940:	2700      	movs	r7, #0
 8004942:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8004946:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800494a:	f1b8 0f00 	cmp.w	r8, #0
 800494e:	d113      	bne.n	8004978 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004950:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004954:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8004958:	4629      	mov	r1, r5
 800495a:	4620      	mov	r0, r4
 800495c:	f001 fbba 	bl	80060d4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004960:	4640      	mov	r0, r8
 8004962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004966:	2340      	movs	r3, #64	; 0x40
 8004968:	2202      	movs	r2, #2
 800496a:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800496c:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800496e:	f001 fb4b 	bl	8006008 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004972:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004974:	2340      	movs	r3, #64	; 0x40
 8004976:	e7c6      	b.n	8004906 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004978:	2340      	movs	r3, #64	; 0x40
 800497a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800497e:	4629      	mov	r1, r5
 8004980:	4620      	mov	r0, r4
 8004982:	f001 fba7 	bl	80060d4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004986:	4638      	mov	r0, r7
 8004988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 800498c:	4628      	mov	r0, r5
}
 800498e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004992 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8004992:	b119      	cbz	r1, 800499c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8004994:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 8004998:	2000      	movs	r0, #0
 800499a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800499c:	2002      	movs	r0, #2
  }

  return ret;
}
 800499e:	4770      	bx	lr

080049a0 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80049a0:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80049a4:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80049a6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80049aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80049ae:	4770      	bx	lr

080049b0 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80049b0:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  return USBD_OK;
}
 80049b4:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80049b6:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80049ba:	4770      	bx	lr

080049bc <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80049bc:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 80049c0:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80049c2:	b162      	cbz	r2, 80049de <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80049c4:	7c04      	ldrb	r4, [r0, #16]
 80049c6:	b944      	cbnz	r4, 80049da <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80049c8:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80049cc:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80049d0:	2101      	movs	r1, #1
 80049d2:	f001 fb7f 	bl	80060d4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80049d6:	2000      	movs	r0, #0
 80049d8:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80049da:	2340      	movs	r3, #64	; 0x40
 80049dc:	e7f6      	b.n	80049cc <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 80049de:	2002      	movs	r0, #2
  }
}
 80049e0:	bd10      	pop	{r4, pc}

080049e2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80049e2:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80049e4:	b180      	cbz	r0, 8004a08 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80049e6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80049ea:	b113      	cbz	r3, 80049f2 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80049f2:	b109      	cbz	r1, 80049f8 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80049f4:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80049f8:	2301      	movs	r3, #1
 80049fa:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 80049fe:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004a00:	f001 faae 	bl	8005f60 <USBD_LL_Init>

  return USBD_OK;
 8004a04:	2000      	movs	r0, #0
 8004a06:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004a08:	2002      	movs	r0, #2
}
 8004a0a:	bd08      	pop	{r3, pc}

08004a0c <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8004a0c:	b119      	cbz	r1, 8004a16 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004a0e:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8004a12:	2000      	movs	r0, #0
 8004a14:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004a16:	2002      	movs	r0, #2
  }

  return status;
}
 8004a18:	4770      	bx	lr

08004a1a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004a1a:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004a1c:	f001 fae6 	bl	8005fec <USBD_LL_Start>

  return USBD_OK;
}
 8004a20:	2000      	movs	r0, #0
 8004a22:	bd08      	pop	{r3, pc}

08004a24 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004a24:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8004a26:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004a2a:	b90b      	cbnz	r3, 8004a30 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004a2c:	2002      	movs	r0, #2
 8004a2e:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4798      	blx	r3
 8004a34:	2800      	cmp	r0, #0
 8004a36:	d1f9      	bne.n	8004a2c <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8004a38:	bd08      	pop	{r3, pc}

08004a3a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004a3a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004a3c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	4798      	blx	r3
  return USBD_OK;
}
 8004a44:	2000      	movs	r0, #0
 8004a46:	bd08      	pop	{r3, pc}

08004a48 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004a4c:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8004a50:	4628      	mov	r0, r5
 8004a52:	f000 fada 	bl	800500a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004a56:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004a58:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 8004a5c:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8004a60:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8004a64:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8004a68:	f001 031f 	and.w	r3, r1, #31
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d00e      	beq.n	8004a8e <USBD_LL_SetupStage+0x46>
 8004a70:	d307      	bcc.n	8004a82 <USBD_LL_SetupStage+0x3a>
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d010      	beq.n	8004a98 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004a76:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f001 fae2 	bl	8006044 <USBD_LL_StallEP>
    break;
 8004a80:	e003      	b.n	8004a8a <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8004a82:	4629      	mov	r1, r5
 8004a84:	4620      	mov	r0, r4
 8004a86:	f000 f8f1 	bl	8004c6c <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8004a8e:	4629      	mov	r1, r5
 8004a90:	4620      	mov	r0, r4
 8004a92:	f000 fa0d 	bl	8004eb0 <USBD_StdItfReq>
    break;
 8004a96:	e7f8      	b.n	8004a8a <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8004a98:	4629      	mov	r1, r5
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	f000 fa2d 	bl	8004efa <USBD_StdEPReq>
    break;
 8004aa0:	e7f3      	b.n	8004a8a <USBD_LL_SetupStage+0x42>

08004aa2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004aa2:	b570      	push	{r4, r5, r6, lr}
 8004aa4:	4605      	mov	r5, r0
 8004aa6:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8004aa8:	bb39      	cbnz	r1, 8004afa <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004aaa:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	d11e      	bne.n	8004af0 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 8004ab2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8004ab6:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d90b      	bls.n	8004ad6 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8004abe:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 8004ac0:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8004ac2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 8004ac6:	bf8c      	ite	hi
 8004ac8:	b29a      	uxthhi	r2, r3
 8004aca:	b292      	uxthls	r2, r2
 8004acc:	4631      	mov	r1, r6
 8004ace:	f000 fafb 	bl	80050c8 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004ad2:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8004ad4:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004ad6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	b123      	cbz	r3, 8004ae8 <USBD_LL_DataOutStage+0x46>
 8004ade:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004ae2:	2a03      	cmp	r2, #3
 8004ae4:	d100      	bne.n	8004ae8 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8004ae6:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004ae8:	4628      	mov	r0, r5
 8004aea:	f000 faf5 	bl	80050d8 <USBD_CtlSendStatus>
 8004aee:	e7f0      	b.n	8004ad2 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004af0:	2b05      	cmp	r3, #5
 8004af2:	d1ee      	bne.n	8004ad2 <USBD_LL_DataOutStage+0x30>
        USBD_LL_StallEP(pdev, 0U);
 8004af4:	f001 faa6 	bl	8006044 <USBD_LL_StallEP>
 8004af8:	e7eb      	b.n	8004ad2 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 8004afa:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	b12b      	cbz	r3, 8004b0e <USBD_LL_DataOutStage+0x6c>
 8004b02:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004b06:	2a03      	cmp	r2, #3
 8004b08:	d101      	bne.n	8004b0e <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8004b0a:	4798      	blx	r3
 8004b0c:	e7e1      	b.n	8004ad2 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8004b0e:	2002      	movs	r0, #2
}
 8004b10:	bd70      	pop	{r4, r5, r6, pc}

08004b12 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8004b12:	b570      	push	{r4, r5, r6, lr}
 8004b14:	4613      	mov	r3, r2
 8004b16:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8004b18:	460e      	mov	r6, r1
 8004b1a:	2900      	cmp	r1, #0
 8004b1c:	d148      	bne.n	8004bb0 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004b1e:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8004b22:	2a02      	cmp	r2, #2
 8004b24:	d13d      	bne.n	8004ba2 <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8004b26:	6a05      	ldr	r5, [r0, #32]
 8004b28:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004b2a:	4295      	cmp	r5, r2
 8004b2c:	d914      	bls.n	8004b58 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8004b2e:	1aaa      	subs	r2, r5, r2
 8004b30:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8004b32:	4619      	mov	r1, r3
 8004b34:	b292      	uxth	r2, r2
 8004b36:	f000 fab0 	bl	800509a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004b3a:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4620      	mov	r0, r4
 8004b42:	f001 fac7 	bl	80060d4 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004b46:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	f04f 0000 	mov.w	r0, #0
 8004b50:	d13a      	bne.n	8004bc8 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8004b52:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8004b56:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004b58:	69c3      	ldr	r3, [r0, #28]
 8004b5a:	fbb3 f5f2 	udiv	r5, r3, r2
 8004b5e:	fb02 3515 	mls	r5, r2, r5, r3
 8004b62:	b965      	cbnz	r5, 8004b7e <USBD_LL_DataInStage+0x6c>
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d80a      	bhi.n	8004b7e <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8004b68:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d206      	bcs.n	8004b7e <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004b70:	462a      	mov	r2, r5
 8004b72:	f000 fa92 	bl	800509a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004b76:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004b7a:	462b      	mov	r3, r5
 8004b7c:	e7de      	b.n	8004b3c <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004b7e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	b12b      	cbz	r3, 8004b92 <USBD_LL_DataInStage+0x80>
 8004b86:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8004b8a:	2a03      	cmp	r2, #3
 8004b8c:	d101      	bne.n	8004b92 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 8004b8e:	4620      	mov	r0, r4
 8004b90:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8004b92:	2180      	movs	r1, #128	; 0x80
 8004b94:	4620      	mov	r0, r4
 8004b96:	f001 fa55 	bl	8006044 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f000 faa7 	bl	80050ee <USBD_CtlReceiveStatus>
 8004ba0:	e7d1      	b.n	8004b46 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004ba2:	f032 0304 	bics.w	r3, r2, #4
 8004ba6:	d1ce      	bne.n	8004b46 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8004ba8:	2180      	movs	r1, #128	; 0x80
 8004baa:	f001 fa4b 	bl	8006044 <USBD_LL_StallEP>
 8004bae:	e7ca      	b.n	8004b46 <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8004bb0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	b133      	cbz	r3, 8004bc6 <USBD_LL_DataInStage+0xb4>
 8004bb8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004bbc:	2a03      	cmp	r2, #3
 8004bbe:	d102      	bne.n	8004bc6 <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004bc0:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004bc2:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8004bc4:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8004bc6:	2002      	movs	r0, #2
}
 8004bc8:	bd70      	pop	{r4, r5, r6, pc}

08004bca <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004bca:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004bcc:	2200      	movs	r2, #0
{
 8004bce:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004bd0:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004bd2:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004bd4:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004bd6:	2340      	movs	r3, #64	; 0x40
 8004bd8:	f001 fa16 	bl	8006008 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004bdc:	4633      	mov	r3, r6
 8004bde:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004be0:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004be4:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004be8:	2200      	movs	r2, #0
 8004bea:	4620      	mov	r0, r4
 8004bec:	f001 fa0c 	bl	8006008 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8004bf0:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004bf4:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 8004bf6:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004bf8:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004bfa:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8004bfe:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8004c02:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004c04:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8004c08:	b123      	cbz	r3, 8004c14 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004c0a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004c0e:	4620      	mov	r0, r4
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004c14:	2000      	movs	r0, #0
 8004c16:	bd70      	pop	{r4, r5, r6, pc}

08004c18 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004c18:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	4770      	bx	lr

08004c1e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004c1e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004c22:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004c26:	2304      	movs	r3, #4
 8004c28:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	4770      	bx	lr

08004c30 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8004c30:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8004c34:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8004c38:	2000      	movs	r0, #0
 8004c3a:	4770      	bx	lr

08004c3c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004c3c:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c3e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004c42:	2a03      	cmp	r2, #3
 8004c44:	d104      	bne.n	8004c50 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8004c46:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	b103      	cbz	r3, 8004c50 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8004c4e:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8004c50:	2000      	movs	r0, #0
 8004c52:	bd08      	pop	{r3, pc}

08004c54 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8004c54:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8004c56:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8004c58:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8004c5a:	f001 f9f3 	bl	8006044 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8004c5e:	4620      	mov	r0, r4
 8004c60:	2100      	movs	r1, #0
}
 8004c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8004c66:	f001 b9ed 	b.w	8006044 <USBD_LL_StallEP>
	...

08004c6c <USBD_StdDevReq>:
{
 8004c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c6e:	780b      	ldrb	r3, [r1, #0]
 8004c70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c74:	2b20      	cmp	r3, #32
{
 8004c76:	4604      	mov	r4, r0
 8004c78:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c7a:	d014      	beq.n	8004ca6 <USBD_StdDevReq+0x3a>
 8004c7c:	2b40      	cmp	r3, #64	; 0x40
 8004c7e:	d012      	beq.n	8004ca6 <USBD_StdDevReq+0x3a>
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f040 8095 	bne.w	8004db0 <USBD_StdDevReq+0x144>
    switch (req->bRequest)
 8004c86:	784b      	ldrb	r3, [r1, #1]
 8004c88:	2b09      	cmp	r3, #9
 8004c8a:	f200 8090 	bhi.w	8004dae <USBD_StdDevReq+0x142>
 8004c8e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004c92:	00e7      	.short	0x00e7
 8004c94:	008e0101 	.word	0x008e0101
 8004c98:	008e00fa 	.word	0x008e00fa
 8004c9c:	00130082 	.word	0x00130082
 8004ca0:	00d2008e 	.word	0x00d2008e
 8004ca4:	00a0      	.short	0x00a0
    pdev->pClass->Setup(pdev, req);
 8004ca6:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004caa:	4629      	mov	r1, r5
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	4620      	mov	r0, r4
 8004cb0:	4798      	blx	r3
}
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	b003      	add	sp, #12
 8004cb6:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 8004cb8:	884b      	ldrh	r3, [r1, #2]
 8004cba:	0a1a      	lsrs	r2, r3, #8
 8004cbc:	3a01      	subs	r2, #1
 8004cbe:	2a0e      	cmp	r2, #14
 8004cc0:	d875      	bhi.n	8004dae <USBD_StdDevReq+0x142>
 8004cc2:	e8df f002 	tbb	[pc, r2]
 8004cc6:	2824      	.short	0x2824
 8004cc8:	55747435 	.word	0x55747435
 8004ccc:	7474745e 	.word	0x7474745e
 8004cd0:	74747474 	.word	0x74747474
 8004cd4:	08          	.byte	0x08
 8004cd5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8004cd6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004cda:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004cdc:	7c20      	ldrb	r0, [r4, #16]
 8004cde:	f10d 0106 	add.w	r1, sp, #6
 8004ce2:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 8004ce4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004ce8:	b152      	cbz	r2, 8004d00 <USBD_StdDevReq+0x94>
 8004cea:	88eb      	ldrh	r3, [r5, #6]
 8004cec:	b143      	cbz	r3, 8004d00 <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	bf28      	it	cs
 8004cf2:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8004cf4:	4601      	mov	r1, r0
 8004cf6:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8004cf8:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8004cfc:	f000 f9c0 	bl	8005080 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8004d00:	88eb      	ldrh	r3, [r5, #6]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1d5      	bne.n	8004cb2 <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 8004d06:	4620      	mov	r0, r4
 8004d08:	f000 f9e6 	bl	80050d8 <USBD_CtlSendStatus>
 8004d0c:	e7d1      	b.n	8004cb2 <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004d0e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	e7e2      	b.n	8004cdc <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8004d16:	7c02      	ldrb	r2, [r0, #16]
 8004d18:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004d1c:	b932      	cbnz	r2, 8004d2c <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004d20:	f10d 0006 	add.w	r0, sp, #6
 8004d24:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004d26:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004d28:	7043      	strb	r3, [r0, #1]
 8004d2a:	e7db      	b.n	8004ce4 <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	e7f7      	b.n	8004d20 <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b05      	cmp	r3, #5
 8004d34:	d83b      	bhi.n	8004dae <USBD_StdDevReq+0x142>
 8004d36:	e8df f003 	tbb	[pc, r3]
 8004d3a:	0703      	.short	0x0703
 8004d3c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004d40:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	e7c9      	b.n	8004cdc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004d48:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	e7c5      	b.n	8004cdc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004d50:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	e7c1      	b.n	8004cdc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004d58:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	e7bd      	b.n	8004cdc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004d60:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	e7b9      	b.n	8004cdc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004d68:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	e7b5      	b.n	8004cdc <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004d70:	7c03      	ldrb	r3, [r0, #16]
 8004d72:	b9e3      	cbnz	r3, 8004dae <USBD_StdDevReq+0x142>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004d74:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004d78:	f10d 0006 	add.w	r0, sp, #6
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	4798      	blx	r3
 8004d80:	e7b0      	b.n	8004ce4 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004d82:	7c03      	ldrb	r3, [r0, #16]
 8004d84:	b99b      	cbnz	r3, 8004dae <USBD_StdDevReq+0x142>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004d86:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004d8a:	f10d 0006 	add.w	r0, sp, #6
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004d92:	2307      	movs	r3, #7
 8004d94:	e7c8      	b.n	8004d28 <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004d96:	888b      	ldrh	r3, [r1, #4]
 8004d98:	b94b      	cbnz	r3, 8004dae <USBD_StdDevReq+0x142>
 8004d9a:	88cb      	ldrh	r3, [r1, #6]
 8004d9c:	b93b      	cbnz	r3, 8004dae <USBD_StdDevReq+0x142>
 8004d9e:	884d      	ldrh	r5, [r1, #2]
 8004da0:	2d7f      	cmp	r5, #127	; 0x7f
 8004da2:	d804      	bhi.n	8004dae <USBD_StdDevReq+0x142>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004da4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004da8:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004daa:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dac:	d103      	bne.n	8004db6 <USBD_StdDevReq+0x14a>
      USBD_CtlError(pdev, req);
 8004dae:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8004db0:	f7ff ff50 	bl	8004c54 <USBD_CtlError.constprop.1>
    break;
 8004db4:	e77d      	b.n	8004cb2 <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 8004db6:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004dba:	f001 f96f 	bl	800609c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	f000 f98a 	bl	80050d8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004dc4:	b11d      	cbz	r5, 8004dce <USBD_StdDevReq+0x162>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004dc6:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004dc8:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8004dcc:	e771      	b.n	8004cb2 <USBD_StdDevReq+0x46>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e7fa      	b.n	8004dc8 <USBD_StdDevReq+0x15c>
  cfgidx = (uint8_t)(req->wValue);
 8004dd2:	7889      	ldrb	r1, [r1, #2]
 8004dd4:	4d35      	ldr	r5, [pc, #212]	; (8004eac <USBD_StdDevReq+0x240>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004dd6:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8004dd8:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004dda:	d8e8      	bhi.n	8004dae <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 8004ddc:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d008      	beq.n	8004df6 <USBD_StdDevReq+0x18a>
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	d014      	beq.n	8004e12 <USBD_StdDevReq+0x1a6>
      USBD_CtlError(pdev, req);
 8004de8:	f7ff ff34 	bl	8004c54 <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 8004dec:	7829      	ldrb	r1, [r5, #0]
 8004dee:	4620      	mov	r0, r4
 8004df0:	f7ff fe23 	bl	8004a3a <USBD_ClrClassConfig>
 8004df4:	e75d      	b.n	8004cb2 <USBD_StdDevReq+0x46>
      if (cfgidx)
 8004df6:	2900      	cmp	r1, #0
 8004df8:	d085      	beq.n	8004d06 <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 8004dfa:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004dfc:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8004dfe:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004e00:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004e04:	4620      	mov	r0, r4
 8004e06:	f7ff fe0d 	bl	8004a24 <USBD_SetClassConfig>
 8004e0a:	2802      	cmp	r0, #2
 8004e0c:	f47f af7b 	bne.w	8004d06 <USBD_StdDevReq+0x9a>
 8004e10:	e7cd      	b.n	8004dae <USBD_StdDevReq+0x142>
      if (cfgidx == 0U)
 8004e12:	b931      	cbnz	r1, 8004e22 <USBD_StdDevReq+0x1b6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004e14:	2302      	movs	r3, #2
 8004e16:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8004e1a:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8004e1c:	f7ff fe0d 	bl	8004a3a <USBD_ClrClassConfig>
 8004e20:	e771      	b.n	8004d06 <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 8004e22:	6841      	ldr	r1, [r0, #4]
 8004e24:	2901      	cmp	r1, #1
 8004e26:	f43f af6e 	beq.w	8004d06 <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004e2a:	b2c9      	uxtb	r1, r1
 8004e2c:	f7ff fe05 	bl	8004a3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004e30:	7829      	ldrb	r1, [r5, #0]
 8004e32:	6061      	str	r1, [r4, #4]
 8004e34:	e7e6      	b.n	8004e04 <USBD_StdDevReq+0x198>
  if (req->wLength != 1U)
 8004e36:	88ca      	ldrh	r2, [r1, #6]
 8004e38:	2a01      	cmp	r2, #1
 8004e3a:	d1b8      	bne.n	8004dae <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 8004e3c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0b4      	beq.n	8004dae <USBD_StdDevReq+0x142>
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d903      	bls.n	8004e50 <USBD_StdDevReq+0x1e4>
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d1b0      	bne.n	8004dae <USBD_StdDevReq+0x142>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004e4c:	1d01      	adds	r1, r0, #4
 8004e4e:	e003      	b.n	8004e58 <USBD_StdDevReq+0x1ec>
      pdev->dev_default_config = 0U;
 8004e50:	4601      	mov	r1, r0
 8004e52:	2300      	movs	r3, #0
 8004e54:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f000 f911 	bl	8005080 <USBD_CtlSendData>
 8004e5e:	e728      	b.n	8004cb2 <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8004e60:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004e64:	3b01      	subs	r3, #1
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d8a1      	bhi.n	8004dae <USBD_StdDevReq+0x142>
    if(req->wLength != 0x2U)
 8004e6a:	88cb      	ldrh	r3, [r1, #6]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d19e      	bne.n	8004dae <USBD_StdDevReq+0x142>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004e70:	2301      	movs	r3, #1
 8004e72:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8004e74:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8004e78:	b10b      	cbz	r3, 8004e7e <USBD_StdDevReq+0x212>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f104 010c 	add.w	r1, r4, #12
 8004e84:	e7e8      	b.n	8004e58 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004e86:	884b      	ldrh	r3, [r1, #2]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	f47f af12 	bne.w	8004cb2 <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 8004e8e:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 8004e92:	e738      	b.n	8004d06 <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 8004e94:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d887      	bhi.n	8004dae <USBD_StdDevReq+0x142>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004e9e:	884b      	ldrh	r3, [r1, #2]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	f47f af06 	bne.w	8004cb2 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e7f1      	b.n	8004e8e <USBD_StdDevReq+0x222>
 8004eaa:	bf00      	nop
 8004eac:	200013e6 	.word	0x200013e6

08004eb0 <USBD_StdItfReq>:
{
 8004eb0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004eb2:	780b      	ldrb	r3, [r1, #0]
 8004eb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004eb8:	2b20      	cmp	r3, #32
{
 8004eba:	4604      	mov	r4, r0
 8004ebc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ebe:	d002      	beq.n	8004ec6 <USBD_StdItfReq+0x16>
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	d000      	beq.n	8004ec6 <USBD_StdItfReq+0x16>
 8004ec4:	b9b3      	cbnz	r3, 8004ef4 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 8004ec6:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d810      	bhi.n	8004ef2 <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004ed0:	792b      	ldrb	r3, [r5, #4]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d80d      	bhi.n	8004ef2 <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004ed6:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004eda:	4629      	mov	r1, r5
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	4620      	mov	r0, r4
 8004ee0:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004ee2:	88eb      	ldrh	r3, [r5, #6]
 8004ee4:	b91b      	cbnz	r3, 8004eee <USBD_StdItfReq+0x3e>
 8004ee6:	b910      	cbnz	r0, 8004eee <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 8004ee8:	4620      	mov	r0, r4
 8004eea:	f000 f8f5 	bl	80050d8 <USBD_CtlSendStatus>
}
 8004eee:	2000      	movs	r0, #0
 8004ef0:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8004ef2:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8004ef4:	f7ff feae 	bl	8004c54 <USBD_CtlError.constprop.1>
    break;
 8004ef8:	e7f9      	b.n	8004eee <USBD_StdItfReq+0x3e>

08004efa <USBD_StdEPReq>:
{
 8004efa:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004efc:	780a      	ldrb	r2, [r1, #0]
 8004efe:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8004f02:	2a20      	cmp	r2, #32
{
 8004f04:	4604      	mov	r4, r0
 8004f06:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f08:	d013      	beq.n	8004f32 <USBD_StdEPReq+0x38>
 8004f0a:	2a40      	cmp	r2, #64	; 0x40
 8004f0c:	d011      	beq.n	8004f32 <USBD_StdEPReq+0x38>
 8004f0e:	b96a      	cbnz	r2, 8004f2c <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8004f10:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8004f12:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8004f14:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8004f16:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8004f18:	d01f      	beq.n	8004f5a <USBD_StdEPReq+0x60>
 8004f1a:	d335      	bcc.n	8004f88 <USBD_StdEPReq+0x8e>
 8004f1c:	2d03      	cmp	r5, #3
 8004f1e:	d105      	bne.n	8004f2c <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8004f20:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004f24:	2a02      	cmp	r2, #2
 8004f26:	d026      	beq.n	8004f76 <USBD_StdEPReq+0x7c>
 8004f28:	2a03      	cmp	r2, #3
 8004f2a:	d00a      	beq.n	8004f42 <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 8004f2c:	f7ff fe92 	bl	8004c54 <USBD_CtlError.constprop.1>
    break;
 8004f30:	e005      	b.n	8004f3e <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 8004f32:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8004f36:	4619      	mov	r1, r3
 8004f38:	6892      	ldr	r2, [r2, #8]
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	4790      	blx	r2
}
 8004f3e:	2000      	movs	r0, #0
 8004f40:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004f42:	885a      	ldrh	r2, [r3, #2]
 8004f44:	b92a      	cbnz	r2, 8004f52 <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004f46:	064a      	lsls	r2, r1, #25
 8004f48:	d003      	beq.n	8004f52 <USBD_StdEPReq+0x58>
 8004f4a:	88db      	ldrh	r3, [r3, #6]
 8004f4c:	b90b      	cbnz	r3, 8004f52 <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 8004f4e:	f001 f879 	bl	8006044 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8004f52:	4620      	mov	r0, r4
 8004f54:	f000 f8c0 	bl	80050d8 <USBD_CtlSendStatus>
        break;
 8004f58:	e7f1      	b.n	8004f3e <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8004f5a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004f5e:	2a02      	cmp	r2, #2
 8004f60:	d009      	beq.n	8004f76 <USBD_StdEPReq+0x7c>
 8004f62:	2a03      	cmp	r2, #3
 8004f64:	d1e2      	bne.n	8004f2c <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004f66:	885b      	ldrh	r3, [r3, #2]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e8      	bne.n	8004f3e <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 8004f6c:	064d      	lsls	r5, r1, #25
 8004f6e:	d0f0      	beq.n	8004f52 <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8004f70:	f001 f876 	bl	8006060 <USBD_LL_ClearStallEP>
 8004f74:	e7ed      	b.n	8004f52 <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f76:	064b      	lsls	r3, r1, #25
 8004f78:	d017      	beq.n	8004faa <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 8004f7a:	f001 f863 	bl	8006044 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004f7e:	2180      	movs	r1, #128	; 0x80
 8004f80:	4620      	mov	r0, r4
 8004f82:	f001 f85f 	bl	8006044 <USBD_LL_StallEP>
 8004f86:	e7da      	b.n	8004f3e <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8004f88:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d00e      	beq.n	8004fae <USBD_StdEPReq+0xb4>
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d1cb      	bne.n	8004f2c <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 8004f94:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004f98:	f04f 0314 	mov.w	r3, #20
 8004f9c:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004fa0:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 8004fa4:	d012      	beq.n	8004fcc <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004fa6:	6992      	ldr	r2, [r2, #24]
 8004fa8:	b9da      	cbnz	r2, 8004fe2 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 8004faa:	4620      	mov	r0, r4
 8004fac:	e7be      	b.n	8004f2c <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004fae:	0649      	lsls	r1, r1, #25
 8004fb0:	d1fb      	bne.n	8004faa <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004fb2:	0613      	lsls	r3, r2, #24
 8004fb4:	bf4c      	ite	mi
 8004fb6:	f100 0114 	addmi.w	r1, r0, #20
 8004fba:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004fc2:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	f000 f85b 	bl	8005080 <USBD_CtlSendData>
          break;
 8004fca:	e7b8      	b.n	8004f3e <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004fcc:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8004fd0:	2a00      	cmp	r2, #0
 8004fd2:	d0ea      	beq.n	8004faa <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004fd4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004fd8:	fb03 0505 	mla	r5, r3, r5, r0
 8004fdc:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8004fe0:	e004      	b.n	8004fec <USBD_StdEPReq+0xf2>
 8004fe2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004fe6:	fb05 3503 	mla	r5, r5, r3, r3
 8004fea:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004fec:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8004ff0:	d103      	bne.n	8004ffa <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 8004ff2:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	e7e4      	b.n	8004fc4 <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f001 f83e 	bl	800607c <USBD_LL_IsStallEP>
 8005000:	b108      	cbz	r0, 8005006 <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 8005002:	2301      	movs	r3, #1
 8005004:	e7f5      	b.n	8004ff2 <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 8005006:	6028      	str	r0, [r5, #0]
 8005008:	e7f4      	b.n	8004ff4 <USBD_StdEPReq+0xfa>

0800500a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800500a:	780b      	ldrb	r3, [r1, #0]
 800500c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800500e:	784b      	ldrb	r3, [r1, #1]
 8005010:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8005012:	78ca      	ldrb	r2, [r1, #3]
 8005014:	788b      	ldrb	r3, [r1, #2]
 8005016:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800501a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800501c:	794a      	ldrb	r2, [r1, #5]
 800501e:	790b      	ldrb	r3, [r1, #4]
 8005020:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005024:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005026:	79ca      	ldrb	r2, [r1, #7]
 8005028:	798b      	ldrb	r3, [r1, #6]
 800502a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800502e:	80c3      	strh	r3, [r0, #6]
 8005030:	4770      	bx	lr

08005032 <USBD_CtlError>:
{
 8005032:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8005034:	2180      	movs	r1, #128	; 0x80
{
 8005036:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8005038:	f001 f804 	bl	8006044 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800503c:	4620      	mov	r0, r4
 800503e:	2100      	movs	r1, #0
}
 8005040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8005044:	f000 bffe 	b.w	8006044 <USBD_LL_StallEP>

08005048 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005048:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800504a:	b188      	cbz	r0, 8005070 <USBD_GetString+0x28>
 800504c:	4605      	mov	r5, r0
 800504e:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8005050:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2c00      	cmp	r4, #0
 8005058:	d1f9      	bne.n	800504e <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800505a:	3301      	adds	r3, #1
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005060:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005062:	2303      	movs	r3, #3
 8005064:	704b      	strb	r3, [r1, #1]
 8005066:	3801      	subs	r0, #1
 8005068:	2302      	movs	r3, #2
    while (*desc != '\0')
 800506a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800506e:	b905      	cbnz	r5, 8005072 <USBD_GetString+0x2a>
 8005070:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8005078:	3302      	adds	r3, #2
 800507a:	b2db      	uxtb	r3, r3
 800507c:	548c      	strb	r4, [r1, r2]
 800507e:	e7f4      	b.n	800506a <USBD_GetString+0x22>

08005080 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8005080:	b510      	push	{r4, lr}
 8005082:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005084:	2202      	movs	r2, #2
 8005086:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800508a:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800508c:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800508e:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005090:	2100      	movs	r1, #0
 8005092:	f001 f811 	bl	80060b8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005096:	2000      	movs	r0, #0
 8005098:	bd10      	pop	{r4, pc}

0800509a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800509a:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800509c:	4613      	mov	r3, r2
 800509e:	460a      	mov	r2, r1
 80050a0:	2100      	movs	r1, #0
 80050a2:	f001 f809 	bl	80060b8 <USBD_LL_Transmit>

  return USBD_OK;
}
 80050a6:	2000      	movs	r0, #0
 80050a8:	bd08      	pop	{r3, pc}

080050aa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80050aa:	b510      	push	{r4, lr}
 80050ac:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80050ae:	2203      	movs	r2, #3
 80050b0:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80050b4:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80050b8:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80050ba:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80050be:	2100      	movs	r1, #0
 80050c0:	f001 f808 	bl	80060d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80050c4:	2000      	movs	r0, #0
 80050c6:	bd10      	pop	{r4, pc}

080050c8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80050c8:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80050ca:	4613      	mov	r3, r2
 80050cc:	460a      	mov	r2, r1
 80050ce:	2100      	movs	r1, #0
 80050d0:	f001 f800 	bl	80060d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80050d4:	2000      	movs	r0, #0
 80050d6:	bd08      	pop	{r3, pc}

080050d8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80050d8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80050da:	2304      	movs	r3, #4
 80050dc:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80050e0:	2300      	movs	r3, #0
 80050e2:	461a      	mov	r2, r3
 80050e4:	4619      	mov	r1, r3
 80050e6:	f000 ffe7 	bl	80060b8 <USBD_LL_Transmit>

  return USBD_OK;
}
 80050ea:	2000      	movs	r0, #0
 80050ec:	bd08      	pop	{r3, pc}

080050ee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80050ee:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80050f0:	2305      	movs	r3, #5
 80050f2:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80050f6:	2300      	movs	r3, #0
 80050f8:	461a      	mov	r2, r3
 80050fa:	4619      	mov	r1, r3
 80050fc:	f000 ffea 	bl	80060d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005100:	2000      	movs	r0, #0
 8005102:	bd08      	pop	{r3, pc}

08005104 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005104:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005106:	2214      	movs	r2, #20
{
 8005108:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800510a:	eb0d 0002 	add.w	r0, sp, r2
 800510e:	2100      	movs	r1, #0
 8005110:	f001 f8cc 	bl	80062ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005114:	4b3c      	ldr	r3, [pc, #240]	; (8005208 <MX_GPIO_Init+0x104>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, O_USART2_DIR_Pin|O_USART1_DIR_Pin, GPIO_PIN_RESET);
 8005116:	4e3d      	ldr	r6, [pc, #244]	; (800520c <MX_GPIO_Init+0x108>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005118:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800511a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800511e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005120:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005122:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005126:	9200      	str	r2, [sp, #0]
 8005128:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800512a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800512c:	f042 0204 	orr.w	r2, r2, #4
 8005130:	64da      	str	r2, [r3, #76]	; 0x4c
 8005132:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005134:	f002 0204 	and.w	r2, r2, #4
 8005138:	9201      	str	r2, [sp, #4]
 800513a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800513c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	64da      	str	r2, [r3, #76]	; 0x4c
 8005144:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005146:	f002 0201 	and.w	r2, r2, #1
 800514a:	9202      	str	r2, [sp, #8]
 800514c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800514e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005150:	f042 0202 	orr.w	r2, r2, #2
 8005154:	64da      	str	r2, [r3, #76]	; 0x4c
 8005156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005158:	f002 0202 	and.w	r2, r2, #2
 800515c:	9203      	str	r2, [sp, #12]
 800515e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005160:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005162:	f042 0208 	orr.w	r2, r2, #8
 8005166:	64da      	str	r2, [r3, #76]	; 0x4c
 8005168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, O_USART2_DIR_Pin|O_USART1_DIR_Pin, GPIO_PIN_RESET);
 8005170:	4630      	mov	r0, r6
 8005172:	2200      	movs	r2, #0
 8005174:	f241 0104 	movw	r1, #4100	; 0x1004
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005178:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, O_USART2_DIR_Pin|O_USART1_DIR_Pin, GPIO_PIN_RESET);
 800517a:	f7fb fe17 	bl	8000dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O_BT_PWR_GPIO_Port, O_BT_PWR_Pin, GPIO_PIN_RESET);
 800517e:	2200      	movs	r2, #0
 8005180:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005188:	f7fb fe10 	bl	8000dac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = O_USART2_DIR_Pin|O_USART1_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518c:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800518e:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = O_USART2_DIR_Pin|O_USART1_DIR_Pin;
 8005190:	f241 0304 	movw	r3, #4100	; 0x1004
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005194:	a905      	add	r1, sp, #20
 8005196:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = O_USART2_DIR_Pin|O_USART1_DIR_Pin;
 8005198:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800519a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800519e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051a0:	f7fb fd3c 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_USART2_BREAK_Pin;
 80051a4:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(O_USART2_BREAK_GPIO_Port, &GPIO_InitStruct);
 80051a6:	a905      	add	r1, sp, #20
 80051a8:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = O_USART2_BREAK_Pin;
 80051aa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051ac:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ae:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(O_USART2_BREAK_GPIO_Port, &GPIO_InitStruct);
 80051b0:	f7fb fd34 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = I_GPIO1_Pin|I_GPIO2_Pin|I_GPIO3_Pin|I_GPIO4_Pin 
 80051b4:	f44f 733c 	mov.w	r3, #752	; 0x2f0
                          |I_USB_VBUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051b8:	a905      	add	r1, sp, #20
 80051ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = I_GPIO1_Pin|I_GPIO2_Pin|I_GPIO3_Pin|I_GPIO4_Pin 
 80051be:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051c0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051c4:	f7fb fd2a 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_SW2_Pin;
 80051c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(I_SW2_GPIO_Port, &GPIO_InitStruct);
 80051cc:	a905      	add	r1, sp, #20
 80051ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = I_SW2_Pin;
 80051d2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051d4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051d6:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(I_SW2_GPIO_Port, &GPIO_InitStruct);
 80051d8:	f7fb fd20 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_BT_PWR_Pin;
 80051dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(O_BT_PWR_GPIO_Port, &GPIO_InitStruct);
 80051e0:	a905      	add	r1, sp, #20
 80051e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = O_BT_PWR_Pin;
 80051e6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051e8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ea:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ec:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(O_BT_PWR_GPIO_Port, &GPIO_InitStruct);
 80051ee:	f7fb fd15 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_USART1_BREAK_Pin;
 80051f2:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(O_USART1_BREAK_GPIO_Port, &GPIO_InitStruct);
 80051f4:	a905      	add	r1, sp, #20
 80051f6:	4806      	ldr	r0, [pc, #24]	; (8005210 <MX_GPIO_Init+0x10c>)
  GPIO_InitStruct.Pin = O_USART1_BREAK_Pin;
 80051f8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051fa:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051fc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(O_USART1_BREAK_GPIO_Port, &GPIO_InitStruct);
 80051fe:	f7fb fd0d 	bl	8000c1c <HAL_GPIO_Init>

}
 8005202:	b00a      	add	sp, #40	; 0x28
 8005204:	bd70      	pop	{r4, r5, r6, pc}
 8005206:	bf00      	nop
 8005208:	40021000 	.word	0x40021000
 800520c:	48000800 	.word	0x48000800
 8005210:	48000c00 	.word	0x48000c00

08005214 <gpio_ConfigureToFloating>:

/* USER CODE BEGIN 2 */
void gpio_ConfigureToFloating(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8005214:	b530      	push	{r4, r5, lr}
 8005216:	b087      	sub	sp, #28
 8005218:	4604      	mov	r4, r0
 800521a:	460d      	mov	r5, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800521c:	2214      	movs	r2, #20
 800521e:	2100      	movs	r1, #0
 8005220:	a801      	add	r0, sp, #4
 8005222:	f001 f843 	bl	80062ac <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8005226:	a901      	add	r1, sp, #4
 8005228:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = GPIO_Pin;
 800522a:	9501      	str	r5, [sp, #4]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800522c:	f7fb fcf6 	bl	8000c1c <HAL_GPIO_Init>
}
 8005230:	b007      	add	sp, #28
 8005232:	bd30      	pop	{r4, r5, pc}

08005234 <gpio_ConfigureToPushPull>:
void gpio_ConfigureToPushPull(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8005234:	b530      	push	{r4, r5, lr}
 8005236:	b087      	sub	sp, #28
 8005238:	4604      	mov	r4, r0
 800523a:	460d      	mov	r5, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800523c:	2214      	movs	r2, #20
 800523e:	2100      	movs	r1, #0
 8005240:	a801      	add	r0, sp, #4
 8005242:	f001 f833 	bl	80062ac <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005246:	2301      	movs	r3, #1
 8005248:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800524a:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800524c:	2303      	movs	r3, #3
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800524e:	4620      	mov	r0, r4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005250:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8005252:	9501      	str	r5, [sp, #4]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8005254:	f7fb fce2 	bl	8000c1c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8005258:	2200      	movs	r2, #0
 800525a:	4629      	mov	r1, r5
 800525c:	4620      	mov	r0, r4
 800525e:	f7fb fda5 	bl	8000dac <HAL_GPIO_WritePin>
}
 8005262:	b007      	add	sp, #28
 8005264:	bd30      	pop	{r4, r5, pc}
	...

08005268 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005268:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 800526a:	4812      	ldr	r0, [pc, #72]	; (80052b4 <MX_I2C2_Init+0x4c>)
  hi2c2.Init.Timing = 0x10909CEC;
 800526c:	4b12      	ldr	r3, [pc, #72]	; (80052b8 <MX_I2C2_Init+0x50>)
 800526e:	4913      	ldr	r1, [pc, #76]	; (80052bc <MX_I2C2_Init+0x54>)
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005270:	2201      	movs	r2, #1
  hi2c2.Init.Timing = 0x10909CEC;
 8005272:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c2.Init.OwnAddress1 = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800527a:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800527c:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800527e:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005280:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005282:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005284:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005286:	f7fb fed6 	bl	8001036 <HAL_I2C_Init>
 800528a:	b108      	cbz	r0, 8005290 <MX_I2C2_Init+0x28>
  {
    Error_Handler();
 800528c:	f000 f942 	bl	8005514 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005290:	2100      	movs	r1, #0
 8005292:	4808      	ldr	r0, [pc, #32]	; (80052b4 <MX_I2C2_Init+0x4c>)
 8005294:	f7fc f92a 	bl	80014ec <HAL_I2CEx_ConfigAnalogFilter>
 8005298:	b108      	cbz	r0, 800529e <MX_I2C2_Init+0x36>
  {
    Error_Handler();
 800529a:	f000 f93b 	bl	8005514 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800529e:	2100      	movs	r1, #0
 80052a0:	4804      	ldr	r0, [pc, #16]	; (80052b4 <MX_I2C2_Init+0x4c>)
 80052a2:	f7fc f949 	bl	8001538 <HAL_I2CEx_ConfigDigitalFilter>
 80052a6:	b118      	cbz	r0, 80052b0 <MX_I2C2_Init+0x48>
  {
    Error_Handler();
  }

}
 80052a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80052ac:	f000 b932 	b.w	8005514 <Error_Handler>
 80052b0:	bd08      	pop	{r3, pc}
 80052b2:	bf00      	nop
 80052b4:	2000160c 	.word	0x2000160c
 80052b8:	10909cec 	.word	0x10909cec
 80052bc:	40005800 	.word	0x40005800

080052c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80052c0:	b510      	push	{r4, lr}
 80052c2:	4604      	mov	r4, r0
 80052c4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c6:	2214      	movs	r2, #20
 80052c8:	2100      	movs	r1, #0
 80052ca:	a803      	add	r0, sp, #12
 80052cc:	f000 ffee 	bl	80062ac <memset>
  if(i2cHandle->Instance==I2C2)
 80052d0:	6822      	ldr	r2, [r4, #0]
 80052d2:	4b13      	ldr	r3, [pc, #76]	; (8005320 <HAL_I2C_MspInit+0x60>)
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d121      	bne.n	800531c <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052d8:	4c12      	ldr	r4, [pc, #72]	; (8005324 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052da:	4813      	ldr	r0, [pc, #76]	; (8005328 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80052de:	f043 0302 	orr.w	r3, r3, #2
 80052e2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80052e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80052ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80052f2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052f4:	2312      	movs	r3, #18
 80052f6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052f8:	2301      	movs	r3, #1
 80052fa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052fc:	2303      	movs	r3, #3
 80052fe:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005300:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005302:	2304      	movs	r3, #4
 8005304:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005306:	f7fb fc89 	bl	8000c1c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800530a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800530c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005310:	65a3      	str	r3, [r4, #88]	; 0x58
 8005312:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005318:	9302      	str	r3, [sp, #8]
 800531a:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800531c:	b008      	add	sp, #32
 800531e:	bd10      	pop	{r4, pc}
 8005320:	40005800 	.word	0x40005800
 8005324:	40021000 	.word	0x40021000
 8005328:	48000400 	.word	0x48000400

0800532c <MX_LPTIM1_Init>:

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{

  hlptim1.Instance = LPTIM1;
 800532c:	480b      	ldr	r0, [pc, #44]	; (800535c <MX_LPTIM1_Init+0x30>)
{
 800532e:	b508      	push	{r3, lr}
  hlptim1.Instance = LPTIM1;
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <MX_LPTIM1_Init+0x34>)
 8005332:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8005334:	f64f 72ff 	movw	r2, #65535	; 0xffff
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8005338:	2300      	movs	r3, #0
 800533a:	6043      	str	r3, [r0, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800533c:	6083      	str	r3, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800533e:	6142      	str	r2, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8005340:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8005342:	6243      	str	r3, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8005344:	6283      	str	r3, [r0, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8005346:	62c3      	str	r3, [r0, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8005348:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800534a:	f7fc f91b 	bl	8001584 <HAL_LPTIM_Init>
 800534e:	b118      	cbz	r0, 8005358 <MX_LPTIM1_Init+0x2c>
  {
    Error_Handler();
  }

}
 8005350:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005354:	f000 b8de 	b.w	8005514 <Error_Handler>
 8005358:	bd08      	pop	{r3, pc}
 800535a:	bf00      	nop
 800535c:	20001690 	.word	0x20001690
 8005360:	40007c00 	.word	0x40007c00

08005364 <MX_LPTIM2_Init>:
/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{

  hlptim2.Instance = LPTIM2;
 8005364:	480b      	ldr	r0, [pc, #44]	; (8005394 <MX_LPTIM2_Init+0x30>)
{
 8005366:	b508      	push	{r3, lr}
  hlptim2.Instance = LPTIM2;
 8005368:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <MX_LPTIM2_Init+0x34>)
 800536a:	6003      	str	r3, [r0, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800536c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8005370:	2300      	movs	r3, #0
 8005372:	6043      	str	r3, [r0, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8005374:	6083      	str	r3, [r0, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8005376:	6142      	str	r2, [r0, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8005378:	6203      	str	r3, [r0, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800537a:	6243      	str	r3, [r0, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800537c:	6283      	str	r3, [r0, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800537e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8005380:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8005382:	f7fc f8ff 	bl	8001584 <HAL_LPTIM_Init>
 8005386:	b118      	cbz	r0, 8005390 <MX_LPTIM2_Init+0x2c>
  {
    Error_Handler();
  }

}
 8005388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800538c:	f000 b8c2 	b.w	8005514 <Error_Handler>
 8005390:	bd08      	pop	{r3, pc}
 8005392:	bf00      	nop
 8005394:	20001658 	.word	0x20001658
 8005398:	40009400 	.word	0x40009400

0800539c <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 800539c:	b507      	push	{r0, r1, r2, lr}

  if(lptimHandle->Instance==LPTIM1)
 800539e:	6803      	ldr	r3, [r0, #0]
 80053a0:	4a15      	ldr	r2, [pc, #84]	; (80053f8 <HAL_LPTIM_MspInit+0x5c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d114      	bne.n	80053d0 <HAL_LPTIM_MspInit+0x34>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80053a6:	4b15      	ldr	r3, [pc, #84]	; (80053fc <HAL_LPTIM_MspInit+0x60>)
 80053a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80053ae:	659a      	str	r2, [r3, #88]	; 0x58
 80053b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80053b2:	2200      	movs	r2, #0
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80053b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053b8:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80053ba:	2041      	movs	r0, #65	; 0x41
 80053bc:	4611      	mov	r1, r2
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80053be:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80053c0:	f7fb fbd6 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80053c4:	2041      	movs	r0, #65	; 0x41
    /* LPTIM2 clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();

    /* LPTIM2 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 80053c6:	f7fb fc07 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }
}
 80053ca:	b003      	add	sp, #12
 80053cc:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(lptimHandle->Instance==LPTIM2)
 80053d0:	4a0b      	ldr	r2, [pc, #44]	; (8005400 <HAL_LPTIM_MspInit+0x64>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d1f9      	bne.n	80053ca <HAL_LPTIM_MspInit+0x2e>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <HAL_LPTIM_MspInit+0x60>)
 80053d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053da:	f042 0220 	orr.w	r2, r2, #32
 80053de:	65da      	str	r2, [r3, #92]	; 0x5c
 80053e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 80053e2:	2200      	movs	r2, #0
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 80053ea:	2042      	movs	r0, #66	; 0x42
 80053ec:	4611      	mov	r1, r2
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80053ee:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 80053f0:	f7fb fbbe 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 80053f4:	2042      	movs	r0, #66	; 0x42
 80053f6:	e7e6      	b.n	80053c6 <HAL_LPTIM_MspInit+0x2a>
 80053f8:	40007c00 	.word	0x40007c00
 80053fc:	40021000 	.word	0x40021000
 8005400:	40009400 	.word	0x40009400

08005404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005408:	b0b0      	sub	sp, #192	; 0xc0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800540a:	2414      	movs	r4, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800540c:	2244      	movs	r2, #68	; 0x44
 800540e:	2100      	movs	r1, #0
 8005410:	a805      	add	r0, sp, #20
 8005412:	f000 ff4b 	bl	80062ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005416:	4622      	mov	r2, r4
 8005418:	2100      	movs	r1, #0
 800541a:	4668      	mov	r0, sp
 800541c:	f000 ff46 	bl	80062ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005420:	2268      	movs	r2, #104	; 0x68
 8005422:	2100      	movs	r1, #0
 8005424:	a816      	add	r0, sp, #88	; 0x58
 8005426:	f000 ff41 	bl	80062ac <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800542a:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800542c:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800542e:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005430:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 20;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005434:	f04f 0807 	mov.w	r8, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005438:	eb0d 0004 	add.w	r0, sp, r4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800543c:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 20;
 800543e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005440:	9605      	str	r6, [sp, #20]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005442:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005444:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005446:	9710      	str	r7, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005448:	9611      	str	r6, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800544a:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800544e:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005450:	9515      	str	r5, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005452:	f7fc fe4d 	bl	80020f0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005456:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005458:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800545a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800545c:	e88d 0088 	stmia.w	sp, {r3, r7}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005460:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005462:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005464:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005466:	f7fd f895 	bl	8002594 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800546a:	f242 638b 	movw	r3, #9867	; 0x268b
 800546e:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8005470:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005474:	932a      	str	r3, [sp, #168]	; 0xa8
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8005476:	230c      	movs	r3, #12
 8005478:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800547a:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800547c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005480:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005482:	941e      	str	r4, [sp, #120]	; 0x78
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005484:	941f      	str	r4, [sp, #124]	; 0x7c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005486:	9421      	str	r4, [sp, #132]	; 0x84
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005488:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800548a:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 800548c:	9428      	str	r4, [sp, #160]	; 0xa0
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800548e:	9717      	str	r7, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8005490:	9618      	str	r6, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8005492:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8005496:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8005498:	951c      	str	r5, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800549a:	f7fd f9bd 	bl	8002818 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800549e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80054a2:	f7fc fd51 	bl	8001f48 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 80054a6:	b030      	add	sp, #192	; 0xc0
 80054a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080054ac <main>:
{
 80054ac:	b508      	push	{r3, lr}
  HAL_Init();
 80054ae:	f7fb fb2f 	bl	8000b10 <HAL_Init>
  SystemClock_Config();
 80054b2:	f7ff ffa7 	bl	8005404 <SystemClock_Config>
  MX_GPIO_Init();
 80054b6:	f7ff fe25 	bl	8005104 <MX_GPIO_Init>
  MX_I2C2_Init();
 80054ba:	f7ff fed5 	bl	8005268 <MX_I2C2_Init>
  MX_LPTIM1_Init();
 80054be:	f7ff ff35 	bl	800532c <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 80054c2:	f7ff ff4f 	bl	8005364 <MX_LPTIM2_Init>
  MX_TIM1_Init();
 80054c6:	f000 fa9b 	bl	8005a00 <MX_TIM1_Init>
  MX_TIM2_Init();
 80054ca:	f000 f8b9 	bl	8005640 <MX_TIM2_Init>
  MX_TIM3_Init();
 80054ce:	f000 f8f5 	bl	80056bc <MX_TIM3_Init>
  MX_TIM6_Init();
 80054d2:	f000 f935 	bl	8005740 <MX_TIM6_Init>
  MX_TIM15_Init();
 80054d6:	f000 faed 	bl	8005ab4 <MX_TIM15_Init>
  MX_TIM16_Init();
 80054da:	f000 f953 	bl	8005784 <MX_TIM16_Init>
  MX_UART4_Init();
 80054de:	f000 fb87 	bl	8005bf0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80054e2:	f000 fba3 	bl	8005c2c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80054e6:	f000 fbc1 	bl	8005c6c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80054ea:	f000 fc7b 	bl	8005de4 <MX_USB_DEVICE_Init>
  HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 80054ee:	2100      	movs	r1, #0
 80054f0:	4806      	ldr	r0, [pc, #24]	; (800550c <main+0x60>)
 80054f2:	f7fd ffb1 	bl	8003458 <HAL_TIM_PWM_Stop>
  TIM15->CCR4 = 255;
 80054f6:	4b06      	ldr	r3, [pc, #24]	; (8005510 <main+0x64>)
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80054f8:	4804      	ldr	r0, [pc, #16]	; (800550c <main+0x60>)
  TIM15->CCR4 = 255;
 80054fa:	22ff      	movs	r2, #255	; 0xff
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80054fe:	2100      	movs	r1, #0
 8005500:	f7fd ff7e 	bl	8003400 <HAL_TIM_PWM_Start>
  app_main();
 8005504:	f7fb fa82 	bl	8000a0c <app_main>
 8005508:	e7fe      	b.n	8005508 <main+0x5c>
 800550a:	bf00      	nop
 800550c:	200016c8 	.word	0x200016c8
 8005510:	40014000 	.word	0x40014000

08005514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005514:	4770      	bx	lr
	...

08005518 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005518:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <HAL_MspInit+0x2c>)
 800551a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800551c:	f042 0201 	orr.w	r2, r2, #1
 8005520:	661a      	str	r2, [r3, #96]	; 0x60
 8005522:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8005524:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005526:	f002 0201 	and.w	r2, r2, #1
 800552a:	9200      	str	r2, [sp, #0]
 800552c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800552e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005530:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005534:	659a      	str	r2, [r3, #88]	; 0x58
 8005536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005540:	b002      	add	sp, #8
 8005542:	4770      	bx	lr
 8005544:	40021000 	.word	0x40021000

08005548 <NMI_Handler>:
 8005548:	4770      	bx	lr

0800554a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800554a:	e7fe      	b.n	800554a <HardFault_Handler>

0800554c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800554c:	e7fe      	b.n	800554c <MemManage_Handler>

0800554e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800554e:	e7fe      	b.n	800554e <BusFault_Handler>

08005550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005550:	e7fe      	b.n	8005550 <UsageFault_Handler>

08005552 <SVC_Handler>:
 8005552:	4770      	bx	lr

08005554 <DebugMon_Handler>:
 8005554:	4770      	bx	lr

08005556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005556:	4770      	bx	lr

08005558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005558:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800555a:	f7fb fae9 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  app_1ms();
  /* USER CODE END SysTick_IRQn 1 */
}
 800555e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  app_1ms();
 8005562:	f7fb ba87 	b.w	8000a74 <app_1ms>
	...

08005568 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005568:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800556a:	4804      	ldr	r0, [pc, #16]	; (800557c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800556c:	f7fd fbde 	bl	8002d2c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8005570:	4803      	ldr	r0, [pc, #12]	; (8005580 <TIM1_BRK_TIM15_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8005572:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim15);
 8005576:	f7fd bbd9 	b.w	8002d2c <HAL_TIM_IRQHandler>
 800557a:	bf00      	nop
 800557c:	20001788 	.word	0x20001788
 8005580:	200016c8 	.word	0x200016c8

08005584 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005584:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005586:	4804      	ldr	r0, [pc, #16]	; (8005598 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005588:	f7fd fbd0 	bl	8002d2c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800558c:	4803      	ldr	r0, [pc, #12]	; (800559c <TIM1_UP_TIM16_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800558e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim16);
 8005592:	f7fd bbcb 	b.w	8002d2c <HAL_TIM_IRQHandler>
 8005596:	bf00      	nop
 8005598:	20001788 	.word	0x20001788
 800559c:	20001808 	.word	0x20001808

080055a0 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80055a0:	4801      	ldr	r0, [pc, #4]	; (80055a8 <TIM1_CC_IRQHandler+0x8>)
 80055a2:	f7fd bbc3 	b.w	8002d2c <HAL_TIM_IRQHandler>
 80055a6:	bf00      	nop
 80055a8:	20001788 	.word	0x20001788

080055ac <TIM1_TRG_COM_IRQHandler>:
 80055ac:	f7ff bff8 	b.w	80055a0 <TIM1_CC_IRQHandler>

080055b0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80055b0:	4801      	ldr	r0, [pc, #4]	; (80055b8 <TIM2_IRQHandler+0x8>)
 80055b2:	f7fd bbbb 	b.w	8002d2c <HAL_TIM_IRQHandler>
 80055b6:	bf00      	nop
 80055b8:	200017c8 	.word	0x200017c8

080055bc <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80055bc:	4801      	ldr	r0, [pc, #4]	; (80055c4 <TIM3_IRQHandler+0x8>)
 80055be:	f7fd bbb5 	b.w	8002d2c <HAL_TIM_IRQHandler>
 80055c2:	bf00      	nop
 80055c4:	20001708 	.word	0x20001708

080055c8 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80055c8:	4801      	ldr	r0, [pc, #4]	; (80055d0 <TIM6_DAC_IRQHandler+0x8>)
 80055ca:	f7fd bbaf 	b.w	8002d2c <HAL_TIM_IRQHandler>
 80055ce:	bf00      	nop
 80055d0:	20001748 	.word	0x20001748

080055d4 <LPTIM1_IRQHandler>:
void LPTIM1_IRQHandler(void)
{
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80055d4:	4801      	ldr	r0, [pc, #4]	; (80055dc <LPTIM1_IRQHandler+0x8>)
 80055d6:	f7fc b82e 	b.w	8001636 <HAL_LPTIM_IRQHandler>
 80055da:	bf00      	nop
 80055dc:	20001690 	.word	0x20001690

080055e0 <LPTIM2_IRQHandler>:
void LPTIM2_IRQHandler(void)
{
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 80055e0:	4801      	ldr	r0, [pc, #4]	; (80055e8 <LPTIM2_IRQHandler+0x8>)
 80055e2:	f7fc b828 	b.w	8001636 <HAL_LPTIM_IRQHandler>
 80055e6:	bf00      	nop
 80055e8:	20001658 	.word	0x20001658

080055ec <USB_IRQHandler>:
void USB_IRQHandler(void)
{
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80055ec:	4801      	ldr	r0, [pc, #4]	; (80055f4 <USB_IRQHandler+0x8>)
 80055ee:	f7fc b9ad 	b.w	800194c <HAL_PCD_IRQHandler>
 80055f2:	bf00      	nop
 80055f4:	20002c4c 	.word	0x20002c4c

080055f8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055f8:	490f      	ldr	r1, [pc, #60]	; (8005638 <SystemInit+0x40>)
 80055fa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80055fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005606:	4b0d      	ldr	r3, [pc, #52]	; (800563c <SystemInit+0x44>)
 8005608:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800560a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800560c:	f042 0201 	orr.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8005612:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800561a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800561e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005620:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005624:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800562c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800562e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005630:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005634:	608b      	str	r3, [r1, #8]
 8005636:	4770      	bx	lr
 8005638:	e000ed00 	.word	0xe000ed00
 800563c:	40021000 	.word	0x40021000

08005640 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005640:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005642:	2210      	movs	r2, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005644:	2400      	movs	r4, #0
{
 8005646:	b088      	sub	sp, #32
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005648:	4621      	mov	r1, r4
 800564a:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800564e:	9401      	str	r4, [sp, #4]
 8005650:	9402      	str	r4, [sp, #8]
 8005652:	9403      	str	r4, [sp, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005654:	f000 fe2a 	bl	80062ac <memset>

  htim2.Instance = TIM2;
 8005658:	4817      	ldr	r0, [pc, #92]	; (80056b8 <MX_TIM2_Init+0x78>)
 800565a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 800565e:	e880 0018 	stmia.w	r0, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005662:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 0;
 8005664:	60c4      	str	r4, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005666:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005668:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800566a:	f7fd fc85 	bl	8002f78 <HAL_TIM_IC_Init>
 800566e:	b108      	cbz	r0, 8005674 <MX_TIM2_Init+0x34>
  {
    Error_Handler();
 8005670:	f7ff ff50 	bl	8005514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005674:	a901      	add	r1, sp, #4
 8005676:	4810      	ldr	r0, [pc, #64]	; (80056b8 <MX_TIM2_Init+0x78>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005678:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800567a:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800567c:	f7fd ff22 	bl	80034c4 <HAL_TIMEx_MasterConfigSynchronization>
 8005680:	b108      	cbz	r0, 8005686 <MX_TIM2_Init+0x46>
  {
    Error_Handler();
 8005682:	f7ff ff47 	bl	8005514 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005686:	2200      	movs	r2, #0
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005688:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800568a:	a904      	add	r1, sp, #16
 800568c:	480a      	ldr	r0, [pc, #40]	; (80056b8 <MX_TIM2_Init+0x78>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800568e:	9204      	str	r2, [sp, #16]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005690:	9305      	str	r3, [sp, #20]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005692:	9206      	str	r2, [sp, #24]
  sConfigIC.ICFilter = 0;
 8005694:	9207      	str	r2, [sp, #28]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005696:	f7fd fd71 	bl	800317c <HAL_TIM_IC_ConfigChannel>
 800569a:	b108      	cbz	r0, 80056a0 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 800569c:	f7ff ff3a 	bl	8005514 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80056a0:	2302      	movs	r3, #2
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80056a2:	2204      	movs	r2, #4
 80056a4:	a904      	add	r1, sp, #16
 80056a6:	4804      	ldr	r0, [pc, #16]	; (80056b8 <MX_TIM2_Init+0x78>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80056a8:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80056aa:	f7fd fd67 	bl	800317c <HAL_TIM_IC_ConfigChannel>
 80056ae:	b108      	cbz	r0, 80056b4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80056b0:	f7ff ff30 	bl	8005514 <Error_Handler>
  }

}
 80056b4:	b008      	add	sp, #32
 80056b6:	bd10      	pop	{r4, pc}
 80056b8:	200017c8 	.word	0x200017c8

080056bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80056bc:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_IC_InitTypeDef sConfigIC = {0};
 80056be:	2210      	movs	r2, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056c0:	2400      	movs	r4, #0
{
 80056c2:	b088      	sub	sp, #32
  TIM_IC_InitTypeDef sConfigIC = {0};
 80056c4:	eb0d 0002 	add.w	r0, sp, r2
 80056c8:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056ca:	9401      	str	r4, [sp, #4]
 80056cc:	9402      	str	r4, [sp, #8]
 80056ce:	9403      	str	r4, [sp, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80056d0:	f000 fdec 	bl	80062ac <memset>

  htim3.Instance = TIM3;
 80056d4:	4818      	ldr	r0, [pc, #96]	; (8005738 <MX_TIM3_Init+0x7c>)
  htim3.Init.Prescaler = 80;
 80056d6:	4a19      	ldr	r2, [pc, #100]	; (800573c <MX_TIM3_Init+0x80>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056d8:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 80;
 80056da:	2350      	movs	r3, #80	; 0x50
 80056dc:	e880 000c 	stmia.w	r0, {r2, r3}
  htim3.Init.Period = 0xFFFF;
 80056e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056e4:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056e6:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056e8:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80056ea:	f7fd fc45 	bl	8002f78 <HAL_TIM_IC_Init>
 80056ee:	b108      	cbz	r0, 80056f4 <MX_TIM3_Init+0x38>
  {
    Error_Handler();
 80056f0:	f7ff ff10 	bl	8005514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80056f4:	a901      	add	r1, sp, #4
 80056f6:	4810      	ldr	r0, [pc, #64]	; (8005738 <MX_TIM3_Init+0x7c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056f8:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056fa:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80056fc:	f7fd fee2 	bl	80034c4 <HAL_TIMEx_MasterConfigSynchronization>
 8005700:	b108      	cbz	r0, 8005706 <MX_TIM3_Init+0x4a>
  {
    Error_Handler();
 8005702:	f7ff ff07 	bl	8005514 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005706:	2200      	movs	r2, #0
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8005708:	2402      	movs	r4, #2
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800570a:	2301      	movs	r3, #1
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800570c:	a904      	add	r1, sp, #16
 800570e:	480a      	ldr	r0, [pc, #40]	; (8005738 <MX_TIM3_Init+0x7c>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8005710:	9404      	str	r4, [sp, #16]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005712:	9305      	str	r3, [sp, #20]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005714:	9206      	str	r2, [sp, #24]
  sConfigIC.ICFilter = 0;
 8005716:	9207      	str	r2, [sp, #28]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005718:	f7fd fd30 	bl	800317c <HAL_TIM_IC_ConfigChannel>
 800571c:	b108      	cbz	r0, 8005722 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800571e:	f7ff fef9 	bl	8005514 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005722:	2204      	movs	r2, #4
 8005724:	a904      	add	r1, sp, #16
 8005726:	4804      	ldr	r0, [pc, #16]	; (8005738 <MX_TIM3_Init+0x7c>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8005728:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800572a:	f7fd fd27 	bl	800317c <HAL_TIM_IC_ConfigChannel>
 800572e:	b108      	cbz	r0, 8005734 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8005730:	f7ff fef0 	bl	8005514 <Error_Handler>
  }

}
 8005734:	b008      	add	sp, #32
 8005736:	bd10      	pop	{r4, pc}
 8005738:	20001708 	.word	0x20001708
 800573c:	40000400 	.word	0x40000400

08005740 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim6.Instance = TIM6;
 8005742:	480e      	ldr	r0, [pc, #56]	; (800577c <MX_TIM6_Init+0x3c>)
  htim6.Init.Prescaler = 80;
 8005744:	4a0e      	ldr	r2, [pc, #56]	; (8005780 <MX_TIM6_Init+0x40>)
 8005746:	2350      	movs	r3, #80	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005748:	2400      	movs	r4, #0
  htim6.Init.Prescaler = 80;
 800574a:	e880 000c 	stmia.w	r0, {r2, r3}
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 92;
 800574e:	235c      	movs	r3, #92	; 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005750:	9401      	str	r4, [sp, #4]
 8005752:	9402      	str	r4, [sp, #8]
 8005754:	9403      	str	r4, [sp, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005756:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 92;
 8005758:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800575a:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800575c:	f7fd fbd8 	bl	8002f10 <HAL_TIM_Base_Init>
 8005760:	b108      	cbz	r0, 8005766 <MX_TIM6_Init+0x26>
  {
    Error_Handler();
 8005762:	f7ff fed7 	bl	8005514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005766:	a901      	add	r1, sp, #4
 8005768:	4804      	ldr	r0, [pc, #16]	; (800577c <MX_TIM6_Init+0x3c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800576a:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800576c:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800576e:	f7fd fea9 	bl	80034c4 <HAL_TIMEx_MasterConfigSynchronization>
 8005772:	b108      	cbz	r0, 8005778 <MX_TIM6_Init+0x38>
  {
    Error_Handler();
 8005774:	f7ff fece 	bl	8005514 <Error_Handler>
  }

}
 8005778:	b004      	add	sp, #16
 800577a:	bd10      	pop	{r4, pc}
 800577c:	20001748 	.word	0x20001748
 8005780:	40001000 	.word	0x40001000

08005784 <MX_TIM16_Init>:
}
/* TIM16 init function */
void MX_TIM16_Init(void)
{

  htim16.Instance = TIM16;
 8005784:	4809      	ldr	r0, [pc, #36]	; (80057ac <MX_TIM16_Init+0x28>)
{
 8005786:	b508      	push	{r3, lr}
  htim16.Instance = TIM16;
 8005788:	4b09      	ldr	r3, [pc, #36]	; (80057b0 <MX_TIM16_Init+0x2c>)
 800578a:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 0;
 800578c:	2300      	movs	r3, #0
 800578e:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005790:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 0;
 8005792:	60c3      	str	r3, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005794:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8005796:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005798:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800579a:	f7fd fbb9 	bl	8002f10 <HAL_TIM_Base_Init>
 800579e:	b118      	cbz	r0, 80057a8 <MX_TIM16_Init+0x24>
  {
    Error_Handler();
  }

}
 80057a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80057a4:	f7ff beb6 	b.w	8005514 <Error_Handler>
 80057a8:	bd08      	pop	{r3, pc}
 80057aa:	bf00      	nop
 80057ac:	20001808 	.word	0x20001808
 80057b0:	40014400 	.word	0x40014400

080057b4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80057b4:	b507      	push	{r0, r1, r2, lr}

  if(tim_pwmHandle->Instance==TIM1)
 80057b6:	4b19      	ldr	r3, [pc, #100]	; (800581c <HAL_TIM_PWM_MspInit+0x68>)
 80057b8:	6802      	ldr	r2, [r0, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d12a      	bne.n	8005814 <HAL_TIM_PWM_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80057be:	f503 4364 	add.w	r3, r3, #58368	; 0xe400

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80057c2:	2018      	movs	r0, #24
    __HAL_RCC_TIM1_CLK_ENABLE();
 80057c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ca:	661a      	str	r2, [r3, #96]	; 0x60
 80057cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80057ce:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80057d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80057d4:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80057d6:	9301      	str	r3, [sp, #4]
 80057d8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80057da:	f7fb f9c9 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80057de:	2018      	movs	r0, #24
 80057e0:	f7fb f9fa 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80057e4:	2200      	movs	r2, #0
 80057e6:	4611      	mov	r1, r2
 80057e8:	2019      	movs	r0, #25
 80057ea:	f7fb f9c1 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80057ee:	2019      	movs	r0, #25
 80057f0:	f7fb f9f2 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80057f4:	2200      	movs	r2, #0
 80057f6:	4611      	mov	r1, r2
 80057f8:	201a      	movs	r0, #26
 80057fa:	f7fb f9b9 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80057fe:	201a      	movs	r0, #26
 8005800:	f7fb f9ea 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005804:	2200      	movs	r2, #0
 8005806:	201b      	movs	r0, #27
 8005808:	4611      	mov	r1, r2
 800580a:	f7fb f9b1 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800580e:	201b      	movs	r0, #27
 8005810:	f7fb f9e2 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005814:	b003      	add	sp, #12
 8005816:	f85d fb04 	ldr.w	pc, [sp], #4
 800581a:	bf00      	nop
 800581c:	40012c00 	.word	0x40012c00

08005820 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8005820:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005822:	2214      	movs	r2, #20
{
 8005824:	b08a      	sub	sp, #40	; 0x28
 8005826:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005828:	2100      	movs	r1, #0
 800582a:	eb0d 0002 	add.w	r0, sp, r2
 800582e:	f000 fd3d 	bl	80062ac <memset>
  if(tim_icHandle->Instance==TIM2)
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005838:	d128      	bne.n	800588c <HAL_TIM_IC_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800583a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800583e:	a905      	add	r1, sp, #20
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005840:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	659a      	str	r2, [r3, #88]	; 0x58
 8005848:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800584a:	f002 0201 	and.w	r2, r2, #1
 800584e:	9201      	str	r2, [sp, #4]
 8005850:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005852:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005854:	f042 0201 	orr.w	r2, r2, #1
 8005858:	64da      	str	r2, [r3, #76]	; 0x4c
 800585a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	9302      	str	r3, [sp, #8]
 8005862:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005864:	2303      	movs	r3, #3
 8005866:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005868:	2302      	movs	r3, #2
 800586a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800586c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005870:	2301      	movs	r3, #1
 8005872:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005874:	f7fb f9d2 	bl	8000c1c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005878:	2200      	movs	r2, #0
 800587a:	201c      	movs	r0, #28
 800587c:	4611      	mov	r1, r2
 800587e:	f7fb f977 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005882:	201c      	movs	r0, #28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005884:	f7fb f9a8 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005888:	b00a      	add	sp, #40	; 0x28
 800588a:	bd10      	pop	{r4, pc}
  else if(tim_icHandle->Instance==TIM3)
 800588c:	4a12      	ldr	r2, [pc, #72]	; (80058d8 <HAL_TIM_IC_MspInit+0xb8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d1fa      	bne.n	8005888 <HAL_TIM_IC_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005892:	4b12      	ldr	r3, [pc, #72]	; (80058dc <HAL_TIM_IC_MspInit+0xbc>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005894:	4812      	ldr	r0, [pc, #72]	; (80058e0 <HAL_TIM_IC_MspInit+0xc0>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005896:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005898:	f042 0202 	orr.w	r2, r2, #2
 800589c:	659a      	str	r2, [r3, #88]	; 0x58
 800589e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80058a0:	f002 0202 	and.w	r2, r2, #2
 80058a4:	9203      	str	r2, [sp, #12]
 80058a6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058aa:	f042 0202 	orr.w	r2, r2, #2
 80058ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80058b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	9304      	str	r3, [sp, #16]
 80058b8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80058ba:	2330      	movs	r3, #48	; 0x30
 80058bc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058be:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058c0:	2302      	movs	r3, #2
 80058c2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80058c4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058c6:	f7fb f9a9 	bl	8000c1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80058ca:	2200      	movs	r2, #0
 80058cc:	201d      	movs	r0, #29
 80058ce:	4611      	mov	r1, r2
 80058d0:	f7fb f94e 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80058d4:	201d      	movs	r0, #29
 80058d6:	e7d5      	b.n	8005884 <HAL_TIM_IC_MspInit+0x64>
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40021000 	.word	0x40021000
 80058e0:	48000400 	.word	0x48000400

080058e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80058e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM6)
 80058e6:	6803      	ldr	r3, [r0, #0]
 80058e8:	4a1f      	ldr	r2, [pc, #124]	; (8005968 <HAL_TIM_Base_MspInit+0x84>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d114      	bne.n	8005918 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80058ee:	4b1f      	ldr	r3, [pc, #124]	; (800596c <HAL_TIM_Base_MspInit+0x88>)
 80058f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80058f2:	f042 0210 	orr.w	r2, r2, #16
 80058f6:	659a      	str	r2, [r3, #88]	; 0x58
 80058f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80058fa:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 80058fc:	f003 0310 	and.w	r3, r3, #16
 8005900:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005902:	2036      	movs	r0, #54	; 0x36
 8005904:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005906:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005908:	f7fb f932 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800590c:	2036      	movs	r0, #54	; 0x36
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800590e:	f7fb f963 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8005912:	b005      	add	sp, #20
 8005914:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM15)
 8005918:	4a15      	ldr	r2, [pc, #84]	; (8005970 <HAL_TIM_Base_MspInit+0x8c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d110      	bne.n	8005940 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800591e:	4b13      	ldr	r3, [pc, #76]	; (800596c <HAL_TIM_Base_MspInit+0x88>)
 8005920:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005922:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005926:	661a      	str	r2, [r3, #96]	; 0x60
 8005928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800592a:	2200      	movs	r2, #0
    __HAL_RCC_TIM15_CLK_ENABLE();
 800592c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005930:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005932:	2018      	movs	r0, #24
 8005934:	4611      	mov	r1, r2
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005936:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005938:	f7fb f91a 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800593c:	2018      	movs	r0, #24
 800593e:	e7e6      	b.n	800590e <HAL_TIM_Base_MspInit+0x2a>
  else if(tim_baseHandle->Instance==TIM16)
 8005940:	4a0c      	ldr	r2, [pc, #48]	; (8005974 <HAL_TIM_Base_MspInit+0x90>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d1e5      	bne.n	8005912 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005946:	4b09      	ldr	r3, [pc, #36]	; (800596c <HAL_TIM_Base_MspInit+0x88>)
 8005948:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800594a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800594e:	661a      	str	r2, [r3, #96]	; 0x60
 8005950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005952:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005958:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800595a:	2019      	movs	r0, #25
 800595c:	4611      	mov	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 800595e:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005960:	f7fb f906 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005964:	2019      	movs	r0, #25
 8005966:	e7d2      	b.n	800590e <HAL_TIM_Base_MspInit+0x2a>
 8005968:	40001000 	.word	0x40001000
 800596c:	40021000 	.word	0x40021000
 8005970:	40014000 	.word	0x40014000
 8005974:	40014400 	.word	0x40014400

08005978 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005978:	b510      	push	{r4, lr}
 800597a:	4604      	mov	r4, r0
 800597c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800597e:	2214      	movs	r2, #20
 8005980:	2100      	movs	r1, #0
 8005982:	a803      	add	r0, sp, #12
 8005984:	f000 fc92 	bl	80062ac <memset>
  if(timHandle->Instance==TIM1)
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	4a19      	ldr	r2, [pc, #100]	; (80059f0 <HAL_TIM_MspPostInit+0x78>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d117      	bne.n	80059c0 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005990:	4b18      	ldr	r3, [pc, #96]	; (80059f4 <HAL_TIM_MspPostInit+0x7c>)
 8005992:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005994:	f042 0201 	orr.w	r2, r2, #1
 8005998:	64da      	str	r2, [r3, #76]	; 0x4c
 800599a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	9301      	str	r3, [sp, #4]
 80059a2:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = O_PWM_LED3_Pin;
 80059a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059aa:	2302      	movs	r3, #2
 80059ac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80059ae:	2301      	movs	r3, #1
 80059b0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(O_PWM_LED3_GPIO_Port, &GPIO_InitStruct);
 80059b2:	a903      	add	r1, sp, #12
 80059b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = O_PWM_LED2_Pin|O_PWM_LED1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059b8:	f7fb f930 	bl	8000c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80059bc:	b008      	add	sp, #32
 80059be:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM15)
 80059c0:	4a0d      	ldr	r2, [pc, #52]	; (80059f8 <HAL_TIM_MspPostInit+0x80>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d1fa      	bne.n	80059bc <HAL_TIM_MspPostInit+0x44>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059c6:	4b0b      	ldr	r3, [pc, #44]	; (80059f4 <HAL_TIM_MspPostInit+0x7c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059c8:	480c      	ldr	r0, [pc, #48]	; (80059fc <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059cc:	f042 0202 	orr.w	r2, r2, #2
 80059d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80059d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	9302      	str	r3, [sp, #8]
 80059da:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = O_PWM_LED2_Pin|O_PWM_LED1_Pin;
 80059dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80059e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059e2:	2302      	movs	r3, #2
 80059e4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80059e6:	230e      	movs	r3, #14
 80059e8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059ea:	a903      	add	r1, sp, #12
 80059ec:	e7e4      	b.n	80059b8 <HAL_TIM_MspPostInit+0x40>
 80059ee:	bf00      	nop
 80059f0:	40012c00 	.word	0x40012c00
 80059f4:	40021000 	.word	0x40021000
 80059f8:	40014000 	.word	0x40014000
 80059fc:	48000400 	.word	0x48000400

08005a00 <MX_TIM1_Init>:
{
 8005a00:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a02:	2400      	movs	r4, #0
{
 8005a04:	b096      	sub	sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a06:	221c      	movs	r2, #28
 8005a08:	4621      	mov	r1, r4
 8005a0a:	a804      	add	r0, sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a0c:	9401      	str	r4, [sp, #4]
 8005a0e:	9402      	str	r4, [sp, #8]
 8005a10:	9403      	str	r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a12:	f000 fc4b 	bl	80062ac <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005a16:	222c      	movs	r2, #44	; 0x2c
 8005a18:	4621      	mov	r1, r4
 8005a1a:	eb0d 0002 	add.w	r0, sp, r2
 8005a1e:	f000 fc45 	bl	80062ac <memset>
  htim1.Instance = TIM1;
 8005a22:	4822      	ldr	r0, [pc, #136]	; (8005aac <MX_TIM1_Init+0xac>)
 8005a24:	4b22      	ldr	r3, [pc, #136]	; (8005ab0 <MX_TIM1_Init+0xb0>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a26:	6084      	str	r4, [r0, #8]
  htim1.Init.Prescaler = 0;
 8005a28:	e880 0018 	stmia.w	r0, {r3, r4}
  htim1.Init.Period = 0;
 8005a2c:	60c4      	str	r4, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a2e:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8005a30:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a32:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005a34:	f7fd fa86 	bl	8002f44 <HAL_TIM_PWM_Init>
 8005a38:	b108      	cbz	r0, 8005a3e <MX_TIM1_Init+0x3e>
    Error_Handler();
 8005a3a:	f7ff fd6b 	bl	8005514 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005a3e:	a901      	add	r1, sp, #4
 8005a40:	481a      	ldr	r0, [pc, #104]	; (8005aac <MX_TIM1_Init+0xac>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a42:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005a44:	9402      	str	r4, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a46:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005a48:	f7fd fd3c 	bl	80034c4 <HAL_TIMEx_MasterConfigSynchronization>
 8005a4c:	b108      	cbz	r0, 8005a52 <MX_TIM1_Init+0x52>
    Error_Handler();
 8005a4e:	f7ff fd61 	bl	8005514 <Error_Handler>
  sConfigOC.Pulse = 0;
 8005a52:	2400      	movs	r4, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a54:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005a56:	4622      	mov	r2, r4
 8005a58:	a904      	add	r1, sp, #16
 8005a5a:	4814      	ldr	r0, [pc, #80]	; (8005aac <MX_TIM1_Init+0xac>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a5c:	9304      	str	r3, [sp, #16]
  sConfigOC.Pulse = 0;
 8005a5e:	9405      	str	r4, [sp, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a60:	9406      	str	r4, [sp, #24]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005a62:	9407      	str	r4, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a64:	9408      	str	r4, [sp, #32]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005a66:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005a68:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005a6a:	f7fd fad7 	bl	800301c <HAL_TIM_PWM_ConfigChannel>
 8005a6e:	b108      	cbz	r0, 8005a74 <MX_TIM1_Init+0x74>
    Error_Handler();
 8005a70:	f7ff fd50 	bl	8005514 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a78:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005a7a:	a90b      	add	r1, sp, #44	; 0x2c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005a7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005a80:	480a      	ldr	r0, [pc, #40]	; (8005aac <MX_TIM1_Init+0xac>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005a82:	940b      	str	r4, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005a84:	940c      	str	r4, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005a86:	940d      	str	r4, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.DeadTime = 0;
 8005a88:	940e      	str	r4, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005a8a:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005a8c:	9411      	str	r4, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005a8e:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005a90:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005a92:	9414      	str	r4, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005a94:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005a96:	f7fd fd3d 	bl	8003514 <HAL_TIMEx_ConfigBreakDeadTime>
 8005a9a:	b108      	cbz	r0, 8005aa0 <MX_TIM1_Init+0xa0>
    Error_Handler();
 8005a9c:	f7ff fd3a 	bl	8005514 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8005aa0:	4802      	ldr	r0, [pc, #8]	; (8005aac <MX_TIM1_Init+0xac>)
 8005aa2:	f7ff ff69 	bl	8005978 <HAL_TIM_MspPostInit>
}
 8005aa6:	b016      	add	sp, #88	; 0x58
 8005aa8:	bd10      	pop	{r4, pc}
 8005aaa:	bf00      	nop
 8005aac:	20001788 	.word	0x20001788
 8005ab0:	40012c00 	.word	0x40012c00

08005ab4 <MX_TIM15_Init>:
{
 8005ab4:	b510      	push	{r4, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ab6:	2210      	movs	r2, #16
{
 8005ab8:	b09a      	sub	sp, #104	; 0x68
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005aba:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005abc:	2100      	movs	r1, #0
 8005abe:	eb0d 0002 	add.w	r0, sp, r2
 8005ac2:	f000 fbf3 	bl	80062ac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ac6:	221c      	movs	r2, #28
 8005ac8:	4621      	mov	r1, r4
 8005aca:	a808      	add	r0, sp, #32
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005acc:	9401      	str	r4, [sp, #4]
 8005ace:	9402      	str	r4, [sp, #8]
 8005ad0:	9403      	str	r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ad2:	f000 fbeb 	bl	80062ac <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005ad6:	222c      	movs	r2, #44	; 0x2c
 8005ad8:	4621      	mov	r1, r4
 8005ada:	a80f      	add	r0, sp, #60	; 0x3c
 8005adc:	f000 fbe6 	bl	80062ac <memset>
  htim15.Instance = TIM15;
 8005ae0:	482b      	ldr	r0, [pc, #172]	; (8005b90 <MX_TIM15_Init+0xdc>)
  htim15.Init.Prescaler = 80;
 8005ae2:	4a2c      	ldr	r2, [pc, #176]	; (8005b94 <MX_TIM15_Init+0xe0>)
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ae4:	6084      	str	r4, [r0, #8]
  htim15.Init.Prescaler = 80;
 8005ae6:	2350      	movs	r3, #80	; 0x50
 8005ae8:	e880 000c 	stmia.w	r0, {r2, r3}
  htim15.Init.Period = 0;
 8005aec:	60c4      	str	r4, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005aee:	6104      	str	r4, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 8005af0:	6144      	str	r4, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005af2:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005af4:	f7fd fa0c 	bl	8002f10 <HAL_TIM_Base_Init>
 8005af8:	b108      	cbz	r0, 8005afe <MX_TIM15_Init+0x4a>
    Error_Handler();
 8005afa:	f7ff fd0b 	bl	8005514 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005b02:	a904      	add	r1, sp, #16
 8005b04:	4822      	ldr	r0, [pc, #136]	; (8005b90 <MX_TIM15_Init+0xdc>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b06:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005b08:	f7fd fbca 	bl	80032a0 <HAL_TIM_ConfigClockSource>
 8005b0c:	b108      	cbz	r0, 8005b12 <MX_TIM15_Init+0x5e>
    Error_Handler();
 8005b0e:	f7ff fd01 	bl	8005514 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8005b12:	481f      	ldr	r0, [pc, #124]	; (8005b90 <MX_TIM15_Init+0xdc>)
 8005b14:	f7fd fa16 	bl	8002f44 <HAL_TIM_PWM_Init>
 8005b18:	b108      	cbz	r0, 8005b1e <MX_TIM15_Init+0x6a>
    Error_Handler();
 8005b1a:	f7ff fcfb 	bl	8005514 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b1e:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005b20:	a901      	add	r1, sp, #4
 8005b22:	481b      	ldr	r0, [pc, #108]	; (8005b90 <MX_TIM15_Init+0xdc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b24:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b26:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005b28:	f7fd fccc 	bl	80034c4 <HAL_TIMEx_MasterConfigSynchronization>
 8005b2c:	b108      	cbz	r0, 8005b32 <MX_TIM15_Init+0x7e>
    Error_Handler();
 8005b2e:	f7ff fcf1 	bl	8005514 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b32:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b34:	2200      	movs	r2, #0
 8005b36:	a908      	add	r1, sp, #32
 8005b38:	4815      	ldr	r0, [pc, #84]	; (8005b90 <MX_TIM15_Init+0xdc>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b3a:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 0;
 8005b3c:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b3e:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005b40:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b42:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005b44:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005b46:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b48:	f7fd fa68 	bl	800301c <HAL_TIM_PWM_ConfigChannel>
 8005b4c:	b108      	cbz	r0, 8005b52 <MX_TIM15_Init+0x9e>
    Error_Handler();
 8005b4e:	f7ff fce1 	bl	8005514 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005b52:	2204      	movs	r2, #4
 8005b54:	a908      	add	r1, sp, #32
 8005b56:	480e      	ldr	r0, [pc, #56]	; (8005b90 <MX_TIM15_Init+0xdc>)
 8005b58:	f7fd fa60 	bl	800301c <HAL_TIM_PWM_ConfigChannel>
 8005b5c:	b108      	cbz	r0, 8005b62 <MX_TIM15_Init+0xae>
    Error_Handler();
 8005b5e:	f7ff fcd9 	bl	8005514 <Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005b62:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005b64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8005b68:	a90f      	add	r1, sp, #60	; 0x3c
 8005b6a:	4809      	ldr	r0, [pc, #36]	; (8005b90 <MX_TIM15_Init+0xdc>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005b6c:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005b6e:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005b70:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 8005b72:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005b74:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005b76:	9214      	str	r2, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005b78:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005b7a:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8005b7c:	f7fd fcca 	bl	8003514 <HAL_TIMEx_ConfigBreakDeadTime>
 8005b80:	b108      	cbz	r0, 8005b86 <MX_TIM15_Init+0xd2>
    Error_Handler();
 8005b82:	f7ff fcc7 	bl	8005514 <Error_Handler>
  HAL_TIM_MspPostInit(&htim15);
 8005b86:	4802      	ldr	r0, [pc, #8]	; (8005b90 <MX_TIM15_Init+0xdc>)
 8005b88:	f7ff fef6 	bl	8005978 <HAL_TIM_MspPostInit>
}
 8005b8c:	b01a      	add	sp, #104	; 0x68
 8005b8e:	bd10      	pop	{r4, pc}
 8005b90:	200016c8 	.word	0x200016c8
 8005b94:	40014000 	.word	0x40014000

08005b98 <tim_setNewTimeAndStart>:
  }
} 

/* USER CODE BEGIN 1 */
void tim_setNewTimeAndStart(TIM_TypeDef *tim, uint32_t time){
	tim->CR1 &= ~TIM_CR1_CEN;	//Stop counter
 8005b98:	6803      	ldr	r3, [r0, #0]
 8005b9a:	f023 0301 	bic.w	r3, r3, #1
 8005b9e:	6003      	str	r3, [r0, #0]
	tim->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 8005ba0:	6803      	ldr	r3, [r0, #0]
 8005ba2:	f043 0302 	orr.w	r3, r3, #2
 8005ba6:	6003      	str	r3, [r0, #0]
	tim->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 8005ba8:	6903      	ldr	r3, [r0, #16]
 8005baa:	f023 0301 	bic.w	r3, r3, #1
 8005bae:	6103      	str	r3, [r0, #16]
	tim->ARR = time;				//Load new time
 8005bb0:	62c1      	str	r1, [r0, #44]	; 0x2c
	tim->EGR |= TIM_EGR_UG;		//Force reload of shadow register -> Start from beginning
 8005bb2:	6943      	ldr	r3, [r0, #20]
 8005bb4:	f043 0301 	orr.w	r3, r3, #1
 8005bb8:	6143      	str	r3, [r0, #20]
	tim->CR1 &= ~TIM_CR1_UDIS;	//Allow new updates to be triggered
 8005bba:	6803      	ldr	r3, [r0, #0]
 8005bbc:	f023 0302 	bic.w	r3, r3, #2
 8005bc0:	6003      	str	r3, [r0, #0]
	tim->DIER |= TIM_DIER_UIE;	//Enable update interrupts
 8005bc2:	68c3      	ldr	r3, [r0, #12]
 8005bc4:	f043 0301 	orr.w	r3, r3, #1
 8005bc8:	60c3      	str	r3, [r0, #12]
	tim->CR1 |= TIM_CR1_CEN;		//Enable counter
 8005bca:	6803      	ldr	r3, [r0, #0]
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	6003      	str	r3, [r0, #0]
 8005bd2:	4770      	bx	lr

08005bd4 <tim_stop>:
}
void tim_stop(TIM_TypeDef *tim){
	tim->CR1 &= ~TIM_CR1_CEN;	//Stop counter
 8005bd4:	6803      	ldr	r3, [r0, #0]
 8005bd6:	f023 0301 	bic.w	r3, r3, #1
 8005bda:	6003      	str	r3, [r0, #0]
	tim->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 8005bdc:	6803      	ldr	r3, [r0, #0]
 8005bde:	f043 0302 	orr.w	r3, r3, #2
 8005be2:	6003      	str	r3, [r0, #0]
	tim->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 8005be4:	6903      	ldr	r3, [r0, #16]
 8005be6:	f023 0301 	bic.w	r3, r3, #1
 8005bea:	6103      	str	r3, [r0, #16]
 8005bec:	4770      	bx	lr
	...

08005bf0 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005bf0:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
 8005bf2:	480c      	ldr	r0, [pc, #48]	; (8005c24 <MX_UART4_Init+0x34>)
  huart4.Init.BaudRate = 115200;
 8005bf4:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <MX_UART4_Init+0x38>)
 8005bf6:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8005bfa:	e880 4008 	stmia.w	r0, {r3, lr}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005bfe:	220c      	movs	r2, #12
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005c00:	2300      	movs	r3, #0
 8005c02:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005c04:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005c06:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005c08:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c0a:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c0c:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c0e:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c10:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005c12:	f7fd fef8 	bl	8003a06 <HAL_UART_Init>
 8005c16:	b118      	cbz	r0, 8005c20 <MX_UART4_Init+0x30>
  {
    Error_Handler();
  }

}
 8005c18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005c1c:	f7ff bc7a 	b.w	8005514 <Error_Handler>
 8005c20:	bd08      	pop	{r3, pc}
 8005c22:	bf00      	nop
 8005c24:	200018c0 	.word	0x200018c0
 8005c28:	40004c00 	.word	0x40004c00

08005c2c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005c2c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8005c2e:	480c      	ldr	r0, [pc, #48]	; (8005c60 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 250000;
 8005c30:	4b0c      	ldr	r3, [pc, #48]	; (8005c64 <MX_USART1_UART_Init+0x38>)
 8005c32:	490d      	ldr	r1, [pc, #52]	; (8005c68 <MX_USART1_UART_Init+0x3c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_2;
 8005c34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  huart1.Init.BaudRate = 250000;
 8005c38:	e880 000a 	stmia.w	r0, {r1, r3}
  huart1.Init.StopBits = UART_STOPBITS_2;
 8005c3c:	60c2      	str	r2, [r0, #12]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005c3e:	2300      	movs	r3, #0
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005c40:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005c42:	6083      	str	r3, [r0, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005c44:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005c46:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c48:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c4a:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c4c:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c4e:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005c50:	f7fd fed9 	bl	8003a06 <HAL_UART_Init>
 8005c54:	b118      	cbz	r0, 8005c5e <MX_USART1_UART_Init+0x32>
  {
    Error_Handler();
  }

}
 8005c56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005c5a:	f7ff bc5b 	b.w	8005514 <Error_Handler>
 8005c5e:	bd08      	pop	{r3, pc}
 8005c60:	20001848 	.word	0x20001848
 8005c64:	0003d090 	.word	0x0003d090
 8005c68:	40013800 	.word	0x40013800

08005c6c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005c6c:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8005c6e:	480c      	ldr	r0, [pc, #48]	; (8005ca0 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 250000;
 8005c70:	4b0c      	ldr	r3, [pc, #48]	; (8005ca4 <MX_USART2_UART_Init+0x38>)
 8005c72:	490d      	ldr	r1, [pc, #52]	; (8005ca8 <MX_USART2_UART_Init+0x3c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_2;
 8005c74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  huart2.Init.BaudRate = 250000;
 8005c78:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.StopBits = UART_STOPBITS_2;
 8005c7c:	60c2      	str	r2, [r0, #12]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005c7e:	2300      	movs	r3, #0
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005c80:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005c82:	6083      	str	r3, [r0, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005c84:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005c86:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c88:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c8a:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c8c:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c8e:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005c90:	f7fd feb9 	bl	8003a06 <HAL_UART_Init>
 8005c94:	b118      	cbz	r0, 8005c9e <MX_USART2_UART_Init+0x32>
  {
    Error_Handler();
  }

}
 8005c96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005c9a:	f7ff bc3b 	b.w	8005514 <Error_Handler>
 8005c9e:	bd08      	pop	{r3, pc}
 8005ca0:	20001938 	.word	0x20001938
 8005ca4:	0003d090 	.word	0x0003d090
 8005ca8:	40004400 	.word	0x40004400

08005cac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005cac:	b510      	push	{r4, lr}
 8005cae:	4604      	mov	r4, r0
 8005cb0:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cb2:	2214      	movs	r2, #20
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	a807      	add	r0, sp, #28
 8005cb8:	f000 faf8 	bl	80062ac <memset>
  if(uartHandle->Instance==UART4)
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	4a40      	ldr	r2, [pc, #256]	; (8005dc0 <HAL_UART_MspInit+0x114>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d129      	bne.n	8005d18 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005cc4:	4b3f      	ldr	r3, [pc, #252]	; (8005dc4 <HAL_UART_MspInit+0x118>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cc6:	4840      	ldr	r0, [pc, #256]	; (8005dc8 <HAL_UART_MspInit+0x11c>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8005cc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005cca:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005cce:	659a      	str	r2, [r3, #88]	; 0x58
 8005cd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005cd2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8005cd6:	9201      	str	r2, [sp, #4]
 8005cd8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cdc:	f042 0204 	orr.w	r2, r2, #4
 8005ce0:	64da      	str	r2, [r3, #76]	; 0x4c
 8005ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	9302      	str	r3, [sp, #8]
 8005cea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005cec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005cf0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cfa:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005cfc:	2308      	movs	r3, #8
 8005cfe:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d00:	f7fa ff8c 	bl	8000c1c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8005d04:	2200      	movs	r2, #0
 8005d06:	2034      	movs	r0, #52	; 0x34
 8005d08:	4611      	mov	r1, r2
 8005d0a:	f7fa ff31 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005d0e:	2034      	movs	r0, #52	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005d10:	f7fa ff62 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005d14:	b00c      	add	sp, #48	; 0x30
 8005d16:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART1)
 8005d18:	4a2c      	ldr	r2, [pc, #176]	; (8005dcc <HAL_UART_MspInit+0x120>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d125      	bne.n	8005d6a <HAL_UART_MspInit+0xbe>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d1e:	4b29      	ldr	r3, [pc, #164]	; (8005dc4 <HAL_UART_MspInit+0x118>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d20:	482b      	ldr	r0, [pc, #172]	; (8005dd0 <HAL_UART_MspInit+0x124>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d28:	661a      	str	r2, [r3, #96]	; 0x60
 8005d2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d2c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005d30:	9203      	str	r2, [sp, #12]
 8005d32:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d36:	f042 0202 	orr.w	r2, r2, #2
 8005d3a:	64da      	str	r2, [r3, #76]	; 0x4c
 8005d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	9304      	str	r3, [sp, #16]
 8005d44:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d46:	23c0      	movs	r3, #192	; 0xc0
 8005d48:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d52:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005d54:	2307      	movs	r3, #7
 8005d56:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d58:	f7fa ff60 	bl	8000c1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8005d5c:	2025      	movs	r0, #37	; 0x25
 8005d5e:	2200      	movs	r2, #0
 8005d60:	2101      	movs	r1, #1
 8005d62:	f7fa ff05 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005d66:	2025      	movs	r0, #37	; 0x25
 8005d68:	e7d2      	b.n	8005d10 <HAL_UART_MspInit+0x64>
  else if(uartHandle->Instance==USART2)
 8005d6a:	4a1a      	ldr	r2, [pc, #104]	; (8005dd4 <HAL_UART_MspInit+0x128>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d1d1      	bne.n	8005d14 <HAL_UART_MspInit+0x68>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005d70:	4b14      	ldr	r3, [pc, #80]	; (8005dc4 <HAL_UART_MspInit+0x118>)
 8005d72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d74:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005d78:	659a      	str	r2, [r3, #88]	; 0x58
 8005d7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d7c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005d80:	9205      	str	r2, [sp, #20]
 8005d82:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d86:	f042 0201 	orr.w	r2, r2, #1
 8005d8a:	64da      	str	r2, [r3, #76]	; 0x4c
 8005d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	9306      	str	r3, [sp, #24]
 8005d94:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005d96:	230c      	movs	r3, #12
 8005d98:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005da2:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005da4:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005daa:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dac:	f7fa ff36 	bl	8000c1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005db0:	2200      	movs	r2, #0
 8005db2:	2026      	movs	r0, #38	; 0x26
 8005db4:	4611      	mov	r1, r2
 8005db6:	f7fa fedb 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005dba:	2026      	movs	r0, #38	; 0x26
 8005dbc:	e7a8      	b.n	8005d10 <HAL_UART_MspInit+0x64>
 8005dbe:	bf00      	nop
 8005dc0:	40004c00 	.word	0x40004c00
 8005dc4:	40021000 	.word	0x40021000
 8005dc8:	48000800 	.word	0x48000800
 8005dcc:	40013800 	.word	0x40013800
 8005dd0:	48000400 	.word	0x48000400
 8005dd4:	40004400 	.word	0x40004400

08005dd8 <uart_enableReceiveInt>:
  }
} 

/* USER CODE BEGIN 1 */
void uart_enableReceiveInt(USART_TypeDef *uartHandler){
	uartHandler->CR1 |= USART_CR1_RXNEIE;
 8005dd8:	6803      	ldr	r3, [r0, #0]
 8005dda:	f043 0320 	orr.w	r3, r3, #32
 8005dde:	6003      	str	r3, [r0, #0]
 8005de0:	4770      	bx	lr
	...

08005de4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005de4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8005de6:	2200      	movs	r2, #0
 8005de8:	490a      	ldr	r1, [pc, #40]	; (8005e14 <MX_USB_DEVICE_Init+0x30>)
 8005dea:	480b      	ldr	r0, [pc, #44]	; (8005e18 <MX_USB_DEVICE_Init+0x34>)
 8005dec:	f7fe fdf9 	bl	80049e2 <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8005df0:	490a      	ldr	r1, [pc, #40]	; (8005e1c <MX_USB_DEVICE_Init+0x38>)
 8005df2:	4809      	ldr	r0, [pc, #36]	; (8005e18 <MX_USB_DEVICE_Init+0x34>)
 8005df4:	f7fe fe0a 	bl	8004a0c <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8005df8:	4909      	ldr	r1, [pc, #36]	; (8005e20 <MX_USB_DEVICE_Init+0x3c>)
 8005dfa:	4807      	ldr	r0, [pc, #28]	; (8005e18 <MX_USB_DEVICE_Init+0x34>)
 8005dfc:	f7fe fdc9 	bl	8004992 <USBD_CDC_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 8005e00:	4805      	ldr	r0, [pc, #20]	; (8005e18 <MX_USB_DEVICE_Init+0x34>)
 8005e02:	f000 f9a4 	bl	800614e <USBD_LL_BatteryCharging>
 8005e06:	b120      	cbz	r0, 8005e12 <MX_USB_DEVICE_Init+0x2e>
  USBD_Start(&hUsbDeviceFS);
 8005e08:	4803      	ldr	r0, [pc, #12]	; (8005e18 <MX_USB_DEVICE_Init+0x34>)
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005e0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  USBD_Start(&hUsbDeviceFS);
 8005e0e:	f7fe be04 	b.w	8004a1a <USBD_Start>
 8005e12:	bd08      	pop	{r3, pc}
 8005e14:	20000580 	.word	0x20000580
 8005e18:	200019b0 	.word	0x200019b0
 8005e1c:	2000045c 	.word	0x2000045c
 8005e20:	20000570 	.word	0x20000570

08005e24 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005e24:	2000      	movs	r0, #0
 8005e26:	4770      	bx	lr

08005e28 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005e28:	2000      	movs	r0, #0
 8005e2a:	4770      	bx	lr

08005e2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005e2c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005e2e:	4c05      	ldr	r4, [pc, #20]	; (8005e44 <CDC_Receive_FS+0x18>)
 8005e30:	4601      	mov	r1, r0
 8005e32:	4620      	mov	r0, r4
 8005e34:	f7fe fdbc 	bl	80049b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f7fe fdbf 	bl	80049bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8005e3e:	2000      	movs	r0, #0
 8005e40:	bd10      	pop	{r4, pc}
 8005e42:	bf00      	nop
 8005e44:	200019b0 	.word	0x200019b0

08005e48 <CDC_Init_FS>:
{
 8005e48:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005e4a:	4c06      	ldr	r4, [pc, #24]	; (8005e64 <CDC_Init_FS+0x1c>)
 8005e4c:	4906      	ldr	r1, [pc, #24]	; (8005e68 <CDC_Init_FS+0x20>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	4620      	mov	r0, r4
 8005e52:	f7fe fda5 	bl	80049a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005e56:	4905      	ldr	r1, [pc, #20]	; (8005e6c <CDC_Init_FS+0x24>)
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f7fe fda9 	bl	80049b0 <USBD_CDC_SetRxBuffer>
}
 8005e5e:	2000      	movs	r0, #0
 8005e60:	bd10      	pop	{r4, pc}
 8005e62:	bf00      	nop
 8005e64:	200019b0 	.word	0x200019b0
 8005e68:	2000244c 	.word	0x2000244c
 8005e6c:	20001c4c 	.word	0x20001c4c

08005e70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005e70:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB)
 8005e72:	6802      	ldr	r2, [r0, #0]
 8005e74:	4b13      	ldr	r3, [pc, #76]	; (8005ec4 <HAL_PCD_MspInit+0x54>)
 8005e76:	429a      	cmp	r2, r3
{
 8005e78:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB)
 8005e7a:	d121      	bne.n	8005ec0 <HAL_PCD_MspInit+0x50>
  
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005e7c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005e80:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e82:	2302      	movs	r3, #2
 8005e84:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e86:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e88:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e8a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e8c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8005e8e:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8005e94:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e96:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e98:	f7fa fec0 	bl	8000c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <HAL_PCD_MspInit+0x58>)
 8005e9e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8005ea0:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8005ea4:	6599      	str	r1, [r3, #88]	; 0x58
 8005ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005eac:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8005eae:	2043      	movs	r0, #67	; 0x43
 8005eb0:	4622      	mov	r2, r4
 8005eb2:	4621      	mov	r1, r4
    __HAL_RCC_USB_CLK_ENABLE();
 8005eb4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8005eb6:	f7fa fe5b 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8005eba:	2043      	movs	r0, #67	; 0x43
 8005ebc:	f7fa fe8c 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005ec0:	b006      	add	sp, #24
 8005ec2:	bd10      	pop	{r4, pc}
 8005ec4:	40006800 	.word	0x40006800
 8005ec8:	40021000 	.word	0x40021000

08005ecc <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005ecc:	f500 6186 	add.w	r1, r0, #1072	; 0x430
 8005ed0:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8005ed4:	f7fe bdb8 	b.w	8004a48 <USBD_LL_SetupStage>

08005ed8 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005ed8:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8005edc:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8005ee0:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8005ee4:	f7fe bddd 	b.w	8004aa2 <USBD_LL_DataOutStage>

08005ee8 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005ee8:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8005eec:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8005ef0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ef2:	f7fe be0e 	b.w	8004b12 <USBD_LL_DataInStage>

08005ef6 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005ef6:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8005efa:	f7fe be9f 	b.w	8004c3c <USBD_LL_SOF>

08005efe <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8005efe:	b510      	push	{r4, lr}
 8005f00:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005f02:	2101      	movs	r1, #1
 8005f04:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8005f08:	f7fe fe86 	bl	8004c18 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f0c:	f8d4 0470 	ldr.w	r0, [r4, #1136]	; 0x470
}
 8005f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f14:	f7fe be59 	b.w	8004bca <USBD_LL_Reset>

08005f18 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8005f18:	b510      	push	{r4, lr}
 8005f1a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005f1c:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 8005f20:	f7fe fe7d 	bl	8004c1e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005f24:	69a3      	ldr	r3, [r4, #24]
 8005f26:	b123      	cbz	r3, 8005f32 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005f28:	4a02      	ldr	r2, [pc, #8]	; (8005f34 <HAL_PCD_SuspendCallback+0x1c>)
 8005f2a:	6913      	ldr	r3, [r2, #16]
 8005f2c:	f043 0306 	orr.w	r3, r3, #6
 8005f30:	6113      	str	r3, [r2, #16]
 8005f32:	bd10      	pop	{r4, pc}
 8005f34:	e000ed00 	.word	0xe000ed00

08005f38 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8005f38:	6983      	ldr	r3, [r0, #24]
{
 8005f3a:	b510      	push	{r4, lr}
 8005f3c:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8005f3e:	b133      	cbz	r3, 8005f4e <HAL_PCD_ResumeCallback+0x16>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005f40:	4a06      	ldr	r2, [pc, #24]	; (8005f5c <HAL_PCD_ResumeCallback+0x24>)
 8005f42:	6913      	ldr	r3, [r2, #16]
 8005f44:	f023 0306 	bic.w	r3, r3, #6
 8005f48:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8005f4a:	f7ff fa5b 	bl	8005404 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005f4e:	f8d4 0470 	ldr.w	r0, [r4, #1136]	; 0x470
}
 8005f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005f56:	f7fe be6b 	b.w	8004c30 <USBD_LL_Resume>
 8005f5a:	bf00      	nop
 8005f5c:	e000ed00 	.word	0xe000ed00

08005f60 <USBD_LL_Init>:
{
 8005f60:	b510      	push	{r4, lr}
 8005f62:	4604      	mov	r4, r0
  HAL_PWREx_EnableVddUSB();
 8005f64:	f7fc f826 	bl	8001fb4 <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.pData = pdev;
 8005f68:	481e      	ldr	r0, [pc, #120]	; (8005fe4 <USBD_LL_Init+0x84>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005f6a:	4a1f      	ldr	r2, [pc, #124]	; (8005fe8 <USBD_LL_Init+0x88>)
  hpcd_USB_FS.pData = pdev;
 8005f6c:	f8c0 4470 	str.w	r4, [r0, #1136]	; 0x470
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005f70:	2308      	movs	r3, #8
 8005f72:	e880 000c 	stmia.w	r0, {r2, r3}
  pdev->pData = &hpcd_USB_FS;
 8005f76:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8005f7a:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8005f80:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005f82:	6102      	str	r2, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8005f84:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005f86:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005f88:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005f8a:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005f8c:	f7fb fba9 	bl	80016e2 <HAL_PCD_Init>
 8005f90:	b108      	cbz	r0, 8005f96 <USBD_LL_Init+0x36>
    Error_Handler( );
 8005f92:	f7ff fabf 	bl	8005514 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005f96:	2200      	movs	r2, #0
 8005f98:	4611      	mov	r1, r2
 8005f9a:	2318      	movs	r3, #24
 8005f9c:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8005fa0:	f7fb ff88 	bl	8001eb4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005fa4:	2358      	movs	r3, #88	; 0x58
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	2180      	movs	r1, #128	; 0x80
 8005faa:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8005fae:	f7fb ff81 	bl	8001eb4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005fb2:	23c0      	movs	r3, #192	; 0xc0
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2181      	movs	r1, #129	; 0x81
 8005fb8:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8005fbc:	f7fb ff7a 	bl	8001eb4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005fc0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8005fcc:	f7fb ff72 	bl	8001eb4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2182      	movs	r1, #130	; 0x82
 8005fd8:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8005fdc:	f7fb ff6a 	bl	8001eb4 <HAL_PCDEx_PMAConfig>
}
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	bd10      	pop	{r4, pc}
 8005fe4:	20002c4c 	.word	0x20002c4c
 8005fe8:	40006800 	.word	0x40006800

08005fec <USBD_LL_Start>:
{
 8005fec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8005fee:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8005ff2:	f7fb fbea 	bl	80017ca <HAL_PCD_Start>
 8005ff6:	2803      	cmp	r0, #3
 8005ff8:	bf9a      	itte	ls
 8005ffa:	4b02      	ldrls	r3, [pc, #8]	; (8006004 <USBD_LL_Start+0x18>)
 8005ffc:	5c18      	ldrbls	r0, [r3, r0]
 8005ffe:	2002      	movhi	r0, #2
}
 8006000:	bd08      	pop	{r3, pc}
 8006002:	bf00      	nop
 8006004:	08006338 	.word	0x08006338

08006008 <USBD_LL_OpenEP>:
{
 8006008:	b510      	push	{r4, lr}
 800600a:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800600c:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006010:	4613      	mov	r3, r2
 8006012:	4622      	mov	r2, r4
 8006014:	f7fb fc02 	bl	800181c <HAL_PCD_EP_Open>
 8006018:	2803      	cmp	r0, #3
 800601a:	bf9a      	itte	ls
 800601c:	4b01      	ldrls	r3, [pc, #4]	; (8006024 <USBD_LL_OpenEP+0x1c>)
 800601e:	5c18      	ldrbls	r0, [r3, r0]
 8006020:	2002      	movhi	r0, #2
}
 8006022:	bd10      	pop	{r4, pc}
 8006024:	08006338 	.word	0x08006338

08006028 <USBD_LL_CloseEP>:
{
 8006028:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800602a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800602e:	f7fb fc2a 	bl	8001886 <HAL_PCD_EP_Close>
 8006032:	2803      	cmp	r0, #3
 8006034:	bf9a      	itte	ls
 8006036:	4b02      	ldrls	r3, [pc, #8]	; (8006040 <USBD_LL_CloseEP+0x18>)
 8006038:	5c18      	ldrbls	r0, [r3, r0]
 800603a:	2002      	movhi	r0, #2
}
 800603c:	bd08      	pop	{r3, pc}
 800603e:	bf00      	nop
 8006040:	08006338 	.word	0x08006338

08006044 <USBD_LL_StallEP>:
{
 8006044:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006046:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800604a:	f7fb fec7 	bl	8001ddc <HAL_PCD_EP_SetStall>
 800604e:	2803      	cmp	r0, #3
 8006050:	bf9a      	itte	ls
 8006052:	4b02      	ldrls	r3, [pc, #8]	; (800605c <USBD_LL_StallEP+0x18>)
 8006054:	5c18      	ldrbls	r0, [r3, r0]
 8006056:	2002      	movhi	r0, #2
}
 8006058:	bd08      	pop	{r3, pc}
 800605a:	bf00      	nop
 800605c:	08006338 	.word	0x08006338

08006060 <USBD_LL_ClearStallEP>:
{
 8006060:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006062:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006066:	f7fb fef2 	bl	8001e4e <HAL_PCD_EP_ClrStall>
 800606a:	2803      	cmp	r0, #3
 800606c:	bf9a      	itte	ls
 800606e:	4b02      	ldrls	r3, [pc, #8]	; (8006078 <USBD_LL_ClearStallEP+0x18>)
 8006070:	5c18      	ldrbls	r0, [r3, r0]
 8006072:	2002      	movhi	r0, #2
}
 8006074:	bd08      	pop	{r3, pc}
 8006076:	bf00      	nop
 8006078:	08006338 	.word	0x08006338

0800607c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800607c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800607e:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006082:	bf45      	ittet	mi
 8006084:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8006088:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800608c:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006090:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006094:	bf58      	it	pl
 8006096:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
}
 800609a:	4770      	bx	lr

0800609c <USBD_LL_SetUSBAddress>:
{
 800609c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800609e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80060a2:	f7fb fba7 	bl	80017f4 <HAL_PCD_SetAddress>
 80060a6:	2803      	cmp	r0, #3
 80060a8:	bf9a      	itte	ls
 80060aa:	4b02      	ldrls	r3, [pc, #8]	; (80060b4 <USBD_LL_SetUSBAddress+0x18>)
 80060ac:	5c18      	ldrbls	r0, [r3, r0]
 80060ae:	2002      	movhi	r0, #2
}
 80060b0:	bd08      	pop	{r3, pc}
 80060b2:	bf00      	nop
 80060b4:	08006338 	.word	0x08006338

080060b8 <USBD_LL_Transmit>:
{
 80060b8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80060ba:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80060be:	f7fb fc2d 	bl	800191c <HAL_PCD_EP_Transmit>
 80060c2:	2803      	cmp	r0, #3
 80060c4:	bf9a      	itte	ls
 80060c6:	4b02      	ldrls	r3, [pc, #8]	; (80060d0 <USBD_LL_Transmit+0x18>)
 80060c8:	5c18      	ldrbls	r0, [r3, r0]
 80060ca:	2002      	movhi	r0, #2
}
 80060cc:	bd08      	pop	{r3, pc}
 80060ce:	bf00      	nop
 80060d0:	08006338 	.word	0x08006338

080060d4 <USBD_LL_PrepareReceive>:
{
 80060d4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80060d6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80060da:	f7fb fbff 	bl	80018dc <HAL_PCD_EP_Receive>
 80060de:	2803      	cmp	r0, #3
 80060e0:	bf9a      	itte	ls
 80060e2:	4b02      	ldrls	r3, [pc, #8]	; (80060ec <USBD_LL_PrepareReceive+0x18>)
 80060e4:	5c18      	ldrbls	r0, [r3, r0]
 80060e6:	2002      	movhi	r0, #2
}
 80060e8:	bd08      	pop	{r3, pc}
 80060ea:	bf00      	nop
 80060ec:	08006338 	.word	0x08006338

080060f0 <USBD_LL_GetRxDataSize>:
{
 80060f0:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80060f2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80060f6:	f7fb fc0a 	bl	800190e <HAL_PCD_EP_GetRxCount>
}
 80060fa:	bd08      	pop	{r3, pc}

080060fc <HAL_PCDEx_LPM_Callback>:
{
 80060fc:	b510      	push	{r4, lr}
 80060fe:	4604      	mov	r4, r0
  switch (msg)
 8006100:	b111      	cbz	r1, 8006108 <HAL_PCDEx_LPM_Callback+0xc>
 8006102:	2901      	cmp	r1, #1
 8006104:	d00f      	beq.n	8006126 <HAL_PCDEx_LPM_Callback+0x2a>
 8006106:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8006108:	6983      	ldr	r3, [r0, #24]
 800610a:	b133      	cbz	r3, 800611a <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClock_Config();
 800610c:	f7ff f97a 	bl	8005404 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006110:	4a0b      	ldr	r2, [pc, #44]	; (8006140 <HAL_PCDEx_LPM_Callback+0x44>)
 8006112:	6913      	ldr	r3, [r2, #16]
 8006114:	f023 0306 	bic.w	r3, r3, #6
 8006118:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800611a:	f8d4 0470 	ldr.w	r0, [r4, #1136]	; 0x470
}
 800611e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8006122:	f7fe bd85 	b.w	8004c30 <USBD_LL_Resume>
    USBD_LL_Suspend(hpcd->pData);
 8006126:	f8d0 0470 	ldr.w	r0, [r0, #1136]	; 0x470
 800612a:	f7fe fd78 	bl	8004c1e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800612e:	69a3      	ldr	r3, [r4, #24]
 8006130:	b123      	cbz	r3, 800613c <HAL_PCDEx_LPM_Callback+0x40>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006132:	4a03      	ldr	r2, [pc, #12]	; (8006140 <HAL_PCDEx_LPM_Callback+0x44>)
 8006134:	6913      	ldr	r3, [r2, #16]
 8006136:	f043 0306 	orr.w	r3, r3, #6
 800613a:	6113      	str	r3, [r2, #16]
 800613c:	bd10      	pop	{r4, pc}
 800613e:	bf00      	nop
 8006140:	e000ed00 	.word	0xe000ed00

08006144 <USBD_static_malloc>:
}
 8006144:	4800      	ldr	r0, [pc, #0]	; (8006148 <USBD_static_malloc+0x4>)
 8006146:	4770      	bx	lr
 8006148:	200013e8 	.word	0x200013e8

0800614c <USBD_static_free>:
{
 800614c:	4770      	bx	lr

0800614e <USBD_LL_BatteryCharging>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
  if (hpcd->Init.battery_charging_enable == ENABLE)
 800614e:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	2b01      	cmp	r3, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8006156:	bf14      	ite	ne
 8006158:	2002      	movne	r0, #2
 800615a:	2000      	moveq	r0, #0
 800615c:	4770      	bx	lr
	...

08006160 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8006160:	2312      	movs	r3, #18
 8006162:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8006164:	4800      	ldr	r0, [pc, #0]	; (8006168 <USBD_FS_DeviceDescriptor+0x8>)
 8006166:	4770      	bx	lr
 8006168:	200005ac 	.word	0x200005ac

0800616c <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 800616c:	2304      	movs	r3, #4
 800616e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8006170:	4800      	ldr	r0, [pc, #0]	; (8006174 <USBD_FS_LangIDStrDescriptor+0x8>)
 8006172:	4770      	bx	lr
 8006174:	200005c0 	.word	0x200005c0

08006178 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 8006178:	230c      	movs	r3, #12
 800617a:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 800617c:	4800      	ldr	r0, [pc, #0]	; (8006180 <USBD_FS_USR_BOSDescriptor+0x8>)
 800617e:	4770      	bx	lr
 8006180:	200005a0 	.word	0x200005a0

08006184 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006184:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006186:	4c04      	ldr	r4, [pc, #16]	; (8006198 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8006188:	4804      	ldr	r0, [pc, #16]	; (800619c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800618a:	460a      	mov	r2, r1
 800618c:	4621      	mov	r1, r4
 800618e:	f7fe ff5b 	bl	8005048 <USBD_GetString>
}
 8006192:	4620      	mov	r0, r4
 8006194:	bd10      	pop	{r4, pc}
 8006196:	bf00      	nop
 8006198:	200030c0 	.word	0x200030c0
 800619c:	08006355 	.word	0x08006355

080061a0 <USBD_FS_ProductStrDescriptor>:
{
 80061a0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80061a2:	4c04      	ldr	r4, [pc, #16]	; (80061b4 <USBD_FS_ProductStrDescriptor+0x14>)
 80061a4:	4804      	ldr	r0, [pc, #16]	; (80061b8 <USBD_FS_ProductStrDescriptor+0x18>)
 80061a6:	460a      	mov	r2, r1
 80061a8:	4621      	mov	r1, r4
 80061aa:	f7fe ff4d 	bl	8005048 <USBD_GetString>
}
 80061ae:	4620      	mov	r0, r4
 80061b0:	bd10      	pop	{r4, pc}
 80061b2:	bf00      	nop
 80061b4:	200030c0 	.word	0x200030c0
 80061b8:	08006366 	.word	0x08006366

080061bc <USBD_FS_SerialStrDescriptor>:
{
 80061bc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80061be:	4c04      	ldr	r4, [pc, #16]	; (80061d0 <USBD_FS_SerialStrDescriptor+0x14>)
 80061c0:	4804      	ldr	r0, [pc, #16]	; (80061d4 <USBD_FS_SerialStrDescriptor+0x18>)
 80061c2:	460a      	mov	r2, r1
 80061c4:	4621      	mov	r1, r4
 80061c6:	f7fe ff3f 	bl	8005048 <USBD_GetString>
}
 80061ca:	4620      	mov	r0, r4
 80061cc:	bd10      	pop	{r4, pc}
 80061ce:	bf00      	nop
 80061d0:	200030c0 	.word	0x200030c0
 80061d4:	08006374 	.word	0x08006374

080061d8 <USBD_FS_ConfigStrDescriptor>:
{
 80061d8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80061da:	4c04      	ldr	r4, [pc, #16]	; (80061ec <USBD_FS_ConfigStrDescriptor+0x14>)
 80061dc:	4804      	ldr	r0, [pc, #16]	; (80061f0 <USBD_FS_ConfigStrDescriptor+0x18>)
 80061de:	460a      	mov	r2, r1
 80061e0:	4621      	mov	r1, r4
 80061e2:	f7fe ff31 	bl	8005048 <USBD_GetString>
}
 80061e6:	4620      	mov	r0, r4
 80061e8:	bd10      	pop	{r4, pc}
 80061ea:	bf00      	nop
 80061ec:	200030c0 	.word	0x200030c0
 80061f0:	0800633c 	.word	0x0800633c

080061f4 <USBD_FS_InterfaceStrDescriptor>:
{
 80061f4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80061f6:	4c04      	ldr	r4, [pc, #16]	; (8006208 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80061f8:	4804      	ldr	r0, [pc, #16]	; (800620c <USBD_FS_InterfaceStrDescriptor+0x18>)
 80061fa:	460a      	mov	r2, r1
 80061fc:	4621      	mov	r1, r4
 80061fe:	f7fe ff23 	bl	8005048 <USBD_GetString>
}
 8006202:	4620      	mov	r0, r4
 8006204:	bd10      	pop	{r4, pc}
 8006206:	bf00      	nop
 8006208:	200030c0 	.word	0x200030c0
 800620c:	08006347 	.word	0x08006347

08006210 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006248 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006214:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006216:	e003      	b.n	8006220 <LoopCopyDataInit>

08006218 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006218:	4b0c      	ldr	r3, [pc, #48]	; (800624c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800621a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800621c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800621e:	3104      	adds	r1, #4

08006220 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006220:	480b      	ldr	r0, [pc, #44]	; (8006250 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006222:	4b0c      	ldr	r3, [pc, #48]	; (8006254 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006224:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006226:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006228:	d3f6      	bcc.n	8006218 <CopyDataInit>
	ldr	r2, =_sbss
 800622a:	4a0b      	ldr	r2, [pc, #44]	; (8006258 <LoopForever+0x12>)
	b	LoopFillZerobss
 800622c:	e002      	b.n	8006234 <LoopFillZerobss>

0800622e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800622e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006230:	f842 3b04 	str.w	r3, [r2], #4

08006234 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006234:	4b09      	ldr	r3, [pc, #36]	; (800625c <LoopForever+0x16>)
	cmp	r2, r3
 8006236:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006238:	d3f9      	bcc.n	800622e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800623a:	f7ff f9dd 	bl	80055f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800623e:	f000 f811 	bl	8006264 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006242:	f7ff f933 	bl	80054ac <main>

08006246 <LoopForever>:

LoopForever:
    b LoopForever
 8006246:	e7fe      	b.n	8006246 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006248:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 800624c:	08006394 	.word	0x08006394
	ldr	r0, =_sdata
 8006250:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006254:	200005c4 	.word	0x200005c4
	ldr	r2, =_sbss
 8006258:	200005c4 	.word	0x200005c4
	ldr	r3, = _ebss
 800625c:	200032c0 	.word	0x200032c0

08006260 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006260:	e7fe      	b.n	8006260 <ADC1_IRQHandler>
	...

08006264 <__libc_init_array>:
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	4e0d      	ldr	r6, [pc, #52]	; (800629c <__libc_init_array+0x38>)
 8006268:	4c0d      	ldr	r4, [pc, #52]	; (80062a0 <__libc_init_array+0x3c>)
 800626a:	1ba4      	subs	r4, r4, r6
 800626c:	10a4      	asrs	r4, r4, #2
 800626e:	2500      	movs	r5, #0
 8006270:	42a5      	cmp	r5, r4
 8006272:	d109      	bne.n	8006288 <__libc_init_array+0x24>
 8006274:	4e0b      	ldr	r6, [pc, #44]	; (80062a4 <__libc_init_array+0x40>)
 8006276:	4c0c      	ldr	r4, [pc, #48]	; (80062a8 <__libc_init_array+0x44>)
 8006278:	f000 f820 	bl	80062bc <_init>
 800627c:	1ba4      	subs	r4, r4, r6
 800627e:	10a4      	asrs	r4, r4, #2
 8006280:	2500      	movs	r5, #0
 8006282:	42a5      	cmp	r5, r4
 8006284:	d105      	bne.n	8006292 <__libc_init_array+0x2e>
 8006286:	bd70      	pop	{r4, r5, r6, pc}
 8006288:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800628c:	4798      	blx	r3
 800628e:	3501      	adds	r5, #1
 8006290:	e7ee      	b.n	8006270 <__libc_init_array+0xc>
 8006292:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006296:	4798      	blx	r3
 8006298:	3501      	adds	r5, #1
 800629a:	e7f2      	b.n	8006282 <__libc_init_array+0x1e>
 800629c:	0800638c 	.word	0x0800638c
 80062a0:	0800638c 	.word	0x0800638c
 80062a4:	0800638c 	.word	0x0800638c
 80062a8:	08006390 	.word	0x08006390

080062ac <memset>:
 80062ac:	4402      	add	r2, r0
 80062ae:	4603      	mov	r3, r0
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d100      	bne.n	80062b6 <memset+0xa>
 80062b4:	4770      	bx	lr
 80062b6:	f803 1b01 	strb.w	r1, [r3], #1
 80062ba:	e7f9      	b.n	80062b0 <memset+0x4>

080062bc <_init>:
 80062bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062be:	bf00      	nop
 80062c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062c2:	bc08      	pop	{r3}
 80062c4:	469e      	mov	lr, r3
 80062c6:	4770      	bx	lr

080062c8 <_fini>:
 80062c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ca:	bf00      	nop
 80062cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ce:	bc08      	pop	{r3}
 80062d0:	469e      	mov	lr, r3
 80062d2:	4770      	bx	lr
