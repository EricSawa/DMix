
DMX_Merger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b650  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800b7e4  0800b7e4  0001b7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b888  0800b888  0001b888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b890  0800b890  0001b890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b894  0800b894  0001b894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000005ec  20000000  0800b898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002d00  200005ec  0800be84  000205ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200032ec  0800be84  000232ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000205ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   000304c3  00000000  00000000  0002061c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005955  00000000  00000000  00050adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001d70  00000000  00000000  00056438  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ee8c  00000000  00000000  000581a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00008520  00000000  00000000  00067034  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0006f554  2**0
                  CONTENTS, READONLY
 16 .debug_ranges 00001a90  00000000  00000000  0006f5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000077e4  00000000  00000000  00071060  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200005ec 	.word	0x200005ec
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800b7cc 	.word	0x0800b7cc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200005f0 	.word	0x200005f0
 80001d0:	0800b7cc 	.word	0x0800b7cc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <app_dmx_init>:
static volatile bool cyclicFlag = false;
static volatile int16_t internalTimer = 0;
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_dmx_init(eal_task_Task *self){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	dmx_registerCallback(&dmx1, dmx1TransmitterCallback);
 80004ec:	4911      	ldr	r1, [pc, #68]	; (8000534 <app_dmx_init+0x50>)
 80004ee:	4812      	ldr	r0, [pc, #72]	; (8000538 <app_dmx_init+0x54>)
 80004f0:	f006 fea1 	bl	8007236 <dmx_registerCallback>
	dmx_init(&dmx1);
 80004f4:	4810      	ldr	r0, [pc, #64]	; (8000538 <app_dmx_init+0x54>)
 80004f6:	f006 fead 	bl	8007254 <dmx_init>
	dmx_txStart(&dmx1);
 80004fa:	480f      	ldr	r0, [pc, #60]	; (8000538 <app_dmx_init+0x54>)
 80004fc:	f006 ff80 	bl	8007400 <dmx_txStart>

	dmx_registerCallback(&dmx2, dmx2ReceiverCallback);
 8000500:	490e      	ldr	r1, [pc, #56]	; (800053c <app_dmx_init+0x58>)
 8000502:	480f      	ldr	r0, [pc, #60]	; (8000540 <app_dmx_init+0x5c>)
 8000504:	f006 fe97 	bl	8007236 <dmx_registerCallback>
	dmx_init(&dmx2);
 8000508:	480d      	ldr	r0, [pc, #52]	; (8000540 <app_dmx_init+0x5c>)
 800050a:	f006 fea3 	bl	8007254 <dmx_init>
	dmx_rxStart(&dmx2);
 800050e:	480c      	ldr	r0, [pc, #48]	; (8000540 <app_dmx_init+0x5c>)
 8000510:	f006 ff88 	bl	8007424 <dmx_rxStart>

	HAL_GPIO_WritePin(O_USART1_DIR_GPIO_Port, O_USART1_DIR_Pin, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051a:	480a      	ldr	r0, [pc, #40]	; (8000544 <app_dmx_init+0x60>)
 800051c:	f001 f8e2 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(O_USART2_DIR_GPIO_Port, O_USART2_DIR_Pin, GPIO_PIN_SET);
 8000520:	2201      	movs	r2, #1
 8000522:	2104      	movs	r1, #4
 8000524:	4807      	ldr	r0, [pc, #28]	; (8000544 <app_dmx_init+0x60>)
 8000526:	f001 f8dd 	bl	80016e4 <HAL_GPIO_WritePin>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	08000609 	.word	0x08000609
 8000538:	20000310 	.word	0x20000310
 800053c:	08000623 	.word	0x08000623
 8000540:	2000036c 	.word	0x2000036c
 8000544:	48000800 	.word	0x48000800

08000548 <app_dmx_process>:

void app_dmx_process(eal_task_Task *self){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	f083 0301 	eor.w	r3, r3, #1
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b00      	cmp	r3, #0
 800055c:	d111      	bne.n	8000582 <app_dmx_process+0x3a>
	if(!cyclicFlag) return;
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <app_dmx_process+0x48>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	b2db      	uxtb	r3, r3
 8000564:	f083 0301 	eor.w	r3, r3, #1
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2b00      	cmp	r3, #0
 800056c:	d10b      	bne.n	8000586 <app_dmx_process+0x3e>
	/*Do everything what you want to do*/
	dmx_loop(&dmx1);
 800056e:	4809      	ldr	r0, [pc, #36]	; (8000594 <app_dmx_process+0x4c>)
 8000570:	f006 feba 	bl	80072e8 <dmx_loop>
	dmx_loop(&dmx2);
 8000574:	4808      	ldr	r0, [pc, #32]	; (8000598 <app_dmx_process+0x50>)
 8000576:	f006 feb7 	bl	80072e8 <dmx_loop>
	cyclicFlag = false;
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <app_dmx_process+0x48>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
 8000580:	e002      	b.n	8000588 <app_dmx_process+0x40>
	if(!self->enable) return;
 8000582:	bf00      	nop
 8000584:	e000      	b.n	8000588 <app_dmx_process+0x40>
	if(!cyclicFlag) return;
 8000586:	bf00      	nop
}
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000a08 	.word	0x20000a08
 8000594:	20000310 	.word	0x20000310
 8000598:	2000036c 	.word	0x2000036c

0800059c <app_dmx_cyclic1ms>:

void app_dmx_cyclic1ms(eal_task_Task *self, bool stat){
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <app_dmx_cyclic1ms+0x20>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	701a      	strb	r2, [r3, #0]
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000a08 	.word	0x20000a08

080005c0 <app_dmx_receiveMsg>:

void app_dmx_receiveMsg(eal_task_Task *self, msg_Message *message){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
	if(message->type == app_cfg_DMX_MSG){
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	791b      	ldrb	r3, [r3, #4]
 80005ce:	2b44      	cmp	r3, #68	; 0x44
 80005d0:	d113      	bne.n	80005fa <app_dmx_receiveMsg+0x3a>
		/*Action parsing*/
		if(msg_isAction(message)){
 80005d2:	6838      	ldr	r0, [r7, #0]
 80005d4:	f007 fada 	bl	8007b8c <msg_isAction>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d00d      	beq.n	80005fa <app_dmx_receiveMsg+0x3a>
			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005e6:	81fb      	strh	r3, [r7, #14]
			//TODO: Add real behavior
			dmx1.universe[idx] = (uint8_t)message->value;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <app_dmx_receiveMsg+0x44>)
 80005ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005ec:	89fb      	ldrh	r3, [r7, #14]
 80005ee:	4413      	add	r3, r2
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80005f6:	b2d2      	uxtb	r2, r2
 80005f8:	701a      	strb	r2, [r3, #0]
		}
		/*Event parsing*/
		}else{

		}
}
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000310 	.word	0x20000310

08000608 <dmx1TransmitterCallback>:

/* Callback's ---------------------------------------------------------------------*/
bool dmx1TransmitterCallback(dmx_cfg_Instance *dmx){
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	bool state = true;
 8000610:	2301      	movs	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
	return state;
 8000614:	7bfb      	ldrb	r3, [r7, #15]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <dmx2ReceiverCallback>:

bool dmx2ReceiverCallback(dmx_cfg_Instance *dmx){
 8000622:	b480      	push	{r7}
 8000624:	b085      	sub	sp, #20
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
	bool state = true;
 800062a:	2301      	movs	r3, #1
 800062c:	73fb      	strb	r3, [r7, #15]
	return state;
 800062e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <USART1_IRQHandler>:
/* IRQs ---------------------------------------------------------------------*/
void USART1_IRQHandler(void){
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	dmx_irqRxInterfaceHandler(&dmx2);
 8000640:	4802      	ldr	r0, [pc, #8]	; (800064c <USART1_IRQHandler+0x10>)
 8000642:	f006 ffe3 	bl	800760c <dmx_irqRxInterfaceHandler>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2000036c 	.word	0x2000036c

08000650 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	dmx_irqTxInterfaceHandler(&dmx1);
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <USART2_IRQHandler+0x10>)
 8000656:	f006 ff64 	bl	8007522 <dmx_irqTxInterfaceHandler>
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000310 	.word	0x20000310

08000664 <app_dmx_preset_init>:
static volatile bool cyclicFlag = false;
static volatile int16_t internalTimer = 0;
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_dmx_preset_init(eal_task_Task *self){
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	e058      	b.n	8000724 <app_dmx_preset_init+0xc0>
		myPresets[i].relTime_ms = 0;
 8000672:	4a30      	ldr	r2, [pc, #192]	; (8000734 <app_dmx_preset_init+0xd0>)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	21c4      	movs	r1, #196	; 0xc4
 8000678:	fb01 f303 	mul.w	r3, r1, r3
 800067c:	4413      	add	r3, r2
 800067e:	3304      	adds	r3, #4
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
		myPresets[i].trigger = false;
 8000684:	4a2b      	ldr	r2, [pc, #172]	; (8000734 <app_dmx_preset_init+0xd0>)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	21c4      	movs	r1, #196	; 0xc4
 800068a:	fb01 f303 	mul.w	r3, r1, r3
 800068e:	4413      	add	r3, r2
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
		myPresets[i].transitionDoneCnt = 0;
 8000694:	4a27      	ldr	r2, [pc, #156]	; (8000734 <app_dmx_preset_init+0xd0>)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	21c4      	movs	r1, #196	; 0xc4
 800069a:	fb01 f303 	mul.w	r3, r1, r3
 800069e:	4413      	add	r3, r2
 80006a0:	3308      	adds	r3, #8
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
		myPresets[i].transitionEnableSize = 0;
 80006a6:	4a23      	ldr	r2, [pc, #140]	; (8000734 <app_dmx_preset_init+0xd0>)
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	21c4      	movs	r1, #196	; 0xc4
 80006ac:	fb01 f303 	mul.w	r3, r1, r3
 80006b0:	4413      	add	r3, r2
 80006b2:	330c      	adds	r3, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
		memset(myPresets[i].presetTransitionStatus, 0, sizeof(myPresets[i].presetTransitionStatus));
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	22c4      	movs	r2, #196	; 0xc4
 80006bc:	fb02 f303 	mul.w	r3, r2, r3
 80006c0:	33b0      	adds	r3, #176	; 0xb0
 80006c2:	4a1c      	ldr	r2, [pc, #112]	; (8000734 <app_dmx_preset_init+0xd0>)
 80006c4:	4413      	add	r3, r2
 80006c6:	2214      	movs	r2, #20
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f00b f876 	bl	800b7bc <memset>
		for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	e020      	b.n	8000718 <app_dmx_preset_init+0xb4>
			if(myPresets[i].presetTransitionSettings[j].enable) ++myPresets[i].transitionEnableSize;
 80006d6:	4917      	ldr	r1, [pc, #92]	; (8000734 <app_dmx_preset_init+0xd0>)
 80006d8:	68ba      	ldr	r2, [r7, #8]
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	0112      	lsls	r2, r2, #4
 80006de:	20c4      	movs	r0, #196	; 0xc4
 80006e0:	fb00 f303 	mul.w	r3, r0, r3
 80006e4:	4413      	add	r3, r2
 80006e6:	440b      	add	r3, r1
 80006e8:	331d      	adds	r3, #29
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d010      	beq.n	8000712 <app_dmx_preset_init+0xae>
 80006f0:	4a10      	ldr	r2, [pc, #64]	; (8000734 <app_dmx_preset_init+0xd0>)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	21c4      	movs	r1, #196	; 0xc4
 80006f6:	fb01 f303 	mul.w	r3, r1, r3
 80006fa:	4413      	add	r3, r2
 80006fc:	330c      	adds	r3, #12
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	1c5a      	adds	r2, r3, #1
 8000702:	490c      	ldr	r1, [pc, #48]	; (8000734 <app_dmx_preset_init+0xd0>)
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	20c4      	movs	r0, #196	; 0xc4
 8000708:	fb00 f303 	mul.w	r3, r0, r3
 800070c:	440b      	add	r3, r1
 800070e:	330c      	adds	r3, #12
 8000710:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	3301      	adds	r3, #1
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	2b09      	cmp	r3, #9
 800071c:	dddb      	ble.n	80006d6 <app_dmx_preset_init+0x72>
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3301      	adds	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2b03      	cmp	r3, #3
 8000728:	dda3      	ble.n	8000672 <app_dmx_preset_init+0xe>
		}
	}
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000000 	.word	0x20000000

08000738 <app_dmx_preset_process>:

void app_dmx_preset_process(eal_task_Task *self){
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	f083 0301 	eor.w	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	f040 80cc 	bne.w	80008e8 <app_dmx_preset_process+0x1b0>
	if(!cyclicFlag) return;
 8000750:	4b68      	ldr	r3, [pc, #416]	; (80008f4 <app_dmx_preset_process+0x1bc>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	f083 0301 	eor.w	r3, r3, #1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	f040 80c5 	bne.w	80008ec <app_dmx_preset_process+0x1b4>
	/*Do everything what you want to do*/
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	e0b7      	b.n	80008d8 <app_dmx_preset_process+0x1a0>
		if(myPresets[i].trigger){	/*Preset is triggered and can be executed*/
 8000768:	4a63      	ldr	r2, [pc, #396]	; (80008f8 <app_dmx_preset_process+0x1c0>)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	21c4      	movs	r1, #196	; 0xc4
 800076e:	fb01 f303 	mul.w	r3, r1, r3
 8000772:	4413      	add	r3, r2
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	f000 80ab 	beq.w	80008d2 <app_dmx_preset_process+0x19a>
			++myPresets[i].relTime_ms;
 800077c:	4a5e      	ldr	r2, [pc, #376]	; (80008f8 <app_dmx_preset_process+0x1c0>)
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	21c4      	movs	r1, #196	; 0xc4
 8000782:	fb01 f303 	mul.w	r3, r1, r3
 8000786:	4413      	add	r3, r2
 8000788:	3304      	adds	r3, #4
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	1c5a      	adds	r2, r3, #1
 800078e:	495a      	ldr	r1, [pc, #360]	; (80008f8 <app_dmx_preset_process+0x1c0>)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	20c4      	movs	r0, #196	; 0xc4
 8000794:	fb00 f303 	mul.w	r3, r0, r3
 8000798:	440b      	add	r3, r1
 800079a:	3304      	adds	r3, #4
 800079c:	601a      	str	r2, [r3, #0]
			for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	e05b      	b.n	800085c <app_dmx_preset_process+0x124>
				if(myPresets[i].presetTransitionSettings[j].enable){
 80007a4:	4954      	ldr	r1, [pc, #336]	; (80008f8 <app_dmx_preset_process+0x1c0>)
 80007a6:	68ba      	ldr	r2, [r7, #8]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	0112      	lsls	r2, r2, #4
 80007ac:	20c4      	movs	r0, #196	; 0xc4
 80007ae:	fb00 f303 	mul.w	r3, r0, r3
 80007b2:	4413      	add	r3, r2
 80007b4:	440b      	add	r3, r1
 80007b6:	331d      	adds	r3, #29
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d04b      	beq.n	8000856 <app_dmx_preset_process+0x11e>
					if(myPresets[i].presetTransitionStatus[j].transStep == app_dmx_preset_cfg_TRANS_STEP_EXE) performNextTransitionStep(self, i, j);
 80007be:	494e      	ldr	r1, [pc, #312]	; (80008f8 <app_dmx_preset_process+0x1c0>)
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2262      	movs	r2, #98	; 0x62
 80007c4:	fb02 f203 	mul.w	r2, r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4413      	add	r3, r2
 80007cc:	3358      	adds	r3, #88	; 0x58
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	440b      	add	r3, r1
 80007d2:	785b      	ldrb	r3, [r3, #1]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d108      	bne.n	80007ea <app_dmx_preset_process+0xb2>
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	68ba      	ldr	r2, [r7, #8]
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	4619      	mov	r1, r3
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f000 f94e 	bl	8000a84 <performNextTransitionStep>
 80007e8:	e035      	b.n	8000856 <app_dmx_preset_process+0x11e>
					else if((myPresets[i].relTime_ms >= myPresets[i].presetTransitionSettings[j].transDelay_ms) && (myPresets[i].presetTransitionStatus[j].transStep == app_dmx_preset_cfg_TRANS_STEP_NONE)){
 80007ea:	4a43      	ldr	r2, [pc, #268]	; (80008f8 <app_dmx_preset_process+0x1c0>)
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	21c4      	movs	r1, #196	; 0xc4
 80007f0:	fb01 f303 	mul.w	r3, r1, r3
 80007f4:	4413      	add	r3, r2
 80007f6:	3304      	adds	r3, #4
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	483f      	ldr	r0, [pc, #252]	; (80008f8 <app_dmx_preset_process+0x1c0>)
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	0109      	lsls	r1, r1, #4
 8000802:	24c4      	movs	r4, #196	; 0xc4
 8000804:	fb04 f303 	mul.w	r3, r4, r3
 8000808:	440b      	add	r3, r1
 800080a:	4403      	add	r3, r0
 800080c:	3318      	adds	r3, #24
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	d320      	bcc.n	8000856 <app_dmx_preset_process+0x11e>
 8000814:	4938      	ldr	r1, [pc, #224]	; (80008f8 <app_dmx_preset_process+0x1c0>)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	2262      	movs	r2, #98	; 0x62
 800081a:	fb02 f203 	mul.w	r2, r2, r3
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	4413      	add	r3, r2
 8000822:	3358      	adds	r3, #88	; 0x58
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	440b      	add	r3, r1
 8000828:	785b      	ldrb	r3, [r3, #1]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d113      	bne.n	8000856 <app_dmx_preset_process+0x11e>
						myPresets[i].presetTransitionStatus[j].transStep = app_dmx_preset_cfg_TRANS_STEP_EXE;
 800082e:	4932      	ldr	r1, [pc, #200]	; (80008f8 <app_dmx_preset_process+0x1c0>)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2262      	movs	r2, #98	; 0x62
 8000834:	fb02 f203 	mul.w	r2, r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	4413      	add	r3, r2
 800083c:	3358      	adds	r3, #88	; 0x58
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	440b      	add	r3, r1
 8000842:	2201      	movs	r2, #1
 8000844:	705a      	strb	r2, [r3, #1]
						performNextTransitionStep(self, i, j);
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	b2d2      	uxtb	r2, r2
 800084e:	4619      	mov	r1, r3
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f000 f917 	bl	8000a84 <performNextTransitionStep>
			for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	3301      	adds	r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	2b09      	cmp	r3, #9
 8000860:	dda0      	ble.n	80007a4 <app_dmx_preset_process+0x6c>
					}
				}
			}
			if(myPresets[i].transitionDoneCnt >= myPresets[i].transitionEnableSize){	/*All transitions are performed*/
 8000862:	4a25      	ldr	r2, [pc, #148]	; (80008f8 <app_dmx_preset_process+0x1c0>)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	21c4      	movs	r1, #196	; 0xc4
 8000868:	fb01 f303 	mul.w	r3, r1, r3
 800086c:	4413      	add	r3, r2
 800086e:	3308      	adds	r3, #8
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	4921      	ldr	r1, [pc, #132]	; (80008f8 <app_dmx_preset_process+0x1c0>)
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	20c4      	movs	r0, #196	; 0xc4
 8000878:	fb00 f303 	mul.w	r3, r0, r3
 800087c:	440b      	add	r3, r1
 800087e:	330c      	adds	r3, #12
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	429a      	cmp	r2, r3
 8000884:	d325      	bcc.n	80008d2 <app_dmx_preset_process+0x19a>
				myPresets[i].transitionDoneCnt = 0;
 8000886:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <app_dmx_preset_process+0x1c0>)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	21c4      	movs	r1, #196	; 0xc4
 800088c:	fb01 f303 	mul.w	r3, r1, r3
 8000890:	4413      	add	r3, r2
 8000892:	3308      	adds	r3, #8
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
				myPresets[i].trigger = false;
 8000898:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <app_dmx_preset_process+0x1c0>)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	21c4      	movs	r1, #196	; 0xc4
 800089e:	fb01 f303 	mul.w	r3, r1, r3
 80008a2:	4413      	add	r3, r2
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
				myPresets[i].relTime_ms = 0;
 80008a8:	4a13      	ldr	r2, [pc, #76]	; (80008f8 <app_dmx_preset_process+0x1c0>)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	21c4      	movs	r1, #196	; 0xc4
 80008ae:	fb01 f303 	mul.w	r3, r1, r3
 80008b2:	4413      	add	r3, r2
 80008b4:	3304      	adds	r3, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
				memset(myPresets[i].presetTransitionStatus, 0, sizeof(myPresets[i].presetTransitionStatus));
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	22c4      	movs	r2, #196	; 0xc4
 80008be:	fb02 f303 	mul.w	r3, r2, r3
 80008c2:	33b0      	adds	r3, #176	; 0xb0
 80008c4:	4a0c      	ldr	r2, [pc, #48]	; (80008f8 <app_dmx_preset_process+0x1c0>)
 80008c6:	4413      	add	r3, r2
 80008c8:	2214      	movs	r2, #20
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f00a ff75 	bl	800b7bc <memset>
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	3301      	adds	r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b03      	cmp	r3, #3
 80008dc:	f77f af44 	ble.w	8000768 <app_dmx_preset_process+0x30>
			}
		}
	}
	/*End of everything you want to do*/
	cyclicFlag = false;
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <app_dmx_preset_process+0x1bc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
 80008e6:	e002      	b.n	80008ee <app_dmx_preset_process+0x1b6>
	if(!self->enable) return;
 80008e8:	bf00      	nop
 80008ea:	e000      	b.n	80008ee <app_dmx_preset_process+0x1b6>
	if(!cyclicFlag) return;
 80008ec:	bf00      	nop
}
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd90      	pop	{r4, r7, pc}
 80008f4:	20000a09 	.word	0x20000a09
 80008f8:	20000000 	.word	0x20000000

080008fc <app_dmx_preset_cyclic1ms>:

void app_dmx_preset_cyclic1ms(eal_task_Task *self, bool stat){
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	460b      	mov	r3, r1
 8000906:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <app_dmx_preset_cyclic1ms+0x20>)
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000a09 	.word	0x20000a09

08000920 <app_dmx_preset_receiveMsg>:

void app_dmx_preset_receiveMsg(eal_task_Task *self, msg_Message *message){
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
	if(message->type == app_cfg_DMX_PRESET_MSG){
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	791b      	ldrb	r3, [r3, #4]
 800092e:	2b50      	cmp	r3, #80	; 0x50
 8000930:	f040 80a2 	bne.w	8000a78 <app_dmx_preset_receiveMsg+0x158>
		/*Action parsing*/
		if(msg_isAction(message)){
 8000934:	6838      	ldr	r0, [r7, #0]
 8000936:	f007 f929 	bl	8007b8c <msg_isAction>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	f000 809b 	beq.w	8000a78 <app_dmx_preset_receiveMsg+0x158>
			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800094a:	83fb      	strh	r3, [r7, #30]
			if(APP_CFG_IS_INDEX_IN_RANGE(idx, app_cfg_dmx_preset_TRIGGER_PRESET_OFFSET_IDX, app_cfg_dmx_preset_TRIGGER_PRESET4_IDX+1)){
 800094c:	8bfb      	ldrh	r3, [r7, #30]
 800094e:	2b04      	cmp	r3, #4
 8000950:	f200 8092 	bhi.w	8000a78 <app_dmx_preset_receiveMsg+0x158>
				if((message->value == app_cfg_dmx_preset_TRIGGER_ENABLE) && (myPresets[idx].trigger == false)) {	/*Can be triggered only once*/
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800095a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800095e:	4293      	cmp	r3, r2
 8000960:	d14b      	bne.n	80009fa <app_dmx_preset_receiveMsg+0xda>
 8000962:	8bfb      	ldrh	r3, [r7, #30]
 8000964:	4a46      	ldr	r2, [pc, #280]	; (8000a80 <app_dmx_preset_receiveMsg+0x160>)
 8000966:	21c4      	movs	r1, #196	; 0xc4
 8000968:	fb01 f303 	mul.w	r3, r1, r3
 800096c:	4413      	add	r3, r2
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	f083 0301 	eor.w	r3, r3, #1
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b00      	cmp	r3, #0
 8000978:	d03f      	beq.n	80009fa <app_dmx_preset_receiveMsg+0xda>
					myPresets[idx].trigger = true;
 800097a:	8bfb      	ldrh	r3, [r7, #30]
 800097c:	4a40      	ldr	r2, [pc, #256]	; (8000a80 <app_dmx_preset_receiveMsg+0x160>)
 800097e:	21c4      	movs	r1, #196	; 0xc4
 8000980:	fb01 f303 	mul.w	r3, r1, r3
 8000984:	4413      	add	r3, r2
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
					myPresets[idx].relTime_ms = 0;
 800098a:	8bfb      	ldrh	r3, [r7, #30]
 800098c:	4a3c      	ldr	r2, [pc, #240]	; (8000a80 <app_dmx_preset_receiveMsg+0x160>)
 800098e:	21c4      	movs	r1, #196	; 0xc4
 8000990:	fb01 f303 	mul.w	r3, r1, r3
 8000994:	4413      	add	r3, r2
 8000996:	3304      	adds	r3, #4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
					myPresets[idx].transitionDoneCnt = 0;
 800099c:	8bfb      	ldrh	r3, [r7, #30]
 800099e:	4a38      	ldr	r2, [pc, #224]	; (8000a80 <app_dmx_preset_receiveMsg+0x160>)
 80009a0:	21c4      	movs	r1, #196	; 0xc4
 80009a2:	fb01 f303 	mul.w	r3, r1, r3
 80009a6:	4413      	add	r3, r2
 80009a8:	3308      	adds	r3, #8
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
					memset(myPresets[idx].presetTransitionStatus, 0, sizeof(myPresets[idx].presetTransitionStatus));
 80009ae:	8bfb      	ldrh	r3, [r7, #30]
 80009b0:	22c4      	movs	r2, #196	; 0xc4
 80009b2:	fb02 f303 	mul.w	r3, r2, r3
 80009b6:	33b0      	adds	r3, #176	; 0xb0
 80009b8:	4a31      	ldr	r2, [pc, #196]	; (8000a80 <app_dmx_preset_receiveMsg+0x160>)
 80009ba:	4413      	add	r3, r2
 80009bc:	2214      	movs	r2, #20
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f00a fefb 	bl	800b7bc <memset>
					if(self->sendMsg != NULL){
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d054      	beq.n	8000a78 <app_dmx_preset_receiveMsg+0x158>
						msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_EVENT(idx), app_cfg_dmx_preset_TRIGGER_ENABLE, 0, 0);
 80009ce:	8bfb      	ldrh	r3, [r7, #30]
 80009d0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	82bb      	strh	r3, [r7, #20]
 80009d8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80009dc:	82fb      	strh	r3, [r7, #22]
 80009de:	2350      	movs	r3, #80	; 0x50
 80009e0:	763b      	strb	r3, [r7, #24]
 80009e2:	2300      	movs	r3, #0
 80009e4:	767b      	strb	r3, [r7, #25]
 80009e6:	2300      	movs	r3, #0
 80009e8:	837b      	strh	r3, [r7, #26]
						self->sendMsg(self, &newMessage);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f107 0214 	add.w	r2, r7, #20
 80009f2:	4611      	mov	r1, r2
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	4798      	blx	r3
					if(self->sendMsg != NULL){
 80009f8:	e03e      	b.n	8000a78 <app_dmx_preset_receiveMsg+0x158>
					}
				}else{
					myPresets[idx].trigger = false;
 80009fa:	8bfb      	ldrh	r3, [r7, #30]
 80009fc:	4a20      	ldr	r2, [pc, #128]	; (8000a80 <app_dmx_preset_receiveMsg+0x160>)
 80009fe:	21c4      	movs	r1, #196	; 0xc4
 8000a00:	fb01 f303 	mul.w	r3, r1, r3
 8000a04:	4413      	add	r3, r2
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
					myPresets[idx].relTime_ms = 0;
 8000a0a:	8bfb      	ldrh	r3, [r7, #30]
 8000a0c:	4a1c      	ldr	r2, [pc, #112]	; (8000a80 <app_dmx_preset_receiveMsg+0x160>)
 8000a0e:	21c4      	movs	r1, #196	; 0xc4
 8000a10:	fb01 f303 	mul.w	r3, r1, r3
 8000a14:	4413      	add	r3, r2
 8000a16:	3304      	adds	r3, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
					myPresets[idx].transitionDoneCnt = 0;
 8000a1c:	8bfb      	ldrh	r3, [r7, #30]
 8000a1e:	4a18      	ldr	r2, [pc, #96]	; (8000a80 <app_dmx_preset_receiveMsg+0x160>)
 8000a20:	21c4      	movs	r1, #196	; 0xc4
 8000a22:	fb01 f303 	mul.w	r3, r1, r3
 8000a26:	4413      	add	r3, r2
 8000a28:	3308      	adds	r3, #8
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
					memset(myPresets[idx].presetTransitionStatus, 0, sizeof(myPresets[idx].presetTransitionStatus));
 8000a2e:	8bfb      	ldrh	r3, [r7, #30]
 8000a30:	22c4      	movs	r2, #196	; 0xc4
 8000a32:	fb02 f303 	mul.w	r3, r2, r3
 8000a36:	33b0      	adds	r3, #176	; 0xb0
 8000a38:	4a11      	ldr	r2, [pc, #68]	; (8000a80 <app_dmx_preset_receiveMsg+0x160>)
 8000a3a:	4413      	add	r3, r2
 8000a3c:	2214      	movs	r2, #20
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f00a febb 	bl	800b7bc <memset>
					if(self->sendMsg != NULL){
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d014      	beq.n	8000a78 <app_dmx_preset_receiveMsg+0x158>
						msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_EVENT(idx), app_cfg_dmx_preset_TRIGGER_DISABLE, 0, 0);
 8000a4e:	8bfb      	ldrh	r3, [r7, #30]
 8000a50:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	81bb      	strh	r3, [r7, #12]
 8000a58:	2300      	movs	r3, #0
 8000a5a:	81fb      	strh	r3, [r7, #14]
 8000a5c:	2350      	movs	r3, #80	; 0x50
 8000a5e:	743b      	strb	r3, [r7, #16]
 8000a60:	2300      	movs	r3, #0
 8000a62:	747b      	strb	r3, [r7, #17]
 8000a64:	2300      	movs	r3, #0
 8000a66:	827b      	strh	r3, [r7, #18]
						self->sendMsg(self, &newMessage);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	f107 020c 	add.w	r2, r7, #12
 8000a70:	4611      	mov	r1, r2
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	4798      	blx	r3
		/*Event parsing*/
		}else{

		}
	}
}
 8000a76:	e7ff      	b.n	8000a78 <app_dmx_preset_receiveMsg+0x158>
 8000a78:	bf00      	nop
 8000a7a:	3720      	adds	r7, #32
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000000 	.word	0x20000000

08000a84 <performNextTransitionStep>:

/*Helper*/
static void performNextTransitionStep(eal_task_Task *self, uint8_t preset, uint8_t transition){
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b08b      	sub	sp, #44	; 0x2c
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	72fb      	strb	r3, [r7, #11]
 8000a90:	4613      	mov	r3, r2
 8000a92:	72bb      	strb	r3, [r7, #10]
	float actualTransitionTime = (float)(myPresets[preset].relTime_ms - myPresets[preset].presetTransitionSettings[transition].transDelay_ms);
 8000a94:	7afb      	ldrb	r3, [r7, #11]
 8000a96:	4a9d      	ldr	r2, [pc, #628]	; (8000d0c <performNextTransitionStep+0x288>)
 8000a98:	21c4      	movs	r1, #196	; 0xc4
 8000a9a:	fb01 f303 	mul.w	r3, r1, r3
 8000a9e:	4413      	add	r3, r2
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	7afb      	ldrb	r3, [r7, #11]
 8000aa6:	7ab9      	ldrb	r1, [r7, #10]
 8000aa8:	4898      	ldr	r0, [pc, #608]	; (8000d0c <performNextTransitionStep+0x288>)
 8000aaa:	0109      	lsls	r1, r1, #4
 8000aac:	24c4      	movs	r4, #196	; 0xc4
 8000aae:	fb04 f303 	mul.w	r3, r4, r3
 8000ab2:	440b      	add	r3, r1
 8000ab4:	4403      	add	r3, r0
 8000ab6:	3318      	adds	r3, #24
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	ee07 3a90 	vmov	s15, r3
 8000ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ac4:	edc7 7a08 	vstr	s15, [r7, #32]
	uint16_t newVal = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(myPresets[preset].presetTransitionSettings[transition].transTime_ms == 0){
 8000acc:	7afb      	ldrb	r3, [r7, #11]
 8000ace:	7aba      	ldrb	r2, [r7, #10]
 8000ad0:	498e      	ldr	r1, [pc, #568]	; (8000d0c <performNextTransitionStep+0x288>)
 8000ad2:	3201      	adds	r2, #1
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	20c4      	movs	r0, #196	; 0xc4
 8000ad8:	fb00 f303 	mul.w	r3, r0, r3
 8000adc:	4413      	add	r3, r2
 8000ade:	440b      	add	r3, r1
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d129      	bne.n	8000b3c <performNextTransitionStep+0xb8>
		newVal = myPresets[preset].presetTransitionSettings[transition].dmxEndVal;
 8000ae8:	7afb      	ldrb	r3, [r7, #11]
 8000aea:	7aba      	ldrb	r2, [r7, #10]
 8000aec:	4987      	ldr	r1, [pc, #540]	; (8000d0c <performNextTransitionStep+0x288>)
 8000aee:	3201      	adds	r2, #1
 8000af0:	0112      	lsls	r2, r2, #4
 8000af2:	20c4      	movs	r0, #196	; 0xc4
 8000af4:	fb00 f303 	mul.w	r3, r0, r3
 8000af8:	4413      	add	r3, r2
 8000afa:	440b      	add	r3, r1
 8000afc:	3303      	adds	r3, #3
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	84fb      	strh	r3, [r7, #38]	; 0x26
		++myPresets[preset].transitionDoneCnt;
 8000b02:	7afb      	ldrb	r3, [r7, #11]
 8000b04:	4981      	ldr	r1, [pc, #516]	; (8000d0c <performNextTransitionStep+0x288>)
 8000b06:	22c4      	movs	r2, #196	; 0xc4
 8000b08:	fb02 f203 	mul.w	r2, r2, r3
 8000b0c:	440a      	add	r2, r1
 8000b0e:	3208      	adds	r2, #8
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	3201      	adds	r2, #1
 8000b14:	497d      	ldr	r1, [pc, #500]	; (8000d0c <performNextTransitionStep+0x288>)
 8000b16:	20c4      	movs	r0, #196	; 0xc4
 8000b18:	fb00 f303 	mul.w	r3, r0, r3
 8000b1c:	440b      	add	r3, r1
 8000b1e:	3308      	adds	r3, #8
 8000b20:	601a      	str	r2, [r3, #0]
		myPresets[preset].presetTransitionStatus[transition].transStep = app_dmx_preset_cfg_TRANS_STEP_DONE;
 8000b22:	7afa      	ldrb	r2, [r7, #11]
 8000b24:	7abb      	ldrb	r3, [r7, #10]
 8000b26:	4979      	ldr	r1, [pc, #484]	; (8000d0c <performNextTransitionStep+0x288>)
 8000b28:	2062      	movs	r0, #98	; 0x62
 8000b2a:	fb00 f202 	mul.w	r2, r0, r2
 8000b2e:	4413      	add	r3, r2
 8000b30:	3358      	adds	r3, #88	; 0x58
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	440b      	add	r3, r1
 8000b36:	2202      	movs	r2, #2
 8000b38:	705a      	strb	r2, [r3, #1]
 8000b3a:	e090      	b.n	8000c5e <performNextTransitionStep+0x1da>
	}else{
		//TODO: Perform different ramps
		float diff = (float)((float)myPresets[preset].presetTransitionSettings[transition].dmxEndVal - (float)myPresets[preset].presetTransitionSettings[transition].dmxStartVal);
 8000b3c:	7afb      	ldrb	r3, [r7, #11]
 8000b3e:	7aba      	ldrb	r2, [r7, #10]
 8000b40:	4972      	ldr	r1, [pc, #456]	; (8000d0c <performNextTransitionStep+0x288>)
 8000b42:	3201      	adds	r2, #1
 8000b44:	0112      	lsls	r2, r2, #4
 8000b46:	20c4      	movs	r0, #196	; 0xc4
 8000b48:	fb00 f303 	mul.w	r3, r0, r3
 8000b4c:	4413      	add	r3, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	3303      	adds	r3, #3
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	ee07 3a90 	vmov	s15, r3
 8000b58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b5c:	7afb      	ldrb	r3, [r7, #11]
 8000b5e:	7aba      	ldrb	r2, [r7, #10]
 8000b60:	496a      	ldr	r1, [pc, #424]	; (8000d0c <performNextTransitionStep+0x288>)
 8000b62:	3201      	adds	r2, #1
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	20c4      	movs	r0, #196	; 0xc4
 8000b68:	fb00 f303 	mul.w	r3, r0, r3
 8000b6c:	4413      	add	r3, r2
 8000b6e:	440b      	add	r3, r1
 8000b70:	3302      	adds	r3, #2
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	ee07 3a90 	vmov	s15, r3
 8000b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b80:	edc7 7a07 	vstr	s15, [r7, #28]
		float actualVal = (diff/((float)myPresets[preset].presetTransitionSettings[transition].transTime_ms)*actualTransitionTime) + (float)myPresets[preset].presetTransitionSettings[transition].dmxStartVal;
 8000b84:	7afb      	ldrb	r3, [r7, #11]
 8000b86:	7aba      	ldrb	r2, [r7, #10]
 8000b88:	4960      	ldr	r1, [pc, #384]	; (8000d0c <performNextTransitionStep+0x288>)
 8000b8a:	3201      	adds	r2, #1
 8000b8c:	0112      	lsls	r2, r2, #4
 8000b8e:	20c4      	movs	r0, #196	; 0xc4
 8000b90:	fb00 f303 	mul.w	r3, r0, r3
 8000b94:	4413      	add	r3, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	3304      	adds	r3, #4
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	ee07 3a90 	vmov	s15, r3
 8000ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ba4:	edd7 6a07 	vldr	s13, [r7, #28]
 8000ba8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000bac:	edd7 7a08 	vldr	s15, [r7, #32]
 8000bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bb4:	7afb      	ldrb	r3, [r7, #11]
 8000bb6:	7aba      	ldrb	r2, [r7, #10]
 8000bb8:	4954      	ldr	r1, [pc, #336]	; (8000d0c <performNextTransitionStep+0x288>)
 8000bba:	3201      	adds	r2, #1
 8000bbc:	0112      	lsls	r2, r2, #4
 8000bbe:	20c4      	movs	r0, #196	; 0xc4
 8000bc0:	fb00 f303 	mul.w	r3, r0, r3
 8000bc4:	4413      	add	r3, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	3302      	adds	r3, #2
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	ee07 3a90 	vmov	s15, r3
 8000bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd8:	edc7 7a06 	vstr	s15, [r7, #24]
		newVal = (uint16_t)actualVal;
 8000bdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000be4:	edc7 7a01 	vstr	s15, [r7, #4]
 8000be8:	88bb      	ldrh	r3, [r7, #4]
 8000bea:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(newVal >= myPresets[preset].presetTransitionSettings[transition].dmxEndVal){
 8000bec:	7afb      	ldrb	r3, [r7, #11]
 8000bee:	7aba      	ldrb	r2, [r7, #10]
 8000bf0:	4946      	ldr	r1, [pc, #280]	; (8000d0c <performNextTransitionStep+0x288>)
 8000bf2:	3201      	adds	r2, #1
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	20c4      	movs	r0, #196	; 0xc4
 8000bf8:	fb00 f303 	mul.w	r3, r0, r3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	440b      	add	r3, r1
 8000c00:	3303      	adds	r3, #3
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d328      	bcc.n	8000c5e <performNextTransitionStep+0x1da>
			newVal = myPresets[preset].presetTransitionSettings[transition].dmxEndVal;
 8000c0c:	7afb      	ldrb	r3, [r7, #11]
 8000c0e:	7aba      	ldrb	r2, [r7, #10]
 8000c10:	493e      	ldr	r1, [pc, #248]	; (8000d0c <performNextTransitionStep+0x288>)
 8000c12:	3201      	adds	r2, #1
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	20c4      	movs	r0, #196	; 0xc4
 8000c18:	fb00 f303 	mul.w	r3, r0, r3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	3303      	adds	r3, #3
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	84fb      	strh	r3, [r7, #38]	; 0x26
			++myPresets[preset].transitionDoneCnt;
 8000c26:	7afb      	ldrb	r3, [r7, #11]
 8000c28:	4938      	ldr	r1, [pc, #224]	; (8000d0c <performNextTransitionStep+0x288>)
 8000c2a:	22c4      	movs	r2, #196	; 0xc4
 8000c2c:	fb02 f203 	mul.w	r2, r2, r3
 8000c30:	440a      	add	r2, r1
 8000c32:	3208      	adds	r2, #8
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	3201      	adds	r2, #1
 8000c38:	4934      	ldr	r1, [pc, #208]	; (8000d0c <performNextTransitionStep+0x288>)
 8000c3a:	20c4      	movs	r0, #196	; 0xc4
 8000c3c:	fb00 f303 	mul.w	r3, r0, r3
 8000c40:	440b      	add	r3, r1
 8000c42:	3308      	adds	r3, #8
 8000c44:	601a      	str	r2, [r3, #0]
			myPresets[preset].presetTransitionStatus[transition].transStep = app_dmx_preset_cfg_TRANS_STEP_DONE;
 8000c46:	7afa      	ldrb	r2, [r7, #11]
 8000c48:	7abb      	ldrb	r3, [r7, #10]
 8000c4a:	4930      	ldr	r1, [pc, #192]	; (8000d0c <performNextTransitionStep+0x288>)
 8000c4c:	2062      	movs	r0, #98	; 0x62
 8000c4e:	fb00 f202 	mul.w	r2, r0, r2
 8000c52:	4413      	add	r3, r2
 8000c54:	3358      	adds	r3, #88	; 0x58
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	440b      	add	r3, r1
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	705a      	strb	r2, [r3, #1]
		}
	}
	//If the if request is enabled 0 values can't be send because the comparison will be never true
//	if(newVal != myPresets[preset].presetTransitionStatus[transition].actualVal) {
		myPresets[preset].presetTransitionStatus[transition].actualVal = newVal;
 8000c5e:	7afa      	ldrb	r2, [r7, #11]
 8000c60:	7abb      	ldrb	r3, [r7, #10]
 8000c62:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8000c64:	b2cc      	uxtb	r4, r1
 8000c66:	4929      	ldr	r1, [pc, #164]	; (8000d0c <performNextTransitionStep+0x288>)
 8000c68:	2062      	movs	r0, #98	; 0x62
 8000c6a:	fb00 f202 	mul.w	r2, r0, r2
 8000c6e:	4413      	add	r3, r2
 8000c70:	3358      	adds	r3, #88	; 0x58
 8000c72:	4622      	mov	r2, r4
 8000c74:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
		if(self->sendMsg != NULL){
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d029      	beq.n	8000cd4 <performNextTransitionStep+0x250>
			msg_Message newMessage = msg_LITERAL(app_cfg_DMX_MSG, msg_ACTION(myPresets[preset].presetTransitionSettings[transition].dmxCh), myPresets[preset].presetTransitionStatus[transition].actualVal, 0, 0);
 8000c80:	7afb      	ldrb	r3, [r7, #11]
 8000c82:	7aba      	ldrb	r2, [r7, #10]
 8000c84:	4921      	ldr	r1, [pc, #132]	; (8000d0c <performNextTransitionStep+0x288>)
 8000c86:	3201      	adds	r2, #1
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	20c4      	movs	r0, #196	; 0xc4
 8000c8c:	fb00 f303 	mul.w	r3, r0, r3
 8000c90:	4413      	add	r3, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	823b      	strh	r3, [r7, #16]
 8000ca2:	7afa      	ldrb	r2, [r7, #11]
 8000ca4:	7abb      	ldrb	r3, [r7, #10]
 8000ca6:	4919      	ldr	r1, [pc, #100]	; (8000d0c <performNextTransitionStep+0x288>)
 8000ca8:	2062      	movs	r0, #98	; 0x62
 8000caa:	fb00 f202 	mul.w	r2, r0, r2
 8000cae:	4413      	add	r3, r2
 8000cb0:	3358      	adds	r3, #88	; 0x58
 8000cb2:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	827b      	strh	r3, [r7, #18]
 8000cba:	2344      	movs	r3, #68	; 0x44
 8000cbc:	753b      	strb	r3, [r7, #20]
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	757b      	strb	r3, [r7, #21]
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	82fb      	strh	r3, [r7, #22]
			self->sendMsg(self, &newMessage);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f107 0210 	add.w	r2, r7, #16
 8000cce:	4611      	mov	r1, r2
 8000cd0:	68f8      	ldr	r0, [r7, #12]
 8000cd2:	4798      	blx	r3
		}
		if(myPresets[preset].presetTransitionStatus[transition].transStep == app_dmx_preset_cfg_TRANS_STEP_DONE) myPresets[preset].presetTransitionStatus[transition].actualVal = 0;
 8000cd4:	7afa      	ldrb	r2, [r7, #11]
 8000cd6:	7abb      	ldrb	r3, [r7, #10]
 8000cd8:	490c      	ldr	r1, [pc, #48]	; (8000d0c <performNextTransitionStep+0x288>)
 8000cda:	2062      	movs	r0, #98	; 0x62
 8000cdc:	fb00 f202 	mul.w	r2, r0, r2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	3358      	adds	r3, #88	; 0x58
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	440b      	add	r3, r1
 8000ce8:	785b      	ldrb	r3, [r3, #1]
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d10a      	bne.n	8000d04 <performNextTransitionStep+0x280>
 8000cee:	7afa      	ldrb	r2, [r7, #11]
 8000cf0:	7abb      	ldrb	r3, [r7, #10]
 8000cf2:	4906      	ldr	r1, [pc, #24]	; (8000d0c <performNextTransitionStep+0x288>)
 8000cf4:	2062      	movs	r0, #98	; 0x62
 8000cf6:	fb00 f202 	mul.w	r2, r0, r2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	3358      	adds	r3, #88	; 0x58
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
//	}
}
 8000d04:	bf00      	nop
 8000d06:	372c      	adds	r7, #44	; 0x2c
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd90      	pop	{r4, r7, pc}
 8000d0c:	20000000 	.word	0x20000000

08000d10 <app_uart_irqHandler>:
	}
	return bufferState;
}


void app_uart_irqHandler(USART_TypeDef *uartHandler, stRingBuf *rxBuf, stRingBuf *txBuf){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
		volatile uint16_t ISR;
		char bufferState;

		ISR = uartHandler->ISR;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	82bb      	strh	r3, [r7, #20]
		if(ISR & USART_ISR_RXNE){ //Bit 5 = Read Data Register Not Empty in SR
 8000d24:	8abb      	ldrh	r3, [r7, #20]
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	f003 0320 	and.w	r3, r3, #32
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d009      	beq.n	8000d44 <app_uart_irqHandler+0x34>
			bufferState = RINGBUFFER_cIn(uartHandler->RDR, rxBuf);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f006 ff38 	bl	8007bb0 <RINGBUFFER_cIn>
 8000d40:	4603      	mov	r3, r0
 8000d42:	75fb      	strb	r3, [r7, #23]
			if(bufferState != ringbuffer_OK){
				//TODO Error handling
			}
		}
		if(ISR & USART_ISR_TXE){
 8000d44:	8abb      	ldrh	r3, [r7, #20]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d01e      	beq.n	8000d8e <app_uart_irqHandler+0x7e>
			uartHandler->ISR &= ~USART_ISR_TXE;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	69db      	ldr	r3, [r3, #28]
 8000d54:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	61da      	str	r2, [r3, #28]
			char data;
			bufferState = RINGBUFFER_cOut(&data, txBuf);
 8000d5c:	f107 0313 	add.w	r3, r7, #19
 8000d60:	6879      	ldr	r1, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f006 ff61 	bl	8007c2a <RINGBUFFER_cOut>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	75fb      	strb	r3, [r7, #23]
			if(bufferState == ringbuffer_EMPTY){
 8000d6c:	7dfb      	ldrb	r3, [r7, #23]
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d106      	bne.n	8000d80 <app_uart_irqHandler+0x70>
				uartHandler->CR1 &= ~USART_CR1_TXEIE;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	e006      	b.n	8000d8e <app_uart_irqHandler+0x7e>
			}else if (bufferState == ringbuffer_NO_BUF){
 8000d80:	7dfb      	ldrb	r3, [r7, #23]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <app_uart_irqHandler+0x7e>

			}else{
				uartHandler->TDR = data;
 8000d86:	7cfb      	ldrb	r3, [r7, #19]
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	851a      	strh	r2, [r3, #40]	; 0x28
			}
		}
		if(ISR & USART_ISR_ORE){
 8000d8e:	8abb      	ldrh	r3, [r7, #20]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d005      	beq.n	8000da6 <app_uart_irqHandler+0x96>
			uartHandler->ICR |= USART_ICR_ORECF;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	6a1b      	ldr	r3, [r3, #32]
 8000d9e:	f043 0208 	orr.w	r2, r3, #8
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	621a      	str	r2, [r3, #32]
		}
	}
 8000da6:	bf00      	nop
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <app_main>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
#define SOFT_I2C	1
void app_main(){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
	msgTask.enable = true;
 8000db6:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <app_main+0x94>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
	msgTask.init(&msgTask);
 8000dbc:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <app_main+0x94>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	4820      	ldr	r0, [pc, #128]	; (8000e44 <app_main+0x94>)
 8000dc2:	4798      	blx	r3
	uint8_t readData[2] = {0};
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	81bb      	strh	r3, [r7, #12]

//	eeprom_read(&eepromDev1, 0, readData, 2);
	#if SOFT_I2C
		uint8_t writeData[2] = {0xBA, 0xAB};
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <app_main+0x98>)
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	813b      	strh	r3, [r7, #8]
	    gpio_setPinMode(GPIO_MODE_INPUT, myI2c.scl_pin.GPIOx, myI2c.scl_pin.GPIO_Pin, GPIO_PIN_RESET);
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <app_main+0x9c>)
 8000dd0:	6819      	ldr	r1, [r3, #0]
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <app_main+0x9c>)
 8000dd4:	889a      	ldrh	r2, [r3, #4]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f008 feeb 	bl	8009bb4 <gpio_setPinMode>
	    gpio_setPinMode(GPIO_MODE_INPUT, myI2c.sda_pin.GPIOx, myI2c.sda_pin.GPIO_Pin, GPIO_PIN_RESET);
 8000dde:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <app_main+0x9c>)
 8000de0:	6899      	ldr	r1, [r3, #8]
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <app_main+0x9c>)
 8000de4:	899a      	ldrh	r2, [r3, #12]
 8000de6:	2300      	movs	r3, #0
 8000de8:	2000      	movs	r0, #0
 8000dea:	f008 fee3 	bl	8009bb4 <gpio_setPinMode>
		i2c_soft_init(&myI2c);
 8000dee:	4817      	ldr	r0, [pc, #92]	; (8000e4c <app_main+0x9c>)
 8000df0:	f007 f81e 	bl	8007e30 <i2c_soft_init>
//		eeprom_read(&eepromDev1, 0, readData, 2);
		eeprom_write(&eepromDev1, 0, writeData, 2);
 8000df4:	f107 0208 	add.w	r2, r7, #8
 8000df8:	2302      	movs	r3, #2
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4814      	ldr	r0, [pc, #80]	; (8000e50 <app_main+0xa0>)
 8000dfe:	f006 fc9e 	bl	800773e <eeprom_write>
		eeprom_read(&eepromDev1, 0, readData, 2);
		uint8_t writeData[2] = {0xEE, 0xEE};
		eeprom_write(&eepromDev1, 0, writeData, 2);
	#endif
	while (1){
		msgTask.mainLoop(&msgTask);
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <app_main+0x94>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	480f      	ldr	r0, [pc, #60]	; (8000e44 <app_main+0x94>)
 8000e08:	4798      	blx	r3
//		dmxTask.mainLoop(&dmxTask);
//		dmxPresetTask.mainLoop(&dmxPresetTask);
		if((HAL_GPIO_ReadPin(I_SW2_GPIO_Port, I_SW2_Pin) == GPIO_PIN_RESET) && (myPresets[0].trigger != true)){
 8000e0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e12:	f000 fc4f 	bl	80016b4 <HAL_GPIO_ReadPin>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f2      	bne.n	8000e02 <app_main+0x52>
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <app_main+0xa4>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	f083 0301 	eor.w	r3, r3, #1
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d0eb      	beq.n	8000e02 <app_main+0x52>
			msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_ACTION(0), app_cfg_dmx_preset_TRIGGER_ENABLE, 0, 0);
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <app_main+0xa8>)
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e32:	e883 0003 	stmia.w	r3, {r0, r1}
			sendMessage(NULL, &newMessage);
 8000e36:	463b      	mov	r3, r7
 8000e38:	4619      	mov	r1, r3
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 f896 	bl	8000f6c <sendMessage>
		msgTask.mainLoop(&msgTask);
 8000e40:	e7df      	b.n	8000e02 <app_main+0x52>
 8000e42:	bf00      	nop
 8000e44:	2000043c 	.word	0x2000043c
 8000e48:	0800b7e4 	.word	0x0800b7e4
 8000e4c:	200003ec 	.word	0x200003ec
 8000e50:	200003c8 	.word	0x200003c8
 8000e54:	20000000 	.word	0x20000000
 8000e58:	0800b7e8 	.word	0x0800b7e8

08000e5c <app_1ms>:
		}

	 }
}

void app_1ms(){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	static uint16_t timer100ms = 0;
	static uint16_t timer500ms = 0;
	dmx_1ms(&dmx1);
 8000e60:	4818      	ldr	r0, [pc, #96]	; (8000ec4 <app_1ms+0x68>)
 8000e62:	f006 fa7b 	bl	800735c <dmx_1ms>
	if(dmxTask.timer) dmxTask.timer(&dmxTask, true);
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <app_1ms+0x6c>)
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d004      	beq.n	8000e78 <app_1ms+0x1c>
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <app_1ms+0x6c>)
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	2101      	movs	r1, #1
 8000e74:	4814      	ldr	r0, [pc, #80]	; (8000ec8 <app_1ms+0x6c>)
 8000e76:	4798      	blx	r3
	if(dmxPresetTask.timer) dmxPresetTask.timer(&dmxPresetTask, true);
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <app_1ms+0x70>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d004      	beq.n	8000e8a <app_1ms+0x2e>
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <app_1ms+0x70>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	2101      	movs	r1, #1
 8000e86:	4811      	ldr	r0, [pc, #68]	; (8000ecc <app_1ms+0x70>)
 8000e88:	4798      	blx	r3
	if(++timer100ms >= 100){
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <app_1ms+0x74>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <app_1ms+0x74>)
 8000e94:	801a      	strh	r2, [r3, #0]
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <app_1ms+0x74>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	2b63      	cmp	r3, #99	; 0x63
 8000e9c:	d902      	bls.n	8000ea4 <app_1ms+0x48>
		timer100ms = 0;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <app_1ms+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	801a      	strh	r2, [r3, #0]
//		uart_writeStringToBuffer("AT+NAMEERIC12  ", &uart4TxBuf, huart4.Instance);
//		uart_writeStringToBuffer("AT+NAMEERIC12  ", &uart2TxBuf, huart2.Instance);
	}
	if(++timer500ms >= 500){
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <app_1ms+0x78>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <app_1ms+0x78>)
 8000eae:	801a      	strh	r2, [r3, #0]
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <app_1ms+0x78>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000eb8:	d302      	bcc.n	8000ec0 <app_1ms+0x64>
		timer500ms = 0;
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <app_1ms+0x78>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	801a      	strh	r2, [r3, #0]
	}

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000310 	.word	0x20000310
 8000ec8:	2000046c 	.word	0x2000046c
 8000ecc:	20000454 	.word	0x20000454
 8000ed0:	2000140c 	.word	0x2000140c
 8000ed4:	2000140e 	.word	0x2000140e

08000ed8 <app_process>:
/* Application Task ------------------------------------------------------------*/
static void app_process(eal_task_Task *self){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	msg_Message buffer = {0};
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
	msg_Message *newMessage = msg_getNext(&buffer, &msgBuf);
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <app_process+0x38>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f006 fdae 	bl	8007a52 <msg_getNext>
 8000ef6:	6178      	str	r0, [r7, #20]
	if(newMessage != NULL){
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d004      	beq.n	8000f08 <app_process+0x30>
		self->receiveMsg(self, newMessage);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	6979      	ldr	r1, [r7, #20]
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	4798      	blx	r3
	}
}
 8000f08:	bf00      	nop
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000414 	.word	0x20000414

08000f14 <app_receiveMsg>:
static void app_receiveMsg(eal_task_Task *self, msg_Message *message){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	dmxTask.receiveMsg(&dmxTask, message);
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <app_receiveMsg+0x28>)
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	6839      	ldr	r1, [r7, #0]
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <app_receiveMsg+0x28>)
 8000f26:	4798      	blx	r3
	dmxPresetTask.receiveMsg(&dmxPresetTask, message);
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <app_receiveMsg+0x2c>)
 8000f2a:	691b      	ldr	r3, [r3, #16]
 8000f2c:	6839      	ldr	r1, [r7, #0]
 8000f2e:	4804      	ldr	r0, [pc, #16]	; (8000f40 <app_receiveMsg+0x2c>)
 8000f30:	4798      	blx	r3
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2000046c 	.word	0x2000046c
 8000f40:	20000454 	.word	0x20000454

08000f44 <app_init>:

static void app_init(eal_task_Task *self){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]


	eeprom_registerCallback(&eepromDev1, eepromCallback);
 8000f4c:	4905      	ldr	r1, [pc, #20]	; (8000f64 <app_init+0x20>)
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <app_init+0x24>)
 8000f50:	f006 fbd4 	bl	80076fc <eeprom_registerCallback>
	eeprom_init(&eepromDev1);
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <app_init+0x24>)
 8000f56:	f006 fbdf 	bl	8007718 <eeprom_init>

//	dmxTask.enable = true;
//	if(dmxTask.init) dmxTask.init(&dmxTask);
//	dmxPresetTask.enable = true;
//	if(dmxPresetTask.init) dmxPresetTask.init(&dmxPresetTask);
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	08000fd5 	.word	0x08000fd5
 8000f68:	200003c8 	.word	0x200003c8

08000f6c <sendMessage>:

/* Messages --------------------------------------------------------------------*/
static void sendMessage(eal_task_Task *self, msg_Message *message){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
	uint8_t msgBufState = 1;
 8000f76:	2301      	movs	r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]
	if(msg_isAction(message))msgBufState = msg_writeAction(message, &msgBuf);
 8000f7a:	6838      	ldr	r0, [r7, #0]
 8000f7c:	f006 fe06 	bl	8007b8c <msg_isAction>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d006      	beq.n	8000f94 <sendMessage+0x28>
 8000f86:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <sendMessage+0x4c>)
 8000f88:	6838      	ldr	r0, [r7, #0]
 8000f8a:	f006 fd49 	bl	8007a20 <msg_writeAction>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	e005      	b.n	8000fa0 <sendMessage+0x34>
	else msgBufState = msg_writeEvent(message, &msgBuf);
 8000f94:	4908      	ldr	r1, [pc, #32]	; (8000fb8 <sendMessage+0x4c>)
 8000f96:	6838      	ldr	r0, [r7, #0]
 8000f98:	f006 fd2b 	bl	80079f2 <msg_writeEvent>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]
	if(msgBufState != 1) messageBufferError(msgBufState);
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d003      	beq.n	8000fae <sendMessage+0x42>
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 f807 	bl	8000fbc <messageBufferError>
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000414 	.word	0x20000414

08000fbc <messageBufferError>:
static void messageBufferError(uint8_t state){
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
//	if(state == NO_BUF) USART3_WriteStringToBuffer("ERROR: MSG NO BUF\r\n", 18);
//	else if(state == FULL) USART3_WriteStringToBuffer("ERROR: MSG BUF OVR\r\n", 19);
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <eepromCallback>:

/* Callback's ---------------------------------------------------------------------*/
uint8_t eepromCallback(eeprom_cfg_Config *config){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	6078      	str	r0, [r7, #4]
	uint8_t state = 1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	73fb      	strb	r3, [r7, #15]
	volatile int state2 = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
	if(config->callbackType == EEPROM_CFG_CALL_TX_START){
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	7a9b      	ldrb	r3, [r3, #10]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d112      	bne.n	8001012 <eepromCallback+0x3e>
	#if SOFT_I2C
//		state2 = i2c_soft_write(&myI2c, config->devAddr, config->txBuffer, config->dataSize);
		state2 = i2c_soft_mem_write(&myI2c, config->devAddr, config->memAddr, I2C_MEMADD_SIZE_16BIT, config->txBuffer, config->dataSize);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	6952      	ldr	r2, [r2, #20]
 8001000:	9201      	str	r2, [sp, #4]
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2302      	movs	r3, #2
 8001006:	4602      	mov	r2, r0
 8001008:	481b      	ldr	r0, [pc, #108]	; (8001078 <eepromCallback+0xa4>)
 800100a:	f006 ffcc 	bl	8007fa6 <i2c_soft_mem_write>
 800100e:	4603      	mov	r3, r0
 8001010:	60bb      	str	r3, [r7, #8]
	#else
		if(HAL_I2C_Mem_Write(&hi2c2, config->devAddr, config->memAddr, I2C_MEMADD_SIZE_16BIT, config->txBuffer, config->dataSize, 100) != HAL_OK) state = 0;
	#endif
	}
	if(config->callbackType == EEPROM_CFG_CALL_RX_START){
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7a9b      	ldrb	r3, [r3, #10]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d112      	bne.n	8001040 <eepromCallback+0x6c>
	#if SOFT_I2C
		state2 = i2c_soft_mem_read(&myI2c, config->devAddr, config->memAddr, I2C_MEMADD_SIZE_16BIT, config->rxBuffer, config->dataSize);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	4619      	mov	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4618      	mov	r0, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	6952      	ldr	r2, [r2, #20]
 800102e:	9201      	str	r2, [sp, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2302      	movs	r3, #2
 8001034:	4602      	mov	r2, r0
 8001036:	4810      	ldr	r0, [pc, #64]	; (8001078 <eepromCallback+0xa4>)
 8001038:	f006 ff2d 	bl	8007e96 <i2c_soft_mem_read>
 800103c:	4603      	mov	r3, r0
 800103e:	60bb      	str	r3, [r7, #8]
	#else
		if(HAL_I2C_Mem_Read(&hi2c2, config->devAddr, config->memAddr, I2C_MEMADD_SIZE_16BIT, config->rxBuffer, config->dataSize, 10) != HAL_OK) state = 0;
	#endif

	}
	if(config->callbackType == EEPROM_CFG_CALL_CHECK_TX_STATE){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	7a9b      	ldrb	r3, [r3, #10]
 8001044:	2b04      	cmp	r3, #4
 8001046:	d112      	bne.n	800106e <eepromCallback+0x9a>
		if(HAL_I2C_Master_Transmit(&hi2c2, config->devAddr, config->rxBuffer, config->dataSize, 1) != HAL_OK) state = 0;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b299      	uxth	r1, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a1a      	ldr	r2, [r3, #32]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	b298      	uxth	r0, r3
 8001058:	2301      	movs	r3, #1
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	4603      	mov	r3, r0
 800105e:	4807      	ldr	r0, [pc, #28]	; (800107c <eepromCallback+0xa8>)
 8001060:	f000 fbe6 	bl	8001830 <HAL_I2C_Master_Transmit>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <eepromCallback+0x9a>
 800106a:	2300      	movs	r3, #0
 800106c:	73fb      	strb	r3, [r7, #15]
	}
	return state;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200003ec 	.word	0x200003ec
 800107c:	20001638 	.word	0x20001638

08001080 <UART4_IRQHandler>:

/* IRQs ---------------------------------------------------------------------*/
void UART4_IRQHandler(void){
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	app_uart_irqHandler(huart4.Instance, &uart4RxBuf, &uart4TxBuf);
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <UART4_IRQHandler+0x18>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <UART4_IRQHandler+0x1c>)
 800108a:	4905      	ldr	r1, [pc, #20]	; (80010a0 <UART4_IRQHandler+0x20>)
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fe3f 	bl	8000d10 <app_uart_irqHandler>
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200018ec 	.word	0x200018ec
 800109c:	20000424 	.word	0x20000424
 80010a0:	20000430 	.word	0x20000430

080010a4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == dmx1.txTimer) dmx_irqTxTimerHandler(&dmx1);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d102      	bne.n	80010be <HAL_TIM_PeriodElapsedCallback+0x1a>
 80010b8:	4803      	ldr	r0, [pc, #12]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80010ba:	f006 f9c9 	bl	8007450 <dmx_irqTxTimerHandler>
//	if(htim->Instance == TIM16) i2c_soft_timer_us(&myI2c);
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000310 	.word	0x20000310

080010cc <TIM1_UP_TIM16_IRQHandler>:

bool toggle = false;
void TIM1_UP_TIM16_IRQHandler(void){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  if (__HAL_TIM_GET_FLAG(&htim16, TIM_FLAG_UPDATE) != RESET){
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <TIM1_UP_TIM16_IRQHandler+0x28>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d107      	bne.n	80010ee <TIM1_UP_TIM16_IRQHandler+0x22>
	  __HAL_TIM_CLEAR_IT(&htim16, TIM_IT_UPDATE);
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <TIM1_UP_TIM16_IRQHandler+0x28>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f06f 0201 	mvn.w	r2, #1
 80010e6:	611a      	str	r2, [r3, #16]
//	  }else{
//		 gpio_setPinMode2(GPIO_MODE_OUTPUT_OD, myI2c.sda_p.GPIOx, myI2c.sda_p.GPIO_Pin_BitPos, GPIO_PIN_RESET);
//		 toggle= true;
//	  }

	  i2c_soft_timer_us(&myI2c);
 80010e8:	4803      	ldr	r0, [pc, #12]	; (80010f8 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80010ea:	f006 fec1 	bl	8007e70 <i2c_soft_timer_us>

  }
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20001834 	.word	0x20001834
 80010f8:	200003ec 	.word	0x200003ec

080010fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001106:	2003      	movs	r0, #3
 8001108:	f000 f918 	bl	800133c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800110c:	2000      	movs	r0, #0
 800110e:	f000 f80d 	bl	800112c <HAL_InitTick>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d002      	beq.n	800111e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	e001      	b.n	8001122 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800111e:	f008 ff97 	bl	800a050 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001122:	79fb      	ldrb	r3, [r7, #7]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <HAL_InitTick+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0c      	ldr	r2, [pc, #48]	; (8001170 <HAL_InitTick+0x44>)
 800113e:	fba2 2303 	umull	r2, r3, r2, r3
 8001142:	099b      	lsrs	r3, r3, #6
 8001144:	4618      	mov	r0, r3
 8001146:	f000 f92e 	bl	80013a6 <HAL_SYSTICK_Config>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <HAL_InitTick+0x2a>
  {
    status = HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	e005      	b.n	8001162 <HAL_InitTick+0x36>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	f04f 30ff 	mov.w	r0, #4294967295
 800115e:	f000 f8f8 	bl	8001352 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000594 	.word	0x20000594
 8001170:	10624dd3 	.word	0x10624dd3

08001174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick++;
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <HAL_IncTick+0x18>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	4a03      	ldr	r2, [pc, #12]	; (800118c <HAL_IncTick+0x18>)
 8001180:	6013      	str	r3, [r2, #0]
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	20001634 	.word	0x20001634

08001190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <HAL_GetTick+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20001634 	.word	0x20001634

080011a8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <NVIC_SetPriorityGrouping+0x44>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <NVIC_SetPriorityGrouping+0x44>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001216:	4909      	ldr	r1, [pc, #36]	; (800123c <NVIC_EnableIRQ+0x30>)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	095b      	lsrs	r3, r3, #5
 800121e:	79fa      	ldrb	r2, [r7, #7]
 8001220:	f002 021f 	and.w	r2, r2, #31
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000e100 	.word	0xe000e100

08001240 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	da0b      	bge.n	800126c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	490d      	ldr	r1, [pc, #52]	; (800128c <NVIC_SetPriority+0x4c>)
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 030f 	and.w	r3, r3, #15
 800125c:	3b04      	subs	r3, #4
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800126a:	e009      	b.n	8001280 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126c:	4908      	ldr	r1, [pc, #32]	; (8001290 <NVIC_SetPriority+0x50>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	440b      	add	r3, r1
 800127c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00
 8001290:	e000e100 	.word	0xe000e100

08001294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f1c3 0307 	rsb	r3, r3, #7
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	bf28      	it	cs
 80012b2:	2304      	movcs	r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d902      	bls.n	80012c4 <NVIC_EncodePriority+0x30>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b03      	subs	r3, #3
 80012c2:	e000      	b.n	80012c6 <NVIC_EncodePriority+0x32>
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	2201      	movs	r2, #1
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	1e5a      	subs	r2, r3, #1
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	401a      	ands	r2, r3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012da:	2101      	movs	r1, #1
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	1e59      	subs	r1, r3, #1
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001308:	d301      	bcc.n	800130e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130a:	2301      	movs	r3, #1
 800130c:	e00f      	b.n	800132e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <SysTick_Config+0x40>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001316:	210f      	movs	r1, #15
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f7ff ff90 	bl	8001240 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <SysTick_Config+0x40>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SysTick_Config+0x40>)
 8001328:	2207      	movs	r2, #7
 800132a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	e000e010 	.word	0xe000e010

0800133c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff2f 	bl	80011a8 <NVIC_SetPriorityGrouping>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001364:	f7ff ff44 	bl	80011f0 <NVIC_GetPriorityGrouping>
 8001368:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	6978      	ldr	r0, [r7, #20]
 8001370:	f7ff ff90 	bl	8001294 <NVIC_EncodePriority>
 8001374:	4602      	mov	r2, r0
 8001376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff5f 	bl	8001240 <NVIC_SetPriority>
}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff37 	bl	800120c <NVIC_EnableIRQ>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffa2 	bl	80012f8 <SysTick_Config>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ce:	e154      	b.n	800167a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2101      	movs	r1, #1
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8146 	beq.w	8001674 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x38>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b12      	cmp	r3, #18
 80013f6:	d123      	bne.n	8001440 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	08da      	lsrs	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3208      	adds	r2, #8
 8001400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	220f      	movs	r2, #15
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	08da      	lsrs	r2, r3, #3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3208      	adds	r2, #8
 800143a:	6939      	ldr	r1, [r7, #16]
 800143c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0203 	and.w	r2, r3, #3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d00b      	beq.n	8001494 <HAL_GPIO_Init+0xd4>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d007      	beq.n	8001494 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001488:	2b11      	cmp	r3, #17
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b12      	cmp	r3, #18
 8001492:	d130      	bne.n	80014f6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ca:	2201      	movs	r2, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	091b      	lsrs	r3, r3, #4
 80014e0:	f003 0201 	and.w	r2, r3, #1
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	2203      	movs	r2, #3
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80a0 	beq.w	8001674 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001534:	4a58      	ldr	r2, [pc, #352]	; (8001698 <HAL_GPIO_Init+0x2d8>)
 8001536:	4b58      	ldr	r3, [pc, #352]	; (8001698 <HAL_GPIO_Init+0x2d8>)
 8001538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6613      	str	r3, [r2, #96]	; 0x60
 8001540:	4b55      	ldr	r3, [pc, #340]	; (8001698 <HAL_GPIO_Init+0x2d8>)
 8001542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800154c:	4a53      	ldr	r2, [pc, #332]	; (800169c <HAL_GPIO_Init+0x2dc>)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3302      	adds	r3, #2
 8001554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	220f      	movs	r2, #15
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001576:	d019      	beq.n	80015ac <HAL_GPIO_Init+0x1ec>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a49      	ldr	r2, [pc, #292]	; (80016a0 <HAL_GPIO_Init+0x2e0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d013      	beq.n	80015a8 <HAL_GPIO_Init+0x1e8>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a48      	ldr	r2, [pc, #288]	; (80016a4 <HAL_GPIO_Init+0x2e4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d00d      	beq.n	80015a4 <HAL_GPIO_Init+0x1e4>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a47      	ldr	r2, [pc, #284]	; (80016a8 <HAL_GPIO_Init+0x2e8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d007      	beq.n	80015a0 <HAL_GPIO_Init+0x1e0>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a46      	ldr	r2, [pc, #280]	; (80016ac <HAL_GPIO_Init+0x2ec>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d101      	bne.n	800159c <HAL_GPIO_Init+0x1dc>
 8001598:	2304      	movs	r3, #4
 800159a:	e008      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 800159c:	2307      	movs	r3, #7
 800159e:	e006      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015a0:	2303      	movs	r3, #3
 80015a2:	e004      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e002      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015ac:	2300      	movs	r3, #0
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	f002 0203 	and.w	r2, r2, #3
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	4093      	lsls	r3, r2
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015be:	4937      	ldr	r1, [pc, #220]	; (800169c <HAL_GPIO_Init+0x2dc>)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3302      	adds	r3, #2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015cc:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <HAL_GPIO_Init+0x2f0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015f0:	4a2f      	ldr	r2, [pc, #188]	; (80016b0 <HAL_GPIO_Init+0x2f0>)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80015f6:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <HAL_GPIO_Init+0x2f0>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800161a:	4a25      	ldr	r2, [pc, #148]	; (80016b0 <HAL_GPIO_Init+0x2f0>)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001620:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <HAL_GPIO_Init+0x2f0>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001644:	4a1a      	ldr	r2, [pc, #104]	; (80016b0 <HAL_GPIO_Init+0x2f0>)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_GPIO_Init+0x2f0>)
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800166e:	4a10      	ldr	r2, [pc, #64]	; (80016b0 <HAL_GPIO_Init+0x2f0>)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	fa22 f303 	lsr.w	r3, r2, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	f47f aea3 	bne.w	80013d0 <HAL_GPIO_Init+0x10>
  }
}
 800168a:	bf00      	nop
 800168c:	371c      	adds	r7, #28
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000
 80016a0:	48000400 	.word	0x48000400
 80016a4:	48000800 	.word	0x48000800
 80016a8:	48000c00 	.word	0x48000c00
 80016ac:	48001000 	.word	0x48001000
 80016b0:	40010400 	.word	0x40010400

080016b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691a      	ldr	r2, [r3, #16]
 80016c4:	887b      	ldrh	r3, [r7, #2]
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	e001      	b.n	80016d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]
 80016f0:	4613      	mov	r3, r2
 80016f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f4:	787b      	ldrb	r3, [r7, #1]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001700:	e002      	b.n	8001708 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e080      	b.n	8001828 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d106      	bne.n	8001740 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f008 faf4 	bl	8009d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2224      	movs	r2, #36	; 0x24
 8001744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	f022 0201 	bic.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6852      	ldr	r2, [r2, #4]
 8001760:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001764:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	6892      	ldr	r2, [r2, #8]
 8001770:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001774:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d107      	bne.n	800178e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6892      	ldr	r2, [r2, #8]
 8001786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	e006      	b.n	800179c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6892      	ldr	r2, [r2, #8]
 8001796:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800179a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d104      	bne.n	80017ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	68d2      	ldr	r2, [r2, #12]
 80017cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6911      	ldr	r1, [r2, #16]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6952      	ldr	r2, [r2, #20]
 80017de:	4311      	orrs	r1, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6992      	ldr	r2, [r2, #24]
 80017e4:	0212      	lsls	r2, r2, #8
 80017e6:	430a      	orrs	r2, r1
 80017e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	69d1      	ldr	r1, [r2, #28]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6a12      	ldr	r2, [r2, #32]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	f042 0201 	orr.w	r2, r2, #1
 8001808:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2220      	movs	r2, #32
 8001814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af02      	add	r7, sp, #8
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	461a      	mov	r2, r3
 800183c:	460b      	mov	r3, r1
 800183e:	817b      	strh	r3, [r7, #10]
 8001840:	4613      	mov	r3, r2
 8001842:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b20      	cmp	r3, #32
 800184e:	f040 80da 	bne.w	8001a06 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <HAL_I2C_Master_Transmit+0x30>
 800185c:	2302      	movs	r3, #2
 800185e:	e0d3      	b.n	8001a08 <HAL_I2C_Master_Transmit+0x1d8>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001868:	f7ff fc92 	bl	8001190 <HAL_GetTick>
 800186c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	2319      	movs	r3, #25
 8001874:	2201      	movs	r2, #1
 8001876:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f000 f8f0 	bl	8001a60 <I2C_WaitOnFlagUntilTimeout>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e0be      	b.n	8001a08 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2221      	movs	r2, #33	; 0x21
 800188e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2210      	movs	r2, #16
 8001896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	893a      	ldrh	r2, [r7, #8]
 80018aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	2bff      	cmp	r3, #255	; 0xff
 80018ba:	d90e      	bls.n	80018da <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	22ff      	movs	r2, #255	; 0xff
 80018c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	8979      	ldrh	r1, [r7, #10]
 80018ca:	4b51      	ldr	r3, [pc, #324]	; (8001a10 <HAL_I2C_Master_Transmit+0x1e0>)
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f000 f9e6 	bl	8001ca4 <I2C_TransferConfig>
 80018d8:	e06c      	b.n	80019b4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018de:	b29a      	uxth	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	8979      	ldrh	r1, [r7, #10]
 80018ec:	4b48      	ldr	r3, [pc, #288]	; (8001a10 <HAL_I2C_Master_Transmit+0x1e0>)
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 f9d5 	bl	8001ca4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80018fa:	e05b      	b.n	80019b4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	6a39      	ldr	r1, [r7, #32]
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f000 f8ed 	bl	8001ae0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e07b      	b.n	8001a08 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001918:	7812      	ldrb	r2, [r2, #0]
 800191a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192a:	b29b      	uxth	r3, r3
 800192c:	3b01      	subs	r3, #1
 800192e:	b29a      	uxth	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001938:	3b01      	subs	r3, #1
 800193a:	b29a      	uxth	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001944:	b29b      	uxth	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d034      	beq.n	80019b4 <HAL_I2C_Master_Transmit+0x184>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194e:	2b00      	cmp	r3, #0
 8001950:	d130      	bne.n	80019b4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	2200      	movs	r2, #0
 800195a:	2180      	movs	r1, #128	; 0x80
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 f87f 	bl	8001a60 <I2C_WaitOnFlagUntilTimeout>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e04d      	b.n	8001a08 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001970:	b29b      	uxth	r3, r3
 8001972:	2bff      	cmp	r3, #255	; 0xff
 8001974:	d90e      	bls.n	8001994 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	22ff      	movs	r2, #255	; 0xff
 800197a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001980:	b2da      	uxtb	r2, r3
 8001982:	8979      	ldrh	r1, [r7, #10]
 8001984:	2300      	movs	r3, #0
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 f989 	bl	8001ca4 <I2C_TransferConfig>
 8001992:	e00f      	b.n	80019b4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001998:	b29a      	uxth	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	8979      	ldrh	r1, [r7, #10]
 80019a6:	2300      	movs	r3, #0
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f978 	bl	8001ca4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d19e      	bne.n	80018fc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	6a39      	ldr	r1, [r7, #32]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 f8cc 	bl	8001b60 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e01a      	b.n	8001a08 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2220      	movs	r2, #32
 80019d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6859      	ldr	r1, [r3, #4]
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_I2C_Master_Transmit+0x1e4>)
 80019e6:	400b      	ands	r3, r1
 80019e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2220      	movs	r2, #32
 80019ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e000      	b.n	8001a08 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001a06:	2302      	movs	r3, #2
  }
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	80002000 	.word	0x80002000
 8001a14:	fe00e800 	.word	0xfe00e800

08001a18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d103      	bne.n	8001a36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2200      	movs	r2, #0
 8001a34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d007      	beq.n	8001a54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	6992      	ldr	r2, [r2, #24]
 8001a4e:	f042 0201 	orr.w	r2, r2, #1
 8001a52:	619a      	str	r2, [r3, #24]
  }
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a70:	e022      	b.n	8001ab8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d01e      	beq.n	8001ab8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a7a:	f7ff fb89 	bl	8001190 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	1ad2      	subs	r2, r2, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d802      	bhi.n	8001a90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d113      	bne.n	8001ab8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	f043 0220 	orr.w	r2, r3, #32
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e00f      	b.n	8001ad8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699a      	ldr	r2, [r3, #24]
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	bf0c      	ite	eq
 8001ac8:	2301      	moveq	r3, #1
 8001aca:	2300      	movne	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d0cd      	beq.n	8001a72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001aec:	e02c      	b.n	8001b48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 f870 	bl	8001bd8 <I2C_IsAcknowledgeFailed>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e02a      	b.n	8001b58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b08:	d01e      	beq.n	8001b48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b0a:	f7ff fb41 	bl	8001190 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	1ad2      	subs	r2, r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d802      	bhi.n	8001b20 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d113      	bne.n	8001b48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b24:	f043 0220 	orr.w	r2, r3, #32
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e007      	b.n	8001b58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d1cb      	bne.n	8001aee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b6c:	e028      	b.n	8001bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f830 	bl	8001bd8 <I2C_IsAcknowledgeFailed>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e026      	b.n	8001bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b82:	f7ff fb05 	bl	8001190 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	1ad2      	subs	r2, r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d802      	bhi.n	8001b98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d113      	bne.n	8001bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	f043 0220 	orr.w	r2, r3, #32
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e007      	b.n	8001bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f003 0320 	and.w	r3, r3, #32
 8001bca:	2b20      	cmp	r3, #32
 8001bcc:	d1cf      	bne.n	8001b6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	2b10      	cmp	r3, #16
 8001bf0:	d151      	bne.n	8001c96 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bf2:	e022      	b.n	8001c3a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfa:	d01e      	beq.n	8001c3a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bfc:	f7ff fac8 	bl	8001190 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	1ad2      	subs	r2, r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d802      	bhi.n	8001c12 <I2C_IsAcknowledgeFailed+0x3a>
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d113      	bne.n	8001c3a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f043 0220 	orr.w	r2, r3, #32
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2220      	movs	r2, #32
 8001c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e02e      	b.n	8001c98 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0320 	and.w	r3, r3, #32
 8001c44:	2b20      	cmp	r3, #32
 8001c46:	d1d5      	bne.n	8001bf4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2210      	movs	r2, #16
 8001c4e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2220      	movs	r2, #32
 8001c56:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f7ff fedd 	bl	8001a18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6859      	ldr	r1, [r3, #4]
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <I2C_IsAcknowledgeFailed+0xc8>)
 8001c6a:	400b      	ands	r3, r1
 8001c6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f043 0204 	orr.w	r2, r3, #4
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	fe00e800 	.word	0xfe00e800

08001ca4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	817b      	strh	r3, [r7, #10]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6859      	ldr	r1, [r3, #4]
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	0d5b      	lsrs	r3, r3, #21
 8001cc4:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <I2C_TransferConfig+0x54>)
 8001cca:	4303      	orrs	r3, r0
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	4019      	ands	r1, r3
 8001cd0:	897b      	ldrh	r3, [r7, #10]
 8001cd2:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001cd6:	7a7b      	ldrb	r3, [r7, #9]
 8001cd8:	041b      	lsls	r3, r3, #16
 8001cda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001cde:	4318      	orrs	r0, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4318      	orrs	r0, r3
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	4303      	orrs	r3, r0
 8001ce8:	430b      	orrs	r3, r1
 8001cea:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	03ff63ff 	.word	0x03ff63ff

08001cfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b20      	cmp	r3, #32
 8001d10:	d138      	bne.n	8001d84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e032      	b.n	8001d86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2224      	movs	r2, #36	; 0x24
 8001d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	f022 0201 	bic.w	r2, r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	6811      	ldr	r1, [r2, #0]
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2220      	movs	r2, #32
 8001d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	e000      	b.n	8001d86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d84:	2302      	movs	r3, #2
  }
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b085      	sub	sp, #20
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b20      	cmp	r3, #32
 8001da6:	d139      	bne.n	8001e1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e033      	b.n	8001e1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2224      	movs	r2, #36	; 0x24
 8001dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	f022 0201 	bic.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001de4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	021b      	lsls	r3, r3, #8
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e000      	b.n	8001e1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e1c:	2302      	movs	r3, #2
  }
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim: LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_LPTIM_Init+0x16>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e076      	b.n	8001f30 <HAL_LPTIM_Init+0x104>

#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_LPTIM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f008 f802 	bl	8009e60 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d103      	bne.n	8001e7c <HAL_LPTIM_Init+0x50>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f023 031e 	bic.w	r3, r3, #30
 8001e7a:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d005      	beq.n	8001e94 <HAL_LPTIM_Init+0x68>
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001e8e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001e92:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <HAL_LPTIM_Init+0x10c>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001ea4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8001eaa:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8001eb0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8001eb6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d107      	bne.n	8001ed6 <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_LPTIM_Init+0xcc>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001eea:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001ef0:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <HAL_LPTIM_Init+0x110>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d108      	bne.n	8001f1c <HAL_LPTIM_Init+0xf0>
    /* Check LPTIM1 Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));

    /* Configure LPTIM1 Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f16:	430a      	orrs	r2, r1
 8001f18:	621a      	str	r2, [r3, #32]
 8001f1a:	e004      	b.n	8001f26 <HAL_LPTIM_Init+0xfa>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f24:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	ff19f1fe 	.word	0xff19f1fe
 8001f3c:	40007c00 	.word	0x40007c00

08001f40 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim: LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d10d      	bne.n	8001f72 <HAL_LPTIM_IRQHandler+0x32>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d106      	bne.n	8001f72 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f882 	bl	8002076 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d10d      	bne.n	8001f9c <HAL_LPTIM_IRQHandler+0x5c>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d106      	bne.n	8001f9c <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2202      	movs	r2, #2
 8001f94:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f877 	bl	800208a <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d10d      	bne.n	8001fc6 <HAL_LPTIM_IRQHandler+0x86>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d106      	bne.n	8001fc6 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f86c 	bl	800209e <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d10d      	bne.n	8001ff0 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d106      	bne.n	8001ff0 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f861 	bl	80020b2 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b10      	cmp	r3, #16
 8001ffc:	d10d      	bne.n	800201a <HAL_LPTIM_IRQHandler+0xda>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	2b10      	cmp	r3, #16
 800200a:	d106      	bne.n	800201a <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2210      	movs	r2, #16
 8002012:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f856 	bl	80020c6 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	2b20      	cmp	r3, #32
 8002026:	d10d      	bne.n	8002044 <HAL_LPTIM_IRQHandler+0x104>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	2b20      	cmp	r3, #32
 8002034:	d106      	bne.n	8002044 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2220      	movs	r2, #32
 800203c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f84b 	bl	80020da <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204e:	2b40      	cmp	r3, #64	; 0x40
 8002050:	d10d      	bne.n	800206e <HAL_LPTIM_IRQHandler+0x12e>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205c:	2b40      	cmp	r3, #64	; 0x40
 800205e:	d106      	bne.n	800206e <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2240      	movs	r2, #64	; 0x40
 8002066:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f840 	bl	80020ee <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */      
    }
  }
#endif
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002102:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002104:	b08b      	sub	sp, #44	; 0x2c
 8002106:	af06      	add	r7, sp, #24
 8002108:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0cb      	b.n	80022ac <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d106      	bne.n	800212e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f008 fe93 	bl	800ae54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2203      	movs	r2, #3
 8002132:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f003 ff44 	bl	8005fc8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	687e      	ldr	r6, [r7, #4]
 8002148:	466d      	mov	r5, sp
 800214a:	f106 0410 	add.w	r4, r6, #16
 800214e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	602b      	str	r3, [r5, #0]
 8002156:	1d33      	adds	r3, r6, #4
 8002158:	cb0e      	ldmia	r3, {r1, r2, r3}
 800215a:	6838      	ldr	r0, [r7, #0]
 800215c:	f003 ff0b 	bl	8005f76 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f003 ff4b 	bl	8006002 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
 800216c:	2300      	movs	r3, #0
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	e035      	b.n	80021de <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	015b      	lsls	r3, r3, #5
 8002178:	4413      	add	r3, r2
 800217a:	3329      	adds	r3, #41	; 0x29
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	015b      	lsls	r3, r3, #5
 8002186:	4413      	add	r3, r2
 8002188:	3328      	adds	r3, #40	; 0x28
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	b291      	uxth	r1, r2
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	015b      	lsls	r3, r3, #5
 8002198:	4413      	add	r3, r2
 800219a:	3336      	adds	r3, #54	; 0x36
 800219c:	460a      	mov	r2, r1
 800219e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	015b      	lsls	r3, r3, #5
 80021a6:	4413      	add	r3, r2
 80021a8:	332b      	adds	r3, #43	; 0x2b
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	015b      	lsls	r3, r3, #5
 80021b4:	4413      	add	r3, r2
 80021b6:	3338      	adds	r3, #56	; 0x38
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	015b      	lsls	r3, r3, #5
 80021c2:	4413      	add	r3, r2
 80021c4:	333c      	adds	r3, #60	; 0x3c
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	3302      	adds	r3, #2
 80021d0:	015b      	lsls	r3, r3, #5
 80021d2:	4413      	add	r3, r2
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < 15U; i++)
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	3301      	adds	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	2b0e      	cmp	r3, #14
 80021e2:	d9c6      	bls.n	8002172 <HAL_PCD_Init+0x70>
  }

  for (i = 0U; i < 15U; i++)
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	e031      	b.n	800224e <HAL_PCD_Init+0x14c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	015b      	lsls	r3, r3, #5
 80021f0:	4413      	add	r3, r2
 80021f2:	f203 2329 	addw	r3, r3, #553	; 0x229
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	015b      	lsls	r3, r3, #5
 8002200:	4413      	add	r3, r2
 8002202:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	015b      	lsls	r3, r3, #5
 8002210:	4413      	add	r3, r2
 8002212:	f203 232b 	addw	r3, r3, #555	; 0x22b
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	015b      	lsls	r3, r3, #5
 8002220:	4413      	add	r3, r2
 8002222:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	015b      	lsls	r3, r3, #5
 8002230:	4413      	add	r3, r2
 8002232:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	3312      	adds	r3, #18
 8002240:	015b      	lsls	r3, r3, #5
 8002242:	4413      	add	r3, r2
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < 15U; i++)
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	3301      	adds	r3, #1
 800224c:	73fb      	strb	r3, [r7, #15]
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	2b0e      	cmp	r3, #14
 8002252:	d9ca      	bls.n	80021ea <HAL_PCD_Init+0xe8>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	687e      	ldr	r6, [r7, #4]
 800225c:	466d      	mov	r5, sp
 800225e:	f106 0410 	add.w	r4, r6, #16
 8002262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002266:	6823      	ldr	r3, [r4, #0]
 8002268:	602b      	str	r3, [r5, #0]
 800226a:	1d33      	adds	r3, r6, #4
 800226c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800226e:	6838      	ldr	r0, [r7, #0]
 8002270:	f003 fed4 	bl	800601c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d102      	bne.n	8002292 <HAL_PCD_Init+0x190>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fe5e 	bl	8002f4e <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d102      	bne.n	80022a0 <HAL_PCD_Init+0x19e>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 fe31 	bl	8002f02 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f004 ff04 	bl	80070b2 <USB_DevDisconnect>

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_PCD_Start+0x16>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e012      	b.n	80022f0 <HAL_PCD_Start+0x3c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_DevConnect(hpcd->Instance);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f004 fed4 	bl	8007084 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f003 fe59 	bl	8005f98 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f004 fee9 	bl	80070dc <USB_ReadInterrupts>
 800230a:	4603      	mov	r3, r0
 800230c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002314:	d102      	bne.n	800231c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fb40 	bl	800299c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f004 fedb 	bl	80070dc <USB_ReadInterrupts>
 8002326:	4603      	mov	r3, r0
 8002328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002330:	d112      	bne.n	8002358 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800233e:	b292      	uxth	r2, r2
 8002340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002344:	b292      	uxth	r2, r2
 8002346:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f008 fe09 	bl	800af62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002350:	2100      	movs	r1, #0
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f929 	bl	80025aa <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f004 febd 	bl	80070dc <USB_ReadInterrupts>
 8002362:	4603      	mov	r3, r0
 8002364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002368:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800236c:	d10b      	bne.n	8002386 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800237a:	b292      	uxth	r2, r2
 800237c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002380:	b292      	uxth	r2, r2
 8002382:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f004 fea6 	bl	80070dc <USB_ReadInterrupts>
 8002390:	4603      	mov	r3, r0
 8002392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239a:	d10b      	bne.n	80023b4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80023a8:	b292      	uxth	r2, r2
 80023aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023ae:	b292      	uxth	r2, r2
 80023b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f004 fe8f 	bl	80070dc <USB_ReadInterrupts>
 80023be:	4603      	mov	r3, r0
 80023c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c8:	d133      	bne.n	8002432 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80023d6:	b292      	uxth	r2, r2
 80023d8:	f022 0204 	bic.w	r2, r2, #4
 80023dc:	b292      	uxth	r2, r2
 80023de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80023ee:	b292      	uxth	r2, r2
 80023f0:	f022 0208 	bic.w	r2, r2, #8
 80023f4:	b292      	uxth	r2, r2
 80023f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 8002400:	2b01      	cmp	r3, #1
 8002402:	d107      	bne.n	8002414 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800240c:	2100      	movs	r1, #0
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f009 f85a 	bl	800b4c8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f008 fde1 	bl	800afdc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002426:	b292      	uxth	r2, r2
 8002428:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800242c:	b292      	uxth	r2, r2
 800242e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f004 fe50 	bl	80070dc <USB_ReadInterrupts>
 800243c:	4603      	mov	r3, r0
 800243e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002446:	d131      	bne.n	80024ac <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002454:	b292      	uxth	r2, r2
 8002456:	f042 0208 	orr.w	r2, r2, #8
 800245a:	b292      	uxth	r2, r2
 800245c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800246c:	b292      	uxth	r2, r2
 800246e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002472:	b292      	uxth	r2, r2
 8002474:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002484:	b292      	uxth	r2, r2
 8002486:	f042 0204 	orr.w	r2, r2, #4
 800248a:	b292      	uxth	r2, r2
 800248c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f004 fe21 	bl	80070dc <USB_ReadInterrupts>
 800249a:	4603      	mov	r3, r0
 800249c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a4:	d002      	beq.n	80024ac <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f008 fd7e 	bl	800afa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f004 fe13 	bl	80070dc <USB_ReadInterrupts>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024bc:	2b80      	cmp	r3, #128	; 0x80
 80024be:	d13f      	bne.n	8002540 <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80024cc:	b292      	uxth	r2, r2
 80024ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024d2:	b292      	uxth	r2, r2
 80024d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d12b      	bne.n	800253a <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80024ee:	b292      	uxth	r2, r2
 80024f0:	f042 0204 	orr.w	r2, r2, #4
 80024f4:	b292      	uxth	r2, r2
 80024f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002506:	b292      	uxth	r2, r2
 8002508:	f042 0208 	orr.w	r2, r2, #8
 800250c:	b292      	uxth	r2, r2
 800250e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002522:	b29b      	uxth	r3, r3
 8002524:	089b      	lsrs	r3, r3, #2
 8002526:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002530:	2101      	movs	r1, #1
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f008 ffc8 	bl	800b4c8 <HAL_PCDEx_LPM_Callback>
 8002538:	e002      	b.n	8002540 <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f008 fd34 	bl	800afa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f004 fdc9 	bl	80070dc <USB_ReadInterrupts>
 800254a:	4603      	mov	r3, r0
 800254c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002554:	d10e      	bne.n	8002574 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002562:	b292      	uxth	r2, r2
 8002564:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002568:	b292      	uxth	r2, r2
 800256a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f008 fce9 	bl	800af46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f004 fdaf 	bl	80070dc <USB_ReadInterrupts>
 800257e:	4603      	mov	r3, r0
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002588:	d10b      	bne.n	80025a2 <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002596:	b292      	uxth	r2, r2
 8002598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800259c:	b292      	uxth	r2, r2
 800259e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	460b      	mov	r3, r1
 80025b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_PCD_SetAddress+0x1a>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e013      	b.n	80025ec <HAL_PCD_SetAddress+0x42>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	78fa      	ldrb	r2, [r7, #3]
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f004 fd3d 	bl	800705c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	4608      	mov	r0, r1
 80025fe:	4611      	mov	r1, r2
 8002600:	461a      	mov	r2, r3
 8002602:	4603      	mov	r3, r0
 8002604:	70fb      	strb	r3, [r7, #3]
 8002606:	460b      	mov	r3, r1
 8002608:	803b      	strh	r3, [r7, #0]
 800260a:	4613      	mov	r3, r2
 800260c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002616:	2b00      	cmp	r3, #0
 8002618:	da0b      	bge.n	8002632 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	015b      	lsls	r3, r3, #5
 8002622:	3328      	adds	r3, #40	; 0x28
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	4413      	add	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	705a      	strb	r2, [r3, #1]
 8002630:	e00b      	b.n	800264a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	015b      	lsls	r3, r3, #5
 800263a:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & 0xFU;
 800264a:	78fb      	ldrb	r3, [r7, #3]
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	b2da      	uxtb	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002656:	883a      	ldrh	r2, [r7, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	78ba      	ldrb	r2, [r7, #2]
 8002660:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	785b      	ldrb	r3, [r3, #1]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d004      	beq.n	8002674 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002674:	78bb      	ldrb	r3, [r7, #2]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d102      	bne.n	8002680 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_PCD_EP_Open+0x9a>
 800268a:	2302      	movs	r3, #2
 800268c:	e00e      	b.n	80026ac <HAL_PCD_EP_Open+0xb8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68f9      	ldr	r1, [r7, #12]
 800269c:	4618      	mov	r0, r3
 800269e:	f003 fce1 	bl	8006064 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return ret;
 80026aa:	7afb      	ldrb	r3, [r7, #11]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	da0b      	bge.n	80026e0 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	015b      	lsls	r3, r3, #5
 80026d0:	3328      	adds	r3, #40	; 0x28
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	705a      	strb	r2, [r3, #1]
 80026de:	e00b      	b.n	80026f8 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	015b      	lsls	r3, r3, #5
 80026e8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	4413      	add	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & 0xFU;
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_PCD_EP_Close+0x5e>
 800270e:	2302      	movs	r3, #2
 8002710:	e00e      	b.n	8002730 <HAL_PCD_EP_Close+0x7c>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68f9      	ldr	r1, [r7, #12]
 8002720:	4618      	mov	r0, r3
 8002722:	f003 ff81 	bl	8006628 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	460b      	mov	r3, r1
 8002746:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8002748:	7afb      	ldrb	r3, [r7, #11]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	015b      	lsls	r3, r3, #5
 8002750:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	4413      	add	r3, r2
 8002758:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2200      	movs	r2, #0
 800276a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2200      	movs	r2, #0
 8002770:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0xFU;
 8002772:	7afb      	ldrb	r3, [r7, #11]
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	b2da      	uxtb	r2, r3
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0xFU) == 0U)
 800277e:	7afb      	ldrb	r3, [r7, #11]
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	2b00      	cmp	r3, #0
 8002786:	d106      	bne.n	8002796 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6979      	ldr	r1, [r7, #20]
 800278e:	4618      	mov	r0, r3
 8002790:	f004 f8e0 	bl	8006954 <USB_EPStartXfer>
 8002794:	e005      	b.n	80027a2 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6979      	ldr	r1, [r7, #20]
 800279c:	4618      	mov	r0, r3
 800279e:	f004 f8d9 	bl	8006954 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	70fb      	strb	r3, [r7, #3]
  return (uint16_t)hpcd->OUT_ep[ep_addr & 0xFU].xfer_count;
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	3312      	adds	r3, #18
 80027c2:	015b      	lsls	r3, r3, #5
 80027c4:	4413      	add	r3, r2
 80027c6:	3304      	adds	r3, #4
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	b29b      	uxth	r3, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	460b      	mov	r3, r1
 80027e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80027e8:	7afb      	ldrb	r3, [r7, #11]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	015b      	lsls	r3, r3, #5
 80027f0:	3328      	adds	r3, #40	; 0x28
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4413      	add	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2200      	movs	r2, #0
 8002808:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2201      	movs	r2, #1
 800280e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0xFU;
 8002810:	7afb      	ldrb	r3, [r7, #11]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	b2da      	uxtb	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0xFU) == 0U)
 800281c:	7afb      	ldrb	r3, [r7, #11]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6979      	ldr	r1, [r7, #20]
 800282c:	4618      	mov	r0, r3
 800282e:	f004 f891 	bl	8006954 <USB_EPStartXfer>
 8002832:	e005      	b.n	8002840 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6979      	ldr	r1, [r7, #20]
 800283a:	4618      	mov	r0, r3
 800283c:	f004 f88a 	bl	8006954 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	460b      	mov	r3, r1
 8002854:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	f003 020f 	and.w	r2, r3, #15
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	429a      	cmp	r2, r3
 8002862:	d901      	bls.n	8002868 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e046      	b.n	80028f6 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800286c:	2b00      	cmp	r3, #0
 800286e:	da0b      	bge.n	8002888 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	015b      	lsls	r3, r3, #5
 8002878:	3328      	adds	r3, #40	; 0x28
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	705a      	strb	r2, [r3, #1]
 8002886:	e009      	b.n	800289c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	015b      	lsls	r3, r3, #5
 800288c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	4413      	add	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2201      	movs	r2, #1
 80028a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_PCD_EP_SetStall+0x72>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e01c      	b.n	80028f6 <HAL_PCD_EP_SetStall+0xac>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68f9      	ldr	r1, [r7, #12]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f004 faf6 	bl	8006ebc <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d108      	bne.n	80028ec <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 80028e4:	4619      	mov	r1, r3
 80028e6:	4610      	mov	r0, r2
 80028e8:	f004 fc08 	bl	80070fc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	460b      	mov	r3, r1
 8002908:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	f003 020f 	and.w	r2, r3, #15
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	429a      	cmp	r2, r3
 8002916:	d901      	bls.n	800291c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e03a      	b.n	8002992 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800291c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002920:	2b00      	cmp	r3, #0
 8002922:	da0b      	bge.n	800293c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	015b      	lsls	r3, r3, #5
 800292c:	3328      	adds	r3, #40	; 0x28
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	705a      	strb	r2, [r3, #1]
 800293a:	e00b      	b.n	8002954 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	015b      	lsls	r3, r3, #5
 8002944:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	4413      	add	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	b2da      	uxtb	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_PCD_EP_ClrStall+0x76>
 8002970:	2302      	movs	r3, #2
 8002972:	e00e      	b.n	8002992 <HAL_PCD_EP_ClrStall+0x94>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68f9      	ldr	r1, [r7, #12]
 8002982:	4618      	mov	r0, r3
 8002984:	f004 fadc 	bl	8006f40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b089      	sub	sp, #36	; 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029a4:	e25e      	b.n	8002e64 <PCD_EP_ISR_Handler+0x4c8>
  {
    wIstr = hpcd->Instance->ISTR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029ae:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80029b0:	8afb      	ldrh	r3, [r7, #22]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80029ba:	7d7b      	ldrb	r3, [r7, #21]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f040 812c 	bne.w	8002c1a <PCD_EP_ISR_Handler+0x27e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80029c2:	8afb      	ldrh	r3, [r7, #22]
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d14b      	bne.n	8002a64 <PCD_EP_ISR_Handler+0xc8>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029dc:	b29c      	uxth	r4, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4622      	mov	r2, r4
 80029e4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3328      	adds	r3, #40	; 0x28
 80029ea:	613b      	str	r3, [r7, #16]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4413      	add	r3, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	4413      	add	r3, r2
 8002a06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	441a      	add	r2, r3
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a22:	2100      	movs	r1, #0
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f008 fa77 	bl	800af18 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8216 	beq.w	8002e64 <PCD_EP_ISR_Handler+0x4c8>
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f040 8211 	bne.w	8002e64 <PCD_EP_ISR_Handler+0x4c8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	b292      	uxth	r2, r2
 8002a56:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a62:	e1ff      	b.n	8002e64 <PCD_EP_ISR_Handler+0x4c8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002a6a:	613b      	str	r3, [r7, #16]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	81fb      	strh	r3, [r7, #14]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002a74:	89fb      	ldrh	r3, [r7, #14]
 8002a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d02f      	beq.n	8002ade <PCD_EP_ISR_Handler+0x142>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4413      	add	r3, r2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	4413      	add	r3, r2
 8002a98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f503 6186 	add.w	r1, r3, #1072	; 0x430
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	88da      	ldrh	r2, [r3, #6]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	f004 fb6c 	bl	8007196 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002aca:	4013      	ands	r3, r2
 8002acc:	b29c      	uxth	r4, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4622      	mov	r2, r4
 8002ad4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f008 f9f4 	bl	800aec4 <HAL_PCD_SetupStageCallback>
 8002adc:	e1c2      	b.n	8002e64 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ade:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f280 81be 	bge.w	8002e64 <PCD_EP_ISR_Handler+0x4c8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002af4:	4013      	ands	r3, r2
 8002af6:	b29c      	uxth	r4, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4622      	mov	r2, r4
 8002afe:	801a      	strh	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 0U)
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d011      	beq.n	8002b54 <PCD_EP_ISR_Handler+0x1b8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	6959      	ldr	r1, [r3, #20]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	88da      	ldrh	r2, [r3, #6]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	f004 fb28 	bl	8007196 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	441a      	add	r2, r3
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	615a      	str	r2, [r3, #20]

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002b54:	2100      	movs	r1, #0
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f008 f9c6 	bl	800aee8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	461c      	mov	r4, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	441c      	add	r4, r3
 8002b6e:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d111      	bne.n	8002ba0 <PCD_EP_ISR_Handler+0x204>
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	881a      	ldrh	r2, [r3, #0]
 8002b80:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8002b84:	4013      	ands	r3, r2
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	801a      	strh	r2, [r3, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	801a      	strh	r2, [r3, #0]
 8002b9e:	e026      	b.n	8002bee <PCD_EP_ISR_Handler+0x252>
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b3d      	cmp	r3, #61	; 0x3d
 8002ba6:	d813      	bhi.n	8002bd0 <PCD_EP_ISR_Handler+0x234>
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	085b      	lsrs	r3, r3, #1
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <PCD_EP_ISR_Handler+0x226>
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	029b      	lsls	r3, r3, #10
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	801a      	strh	r2, [r3, #0]
 8002bce:	e00e      	b.n	8002bee <PCD_EP_ISR_Handler+0x252>
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	61bb      	str	r3, [r7, #24]
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	029b      	lsls	r3, r3, #10
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfe:	b29c      	uxth	r4, r3
 8002c00:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002c04:	b29c      	uxth	r4, r3
 8002c06:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002c0a:	b29c      	uxth	r4, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4b9b      	ldr	r3, [pc, #620]	; (8002e80 <PCD_EP_ISR_Handler+0x4e4>)
 8002c12:	4323      	orrs	r3, r4
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	8013      	strh	r3, [r2, #0]
 8002c18:	e124      	b.n	8002e64 <PCD_EP_ISR_Handler+0x4c8>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	7d7b      	ldrb	r3, [r7, #21]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	881b      	ldrh	r3, [r3, #0]
 8002c28:	81fb      	strh	r3, [r7, #14]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f280 80c9 	bge.w	8002dc6 <PCD_EP_ISR_Handler+0x42a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	7d7b      	ldrb	r3, [r7, #21]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c48:	4013      	ands	r3, r2
 8002c4a:	b29c      	uxth	r4, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	7d7b      	ldrb	r3, [r7, #21]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	4622      	mov	r2, r4
 8002c5a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002c5c:	7d7b      	ldrb	r3, [r7, #21]
 8002c5e:	015b      	lsls	r3, r3, #5
 8002c60:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	7b1b      	ldrb	r3, [r3, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d11f      	bne.n	8002cb2 <PCD_EP_ISR_Handler+0x316>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4413      	add	r3, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c96:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002c98:	8bfb      	ldrh	r3, [r7, #30]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d06e      	beq.n	8002d7c <PCD_EP_ISR_Handler+0x3e0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	6959      	ldr	r1, [r3, #20]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	88da      	ldrh	r2, [r3, #6]
 8002caa:	8bfb      	ldrh	r3, [r7, #30]
 8002cac:	f004 fa73 	bl	8007196 <USB_ReadPMA>
 8002cb0:	e064      	b.n	8002d7c <PCD_EP_ISR_Handler+0x3e0>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d01f      	beq.n	8002d0c <PCD_EP_ISR_Handler+0x370>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4413      	add	r3, r2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cf0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002cf2:	8bfb      	ldrh	r3, [r7, #30]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d028      	beq.n	8002d4a <PCD_EP_ISR_Handler+0x3ae>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	6959      	ldr	r1, [r3, #20]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	891a      	ldrh	r2, [r3, #8]
 8002d04:	8bfb      	ldrh	r3, [r7, #30]
 8002d06:	f004 fa46 	bl	8007196 <USB_ReadPMA>
 8002d0a:	e01e      	b.n	8002d4a <PCD_EP_ISR_Handler+0x3ae>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4413      	add	r3, r2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	4413      	add	r3, r2
 8002d26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d30:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002d32:	8bfb      	ldrh	r3, [r7, #30]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <PCD_EP_ISR_Handler+0x3ae>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	6959      	ldr	r1, [r3, #20]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	895a      	ldrh	r2, [r3, #10]
 8002d44:	8bfb      	ldrh	r3, [r7, #30]
 8002d46:	f004 fa26 	bl	8007196 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d64:	b29c      	uxth	r4, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	441a      	add	r2, r3
 8002d74:	4b43      	ldr	r3, [pc, #268]	; (8002e84 <PCD_EP_ISR_Handler+0x4e8>)
 8002d76:	4323      	orrs	r3, r4
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	69da      	ldr	r2, [r3, #28]
 8002d80:	8bfb      	ldrh	r3, [r7, #30]
 8002d82:	441a      	add	r2, r3
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	695a      	ldr	r2, [r3, #20]
 8002d8c:	8bfb      	ldrh	r3, [r7, #30]
 8002d8e:	441a      	add	r2, r3
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d004      	beq.n	8002da6 <PCD_EP_ISR_Handler+0x40a>
 8002d9c:	8bfa      	ldrh	r2, [r7, #30]
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d206      	bcs.n	8002db4 <PCD_EP_ISR_Handler+0x418>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	4619      	mov	r1, r3
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f008 f89b 	bl	800aee8 <HAL_PCD_DataOutStageCallback>
 8002db2:	e008      	b.n	8002dc6 <PCD_EP_ISR_Handler+0x42a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	7819      	ldrb	r1, [r3, #0]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	695a      	ldr	r2, [r3, #20]
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff fcb9 	bl	8002738 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002dc6:	89fb      	ldrh	r3, [r7, #14]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d049      	beq.n	8002e64 <PCD_EP_ISR_Handler+0x4c8>
      {
        ep = &hpcd->IN_ep[epindex];
 8002dd0:	7d7b      	ldrb	r3, [r7, #21]
 8002dd2:	015b      	lsls	r3, r3, #5
 8002dd4:	3328      	adds	r3, #40	; 0x28
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	7d7b      	ldrb	r3, [r7, #21]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df4:	b29c      	uxth	r4, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	7d7b      	ldrb	r3, [r7, #21]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	4622      	mov	r2, r4
 8002e04:	801a      	strh	r2, [r3, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4413      	add	r3, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	441a      	add	r2, r3
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d106      	bne.n	8002e52 <PCD_EP_ISR_Handler+0x4b6>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f008 f864 	bl	800af18 <HAL_PCD_DataInStageCallback>
 8002e50:	e008      	b.n	8002e64 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	7819      	ldrb	r1, [r3, #0]
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff fcba 	bl	80027d8 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f6ff ad98 	blt.w	80029a6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3724      	adds	r7, #36	; 0x24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd90      	pop	{r4, r7, pc}
 8002e80:	ffff8080 	.word	0xffff8080
 8002e84:	ffff80c0 	.word	0xffff80c0

08002e88 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	607b      	str	r3, [r7, #4]
 8002e92:	460b      	mov	r3, r1
 8002e94:	817b      	strh	r3, [r7, #10]
 8002e96:	4613      	mov	r3, r2
 8002e98:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e9a:	897b      	ldrh	r3, [r7, #10]
 8002e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8002ea6:	897b      	ldrh	r3, [r7, #10]
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	015b      	lsls	r3, r3, #5
 8002eae:	3328      	adds	r3, #40	; 0x28
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	e006      	b.n	8002ec6 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002eb8:	897b      	ldrh	r3, [r7, #10]
 8002eba:	015b      	lsls	r3, r3, #5
 8002ebc:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ec6:	893b      	ldrh	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d107      	bne.n	8002edc <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	80da      	strh	r2, [r3, #6]
 8002eda:	e00b      	b.n	8002ef4 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	0c1b      	lsrs	r3, r3, #16
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b085      	sub	sp, #20
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	f043 0302 	orr.w	r3, r3, #2
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b085      	sub	sp, #20
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
  hpcd->LPM_State = LPM_L0;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	f043 0302 	orr.w	r3, r3, #2
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fa8:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <HAL_PWREx_GetVoltageRange+0x18>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40007000 	.word	0x40007000

08002fc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fce:	d130      	bne.n	8003032 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fd0:	4b23      	ldr	r3, [pc, #140]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fdc:	d038      	beq.n	8003050 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fde:	4a20      	ldr	r2, [pc, #128]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe0:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fe8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fee:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2232      	movs	r2, #50	; 0x32
 8002ff4:	fb02 f303 	mul.w	r3, r2, r3
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	0c9b      	lsrs	r3, r3, #18
 8003000:	3301      	adds	r3, #1
 8003002:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003004:	e002      	b.n	800300c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	3b01      	subs	r3, #1
 800300a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800300c:	4b14      	ldr	r3, [pc, #80]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003018:	d102      	bne.n	8003020 <HAL_PWREx_ControlVoltageScaling+0x60>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f2      	bne.n	8003006 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003020:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302c:	d110      	bne.n	8003050 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e00f      	b.n	8003052 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003032:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800303a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303e:	d007      	beq.n	8003050 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003040:	4a07      	ldr	r2, [pc, #28]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800304a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800304e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40007000 	.word	0x40007000
 8003064:	20000594 	.word	0x20000594
 8003068:	431bde83 	.word	0x431bde83

0800306c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003070:	4a05      	ldr	r2, [pc, #20]	; (8003088 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800307a:	6053      	str	r3, [r2, #4]
}
 800307c:	bf00      	nop
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40007000 	.word	0x40007000

0800308c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_oscsource;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e395      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800309e:	4ba3      	ldr	r3, [pc, #652]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030a8:	4ba0      	ldr	r3, [pc, #640]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80df 	beq.w	800327e <HAL_RCC_OscConfig+0x1f2>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <HAL_RCC_OscConfig+0x4a>
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b0c      	cmp	r3, #12
 80030ca:	f040 8086 	bne.w	80031da <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	f040 8082 	bne.w	80031da <HAL_RCC_OscConfig+0x14e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030d6:	4b95      	ldr	r3, [pc, #596]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_RCC_OscConfig+0x62>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e36d      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1a      	ldr	r2, [r3, #32]
 80030f2:	4b8e      	ldr	r3, [pc, #568]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <HAL_RCC_OscConfig+0x7c>
 80030fe:	4b8b      	ldr	r3, [pc, #556]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003106:	e005      	b.n	8003114 <HAL_RCC_OscConfig+0x88>
 8003108:	4b88      	ldr	r3, [pc, #544]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 800310a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800310e:	091b      	lsrs	r3, r3, #4
 8003110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003114:	429a      	cmp	r2, r3
 8003116:	d923      	bls.n	8003160 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fd0d 	bl	8003b3c <RCC_SetFlashLatencyFromMSIRange>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e34e      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800312c:	4a7f      	ldr	r2, [pc, #508]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 800312e:	4b7f      	ldr	r3, [pc, #508]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f043 0308 	orr.w	r3, r3, #8
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	497c      	ldr	r1, [pc, #496]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 800313a:	4b7c      	ldr	r3, [pc, #496]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	4313      	orrs	r3, r2
 8003148:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800314a:	4978      	ldr	r1, [pc, #480]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 800314c:	4b77      	ldr	r3, [pc, #476]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
 800315e:	e022      	b.n	80031a6 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003160:	4a72      	ldr	r2, [pc, #456]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 8003162:	4b72      	ldr	r3, [pc, #456]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f043 0308 	orr.w	r3, r3, #8
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	496f      	ldr	r1, [pc, #444]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 800316e:	4b6f      	ldr	r3, [pc, #444]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800317e:	496b      	ldr	r1, [pc, #428]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 8003180:	4b6a      	ldr	r3, [pc, #424]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	4313      	orrs	r3, r2
 8003190:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fcd0 	bl	8003b3c <RCC_SetFlashLatencyFromMSIRange>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e311      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031a6:	f000 fbf5 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 80031aa:	4601      	mov	r1, r0
 80031ac:	4b5f      	ldr	r3, [pc, #380]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	4a5e      	ldr	r2, [pc, #376]	; (8003330 <HAL_RCC_OscConfig+0x2a4>)
 80031b8:	5cd3      	ldrb	r3, [r2, r3]
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	fa21 f303 	lsr.w	r3, r1, r3
 80031c2:	4a5c      	ldr	r2, [pc, #368]	; (8003334 <HAL_RCC_OscConfig+0x2a8>)
 80031c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f7fd ffb0 	bl	800112c <HAL_InitTick>
 80031cc:	4603      	mov	r3, r0
 80031ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d052      	beq.n	800327c <HAL_RCC_OscConfig+0x1f0>
        {
          return status;
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	e2f7      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d032      	beq.n	8003248 <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031e2:	4a52      	ldr	r2, [pc, #328]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 80031e4:	4b51      	ldr	r3, [pc, #324]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031ee:	f7fd ffcf 	bl	8001190 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031f6:	f7fd ffcb 	bl	8001190 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e2e0      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003208:	4b48      	ldr	r3, [pc, #288]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCC_OscConfig+0x16a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003214:	4a45      	ldr	r2, [pc, #276]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 8003216:	4b45      	ldr	r3, [pc, #276]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f043 0308 	orr.w	r3, r3, #8
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4942      	ldr	r1, [pc, #264]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 8003222:	4b42      	ldr	r3, [pc, #264]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003232:	493e      	ldr	r1, [pc, #248]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 8003234:	4b3d      	ldr	r3, [pc, #244]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	021b      	lsls	r3, r3, #8
 8003242:	4313      	orrs	r3, r2
 8003244:	604b      	str	r3, [r1, #4]
 8003246:	e01a      	b.n	800327e <HAL_RCC_OscConfig+0x1f2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003248:	4a38      	ldr	r2, [pc, #224]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 800324a:	4b38      	ldr	r3, [pc, #224]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 0301 	bic.w	r3, r3, #1
 8003252:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003254:	f7fd ff9c 	bl	8001190 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800325c:	f7fd ff98 	bl	8001190 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e2ad      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800326e:	4b2f      	ldr	r3, [pc, #188]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x1d0>
 800327a:	e000      	b.n	800327e <HAL_RCC_OscConfig+0x1f2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800327c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d072      	beq.n	8003370 <HAL_RCC_OscConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	2b08      	cmp	r3, #8
 800328e:	d005      	beq.n	800329c <HAL_RCC_OscConfig+0x210>
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	2b0c      	cmp	r3, #12
 8003294:	d10e      	bne.n	80032b4 <HAL_RCC_OscConfig+0x228>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b03      	cmp	r3, #3
 800329a:	d10b      	bne.n	80032b4 <HAL_RCC_OscConfig+0x228>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329c:	4b23      	ldr	r3, [pc, #140]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d062      	beq.n	800336e <HAL_RCC_OscConfig+0x2e2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d15e      	bne.n	800336e <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e28a      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032bc:	d106      	bne.n	80032cc <HAL_RCC_OscConfig+0x240>
 80032be:	4a1b      	ldr	r2, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 80032c0:	4b1a      	ldr	r3, [pc, #104]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e01d      	b.n	8003308 <HAL_RCC_OscConfig+0x27c>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x264>
 80032d6:	4a15      	ldr	r2, [pc, #84]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4a12      	ldr	r2, [pc, #72]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 80032e4:	4b11      	ldr	r3, [pc, #68]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e00b      	b.n	8003308 <HAL_RCC_OscConfig+0x27c>
 80032f0:	4a0e      	ldr	r2, [pc, #56]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 80032f2:	4b0e      	ldr	r3, [pc, #56]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4a0b      	ldr	r2, [pc, #44]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_RCC_OscConfig+0x2a0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d01a      	beq.n	8003346 <HAL_RCC_OscConfig+0x2ba>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7fd ff3e 	bl	8001190 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003316:	e00f      	b.n	8003338 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003318:	f7fd ff3a 	bl	8001190 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d908      	bls.n	8003338 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e24f      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000
 8003330:	0800b840 	.word	0x0800b840
 8003334:	20000594 	.word	0x20000594
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003338:	4bae      	ldr	r3, [pc, #696]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0e9      	beq.n	8003318 <HAL_RCC_OscConfig+0x28c>
 8003344:	e014      	b.n	8003370 <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003346:	f7fd ff23 	bl	8001190 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x2d4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800334e:	f7fd ff1f 	bl	8001190 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b64      	cmp	r3, #100	; 0x64
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e234      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003360:	4ba4      	ldr	r3, [pc, #656]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f0      	bne.n	800334e <HAL_RCC_OscConfig+0x2c2>
 800336c:	e000      	b.n	8003370 <HAL_RCC_OscConfig+0x2e4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d060      	beq.n	800343e <HAL_RCC_OscConfig+0x3b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b04      	cmp	r3, #4
 8003380:	d005      	beq.n	800338e <HAL_RCC_OscConfig+0x302>
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	2b0c      	cmp	r3, #12
 8003386:	d119      	bne.n	80033bc <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d116      	bne.n	80033bc <HAL_RCC_OscConfig+0x330>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800338e:	4b99      	ldr	r3, [pc, #612]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003396:	2b00      	cmp	r3, #0
 8003398:	d005      	beq.n	80033a6 <HAL_RCC_OscConfig+0x31a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e211      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a6:	4993      	ldr	r1, [pc, #588]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 80033a8:	4b92      	ldr	r3, [pc, #584]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	061b      	lsls	r3, r3, #24
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033ba:	e040      	b.n	800343e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d023      	beq.n	800340c <HAL_RCC_OscConfig+0x380>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c4:	4a8b      	ldr	r2, [pc, #556]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 80033c6:	4b8b      	ldr	r3, [pc, #556]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fd fede 	bl	8001190 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d8:	f7fd feda 	bl	8001190 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e1ef      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033ea:	4b82      	ldr	r3, [pc, #520]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x34c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f6:	497f      	ldr	r1, [pc, #508]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 80033f8:	4b7e      	ldr	r3, [pc, #504]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	061b      	lsls	r3, r3, #24
 8003406:	4313      	orrs	r3, r2
 8003408:	604b      	str	r3, [r1, #4]
 800340a:	e018      	b.n	800343e <HAL_RCC_OscConfig+0x3b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340c:	4a79      	ldr	r2, [pc, #484]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 800340e:	4b79      	ldr	r3, [pc, #484]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003418:	f7fd feba 	bl	8001190 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003420:	f7fd feb6 	bl	8001190 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e1cb      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003432:	4b70      	ldr	r3, [pc, #448]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f0      	bne.n	8003420 <HAL_RCC_OscConfig+0x394>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d03c      	beq.n	80034c4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d01c      	beq.n	800348c <HAL_RCC_OscConfig+0x400>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003452:	4a68      	ldr	r2, [pc, #416]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 8003454:	4b67      	ldr	r3, [pc, #412]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 8003456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003462:	f7fd fe95 	bl	8001190 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346a:	f7fd fe91 	bl	8001190 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e1a6      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800347c:	4b5d      	ldr	r3, [pc, #372]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 800347e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0ef      	beq.n	800346a <HAL_RCC_OscConfig+0x3de>
 800348a:	e01b      	b.n	80034c4 <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800348c:	4a59      	ldr	r2, [pc, #356]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 800348e:	4b59      	ldr	r3, [pc, #356]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 8003490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349c:	f7fd fe78 	bl	8001190 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a4:	f7fd fe74 	bl	8001190 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e189      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034b6:	4b4f      	ldr	r3, [pc, #316]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 80034b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1ef      	bne.n	80034a4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80a5 	beq.w	800361c <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034d2:	2300      	movs	r3, #0
 80034d4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034d6:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10d      	bne.n	80034fe <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e2:	4a44      	ldr	r2, [pc, #272]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 80034e4:	4b43      	ldr	r3, [pc, #268]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ec:	6593      	str	r3, [r2, #88]	; 0x58
 80034ee:	4b41      	ldr	r3, [pc, #260]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 80034f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fa:	2301      	movs	r3, #1
 80034fc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034fe:	4b3e      	ldr	r3, [pc, #248]	; (80035f8 <HAL_RCC_OscConfig+0x56c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d118      	bne.n	800353c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800350a:	4a3b      	ldr	r2, [pc, #236]	; (80035f8 <HAL_RCC_OscConfig+0x56c>)
 800350c:	4b3a      	ldr	r3, [pc, #232]	; (80035f8 <HAL_RCC_OscConfig+0x56c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003516:	f7fd fe3b 	bl	8001190 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800351e:	f7fd fe37 	bl	8001190 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e14c      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003530:	4b31      	ldr	r3, [pc, #196]	; (80035f8 <HAL_RCC_OscConfig+0x56c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f0      	beq.n	800351e <HAL_RCC_OscConfig+0x492>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d108      	bne.n	8003556 <HAL_RCC_OscConfig+0x4ca>
 8003544:	4a2b      	ldr	r2, [pc, #172]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 8003546:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003554:	e024      	b.n	80035a0 <HAL_RCC_OscConfig+0x514>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b05      	cmp	r3, #5
 800355c:	d110      	bne.n	8003580 <HAL_RCC_OscConfig+0x4f4>
 800355e:	4a25      	ldr	r2, [pc, #148]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 8003560:	4b24      	ldr	r3, [pc, #144]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003566:	f043 0304 	orr.w	r3, r3, #4
 800356a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800356e:	4a21      	ldr	r2, [pc, #132]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 8003570:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800357e:	e00f      	b.n	80035a0 <HAL_RCC_OscConfig+0x514>
 8003580:	4a1c      	ldr	r2, [pc, #112]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 8003582:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003588:	f023 0301 	bic.w	r3, r3, #1
 800358c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003590:	4a18      	ldr	r2, [pc, #96]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 8003592:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003598:	f023 0304 	bic.w	r3, r3, #4
 800359c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d016      	beq.n	80035d6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a8:	f7fd fdf2 	bl	8001190 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ae:	e00a      	b.n	80035c6 <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b0:	f7fd fdee 	bl	8001190 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e101      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_RCC_OscConfig+0x568>)
 80035c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0ed      	beq.n	80035b0 <HAL_RCC_OscConfig+0x524>
 80035d4:	e019      	b.n	800360a <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d6:	f7fd fddb 	bl	8001190 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035dc:	e00e      	b.n	80035fc <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035de:	f7fd fdd7 	bl	8001190 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d905      	bls.n	80035fc <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e0ea      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035fc:	4b75      	ldr	r3, [pc, #468]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1e9      	bne.n	80035de <HAL_RCC_OscConfig+0x552>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800360a:	7ffb      	ldrb	r3, [r7, #31]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d105      	bne.n	800361c <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003610:	4a70      	ldr	r2, [pc, #448]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 8003612:	4b70      	ldr	r3, [pc, #448]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 8003614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800361a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d03c      	beq.n	80036a2 <HAL_RCC_OscConfig+0x616>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01c      	beq.n	800366a <HAL_RCC_OscConfig+0x5de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003630:	4a68      	ldr	r2, [pc, #416]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 8003632:	4b68      	ldr	r3, [pc, #416]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 8003634:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003640:	f7fd fda6 	bl	8001190 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x5ce>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003648:	f7fd fda2 	bl	8001190 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e0b7      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800365a:	4b5e      	ldr	r3, [pc, #376]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 800365c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ef      	beq.n	8003648 <HAL_RCC_OscConfig+0x5bc>
 8003668:	e01b      	b.n	80036a2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800366a:	4a5a      	ldr	r2, [pc, #360]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 800366c:	4b59      	ldr	r3, [pc, #356]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 800366e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003672:	f023 0301 	bic.w	r3, r3, #1
 8003676:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367a:	f7fd fd89 	bl	8001190 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003682:	f7fd fd85 	bl	8001190 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e09a      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003694:	4b4f      	ldr	r3, [pc, #316]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 8003696:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1ef      	bne.n	8003682 <HAL_RCC_OscConfig+0x5f6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 808e 	beq.w	80037c8 <HAL_RCC_OscConfig+0x73c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	f000 8088 	beq.w	80037c4 <HAL_RCC_OscConfig+0x738>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d155      	bne.n	8003768 <HAL_RCC_OscConfig+0x6dc>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036bc:	4a45      	ldr	r2, [pc, #276]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 80036be:	4b45      	ldr	r3, [pc, #276]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fd fd62 	bl	8001190 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d0:	f7fd fd5e 	bl	8001190 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e073      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036e2:	4b3c      	ldr	r3, [pc, #240]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x644>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ee:	4939      	ldr	r1, [pc, #228]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	3b01      	subs	r3, #1
 80036f6:	011a      	lsls	r2, r3, #4
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fc:	021b      	lsls	r3, r3, #8
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370a:	085b      	lsrs	r3, r3, #1
 800370c:	3b01      	subs	r3, #1
 800370e:	055b      	lsls	r3, r3, #21
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	085b      	lsrs	r3, r3, #1
 8003718:	3b01      	subs	r3, #1
 800371a:	065b      	lsls	r3, r3, #25
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	06db      	lsls	r3, r3, #27
 8003724:	4313      	orrs	r3, r2
 8003726:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003728:	4a2a      	ldr	r2, [pc, #168]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 800372a:	4b2a      	ldr	r3, [pc, #168]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003732:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003734:	4a27      	ldr	r2, [pc, #156]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 8003736:	4b27      	ldr	r3, [pc, #156]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800373e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fd fd26 	bl	8001190 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x6ce>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003748:	f7fd fd22 	bl	8001190 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x6ce>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e037      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375a:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x6bc>
 8003766:	e02f      	b.n	80037c8 <HAL_RCC_OscConfig+0x73c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003768:	4a1a      	ldr	r2, [pc, #104]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 800376a:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003772:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003774:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d105      	bne.n	800378c <HAL_RCC_OscConfig+0x700>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003780:	4a14      	ldr	r2, [pc, #80]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 8003782:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f023 0303 	bic.w	r3, r3, #3
 800378a:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800378c:	4a11      	ldr	r2, [pc, #68]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 800378e:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800379a:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7fd fcf8 	bl	8001190 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x72a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a4:	f7fd fcf4 	bl	8001190 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x72a>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e009      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <HAL_RCC_OscConfig+0x748>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x718>
 80037c2:	e001      	b.n	80037c8 <HAL_RCC_OscConfig+0x73c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <HAL_RCC_OscConfig+0x73e>
    }
  }
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3720      	adds	r7, #32
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000

080037d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0c6      	b.n	800397a <HAL_RCC_ClockConfig+0x1a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037ec:	4b65      	ldr	r3, [pc, #404]	; (8003984 <HAL_RCC_ClockConfig+0x1ac>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0207 	and.w	r2, r3, #7
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d210      	bcs.n	800381c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fa:	4962      	ldr	r1, [pc, #392]	; (8003984 <HAL_RCC_ClockConfig+0x1ac>)
 80037fc:	4b61      	ldr	r3, [pc, #388]	; (8003984 <HAL_RCC_ClockConfig+0x1ac>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f023 0207 	bic.w	r2, r3, #7
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380a:	4b5e      	ldr	r3, [pc, #376]	; (8003984 <HAL_RCC_ClockConfig+0x1ac>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0207 	and.w	r2, r3, #7
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d001      	beq.n	800381c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0ae      	b.n	800397a <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d04c      	beq.n	80038c2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d107      	bne.n	8003840 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003830:	4b55      	ldr	r3, [pc, #340]	; (8003988 <HAL_RCC_ClockConfig+0x1b0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d121      	bne.n	8003880 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e09c      	b.n	800397a <HAL_RCC_ClockConfig+0x1a2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d107      	bne.n	8003858 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003848:	4b4f      	ldr	r3, [pc, #316]	; (8003988 <HAL_RCC_ClockConfig+0x1b0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d115      	bne.n	8003880 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e090      	b.n	800397a <HAL_RCC_ClockConfig+0x1a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d107      	bne.n	8003870 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003860:	4b49      	ldr	r3, [pc, #292]	; (8003988 <HAL_RCC_ClockConfig+0x1b0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d109      	bne.n	8003880 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e084      	b.n	800397a <HAL_RCC_ClockConfig+0x1a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003870:	4b45      	ldr	r3, [pc, #276]	; (8003988 <HAL_RCC_ClockConfig+0x1b0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e07c      	b.n	800397a <HAL_RCC_ClockConfig+0x1a2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003880:	4941      	ldr	r1, [pc, #260]	; (8003988 <HAL_RCC_ClockConfig+0x1b0>)
 8003882:	4b41      	ldr	r3, [pc, #260]	; (8003988 <HAL_RCC_ClockConfig+0x1b0>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f023 0203 	bic.w	r2, r3, #3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	4313      	orrs	r3, r2
 8003890:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003892:	f7fd fc7d 	bl	8001190 <HAL_GetTick>
 8003896:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003898:	e00a      	b.n	80038b0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800389a:	f7fd fc79 	bl	8001190 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e064      	b.n	800397a <HAL_RCC_ClockConfig+0x1a2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b0:	4b35      	ldr	r3, [pc, #212]	; (8003988 <HAL_RCC_ClockConfig+0x1b0>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 020c 	and.w	r2, r3, #12
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	429a      	cmp	r2, r3
 80038c0:	d1eb      	bne.n	800389a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d008      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ce:	492e      	ldr	r1, [pc, #184]	; (8003988 <HAL_RCC_ClockConfig+0x1b0>)
 80038d0:	4b2d      	ldr	r3, [pc, #180]	; (8003988 <HAL_RCC_ClockConfig+0x1b0>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4313      	orrs	r3, r2
 80038de:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038e0:	4b28      	ldr	r3, [pc, #160]	; (8003984 <HAL_RCC_ClockConfig+0x1ac>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0207 	and.w	r2, r3, #7
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d910      	bls.n	8003910 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4925      	ldr	r1, [pc, #148]	; (8003984 <HAL_RCC_ClockConfig+0x1ac>)
 80038f0:	4b24      	ldr	r3, [pc, #144]	; (8003984 <HAL_RCC_ClockConfig+0x1ac>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f023 0207 	bic.w	r2, r3, #7
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b21      	ldr	r3, [pc, #132]	; (8003984 <HAL_RCC_ClockConfig+0x1ac>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0207 	and.w	r2, r3, #7
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e034      	b.n	800397a <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800391c:	491a      	ldr	r1, [pc, #104]	; (8003988 <HAL_RCC_ClockConfig+0x1b0>)
 800391e:	4b1a      	ldr	r3, [pc, #104]	; (8003988 <HAL_RCC_ClockConfig+0x1b0>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800393a:	4913      	ldr	r1, [pc, #76]	; (8003988 <HAL_RCC_ClockConfig+0x1b0>)
 800393c:	4b12      	ldr	r3, [pc, #72]	; (8003988 <HAL_RCC_ClockConfig+0x1b0>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800394e:	f000 f821 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 8003952:	4601      	mov	r1, r0
 8003954:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <HAL_RCC_ClockConfig+0x1b0>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	091b      	lsrs	r3, r3, #4
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	4a0b      	ldr	r2, [pc, #44]	; (800398c <HAL_RCC_ClockConfig+0x1b4>)
 8003960:	5cd3      	ldrb	r3, [r2, r3]
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	fa21 f303 	lsr.w	r3, r1, r3
 800396a:	4a09      	ldr	r2, [pc, #36]	; (8003990 <HAL_RCC_ClockConfig+0x1b8>)
 800396c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800396e:	2000      	movs	r0, #0
 8003970:	f7fd fbdc 	bl	800112c <HAL_InitTick>
 8003974:	4603      	mov	r3, r0
 8003976:	72fb      	strb	r3, [r7, #11]

  return status;
 8003978:	7afb      	ldrb	r3, [r7, #11]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40022000 	.word	0x40022000
 8003988:	40021000 	.word	0x40021000
 800398c:	0800b840 	.word	0x0800b840
 8003990:	20000594 	.word	0x20000594

08003994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003994:	b480      	push	{r7}
 8003996:	b089      	sub	sp, #36	; 0x24
 8003998:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a2:	4b46      	ldr	r3, [pc, #280]	; (8003abc <HAL_RCC_GetSysClockFreq+0x128>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039ac:	4b43      	ldr	r3, [pc, #268]	; (8003abc <HAL_RCC_GetSysClockFreq+0x128>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_RCC_GetSysClockFreq+0x34>
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2b0c      	cmp	r3, #12
 80039c0:	d121      	bne.n	8003a06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d11e      	bne.n	8003a06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039c8:	4b3c      	ldr	r3, [pc, #240]	; (8003abc <HAL_RCC_GetSysClockFreq+0x128>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d107      	bne.n	80039e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039d4:	4b39      	ldr	r3, [pc, #228]	; (8003abc <HAL_RCC_GetSysClockFreq+0x128>)
 80039d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	e005      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039e4:	4b35      	ldr	r3, [pc, #212]	; (8003abc <HAL_RCC_GetSysClockFreq+0x128>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	091b      	lsrs	r3, r3, #4
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039f0:	4a33      	ldr	r2, [pc, #204]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10d      	bne.n	8003a1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a04:	e00a      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d102      	bne.n	8003a12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x130>)
 8003a0e:	61bb      	str	r3, [r7, #24]
 8003a10:	e004      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a18:	4b2b      	ldr	r3, [pc, #172]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x134>)
 8003a1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b0c      	cmp	r3, #12
 8003a20:	d145      	bne.n	8003aae <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a22:	4b26      	ldr	r3, [pc, #152]	; (8003abc <HAL_RCC_GetSysClockFreq+0x128>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a2c:	4b23      	ldr	r3, [pc, #140]	; (8003abc <HAL_RCC_GetSysClockFreq+0x128>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	3301      	adds	r3, #1
 8003a38:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d002      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0xb2>
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d00d      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0xcc>
 8003a44:	e019      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0xe6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a46:	4a1f      	ldr	r2, [pc, #124]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x130>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4e:	4a1b      	ldr	r2, [pc, #108]	; (8003abc <HAL_RCC_GetSysClockFreq+0x128>)
 8003a50:	68d2      	ldr	r2, [r2, #12]
 8003a52:	0a12      	lsrs	r2, r2, #8
 8003a54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a58:	fb02 f303 	mul.w	r3, r2, r3
 8003a5c:	617b      	str	r3, [r7, #20]
      break;
 8003a5e:	e019      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a60:	4a19      	ldr	r2, [pc, #100]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x134>)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a68:	4a14      	ldr	r2, [pc, #80]	; (8003abc <HAL_RCC_GetSysClockFreq+0x128>)
 8003a6a:	68d2      	ldr	r2, [r2, #12]
 8003a6c:	0a12      	lsrs	r2, r2, #8
 8003a6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	617b      	str	r3, [r7, #20]
      break;
 8003a78:	e00c      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <HAL_RCC_GetSysClockFreq+0x128>)
 8003a84:	68d2      	ldr	r2, [r2, #12]
 8003a86:	0a12      	lsrs	r2, r2, #8
 8003a88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a8c:	fb02 f303 	mul.w	r3, r2, r3
 8003a90:	617b      	str	r3, [r7, #20]
      break;
 8003a92:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a94:	4b09      	ldr	r3, [pc, #36]	; (8003abc <HAL_RCC_GetSysClockFreq+0x128>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	0e5b      	lsrs	r3, r3, #25
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco/pllr;
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aac:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003aae:	69bb      	ldr	r3, [r7, #24]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3724      	adds	r7, #36	; 0x24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	0800b858 	.word	0x0800b858
 8003ac4:	00f42400 	.word	0x00f42400
 8003ac8:	007a1200 	.word	0x007a1200

08003acc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad0:	4b03      	ldr	r3, [pc, #12]	; (8003ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20000594 	.word	0x20000594

08003ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ae8:	f7ff fff0 	bl	8003acc <HAL_RCC_GetHCLKFreq>
 8003aec:	4601      	mov	r1, r0
 8003aee:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003afa:	5cd3      	ldrb	r3, [r2, r3]
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	0800b850 	.word	0x0800b850

08003b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b14:	f7ff ffda 	bl	8003acc <HAL_RCC_GetHCLKFreq>
 8003b18:	4601      	mov	r1, r0
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	0adb      	lsrs	r3, r3, #11
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	4a04      	ldr	r2, [pc, #16]	; (8003b38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b26:	5cd3      	ldrb	r3, [r2, r3]
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40021000 	.word	0x40021000
 8003b38:	0800b850 	.word	0x0800b850

08003b3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b44:	2300      	movs	r3, #0
 8003b46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b48:	4b2a      	ldr	r3, [pc, #168]	; (8003bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b54:	f7ff fa26 	bl	8002fa4 <HAL_PWREx_GetVoltageRange>
 8003b58:	6178      	str	r0, [r7, #20]
 8003b5a:	e014      	b.n	8003b86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b5c:	4a25      	ldr	r2, [pc, #148]	; (8003bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b5e:	4b25      	ldr	r3, [pc, #148]	; (8003bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b66:	6593      	str	r3, [r2, #88]	; 0x58
 8003b68:	4b22      	ldr	r3, [pc, #136]	; (8003bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b74:	f7ff fa16 	bl	8002fa4 <HAL_PWREx_GetVoltageRange>
 8003b78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b7a:	4a1e      	ldr	r2, [pc, #120]	; (8003bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b7c:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b8c:	d10b      	bne.n	8003ba6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b80      	cmp	r3, #128	; 0x80
 8003b92:	d919      	bls.n	8003bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2ba0      	cmp	r3, #160	; 0xa0
 8003b98:	d902      	bls.n	8003ba0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	e013      	b.n	8003bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	e010      	b.n	8003bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b80      	cmp	r3, #128	; 0x80
 8003baa:	d902      	bls.n	8003bb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bac:	2303      	movs	r3, #3
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	e00a      	b.n	8003bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b80      	cmp	r3, #128	; 0x80
 8003bb6:	d102      	bne.n	8003bbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bb8:	2302      	movs	r3, #2
 8003bba:	613b      	str	r3, [r7, #16]
 8003bbc:	e004      	b.n	8003bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b70      	cmp	r3, #112	; 0x70
 8003bc2:	d101      	bne.n	8003bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bc8:	490b      	ldr	r1, [pc, #44]	; (8003bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 0207 	bic.w	r2, r3, #7
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003bd8:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0207 	and.w	r2, r3, #7
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d001      	beq.n	8003bea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	40022000 	.word	0x40022000

08003bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c04:	2300      	movs	r3, #0
 8003c06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c08:	2300      	movs	r3, #0
 8003c0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d02f      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c20:	d005      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003c22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c26:	d015      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003c2c:	e00f      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003c2e:	4a5d      	ldr	r2, [pc, #372]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c30:	4b5c      	ldr	r3, [pc, #368]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c38:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c3a:	e00c      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	2100      	movs	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fa44 	bl	80040d0 <RCCEx_PLLSAI1_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c4c:	e003      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	74fb      	strb	r3, [r7, #19]
      break;
 8003c52:	e000      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c56:	7cfb      	ldrb	r3, [r7, #19]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10b      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c5c:	4951      	ldr	r1, [pc, #324]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c5e:	4b51      	ldr	r3, [pc, #324]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c72:	e001      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c74:	7cfb      	ldrb	r3, [r7, #19]
 8003c76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 809e 	beq.w	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c86:	2300      	movs	r3, #0
 8003c88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c8a:	4b46      	ldr	r3, [pc, #280]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00d      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca0:	4a40      	ldr	r2, [pc, #256]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003ca2:	4b40      	ldr	r3, [pc, #256]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003caa:	6593      	str	r3, [r2, #88]	; 0x58
 8003cac:	4b3d      	ldr	r3, [pc, #244]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cbc:	4a3a      	ldr	r2, [pc, #232]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cbe:	4b3a      	ldr	r3, [pc, #232]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cc8:	f7fd fa62 	bl	8001190 <HAL_GetTick>
 8003ccc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cce:	e009      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd0:	f7fd fa5e 	bl	8001190 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d902      	bls.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	74fb      	strb	r3, [r7, #19]
        break;
 8003ce2:	e005      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ce4:	4b30      	ldr	r3, [pc, #192]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0ef      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8003cf0:	7cfb      	ldrb	r3, [r7, #19]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d15a      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cf6:	4b2b      	ldr	r3, [pc, #172]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01e      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d019      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d12:	4b24      	ldr	r3, [pc, #144]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d1c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d1e:	4a21      	ldr	r2, [pc, #132]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d20:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d2e:	4a1d      	ldr	r2, [pc, #116]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d30:	4b1c      	ldr	r3, [pc, #112]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d3e:	4a19      	ldr	r2, [pc, #100]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d016      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fd fa1e 	bl	8001190 <HAL_GetTick>
 8003d54:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d56:	e00b      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d58:	f7fd fa1a 	bl	8001190 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d902      	bls.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	74fb      	strb	r3, [r7, #19]
            break;
 8003d6e:	e006      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d70:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0ec      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003d7e:	7cfb      	ldrb	r3, [r7, #19]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10b      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d84:	4907      	ldr	r1, [pc, #28]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d86:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d9a:	e009      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d9c:	7cfb      	ldrb	r3, [r7, #19]
 8003d9e:	74bb      	strb	r3, [r7, #18]
 8003da0:	e006      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003da2:	bf00      	nop
 8003da4:	40021000 	.word	0x40021000
 8003da8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dac:	7cfb      	ldrb	r3, [r7, #19]
 8003dae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003db0:	7c7b      	ldrb	r3, [r7, #17]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d105      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db6:	4a9e      	ldr	r2, [pc, #632]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003db8:	4b9d      	ldr	r3, [pc, #628]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dce:	4998      	ldr	r1, [pc, #608]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dd0:	4b97      	ldr	r3, [pc, #604]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd6:	f023 0203 	bic.w	r2, r3, #3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003df0:	498f      	ldr	r1, [pc, #572]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003df2:	4b8f      	ldr	r3, [pc, #572]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df8:	f023 020c 	bic.w	r2, r3, #12
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e12:	4987      	ldr	r1, [pc, #540]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e14:	4b86      	ldr	r3, [pc, #536]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e34:	497e      	ldr	r1, [pc, #504]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e36:	4b7e      	ldr	r3, [pc, #504]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e56:	4976      	ldr	r1, [pc, #472]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e58:	4b75      	ldr	r3, [pc, #468]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e78:	496d      	ldr	r1, [pc, #436]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e7a:	4b6d      	ldr	r3, [pc, #436]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e9a:	4965      	ldr	r1, [pc, #404]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e9c:	4b64      	ldr	r3, [pc, #400]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ebc:	495c      	ldr	r1, [pc, #368]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ebe:	4b5c      	ldr	r3, [pc, #368]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ede:	4954      	ldr	r1, [pc, #336]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ee0:	4b53      	ldr	r3, [pc, #332]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f00:	494b      	ldr	r1, [pc, #300]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f02:	4b4b      	ldr	r3, [pc, #300]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f22:	4943      	ldr	r1, [pc, #268]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f24:	4b42      	ldr	r3, [pc, #264]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f2a:	f023 0203 	bic.w	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d028      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f44:	493a      	ldr	r1, [pc, #232]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f46:	4b3a      	ldr	r3, [pc, #232]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f62:	d106      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f64:	4a32      	ldr	r2, [pc, #200]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f66:	4b32      	ldr	r3, [pc, #200]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f6e:	60d3      	str	r3, [r2, #12]
 8003f70:	e011      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f7a:	d10c      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	2101      	movs	r1, #1
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 f8a4 	bl	80040d0 <RCCEx_PLLSAI1_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f8c:	7cfb      	ldrb	r3, [r7, #19]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8003f92:	7cfb      	ldrb	r3, [r7, #19]
 8003f94:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d028      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fa2:	4923      	ldr	r1, [pc, #140]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003fa4:	4b22      	ldr	r3, [pc, #136]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003faa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fc0:	d106      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fc2:	4a1b      	ldr	r2, [pc, #108]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003fc4:	4b1a      	ldr	r3, [pc, #104]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fcc:	60d3      	str	r3, [r2, #12]
 8003fce:	e011      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	2101      	movs	r1, #1
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 f875 	bl	80040d0 <RCCEx_PLLSAI1_Config>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fea:	7cfb      	ldrb	r3, [r7, #19]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8003ff0:	7cfb      	ldrb	r3, [r7, #19]
 8003ff2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d02b      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004000:	490b      	ldr	r1, [pc, #44]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004002:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004008:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800401e:	d109      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004020:	4a03      	ldr	r2, [pc, #12]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004022:	4b03      	ldr	r3, [pc, #12]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800402a:	60d3      	str	r3, [r2, #12]
 800402c:	e014      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 800402e:	bf00      	nop
 8004030:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004038:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800403c:	d10c      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3304      	adds	r3, #4
 8004042:	2101      	movs	r1, #1
 8004044:	4618      	mov	r0, r3
 8004046:	f000 f843 	bl	80040d0 <RCCEx_PLLSAI1_Config>
 800404a:	4603      	mov	r3, r0
 800404c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800404e:	7cfb      	ldrb	r3, [r7, #19]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8004054:	7cfb      	ldrb	r3, [r7, #19]
 8004056:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01c      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004064:	4919      	ldr	r1, [pc, #100]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004066:	4b19      	ldr	r3, [pc, #100]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004082:	d10c      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3304      	adds	r3, #4
 8004088:	2102      	movs	r1, #2
 800408a:	4618      	mov	r0, r3
 800408c:	f000 f820 	bl	80040d0 <RCCEx_PLLSAI1_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 800409a:	7cfb      	ldrb	r3, [r7, #19]
 800409c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040aa:	4908      	ldr	r1, [pc, #32]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80040ac:	4b07      	ldr	r3, [pc, #28]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40021000 	.word	0x40021000

080040d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040de:	4b73      	ldr	r3, [pc, #460]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d018      	beq.n	800411c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040ea:	4b70      	ldr	r3, [pc, #448]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f003 0203 	and.w	r2, r3, #3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d10d      	bne.n	8004116 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
       ||
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004102:	4b6a      	ldr	r3, [pc, #424]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	091b      	lsrs	r3, r3, #4
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
       ||
 8004112:	429a      	cmp	r2, r3
 8004114:	d044      	beq.n	80041a0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	73fb      	strb	r3, [r7, #15]
 800411a:	e041      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d00c      	beq.n	800413e <RCCEx_PLLSAI1_Config+0x6e>
 8004124:	2b03      	cmp	r3, #3
 8004126:	d013      	beq.n	8004150 <RCCEx_PLLSAI1_Config+0x80>
 8004128:	2b01      	cmp	r3, #1
 800412a:	d120      	bne.n	800416e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800412c:	4b5f      	ldr	r3, [pc, #380]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d11d      	bne.n	8004174 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800413c:	e01a      	b.n	8004174 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800413e:	4b5b      	ldr	r3, [pc, #364]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004146:	2b00      	cmp	r3, #0
 8004148:	d116      	bne.n	8004178 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800414e:	e013      	b.n	8004178 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004150:	4b56      	ldr	r3, [pc, #344]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10f      	bne.n	800417c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800415c:	4b53      	ldr	r3, [pc, #332]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d109      	bne.n	800417c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800416c:	e006      	b.n	800417c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	73fb      	strb	r3, [r7, #15]
      break;
 8004172:	e004      	b.n	800417e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004174:	bf00      	nop
 8004176:	e002      	b.n	800417e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004178:	bf00      	nop
 800417a:	e000      	b.n	800417e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800417c:	bf00      	nop
    }

    if(status == HAL_OK)
 800417e:	7bfb      	ldrb	r3, [r7, #15]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10d      	bne.n	80041a0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004184:	4849      	ldr	r0, [pc, #292]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004186:	4b49      	ldr	r3, [pc, #292]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6819      	ldr	r1, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	3b01      	subs	r3, #1
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	430b      	orrs	r3, r1
 800419c:	4313      	orrs	r3, r2
 800419e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d17c      	bne.n	80042a0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041a6:	4a41      	ldr	r2, [pc, #260]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80041a8:	4b40      	ldr	r3, [pc, #256]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b2:	f7fc ffed 	bl	8001190 <HAL_GetTick>
 80041b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041b8:	e009      	b.n	80041ce <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041ba:	f7fc ffe9 	bl	8001190 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d902      	bls.n	80041ce <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	73fb      	strb	r3, [r7, #15]
        break;
 80041cc:	e005      	b.n	80041da <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041ce:	4b37      	ldr	r3, [pc, #220]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1ef      	bne.n	80041ba <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d15f      	bne.n	80042a0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d110      	bne.n	8004208 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041e6:	4831      	ldr	r0, [pc, #196]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80041e8:	4b30      	ldr	r3, [pc, #192]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80041f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6892      	ldr	r2, [r2, #8]
 80041f8:	0211      	lsls	r1, r2, #8
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	68d2      	ldr	r2, [r2, #12]
 80041fe:	06d2      	lsls	r2, r2, #27
 8004200:	430a      	orrs	r2, r1
 8004202:	4313      	orrs	r3, r2
 8004204:	6103      	str	r3, [r0, #16]
 8004206:	e027      	b.n	8004258 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d112      	bne.n	8004234 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800420e:	4827      	ldr	r0, [pc, #156]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004210:	4b26      	ldr	r3, [pc, #152]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004218:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6892      	ldr	r2, [r2, #8]
 8004220:	0211      	lsls	r1, r2, #8
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6912      	ldr	r2, [r2, #16]
 8004226:	0852      	lsrs	r2, r2, #1
 8004228:	3a01      	subs	r2, #1
 800422a:	0552      	lsls	r2, r2, #21
 800422c:	430a      	orrs	r2, r1
 800422e:	4313      	orrs	r3, r2
 8004230:	6103      	str	r3, [r0, #16]
 8004232:	e011      	b.n	8004258 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004234:	481d      	ldr	r0, [pc, #116]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004236:	4b1d      	ldr	r3, [pc, #116]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800423e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6892      	ldr	r2, [r2, #8]
 8004246:	0211      	lsls	r1, r2, #8
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6952      	ldr	r2, [r2, #20]
 800424c:	0852      	lsrs	r2, r2, #1
 800424e:	3a01      	subs	r2, #1
 8004250:	0652      	lsls	r2, r2, #25
 8004252:	430a      	orrs	r2, r1
 8004254:	4313      	orrs	r3, r2
 8004256:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004258:	4a14      	ldr	r2, [pc, #80]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800425a:	4b14      	ldr	r3, [pc, #80]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004262:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004264:	f7fc ff94 	bl	8001190 <HAL_GetTick>
 8004268:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800426a:	e009      	b.n	8004280 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800426c:	f7fc ff90 	bl	8001190 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d902      	bls.n	8004280 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	73fb      	strb	r3, [r7, #15]
          break;
 800427e:	e005      	b.n	800428c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004280:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0ef      	beq.n	800426c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004292:	4906      	ldr	r1, [pc, #24]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	4313      	orrs	r3, r2
 800429e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000

080042b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e01d      	b.n	80042fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f006 fa98 	bl	800a80c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3304      	adds	r3, #4
 80042ec:	4619      	mov	r1, r3
 80042ee:	4610      	mov	r0, r2
 80042f0:	f000 fc26 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e01d      	b.n	8004354 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d106      	bne.n	8004332 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f006 f9ad 	bl	800a68c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2202      	movs	r2, #2
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3304      	adds	r3, #4
 8004342:	4619      	mov	r1, r3
 8004344:	4610      	mov	r0, r2
 8004346:	f000 fbfb 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e01d      	b.n	80043aa <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f006 f9c0 	bl	800a708 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3304      	adds	r3, #4
 8004398:	4619      	mov	r1, r3
 800439a:	4610      	mov	r0, r2
 800439c:	f000 fbd0 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d122      	bne.n	800440e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d11b      	bne.n	800440e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f06f 0202 	mvn.w	r2, #2
 80043de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fb84 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 80043fa:	e005      	b.n	8004408 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fb76 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fb87 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b04      	cmp	r3, #4
 800441a:	d122      	bne.n	8004462 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b04      	cmp	r3, #4
 8004428:	d11b      	bne.n	8004462 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f06f 0204 	mvn.w	r2, #4
 8004432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fb5a 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 800444e:	e005      	b.n	800445c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fb4c 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fb5d 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b08      	cmp	r3, #8
 800446e:	d122      	bne.n	80044b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b08      	cmp	r3, #8
 800447c:	d11b      	bne.n	80044b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f06f 0208 	mvn.w	r2, #8
 8004486:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2204      	movs	r2, #4
 800448c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	f003 0303 	and.w	r3, r3, #3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fb30 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 80044a2:	e005      	b.n	80044b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fb22 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fb33 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b10      	cmp	r3, #16
 80044c2:	d122      	bne.n	800450a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b10      	cmp	r3, #16
 80044d0:	d11b      	bne.n	800450a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f06f 0210 	mvn.w	r2, #16
 80044da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2208      	movs	r2, #8
 80044e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fb06 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 80044f6:	e005      	b.n	8004504 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 faf8 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fb09 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b01      	cmp	r3, #1
 8004516:	d10e      	bne.n	8004536 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b01      	cmp	r3, #1
 8004524:	d107      	bne.n	8004536 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f06f 0201 	mvn.w	r2, #1
 800452e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7fc fdb7 	bl	80010a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004540:	2b80      	cmp	r3, #128	; 0x80
 8004542:	d10e      	bne.n	8004562 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454e:	2b80      	cmp	r3, #128	; 0x80
 8004550:	d107      	bne.n	8004562 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800455a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f001 f85f 	bl	8005620 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004570:	d10e      	bne.n	8004590 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457c:	2b80      	cmp	r3, #128	; 0x80
 800457e:	d107      	bne.n	8004590 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f001 f852 	bl	8005634 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459a:	2b40      	cmp	r3, #64	; 0x40
 800459c:	d10e      	bne.n	80045bc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a8:	2b40      	cmp	r3, #64	; 0x40
 80045aa:	d107      	bne.n	80045bc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fab7 	bl	8004b2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d10e      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d107      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0220 	mvn.w	r2, #32
 80045e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f001 f812 	bl	800560c <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045e8:	bf00      	nop
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_TIM_IC_ConfigChannel+0x1a>
 8004606:	2302      	movs	r3, #2
 8004608:	e08a      	b.n	8004720 <HAL_TIM_IC_ConfigChannel+0x130>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2202      	movs	r2, #2
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d11b      	bne.n	8004658 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	6819      	ldr	r1, [r3, #0]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f000 fd72 	bl	8005118 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	6992      	ldr	r2, [r2, #24]
 800463e:	f022 020c 	bic.w	r2, r2, #12
 8004642:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	6991      	ldr	r1, [r2, #24]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	6892      	ldr	r2, [r2, #8]
 8004652:	430a      	orrs	r2, r1
 8004654:	619a      	str	r2, [r3, #24]
 8004656:	e05a      	b.n	800470e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b04      	cmp	r3, #4
 800465c:	d11c      	bne.n	8004698 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	6819      	ldr	r1, [r3, #0]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f000 fdde 	bl	800522e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	6812      	ldr	r2, [r2, #0]
 800467a:	6992      	ldr	r2, [r2, #24]
 800467c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004680:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	6991      	ldr	r1, [r2, #24]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	6892      	ldr	r2, [r2, #8]
 8004690:	0212      	lsls	r2, r2, #8
 8004692:	430a      	orrs	r2, r1
 8004694:	619a      	str	r2, [r3, #24]
 8004696:	e03a      	b.n	800470e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b08      	cmp	r3, #8
 800469c:	d11b      	bne.n	80046d6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	6819      	ldr	r1, [r3, #0]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f000 fe2b 	bl	8005308 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	69d2      	ldr	r2, [r2, #28]
 80046bc:	f022 020c 	bic.w	r2, r2, #12
 80046c0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	6812      	ldr	r2, [r2, #0]
 80046ca:	69d1      	ldr	r1, [r2, #28]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	6892      	ldr	r2, [r2, #8]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	61da      	str	r2, [r3, #28]
 80046d4:	e01b      	b.n	800470e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	6819      	ldr	r1, [r3, #0]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f000 fe4b 	bl	8005380 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	69d2      	ldr	r2, [r2, #28]
 80046f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046f8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	69d1      	ldr	r1, [r2, #28]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	6892      	ldr	r2, [r2, #8]
 8004708:	0212      	lsls	r2, r2, #8
 800470a:	430a      	orrs	r2, r1
 800470c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800473e:	2302      	movs	r3, #2
 8004740:	e105      	b.n	800494e <HAL_TIM_PWM_ConfigChannel+0x226>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2202      	movs	r2, #2
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b14      	cmp	r3, #20
 8004756:	f200 80f0 	bhi.w	800493a <HAL_TIM_PWM_ConfigChannel+0x212>
 800475a:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800475c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004760:	080047b5 	.word	0x080047b5
 8004764:	0800493b 	.word	0x0800493b
 8004768:	0800493b 	.word	0x0800493b
 800476c:	0800493b 	.word	0x0800493b
 8004770:	080047f5 	.word	0x080047f5
 8004774:	0800493b 	.word	0x0800493b
 8004778:	0800493b 	.word	0x0800493b
 800477c:	0800493b 	.word	0x0800493b
 8004780:	08004837 	.word	0x08004837
 8004784:	0800493b 	.word	0x0800493b
 8004788:	0800493b 	.word	0x0800493b
 800478c:	0800493b 	.word	0x0800493b
 8004790:	08004877 	.word	0x08004877
 8004794:	0800493b 	.word	0x0800493b
 8004798:	0800493b 	.word	0x0800493b
 800479c:	0800493b 	.word	0x0800493b
 80047a0:	080048b9 	.word	0x080048b9
 80047a4:	0800493b 	.word	0x0800493b
 80047a8:	0800493b 	.word	0x0800493b
 80047ac:	0800493b 	.word	0x0800493b
 80047b0:	080048f9 	.word	0x080048f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fa2e 	bl	8004c1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	6812      	ldr	r2, [r2, #0]
 80047c8:	6992      	ldr	r2, [r2, #24]
 80047ca:	f042 0208 	orr.w	r2, r2, #8
 80047ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	6812      	ldr	r2, [r2, #0]
 80047d8:	6992      	ldr	r2, [r2, #24]
 80047da:	f022 0204 	bic.w	r2, r2, #4
 80047de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	6991      	ldr	r1, [r2, #24]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	6912      	ldr	r2, [r2, #16]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	619a      	str	r2, [r3, #24]
      break;
 80047f2:	e0a3      	b.n	800493c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68b9      	ldr	r1, [r7, #8]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fa8a 	bl	8004d14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	6812      	ldr	r2, [r2, #0]
 8004808:	6992      	ldr	r2, [r2, #24]
 800480a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800480e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	6992      	ldr	r2, [r2, #24]
 800481a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800481e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	6991      	ldr	r1, [r2, #24]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	6912      	ldr	r2, [r2, #16]
 800482e:	0212      	lsls	r2, r2, #8
 8004830:	430a      	orrs	r2, r1
 8004832:	619a      	str	r2, [r3, #24]
      break;
 8004834:	e082      	b.n	800493c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fae3 	bl	8004e08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	6812      	ldr	r2, [r2, #0]
 800484a:	69d2      	ldr	r2, [r2, #28]
 800484c:	f042 0208 	orr.w	r2, r2, #8
 8004850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	69d2      	ldr	r2, [r2, #28]
 800485c:	f022 0204 	bic.w	r2, r2, #4
 8004860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	69d1      	ldr	r1, [r2, #28]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	6912      	ldr	r2, [r2, #16]
 8004870:	430a      	orrs	r2, r1
 8004872:	61da      	str	r2, [r3, #28]
      break;
 8004874:	e062      	b.n	800493c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fb3b 	bl	8004ef8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	69d2      	ldr	r2, [r2, #28]
 800488c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	6812      	ldr	r2, [r2, #0]
 800489a:	69d2      	ldr	r2, [r2, #28]
 800489c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	69d1      	ldr	r1, [r2, #28]
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	6912      	ldr	r2, [r2, #16]
 80048b0:	0212      	lsls	r2, r2, #8
 80048b2:	430a      	orrs	r2, r1
 80048b4:	61da      	str	r2, [r3, #28]
      break;
 80048b6:	e041      	b.n	800493c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fb78 	bl	8004fb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	6812      	ldr	r2, [r2, #0]
 80048cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80048ce:	f042 0208 	orr.w	r2, r2, #8
 80048d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	6812      	ldr	r2, [r2, #0]
 80048dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80048de:	f022 0204 	bic.w	r2, r2, #4
 80048e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	6912      	ldr	r2, [r2, #16]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048f6:	e021      	b.n	800493c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68b9      	ldr	r1, [r7, #8]
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fbb0 	bl	8005064 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800490e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004912:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800491e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004922:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	6812      	ldr	r2, [r2, #0]
 800492c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	6912      	ldr	r2, [r2, #16]
 8004932:	0212      	lsls	r2, r2, #8
 8004934:	430a      	orrs	r2, r1
 8004936:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004938:	e000      	b.n	800493c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800493a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop

08004958 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_TIM_ConfigClockSource+0x18>
 800496c:	2302      	movs	r3, #2
 800496e:	e0ba      	b.n	8004ae6 <HAL_TIM_ConfigClockSource+0x18e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800498e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004992:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800499a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b40      	cmp	r3, #64	; 0x40
 80049aa:	d07a      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x14a>
 80049ac:	2b40      	cmp	r3, #64	; 0x40
 80049ae:	d80d      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x74>
 80049b0:	2b10      	cmp	r3, #16
 80049b2:	f000 8086 	beq.w	8004ac2 <HAL_TIM_ConfigClockSource+0x16a>
 80049b6:	2b10      	cmp	r3, #16
 80049b8:	d803      	bhi.n	80049c2 <HAL_TIM_ConfigClockSource+0x6a>
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 8081 	beq.w	8004ac2 <HAL_TIM_ConfigClockSource+0x16a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80049c0:	e088      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d07d      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x16a>
 80049c6:	2b30      	cmp	r3, #48	; 0x30
 80049c8:	d07b      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x16a>
      break;
 80049ca:	e083      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 80049cc:	2b70      	cmp	r3, #112	; 0x70
 80049ce:	d018      	beq.n	8004a02 <HAL_TIM_ConfigClockSource+0xaa>
 80049d0:	2b70      	cmp	r3, #112	; 0x70
 80049d2:	d804      	bhi.n	80049de <HAL_TIM_ConfigClockSource+0x86>
 80049d4:	2b50      	cmp	r3, #80	; 0x50
 80049d6:	d044      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0x10a>
 80049d8:	2b60      	cmp	r3, #96	; 0x60
 80049da:	d052      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x12a>
      break;
 80049dc:	e07a      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 80049de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e2:	d003      	beq.n	80049ec <HAL_TIM_ConfigClockSource+0x94>
 80049e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e8:	d028      	beq.n	8004a3c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 80049ea:	e073      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x17c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fa:	f023 0307 	bic.w	r3, r3, #7
 80049fe:	6093      	str	r3, [r2, #8]
      break;
 8004a00:	e068      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6818      	ldr	r0, [r3, #0]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	6899      	ldr	r1, [r3, #8]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f000 fd0d 	bl	8005430 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a24:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	609a      	str	r2, [r3, #8]
      break;
 8004a3a:	e04b      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	6899      	ldr	r1, [r3, #8]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f000 fcf0 	bl	8005430 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6812      	ldr	r2, [r2, #0]
 8004a58:	6892      	ldr	r2, [r2, #8]
 8004a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a5e:	609a      	str	r2, [r3, #8]
      break;
 8004a60:	e038      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	6859      	ldr	r1, [r3, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f000 fbae 	bl	80051d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2150      	movs	r1, #80	; 0x50
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fcbd 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8004a80:	e028      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6818      	ldr	r0, [r3, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6859      	ldr	r1, [r3, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f000 fc0a 	bl	80052a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2160      	movs	r1, #96	; 0x60
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fcad 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8004aa0:	e018      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6859      	ldr	r1, [r3, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f000 fb8e 	bl	80051d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2140      	movs	r1, #64	; 0x40
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fc9d 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8004ac0:	e008      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4619      	mov	r1, r3
 8004acc:	4610      	mov	r0, r2
 8004ace:	f000 fc94 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8004ad2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a2e      	ldr	r2, [pc, #184]	; (8004c0c <TIM_Base_SetConfig+0xcc>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d007      	beq.n	8004b68 <TIM_Base_SetConfig+0x28>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5e:	d003      	beq.n	8004b68 <TIM_Base_SetConfig+0x28>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a2b      	ldr	r2, [pc, #172]	; (8004c10 <TIM_Base_SetConfig+0xd0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d108      	bne.n	8004b7a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a23      	ldr	r2, [pc, #140]	; (8004c0c <TIM_Base_SetConfig+0xcc>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d00f      	beq.n	8004ba2 <TIM_Base_SetConfig+0x62>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b88:	d00b      	beq.n	8004ba2 <TIM_Base_SetConfig+0x62>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a20      	ldr	r2, [pc, #128]	; (8004c10 <TIM_Base_SetConfig+0xd0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d007      	beq.n	8004ba2 <TIM_Base_SetConfig+0x62>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a1f      	ldr	r2, [pc, #124]	; (8004c14 <TIM_Base_SetConfig+0xd4>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d003      	beq.n	8004ba2 <TIM_Base_SetConfig+0x62>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a1e      	ldr	r2, [pc, #120]	; (8004c18 <TIM_Base_SetConfig+0xd8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d108      	bne.n	8004bb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a0c      	ldr	r2, [pc, #48]	; (8004c0c <TIM_Base_SetConfig+0xcc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d007      	beq.n	8004bf0 <TIM_Base_SetConfig+0xb0>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a0c      	ldr	r2, [pc, #48]	; (8004c14 <TIM_Base_SetConfig+0xd4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d003      	beq.n	8004bf0 <TIM_Base_SetConfig+0xb0>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a0b      	ldr	r2, [pc, #44]	; (8004c18 <TIM_Base_SetConfig+0xd8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d103      	bne.n	8004bf8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	615a      	str	r2, [r3, #20]
}
 8004bfe:	bf00      	nop
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40014000 	.word	0x40014000
 8004c18:	40014400 	.word	0x40014400

08004c1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	f023 0201 	bic.w	r2, r3, #1
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0303 	bic.w	r3, r3, #3
 8004c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f023 0302 	bic.w	r3, r3, #2
 8004c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a24      	ldr	r2, [pc, #144]	; (8004d08 <TIM_OC1_SetConfig+0xec>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d007      	beq.n	8004c8c <TIM_OC1_SetConfig+0x70>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a23      	ldr	r2, [pc, #140]	; (8004d0c <TIM_OC1_SetConfig+0xf0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <TIM_OC1_SetConfig+0x70>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a22      	ldr	r2, [pc, #136]	; (8004d10 <TIM_OC1_SetConfig+0xf4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d10c      	bne.n	8004ca6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f023 0308 	bic.w	r3, r3, #8
 8004c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f023 0304 	bic.w	r3, r3, #4
 8004ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a17      	ldr	r2, [pc, #92]	; (8004d08 <TIM_OC1_SetConfig+0xec>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d007      	beq.n	8004cbe <TIM_OC1_SetConfig+0xa2>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a16      	ldr	r2, [pc, #88]	; (8004d0c <TIM_OC1_SetConfig+0xf0>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d003      	beq.n	8004cbe <TIM_OC1_SetConfig+0xa2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a15      	ldr	r2, [pc, #84]	; (8004d10 <TIM_OC1_SetConfig+0xf4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d111      	bne.n	8004ce2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	621a      	str	r2, [r3, #32]
}
 8004cfc:	bf00      	nop
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	40012c00 	.word	0x40012c00
 8004d0c:	40014000 	.word	0x40014000
 8004d10:	40014400 	.word	0x40014400

08004d14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	f023 0210 	bic.w	r2, r3, #16
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f023 0320 	bic.w	r3, r3, #32
 8004d62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a22      	ldr	r2, [pc, #136]	; (8004dfc <TIM_OC2_SetConfig+0xe8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d10d      	bne.n	8004d94 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a19      	ldr	r2, [pc, #100]	; (8004dfc <TIM_OC2_SetConfig+0xe8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d007      	beq.n	8004dac <TIM_OC2_SetConfig+0x98>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a18      	ldr	r2, [pc, #96]	; (8004e00 <TIM_OC2_SetConfig+0xec>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d003      	beq.n	8004dac <TIM_OC2_SetConfig+0x98>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <TIM_OC2_SetConfig+0xf0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d113      	bne.n	8004dd4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004db2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	621a      	str	r2, [r3, #32]
}
 8004dee:	bf00      	nop
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40012c00 	.word	0x40012c00
 8004e00:	40014000 	.word	0x40014000
 8004e04:	40014400 	.word	0x40014400

08004e08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0303 	bic.w	r3, r3, #3
 8004e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	021b      	lsls	r3, r3, #8
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a21      	ldr	r2, [pc, #132]	; (8004eec <TIM_OC3_SetConfig+0xe4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d10d      	bne.n	8004e86 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	021b      	lsls	r3, r3, #8
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a18      	ldr	r2, [pc, #96]	; (8004eec <TIM_OC3_SetConfig+0xe4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d007      	beq.n	8004e9e <TIM_OC3_SetConfig+0x96>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a17      	ldr	r2, [pc, #92]	; (8004ef0 <TIM_OC3_SetConfig+0xe8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d003      	beq.n	8004e9e <TIM_OC3_SetConfig+0x96>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a16      	ldr	r2, [pc, #88]	; (8004ef4 <TIM_OC3_SetConfig+0xec>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d113      	bne.n	8004ec6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	621a      	str	r2, [r3, #32]
}
 8004ee0:	bf00      	nop
 8004ee2:	371c      	adds	r7, #28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	40012c00 	.word	0x40012c00
 8004ef0:	40014000 	.word	0x40014000
 8004ef4:	40014400 	.word	0x40014400

08004ef8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	021b      	lsls	r3, r3, #8
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	031b      	lsls	r3, r3, #12
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a14      	ldr	r2, [pc, #80]	; (8004fa8 <TIM_OC4_SetConfig+0xb0>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d007      	beq.n	8004f6c <TIM_OC4_SetConfig+0x74>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a13      	ldr	r2, [pc, #76]	; (8004fac <TIM_OC4_SetConfig+0xb4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d003      	beq.n	8004f6c <TIM_OC4_SetConfig+0x74>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a12      	ldr	r2, [pc, #72]	; (8004fb0 <TIM_OC4_SetConfig+0xb8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d109      	bne.n	8004f80 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	019b      	lsls	r3, r3, #6
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	621a      	str	r2, [r3, #32]
}
 8004f9a:	bf00      	nop
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40014400 	.word	0x40014400

08004fb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ff8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	041b      	lsls	r3, r3, #16
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a13      	ldr	r2, [pc, #76]	; (8005058 <TIM_OC5_SetConfig+0xa4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d007      	beq.n	800501e <TIM_OC5_SetConfig+0x6a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a12      	ldr	r2, [pc, #72]	; (800505c <TIM_OC5_SetConfig+0xa8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d003      	beq.n	800501e <TIM_OC5_SetConfig+0x6a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a11      	ldr	r2, [pc, #68]	; (8005060 <TIM_OC5_SetConfig+0xac>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d109      	bne.n	8005032 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005024:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	021b      	lsls	r3, r3, #8
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	621a      	str	r2, [r3, #32]
}
 800504c:	bf00      	nop
 800504e:	371c      	adds	r7, #28
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	40012c00 	.word	0x40012c00
 800505c:	40014000 	.word	0x40014000
 8005060:	40014400 	.word	0x40014400

08005064 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	051b      	lsls	r3, r3, #20
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a14      	ldr	r2, [pc, #80]	; (800510c <TIM_OC6_SetConfig+0xa8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d007      	beq.n	80050d0 <TIM_OC6_SetConfig+0x6c>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a13      	ldr	r2, [pc, #76]	; (8005110 <TIM_OC6_SetConfig+0xac>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d003      	beq.n	80050d0 <TIM_OC6_SetConfig+0x6c>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a12      	ldr	r2, [pc, #72]	; (8005114 <TIM_OC6_SetConfig+0xb0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d109      	bne.n	80050e4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	029b      	lsls	r3, r3, #10
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	621a      	str	r2, [r3, #32]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40012c00 	.word	0x40012c00
 8005110:	40014000 	.word	0x40014000
 8005114:	40014400 	.word	0x40014400

08005118 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	f023 0201 	bic.w	r2, r3, #1
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4a20      	ldr	r2, [pc, #128]	; (80051c4 <TIM_TI1_SetConfig+0xac>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00b      	beq.n	800515e <TIM_TI1_SetConfig+0x46>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514c:	d007      	beq.n	800515e <TIM_TI1_SetConfig+0x46>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4a1d      	ldr	r2, [pc, #116]	; (80051c8 <TIM_TI1_SetConfig+0xb0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d003      	beq.n	800515e <TIM_TI1_SetConfig+0x46>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4a1c      	ldr	r2, [pc, #112]	; (80051cc <TIM_TI1_SetConfig+0xb4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d101      	bne.n	8005162 <TIM_TI1_SetConfig+0x4a>
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <TIM_TI1_SetConfig+0x4c>
 8005162:	2300      	movs	r3, #0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d008      	beq.n	800517a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f023 0303 	bic.w	r3, r3, #3
 800516e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	e003      	b.n	8005182 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f043 0301 	orr.w	r3, r3, #1
 8005180:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005188:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	b2db      	uxtb	r3, r3
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f023 030a 	bic.w	r3, r3, #10
 800519c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f003 030a 	and.w	r3, r3, #10
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	621a      	str	r2, [r3, #32]
}
 80051b6:	bf00      	nop
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40012c00 	.word	0x40012c00
 80051c8:	40000400 	.word	0x40000400
 80051cc:	40014000 	.word	0x40014000

080051d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	f023 0201 	bic.w	r2, r3, #1
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f023 030a 	bic.w	r3, r3, #10
 800520c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	621a      	str	r2, [r3, #32]
}
 8005222:	bf00      	nop
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800522e:	b480      	push	{r7}
 8005230:	b087      	sub	sp, #28
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
 800523a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	f023 0210 	bic.w	r2, r3, #16
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800526c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	031b      	lsls	r3, r3, #12
 8005272:	b29b      	uxth	r3, r3
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	4313      	orrs	r3, r2
 8005278:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005280:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	621a      	str	r2, [r3, #32]
}
 800529c:	bf00      	nop
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	f023 0210 	bic.w	r2, r3, #16
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	031b      	lsls	r3, r3, #12
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	621a      	str	r2, [r3, #32]
}
 80052fc:	bf00      	nop
 80052fe:	371c      	adds	r7, #28
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f023 0303 	bic.w	r3, r3, #3
 8005334:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005344:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	b2db      	uxtb	r3, r3
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005358:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	021b      	lsls	r3, r3, #8
 800535e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	621a      	str	r2, [r3, #32]
}
 8005374:	bf00      	nop
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	031b      	lsls	r3, r3, #12
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80053d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	031b      	lsls	r3, r3, #12
 80053d8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b085      	sub	sp, #20
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	f043 0307 	orr.w	r3, r3, #7
 800541c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	609a      	str	r2, [r3, #8]
}
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800544a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	021a      	lsls	r2, r3, #8
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	431a      	orrs	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4313      	orrs	r3, r2
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	609a      	str	r2, [r3, #8]
}
 8005464:	bf00      	nop
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005484:	2302      	movs	r3, #2
 8005486:	e040      	b.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a1a      	ldr	r2, [pc, #104]	; (8005518 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d108      	bne.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054dc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40012c00 	.word	0x40012c00

0800551c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005534:	2302      	movs	r3, #2
 8005536:	e060      	b.n	80055fa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4313      	orrs	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	041b      	lsls	r3, r3, #16
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a14      	ldr	r2, [pc, #80]	; (8005608 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d115      	bne.n	80055e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	051b      	lsls	r3, r3, #20
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40012c00 	.word	0x40012c00

0800560c <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e043      	b.n	80056e2 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f005 fa70 	bl	800ab54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2224      	movs	r2, #36	; 0x24
 8005678:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6812      	ldr	r2, [r2, #0]
 8005684:	6812      	ldr	r2, [r2, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f82d 	bl	80056ec <UART_SetConfig>
 8005692:	4603      	mov	r3, r0
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e022      	b.n	80056e2 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fb31 	bl	8005d0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	6852      	ldr	r2, [r2, #4]
 80056b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6812      	ldr	r2, [r2, #0]
 80056c2:	6892      	ldr	r2, [r2, #8]
 80056c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056c8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6812      	ldr	r2, [r2, #0]
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	f042 0201 	orr.w	r2, r2, #1
 80056d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fbb8 	bl	8005e50 <UART_CheckIdleState>
 80056e0:	4603      	mov	r3, r0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80056f0:	b088      	sub	sp, #32
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80056fa:	2310      	movs	r3, #16
 80056fc:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 80056fe:	2300      	movs	r3, #0
 8005700:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 8005702:	2300      	movs	r3, #0
 8005704:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	4313      	orrs	r3, r2
 8005724:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6819      	ldr	r1, [r3, #0]
 8005730:	4bad      	ldr	r3, [pc, #692]	; (80059e8 <UART_SetConfig+0x2fc>)
 8005732:	400b      	ands	r3, r1
 8005734:	69f9      	ldr	r1, [r7, #28]
 8005736:	430b      	orrs	r3, r1
 8005738:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	6852      	ldr	r2, [r2, #4]
 8005744:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	68d2      	ldr	r2, [r2, #12]
 800574c:	430a      	orrs	r2, r1
 800574e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4aa4      	ldr	r2, [pc, #656]	; (80059ec <UART_SetConfig+0x300>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d004      	beq.n	800576a <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	69fa      	ldr	r2, [r7, #28]
 8005766:	4313      	orrs	r3, r2
 8005768:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	6892      	ldr	r2, [r2, #8]
 8005774:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8005778:	69fa      	ldr	r2, [r7, #28]
 800577a:	430a      	orrs	r2, r1
 800577c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a9b      	ldr	r2, [pc, #620]	; (80059f0 <UART_SetConfig+0x304>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d121      	bne.n	80057cc <UART_SetConfig+0xe0>
 8005788:	4b9a      	ldr	r3, [pc, #616]	; (80059f4 <UART_SetConfig+0x308>)
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	2b03      	cmp	r3, #3
 8005794:	d816      	bhi.n	80057c4 <UART_SetConfig+0xd8>
 8005796:	a201      	add	r2, pc, #4	; (adr r2, 800579c <UART_SetConfig+0xb0>)
 8005798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579c:	080057ad 	.word	0x080057ad
 80057a0:	080057b9 	.word	0x080057b9
 80057a4:	080057b3 	.word	0x080057b3
 80057a8:	080057bf 	.word	0x080057bf
 80057ac:	2301      	movs	r3, #1
 80057ae:	76fb      	strb	r3, [r7, #27]
 80057b0:	e0ba      	b.n	8005928 <UART_SetConfig+0x23c>
 80057b2:	2302      	movs	r3, #2
 80057b4:	76fb      	strb	r3, [r7, #27]
 80057b6:	e0b7      	b.n	8005928 <UART_SetConfig+0x23c>
 80057b8:	2304      	movs	r3, #4
 80057ba:	76fb      	strb	r3, [r7, #27]
 80057bc:	e0b4      	b.n	8005928 <UART_SetConfig+0x23c>
 80057be:	2308      	movs	r3, #8
 80057c0:	76fb      	strb	r3, [r7, #27]
 80057c2:	e0b1      	b.n	8005928 <UART_SetConfig+0x23c>
 80057c4:	2310      	movs	r3, #16
 80057c6:	76fb      	strb	r3, [r7, #27]
 80057c8:	bf00      	nop
 80057ca:	e0ad      	b.n	8005928 <UART_SetConfig+0x23c>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a89      	ldr	r2, [pc, #548]	; (80059f8 <UART_SetConfig+0x30c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d134      	bne.n	8005840 <UART_SetConfig+0x154>
 80057d6:	4b87      	ldr	r3, [pc, #540]	; (80059f4 <UART_SetConfig+0x308>)
 80057d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057dc:	f003 030c 	and.w	r3, r3, #12
 80057e0:	2b0c      	cmp	r3, #12
 80057e2:	d829      	bhi.n	8005838 <UART_SetConfig+0x14c>
 80057e4:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <UART_SetConfig+0x100>)
 80057e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ea:	bf00      	nop
 80057ec:	08005821 	.word	0x08005821
 80057f0:	08005839 	.word	0x08005839
 80057f4:	08005839 	.word	0x08005839
 80057f8:	08005839 	.word	0x08005839
 80057fc:	0800582d 	.word	0x0800582d
 8005800:	08005839 	.word	0x08005839
 8005804:	08005839 	.word	0x08005839
 8005808:	08005839 	.word	0x08005839
 800580c:	08005827 	.word	0x08005827
 8005810:	08005839 	.word	0x08005839
 8005814:	08005839 	.word	0x08005839
 8005818:	08005839 	.word	0x08005839
 800581c:	08005833 	.word	0x08005833
 8005820:	2300      	movs	r3, #0
 8005822:	76fb      	strb	r3, [r7, #27]
 8005824:	e080      	b.n	8005928 <UART_SetConfig+0x23c>
 8005826:	2302      	movs	r3, #2
 8005828:	76fb      	strb	r3, [r7, #27]
 800582a:	e07d      	b.n	8005928 <UART_SetConfig+0x23c>
 800582c:	2304      	movs	r3, #4
 800582e:	76fb      	strb	r3, [r7, #27]
 8005830:	e07a      	b.n	8005928 <UART_SetConfig+0x23c>
 8005832:	2308      	movs	r3, #8
 8005834:	76fb      	strb	r3, [r7, #27]
 8005836:	e077      	b.n	8005928 <UART_SetConfig+0x23c>
 8005838:	2310      	movs	r3, #16
 800583a:	76fb      	strb	r3, [r7, #27]
 800583c:	bf00      	nop
 800583e:	e073      	b.n	8005928 <UART_SetConfig+0x23c>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a6d      	ldr	r2, [pc, #436]	; (80059fc <UART_SetConfig+0x310>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d120      	bne.n	800588c <UART_SetConfig+0x1a0>
 800584a:	4b6a      	ldr	r3, [pc, #424]	; (80059f4 <UART_SetConfig+0x308>)
 800584c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005850:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005854:	2b10      	cmp	r3, #16
 8005856:	d00f      	beq.n	8005878 <UART_SetConfig+0x18c>
 8005858:	2b10      	cmp	r3, #16
 800585a:	d802      	bhi.n	8005862 <UART_SetConfig+0x176>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <UART_SetConfig+0x180>
 8005860:	e010      	b.n	8005884 <UART_SetConfig+0x198>
 8005862:	2b20      	cmp	r3, #32
 8005864:	d005      	beq.n	8005872 <UART_SetConfig+0x186>
 8005866:	2b30      	cmp	r3, #48	; 0x30
 8005868:	d009      	beq.n	800587e <UART_SetConfig+0x192>
 800586a:	e00b      	b.n	8005884 <UART_SetConfig+0x198>
 800586c:	2300      	movs	r3, #0
 800586e:	76fb      	strb	r3, [r7, #27]
 8005870:	e05a      	b.n	8005928 <UART_SetConfig+0x23c>
 8005872:	2302      	movs	r3, #2
 8005874:	76fb      	strb	r3, [r7, #27]
 8005876:	e057      	b.n	8005928 <UART_SetConfig+0x23c>
 8005878:	2304      	movs	r3, #4
 800587a:	76fb      	strb	r3, [r7, #27]
 800587c:	e054      	b.n	8005928 <UART_SetConfig+0x23c>
 800587e:	2308      	movs	r3, #8
 8005880:	76fb      	strb	r3, [r7, #27]
 8005882:	e051      	b.n	8005928 <UART_SetConfig+0x23c>
 8005884:	2310      	movs	r3, #16
 8005886:	76fb      	strb	r3, [r7, #27]
 8005888:	bf00      	nop
 800588a:	e04d      	b.n	8005928 <UART_SetConfig+0x23c>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a5b      	ldr	r2, [pc, #364]	; (8005a00 <UART_SetConfig+0x314>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d120      	bne.n	80058d8 <UART_SetConfig+0x1ec>
 8005896:	4b57      	ldr	r3, [pc, #348]	; (80059f4 <UART_SetConfig+0x308>)
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058a0:	2b40      	cmp	r3, #64	; 0x40
 80058a2:	d00f      	beq.n	80058c4 <UART_SetConfig+0x1d8>
 80058a4:	2b40      	cmp	r3, #64	; 0x40
 80058a6:	d802      	bhi.n	80058ae <UART_SetConfig+0x1c2>
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d005      	beq.n	80058b8 <UART_SetConfig+0x1cc>
 80058ac:	e010      	b.n	80058d0 <UART_SetConfig+0x1e4>
 80058ae:	2b80      	cmp	r3, #128	; 0x80
 80058b0:	d005      	beq.n	80058be <UART_SetConfig+0x1d2>
 80058b2:	2bc0      	cmp	r3, #192	; 0xc0
 80058b4:	d009      	beq.n	80058ca <UART_SetConfig+0x1de>
 80058b6:	e00b      	b.n	80058d0 <UART_SetConfig+0x1e4>
 80058b8:	2300      	movs	r3, #0
 80058ba:	76fb      	strb	r3, [r7, #27]
 80058bc:	e034      	b.n	8005928 <UART_SetConfig+0x23c>
 80058be:	2302      	movs	r3, #2
 80058c0:	76fb      	strb	r3, [r7, #27]
 80058c2:	e031      	b.n	8005928 <UART_SetConfig+0x23c>
 80058c4:	2304      	movs	r3, #4
 80058c6:	76fb      	strb	r3, [r7, #27]
 80058c8:	e02e      	b.n	8005928 <UART_SetConfig+0x23c>
 80058ca:	2308      	movs	r3, #8
 80058cc:	76fb      	strb	r3, [r7, #27]
 80058ce:	e02b      	b.n	8005928 <UART_SetConfig+0x23c>
 80058d0:	2310      	movs	r3, #16
 80058d2:	76fb      	strb	r3, [r7, #27]
 80058d4:	bf00      	nop
 80058d6:	e027      	b.n	8005928 <UART_SetConfig+0x23c>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a43      	ldr	r2, [pc, #268]	; (80059ec <UART_SetConfig+0x300>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d123      	bne.n	800592a <UART_SetConfig+0x23e>
 80058e2:	4b44      	ldr	r3, [pc, #272]	; (80059f4 <UART_SetConfig+0x308>)
 80058e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f0:	d012      	beq.n	8005918 <UART_SetConfig+0x22c>
 80058f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f6:	d802      	bhi.n	80058fe <UART_SetConfig+0x212>
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d007      	beq.n	800590c <UART_SetConfig+0x220>
 80058fc:	e012      	b.n	8005924 <UART_SetConfig+0x238>
 80058fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005902:	d006      	beq.n	8005912 <UART_SetConfig+0x226>
 8005904:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005908:	d009      	beq.n	800591e <UART_SetConfig+0x232>
 800590a:	e00b      	b.n	8005924 <UART_SetConfig+0x238>
 800590c:	2300      	movs	r3, #0
 800590e:	76fb      	strb	r3, [r7, #27]
 8005910:	e00a      	b.n	8005928 <UART_SetConfig+0x23c>
 8005912:	2302      	movs	r3, #2
 8005914:	76fb      	strb	r3, [r7, #27]
 8005916:	e007      	b.n	8005928 <UART_SetConfig+0x23c>
 8005918:	2304      	movs	r3, #4
 800591a:	76fb      	strb	r3, [r7, #27]
 800591c:	e004      	b.n	8005928 <UART_SetConfig+0x23c>
 800591e:	2308      	movs	r3, #8
 8005920:	76fb      	strb	r3, [r7, #27]
 8005922:	e001      	b.n	8005928 <UART_SetConfig+0x23c>
 8005924:	2310      	movs	r3, #16
 8005926:	76fb      	strb	r3, [r7, #27]
 8005928:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a2f      	ldr	r2, [pc, #188]	; (80059ec <UART_SetConfig+0x300>)
 8005930:	4293      	cmp	r3, r2
 8005932:	f040 80ea 	bne.w	8005b0a <UART_SetConfig+0x41e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005936:	7efb      	ldrb	r3, [r7, #27]
 8005938:	2b08      	cmp	r3, #8
 800593a:	d824      	bhi.n	8005986 <UART_SetConfig+0x29a>
 800593c:	a201      	add	r2, pc, #4	; (adr r2, 8005944 <UART_SetConfig+0x258>)
 800593e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005942:	bf00      	nop
 8005944:	08005969 	.word	0x08005969
 8005948:	08005987 	.word	0x08005987
 800594c:	08005971 	.word	0x08005971
 8005950:	08005987 	.word	0x08005987
 8005954:	08005977 	.word	0x08005977
 8005958:	08005987 	.word	0x08005987
 800595c:	08005987 	.word	0x08005987
 8005960:	08005987 	.word	0x08005987
 8005964:	0800597f 	.word	0x0800597f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005968:	f7fe f8bc 	bl	8003ae4 <HAL_RCC_GetPCLK1Freq>
 800596c:	60f8      	str	r0, [r7, #12]
#endif
        break;
 800596e:	e00d      	b.n	800598c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005970:	4b24      	ldr	r3, [pc, #144]	; (8005a04 <UART_SetConfig+0x318>)
 8005972:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8005974:	e00a      	b.n	800598c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005976:	f7fe f80d 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 800597a:	60f8      	str	r0, [r7, #12]
#endif
        break;
 800597c:	e006      	b.n	800598c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800597e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005982:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8005984:	e002      	b.n	800598c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	74fb      	strb	r3, [r7, #19]
        break;
 800598a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 81ad 	beq.w	8005cee <UART_SetConfig+0x602>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	4613      	mov	r3, r2
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	441a      	add	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d805      	bhi.n	80059b0 <UART_SetConfig+0x2c4>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d202      	bcs.n	80059b6 <UART_SetConfig+0x2ca>
      {
        ret = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	74fb      	strb	r3, [r7, #19]
 80059b4:	e19b      	b.n	8005cee <UART_SetConfig+0x602>
      }
      else
      {
        switch (clocksource)
 80059b6:	7efb      	ldrb	r3, [r7, #27]
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	f200 8093 	bhi.w	8005ae4 <UART_SetConfig+0x3f8>
 80059be:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <UART_SetConfig+0x2d8>)
 80059c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c4:	08005a09 	.word	0x08005a09
 80059c8:	08005ae5 	.word	0x08005ae5
 80059cc:	08005a49 	.word	0x08005a49
 80059d0:	08005ae5 	.word	0x08005ae5
 80059d4:	08005a7d 	.word	0x08005a7d
 80059d8:	08005ae5 	.word	0x08005ae5
 80059dc:	08005ae5 	.word	0x08005ae5
 80059e0:	08005ae5 	.word	0x08005ae5
 80059e4:	08005abb 	.word	0x08005abb
 80059e8:	efff69f3 	.word	0xefff69f3
 80059ec:	40008000 	.word	0x40008000
 80059f0:	40013800 	.word	0x40013800
 80059f4:	40021000 	.word	0x40021000
 80059f8:	40004400 	.word	0x40004400
 80059fc:	40004800 	.word	0x40004800
 8005a00:	40004c00 	.word	0x40004c00
 8005a04:	00f42400 	.word	0x00f42400
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005a08:	f7fe f86c 	bl	8003ae4 <HAL_RCC_GetPCLK1Freq>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f04f 0400 	mov.w	r4, #0
 8005a12:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8005a16:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8005a1a:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	085b      	lsrs	r3, r3, #1
 8005a24:	f04f 0400 	mov.w	r4, #0
 8005a28:	eb18 0003 	adds.w	r0, r8, r3
 8005a2c:	eb49 0104 	adc.w	r1, r9, r4
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f04f 0400 	mov.w	r4, #0
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4623      	mov	r3, r4
 8005a3c:	f7fa fbca 	bl	80001d4 <__aeabi_uldivmod>
 8005a40:	4603      	mov	r3, r0
 8005a42:	460c      	mov	r4, r1
 8005a44:	617b      	str	r3, [r7, #20]
#endif
            break;
 8005a46:	e050      	b.n	8005aea <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	f04f 0400 	mov.w	r4, #0
 8005a52:	49ad      	ldr	r1, [pc, #692]	; (8005d08 <UART_SetConfig+0x61c>)
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	eb13 0801 	adds.w	r8, r3, r1
 8005a5c:	eb44 0902 	adc.w	r9, r4, r2
 8005a60:	4640      	mov	r0, r8
 8005a62:	4649      	mov	r1, r9
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f04f 0400 	mov.w	r4, #0
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4623      	mov	r3, r4
 8005a70:	f7fa fbb0 	bl	80001d4 <__aeabi_uldivmod>
 8005a74:	4603      	mov	r3, r0
 8005a76:	460c      	mov	r4, r1
 8005a78:	617b      	str	r3, [r7, #20]
#endif
            break;
 8005a7a:	e036      	b.n	8005aea <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005a7c:	f7fd ff8a 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 8005a80:	4603      	mov	r3, r0
 8005a82:	461a      	mov	r2, r3
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	021d      	lsls	r5, r3, #8
 8005a8a:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8005a8e:	0214      	lsls	r4, r2, #8
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	085b      	lsrs	r3, r3, #1
 8005a96:	461a      	mov	r2, r3
 8005a98:	f04f 0300 	mov.w	r3, #0
 8005a9c:	18a0      	adds	r0, r4, r2
 8005a9e:	eb45 0103 	adc.w	r1, r5, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f04f 0400 	mov.w	r4, #0
 8005aaa:	461a      	mov	r2, r3
 8005aac:	4623      	mov	r3, r4
 8005aae:	f7fa fb91 	bl	80001d4 <__aeabi_uldivmod>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	617b      	str	r3, [r7, #20]
#endif
            break;
 8005ab8:	e017      	b.n	8005aea <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	085b      	lsrs	r3, r3, #1
 8005ac0:	f04f 0400 	mov.w	r4, #0
 8005ac4:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005ac8:	f144 0100 	adc.w	r1, r4, #0
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f04f 0400 	mov.w	r4, #0
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4623      	mov	r3, r4
 8005ad8:	f7fa fb7c 	bl	80001d4 <__aeabi_uldivmod>
 8005adc:	4603      	mov	r3, r0
 8005ade:	460c      	mov	r4, r1
 8005ae0:	617b      	str	r3, [r7, #20]
#endif
            break;
 8005ae2:	e002      	b.n	8005aea <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	74fb      	strb	r3, [r7, #19]
            break;
 8005ae8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005af0:	d308      	bcc.n	8005b04 <UART_SetConfig+0x418>
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005af8:	d204      	bcs.n	8005b04 <UART_SetConfig+0x418>
        {
          huart->Instance->BRR = usartdiv;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	60da      	str	r2, [r3, #12]
 8005b02:	e0f4      	b.n	8005cee <UART_SetConfig+0x602>
        }
        else
        {
          ret = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	74fb      	strb	r3, [r7, #19]
 8005b08:	e0f1      	b.n	8005cee <UART_SetConfig+0x602>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b12:	d17e      	bne.n	8005c12 <UART_SetConfig+0x526>
  {
    switch (clocksource)
 8005b14:	7efb      	ldrb	r3, [r7, #27]
 8005b16:	2b08      	cmp	r3, #8
 8005b18:	d85b      	bhi.n	8005bd2 <UART_SetConfig+0x4e6>
 8005b1a:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <UART_SetConfig+0x434>)
 8005b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b20:	08005b45 	.word	0x08005b45
 8005b24:	08005b63 	.word	0x08005b63
 8005b28:	08005b81 	.word	0x08005b81
 8005b2c:	08005bd3 	.word	0x08005bd3
 8005b30:	08005b9d 	.word	0x08005b9d
 8005b34:	08005bd3 	.word	0x08005bd3
 8005b38:	08005bd3 	.word	0x08005bd3
 8005b3c:	08005bd3 	.word	0x08005bd3
 8005b40:	08005bbb 	.word	0x08005bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005b44:	f7fd ffce 	bl	8003ae4 <HAL_RCC_GetPCLK1Freq>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	005a      	lsls	r2, r3, #1
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	085b      	lsrs	r3, r3, #1
 8005b52:	441a      	add	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005b60:	e03a      	b.n	8005bd8 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005b62:	f7fd ffd5 	bl	8003b10 <HAL_RCC_GetPCLK2Freq>
 8005b66:	4603      	mov	r3, r0
 8005b68:	005a      	lsls	r2, r3, #1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	085b      	lsrs	r3, r3, #1
 8005b70:	441a      	add	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005b7e:	e02b      	b.n	8005bd8 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	085b      	lsrs	r3, r3, #1
 8005b86:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005b8a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6852      	ldr	r2, [r2, #4]
 8005b92:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005b9a:	e01d      	b.n	8005bd8 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005b9c:	f7fd fefa 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	005a      	lsls	r2, r3, #1
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	441a      	add	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005bb8:	e00e      	b.n	8005bd8 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	085b      	lsrs	r3, r3, #1
 8005bc0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005bd0:	e002      	b.n	8005bd8 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	74fb      	strb	r3, [r7, #19]
        break;
 8005bd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2b0f      	cmp	r3, #15
 8005bdc:	d916      	bls.n	8005c0c <UART_SetConfig+0x520>
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be4:	d212      	bcs.n	8005c0c <UART_SetConfig+0x520>
    {
      brrtemp = usartdiv & 0xFFF0U;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	f023 030f 	bic.w	r3, r3, #15
 8005bee:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	085b      	lsrs	r3, r3, #1
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	897b      	ldrh	r3, [r7, #10]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	897a      	ldrh	r2, [r7, #10]
 8005c08:	60da      	str	r2, [r3, #12]
 8005c0a:	e070      	b.n	8005cee <UART_SetConfig+0x602>
    }
    else
    {
      ret = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	74fb      	strb	r3, [r7, #19]
 8005c10:	e06d      	b.n	8005cee <UART_SetConfig+0x602>
    }
  }
  else
  {
    switch (clocksource)
 8005c12:	7efb      	ldrb	r3, [r7, #27]
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d859      	bhi.n	8005ccc <UART_SetConfig+0x5e0>
 8005c18:	a201      	add	r2, pc, #4	; (adr r2, 8005c20 <UART_SetConfig+0x534>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005c45 	.word	0x08005c45
 8005c24:	08005c61 	.word	0x08005c61
 8005c28:	08005c7d 	.word	0x08005c7d
 8005c2c:	08005ccd 	.word	0x08005ccd
 8005c30:	08005c99 	.word	0x08005c99
 8005c34:	08005ccd 	.word	0x08005ccd
 8005c38:	08005ccd 	.word	0x08005ccd
 8005c3c:	08005ccd 	.word	0x08005ccd
 8005c40:	08005cb5 	.word	0x08005cb5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005c44:	f7fd ff4e 	bl	8003ae4 <HAL_RCC_GetPCLK1Freq>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	085b      	lsrs	r3, r3, #1
 8005c50:	441a      	add	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005c5e:	e038      	b.n	8005cd2 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005c60:	f7fd ff56 	bl	8003b10 <HAL_RCC_GetPCLK2Freq>
 8005c64:	4602      	mov	r2, r0
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	085b      	lsrs	r3, r3, #1
 8005c6c:	441a      	add	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005c7a:	e02a      	b.n	8005cd2 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	085b      	lsrs	r3, r3, #1
 8005c82:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005c86:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6852      	ldr	r2, [r2, #4]
 8005c8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005c96:	e01c      	b.n	8005cd2 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c98:	f7fd fe7c 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	085b      	lsrs	r3, r3, #1
 8005ca4:	441a      	add	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005cb2:	e00e      	b.n	8005cd2 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	085b      	lsrs	r3, r3, #1
 8005cba:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005cca:	e002      	b.n	8005cd2 <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	74fb      	strb	r3, [r7, #19]
        break;
 8005cd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2b0f      	cmp	r3, #15
 8005cd6:	d908      	bls.n	8005cea <UART_SetConfig+0x5fe>
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cde:	d204      	bcs.n	8005cea <UART_SetConfig+0x5fe>
    {
      huart->Instance->BRR = usartdiv;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	60da      	str	r2, [r3, #12]
 8005ce8:	e001      	b.n	8005cee <UART_SetConfig+0x602>
    }
    else
    {
      ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005cfa:	7cfb      	ldrb	r3, [r7, #19]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3720      	adds	r7, #32
 8005d00:	46bd      	mov	sp, r7
 8005d02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005d06:	bf00      	nop
 8005d08:	f4240000 	.word	0xf4240000

08005d0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00a      	beq.n	8005d36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	6852      	ldr	r2, [r2, #4]
 8005d2a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005d32:	430a      	orrs	r2, r1
 8005d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00a      	beq.n	8005d58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	6812      	ldr	r2, [r2, #0]
 8005d4a:	6852      	ldr	r2, [r2, #4]
 8005d4c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005d54:	430a      	orrs	r2, r1
 8005d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00a      	beq.n	8005d7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	6812      	ldr	r2, [r2, #0]
 8005d6c:	6852      	ldr	r2, [r2, #4]
 8005d6e:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d76:	430a      	orrs	r2, r1
 8005d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	f003 0308 	and.w	r3, r3, #8
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00a      	beq.n	8005d9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6812      	ldr	r2, [r2, #0]
 8005d8e:	6852      	ldr	r2, [r2, #4]
 8005d90:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00a      	beq.n	8005dbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6812      	ldr	r2, [r2, #0]
 8005db0:	6892      	ldr	r2, [r2, #8]
 8005db2:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6812      	ldr	r2, [r2, #0]
 8005dd2:	6892      	ldr	r2, [r2, #8]
 8005dd4:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01a      	beq.n	8005e22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6812      	ldr	r2, [r2, #0]
 8005df4:	6852      	ldr	r2, [r2, #4]
 8005df6:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e0a:	d10a      	bne.n	8005e22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	6852      	ldr	r2, [r2, #4]
 8005e16:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	6812      	ldr	r2, [r2, #0]
 8005e36:	6852      	ldr	r2, [r2, #4]
 8005e38:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e40:	430a      	orrs	r2, r1
 8005e42:	605a      	str	r2, [r3, #4]
  }
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af02      	add	r7, sp, #8
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005e62:	f7fb f995 	bl	8001190 <HAL_GetTick>
 8005e66:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0308 	and.w	r3, r3, #8
 8005e72:	2b08      	cmp	r3, #8
 8005e74:	d10e      	bne.n	8005e94 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f82c 	bl	8005ee2 <UART_WaitOnFlagUntilTimeout>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e022      	b.n	8005eda <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d10e      	bne.n	8005ec0 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ea2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f816 	bl	8005ee2 <UART_WaitOnFlagUntilTimeout>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e00c      	b.n	8005eda <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	603b      	str	r3, [r7, #0]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ef2:	e02c      	b.n	8005f4e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efa:	d028      	beq.n	8005f4e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d007      	beq.n	8005f12 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f02:	f7fb f945 	bl	8001190 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	1ad2      	subs	r2, r2, r3
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d91d      	bls.n	8005f4e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	6812      	ldr	r2, [r2, #0]
 8005f1a:	6812      	ldr	r2, [r2, #0]
 8005f1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f20:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	6812      	ldr	r2, [r2, #0]
 8005f2a:	6892      	ldr	r2, [r2, #8]
 8005f2c:	f022 0201 	bic.w	r2, r2, #1
 8005f30:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e00f      	b.n	8005f6e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69da      	ldr	r2, [r3, #28]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	401a      	ands	r2, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	bf0c      	ite	eq
 8005f5e:	2301      	moveq	r3, #1
 8005f60:	2300      	movne	r3, #0
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	461a      	mov	r2, r3
 8005f66:	79fb      	ldrb	r3, [r7, #7]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d0c3      	beq.n	8005ef4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f76:	b084      	sub	sp, #16
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	f107 0014 	add.w	r0, r7, #20
 8005f84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	b004      	add	sp, #16
 8005f96:	4770      	bx	lr

08005f98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fa0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005fa4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	89fb      	ldrh	r3, [r7, #14]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fd0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005fd4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	b21a      	sxth	r2, r3
 8005fe0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005fe4:	43db      	mvns	r3, r3
 8005fe6:	b21b      	sxth	r3, r3
 8005fe8:	4013      	ands	r3, r2
 8005fea:	b21b      	sxth	r3, r3
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	460b      	mov	r3, r1
 800600c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800601c:	b084      	sub	sp, #16
 800601e:	b580      	push	{r7, lr}
 8006020:	b082      	sub	sp, #8
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	f107 0014 	add.w	r0, r7, #20
 800602a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff ffa2 	bl	8005f98 <USB_EnableGlobalInt>

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006060:	b004      	add	sp, #16
 8006062:	4770      	bx	lr

08006064 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006064:	b490      	push	{r4, r7}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	b29b      	uxth	r3, r3
 8006080:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006088:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	78db      	ldrb	r3, [r3, #3]
 800608e:	2b03      	cmp	r3, #3
 8006090:	d819      	bhi.n	80060c6 <USB_ActivateEndpoint+0x62>
 8006092:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <USB_ActivateEndpoint+0x34>)
 8006094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006098:	080060a9 	.word	0x080060a9
 800609c:	080060bd 	.word	0x080060bd
 80060a0:	080060cd 	.word	0x080060cd
 80060a4:	080060b3 	.word	0x080060b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80060a8:	8abb      	ldrh	r3, [r7, #20]
 80060aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060ae:	82bb      	strh	r3, [r7, #20]
      break;
 80060b0:	e00d      	b.n	80060ce <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80060b2:	8abb      	ldrh	r3, [r7, #20]
 80060b4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80060b8:	82bb      	strh	r3, [r7, #20]
      break;
 80060ba:	e008      	b.n	80060ce <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80060bc:	8abb      	ldrh	r3, [r7, #20]
 80060be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060c2:	82bb      	strh	r3, [r7, #20]
      break;
 80060c4:	e003      	b.n	80060ce <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	75fb      	strb	r3, [r7, #23]
      break;
 80060ca:	e000      	b.n	80060ce <USB_ActivateEndpoint+0x6a>
      break;
 80060cc:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal);
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	8aba      	ldrh	r2, [r7, #20]
 80060da:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	b21b      	sxth	r3, r3
 80060ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f4:	b21a      	sxth	r2, r3
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	b21b      	sxth	r3, r3
 80060fc:	4313      	orrs	r3, r2
 80060fe:	b21b      	sxth	r3, r3
 8006100:	b29c      	uxth	r4, r3
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	441a      	add	r2, r3
 800610c:	4b87      	ldr	r3, [pc, #540]	; (800632c <USB_ActivateEndpoint+0x2c8>)
 800610e:	4323      	orrs	r3, r4
 8006110:	b29b      	uxth	r3, r3
 8006112:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	7b1b      	ldrb	r3, [r3, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	f040 810d 	bne.w	8006338 <USB_ActivateEndpoint+0x2d4>
  {
    if (ep->is_in != 0U)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	785b      	ldrb	r3, [r3, #1]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d067      	beq.n	80061f6 <USB_ActivateEndpoint+0x192>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006126:	687c      	ldr	r4, [r7, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800612e:	b29b      	uxth	r3, r3
 8006130:	441c      	add	r4, r3
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	4423      	add	r3, r4
 800613a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800613e:	461c      	mov	r4, r3
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	88db      	ldrh	r3, [r3, #6]
 8006144:	085b      	lsrs	r3, r3, #1
 8006146:	b29b      	uxth	r3, r3
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	b29b      	uxth	r3, r3
 800614c:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29c      	uxth	r4, r3
 800615c:	4623      	mov	r3, r4
 800615e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006162:	2b00      	cmp	r3, #0
 8006164:	d014      	beq.n	8006190 <USB_ActivateEndpoint+0x12c>
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617c:	b29c      	uxth	r4, r3
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	441a      	add	r2, r3
 8006188:	4b69      	ldr	r3, [pc, #420]	; (8006330 <USB_ActivateEndpoint+0x2cc>)
 800618a:	4323      	orrs	r3, r4
 800618c:	b29b      	uxth	r3, r3
 800618e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	78db      	ldrb	r3, [r3, #3]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d018      	beq.n	80061ca <USB_ActivateEndpoint+0x166>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061ae:	b29c      	uxth	r4, r3
 80061b0:	f084 0320 	eor.w	r3, r4, #32
 80061b4:	b29c      	uxth	r4, r3
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	441a      	add	r2, r3
 80061c0:	4b5a      	ldr	r3, [pc, #360]	; (800632c <USB_ActivateEndpoint+0x2c8>)
 80061c2:	4323      	orrs	r3, r4
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	8013      	strh	r3, [r2, #0]
 80061c8:	e226      	b.n	8006618 <USB_ActivateEndpoint+0x5b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061e0:	b29c      	uxth	r4, r3
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	441a      	add	r2, r3
 80061ec:	4b4f      	ldr	r3, [pc, #316]	; (800632c <USB_ActivateEndpoint+0x2c8>)
 80061ee:	4323      	orrs	r3, r4
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	8013      	strh	r3, [r2, #0]
 80061f4:	e210      	b.n	8006618 <USB_ActivateEndpoint+0x5b4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80061f6:	687c      	ldr	r4, [r7, #4]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061fe:	b29b      	uxth	r3, r3
 8006200:	441c      	add	r4, r3
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	4423      	add	r3, r4
 800620a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800620e:	461c      	mov	r4, r3
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	88db      	ldrh	r3, [r3, #6]
 8006214:	085b      	lsrs	r3, r3, #1
 8006216:	b29b      	uxth	r3, r3
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	b29b      	uxth	r3, r3
 800621c:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800621e:	687c      	ldr	r4, [r7, #4]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006226:	b29b      	uxth	r3, r3
 8006228:	441c      	add	r4, r3
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	4423      	add	r3, r4
 8006232:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d111      	bne.n	8006264 <USB_ActivateEndpoint+0x200>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	881a      	ldrh	r2, [r3, #0]
 8006244:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8006248:	4013      	ands	r3, r2
 800624a:	b29a      	uxth	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	801a      	strh	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800625c:	b29a      	uxth	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	801a      	strh	r2, [r3, #0]
 8006262:	e026      	b.n	80062b2 <USB_ActivateEndpoint+0x24e>
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	2b3d      	cmp	r3, #61	; 0x3d
 800626a:	d813      	bhi.n	8006294 <USB_ActivateEndpoint+0x230>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	085b      	lsrs	r3, r3, #1
 8006272:	613b      	str	r3, [r7, #16]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <USB_ActivateEndpoint+0x222>
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	3301      	adds	r3, #1
 8006284:	613b      	str	r3, [r7, #16]
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	b29b      	uxth	r3, r3
 800628a:	029b      	lsls	r3, r3, #10
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	801a      	strh	r2, [r3, #0]
 8006292:	e00e      	b.n	80062b2 <USB_ActivateEndpoint+0x24e>
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	095b      	lsrs	r3, r3, #5
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	029b      	lsls	r3, r3, #10
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	b29c      	uxth	r4, r3
 80062c0:	4623      	mov	r3, r4
 80062c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d014      	beq.n	80062f4 <USB_ActivateEndpoint+0x290>
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e0:	b29c      	uxth	r4, r3
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	441a      	add	r2, r3
 80062ec:	4b11      	ldr	r3, [pc, #68]	; (8006334 <USB_ActivateEndpoint+0x2d0>)
 80062ee:	4323      	orrs	r3, r4
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	b29b      	uxth	r3, r3
 8006302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630a:	b29c      	uxth	r4, r3
 800630c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006310:	b29c      	uxth	r4, r3
 8006312:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006316:	b29c      	uxth	r4, r3
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	441a      	add	r2, r3
 8006322:	4b02      	ldr	r3, [pc, #8]	; (800632c <USB_ActivateEndpoint+0x2c8>)
 8006324:	4323      	orrs	r3, r4
 8006326:	b29b      	uxth	r3, r3
 8006328:	8013      	strh	r3, [r2, #0]
 800632a:	e175      	b.n	8006618 <USB_ActivateEndpoint+0x5b4>
 800632c:	ffff8080 	.word	0xffff8080
 8006330:	ffff80c0 	.word	0xffff80c0
 8006334:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	881b      	ldrh	r3, [r3, #0]
 8006344:	b29b      	uxth	r3, r3
 8006346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800634a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634e:	b29c      	uxth	r4, r3
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	441a      	add	r2, r3
 800635a:	4b96      	ldr	r3, [pc, #600]	; (80065b4 <USB_ActivateEndpoint+0x550>)
 800635c:	4323      	orrs	r3, r4
 800635e:	b29b      	uxth	r3, r3
 8006360:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006362:	687c      	ldr	r4, [r7, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800636a:	b29b      	uxth	r3, r3
 800636c:	441c      	add	r4, r3
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	4423      	add	r3, r4
 8006376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800637a:	461c      	mov	r4, r3
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	891b      	ldrh	r3, [r3, #8]
 8006380:	085b      	lsrs	r3, r3, #1
 8006382:	b29b      	uxth	r3, r3
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	b29b      	uxth	r3, r3
 8006388:	8023      	strh	r3, [r4, #0]
 800638a:	687c      	ldr	r4, [r7, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006392:	b29b      	uxth	r3, r3
 8006394:	441c      	add	r4, r3
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	4423      	add	r3, r4
 800639e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063a2:	461c      	mov	r4, r3
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	895b      	ldrh	r3, [r3, #10]
 80063a8:	085b      	lsrs	r3, r3, #1
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	785b      	ldrb	r3, [r3, #1]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f040 8088 	bne.w	80064cc <USB_ActivateEndpoint+0x468>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b29c      	uxth	r4, r3
 80063ca:	4623      	mov	r3, r4
 80063cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d014      	beq.n	80063fe <USB_ActivateEndpoint+0x39a>
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ea:	b29c      	uxth	r4, r3
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	441a      	add	r2, r3
 80063f6:	4b70      	ldr	r3, [pc, #448]	; (80065b8 <USB_ActivateEndpoint+0x554>)
 80063f8:	4323      	orrs	r3, r4
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	b29c      	uxth	r4, r3
 800640c:	4623      	mov	r3, r4
 800640e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	d014      	beq.n	8006440 <USB_ActivateEndpoint+0x3dc>
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	b29b      	uxth	r3, r3
 8006424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642c:	b29c      	uxth	r4, r3
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	441a      	add	r2, r3
 8006438:	4b60      	ldr	r3, [pc, #384]	; (80065bc <USB_ActivateEndpoint+0x558>)
 800643a:	4323      	orrs	r3, r4
 800643c:	b29b      	uxth	r3, r3
 800643e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	b29b      	uxth	r3, r3
 800644e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006456:	b29c      	uxth	r4, r3
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	441a      	add	r2, r3
 8006462:	4b56      	ldr	r3, [pc, #344]	; (80065bc <USB_ActivateEndpoint+0x558>)
 8006464:	4323      	orrs	r3, r4
 8006466:	b29b      	uxth	r3, r3
 8006468:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800647c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006480:	b29c      	uxth	r4, r3
 8006482:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006486:	b29c      	uxth	r4, r3
 8006488:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800648c:	b29c      	uxth	r4, r3
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	441a      	add	r2, r3
 8006498:	4b49      	ldr	r3, [pc, #292]	; (80065c0 <USB_ActivateEndpoint+0x55c>)
 800649a:	4323      	orrs	r3, r4
 800649c:	b29b      	uxth	r3, r3
 800649e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b6:	b29c      	uxth	r4, r3
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	441a      	add	r2, r3
 80064c2:	4b3f      	ldr	r3, [pc, #252]	; (80065c0 <USB_ActivateEndpoint+0x55c>)
 80064c4:	4323      	orrs	r3, r4
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	8013      	strh	r3, [r2, #0]
 80064ca:	e0a5      	b.n	8006618 <USB_ActivateEndpoint+0x5b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	b29c      	uxth	r4, r3
 80064da:	4623      	mov	r3, r4
 80064dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d014      	beq.n	800650e <USB_ActivateEndpoint+0x4aa>
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fa:	b29c      	uxth	r4, r3
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	441a      	add	r2, r3
 8006506:	4b2c      	ldr	r3, [pc, #176]	; (80065b8 <USB_ActivateEndpoint+0x554>)
 8006508:	4323      	orrs	r3, r4
 800650a:	b29b      	uxth	r3, r3
 800650c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	b29c      	uxth	r4, r3
 800651c:	4623      	mov	r3, r4
 800651e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006522:	2b00      	cmp	r3, #0
 8006524:	d014      	beq.n	8006550 <USB_ActivateEndpoint+0x4ec>
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	b29b      	uxth	r3, r3
 8006534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653c:	b29c      	uxth	r4, r3
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	441a      	add	r2, r3
 8006548:	4b1c      	ldr	r3, [pc, #112]	; (80065bc <USB_ActivateEndpoint+0x558>)
 800654a:	4323      	orrs	r3, r4
 800654c:	b29b      	uxth	r3, r3
 800654e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29b      	uxth	r3, r3
 800655e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006566:	b29c      	uxth	r4, r3
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	441a      	add	r2, r3
 8006572:	4b11      	ldr	r3, [pc, #68]	; (80065b8 <USB_ActivateEndpoint+0x554>)
 8006574:	4323      	orrs	r3, r4
 8006576:	b29b      	uxth	r3, r3
 8006578:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	78db      	ldrb	r3, [r3, #3]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d020      	beq.n	80065c4 <USB_ActivateEndpoint+0x560>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	b29b      	uxth	r3, r3
 8006590:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006598:	b29c      	uxth	r4, r3
 800659a:	f084 0320 	eor.w	r3, r4, #32
 800659e:	b29c      	uxth	r4, r3
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	441a      	add	r2, r3
 80065aa:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <USB_ActivateEndpoint+0x55c>)
 80065ac:	4323      	orrs	r3, r4
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	8013      	strh	r3, [r2, #0]
 80065b2:	e01c      	b.n	80065ee <USB_ActivateEndpoint+0x58a>
 80065b4:	ffff8180 	.word	0xffff8180
 80065b8:	ffffc080 	.word	0xffffc080
 80065bc:	ffff80c0 	.word	0xffff80c0
 80065c0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065da:	b29c      	uxth	r4, r3
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	441a      	add	r2, r3
 80065e6:	4b0f      	ldr	r3, [pc, #60]	; (8006624 <USB_ActivateEndpoint+0x5c0>)
 80065e8:	4323      	orrs	r3, r4
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006604:	b29c      	uxth	r4, r3
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	441a      	add	r2, r3
 8006610:	4b04      	ldr	r3, [pc, #16]	; (8006624 <USB_ActivateEndpoint+0x5c0>)
 8006612:	4323      	orrs	r3, r4
 8006614:	b29b      	uxth	r3, r3
 8006616:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006618:	7dfb      	ldrb	r3, [r7, #23]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bc90      	pop	{r4, r7}
 8006622:	4770      	bx	lr
 8006624:	ffff8080 	.word	0xffff8080

08006628 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006628:	b490      	push	{r4, r7}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	7b1b      	ldrb	r3, [r3, #12]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d171      	bne.n	800671e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	785b      	ldrb	r3, [r3, #1]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d036      	beq.n	80066b0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	b29c      	uxth	r4, r3
 8006650:	4623      	mov	r3, r4
 8006652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006656:	2b00      	cmp	r3, #0
 8006658:	d014      	beq.n	8006684 <USB_DeactivateEndpoint+0x5c>
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	b29b      	uxth	r3, r3
 8006668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800666c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006670:	b29c      	uxth	r4, r3
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	441a      	add	r2, r3
 800667c:	4b6b      	ldr	r3, [pc, #428]	; (800682c <USB_DeactivateEndpoint+0x204>)
 800667e:	4323      	orrs	r3, r4
 8006680:	b29b      	uxth	r3, r3
 8006682:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	b29b      	uxth	r3, r3
 8006692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800669a:	b29c      	uxth	r4, r3
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	441a      	add	r2, r3
 80066a6:	4b62      	ldr	r3, [pc, #392]	; (8006830 <USB_DeactivateEndpoint+0x208>)
 80066a8:	4323      	orrs	r3, r4
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	8013      	strh	r3, [r2, #0]
 80066ae:	e144      	b.n	800693a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29c      	uxth	r4, r3
 80066be:	4623      	mov	r3, r4
 80066c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d014      	beq.n	80066f2 <USB_DeactivateEndpoint+0xca>
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066de:	b29c      	uxth	r4, r3
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	441a      	add	r2, r3
 80066ea:	4b52      	ldr	r3, [pc, #328]	; (8006834 <USB_DeactivateEndpoint+0x20c>)
 80066ec:	4323      	orrs	r3, r4
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006708:	b29c      	uxth	r4, r3
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	441a      	add	r2, r3
 8006714:	4b46      	ldr	r3, [pc, #280]	; (8006830 <USB_DeactivateEndpoint+0x208>)
 8006716:	4323      	orrs	r3, r4
 8006718:	b29b      	uxth	r3, r3
 800671a:	8013      	strh	r3, [r2, #0]
 800671c:	e10d      	b.n	800693a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	785b      	ldrb	r3, [r3, #1]
 8006722:	2b00      	cmp	r3, #0
 8006724:	f040 8088 	bne.w	8006838 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29c      	uxth	r4, r3
 8006736:	4623      	mov	r3, r4
 8006738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d014      	beq.n	800676a <USB_DeactivateEndpoint+0x142>
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006756:	b29c      	uxth	r4, r3
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	441a      	add	r2, r3
 8006762:	4b34      	ldr	r3, [pc, #208]	; (8006834 <USB_DeactivateEndpoint+0x20c>)
 8006764:	4323      	orrs	r3, r4
 8006766:	b29b      	uxth	r3, r3
 8006768:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29c      	uxth	r4, r3
 8006778:	4623      	mov	r3, r4
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b00      	cmp	r3, #0
 8006780:	d014      	beq.n	80067ac <USB_DeactivateEndpoint+0x184>
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006798:	b29c      	uxth	r4, r3
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	441a      	add	r2, r3
 80067a4:	4b21      	ldr	r3, [pc, #132]	; (800682c <USB_DeactivateEndpoint+0x204>)
 80067a6:	4323      	orrs	r3, r4
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c2:	b29c      	uxth	r4, r3
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	441a      	add	r2, r3
 80067ce:	4b17      	ldr	r3, [pc, #92]	; (800682c <USB_DeactivateEndpoint+0x204>)
 80067d0:	4323      	orrs	r3, r4
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ec:	b29c      	uxth	r4, r3
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	441a      	add	r2, r3
 80067f8:	4b0d      	ldr	r3, [pc, #52]	; (8006830 <USB_DeactivateEndpoint+0x208>)
 80067fa:	4323      	orrs	r3, r4
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006816:	b29c      	uxth	r4, r3
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	441a      	add	r2, r3
 8006822:	4b03      	ldr	r3, [pc, #12]	; (8006830 <USB_DeactivateEndpoint+0x208>)
 8006824:	4323      	orrs	r3, r4
 8006826:	b29b      	uxth	r3, r3
 8006828:	8013      	strh	r3, [r2, #0]
 800682a:	e086      	b.n	800693a <USB_DeactivateEndpoint+0x312>
 800682c:	ffff80c0 	.word	0xffff80c0
 8006830:	ffff8080 	.word	0xffff8080
 8006834:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	b29c      	uxth	r4, r3
 8006846:	4623      	mov	r3, r4
 8006848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d014      	beq.n	800687a <USB_DeactivateEndpoint+0x252>
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	b29b      	uxth	r3, r3
 800685e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006866:	b29c      	uxth	r4, r3
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	441a      	add	r2, r3
 8006872:	4b35      	ldr	r3, [pc, #212]	; (8006948 <USB_DeactivateEndpoint+0x320>)
 8006874:	4323      	orrs	r3, r4
 8006876:	b29b      	uxth	r3, r3
 8006878:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	b29c      	uxth	r4, r3
 8006888:	4623      	mov	r3, r4
 800688a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688e:	2b00      	cmp	r3, #0
 8006890:	d014      	beq.n	80068bc <USB_DeactivateEndpoint+0x294>
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a8:	b29c      	uxth	r4, r3
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	441a      	add	r2, r3
 80068b4:	4b25      	ldr	r3, [pc, #148]	; (800694c <USB_DeactivateEndpoint+0x324>)
 80068b6:	4323      	orrs	r3, r4
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d2:	b29c      	uxth	r4, r3
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	441a      	add	r2, r3
 80068de:	4b1a      	ldr	r3, [pc, #104]	; (8006948 <USB_DeactivateEndpoint+0x320>)
 80068e0:	4323      	orrs	r3, r4
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068fc:	b29c      	uxth	r4, r3
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	441a      	add	r2, r3
 8006908:	4b11      	ldr	r3, [pc, #68]	; (8006950 <USB_DeactivateEndpoint+0x328>)
 800690a:	4323      	orrs	r3, r4
 800690c:	b29b      	uxth	r3, r3
 800690e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b29b      	uxth	r3, r3
 800691e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006926:	b29c      	uxth	r4, r3
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	441a      	add	r2, r3
 8006932:	4b07      	ldr	r3, [pc, #28]	; (8006950 <USB_DeactivateEndpoint+0x328>)
 8006934:	4323      	orrs	r3, r4
 8006936:	b29b      	uxth	r3, r3
 8006938:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bc90      	pop	{r4, r7}
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	ffffc080 	.word	0xffffc080
 800694c:	ffff80c0 	.word	0xffff80c0
 8006950:	ffff8080 	.word	0xffff8080

08006954 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006954:	b590      	push	{r4, r7, lr}
 8006956:	b095      	sub	sp, #84	; 0x54
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len = ep->xfer_len;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	64bb      	str	r3, [r7, #72]	; 0x48

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	2b01      	cmp	r3, #1
 800696a:	f040 815f 	bne.w	8006c2c <USB_EPStartXfer+0x2d8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	699a      	ldr	r2, [r3, #24]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	429a      	cmp	r2, r3
 8006978:	d909      	bls.n	800698e <USB_EPStartXfer+0x3a>
    {
      len = ep->maxpacket;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	699a      	ldr	r2, [r3, #24]
 8006984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006986:	1ad2      	subs	r2, r2, r3
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	619a      	str	r2, [r3, #24]
 800698c:	e005      	b.n	800699a <USB_EPStartXfer+0x46>
    }
    else
    {
      len = ep->xfer_len;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2200      	movs	r2, #0
 8006998:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	7b1b      	ldrb	r3, [r3, #12]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d11a      	bne.n	80069d8 <USB_EPStartXfer+0x84>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	6959      	ldr	r1, [r3, #20]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	88da      	ldrh	r2, [r3, #6]
 80069aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fbb0 	bl	8007114 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80069b4:	687c      	ldr	r4, [r7, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069bc:	b29b      	uxth	r3, r3
 80069be:	441c      	add	r4, r3
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	4423      	add	r3, r4
 80069c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069cc:	633b      	str	r3, [r7, #48]	; 0x30
 80069ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	801a      	strh	r2, [r3, #0]
 80069d6:	e10d      	b.n	8006bf4 <USB_EPStartXfer+0x2a0>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d063      	beq.n	8006ab6 <USB_EPStartXfer+0x162>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069ee:	687c      	ldr	r4, [r7, #4]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	785b      	ldrb	r3, [r3, #1]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d145      	bne.n	8006a84 <USB_EPStartXfer+0x130>
 80069f8:	687c      	ldr	r4, [r7, #4]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	441c      	add	r4, r3
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	00db      	lsls	r3, r3, #3
 8006a0a:	4423      	add	r3, r4
 8006a0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d111      	bne.n	8006a3c <USB_EPStartXfer+0xe8>
 8006a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1a:	881a      	ldrh	r2, [r3, #0]
 8006a1c:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8006a20:	4013      	ands	r3, r2
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a26:	801a      	strh	r2, [r3, #0]
 8006a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	801a      	strh	r2, [r3, #0]
 8006a3a:	e037      	b.n	8006aac <USB_EPStartXfer+0x158>
 8006a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a3e:	2b3d      	cmp	r3, #61	; 0x3d
 8006a40:	d811      	bhi.n	8006a66 <USB_EPStartXfer+0x112>
 8006a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a44:	085b      	lsrs	r3, r3, #1
 8006a46:	647b      	str	r3, [r7, #68]	; 0x44
 8006a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <USB_EPStartXfer+0x104>
 8006a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a54:	3301      	adds	r3, #1
 8006a56:	647b      	str	r3, [r7, #68]	; 0x44
 8006a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	029b      	lsls	r3, r3, #10
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a62:	801a      	strh	r2, [r3, #0]
 8006a64:	e022      	b.n	8006aac <USB_EPStartXfer+0x158>
 8006a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a68:	095b      	lsrs	r3, r3, #5
 8006a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	029b      	lsls	r3, r3, #10
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a80:	801a      	strh	r2, [r3, #0]
 8006a82:	e013      	b.n	8006aac <USB_EPStartXfer+0x158>
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	785b      	ldrb	r3, [r3, #1]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d10f      	bne.n	8006aac <USB_EPStartXfer+0x158>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	441c      	add	r4, r3
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	4423      	add	r3, r4
 8006a9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	895b      	ldrh	r3, [r3, #10]
 8006ab0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006ab4:	e062      	b.n	8006b7c <USB_EPStartXfer+0x228>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	785b      	ldrb	r3, [r3, #1]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d145      	bne.n	8006b4a <USB_EPStartXfer+0x1f6>
 8006abe:	687c      	ldr	r4, [r7, #4]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	441c      	add	r4, r3
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	4423      	add	r3, r4
 8006ad2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d111      	bne.n	8006b02 <USB_EPStartXfer+0x1ae>
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	881a      	ldrh	r2, [r3, #0]
 8006ae2:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	801a      	strh	r2, [r3, #0]
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	801a      	strh	r2, [r3, #0]
 8006b00:	e038      	b.n	8006b74 <USB_EPStartXfer+0x220>
 8006b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b04:	2b3d      	cmp	r3, #61	; 0x3d
 8006b06:	d811      	bhi.n	8006b2c <USB_EPStartXfer+0x1d8>
 8006b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b0a:	085b      	lsrs	r3, r3, #1
 8006b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d002      	beq.n	8006b1e <USB_EPStartXfer+0x1ca>
 8006b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	029b      	lsls	r3, r3, #10
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	801a      	strh	r2, [r3, #0]
 8006b2a:	e023      	b.n	8006b74 <USB_EPStartXfer+0x220>
 8006b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	643b      	str	r3, [r7, #64]	; 0x40
 8006b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	029b      	lsls	r3, r3, #10
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	801a      	strh	r2, [r3, #0]
 8006b48:	e014      	b.n	8006b74 <USB_EPStartXfer+0x220>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	785b      	ldrb	r3, [r3, #1]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d110      	bne.n	8006b74 <USB_EPStartXfer+0x220>
 8006b52:	687c      	ldr	r4, [r7, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	441c      	add	r4, r3
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	4423      	add	r3, r4
 8006b66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b6a:	623b      	str	r3, [r7, #32]
 8006b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	891b      	ldrh	r3, [r3, #8]
 8006b78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	6959      	ldr	r1, [r3, #20]
 8006b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fac3 	bl	8007114 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	785b      	ldrb	r3, [r3, #1]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d115      	bne.n	8006bc2 <USB_EPStartXfer+0x26e>
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bac:	b29c      	uxth	r4, r3
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	441a      	add	r2, r3
 8006bb8:	4b9a      	ldr	r3, [pc, #616]	; (8006e24 <USB_EPStartXfer+0x4d0>)
 8006bba:	4323      	orrs	r3, r4
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	8013      	strh	r3, [r2, #0]
 8006bc0:	e018      	b.n	8006bf4 <USB_EPStartXfer+0x2a0>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	785b      	ldrb	r3, [r3, #1]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d114      	bne.n	8006bf4 <USB_EPStartXfer+0x2a0>
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be0:	b29c      	uxth	r4, r3
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	441a      	add	r2, r3
 8006bec:	4b8e      	ldr	r3, [pc, #568]	; (8006e28 <USB_EPStartXfer+0x4d4>)
 8006bee:	4323      	orrs	r3, r4
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c0a:	b29c      	uxth	r4, r3
 8006c0c:	f084 0310 	eor.w	r3, r4, #16
 8006c10:	b29c      	uxth	r4, r3
 8006c12:	f084 0320 	eor.w	r3, r4, #32
 8006c16:	b29c      	uxth	r4, r3
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	441a      	add	r2, r3
 8006c22:	4b82      	ldr	r3, [pc, #520]	; (8006e2c <USB_EPStartXfer+0x4d8>)
 8006c24:	4323      	orrs	r3, r4
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	8013      	strh	r3, [r2, #0]
 8006c2a:	e13f      	b.n	8006eac <USB_EPStartXfer+0x558>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	699a      	ldr	r2, [r3, #24]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d909      	bls.n	8006c4c <USB_EPStartXfer+0x2f8>
    {
      len = ep->maxpacket;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	699a      	ldr	r2, [r3, #24]
 8006c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c44:	1ad2      	subs	r2, r2, r3
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	619a      	str	r2, [r3, #24]
 8006c4a:	e005      	b.n	8006c58 <USB_EPStartXfer+0x304>
    }
    else
    {
      len = ep->xfer_len;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2200      	movs	r2, #0
 8006c56:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	7b1b      	ldrb	r3, [r3, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d145      	bne.n	8006cec <USB_EPStartXfer+0x398>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006c60:	687c      	ldr	r4, [r7, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	441c      	add	r4, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	00db      	lsls	r3, r3, #3
 8006c72:	4423      	add	r3, r4
 8006c74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c78:	61fb      	str	r3, [r7, #28]
 8006c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d111      	bne.n	8006ca4 <USB_EPStartXfer+0x350>
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	881a      	ldrh	r2, [r3, #0]
 8006c84:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8006c88:	4013      	ands	r3, r2
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	801a      	strh	r2, [r3, #0]
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	801a      	strh	r2, [r3, #0]
 8006ca2:	e0e8      	b.n	8006e76 <USB_EPStartXfer+0x522>
 8006ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ca6:	2b3d      	cmp	r3, #61	; 0x3d
 8006ca8:	d811      	bhi.n	8006cce <USB_EPStartXfer+0x37a>
 8006caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cac:	085b      	lsrs	r3, r3, #1
 8006cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <USB_EPStartXfer+0x36c>
 8006cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	029b      	lsls	r3, r3, #10
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	801a      	strh	r2, [r3, #0]
 8006ccc:	e0d3      	b.n	8006e76 <USB_EPStartXfer+0x522>
 8006cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cd0:	095b      	lsrs	r3, r3, #5
 8006cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	029b      	lsls	r3, r3, #10
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	801a      	strh	r2, [r3, #0]
 8006cea:	e0c4      	b.n	8006e76 <USB_EPStartXfer+0x522>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	785b      	ldrb	r3, [r3, #1]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d145      	bne.n	8006d80 <USB_EPStartXfer+0x42c>
 8006cf4:	687c      	ldr	r4, [r7, #4]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	441c      	add	r4, r3
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	4423      	add	r3, r4
 8006d08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d0c:	61bb      	str	r3, [r7, #24]
 8006d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d111      	bne.n	8006d38 <USB_EPStartXfer+0x3e4>
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	881a      	ldrh	r2, [r3, #0]
 8006d18:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	801a      	strh	r2, [r3, #0]
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	801a      	strh	r2, [r3, #0]
 8006d36:	e038      	b.n	8006daa <USB_EPStartXfer+0x456>
 8006d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d3a:	2b3d      	cmp	r3, #61	; 0x3d
 8006d3c:	d811      	bhi.n	8006d62 <USB_EPStartXfer+0x40e>
 8006d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d40:	085b      	lsrs	r3, r3, #1
 8006d42:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d002      	beq.n	8006d54 <USB_EPStartXfer+0x400>
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d50:	3301      	adds	r3, #1
 8006d52:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	029b      	lsls	r3, r3, #10
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	801a      	strh	r2, [r3, #0]
 8006d60:	e023      	b.n	8006daa <USB_EPStartXfer+0x456>
 8006d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d64:	095b      	lsrs	r3, r3, #5
 8006d66:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	029b      	lsls	r3, r3, #10
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	801a      	strh	r2, [r3, #0]
 8006d7e:	e014      	b.n	8006daa <USB_EPStartXfer+0x456>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	785b      	ldrb	r3, [r3, #1]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d110      	bne.n	8006daa <USB_EPStartXfer+0x456>
 8006d88:	687c      	ldr	r4, [r7, #4]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	441c      	add	r4, r3
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	4423      	add	r3, r4
 8006d9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006da0:	617b      	str	r3, [r7, #20]
 8006da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	801a      	strh	r2, [r3, #0]
 8006daa:	687c      	ldr	r4, [r7, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	785b      	ldrb	r3, [r3, #1]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d14c      	bne.n	8006e4e <USB_EPStartXfer+0x4fa>
 8006db4:	687c      	ldr	r4, [r7, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	441c      	add	r4, r3
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	4423      	add	r3, r4
 8006dc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006dcc:	613b      	str	r3, [r7, #16]
 8006dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d111      	bne.n	8006df8 <USB_EPStartXfer+0x4a4>
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	881a      	ldrh	r2, [r3, #0]
 8006dd8:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8006ddc:	4013      	ands	r3, r2
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	801a      	strh	r2, [r3, #0]
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	801a      	strh	r2, [r3, #0]
 8006df6:	e03e      	b.n	8006e76 <USB_EPStartXfer+0x522>
 8006df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dfa:	2b3d      	cmp	r3, #61	; 0x3d
 8006dfc:	d818      	bhi.n	8006e30 <USB_EPStartXfer+0x4dc>
 8006dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e00:	085b      	lsrs	r3, r3, #1
 8006e02:	637b      	str	r3, [r7, #52]	; 0x34
 8006e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <USB_EPStartXfer+0x4c0>
 8006e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e10:	3301      	adds	r3, #1
 8006e12:	637b      	str	r3, [r7, #52]	; 0x34
 8006e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	029b      	lsls	r3, r3, #10
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	801a      	strh	r2, [r3, #0]
 8006e20:	e029      	b.n	8006e76 <USB_EPStartXfer+0x522>
 8006e22:	bf00      	nop
 8006e24:	ffff80c0 	.word	0xffff80c0
 8006e28:	ffffc080 	.word	0xffffc080
 8006e2c:	ffff8080 	.word	0xffff8080
 8006e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e32:	095b      	lsrs	r3, r3, #5
 8006e34:	637b      	str	r3, [r7, #52]	; 0x34
 8006e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	029b      	lsls	r3, r3, #10
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	801a      	strh	r2, [r3, #0]
 8006e4c:	e013      	b.n	8006e76 <USB_EPStartXfer+0x522>
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	785b      	ldrb	r3, [r3, #1]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d10f      	bne.n	8006e76 <USB_EPStartXfer+0x522>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	441c      	add	r4, r3
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	4423      	add	r3, r4
 8006e68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e6c:	60fb      	str	r3, [r7, #12]
 8006e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8c:	b29c      	uxth	r4, r3
 8006e8e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006e92:	b29c      	uxth	r4, r3
 8006e94:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006e98:	b29c      	uxth	r4, r3
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	441a      	add	r2, r3
 8006ea4:	4b04      	ldr	r3, [pc, #16]	; (8006eb8 <USB_EPStartXfer+0x564>)
 8006ea6:	4323      	orrs	r3, r4
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3754      	adds	r7, #84	; 0x54
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd90      	pop	{r4, r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	ffff8080 	.word	0xffff8080

08006ebc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ebc:	b490      	push	{r4, r7}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	785b      	ldrb	r3, [r3, #1]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d018      	beq.n	8006f00 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee4:	b29c      	uxth	r4, r3
 8006ee6:	f084 0310 	eor.w	r3, r4, #16
 8006eea:	b29c      	uxth	r4, r3
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	441a      	add	r2, r3
 8006ef6:	4b11      	ldr	r3, [pc, #68]	; (8006f3c <USB_EPSetStall+0x80>)
 8006ef8:	4323      	orrs	r3, r4
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	8013      	strh	r3, [r2, #0]
 8006efe:	e017      	b.n	8006f30 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	881b      	ldrh	r3, [r3, #0]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f16:	b29c      	uxth	r4, r3
 8006f18:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006f1c:	b29c      	uxth	r4, r3
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	441a      	add	r2, r3
 8006f28:	4b04      	ldr	r3, [pc, #16]	; (8006f3c <USB_EPSetStall+0x80>)
 8006f2a:	4323      	orrs	r3, r4
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bc90      	pop	{r4, r7}
 8006f3a:	4770      	bx	lr
 8006f3c:	ffff8080 	.word	0xffff8080

08006f40 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f40:	b490      	push	{r4, r7}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	785b      	ldrb	r3, [r3, #1]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d03c      	beq.n	8006fcc <USB_EPClearStall+0x8c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	b29c      	uxth	r4, r3
 8006f60:	4623      	mov	r3, r4
 8006f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d014      	beq.n	8006f94 <USB_EPClearStall+0x54>
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f80:	b29c      	uxth	r4, r3
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	441a      	add	r2, r3
 8006f8c:	4b30      	ldr	r3, [pc, #192]	; (8007050 <USB_EPClearStall+0x110>)
 8006f8e:	4323      	orrs	r3, r4
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006faa:	b29c      	uxth	r4, r3
 8006fac:	f084 0310 	eor.w	r3, r4, #16
 8006fb0:	b29c      	uxth	r4, r3
 8006fb2:	f084 0320 	eor.w	r3, r4, #32
 8006fb6:	b29c      	uxth	r4, r3
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	441a      	add	r2, r3
 8006fc2:	4b24      	ldr	r3, [pc, #144]	; (8007054 <USB_EPClearStall+0x114>)
 8006fc4:	4323      	orrs	r3, r4
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	8013      	strh	r3, [r2, #0]
 8006fca:	e03b      	b.n	8007044 <USB_EPClearStall+0x104>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	b29c      	uxth	r4, r3
 8006fda:	4623      	mov	r3, r4
 8006fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d014      	beq.n	800700e <USB_EPClearStall+0xce>
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4413      	add	r3, r2
 8006fee:	881b      	ldrh	r3, [r3, #0]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffa:	b29c      	uxth	r4, r3
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	441a      	add	r2, r3
 8007006:	4b14      	ldr	r3, [pc, #80]	; (8007058 <USB_EPClearStall+0x118>)
 8007008:	4323      	orrs	r3, r4
 800700a:	b29b      	uxth	r3, r3
 800700c:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	b29b      	uxth	r3, r3
 800701c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007024:	b29c      	uxth	r4, r3
 8007026:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800702a:	b29c      	uxth	r4, r3
 800702c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007030:	b29c      	uxth	r4, r3
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	441a      	add	r2, r3
 800703c:	4b05      	ldr	r3, [pc, #20]	; (8007054 <USB_EPClearStall+0x114>)
 800703e:	4323      	orrs	r3, r4
 8007040:	b29b      	uxth	r3, r3
 8007042:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bc90      	pop	{r4, r7}
 800704e:	4770      	bx	lr
 8007050:	ffff80c0 	.word	0xffff80c0
 8007054:	ffff8080 	.word	0xffff8080
 8007058:	ffffc080 	.word	0xffffc080

0800705c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	460b      	mov	r3, r1
 8007066:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007068:	78fb      	ldrb	r3, [r7, #3]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d103      	bne.n	8007076 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2280      	movs	r2, #128	; 0x80
 8007072:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007092:	b29b      	uxth	r3, r3
 8007094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800709c:	b29a      	uxth	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80070ee:	68fb      	ldr	r3, [r7, #12]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007114:	b480      	push	{r7}
 8007116:	b08d      	sub	sp, #52	; 0x34
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	4611      	mov	r1, r2
 8007120:	461a      	mov	r2, r3
 8007122:	460b      	mov	r3, r1
 8007124:	80fb      	strh	r3, [r7, #6]
 8007126:	4613      	mov	r3, r2
 8007128:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800712a:	88bb      	ldrh	r3, [r7, #4]
 800712c:	3301      	adds	r3, #1
 800712e:	085b      	lsrs	r3, r3, #1
 8007130:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800713a:	88fa      	ldrh	r2, [r7, #6]
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007144:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800714a:	e01b      	b.n	8007184 <USB_WritePMA+0x70>
  {
    temp1 = (uint16_t) * pBuf;
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	3301      	adds	r3, #1
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	b29b      	uxth	r3, r3
 800715e:	021b      	lsls	r3, r3, #8
 8007160:	b29b      	uxth	r3, r3
 8007162:	461a      	mov	r2, r3
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	4313      	orrs	r3, r2
 8007168:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	b29a      	uxth	r2, r3
 800716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007170:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007174:	3302      	adds	r3, #2
 8007176:	62bb      	str	r3, [r7, #40]	; 0x28

    if (PMA_ACCESS > 1U)
    {
      pdwVal++;
    }
    pBuf++;
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	3301      	adds	r3, #1
 800717c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	3b01      	subs	r3, #1
 8007182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1e0      	bne.n	800714c <USB_WritePMA+0x38>
  }
}
 800718a:	bf00      	nop
 800718c:	3734      	adds	r7, #52	; 0x34
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007196:	b480      	push	{r7}
 8007198:	b08b      	sub	sp, #44	; 0x2c
 800719a:	af00      	add	r7, sp, #0
 800719c:	60f8      	str	r0, [r7, #12]
 800719e:	60b9      	str	r1, [r7, #8]
 80071a0:	4611      	mov	r1, r2
 80071a2:	461a      	mov	r2, r3
 80071a4:	460b      	mov	r3, r1
 80071a6:	80fb      	strh	r3, [r7, #6]
 80071a8:	4613      	mov	r3, r2
 80071aa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80071ac:	88bb      	ldrh	r3, [r7, #4]
 80071ae:	085b      	lsrs	r3, r3, #1
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80071bc:	88fa      	ldrh	r2, [r7, #6]
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071c6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	627b      	str	r3, [r7, #36]	; 0x24
 80071cc:	e017      	b.n	80071fe <USB_ReadPMA+0x68>
  {
    temp = *pdwVal;
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	3302      	adds	r3, #2
 80071d8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	b2da      	uxtb	r2, r3
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	3301      	adds	r3, #1
 80071e6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	0a1b      	lsrs	r3, r3, #8
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	3301      	adds	r3, #1
 80071f6:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	3b01      	subs	r3, #1
 80071fc:	627b      	str	r3, [r7, #36]	; 0x24
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1e4      	bne.n	80071ce <USB_ReadPMA+0x38>
    {
      pdwVal++;
    }
  }

  if ((wNBytes % 2U) != 0U)
 8007204:	88bb      	ldrh	r3, [r7, #4]
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	b29b      	uxth	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00c      	beq.n	800722a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007210:	6a3b      	ldr	r3, [r7, #32]
 8007212:	881b      	ldrh	r3, [r3, #0]
 8007214:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	3302      	adds	r3, #2
 800721a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	b2da      	uxtb	r2, r3
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	3301      	adds	r3, #1
 8007228:	61fb      	str	r3, [r7, #28]
  }
}
 800722a:	bf00      	nop
 800722c:	372c      	adds	r7, #44	; 0x2c
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <dmx_registerCallback>:
* Variable Declarations
*******************************************************************************/
/******************************************************************************
* Function Definitions
*******************************************************************************/
void dmx_registerCallback(dmx_cfg_Instance *dmx, dmx_cfg_callback callback){
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	6039      	str	r1, [r7, #0]
	dmx->callback = callback;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	655a      	str	r2, [r3, #84]	; 0x54
}
 8007246:	bf00      	nop
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
	...

08007254 <dmx_init>:

void dmx_init(dmx_cfg_Instance *dmx){
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
	if(dmx->type == dmx_cfg_TYPE_TRANSMITTER){
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d126      	bne.n	80072b2 <dmx_init+0x5e>
		gpio_ConfigureToFloating(dmx->txBreakPort, dmx->txBreakPin);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	891b      	ldrh	r3, [r3, #8]
 800726c:	4619      	mov	r1, r3
 800726e:	4610      	mov	r0, r2
 8007270:	f002 fc5c 	bl	8009b2c <gpio_ConfigureToFloating>
		dmx->txState = dmx_cfg_TX_STATE_NONE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	705a      	strb	r2, [r3, #1]
		dmx->txBreakToBreakCnt = 0;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	621a      	str	r2, [r3, #32]
		dmx->txBreakToBreakTime_ms = dmx->txBreakToBreakTime_ms + (dmx->txBreakTime_us + dmx->txMarkAfterBreakTime_us + dmx->txMarkBetweenTime_us*dmx->universeSize)/1000;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	69da      	ldr	r2, [r3, #28]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6919      	ldr	r1, [r3, #16]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	4419      	add	r1, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
 8007298:	fb00 f303 	mul.w	r3, r0, r3
 800729c:	440b      	add	r3, r1
 800729e:	4911      	ldr	r1, [pc, #68]	; (80072e4 <dmx_init+0x90>)
 80072a0:	fb81 0103 	smull	r0, r1, r1, r3
 80072a4:	1189      	asrs	r1, r1, #6
 80072a6:	17db      	asrs	r3, r3, #31
 80072a8:	1acb      	subs	r3, r1, r3
 80072aa:	441a      	add	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	61da      	str	r2, [r3, #28]
 80072b0:	e010      	b.n	80072d4 <dmx_init+0x80>
	}else if(dmx->type == dmx_cfg_TYPE_RECEIVER){
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d10c      	bne.n	80072d4 <dmx_init+0x80>
		dmx->rxState = dmx_cfg_RX_STATE_NONE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		dmx->rxFallingTime = 0;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	631a      	str	r2, [r3, #48]	; 0x30
		dmx->rxRisingTime = 0;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	635a      	str	r2, [r3, #52]	; 0x34
		dmx->rxTimerUpdateCnt = 0;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	641a      	str	r2, [r3, #64]	; 0x40
	}
	dmx->universeCnt = 0;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 80072dc:	bf00      	nop
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	10624dd3 	.word	0x10624dd3

080072e8 <dmx_loop>:

void dmx_loop(dmx_cfg_Instance *dmx){
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	if(dmx->type == dmx_cfg_TYPE_TRANSMITTER){
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10e      	bne.n	8007316 <dmx_loop+0x2e>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	785b      	ldrb	r3, [r3, #1]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d029      	beq.n	8007354 <dmx_loop+0x6c>
		if(dmx->txBreakToBreakCnt == 0){
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d106      	bne.n	8007316 <dmx_loop+0x2e>
			dmx_sendStart(dmx);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f83a 	bl	8007382 <dmx_sendStart>
			dmx->txBreakToBreakCnt = dmx->txBreakToBreakTime_ms;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	69da      	ldr	r2, [r3, #28]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	621a      	str	r2, [r3, #32]
		}
	}else if(dmx->type == dmx_cfg_TYPE_RECEIVER){
	}
	/*Loop flags*/
	if(dmx->universeComplete){
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800731c:	2b00      	cmp	r3, #0
 800731e:	d01a      	beq.n	8007356 <dmx_loop+0x6e>
		dmx->universeComplete = false;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
		if(dmx->type == dmx_cfg_TYPE_TRANSMITTER) dmx->callbackType = dmx_cfg_CALL_TX_COMPLETE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d104      	bne.n	800733a <dmx_loop+0x52>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007338:	e003      	b.n	8007342 <dmx_loop+0x5a>
		else dmx->callbackType = dmx_cfg_CALL_RX_COMPLETE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		if(dmx->callback) dmx->callback(dmx);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007346:	2b00      	cmp	r3, #0
 8007348:	d005      	beq.n	8007356 <dmx_loop+0x6e>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	4798      	blx	r3
 8007352:	e000      	b.n	8007356 <dmx_loop+0x6e>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8007354:	bf00      	nop
	}
}
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <dmx_1ms>:

void dmx_1ms(dmx_cfg_Instance *dmx){
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
	if(dmx->txBreakToBreakCnt > 0) --dmx->txBreakToBreakCnt;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	2b00      	cmp	r3, #0
 800736a:	dd04      	ble.n	8007376 <dmx_1ms+0x1a>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	1e5a      	subs	r2, r3, #1
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	621a      	str	r2, [r3, #32]
}
 8007376:	bf00      	nop
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <dmx_sendStart>:

void dmx_sendStart(dmx_cfg_Instance *dmx){
 8007382:	b580      	push	{r7, lr}
 8007384:	b082      	sub	sp, #8
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d130      	bne.n	80073f4 <dmx_sendStart+0x72>
	if(dmx->universe == NULL) return;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007396:	2b00      	cmp	r3, #0
 8007398:	d02e      	beq.n	80073f8 <dmx_sendStart+0x76>
	if(dmx->txBreakToBreakTime_ms < dmx_cfg_MIN_BREAK_TO_BREAK_TIME_MS) dmx->txBreakToBreakTime_ms = dmx_cfg_MIN_BREAK_TO_BREAK_TIME_MS;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	2b18      	cmp	r3, #24
 80073a0:	dc02      	bgt.n	80073a8 <dmx_sendStart+0x26>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2219      	movs	r2, #25
 80073a6:	61da      	str	r2, [r3, #28]
	if(dmx->txBreakTime_us < dmx_cfg_MIN_BREAK_TIME_US) dmx->txBreakTime_us = dmx_cfg_MIN_BREAK_TIME_US;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	2b5f      	cmp	r3, #95	; 0x5f
 80073ae:	dc02      	bgt.n	80073b6 <dmx_sendStart+0x34>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2260      	movs	r2, #96	; 0x60
 80073b4:	611a      	str	r2, [r3, #16]
	if(dmx->txMarkAfterBreakTime_us < dmx_cfg_MIN_MARK_AFTER_BREAK_TIME_US) dmx->txMarkAfterBreakTime_us = dmx_cfg_MIN_MARK_AFTER_BREAK_TIME_US;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	2b0b      	cmp	r3, #11
 80073bc:	dc02      	bgt.n	80073c4 <dmx_sendStart+0x42>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	220c      	movs	r2, #12
 80073c2:	615a      	str	r2, [r3, #20]
	dmx->universeComplete = false;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	dmx->txState = dmx_cfg_TX_STATE_SEND_BREAK;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	705a      	strb	r2, [r3, #1]
	tim_setNewTimeAndStart(dmx->txTimer, dmx->txBreakTime_us);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f003 fad1 	bl	800a984 <tim_setNewTimeAndStart>
	gpio_ConfigureToPushPull(dmx->txBreakPort, dmx->txBreakPin);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	891b      	ldrh	r3, [r3, #8]
 80073ea:	4619      	mov	r1, r3
 80073ec:	4610      	mov	r0, r2
 80073ee:	f002 fbbb 	bl	8009b68 <gpio_ConfigureToPushPull>
 80073f2:	e002      	b.n	80073fa <dmx_sendStart+0x78>
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 80073f4:	bf00      	nop
 80073f6:	e000      	b.n	80073fa <dmx_sendStart+0x78>
	if(dmx->universe == NULL) return;
 80073f8:	bf00      	nop
}
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <dmx_txStart>:
	else if(timeIdx == dmx_cfg_TIME_MARK_AFTER_BREAK) dmx->txMarkAfterBreakTime_us = time_us;
	else if(timeIdx == dmx_cfg_TIME_MARK_BETWEEN) dmx->txMarkBetweenTime_us = time_us;
	else if(timeIdx == dmx_cfg_TIME_BREAK_TO_BREAK) dmx->txBreakToBreakTime_ms = (time_us + dmx->txBreakTime_us + dmx->txMarkAfterBreakTime_us + dmx->txMarkBetweenTime_us*dmx->universeSize)/1000;
}

void dmx_txStart(dmx_cfg_Instance *dmx){
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d103      	bne.n	8007418 <dmx_txStart+0x18>
	dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	705a      	strb	r2, [r3, #1]
 8007416:	e000      	b.n	800741a <dmx_txStart+0x1a>
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 8007418:	bf00      	nop
}
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <dmx_rxStart>:
void dmx_txStop(dmx_cfg_Instance *dmx){
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
	dmx->txState = dmx_cfg_TX_STATE_NONE;
}

void dmx_rxStart(dmx_cfg_Instance *dmx){
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_RECEIVER) return;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d109      	bne.n	8007448 <dmx_rxStart+0x24>
	uart_enableReceiveInt(dmx->uart);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007438:	4618      	mov	r0, r3
 800743a:	f003 fc4b 	bl	800acd4 <uart_enableReceiveInt>
	dmx->rxState = dmx_cfg_RX_STATE_WAIT_FOR_BREAK;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007446:	e000      	b.n	800744a <dmx_rxStart+0x26>
	if(dmx->type != dmx_cfg_TYPE_RECEIVER) return;
 8007448:	bf00      	nop
}
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <dmx_irqTxTimerHandler>:
void dmx_incrementRxUpdateCnt(dmx_cfg_Instance *dmx){
	++dmx->rxTimerUpdateCnt;
}

/*Transmit IRQs*/
void dmx_irqTxTimerHandler(dmx_cfg_Instance *dmx){
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
	if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	785b      	ldrb	r3, [r3, #1]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d05c      	beq.n	800751a <dmx_irqTxTimerHandler+0xca>
	if(dmx->txState == dmx_cfg_TX_STATE_SEND_BREAK){
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	785b      	ldrb	r3, [r3, #1]
 8007464:	2b02      	cmp	r3, #2
 8007466:	d113      	bne.n	8007490 <dmx_irqTxTimerHandler+0x40>
		gpio_ConfigureToFloating(dmx->txBreakPort, dmx->txBreakPin);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	891b      	ldrh	r3, [r3, #8]
 8007470:	4619      	mov	r1, r3
 8007472:	4610      	mov	r0, r2
 8007474:	f002 fb5a 	bl	8009b2c <gpio_ConfigureToFloating>
		tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkAfterBreakTime_us);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68da      	ldr	r2, [r3, #12]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	4619      	mov	r1, r3
 8007482:	4610      	mov	r0, r2
 8007484:	f003 fa7e 	bl	800a984 <tim_setNewTimeAndStart>
		dmx->txState = dmx_cfg_TX_STATE_SEND_MARK;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2203      	movs	r2, #3
 800748c:	705a      	strb	r2, [r3, #1]
 800748e:	e045      	b.n	800751c <dmx_irqTxTimerHandler+0xcc>
	}else if(dmx->txState == dmx_cfg_TX_STATE_SEND_MARK){
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	785b      	ldrb	r3, [r3, #1]
 8007494:	2b03      	cmp	r3, #3
 8007496:	d133      	bne.n	8007500 <dmx_irqTxTimerHandler+0xb0>
		dmx->universeCnt = 0;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		dmx->uart->CR1 &= ~USART_CR1_TXEIE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80074a8:	6812      	ldr	r2, [r2, #0]
 80074aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074ae:	601a      	str	r2, [r3, #0]
		dmx->uart->TDR = dmx->universeStartCode;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80074ba:	b292      	uxth	r2, r2
 80074bc:	851a      	strh	r2, [r3, #40]	; 0x28
		if(dmx->txMarkBetweenTime_us == 0) {
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d110      	bne.n	80074e8 <dmx_irqTxTimerHandler+0x98>
			dmx->uart->CR1 |= USART_CR1_TXEIE;		//start with transmission --> enable transmitbuffer empty interrupt
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80074ce:	6812      	ldr	r2, [r2, #0]
 80074d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074d4:	601a      	str	r2, [r3, #0]
			tim_stop(dmx->txTimer);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	4618      	mov	r0, r3
 80074dc:	f003 fa8a 	bl	800a9f4 <tim_stop>
			dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;	//The whole universe can be transmitted as fast as possible
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	705a      	strb	r2, [r3, #1]
 80074e6:	e019      	b.n	800751c <dmx_irqTxTimerHandler+0xcc>
		}
		else{
			tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkBetweenTime_us);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68da      	ldr	r2, [r3, #12]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	4619      	mov	r1, r3
 80074f2:	4610      	mov	r0, r2
 80074f4:	f003 fa46 	bl	800a984 <tim_setNewTimeAndStart>
			dmx->txState = dmx_cfg_TX_STATE_SEND_UNIVERSE;	//The universe can be transmitted with defined delay between all data bytes
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2205      	movs	r2, #5
 80074fc:	705a      	strb	r2, [r3, #1]
 80074fe:	e00d      	b.n	800751c <dmx_irqTxTimerHandler+0xcc>
		}
	}else if(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE){
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	785b      	ldrb	r3, [r3, #1]
 8007504:	2b05      	cmp	r3, #5
 8007506:	d109      	bne.n	800751c <dmx_irqTxTimerHandler+0xcc>
		dmx->uart->CR1 |= USART_CR1_TXEIE;		//start with transmission --> enable transmitbuffer empty interrupt
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007510:	6812      	ldr	r2, [r2, #0]
 8007512:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	e000      	b.n	800751c <dmx_irqTxTimerHandler+0xcc>
	if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 800751a:	bf00      	nop
	}
}
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <dmx_irqTxInterfaceHandler>:

void dmx_irqTxInterfaceHandler(dmx_cfg_Instance *dmx){
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
	if (dmx->uart->ISR & USART_ISR_TXE){				//transmit dmx values
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007534:	2b00      	cmp	r3, #0
 8007536:	d066      	beq.n	8007606 <dmx_irqTxInterfaceHandler+0xe4>
		dmx->uart->ISR &= ~USART_ISR_TXE; //Kill transmit-buffer empty flag
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007540:	69d2      	ldr	r2, [r2, #28]
 8007542:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007546:	61da      	str	r2, [r3, #28]
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	785b      	ldrb	r3, [r3, #1]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d059      	beq.n	8007604 <dmx_irqTxInterfaceHandler+0xe2>
		if((dmx->txState == dmx_cfg_TX_STATE_WAIT_FOR_BREAK)||(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE)){
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	785b      	ldrb	r3, [r3, #1]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d003      	beq.n	8007560 <dmx_irqTxInterfaceHandler+0x3e>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	785b      	ldrb	r3, [r3, #1]
 800755c:	2b05      	cmp	r3, #5
 800755e:	d152      	bne.n	8007606 <dmx_irqTxInterfaceHandler+0xe4>
			if(dmx->universeCnt < dmx->universeSize){
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800756c:	429a      	cmp	r2, r3
 800756e:	d230      	bcs.n	80075d2 <dmx_irqTxInterfaceHandler+0xb0>
				dmx->uart->CR1 &= ~USART_CR1_TXEIE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007578:	6812      	ldr	r2, [r2, #0]
 800757a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800757e:	601a      	str	r2, [r3, #0]
				dmx->uart->TDR = dmx->universe[dmx->universeCnt];
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007588:	6879      	ldr	r1, [r7, #4]
 800758a:	f8b1 1050 	ldrh.w	r1, [r1, #80]	; 0x50
 800758e:	440a      	add	r2, r1
 8007590:	7812      	ldrb	r2, [r2, #0]
 8007592:	b292      	uxth	r2, r2
 8007594:	851a      	strh	r2, [r3, #40]	; 0x28
				dmx->universeCnt++;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800759c:	3301      	adds	r3, #1
 800759e:	b29a      	uxth	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				if(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE) tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkBetweenTime_us);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	785b      	ldrb	r3, [r3, #1]
 80075aa:	2b05      	cmp	r3, #5
 80075ac:	d108      	bne.n	80075c0 <dmx_irqTxInterfaceHandler+0x9e>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	4619      	mov	r1, r3
 80075b8:	4610      	mov	r0, r2
 80075ba:	f003 f9e3 	bl	800a984 <tim_setNewTimeAndStart>
 80075be:	e022      	b.n	8007606 <dmx_irqTxInterfaceHandler+0xe4>
				else dmx->uart->CR1 |= USART_CR1_TXEIE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80075c8:	6812      	ldr	r2, [r2, #0]
 80075ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	e019      	b.n	8007606 <dmx_irqTxInterfaceHandler+0xe4>
			}else{
				dmx->universeCnt = 0;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				dmx->uart->CR1 &= ~USART_CR1_TXEIE;	//disable transmit-buffer empty interrupt
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80075e2:	6812      	ldr	r2, [r2, #0]
 80075e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075e8:	601a      	str	r2, [r3, #0]
				dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2201      	movs	r2, #1
 80075ee:	705a      	strb	r2, [r3, #1]
				tim_stop(dmx->txTimer);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f003 f9fd 	bl	800a9f4 <tim_stop>
				dmx->universeComplete = true;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007602:	e000      	b.n	8007606 <dmx_irqTxInterfaceHandler+0xe4>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8007604:	bf00      	nop
			}
		}

	}
}
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <dmx_irqRxInterfaceHandler>:
/*Receive IRQs*/
void dmx_irqRxTimerHandler(dmx_cfg_Instance *dmx){
//TODO: Add measurement of break
}

void dmx_irqRxInterfaceHandler(dmx_cfg_Instance *dmx){
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
	uint32_t sr = dmx->uart->ISR;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	60fb      	str	r3, [r7, #12]
	if (sr & USART_ISR_RXNE){
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f003 0320 	and.w	r3, r3, #32
 8007622:	2b00      	cmp	r3, #0
 8007624:	d065      	beq.n	80076f2 <dmx_irqRxInterfaceHandler+0xe6>
		if(sr & USART_ISR_ORE) dmx->uart->ICR |= USART_ICR_ORECF; /*Kill overrun error*/
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f003 0308 	and.w	r3, r3, #8
 800762c:	2b00      	cmp	r3, #0
 800762e:	d007      	beq.n	8007640 <dmx_irqRxInterfaceHandler+0x34>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007638:	6a12      	ldr	r2, [r2, #32]
 800763a:	f042 0208 	orr.w	r2, r2, #8
 800763e:	621a      	str	r2, [r3, #32]
		uint8_t  dmxByte = (uint8_t)dmx->uart->RDR;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007644:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007646:	b29b      	uxth	r3, r3
 8007648:	72fb      	strb	r3, [r7, #11]
		if(dmx->rxState == dmx_cfg_RX_STATE_NONE) return;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007650:	2b00      	cmp	r3, #0
 8007652:	d04d      	beq.n	80076f0 <dmx_irqRxInterfaceHandler+0xe4>
		if(sr & USART_ISR_FE){	/*Frame error*/
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d014      	beq.n	8007688 <dmx_irqRxInterfaceHandler+0x7c>
			dmx->uart->ICR |= USART_ICR_FECF; /*Kill frame error*/
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007666:	6a12      	ldr	r2, [r2, #32]
 8007668:	f042 0202 	orr.w	r2, r2, #2
 800766c:	621a      	str	r2, [r3, #32]
			dmx->universeCnt = 0;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			dmx->rxState = dmx_cfg_RX_STATE_RECEIVE_START_CODE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2203      	movs	r2, #3
 800767a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			dmx->universeComplete = false;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007686:	e034      	b.n	80076f2 <dmx_irqRxInterfaceHandler+0xe6>
		}else if(dmx->rxState == dmx_cfg_RX_STATE_RECEIVE_START_CODE){
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800768e:	2b03      	cmp	r3, #3
 8007690:	d108      	bne.n	80076a4 <dmx_irqRxInterfaceHandler+0x98>
			dmx->rxState = dmx_cfg_RX_STATE_RECEIVE_UNIVERSE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2204      	movs	r2, #4
 8007696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			dmx->universeStartCode = dmxByte;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	7afa      	ldrb	r2, [r7, #11]
 800769e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80076a2:	e026      	b.n	80076f2 <dmx_irqRxInterfaceHandler+0xe6>
		}else if(dmx->rxState == dmx_cfg_RX_STATE_RECEIVE_UNIVERSE){
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d121      	bne.n	80076f2 <dmx_irqRxInterfaceHandler+0xe6>
			dmx->universe[dmx->universeCnt] = dmxByte;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 80076b8:	4413      	add	r3, r2
 80076ba:	7afa      	ldrb	r2, [r7, #11]
 80076bc:	701a      	strb	r2, [r3, #0]
			dmx->universeCnt++;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076c4:	3301      	adds	r3, #1
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			if(dmx->universeCnt >= dmx->universeSize){
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80076da:	429a      	cmp	r2, r3
 80076dc:	d309      	bcc.n	80076f2 <dmx_irqRxInterfaceHandler+0xe6>
				dmx->universeComplete = true;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
				dmx->rxState = dmx_cfg_RX_STATE_WAIT_FOR_BREAK;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80076ee:	e000      	b.n	80076f2 <dmx_irqRxInterfaceHandler+0xe6>
		if(dmx->rxState == dmx_cfg_RX_STATE_NONE) return;
 80076f0:	bf00      	nop
			}
		}
	}
}
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <eeprom_registerCallback>:
static inline void readData(eeprom_cfg_Config *config, uint8_t *data, uint16_t dataSize);
static inline void callbackError(uint8_t type);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void eeprom_registerCallback(eeprom_cfg_Config *config, eeprom_cfg_callback callback){
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
	config->callback = callback;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	60da      	str	r2, [r3, #12]
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <eeprom_init>:
void eeprom_init(eeprom_cfg_Config *config){
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
	if(config->callback != NULL){
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d004      	beq.n	8007732 <eeprom_init+0x1a>
		config->maxAddress = config->memorySize >> 3; /*Convert Bit to Byte*/
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	08da      	lsrs	r2, r3, #3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	611a      	str	r2, [r3, #16]
	}
}
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <eeprom_write>:

void eeprom_write(eeprom_cfg_Config *config, uint16_t startAddr, uint8_t *data, uint8_t dataSize){
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	607a      	str	r2, [r7, #4]
 8007748:	461a      	mov	r2, r3
 800774a:	460b      	mov	r3, r1
 800774c:	817b      	strh	r3, [r7, #10]
 800774e:	4613      	mov	r3, r2
 8007750:	727b      	strb	r3, [r7, #9]
	if(writeValidation(config, startAddr, data, dataSize) == OK){
 8007752:	7a7b      	ldrb	r3, [r7, #9]
 8007754:	8979      	ldrh	r1, [r7, #10]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 f83f 	bl	80077dc <writeValidation>
 800775e:	4603      	mov	r3, r0
 8007760:	2b01      	cmp	r3, #1
 8007762:	d10a      	bne.n	800777a <eeprom_write+0x3c>
		writeStartAddr(config, startAddr);
 8007764:	897b      	ldrh	r3, [r7, #10]
 8007766:	4619      	mov	r1, r3
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 f80a 	bl	8007782 <writeStartAddr>
		writeData(config, data, dataSize);
 800776e:	7a7b      	ldrb	r3, [r7, #9]
 8007770:	461a      	mov	r2, r3
 8007772:	6879      	ldr	r1, [r7, #4]
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f813 	bl	80077a0 <writeData>
	}
}
 800777a:	bf00      	nop
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <writeStartAddr>:
	if(config->callback(config) != OK) return false;
	else return true;
}


static inline void writeStartAddr(eeprom_cfg_Config *config, uint16_t startAddr){
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	460b      	mov	r3, r1
 800778c:	807b      	strh	r3, [r7, #2]
	config->memAddr = startAddr;
 800778e:	887a      	ldrh	r2, [r7, #2]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	619a      	str	r2, [r3, #24]
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <writeData>:

static inline void writeData(eeprom_cfg_Config *config, uint8_t *data, uint8_t dataSize){
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	4613      	mov	r3, r2
 80077ac:	71fb      	strb	r3, [r7, #7]
	config->dataSize = dataSize;
 80077ae:	79fa      	ldrb	r2, [r7, #7]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	615a      	str	r2, [r3, #20]
	config->txBuffer = data;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	61da      	str	r2, [r3, #28]
	config->callbackType = EEPROM_CFG_CALL_TX_START;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	729a      	strb	r2, [r3, #10]
	if(config->callback(config) != OK) callbackError(EEPROM_CFG_CALL_TX_ERROR);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	4798      	blx	r3
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d002      	beq.n	80077d4 <writeData+0x34>
 80077ce:	2002      	movs	r0, #2
 80077d0:	f000 f832 	bl	8007838 <callbackError>
}
 80077d4:	bf00      	nop
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <writeValidation>:
	config->rxBuffer = data;
	config->callbackType = EEPROM_CFG_CALL_RX_START;
	if(config->callback(config) != OK) callbackError(EEPROM_CFG_CALL_RX_ERROR);
}

static inline uint8_t writeValidation(eeprom_cfg_Config *config, uint16_t startAddr, uint8_t *data, uint8_t dataSize){
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	607a      	str	r2, [r7, #4]
 80077e6:	461a      	mov	r2, r3
 80077e8:	460b      	mov	r3, r1
 80077ea:	817b      	strh	r3, [r7, #10]
 80077ec:	4613      	mov	r3, r2
 80077ee:	727b      	strb	r3, [r7, #9]
	if(config->callback == NULL) return NOK;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <writeValidation+0x20>
 80077f8:	2300      	movs	r3, #0
 80077fa:	e017      	b.n	800782c <writeValidation+0x50>
	if(data == NULL) return NOK;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <writeValidation+0x2a>
 8007802:	2300      	movs	r3, #0
 8007804:	e012      	b.n	800782c <writeValidation+0x50>
	if((startAddr + dataSize) > config->maxAddress) return NOK;
 8007806:	897a      	ldrh	r2, [r7, #10]
 8007808:	7a7b      	ldrb	r3, [r7, #9]
 800780a:	4413      	add	r3, r2
 800780c:	461a      	mov	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	429a      	cmp	r2, r3
 8007814:	d901      	bls.n	800781a <writeValidation+0x3e>
 8007816:	2300      	movs	r3, #0
 8007818:	e008      	b.n	800782c <writeValidation+0x50>
	if(dataSize > config->pageBufferSize) return NOK;
 800781a:	7a7b      	ldrb	r3, [r7, #9]
 800781c:	b29a      	uxth	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	891b      	ldrh	r3, [r3, #8]
 8007822:	429a      	cmp	r2, r3
 8007824:	d901      	bls.n	800782a <writeValidation+0x4e>
 8007826:	2300      	movs	r3, #0
 8007828:	e000      	b.n	800782c <writeValidation+0x50>
	else return OK;
 800782a:	2301      	movs	r3, #1
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <callbackError>:
	if(data == NULL) return NOK;
	if((startAddr + dataSize) > config->maxAddress) return NOK;
	else return OK;
}

static inline void callbackError(uint8_t type){
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	4603      	mov	r3, r0
 8007840:	71fb      	strb	r3, [r7, #7]
	//TODO: Do something with the error
}
 8007842:	bf00      	nop
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <isSimilarToLast>:
	message->origin = 0;
	message->value = 0;
	message->ctx = 0;
}

static inline uint8_t isSimilarToLast(msg_Message *message, msg_Buffer *buf){
 800784e:	b580      	push	{r7, lr}
 8007850:	b084      	sub	sp, #16
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	6039      	str	r1, [r7, #0]
	char type;
	uint16_t idx;
	if(RINGBUFFER_isEmpty(&buf->buffer)) return 0;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	4618      	mov	r0, r3
 800785c:	f000 fa16 	bl	8007c8c <RINGBUFFER_isEmpty>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <isSimilarToLast+0x1c>
 8007866:	2300      	movs	r3, #0
 8007868:	e039      	b.n	80078de <isSimilarToLast+0x90>
	uint16_t lastTmp = buf->lastMsg;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	899b      	ldrh	r3, [r3, #12]
 800786e:	81fb      	strh	r3, [r7, #14]
	type = buf->buffer.data[lastTmp];
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	689a      	ldr	r2, [r3, #8]
 8007874:	89fb      	ldrh	r3, [r7, #14]
 8007876:	4413      	add	r3, r2
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	737b      	strb	r3, [r7, #13]
	if(++lastTmp >= buf->buffer.size) lastTmp = 0;
 800787c:	89fb      	ldrh	r3, [r7, #14]
 800787e:	3301      	adds	r3, #1
 8007880:	81fb      	strh	r3, [r7, #14]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	889b      	ldrh	r3, [r3, #4]
 8007886:	89fa      	ldrh	r2, [r7, #14]
 8007888:	429a      	cmp	r2, r3
 800788a:	d301      	bcc.n	8007890 <isSimilarToLast+0x42>
 800788c:	2300      	movs	r3, #0
 800788e:	81fb      	strh	r3, [r7, #14]
	idx = (buf->buffer.data[lastTmp] << 8) & 0xFF00;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	89fb      	ldrh	r3, [r7, #14]
 8007896:	4413      	add	r3, r2
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	021b      	lsls	r3, r3, #8
 800789c:	817b      	strh	r3, [r7, #10]
	if(++lastTmp >= buf->buffer.size) lastTmp = 0;
 800789e:	89fb      	ldrh	r3, [r7, #14]
 80078a0:	3301      	adds	r3, #1
 80078a2:	81fb      	strh	r3, [r7, #14]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	889b      	ldrh	r3, [r3, #4]
 80078a8:	89fa      	ldrh	r2, [r7, #14]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d301      	bcc.n	80078b2 <isSimilarToLast+0x64>
 80078ae:	2300      	movs	r3, #0
 80078b0:	81fb      	strh	r3, [r7, #14]
	idx |= (buf->buffer.data[lastTmp] << 0) & 0xFF;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	689a      	ldr	r2, [r3, #8]
 80078b6:	89fb      	ldrh	r3, [r7, #14]
 80078b8:	4413      	add	r3, r2
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	b29a      	uxth	r2, r3
 80078be:	897b      	ldrh	r3, [r7, #10]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	817b      	strh	r3, [r7, #10]
	if((type == message->type) && (idx == message->index)) return 1;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	791b      	ldrb	r3, [r3, #4]
 80078c8:	7b7a      	ldrb	r2, [r7, #13]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d106      	bne.n	80078dc <isSimilarToLast+0x8e>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	897a      	ldrh	r2, [r7, #10]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d101      	bne.n	80078dc <isSimilarToLast+0x8e>
 80078d8:	2301      	movs	r3, #1
 80078da:	e000      	b.n	80078de <isSimilarToLast+0x90>
	else return 0;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <writeMsg>:

static inline uint8_t writeMsg(msg_Message *message, msg_Buffer *buf){
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b084      	sub	sp, #16
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	6039      	str	r1, [r7, #0]
	uint8_t bufferState =  ringbuffer_NO_BUF;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73fb      	strb	r3, [r7, #15]
	uint8_t isSimilarActive = 0;
 80078f4:	2300      	movs	r3, #0
 80078f6:	73bb      	strb	r3, [r7, #14]
	uint16_t nextMsgTmp = buf->buffer.in;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	81bb      	strh	r3, [r7, #12]
	if(message != NULL){
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d064      	beq.n	80079ce <writeMsg+0xe8>
		if(isSimilarToLast(message, buf)){
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff ffa1 	bl	800784e <isSimilarToLast>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d005      	beq.n	800791e <writeMsg+0x38>
			buf->buffer.in = buf->lastMsg;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	899a      	ldrh	r2, [r3, #12]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	801a      	strh	r2, [r3, #0]
			isSimilarActive = 1;
 800791a:	2301      	movs	r3, #1
 800791c:	73bb      	strb	r3, [r7, #14]
		}
		bufferState = RINGBUFFER_cIn(message->type, &buf->buffer);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	791b      	ldrb	r3, [r3, #4]
 8007922:	683a      	ldr	r2, [r7, #0]
 8007924:	4611      	mov	r1, r2
 8007926:	4618      	mov	r0, r3
 8007928:	f000 f942 	bl	8007bb0 <RINGBUFFER_cIn>
 800792c:	4603      	mov	r3, r0
 800792e:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->index >> 8), &buf->buffer);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	0a1b      	lsrs	r3, r3, #8
 8007936:	b29b      	uxth	r3, r3
 8007938:	b2db      	uxtb	r3, r3
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	4611      	mov	r1, r2
 800793e:	4618      	mov	r0, r3
 8007940:	f000 f936 	bl	8007bb0 <RINGBUFFER_cIn>
 8007944:	4603      	mov	r3, r0
 8007946:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->index), &buf->buffer);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	b2db      	uxtb	r3, r3
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	4611      	mov	r1, r2
 8007952:	4618      	mov	r0, r3
 8007954:	f000 f92c 	bl	8007bb0 <RINGBUFFER_cIn>
 8007958:	4603      	mov	r3, r0
 800795a:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->value >> 8), &buf->buffer);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007962:	121b      	asrs	r3, r3, #8
 8007964:	b21b      	sxth	r3, r3
 8007966:	b2db      	uxtb	r3, r3
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	4611      	mov	r1, r2
 800796c:	4618      	mov	r0, r3
 800796e:	f000 f91f 	bl	8007bb0 <RINGBUFFER_cIn>
 8007972:	4603      	mov	r3, r0
 8007974:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->value), &buf->buffer);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800797c:	b2db      	uxtb	r3, r3
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	4611      	mov	r1, r2
 8007982:	4618      	mov	r0, r3
 8007984:	f000 f914 	bl	8007bb0 <RINGBUFFER_cIn>
 8007988:	4603      	mov	r3, r0
 800798a:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->ctx >> 8), &buf->buffer);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007992:	121b      	asrs	r3, r3, #8
 8007994:	b21b      	sxth	r3, r3
 8007996:	b2db      	uxtb	r3, r3
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	4611      	mov	r1, r2
 800799c:	4618      	mov	r0, r3
 800799e:	f000 f907 	bl	8007bb0 <RINGBUFFER_cIn>
 80079a2:	4603      	mov	r3, r0
 80079a4:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->ctx), &buf->buffer);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	4611      	mov	r1, r2
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 f8fc 	bl	8007bb0 <RINGBUFFER_cIn>
 80079b8:	4603      	mov	r3, r0
 80079ba:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn(message->origin, &buf->buffer);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	795b      	ldrb	r3, [r3, #5]
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	4611      	mov	r1, r2
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 f8f3 	bl	8007bb0 <RINGBUFFER_cIn>
 80079ca:	4603      	mov	r3, r0
 80079cc:	73fb      	strb	r3, [r7, #15]
	}
	if(bufferState ==  ringbuffer_FULL) buf->buffer.in = nextMsgTmp;
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d103      	bne.n	80079dc <writeMsg+0xf6>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	89ba      	ldrh	r2, [r7, #12]
 80079d8:	801a      	strh	r2, [r3, #0]
 80079da:	e005      	b.n	80079e8 <writeMsg+0x102>
	else if(!isSimilarActive) buf->lastMsg = nextMsgTmp;
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d102      	bne.n	80079e8 <writeMsg+0x102>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	89ba      	ldrh	r2, [r7, #12]
 80079e6:	819a      	strh	r2, [r3, #12]
	return bufferState;
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <msg_writeEvent>:
	msgBuffer.out = 0;
	msgBuffer.size = size;
	msgBuffer.data = pData;
}

uint8_t msg_writeEvent(msg_Message *message, msg_Buffer *buf){
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b084      	sub	sp, #16
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
	message->index = CAST_MSG_TO_EVENT(message->index);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	801a      	strh	r2, [r3, #0]
	uint8_t bufferState = writeMsg(message, buf);
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7ff ff6a 	bl	80078e6 <writeMsg>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73fb      	strb	r3, [r7, #15]
	return bufferState;
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <msg_writeAction>:

uint8_t msg_writeAction(msg_Message *message, msg_Buffer *buf){
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
	message->index = CAST_MSG_TO_ACTION(message->index);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	801a      	strh	r2, [r3, #0]
	uint8_t bufferState = writeMsg(message, buf);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff ff51 	bl	80078e6 <writeMsg>
 8007a44:	4603      	mov	r3, r0
 8007a46:	73fb      	strb	r3, [r7, #15]
	return bufferState;
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <msg_getNext>:

msg_Message *msg_getNext(msg_Message *message, msg_Buffer *buf){
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	6039      	str	r1, [r7, #0]
	uint8_t bufferState =  ringbuffer_OK;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	73fb      	strb	r3, [r7, #15]
	char tmp = 0;
 8007a60:	2300      	movs	r3, #0
 8007a62:	73bb      	strb	r3, [r7, #14]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	f107 030e 	add.w	r3, r7, #14
 8007a6a:	4611      	mov	r1, r2
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 f8dc 	bl	8007c2a <RINGBUFFER_cOut>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73fb      	strb	r3, [r7, #15]
	message->type = tmp;
 8007a76:	7bba      	ldrb	r2, [r7, #14]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	711a      	strb	r2, [r3, #4]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	f107 030e 	add.w	r3, r7, #14
 8007a82:	4611      	mov	r1, r2
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 f8d0 	bl	8007c2a <RINGBUFFER_cOut>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	73fb      	strb	r3, [r7, #15]
	message->index |= (uint16_t)((tmp & 0xFF) << 8);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	881a      	ldrh	r2, [r3, #0]
 8007a92:	7bbb      	ldrb	r3, [r7, #14]
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	021b      	lsls	r3, r3, #8
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	801a      	strh	r2, [r3, #0]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	f107 030e 	add.w	r3, r7, #14
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 f8bd 	bl	8007c2a <RINGBUFFER_cOut>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73fb      	strb	r3, [r7, #15]
	message->index |= (uint16_t)(tmp & 0xFF);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	881a      	ldrh	r2, [r3, #0]
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	4313      	orrs	r3, r2
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	801a      	strh	r2, [r3, #0]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	f107 030e 	add.w	r3, r7, #14
 8007aca:	4611      	mov	r1, r2
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 f8ac 	bl	8007c2a <RINGBUFFER_cOut>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	73fb      	strb	r3, [r7, #15]
	message->value |= (uint16_t)((tmp & 0xFF) << 8);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	021b      	lsls	r3, r3, #8
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	b21b      	sxth	r3, r3
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	b21a      	sxth	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	805a      	strh	r2, [r3, #2]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	f107 030e 	add.w	r3, r7, #14
 8007af4:	4611      	mov	r1, r2
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 f897 	bl	8007c2a <RINGBUFFER_cOut>
 8007afc:	4603      	mov	r3, r0
 8007afe:	73fb      	strb	r3, [r7, #15]
	message->value |= (uint16_t)(tmp & 0xFF);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	b21b      	sxth	r3, r3
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	b21a      	sxth	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	805a      	strh	r2, [r3, #2]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	f107 030e 	add.w	r3, r7, #14
 8007b18:	4611      	mov	r1, r2
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 f885 	bl	8007c2a <RINGBUFFER_cOut>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73fb      	strb	r3, [r7, #15]
	message->ctx |= (uint16_t)((tmp & 0xFF) << 8);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	021b      	lsls	r3, r3, #8
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	b21b      	sxth	r3, r3
 8007b34:	4313      	orrs	r3, r2
 8007b36:	b21a      	sxth	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	80da      	strh	r2, [r3, #6]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	f107 030e 	add.w	r3, r7, #14
 8007b42:	4611      	mov	r1, r2
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 f870 	bl	8007c2a <RINGBUFFER_cOut>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	73fb      	strb	r3, [r7, #15]
	message->ctx |= (uint16_t)(tmp & 0xFF);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8007b54:	7bbb      	ldrb	r3, [r7, #14]
 8007b56:	b21b      	sxth	r3, r3
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	b21a      	sxth	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	80da      	strh	r2, [r3, #6]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	f107 030e 	add.w	r3, r7, #14
 8007b66:	4611      	mov	r1, r2
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 f85e 	bl	8007c2a <RINGBUFFER_cOut>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	73fb      	strb	r3, [r7, #15]
	message->origin = tmp;
 8007b72:	7bba      	ldrb	r2, [r7, #14]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	715a      	strb	r2, [r3, #5]
	if(bufferState ==  ringbuffer_OK)return message;
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d101      	bne.n	8007b82 <msg_getNext+0x130>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	e000      	b.n	8007b84 <msg_getNext+0x132>
	else return NULL;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <msg_isAction>:

uint8_t msg_isAction(msg_Message *message){
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
	if((message->index & ACTION_MSK) == ACTION_MSK) return TRUE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	881b      	ldrh	r3, [r3, #0]
 8007b98:	b21b      	sxth	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	da01      	bge.n	8007ba2 <msg_isAction+0x16>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e000      	b.n	8007ba4 <msg_isAction+0x18>
	else return FALSE;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <RINGBUFFER_cIn>:
 *  Created on: 15.01.2018
 *      Author: sawadee
 */
#include "ringbuffer.h"

uint8_t RINGBUFFER_cIn(char data, stRingBuf *pBuf){
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	6039      	str	r1, [r7, #0]
 8007bba:	71fb      	strb	r3, [r7, #7]
	if(pBuf->data != NULL){
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d02b      	beq.n	8007c1c <RINGBUFFER_cIn+0x6c>
		if ( ( pBuf->in + 1 == pBuf->out ) || ( pBuf->out == 0 && pBuf->in + 1 == pBuf->size ) ) return ringbuffer_FULL;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	881b      	ldrh	r3, [r3, #0]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	8852      	ldrh	r2, [r2, #2]
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d00a      	beq.n	8007be8 <RINGBUFFER_cIn+0x38>
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	885b      	ldrh	r3, [r3, #2]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d108      	bne.n	8007bec <RINGBUFFER_cIn+0x3c>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	3301      	adds	r3, #1
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	8892      	ldrh	r2, [r2, #4]
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d101      	bne.n	8007bec <RINGBUFFER_cIn+0x3c>
 8007be8:	2303      	movs	r3, #3
 8007bea:	e018      	b.n	8007c1e <RINGBUFFER_cIn+0x6e>
		pBuf->data[pBuf->in] = data;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	8812      	ldrh	r2, [r2, #0]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	79fa      	ldrb	r2, [r7, #7]
 8007bf8:	701a      	strb	r2, [r3, #0]
		pBuf->in++;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	801a      	strh	r2, [r3, #0]
		if (pBuf->in >= pBuf->size) pBuf->in = 0;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	881a      	ldrh	r2, [r3, #0]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	889b      	ldrh	r3, [r3, #4]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d302      	bcc.n	8007c18 <RINGBUFFER_cIn+0x68>
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2200      	movs	r2, #0
 8007c16:	801a      	strh	r2, [r3, #0]
		return ringbuffer_OK;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e000      	b.n	8007c1e <RINGBUFFER_cIn+0x6e>
	}else return ringbuffer_NO_BUF;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <RINGBUFFER_cOut>:
uint8_t RINGBUFFER_cOut(char *pData, stRingBuf *pBuf){
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	6039      	str	r1, [r7, #0]
	if(pBuf->data != NULL){
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d020      	beq.n	8007c7e <RINGBUFFER_cOut+0x54>
		if (pBuf->out == pBuf->in) return ringbuffer_EMPTY;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	885a      	ldrh	r2, [r3, #2]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d101      	bne.n	8007c4c <RINGBUFFER_cOut+0x22>
 8007c48:	2302      	movs	r3, #2
 8007c4a:	e019      	b.n	8007c80 <RINGBUFFER_cOut+0x56>
		*pData = pBuf->data[pBuf->out];
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	8852      	ldrh	r2, [r2, #2]
 8007c54:	4413      	add	r3, r2
 8007c56:	781a      	ldrb	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	701a      	strb	r2, [r3, #0]
		pBuf->out++;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	885b      	ldrh	r3, [r3, #2]
 8007c60:	3301      	adds	r3, #1
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	805a      	strh	r2, [r3, #2]
		if (pBuf->out >= pBuf->size)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	885a      	ldrh	r2, [r3, #2]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	889b      	ldrh	r3, [r3, #4]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d302      	bcc.n	8007c7a <RINGBUFFER_cOut+0x50>
		  pBuf->out = 0;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2200      	movs	r2, #0
 8007c78:	805a      	strh	r2, [r3, #2]
		return ringbuffer_OK;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e000      	b.n	8007c80 <RINGBUFFER_cOut+0x56>
	}else return ringbuffer_NO_BUF;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <RINGBUFFER_isEmpty>:

uint8_t RINGBUFFER_isEmpty(stRingBuf *pBuf){
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
	if(pBuf->out == pBuf->in) return 1;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	885a      	ldrh	r2, [r3, #2]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d101      	bne.n	8007ca4 <RINGBUFFER_isEmpty+0x18>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e000      	b.n	8007ca6 <RINGBUFFER_isEmpty+0x1a>
	else return 0;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <soft_i2c_bsp_gpioInit>:

#define soft_i2c_bsp_GPIO_MODE_MSK 			0x03
#define soft_i2c_bsp_GPIO_MODE_INPUT_FLOAT 	0x00
#define soft_i2c_bsp_GPIO_MODE_OUTPUT_OD 	0x01

static inline void soft_i2c_bsp_gpioInit(soft_i2c_bsp_pin_device *pin){
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
	/*Enable open drain output*/
	pin->GPIOx->OTYPER |= pin->GPIO_Pin;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	6812      	ldr	r2, [r2, #0]
 8007cc2:	6852      	ldr	r2, [r2, #4]
 8007cc4:	6879      	ldr	r1, [r7, #4]
 8007cc6:	8889      	ldrh	r1, [r1, #4]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	605a      	str	r2, [r3, #4]
	/*Set as input*/
	pin->GPIOx->MODER &= ~(soft_i2c_bsp_GPIO_MODE_MSK << (pin->GPIO_Pin_BitPos << 1));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	6812      	ldr	r2, [r2, #0]
 8007cd4:	6812      	ldr	r2, [r2, #0]
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	7989      	ldrb	r1, [r1, #6]
 8007cda:	0049      	lsls	r1, r1, #1
 8007cdc:	2003      	movs	r0, #3
 8007cde:	fa00 f101 	lsl.w	r1, r0, r1
 8007ce2:	43c9      	mvns	r1, r1
 8007ce4:	400a      	ands	r2, r1
 8007ce6:	601a      	str	r2, [r3, #0]
	pin->GPIOx->MODER |= (soft_i2c_bsp_GPIO_MODE_INPUT_FLOAT << (pin->GPIO_Pin_BitPos << 1));
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	6812      	ldr	r2, [r2, #0]
 8007cf0:	6812      	ldr	r2, [r2, #0]
 8007cf2:	601a      	str	r2, [r3, #0]
	/*Disable all pull ups or pull downs*/
	pin->GPIOx->PUPDR &= ~(soft_i2c_bsp_GPIO_PULL_MSK << (pin->GPIO_Pin_BitPos << 1));
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	6812      	ldr	r2, [r2, #0]
 8007cfc:	68d2      	ldr	r2, [r2, #12]
 8007cfe:	6879      	ldr	r1, [r7, #4]
 8007d00:	7989      	ldrb	r1, [r1, #6]
 8007d02:	0049      	lsls	r1, r1, #1
 8007d04:	2003      	movs	r0, #3
 8007d06:	fa00 f101 	lsl.w	r1, r0, r1
 8007d0a:	43c9      	mvns	r1, r1
 8007d0c:	400a      	ands	r2, r1
 8007d0e:	60da      	str	r2, [r3, #12]
	pin->GPIOx->PUPDR |= (soft_i2c_bsp_GPIO_PULL_NONE << (pin->GPIO_Pin_BitPos << 1));
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	6812      	ldr	r2, [r2, #0]
 8007d18:	68d2      	ldr	r2, [r2, #12]
 8007d1a:	60da      	str	r2, [r3, #12]
	/*Set gpio speed as high as possible*/
	pin->GPIOx->OSPEEDR &= ~(soft_i2c_bsp_GPIO_SPEED_MSK << (pin->GPIO_Pin_BitPos << 1));
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	6812      	ldr	r2, [r2, #0]
 8007d24:	6892      	ldr	r2, [r2, #8]
 8007d26:	6879      	ldr	r1, [r7, #4]
 8007d28:	7989      	ldrb	r1, [r1, #6]
 8007d2a:	0049      	lsls	r1, r1, #1
 8007d2c:	2003      	movs	r0, #3
 8007d2e:	fa00 f101 	lsl.w	r1, r0, r1
 8007d32:	43c9      	mvns	r1, r1
 8007d34:	400a      	ands	r2, r1
 8007d36:	609a      	str	r2, [r3, #8]
	pin->GPIOx->OSPEEDR |= soft_i2c_bsp_GPIO_SPEED_VERY_HIGH << (pin->GPIO_Pin_BitPos << 1);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	6812      	ldr	r2, [r2, #0]
 8007d40:	6892      	ldr	r2, [r2, #8]
 8007d42:	6879      	ldr	r1, [r7, #4]
 8007d44:	7989      	ldrb	r1, [r1, #6]
 8007d46:	0049      	lsls	r1, r1, #1
 8007d48:	2003      	movs	r0, #3
 8007d4a:	fa00 f101 	lsl.w	r1, r0, r1
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	609a      	str	r2, [r3, #8]
	/*Set gpio output level always to low*/
	pin->GPIOx->ODR &= ~pin->GPIO_Pin;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	6812      	ldr	r2, [r2, #0]
 8007d5a:	6952      	ldr	r2, [r2, #20]
 8007d5c:	6879      	ldr	r1, [r7, #4]
 8007d5e:	8889      	ldrh	r1, [r1, #4]
 8007d60:	43c9      	mvns	r1, r1
 8007d62:	400a      	ands	r2, r1
 8007d64:	615a      	str	r2, [r3, #20]
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <soft_i2c_bsp_timInit>:
		pin->GPIOx->MODER &= ~(soft_i2c_bsp_GPIO_MODE_MSK << (pin->GPIO_Pin_BitPos << 1));
		pin->GPIOx->MODER |= (soft_i2c_bsp_GPIO_MODE_OUTPUT_OD << (pin->GPIO_Pin_BitPos << 1));
	}
}

static inline void soft_i2c_bsp_timInit(soft_i2c_bsp_tim_device *tim){
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
	tim->TIMx->CR1 &= ~TIM_CR1_CEN;		//Stop counter
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	6812      	ldr	r2, [r2, #0]
 8007d82:	6812      	ldr	r2, [r2, #0]
 8007d84:	f022 0201 	bic.w	r2, r2, #1
 8007d88:	601a      	str	r2, [r3, #0]
	tim->TIMx->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	6812      	ldr	r2, [r2, #0]
 8007d92:	6812      	ldr	r2, [r2, #0]
 8007d94:	f042 0202 	orr.w	r2, r2, #2
 8007d98:	601a      	str	r2, [r3, #0]
	tim->TIMx->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	6812      	ldr	r2, [r2, #0]
 8007da2:	6912      	ldr	r2, [r2, #16]
 8007da4:	f022 0201 	bic.w	r2, r2, #1
 8007da8:	611a      	str	r2, [r3, #16]
	tim->TIMx->EGR |= TIM_EGR_UG;		//Force reload of shadow register -> Start from beginning
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	6812      	ldr	r2, [r2, #0]
 8007db2:	6952      	ldr	r2, [r2, #20]
 8007db4:	f042 0201 	orr.w	r2, r2, #1
 8007db8:	615a      	str	r2, [r3, #20]
	tim->TIMx->DIER |= TIM_DIER_UIE;	//Enable update interrupts
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	6812      	ldr	r2, [r2, #0]
 8007dc2:	68d2      	ldr	r2, [r2, #12]
 8007dc4:	f042 0201 	orr.w	r2, r2, #1
 8007dc8:	60da      	str	r2, [r3, #12]
	tim->TIMx->CR1 |= TIM_CR1_CEN;		//Enable counter
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	6812      	ldr	r2, [r2, #0]
 8007dd2:	6812      	ldr	r2, [r2, #0]
 8007dd4:	f042 0201 	orr.w	r2, r2, #1
 8007dd8:	601a      	str	r2, [r3, #0]
}
 8007dda:	bf00      	nop
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <soft_i2c_bsp_timStart>:

static inline void soft_i2c_bsp_timStart(soft_i2c_bsp_tim_device *tim){
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
//	tim->TIMx->CR1 |= TIM_CR1_CEN;		//Enable counter
	tim->TIMx->CR1 &= ~TIM_CR1_UDIS;	//Allow that update can be triggered
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	6812      	ldr	r2, [r2, #0]
 8007df6:	6812      	ldr	r2, [r2, #0]
 8007df8:	f022 0202 	bic.w	r2, r2, #2
 8007dfc:	601a      	str	r2, [r3, #0]
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <soft_i2c_bsp_timStop>:

static inline void soft_i2c_bsp_timStop(soft_i2c_bsp_tim_device *tim){
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
//	tim->TIMx->CR1 &= ~TIM_CR1_CEN;		//Enable counter
	tim->TIMx->CR1 |= TIM_CR1_UDIS;		//Avoid that update can be triggered
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	6812      	ldr	r2, [r2, #0]
 8007e1a:	6812      	ldr	r2, [r2, #0]
 8007e1c:	f042 0202 	orr.w	r2, r2, #2
 8007e20:	601a      	str	r2, [r3, #0]
}
 8007e22:	bf00      	nop
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
	...

08007e30 <i2c_soft_init>:
static int write_byte(soft_i2c_Config *self_p, uint8_t byte);
static int read_byte(soft_i2c_Config *self_p, uint8_t *byte_p, int ack);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void i2c_soft_init(soft_i2c_Config *self_p){
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
    self_p->baudrate_us = (1000000L / 2L / self_p->baudrate);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	4a0b      	ldr	r2, [pc, #44]	; (8007e6c <i2c_soft_init+0x3c>)
 8007e3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	619a      	str	r2, [r3, #24]
//    gpio_setPinMode(GPIO_MODE_INPUT, self_p->scl_pin.GPIOx, self_p->scl_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
//    gpio_setPinMode(GPIO_MODE_INPUT, self_p->sda_pin.GPIOx, self_p->sda_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);

    soft_i2c_bsp_gpioInit(&self_p->scl_pin);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7ff ff32 	bl	8007cb2 <soft_i2c_bsp_gpioInit>
    soft_i2c_bsp_gpioInit(&self_p->sda_pin);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	3308      	adds	r3, #8
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7ff ff2d 	bl	8007cb2 <soft_i2c_bsp_gpioInit>
    soft_i2c_bsp_timInit(&self_p->timer);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3310      	adds	r3, #16
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7ff ff88 	bl	8007d72 <soft_i2c_bsp_timInit>
    /* The pin output values are always set to 0. The bus state is
       high by configuring the pin as an input with a pullup
       resistor. */
//    pin_device_write_low(self_p->scl_pin);
//    pin_device_write_low(self_p->sda_pin);
}
 8007e62:	bf00      	nop
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	0007a120 	.word	0x0007a120

08007e70 <i2c_soft_timer_us>:

void i2c_soft_timer_us(soft_i2c_Config *self_p){
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
	if(self_p->timer_us > 0) --self_p->timer_us;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	dd04      	ble.n	8007e8a <i2c_soft_timer_us+0x1a>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e84:	1e5a      	subs	r2, r3, #1
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <i2c_soft_mem_read>:
	/*4. Send the stop condition. */
	status = stop_cond(self_p);
	return status;
}

int i2c_soft_mem_read(soft_i2c_Config *self_p, int address, int memAddr, int memAddrSize, uint8_t *data, int size){
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b088      	sub	sp, #32
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	60f8      	str	r0, [r7, #12]
 8007e9e:	60b9      	str	r1, [r7, #8]
 8007ea0:	607a      	str	r2, [r7, #4]
 8007ea2:	603b      	str	r3, [r7, #0]
	int i;
	int ack;
	int status = soft_i2c_RETURN_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	61bb      	str	r3, [r7, #24]
	/*** Write part ***/
	/* 1. Send the start condition. */
	status = start_cond(self_p);
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f000 f923 	bl	80080f4 <start_cond>
 8007eae:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) return status;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <i2c_soft_mem_read+0x24>
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	e071      	b.n	8007f9e <i2c_soft_mem_read+0x108>
	/* 2. Write the address with the direction bit set to 0.*/
	status = write_byte(self_p, address);
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 fa2a 	bl	800831a <write_byte>
 8007ec6:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) {
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d004      	beq.n	8007ed8 <i2c_soft_mem_read+0x42>
		stop_cond(self_p);	/*Ignore the possible error of stop condition*/
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 f94d 	bl	800816e <stop_cond>
		return status;
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	e062      	b.n	8007f9e <i2c_soft_mem_read+0x108>
	}
	/* 3. Write the mem address. */
	for (i = memAddrSize; i > 0; i--) {
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	61fb      	str	r3, [r7, #28]
 8007edc:	e017      	b.n	8007f0e <i2c_soft_mem_read+0x78>
		uint8_t addressPart = ((memAddr >> ((i-1) << 3)) & 0xFF);
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	fa42 f303 	asr.w	r3, r2, r3
 8007eea:	75fb      	strb	r3, [r7, #23]
		status = write_byte(self_p, addressPart);
 8007eec:	7dfb      	ldrb	r3, [r7, #23]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f000 fa12 	bl	800831a <write_byte>
 8007ef6:	61b8      	str	r0, [r7, #24]
		if (status != soft_i2c_RETURN_OK) {
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d004      	beq.n	8007f08 <i2c_soft_mem_read+0x72>
			stop_cond(self_p); /*Ignore the possible error of stop condition*/
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f000 f935 	bl	800816e <stop_cond>
			return status;
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	e04a      	b.n	8007f9e <i2c_soft_mem_read+0x108>
	for (i = memAddrSize; i > 0; i--) {
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	61fb      	str	r3, [r7, #28]
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	dce4      	bgt.n	8007ede <i2c_soft_mem_read+0x48>
		}
	}
	/*** Read part ***/
	/* 4. Send the start condition. */
	status = start_cond(self_p);
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 f8ed 	bl	80080f4 <start_cond>
 8007f1a:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) return status;
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <i2c_soft_mem_read+0x90>
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	e03b      	b.n	8007f9e <i2c_soft_mem_read+0x108>
	/* 5. Write the address with the direction bit set to 1.*/
	status = write_byte(self_p, ((address) | 0x1));
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	b25b      	sxtb	r3, r3
 8007f2a:	f043 0301 	orr.w	r3, r3, #1
 8007f2e:	b25b      	sxtb	r3, r3
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	4619      	mov	r1, r3
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 f9f0 	bl	800831a <write_byte>
 8007f3a:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) {
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d004      	beq.n	8007f4c <i2c_soft_mem_read+0xb6>
		stop_cond(self_p); /*Ignore the possible error of stop condition*/
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f000 f913 	bl	800816e <stop_cond>
		return status;
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	e028      	b.n	8007f9e <i2c_soft_mem_read+0x108>
	}
	/* 6. Read the data. */
	for (i = 0; i < size; i++) {
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	61fb      	str	r3, [r7, #28]
 8007f50:	e01c      	b.n	8007f8c <i2c_soft_mem_read+0xf6>
		/* ACK all but last read byte. */
		ack = (i + 1 != size);
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	bf14      	ite	ne
 8007f5c:	2301      	movne	r3, #1
 8007f5e:	2300      	moveq	r3, #0
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	613b      	str	r3, [r7, #16]
		status = read_byte(self_p, &data[i], ack);
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f68:	4413      	add	r3, r2
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 fa0d 	bl	800838e <read_byte>
 8007f74:	61b8      	str	r0, [r7, #24]
		if (status != soft_i2c_RETURN_OK) {
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d004      	beq.n	8007f86 <i2c_soft_mem_read+0xf0>
			stop_cond(self_p); /*Ignore the possible error of stop condition*/
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f000 f8f6 	bl	800816e <stop_cond>
			return status;
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	e00b      	b.n	8007f9e <i2c_soft_mem_read+0x108>
	for (i = 0; i < size; i++) {
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	61fb      	str	r3, [r7, #28]
 8007f8c:	69fa      	ldr	r2, [r7, #28]
 8007f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f90:	429a      	cmp	r2, r3
 8007f92:	dbde      	blt.n	8007f52 <i2c_soft_mem_read+0xbc>
		}
	}
	/*7. Send the stop condition. */
	status = stop_cond(self_p);
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 f8ea 	bl	800816e <stop_cond>
 8007f9a:	61b8      	str	r0, [r7, #24]
	return status;
 8007f9c:	69bb      	ldr	r3, [r7, #24]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3720      	adds	r7, #32
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <i2c_soft_mem_write>:
	/*4. Send the stop condition. */
	status = stop_cond(self_p);
	return status;
}

int i2c_soft_mem_write(soft_i2c_Config *self_p, int address, int memAddr, int memAddrSize, const uint8_t *data, int size){
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b088      	sub	sp, #32
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	60f8      	str	r0, [r7, #12]
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	607a      	str	r2, [r7, #4]
 8007fb2:	603b      	str	r3, [r7, #0]
	int i;
	int status = soft_i2c_RETURN_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	61bb      	str	r3, [r7, #24]
	/* 1. Send the start condition. */
	status = start_cond(self_p);
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f000 f89b 	bl	80080f4 <start_cond>
 8007fbe:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) return status;
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <i2c_soft_mem_write+0x24>
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	e04c      	b.n	8008064 <i2c_soft_mem_write+0xbe>
	/* 2. Write the address with the direction bit set to 0. */
	status = write_byte(self_p, address);
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	4619      	mov	r1, r3
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f000 f9a2 	bl	800831a <write_byte>
 8007fd6:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) {
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d004      	beq.n	8007fe8 <i2c_soft_mem_write+0x42>
		stop_cond(self_p);	/*Ignore the possible error of stop condition*/
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f000 f8c5 	bl	800816e <stop_cond>
		return status;
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	e03d      	b.n	8008064 <i2c_soft_mem_write+0xbe>
	}
	/* 3. Write the mem address. */
	for (i = memAddrSize; i > 0; i--) {
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	61fb      	str	r3, [r7, #28]
 8007fec:	e017      	b.n	800801e <i2c_soft_mem_write+0x78>
		uint8_t addressPart = ((memAddr >> ((i-1) << 3)) & 0xFF);
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	00db      	lsls	r3, r3, #3
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	fa42 f303 	asr.w	r3, r2, r3
 8007ffa:	75fb      	strb	r3, [r7, #23]
		status = write_byte(self_p, addressPart);
 8007ffc:	7dfb      	ldrb	r3, [r7, #23]
 8007ffe:	4619      	mov	r1, r3
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 f98a 	bl	800831a <write_byte>
 8008006:	61b8      	str	r0, [r7, #24]
		if (status != soft_i2c_RETURN_OK) {
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d004      	beq.n	8008018 <i2c_soft_mem_write+0x72>
			stop_cond(self_p); /*Ignore the possible error of stop condition*/
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 f8ad 	bl	800816e <stop_cond>
			return status;
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	e025      	b.n	8008064 <i2c_soft_mem_write+0xbe>
	for (i = memAddrSize; i > 0; i--) {
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	3b01      	subs	r3, #1
 800801c:	61fb      	str	r3, [r7, #28]
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	2b00      	cmp	r3, #0
 8008022:	dce4      	bgt.n	8007fee <i2c_soft_mem_write+0x48>
		}
	}
	/* 4. Write the data. */
	for (i = 0; i < size; i++) {
 8008024:	2300      	movs	r3, #0
 8008026:	61fb      	str	r3, [r7, #28]
 8008028:	e013      	b.n	8008052 <i2c_soft_mem_write+0xac>
		status = write_byte(self_p, data[i]);
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800802e:	4413      	add	r3, r2
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	4619      	mov	r1, r3
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f970 	bl	800831a <write_byte>
 800803a:	61b8      	str	r0, [r7, #24]
		if (status != soft_i2c_RETURN_OK) {
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d004      	beq.n	800804c <i2c_soft_mem_write+0xa6>
			stop_cond(self_p); /*Ignore the possible error of stop condition*/
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 f893 	bl	800816e <stop_cond>
			return status;
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	e00b      	b.n	8008064 <i2c_soft_mem_write+0xbe>
	for (i = 0; i < size; i++) {
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	3301      	adds	r3, #1
 8008050:	61fb      	str	r3, [r7, #28]
 8008052:	69fa      	ldr	r2, [r7, #28]
 8008054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008056:	429a      	cmp	r2, r3
 8008058:	dbe7      	blt.n	800802a <i2c_soft_mem_write+0x84>
		}
	}
	/*5. Send the stop condition. */
	status = stop_cond(self_p);
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f000 f887 	bl	800816e <stop_cond>
 8008060:	61b8      	str	r0, [r7, #24]
	return status;
 8008062:	69bb      	ldr	r3, [r7, #24]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3720      	adds	r7, #32
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <busy_wait_us>:
    if (status != soft_i2c_RETURN_OK) return status;
    return res;
}

/* Helper ----------------------------------------------------------------------*/
static void busy_wait_us(soft_i2c_Config *self_p, uint32_t time_us){
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
	self_p->timer_us = time_us;
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	625a      	str	r2, [r3, #36]	; 0x24
	//TODO: Enable timer
	soft_i2c_bsp_timStart(&self_p->timer);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	3310      	adds	r3, #16
 8008080:	4618      	mov	r0, r3
 8008082:	f7ff feb0 	bl	8007de6 <soft_i2c_bsp_timStart>
//	htim16.Instance->CR1 &= ~TIM_CR1_UDIS;
	while(self_p->timer_us > 0);
 8008086:	bf00      	nop
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	2b00      	cmp	r3, #0
 800808e:	dcfb      	bgt.n	8008088 <busy_wait_us+0x1c>
	//TODO: stop timer
	soft_i2c_bsp_timStop(&self_p->timer);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	3310      	adds	r3, #16
 8008094:	4618      	mov	r0, r3
 8008096:	f7ff feb8 	bl	8007e0a <soft_i2c_bsp_timStop>
//	htim16.Instance->CR1 |= TIM_CR1_UDIS;

}
 800809a:	bf00      	nop
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <wait_for_clock_stretching_end>:

static int wait_for_clock_stretching_end(soft_i2c_Config *self_p){
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
    uint32_t clock_stretching_us = 0;
 80080aa:	2300      	movs	r3, #0
 80080ac:	60fb      	str	r3, [r7, #12]
    do {
        if (pin_device_read(self_p->scl_pin) == 1) {
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	889b      	ldrh	r3, [r3, #4]
 80080b6:	4619      	mov	r1, r3
 80080b8:	4610      	mov	r0, r2
 80080ba:	f7f9 fafb 	bl	80016b4 <HAL_GPIO_ReadPin>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <wait_for_clock_stretching_end+0x26>
            return soft_i2c_RETURN_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	e011      	b.n	80080ec <wait_for_clock_stretching_end+0x4a>
        }
        busy_wait_us(self_p, self_p->clock_stretching_sleep_us);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	4619      	mov	r1, r3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7ff ffcc 	bl	800806c <busy_wait_us>
        clock_stretching_us += self_p->clock_stretching_sleep_us;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	4413      	add	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]
    } while (clock_stretching_us < self_p->max_clock_stretching_us);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	69da      	ldr	r2, [r3, #28]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d8e2      	bhi.n	80080ae <wait_for_clock_stretching_end+0xc>
    return soft_i2c_RETURN_CLOCK_STRETCH;
 80080e8:	f06f 0302 	mvn.w	r3, #2
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <start_cond>:

static int start_cond(soft_i2c_Config *self_p){
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
	gpio_setPinMode(GPIO_MODE_INPUT, self_p->scl_pin.GPIOx, self_p->scl_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6819      	ldr	r1, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	799a      	ldrb	r2, [r3, #6]
 8008104:	2300      	movs	r3, #0
 8008106:	2000      	movs	r0, #0
 8008108:	f001 fd93 	bl	8009c32 <gpio_setPinMode2>
	/* The line is busy if SDA is low. */
	gpio_setPinMode(GPIO_MODE_INPUT, self_p->sda_pin.GPIOx, self_p->sda_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6899      	ldr	r1, [r3, #8]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	7b9a      	ldrb	r2, [r3, #14]
 8008114:	2300      	movs	r3, #0
 8008116:	2000      	movs	r0, #0
 8008118:	f001 fd8b 	bl	8009c32 <gpio_setPinMode2>
    if (pin_device_read(self_p->sda_pin) == 0) {
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	899b      	ldrh	r3, [r3, #12]
 8008124:	4619      	mov	r1, r3
 8008126:	4610      	mov	r0, r2
 8008128:	f7f9 fac4 	bl	80016b4 <HAL_GPIO_ReadPin>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d102      	bne.n	8008138 <start_cond+0x44>
        return soft_i2c_RETURN_BUSY;
 8008132:	f06f 0301 	mvn.w	r3, #1
 8008136:	e016      	b.n	8008166 <start_cond+0x72>
    }
    /* SCL is high, set SDA from 1 to 0. */
    gpio_setPinMode(GPIO_MODE_OUTPUT_OD, self_p->sda_pin.GPIOx, self_p->sda_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6899      	ldr	r1, [r3, #8]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	7b9a      	ldrb	r2, [r3, #14]
 8008140:	2300      	movs	r3, #0
 8008142:	2011      	movs	r0, #17
 8008144:	f001 fd75 	bl	8009c32 <gpio_setPinMode2>
    busy_wait_us(self_p, self_p->baudrate_us);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7ff ff8c 	bl	800806c <busy_wait_us>
    /* Set SCL low as preparation for the first transfer. */
    gpio_setPinMode(GPIO_MODE_OUTPUT_OD, self_p->scl_pin.GPIOx, self_p->scl_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6819      	ldr	r1, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	799a      	ldrb	r2, [r3, #6]
 800815c:	2300      	movs	r3, #0
 800815e:	2011      	movs	r0, #17
 8008160:	f001 fd67 	bl	8009c32 <gpio_setPinMode2>
    return soft_i2c_RETURN_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <stop_cond>:

static int stop_cond(soft_i2c_Config *self_p){
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
    /* Set SDA to 0. */
    gpio_setPinMode(GPIO_MODE_OUTPUT_OD, self_p->sda_pin.GPIOx, self_p->sda_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6899      	ldr	r1, [r3, #8]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	7b9a      	ldrb	r2, [r3, #14]
 800817e:	2300      	movs	r3, #0
 8008180:	2011      	movs	r0, #17
 8008182:	f001 fd56 	bl	8009c32 <gpio_setPinMode2>
    busy_wait_us(self_p, self_p->baudrate_us);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	4619      	mov	r1, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7ff ff6d 	bl	800806c <busy_wait_us>
    /* SDA to 1. */
    gpio_setPinMode(GPIO_MODE_INPUT, self_p->scl_pin.GPIOx, self_p->scl_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6819      	ldr	r1, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	799a      	ldrb	r2, [r3, #6]
 800819a:	2300      	movs	r3, #0
 800819c:	2000      	movs	r0, #0
 800819e:	f001 fd48 	bl	8009c32 <gpio_setPinMode2>
    /* Clock stretching. */
    if (wait_for_clock_stretching_end(self_p) != soft_i2c_RETURN_OK) {
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7ff ff7d 	bl	80080a2 <wait_for_clock_stretching_end>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d002      	beq.n	80081b4 <stop_cond+0x46>
        return soft_i2c_RETURN_CLOCK_STRETCH;
 80081ae:	f06f 0302 	mvn.w	r3, #2
 80081b2:	e028      	b.n	8008206 <stop_cond+0x98>
    }
    /* Stop bit setup time, minimum 4us. */
    busy_wait_us(self_p, self_p->baudrate_us);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	4619      	mov	r1, r3
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7ff ff56 	bl	800806c <busy_wait_us>
    /* SCL is high, set SDA from 0 to 1. */
    gpio_setPinMode(GPIO_MODE_INPUT, self_p->sda_pin.GPIOx, self_p->sda_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6899      	ldr	r1, [r3, #8]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	7b9a      	ldrb	r2, [r3, #14]
 80081c8:	2300      	movs	r3, #0
 80081ca:	2000      	movs	r0, #0
 80081cc:	f001 fd31 	bl	8009c32 <gpio_setPinMode2>
    busy_wait_us(self_p, self_p->baudrate_us);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7ff ff48 	bl	800806c <busy_wait_us>
    /* Make sure no device is pulling SDA low. */
    if (pin_device_read(self_p->sda_pin) == 0) {
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	899b      	ldrh	r3, [r3, #12]
 80081e4:	4619      	mov	r1, r3
 80081e6:	4610      	mov	r0, r2
 80081e8:	f7f9 fa64 	bl	80016b4 <HAL_GPIO_ReadPin>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d102      	bne.n	80081f8 <stop_cond+0x8a>
        return soft_i2c_RETURN_BUSY;
 80081f2:	f06f 0301 	mvn.w	r3, #1
 80081f6:	e006      	b.n	8008206 <stop_cond+0x98>
    }
    busy_wait_us(self_p, self_p->baudrate_us);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	4619      	mov	r1, r3
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7ff ff34 	bl	800806c <busy_wait_us>
    return soft_i2c_RETURN_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <write_bit>:

static int write_bit(soft_i2c_Config *self_p, int value){
 800820e:	b580      	push	{r7, lr}
 8008210:	b082      	sub	sp, #8
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
    if (value == 1) gpio_setPinMode(GPIO_MODE_INPUT, self_p->sda_pin.GPIOx, self_p->sda_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d108      	bne.n	8008230 <write_bit+0x22>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6899      	ldr	r1, [r3, #8]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	7b9a      	ldrb	r2, [r3, #14]
 8008226:	2300      	movs	r3, #0
 8008228:	2000      	movs	r0, #0
 800822a:	f001 fd02 	bl	8009c32 <gpio_setPinMode2>
 800822e:	e007      	b.n	8008240 <write_bit+0x32>
    else gpio_setPinMode(GPIO_MODE_OUTPUT_OD, self_p->sda_pin.GPIOx, self_p->sda_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6899      	ldr	r1, [r3, #8]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	7b9a      	ldrb	r2, [r3, #14]
 8008238:	2300      	movs	r3, #0
 800823a:	2011      	movs	r0, #17
 800823c:	f001 fcf9 	bl	8009c32 <gpio_setPinMode2>
    /* SDA change propagation delay. */
    busy_wait_us(self_p, self_p->baudrate_us);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7ff ff10 	bl	800806c <busy_wait_us>
    /* Set SCL high to indicate a new valid SDA value is available */
    gpio_setPinMode(GPIO_MODE_INPUT, self_p->scl_pin.GPIOx, self_p->scl_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6819      	ldr	r1, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	799a      	ldrb	r2, [r3, #6]
 8008254:	2300      	movs	r3, #0
 8008256:	2000      	movs	r0, #0
 8008258:	f001 fceb 	bl	8009c32 <gpio_setPinMode2>
    /* Wait for SDA value to be read by slave, minimum of 4us for
       standard mode. */
    busy_wait_us(self_p, self_p->baudrate_us);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	4619      	mov	r1, r3
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7ff ff02 	bl	800806c <busy_wait_us>
    /* Clock stretching */
    if (wait_for_clock_stretching_end(self_p) != soft_i2c_RETURN_OK) {
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7ff ff1a 	bl	80080a2 <wait_for_clock_stretching_end>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <write_bit+0x6c>
        return soft_i2c_RETURN_CLOCK_STRETCH;
 8008274:	f06f 0302 	mvn.w	r3, #2
 8008278:	e008      	b.n	800828c <write_bit+0x7e>
    }
    /* Clear the SCL to low in preparation for next change. */
    gpio_setPinMode(GPIO_MODE_OUTPUT_OD, self_p->scl_pin.GPIOx, self_p->scl_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6819      	ldr	r1, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	799a      	ldrb	r2, [r3, #6]
 8008282:	2300      	movs	r3, #0
 8008284:	2011      	movs	r0, #17
 8008286:	f001 fcd4 	bl	8009c32 <gpio_setPinMode2>
    return soft_i2c_RETURN_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <read_bit>:

static int read_bit(soft_i2c_Config *self_p, uint8_t *value_p){
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
    /* Let the slave drive data. */
    gpio_setPinMode(GPIO_MODE_INPUT, self_p->sda_pin.GPIOx, self_p->sda_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6899      	ldr	r1, [r3, #8]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	7b9a      	ldrb	r2, [r3, #14]
 80082a6:	2300      	movs	r3, #0
 80082a8:	2000      	movs	r0, #0
 80082aa:	f001 fcc2 	bl	8009c32 <gpio_setPinMode2>
    /* Wait for SDA value to be written by slave, minimum of 4us for
       standard mode. */
    busy_wait_us(self_p, self_p->baudrate_us);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	4619      	mov	r1, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f7ff fed9 	bl	800806c <busy_wait_us>
    /* Set SCL high to indicate a new valid SDA value is available. */
    gpio_setPinMode(GPIO_MODE_INPUT, self_p->scl_pin.GPIOx, self_p->scl_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6819      	ldr	r1, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	799a      	ldrb	r2, [r3, #6]
 80082c2:	2300      	movs	r3, #0
 80082c4:	2000      	movs	r0, #0
 80082c6:	f001 fcb4 	bl	8009c32 <gpio_setPinMode2>
    /* Clock stretching. */
    if (wait_for_clock_stretching_end(self_p) != soft_i2c_RETURN_OK) {
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7ff fee9 	bl	80080a2 <wait_for_clock_stretching_end>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d002      	beq.n	80082dc <read_bit+0x48>
        return soft_i2c_RETURN_CLOCK_STRETCH;
 80082d6:	f06f 0302 	mvn.w	r3, #2
 80082da:	e01a      	b.n	8008312 <read_bit+0x7e>
    }
    /* Wait for SDA value to be written by slave, minimum of 4us for
       standard mode. */
    busy_wait_us(self_p, self_p->baudrate_us);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7ff fec2 	bl	800806c <busy_wait_us>
    /* SCL is high, read out bit. */
    *value_p = pin_device_read(self_p->sda_pin);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	899b      	ldrh	r3, [r3, #12]
 80082f0:	4619      	mov	r1, r3
 80082f2:	4610      	mov	r0, r2
 80082f4:	f7f9 f9de 	bl	80016b4 <HAL_GPIO_ReadPin>
 80082f8:	4603      	mov	r3, r0
 80082fa:	461a      	mov	r2, r3
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	701a      	strb	r2, [r3, #0]
    /* Set SCL low in preparation for next operation. */
    gpio_setPinMode(GPIO_MODE_OUTPUT_OD, self_p->scl_pin.GPIOx, self_p->scl_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6819      	ldr	r1, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	799a      	ldrb	r2, [r3, #6]
 8008308:	2300      	movs	r3, #0
 800830a:	2011      	movs	r0, #17
 800830c:	f001 fc91 	bl	8009c32 <gpio_setPinMode2>
    return soft_i2c_RETURN_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <write_byte>:

static int write_byte(soft_i2c_Config *self_p, uint8_t byte){
 800831a:	b580      	push	{r7, lr}
 800831c:	b086      	sub	sp, #24
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	460b      	mov	r3, r1
 8008324:	70fb      	strb	r3, [r7, #3]
    uint8_t data;
    int status = soft_i2c_RETURN_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 8; i++) {
 800832a:	2300      	movs	r3, #0
 800832c:	617b      	str	r3, [r7, #20]
 800832e:	e014      	b.n	800835a <write_byte+0x40>
    	status = write_bit(self_p, (byte & 0x80) != 0);
 8008330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008334:	b2db      	uxtb	r3, r3
 8008336:	09db      	lsrs	r3, r3, #7
 8008338:	b2db      	uxtb	r3, r3
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f7ff ff66 	bl	800820e <write_bit>
 8008342:	6138      	str	r0, [r7, #16]
        if (status != soft_i2c_RETURN_OK) return status;
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <write_byte+0x34>
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	e01b      	b.n	8008386 <write_byte+0x6c>
        byte <<= 1;
 800834e:	78fb      	ldrb	r3, [r7, #3]
 8008350:	005b      	lsls	r3, r3, #1
 8008352:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 8; i++) {
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	3301      	adds	r3, #1
 8008358:	617b      	str	r3, [r7, #20]
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	2b07      	cmp	r3, #7
 800835e:	dde7      	ble.n	8008330 <write_byte+0x16>
    }
    status = read_bit(self_p, &data);
 8008360:	f107 030f 	add.w	r3, r7, #15
 8008364:	4619      	mov	r1, r3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7ff ff94 	bl	8008294 <read_bit>
 800836c:	6138      	str	r0, [r7, #16]
    if (status != soft_i2c_RETURN_OK) return status;
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <write_byte+0x5e>
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	e006      	b.n	8008386 <write_byte+0x6c>
    if(data == 0) return soft_i2c_RETURN_OK;
 8008378:	7bfb      	ldrb	r3, [r7, #15]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <write_byte+0x68>
 800837e:	2300      	movs	r3, #0
 8008380:	e001      	b.n	8008386 <write_byte+0x6c>
    else return soft_i2c_RETURN_NACK;
 8008382:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008386:	4618      	mov	r0, r3
 8008388:	3718      	adds	r7, #24
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <read_byte>:

static int read_byte(soft_i2c_Config *self_p, uint8_t *byte_p, int ack){
 800838e:	b580      	push	{r7, lr}
 8008390:	b088      	sub	sp, #32
 8008392:	af00      	add	r7, sp, #0
 8008394:	60f8      	str	r0, [r7, #12]
 8008396:	60b9      	str	r1, [r7, #8]
 8008398:	607a      	str	r2, [r7, #4]
    uint8_t bit = 0;
 800839a:	2300      	movs	r3, #0
 800839c:	75fb      	strb	r3, [r7, #23]
    *byte_p = 0;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2200      	movs	r2, #0
 80083a2:	701a      	strb	r2, [r3, #0]
    int status = soft_i2c_RETURN_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < 8; i++) {
 80083a8:	2300      	movs	r3, #0
 80083aa:	61fb      	str	r3, [r7, #28]
 80083ac:	e019      	b.n	80083e2 <read_byte+0x54>
    	status = read_bit(self_p, &bit);
 80083ae:	f107 0317 	add.w	r3, r7, #23
 80083b2:	4619      	mov	r1, r3
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f7ff ff6d 	bl	8008294 <read_bit>
 80083ba:	61b8      	str	r0, [r7, #24]
        if (status != 0) return status;
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <read_byte+0x38>
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	e021      	b.n	800840a <read_byte+0x7c>
        *byte_p = ((*byte_p << 1 ) | bit);
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	b25a      	sxtb	r2, r3
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
 80083d0:	b25b      	sxtb	r3, r3
 80083d2:	4313      	orrs	r3, r2
 80083d4:	b25b      	sxtb	r3, r3
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	3301      	adds	r3, #1
 80083e0:	61fb      	str	r3, [r7, #28]
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	2b07      	cmp	r3, #7
 80083e6:	dde2      	ble.n	80083ae <read_byte+0x20>
    }
    /* Acknowledge that the byte was successfully received. */
    status = write_bit(self_p, !ack);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	bf0c      	ite	eq
 80083ee:	2301      	moveq	r3, #1
 80083f0:	2300      	movne	r3, #0
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	4619      	mov	r1, r3
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f7ff ff09 	bl	800820e <write_bit>
 80083fc:	61b8      	str	r0, [r7, #24]
    if (status != soft_i2c_RETURN_OK) return status;
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <read_byte+0x7a>
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	e000      	b.n	800840a <read_byte+0x7c>
    return soft_i2c_RETURN_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3720      	adds	r7, #32
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b084      	sub	sp, #16
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	460b      	mov	r3, r1
 800841c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	7c1b      	ldrb	r3, [r3, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d115      	bne.n	8008456 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800842a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800842e:	2202      	movs	r2, #2
 8008430:	2181      	movs	r1, #129	; 0x81
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f002 fe84 	bl	800b140 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800843e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008442:	2202      	movs	r2, #2
 8008444:	2101      	movs	r1, #1
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f002 fe7a 	bl	800b140 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8008454:	e012      	b.n	800847c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008456:	2340      	movs	r3, #64	; 0x40
 8008458:	2202      	movs	r2, #2
 800845a:	2181      	movs	r1, #129	; 0x81
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f002 fe6f 	bl	800b140 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008468:	2340      	movs	r3, #64	; 0x40
 800846a:	2202      	movs	r2, #2
 800846c:	2101      	movs	r1, #1
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f002 fe66 	bl	800b140 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800847c:	2308      	movs	r3, #8
 800847e:	2203      	movs	r2, #3
 8008480:	2182      	movs	r1, #130	; 0x82
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f002 fe5c 	bl	800b140 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800848e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008492:	f003 f84f 	bl	800b534 <USBD_static_malloc>
 8008496:	4602      	mov	r2, r0
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d102      	bne.n	80084ae <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80084a8:	2301      	movs	r3, #1
 80084aa:	73fb      	strb	r3, [r7, #15]
 80084ac:	e026      	b.n	80084fc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80084b4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	7c1b      	ldrb	r3, [r3, #16]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d109      	bne.n	80084ec <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084e2:	2101      	movs	r1, #1
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f002 ffa1 	bl	800b42c <USBD_LL_PrepareReceive>
 80084ea:	e007      	b.n	80084fc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084f2:	2340      	movs	r3, #64	; 0x40
 80084f4:	2101      	movs	r1, #1
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f002 ff98 	bl	800b42c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b084      	sub	sp, #16
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	460b      	mov	r3, r1
 8008510:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008516:	2181      	movs	r1, #129	; 0x81
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f002 fe4f 	bl	800b1bc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008524:	2101      	movs	r1, #1
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f002 fe48 	bl	800b1bc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008534:	2182      	movs	r1, #130	; 0x82
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f002 fe40 	bl	800b1bc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00e      	beq.n	800856a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800855c:	4618      	mov	r0, r3
 800855e:	f002 fff7 	bl	800b550 <USBD_static_free>
    pdev->pClassData = NULL;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800856a:	7bfb      	ldrb	r3, [r7, #15]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008584:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008586:	2300      	movs	r3, #0
 8008588:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800858a:	2300      	movs	r3, #0
 800858c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800859a:	2b00      	cmp	r3, #0
 800859c:	d039      	beq.n	8008612 <USBD_CDC_Setup+0x9e>
 800859e:	2b20      	cmp	r3, #32
 80085a0:	d17c      	bne.n	800869c <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	88db      	ldrh	r3, [r3, #6]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d029      	beq.n	80085fe <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	b25b      	sxtb	r3, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	da11      	bge.n	80085d8 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80085c0:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	88d2      	ldrh	r2, [r2, #6]
 80085c6:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80085c8:	6939      	ldr	r1, [r7, #16]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	88db      	ldrh	r3, [r3, #6]
 80085ce:	461a      	mov	r2, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 f975 	bl	80098c0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80085d6:	e068      	b.n	80086aa <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	785a      	ldrb	r2, [r3, #1]
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	88db      	ldrh	r3, [r3, #6]
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80085ee:	6939      	ldr	r1, [r7, #16]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	88db      	ldrh	r3, [r3, #6]
 80085f4:	461a      	mov	r2, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f001 f990 	bl	800991c <USBD_CtlPrepareRx>
    break;
 80085fc:	e055      	b.n	80086aa <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	7850      	ldrb	r0, [r2, #1]
 800860a:	2200      	movs	r2, #0
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	4798      	blx	r3
    break;
 8008610:	e04b      	b.n	80086aa <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	785b      	ldrb	r3, [r3, #1]
 8008616:	2b0a      	cmp	r3, #10
 8008618:	d017      	beq.n	800864a <USBD_CDC_Setup+0xd6>
 800861a:	2b0b      	cmp	r3, #11
 800861c:	d029      	beq.n	8008672 <USBD_CDC_Setup+0xfe>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d133      	bne.n	800868a <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008628:	2b03      	cmp	r3, #3
 800862a:	d107      	bne.n	800863c <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800862c:	f107 030c 	add.w	r3, r7, #12
 8008630:	2202      	movs	r2, #2
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f001 f943 	bl	80098c0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800863a:	e02e      	b.n	800869a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f001 f8d3 	bl	80097ea <USBD_CtlError>
			  ret = USBD_FAIL;
 8008644:	2302      	movs	r3, #2
 8008646:	75fb      	strb	r3, [r7, #23]
      break;
 8008648:	e027      	b.n	800869a <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008650:	2b03      	cmp	r3, #3
 8008652:	d107      	bne.n	8008664 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8008654:	f107 030f 	add.w	r3, r7, #15
 8008658:	2201      	movs	r2, #1
 800865a:	4619      	mov	r1, r3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 f92f 	bl	80098c0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008662:	e01a      	b.n	800869a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f001 f8bf 	bl	80097ea <USBD_CtlError>
			  ret = USBD_FAIL;
 800866c:	2302      	movs	r3, #2
 800866e:	75fb      	strb	r3, [r7, #23]
      break;
 8008670:	e013      	b.n	800869a <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008678:	2b03      	cmp	r3, #3
 800867a:	d00d      	beq.n	8008698 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 f8b3 	bl	80097ea <USBD_CtlError>
			  ret = USBD_FAIL;
 8008684:	2302      	movs	r3, #2
 8008686:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008688:	e006      	b.n	8008698 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f001 f8ac 	bl	80097ea <USBD_CtlError>
      ret = USBD_FAIL;
 8008692:	2302      	movs	r3, #2
 8008694:	75fb      	strb	r3, [r7, #23]
      break;
 8008696:	e000      	b.n	800869a <USBD_CDC_Setup+0x126>
      break;
 8008698:	bf00      	nop
    }
    break;
 800869a:	e006      	b.n	80086aa <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800869c:	6839      	ldr	r1, [r7, #0]
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f001 f8a3 	bl	80097ea <USBD_CtlError>
    ret = USBD_FAIL;
 80086a4:	2302      	movs	r3, #2
 80086a6:	75fb      	strb	r3, [r7, #23]
    break;
 80086a8:	bf00      	nop
  }

  return ret;
 80086aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3718      	adds	r7, #24
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	460b      	mov	r3, r1
 80086be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086c6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80086ce:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d037      	beq.n	800874a <USBD_CDC_DataIn+0x96>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80086da:	78fa      	ldrb	r2, [r7, #3]
 80086dc:	6879      	ldr	r1, [r7, #4]
 80086de:	4613      	mov	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	440b      	add	r3, r1
 80086e8:	331c      	adds	r3, #28
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d026      	beq.n	800873e <USBD_CDC_DataIn+0x8a>
 80086f0:	78fa      	ldrb	r2, [r7, #3]
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	4613      	mov	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	440b      	add	r3, r1
 80086fe:	331c      	adds	r3, #28
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	78fa      	ldrb	r2, [r7, #3]
 8008704:	68b9      	ldr	r1, [r7, #8]
 8008706:	0152      	lsls	r2, r2, #5
 8008708:	440a      	add	r2, r1
 800870a:	3238      	adds	r2, #56	; 0x38
 800870c:	6812      	ldr	r2, [r2, #0]
 800870e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008712:	fb02 f201 	mul.w	r2, r2, r1
 8008716:	1a9b      	subs	r3, r3, r2
 8008718:	2b00      	cmp	r3, #0
 800871a:	d110      	bne.n	800873e <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800871c:	78fa      	ldrb	r2, [r7, #3]
 800871e:	6879      	ldr	r1, [r7, #4]
 8008720:	4613      	mov	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	440b      	add	r3, r1
 800872a:	331c      	adds	r3, #28
 800872c:	2200      	movs	r2, #0
 800872e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8008730:	78f9      	ldrb	r1, [r7, #3]
 8008732:	2300      	movs	r3, #0
 8008734:	2200      	movs	r2, #0
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f002 fe3e 	bl	800b3b8 <USBD_LL_Transmit>
 800873c:	e003      	b.n	8008746 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	e000      	b.n	800874c <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 800874a:	2302      	movs	r3, #2
  }
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008766:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8008768:	78fb      	ldrb	r3, [r7, #3]
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f002 fe97 	bl	800b4a0 <USBD_LL_GetRxDataSize>
 8008772:	4602      	mov	r2, r0
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00d      	beq.n	80087a0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008798:	4611      	mov	r1, r2
 800879a:	4798      	blx	r3

    return USBD_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	e000      	b.n	80087a2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80087a0:	2302      	movs	r3, #2
  }
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b084      	sub	sp, #16
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80087b8:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d015      	beq.n	80087f0 <USBD_CDC_EP0_RxReady+0x46>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80087ca:	2bff      	cmp	r3, #255	; 0xff
 80087cc:	d010      	beq.n	80087f0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80087dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80087e4:	b292      	uxth	r2, r2
 80087e6:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	22ff      	movs	r2, #255	; 0xff
 80087ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2243      	movs	r2, #67	; 0x43
 8008808:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800880a:	4b03      	ldr	r3, [pc, #12]	; (8008818 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800880c:	4618      	mov	r0, r3
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	2000050c 	.word	0x2000050c

0800881c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2243      	movs	r2, #67	; 0x43
 8008828:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800882a:	4b03      	ldr	r3, [pc, #12]	; (8008838 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	200004c8 	.word	0x200004c8

0800883c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2243      	movs	r2, #67	; 0x43
 8008848:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800884a:	4b03      	ldr	r3, [pc, #12]	; (8008858 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800884c:	4618      	mov	r0, r3
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr
 8008858:	20000550 	.word	0x20000550

0800885c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	220a      	movs	r2, #10
 8008868:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800886a:	4b03      	ldr	r3, [pc, #12]	; (8008878 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800886c:	4618      	mov	r0, r3
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	20000484 	.word	0x20000484

0800887c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008886:	2302      	movs	r3, #2
 8008888:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d005      	beq.n	800889c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800889c:	7bfb      	ldrb	r3, [r7, #15]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b087      	sub	sp, #28
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	60f8      	str	r0, [r7, #12]
 80088b2:	60b9      	str	r1, [r7, #8]
 80088b4:	4613      	mov	r3, r2
 80088b6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80088be:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80088c8:	88fa      	ldrh	r2, [r7, #6]
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	371c      	adds	r7, #28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80088de:	b480      	push	{r7}
 80088e0:	b085      	sub	sp, #20
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
 80088e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80088ee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b084      	sub	sp, #16
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008914:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800891c:	2b00      	cmp	r3, #0
 800891e:	d017      	beq.n	8008950 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	7c1b      	ldrb	r3, [r3, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d109      	bne.n	800893c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800892e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008932:	2101      	movs	r1, #1
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f002 fd79 	bl	800b42c <USBD_LL_PrepareReceive>
 800893a:	e007      	b.n	800894c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008942:	2340      	movs	r3, #64	; 0x40
 8008944:	2101      	movs	r1, #1
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f002 fd70 	bl	800b42c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	e000      	b.n	8008952 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008950:	2302      	movs	r3, #2
  }
}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b084      	sub	sp, #16
 800895e:	af00      	add	r7, sp, #0
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	4613      	mov	r3, r2
 8008966:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800896e:	2302      	movs	r3, #2
 8008970:	e01a      	b.n	80089a8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d003      	beq.n	8008992 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	79fa      	ldrb	r2, [r7, #7]
 800899e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f002 fb37 	bl	800b014 <USBD_LL_Init>

  return USBD_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d006      	beq.n	80089d2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	683a      	ldr	r2, [r7, #0]
 80089c8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]
 80089d0:	e001      	b.n	80089d6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80089d2:	2302      	movs	r3, #2
 80089d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f002 fb75 	bl	800b0dc <USBD_LL_Start>

  return USBD_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b084      	sub	sp, #16
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008a1e:	2302      	movs	r3, #2
 8008a20:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00c      	beq.n	8008a46 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	78fa      	ldrb	r2, [r7, #3]
 8008a36:	4611      	mov	r1, r2
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	4798      	blx	r3
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	78fa      	ldrb	r2, [r7, #3]
 8008a66:	4611      	mov	r1, r2
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	4798      	blx	r3
  return USBD_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b082      	sub	sp, #8
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f000 fe71 	bl	8009770 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008aaa:	f003 031f 	and.w	r3, r3, #31
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d00c      	beq.n	8008acc <USBD_LL_SetupStage+0x56>
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d302      	bcc.n	8008abc <USBD_LL_SetupStage+0x46>
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d010      	beq.n	8008adc <USBD_LL_SetupStage+0x66>
 8008aba:	e017      	b.n	8008aec <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f9c5 	bl	8008e54 <USBD_StdDevReq>
    break;
 8008aca:	e01a      	b.n	8008b02 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fa27 	bl	8008f28 <USBD_StdItfReq>
    break;
 8008ada:	e012      	b.n	8008b02 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fa65 	bl	8008fb4 <USBD_StdEPReq>
    break;
 8008aea:	e00a      	b.n	8008b02 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008af2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f002 fb94 	bl	800b228 <USBD_LL_StallEP>
    break;
 8008b00:	bf00      	nop
  }

  return USBD_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	460b      	mov	r3, r1
 8008b16:	607a      	str	r2, [r7, #4]
 8008b18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008b1a:	7afb      	ldrb	r3, [r7, #11]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d147      	bne.n	8008bb0 <USBD_LL_DataOutStage+0xa4>
  {
    pep = &pdev->ep_out[0];
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008b26:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d134      	bne.n	8008b9c <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	68da      	ldr	r2, [r3, #12]
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d919      	bls.n	8008b72 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	68da      	ldr	r2, [r3, #12]
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	1ad2      	subs	r2, r2, r3
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	68da      	ldr	r2, [r3, #12]
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d203      	bcs.n	8008b60 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	e002      	b.n	8008b66 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	461a      	mov	r2, r3
 8008b68:	6879      	ldr	r1, [r7, #4]
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f000 fef4 	bl	8009958 <USBD_CtlContinueRx>
 8008b70:	e034      	b.n	8008bdc <USBD_LL_DataOutStage+0xd0>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00a      	beq.n	8008b94 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008b84:	2b03      	cmp	r3, #3
 8008b86:	d105      	bne.n	8008b94 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f000 fef1 	bl	800997c <USBD_CtlSendStatus>
 8008b9a:	e01f      	b.n	8008bdc <USBD_LL_DataOutStage+0xd0>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008ba2:	2b05      	cmp	r3, #5
 8008ba4:	d11a      	bne.n	8008bdc <USBD_LL_DataOutStage+0xd0>
      {
        USBD_LL_StallEP(pdev, 0U);
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f002 fb3d 	bl	800b228 <USBD_LL_StallEP>
 8008bae:	e015      	b.n	8008bdc <USBD_LL_DataOutStage+0xd0>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00d      	beq.n	8008bd8 <USBD_LL_DataOutStage+0xcc>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	d108      	bne.n	8008bd8 <USBD_LL_DataOutStage+0xcc>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	7afa      	ldrb	r2, [r7, #11]
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	4798      	blx	r3
 8008bd6:	e001      	b.n	8008bdc <USBD_LL_DataOutStage+0xd0>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008bd8:	2302      	movs	r3, #2
 8008bda:	e000      	b.n	8008bde <USBD_LL_DataOutStage+0xd2>
  }

  return USBD_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3718      	adds	r7, #24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b086      	sub	sp, #24
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	60f8      	str	r0, [r7, #12]
 8008bee:	460b      	mov	r3, r1
 8008bf0:	607a      	str	r2, [r7, #4]
 8008bf2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008bf4:	7afb      	ldrb	r3, [r7, #11]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d17f      	bne.n	8008cfa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	3314      	adds	r3, #20
 8008bfe:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d15c      	bne.n	8008cc4 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	68da      	ldr	r2, [r3, #12]
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d915      	bls.n	8008c42 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	68da      	ldr	r2, [r3, #12]
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	1ad2      	subs	r2, r2, r3
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	6879      	ldr	r1, [r7, #4]
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f000 fe62 	bl	80098f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008c34:	2300      	movs	r3, #0
 8008c36:	2200      	movs	r2, #0
 8008c38:	2100      	movs	r1, #0
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f002 fbf6 	bl	800b42c <USBD_LL_PrepareReceive>
 8008c40:	e04e      	b.n	8008ce0 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	6912      	ldr	r2, [r2, #16]
 8008c4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c4e:	fb02 f201 	mul.w	r2, r2, r1
 8008c52:	1a9b      	subs	r3, r3, r2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d11c      	bne.n	8008c92 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d316      	bcc.n	8008c92 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	689a      	ldr	r2, [r3, #8]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d20f      	bcs.n	8008c92 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c72:	2200      	movs	r2, #0
 8008c74:	2100      	movs	r1, #0
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f000 fe3e 	bl	80098f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008c84:	2300      	movs	r3, #0
 8008c86:	2200      	movs	r2, #0
 8008c88:	2100      	movs	r1, #0
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f002 fbce 	bl	800b42c <USBD_LL_PrepareReceive>
 8008c90:	e026      	b.n	8008ce0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00a      	beq.n	8008cb4 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008ca4:	2b03      	cmp	r3, #3
 8008ca6:	d105      	bne.n	8008cb4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008cb4:	2180      	movs	r1, #128	; 0x80
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f002 fab6 	bl	800b228 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 fe70 	bl	80099a2 <USBD_CtlReceiveStatus>
 8008cc2:	e00d      	b.n	8008ce0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008cca:	2b04      	cmp	r3, #4
 8008ccc:	d004      	beq.n	8008cd8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d103      	bne.n	8008ce0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008cd8:	2180      	movs	r1, #128	; 0x80
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f002 faa4 	bl	800b228 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d11d      	bne.n	8008d26 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f7ff fe86 	bl	80089fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008cf8:	e015      	b.n	8008d26 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00d      	beq.n	8008d22 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008d0c:	2b03      	cmp	r3, #3
 8008d0e:	d108      	bne.n	8008d22 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d16:	695b      	ldr	r3, [r3, #20]
 8008d18:	7afa      	ldrb	r2, [r7, #11]
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	4798      	blx	r3
 8008d20:	e001      	b.n	8008d26 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d22:	2302      	movs	r3, #2
 8008d24:	e000      	b.n	8008d28 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3718      	adds	r7, #24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d38:	2340      	movs	r3, #64	; 0x40
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f002 f9fe 	bl	800b140 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2240      	movs	r2, #64	; 0x40
 8008d50:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d54:	2340      	movs	r3, #64	; 0x40
 8008d56:	2200      	movs	r2, #0
 8008d58:	2180      	movs	r1, #128	; 0x80
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f002 f9f0 	bl	800b140 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2240      	movs	r2, #64	; 0x40
 8008d6a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d009      	beq.n	8008da8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	6852      	ldr	r2, [r2, #4]
 8008da0:	b2d2      	uxtb	r2, r2
 8008da2:	4611      	mov	r1, r2
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	4798      	blx	r3
  }

  return USBD_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b083      	sub	sp, #12
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	460b      	mov	r3, r1
 8008dbc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	78fa      	ldrb	r2, [r7, #3]
 8008dc2:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b083      	sub	sp, #12
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2204      	movs	r2, #4
 8008dea:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b082      	sub	sp, #8
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008e2c:	2b03      	cmp	r3, #3
 8008e2e:	d10b      	bne.n	8008e48 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d005      	beq.n	8008e48 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
	...

08008e54 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e6a:	2b20      	cmp	r3, #32
 8008e6c:	d004      	beq.n	8008e78 <USBD_StdDevReq+0x24>
 8008e6e:	2b40      	cmp	r3, #64	; 0x40
 8008e70:	d002      	beq.n	8008e78 <USBD_StdDevReq+0x24>
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d008      	beq.n	8008e88 <USBD_StdDevReq+0x34>
 8008e76:	e04c      	b.n	8008f12 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	4798      	blx	r3
    break;
 8008e86:	e049      	b.n	8008f1c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	785b      	ldrb	r3, [r3, #1]
 8008e8c:	2b09      	cmp	r3, #9
 8008e8e:	d83a      	bhi.n	8008f06 <USBD_StdDevReq+0xb2>
 8008e90:	a201      	add	r2, pc, #4	; (adr r2, 8008e98 <USBD_StdDevReq+0x44>)
 8008e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e96:	bf00      	nop
 8008e98:	08008ee9 	.word	0x08008ee9
 8008e9c:	08008efd 	.word	0x08008efd
 8008ea0:	08008f07 	.word	0x08008f07
 8008ea4:	08008ef3 	.word	0x08008ef3
 8008ea8:	08008f07 	.word	0x08008f07
 8008eac:	08008ecb 	.word	0x08008ecb
 8008eb0:	08008ec1 	.word	0x08008ec1
 8008eb4:	08008f07 	.word	0x08008f07
 8008eb8:	08008edf 	.word	0x08008edf
 8008ebc:	08008ed5 	.word	0x08008ed5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f9d2 	bl	800926c <USBD_GetDescriptor>
      break;
 8008ec8:	e022      	b.n	8008f10 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fae3 	bl	8009498 <USBD_SetAddress>
      break;
 8008ed2:	e01d      	b.n	8008f10 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fb20 	bl	800951c <USBD_SetConfig>
      break;
 8008edc:	e018      	b.n	8008f10 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8008ede:	6839      	ldr	r1, [r7, #0]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fba9 	bl	8009638 <USBD_GetConfig>
      break;
 8008ee6:	e013      	b.n	8008f10 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fbd8 	bl	80096a0 <USBD_GetStatus>
      break;
 8008ef0:	e00e      	b.n	8008f10 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fc06 	bl	8009706 <USBD_SetFeature>
      break;
 8008efa:	e009      	b.n	8008f10 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fc15 	bl	800972e <USBD_ClrFeature>
      break;
 8008f04:	e004      	b.n	8008f10 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fc6e 	bl	80097ea <USBD_CtlError>
      break;
 8008f0e:	bf00      	nop
    }
    break;
 8008f10:	e004      	b.n	8008f1c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fc68 	bl	80097ea <USBD_CtlError>
    break;
 8008f1a:	bf00      	nop
  }

  return ret;
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop

08008f28 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f3e:	2b20      	cmp	r3, #32
 8008f40:	d003      	beq.n	8008f4a <USBD_StdItfReq+0x22>
 8008f42:	2b40      	cmp	r3, #64	; 0x40
 8008f44:	d001      	beq.n	8008f4a <USBD_StdItfReq+0x22>
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d12a      	bne.n	8008fa0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008f50:	3b01      	subs	r3, #1
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d81d      	bhi.n	8008f92 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	889b      	ldrh	r3, [r3, #4]
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d813      	bhi.n	8008f88 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	4798      	blx	r3
 8008f6e:	4603      	mov	r3, r0
 8008f70:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	88db      	ldrh	r3, [r3, #6]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d110      	bne.n	8008f9c <USBD_StdItfReq+0x74>
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10d      	bne.n	8008f9c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fcfb 	bl	800997c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008f86:	e009      	b.n	8008f9c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fc2d 	bl	80097ea <USBD_CtlError>
      break;
 8008f90:	e004      	b.n	8008f9c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fc28 	bl	80097ea <USBD_CtlError>
      break;
 8008f9a:	e000      	b.n	8008f9e <USBD_StdItfReq+0x76>
      break;
 8008f9c:	bf00      	nop
    }
    break;
 8008f9e:	e004      	b.n	8008faa <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008fa0:	6839      	ldr	r1, [r7, #0]
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fc21 	bl	80097ea <USBD_CtlError>
    break;
 8008fa8:	bf00      	nop
  }

  return USBD_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	889b      	ldrh	r3, [r3, #4]
 8008fc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fd0:	2b20      	cmp	r3, #32
 8008fd2:	d004      	beq.n	8008fde <USBD_StdEPReq+0x2a>
 8008fd4:	2b40      	cmp	r3, #64	; 0x40
 8008fd6:	d002      	beq.n	8008fde <USBD_StdEPReq+0x2a>
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d008      	beq.n	8008fee <USBD_StdEPReq+0x3a>
 8008fdc:	e13b      	b.n	8009256 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	6839      	ldr	r1, [r7, #0]
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	4798      	blx	r3
    break;
 8008fec:	e138      	b.n	8009260 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ff6:	2b20      	cmp	r3, #32
 8008ff8:	d10a      	bne.n	8009010 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	6839      	ldr	r1, [r7, #0]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	4798      	blx	r3
 8009008:	4603      	mov	r3, r0
 800900a:	73fb      	strb	r3, [r7, #15]

      return ret;
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	e128      	b.n	8009262 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	785b      	ldrb	r3, [r3, #1]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d03e      	beq.n	8009096 <USBD_StdEPReq+0xe2>
 8009018:	2b03      	cmp	r3, #3
 800901a:	d002      	beq.n	8009022 <USBD_StdEPReq+0x6e>
 800901c:	2b00      	cmp	r3, #0
 800901e:	d070      	beq.n	8009102 <USBD_StdEPReq+0x14e>
 8009020:	e113      	b.n	800924a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009028:	2b02      	cmp	r3, #2
 800902a:	d002      	beq.n	8009032 <USBD_StdEPReq+0x7e>
 800902c:	2b03      	cmp	r3, #3
 800902e:	d015      	beq.n	800905c <USBD_StdEPReq+0xa8>
 8009030:	e02b      	b.n	800908a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009032:	7bbb      	ldrb	r3, [r7, #14]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00c      	beq.n	8009052 <USBD_StdEPReq+0x9e>
 8009038:	7bbb      	ldrb	r3, [r7, #14]
 800903a:	2b80      	cmp	r3, #128	; 0x80
 800903c:	d009      	beq.n	8009052 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800903e:	7bbb      	ldrb	r3, [r7, #14]
 8009040:	4619      	mov	r1, r3
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f002 f8f0 	bl	800b228 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009048:	2180      	movs	r1, #128	; 0x80
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f002 f8ec 	bl	800b228 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009050:	e020      	b.n	8009094 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fbc8 	bl	80097ea <USBD_CtlError>
        break;
 800905a:	e01b      	b.n	8009094 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	885b      	ldrh	r3, [r3, #2]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d10e      	bne.n	8009082 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00b      	beq.n	8009082 <USBD_StdEPReq+0xce>
 800906a:	7bbb      	ldrb	r3, [r7, #14]
 800906c:	2b80      	cmp	r3, #128	; 0x80
 800906e:	d008      	beq.n	8009082 <USBD_StdEPReq+0xce>
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	88db      	ldrh	r3, [r3, #6]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d104      	bne.n	8009082 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8009078:	7bbb      	ldrb	r3, [r7, #14]
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f002 f8d3 	bl	800b228 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fc7a 	bl	800997c <USBD_CtlSendStatus>

        break;
 8009088:	e004      	b.n	8009094 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fbac 	bl	80097ea <USBD_CtlError>
        break;
 8009092:	bf00      	nop
      }
      break;
 8009094:	e0de      	b.n	8009254 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800909c:	2b02      	cmp	r3, #2
 800909e:	d002      	beq.n	80090a6 <USBD_StdEPReq+0xf2>
 80090a0:	2b03      	cmp	r3, #3
 80090a2:	d015      	beq.n	80090d0 <USBD_StdEPReq+0x11c>
 80090a4:	e026      	b.n	80090f4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090a6:	7bbb      	ldrb	r3, [r7, #14]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00c      	beq.n	80090c6 <USBD_StdEPReq+0x112>
 80090ac:	7bbb      	ldrb	r3, [r7, #14]
 80090ae:	2b80      	cmp	r3, #128	; 0x80
 80090b0:	d009      	beq.n	80090c6 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f002 f8b6 	bl	800b228 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80090bc:	2180      	movs	r1, #128	; 0x80
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f002 f8b2 	bl	800b228 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80090c4:	e01c      	b.n	8009100 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fb8e 	bl	80097ea <USBD_CtlError>
        break;
 80090ce:	e017      	b.n	8009100 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	885b      	ldrh	r3, [r3, #2]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d112      	bne.n	80090fe <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d004      	beq.n	80090ec <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f002 f8d4 	bl	800b294 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 fc45 	bl	800997c <USBD_CtlSendStatus>
        }
        break;
 80090f2:	e004      	b.n	80090fe <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80090f4:	6839      	ldr	r1, [r7, #0]
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fb77 	bl	80097ea <USBD_CtlError>
        break;
 80090fc:	e000      	b.n	8009100 <USBD_StdEPReq+0x14c>
        break;
 80090fe:	bf00      	nop
      }
      break;
 8009100:	e0a8      	b.n	8009254 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009108:	2b02      	cmp	r3, #2
 800910a:	d002      	beq.n	8009112 <USBD_StdEPReq+0x15e>
 800910c:	2b03      	cmp	r3, #3
 800910e:	d031      	beq.n	8009174 <USBD_StdEPReq+0x1c0>
 8009110:	e095      	b.n	800923e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009112:	7bbb      	ldrb	r3, [r7, #14]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d007      	beq.n	8009128 <USBD_StdEPReq+0x174>
 8009118:	7bbb      	ldrb	r3, [r7, #14]
 800911a:	2b80      	cmp	r3, #128	; 0x80
 800911c:	d004      	beq.n	8009128 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fb62 	bl	80097ea <USBD_CtlError>
          break;
 8009126:	e08f      	b.n	8009248 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009128:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800912c:	2b00      	cmp	r3, #0
 800912e:	da0b      	bge.n	8009148 <USBD_StdEPReq+0x194>
 8009130:	7bbb      	ldrb	r3, [r7, #14]
 8009132:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009136:	4613      	mov	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	3310      	adds	r3, #16
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	4413      	add	r3, r2
 8009144:	3304      	adds	r3, #4
 8009146:	e00a      	b.n	800915e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009148:	7bbb      	ldrb	r3, [r7, #14]
 800914a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800914e:	4613      	mov	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	4413      	add	r3, r2
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	4413      	add	r3, r2
 800915e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	2200      	movs	r2, #0
 8009164:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	2202      	movs	r2, #2
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fba7 	bl	80098c0 <USBD_CtlSendData>
          break;
 8009172:	e069      	b.n	8009248 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8009174:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009178:	2b00      	cmp	r3, #0
 800917a:	da11      	bge.n	80091a0 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800917c:	7bbb      	ldrb	r3, [r7, #14]
 800917e:	f003 020f 	and.w	r2, r3, #15
 8009182:	6879      	ldr	r1, [r7, #4]
 8009184:	4613      	mov	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	440b      	add	r3, r1
 800918e:	3318      	adds	r3, #24
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d117      	bne.n	80091c6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fb26 	bl	80097ea <USBD_CtlError>
            break;
 800919e:	e053      	b.n	8009248 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091a0:	7bbb      	ldrb	r3, [r7, #14]
 80091a2:	f003 020f 	and.w	r2, r3, #15
 80091a6:	6879      	ldr	r1, [r7, #4]
 80091a8:	4613      	mov	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4413      	add	r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	440b      	add	r3, r1
 80091b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d104      	bne.n	80091c6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fb13 	bl	80097ea <USBD_CtlError>
            break;
 80091c4:	e040      	b.n	8009248 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80091c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	da0b      	bge.n	80091e6 <USBD_StdEPReq+0x232>
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091d4:	4613      	mov	r3, r2
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4413      	add	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	3310      	adds	r3, #16
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	4413      	add	r3, r2
 80091e2:	3304      	adds	r3, #4
 80091e4:	e00a      	b.n	80091fc <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80091e6:	7bbb      	ldrb	r3, [r7, #14]
 80091e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80091ec:	4613      	mov	r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	4413      	add	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	4413      	add	r3, r2
 80091fc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80091fe:	7bbb      	ldrb	r3, [r7, #14]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d002      	beq.n	800920a <USBD_StdEPReq+0x256>
 8009204:	7bbb      	ldrb	r3, [r7, #14]
 8009206:	2b80      	cmp	r3, #128	; 0x80
 8009208:	d103      	bne.n	8009212 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	2200      	movs	r2, #0
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	e00e      	b.n	8009230 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009212:	7bbb      	ldrb	r3, [r7, #14]
 8009214:	4619      	mov	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f002 f872 	bl	800b300 <USBD_LL_IsStallEP>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	2201      	movs	r2, #1
 8009226:	601a      	str	r2, [r3, #0]
 8009228:	e002      	b.n	8009230 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2200      	movs	r2, #0
 800922e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2202      	movs	r2, #2
 8009234:	4619      	mov	r1, r3
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fb42 	bl	80098c0 <USBD_CtlSendData>
          break;
 800923c:	e004      	b.n	8009248 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800923e:	6839      	ldr	r1, [r7, #0]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fad2 	bl	80097ea <USBD_CtlError>
        break;
 8009246:	bf00      	nop
      }
      break;
 8009248:	e004      	b.n	8009254 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 facc 	bl	80097ea <USBD_CtlError>
      break;
 8009252:	bf00      	nop
    }
    break;
 8009254:	e004      	b.n	8009260 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8009256:	6839      	ldr	r1, [r7, #0]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fac6 	bl	80097ea <USBD_CtlError>
    break;
 800925e:	bf00      	nop
  }

  return ret;
 8009260:	7bfb      	ldrb	r3, [r7, #15]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
	...

0800926c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	885b      	ldrh	r3, [r3, #2]
 800927a:	0a1b      	lsrs	r3, r3, #8
 800927c:	b29b      	uxth	r3, r3
 800927e:	3b01      	subs	r3, #1
 8009280:	2b0e      	cmp	r3, #14
 8009282:	f200 80e5 	bhi.w	8009450 <USBD_GetDescriptor+0x1e4>
 8009286:	a201      	add	r2, pc, #4	; (adr r2, 800928c <USBD_GetDescriptor+0x20>)
 8009288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928c:	080092e1 	.word	0x080092e1
 8009290:	080092f9 	.word	0x080092f9
 8009294:	08009339 	.word	0x08009339
 8009298:	08009451 	.word	0x08009451
 800929c:	08009451 	.word	0x08009451
 80092a0:	080093fd 	.word	0x080093fd
 80092a4:	08009423 	.word	0x08009423
 80092a8:	08009451 	.word	0x08009451
 80092ac:	08009451 	.word	0x08009451
 80092b0:	08009451 	.word	0x08009451
 80092b4:	08009451 	.word	0x08009451
 80092b8:	08009451 	.word	0x08009451
 80092bc:	08009451 	.word	0x08009451
 80092c0:	08009451 	.word	0x08009451
 80092c4:	080092c9 	.word	0x080092c9
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80092ce:	69db      	ldr	r3, [r3, #28]
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	7c12      	ldrb	r2, [r2, #16]
 80092d4:	f107 010a 	add.w	r1, r7, #10
 80092d8:	4610      	mov	r0, r2
 80092da:	4798      	blx	r3
 80092dc:	60f8      	str	r0, [r7, #12]
    break;
 80092de:	e0bc      	b.n	800945a <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	7c12      	ldrb	r2, [r2, #16]
 80092ec:	f107 010a 	add.w	r1, r7, #10
 80092f0:	4610      	mov	r0, r2
 80092f2:	4798      	blx	r3
 80092f4:	60f8      	str	r0, [r7, #12]
    break;
 80092f6:	e0b0      	b.n	800945a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	7c1b      	ldrb	r3, [r3, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10d      	bne.n	800931c <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009308:	f107 020a 	add.w	r2, r7, #10
 800930c:	4610      	mov	r0, r2
 800930e:	4798      	blx	r3
 8009310:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3301      	adds	r3, #1
 8009316:	2202      	movs	r2, #2
 8009318:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800931a:	e09e      	b.n	800945a <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009324:	f107 020a 	add.w	r2, r7, #10
 8009328:	4610      	mov	r0, r2
 800932a:	4798      	blx	r3
 800932c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	3301      	adds	r3, #1
 8009332:	2202      	movs	r2, #2
 8009334:	701a      	strb	r2, [r3, #0]
    break;
 8009336:	e090      	b.n	800945a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	885b      	ldrh	r3, [r3, #2]
 800933c:	b2db      	uxtb	r3, r3
 800933e:	2b05      	cmp	r3, #5
 8009340:	d856      	bhi.n	80093f0 <USBD_GetDescriptor+0x184>
 8009342:	a201      	add	r2, pc, #4	; (adr r2, 8009348 <USBD_GetDescriptor+0xdc>)
 8009344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009348:	08009361 	.word	0x08009361
 800934c:	08009379 	.word	0x08009379
 8009350:	08009391 	.word	0x08009391
 8009354:	080093a9 	.word	0x080093a9
 8009358:	080093c1 	.word	0x080093c1
 800935c:	080093d9 	.word	0x080093d9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	7c12      	ldrb	r2, [r2, #16]
 800936c:	f107 010a 	add.w	r1, r7, #10
 8009370:	4610      	mov	r0, r2
 8009372:	4798      	blx	r3
 8009374:	60f8      	str	r0, [r7, #12]
      break;
 8009376:	e040      	b.n	80093fa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	7c12      	ldrb	r2, [r2, #16]
 8009384:	f107 010a 	add.w	r1, r7, #10
 8009388:	4610      	mov	r0, r2
 800938a:	4798      	blx	r3
 800938c:	60f8      	str	r0, [r7, #12]
      break;
 800938e:	e034      	b.n	80093fa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	7c12      	ldrb	r2, [r2, #16]
 800939c:	f107 010a 	add.w	r1, r7, #10
 80093a0:	4610      	mov	r0, r2
 80093a2:	4798      	blx	r3
 80093a4:	60f8      	str	r0, [r7, #12]
      break;
 80093a6:	e028      	b.n	80093fa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	7c12      	ldrb	r2, [r2, #16]
 80093b4:	f107 010a 	add.w	r1, r7, #10
 80093b8:	4610      	mov	r0, r2
 80093ba:	4798      	blx	r3
 80093bc:	60f8      	str	r0, [r7, #12]
      break;
 80093be:	e01c      	b.n	80093fa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	7c12      	ldrb	r2, [r2, #16]
 80093cc:	f107 010a 	add.w	r1, r7, #10
 80093d0:	4610      	mov	r0, r2
 80093d2:	4798      	blx	r3
 80093d4:	60f8      	str	r0, [r7, #12]
      break;
 80093d6:	e010      	b.n	80093fa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	7c12      	ldrb	r2, [r2, #16]
 80093e4:	f107 010a 	add.w	r1, r7, #10
 80093e8:	4610      	mov	r0, r2
 80093ea:	4798      	blx	r3
 80093ec:	60f8      	str	r0, [r7, #12]
      break;
 80093ee:	e004      	b.n	80093fa <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80093f0:	6839      	ldr	r1, [r7, #0]
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f9f9 	bl	80097ea <USBD_CtlError>
      return;
 80093f8:	e04b      	b.n	8009492 <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 80093fa:	e02e      	b.n	800945a <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	7c1b      	ldrb	r3, [r3, #16]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d109      	bne.n	8009418 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800940a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800940c:	f107 020a 	add.w	r2, r7, #10
 8009410:	4610      	mov	r0, r2
 8009412:	4798      	blx	r3
 8009414:	60f8      	str	r0, [r7, #12]
      break;
 8009416:	e020      	b.n	800945a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f9e5 	bl	80097ea <USBD_CtlError>
      return;
 8009420:	e037      	b.n	8009492 <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	7c1b      	ldrb	r3, [r3, #16]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10d      	bne.n	8009446 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009432:	f107 020a 	add.w	r2, r7, #10
 8009436:	4610      	mov	r0, r2
 8009438:	4798      	blx	r3
 800943a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	3301      	adds	r3, #1
 8009440:	2207      	movs	r2, #7
 8009442:	701a      	strb	r2, [r3, #0]
      break;
 8009444:	e009      	b.n	800945a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 f9ce 	bl	80097ea <USBD_CtlError>
      return;
 800944e:	e020      	b.n	8009492 <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f9c9 	bl	80097ea <USBD_CtlError>
    return;
 8009458:	e01b      	b.n	8009492 <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 800945a:	897b      	ldrh	r3, [r7, #10]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d011      	beq.n	8009484 <USBD_GetDescriptor+0x218>
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	88db      	ldrh	r3, [r3, #6]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00d      	beq.n	8009484 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	88da      	ldrh	r2, [r3, #6]
 800946c:	897b      	ldrh	r3, [r7, #10]
 800946e:	4293      	cmp	r3, r2
 8009470:	bf28      	it	cs
 8009472:	4613      	movcs	r3, r2
 8009474:	b29b      	uxth	r3, r3
 8009476:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8009478:	897b      	ldrh	r3, [r7, #10]
 800947a:	461a      	mov	r2, r3
 800947c:	68f9      	ldr	r1, [r7, #12]
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fa1e 	bl	80098c0 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	88db      	ldrh	r3, [r3, #6]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d102      	bne.n	8009492 <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fa75 	bl	800997c <USBD_CtlSendStatus>
  }
}
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	889b      	ldrh	r3, [r3, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d130      	bne.n	800950c <USBD_SetAddress+0x74>
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	88db      	ldrh	r3, [r3, #6]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d12c      	bne.n	800950c <USBD_SetAddress+0x74>
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	885b      	ldrh	r3, [r3, #2]
 80094b6:	2b7f      	cmp	r3, #127	; 0x7f
 80094b8:	d828      	bhi.n	800950c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	885b      	ldrh	r3, [r3, #2]
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80094cc:	2b03      	cmp	r3, #3
 80094ce:	d104      	bne.n	80094da <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f989 	bl	80097ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d8:	e01c      	b.n	8009514 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	7bfa      	ldrb	r2, [r7, #15]
 80094de:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f001 ff30 	bl	800b34c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fa45 	bl	800997c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d004      	beq.n	8009502 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2202      	movs	r2, #2
 80094fc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009500:	e008      	b.n	8009514 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800950a:	e003      	b.n	8009514 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f96b 	bl	80097ea <USBD_CtlError>
  }
}
 8009514:	bf00      	nop
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	885b      	ldrh	r3, [r3, #2]
 800952a:	b2da      	uxtb	r2, r3
 800952c:	4b41      	ldr	r3, [pc, #260]	; (8009634 <USBD_SetConfig+0x118>)
 800952e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009530:	4b40      	ldr	r3, [pc, #256]	; (8009634 <USBD_SetConfig+0x118>)
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d904      	bls.n	8009542 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f955 	bl	80097ea <USBD_CtlError>
 8009540:	e075      	b.n	800962e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009548:	2b02      	cmp	r3, #2
 800954a:	d002      	beq.n	8009552 <USBD_SetConfig+0x36>
 800954c:	2b03      	cmp	r3, #3
 800954e:	d023      	beq.n	8009598 <USBD_SetConfig+0x7c>
 8009550:	e062      	b.n	8009618 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8009552:	4b38      	ldr	r3, [pc, #224]	; (8009634 <USBD_SetConfig+0x118>)
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d01a      	beq.n	8009590 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800955a:	4b36      	ldr	r3, [pc, #216]	; (8009634 <USBD_SetConfig+0x118>)
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	461a      	mov	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2203      	movs	r2, #3
 8009568:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800956c:	4b31      	ldr	r3, [pc, #196]	; (8009634 <USBD_SetConfig+0x118>)
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	4619      	mov	r1, r3
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7ff fa4d 	bl	8008a12 <USBD_SetClassConfig>
 8009578:	4603      	mov	r3, r0
 800957a:	2b02      	cmp	r3, #2
 800957c:	d104      	bne.n	8009588 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800957e:	6839      	ldr	r1, [r7, #0]
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f932 	bl	80097ea <USBD_CtlError>
          return;
 8009586:	e052      	b.n	800962e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 f9f7 	bl	800997c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800958e:	e04e      	b.n	800962e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f9f3 	bl	800997c <USBD_CtlSendStatus>
      break;
 8009596:	e04a      	b.n	800962e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009598:	4b26      	ldr	r3, [pc, #152]	; (8009634 <USBD_SetConfig+0x118>)
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d112      	bne.n	80095c6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2202      	movs	r2, #2
 80095a4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80095a8:	4b22      	ldr	r3, [pc, #136]	; (8009634 <USBD_SetConfig+0x118>)
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	461a      	mov	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80095b2:	4b20      	ldr	r3, [pc, #128]	; (8009634 <USBD_SetConfig+0x118>)
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f7ff fa49 	bl	8008a50 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f9dc 	bl	800997c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80095c4:	e033      	b.n	800962e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80095c6:	4b1b      	ldr	r3, [pc, #108]	; (8009634 <USBD_SetConfig+0x118>)
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	461a      	mov	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d01d      	beq.n	8009610 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	4619      	mov	r1, r3
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7ff fa37 	bl	8008a50 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80095e2:	4b14      	ldr	r3, [pc, #80]	; (8009634 <USBD_SetConfig+0x118>)
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	461a      	mov	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80095ec:	4b11      	ldr	r3, [pc, #68]	; (8009634 <USBD_SetConfig+0x118>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f7ff fa0d 	bl	8008a12 <USBD_SetClassConfig>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d104      	bne.n	8009608 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80095fe:	6839      	ldr	r1, [r7, #0]
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 f8f2 	bl	80097ea <USBD_CtlError>
          return;
 8009606:	e012      	b.n	800962e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f9b7 	bl	800997c <USBD_CtlSendStatus>
      break;
 800960e:	e00e      	b.n	800962e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 f9b3 	bl	800997c <USBD_CtlSendStatus>
      break;
 8009616:	e00a      	b.n	800962e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8009618:	6839      	ldr	r1, [r7, #0]
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f8e5 	bl	80097ea <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009620:	4b04      	ldr	r3, [pc, #16]	; (8009634 <USBD_SetConfig+0x118>)
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7ff fa12 	bl	8008a50 <USBD_ClrClassConfig>
      break;
 800962c:	bf00      	nop
    }
  }
}
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	20001410 	.word	0x20001410

08009638 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	88db      	ldrh	r3, [r3, #6]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d004      	beq.n	8009654 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f8cc 	bl	80097ea <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8009652:	e021      	b.n	8009698 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800965a:	2b01      	cmp	r3, #1
 800965c:	db17      	blt.n	800968e <USBD_GetConfig+0x56>
 800965e:	2b02      	cmp	r3, #2
 8009660:	dd02      	ble.n	8009668 <USBD_GetConfig+0x30>
 8009662:	2b03      	cmp	r3, #3
 8009664:	d00b      	beq.n	800967e <USBD_GetConfig+0x46>
 8009666:	e012      	b.n	800968e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	3308      	adds	r3, #8
 8009672:	2201      	movs	r2, #1
 8009674:	4619      	mov	r1, r3
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f922 	bl	80098c0 <USBD_CtlSendData>
      break;
 800967c:	e00c      	b.n	8009698 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	3304      	adds	r3, #4
 8009682:	2201      	movs	r2, #1
 8009684:	4619      	mov	r1, r3
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f91a 	bl	80098c0 <USBD_CtlSendData>
      break;
 800968c:	e004      	b.n	8009698 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800968e:	6839      	ldr	r1, [r7, #0]
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f8aa 	bl	80097ea <USBD_CtlError>
      break;
 8009696:	bf00      	nop
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80096b0:	3b01      	subs	r3, #1
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d81e      	bhi.n	80096f4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	88db      	ldrh	r3, [r3, #6]
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d004      	beq.n	80096c8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 f892 	bl	80097ea <USBD_CtlError>
      break;
 80096c6:	e01a      	b.n	80096fe <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d005      	beq.n	80096e4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	f043 0202 	orr.w	r2, r3, #2
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	330c      	adds	r3, #12
 80096e8:	2202      	movs	r2, #2
 80096ea:	4619      	mov	r1, r3
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 f8e7 	bl	80098c0 <USBD_CtlSendData>
    break;
 80096f2:	e004      	b.n	80096fe <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80096f4:	6839      	ldr	r1, [r7, #0]
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f877 	bl	80097ea <USBD_CtlError>
    break;
 80096fc:	bf00      	nop
  }
}
 80096fe:	bf00      	nop
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b082      	sub	sp, #8
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
 800970e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	885b      	ldrh	r3, [r3, #2]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d106      	bne.n	8009726 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f92b 	bl	800997c <USBD_CtlSendStatus>
  }

}
 8009726:	bf00      	nop
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b082      	sub	sp, #8
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800973e:	3b01      	subs	r3, #1
 8009740:	2b02      	cmp	r3, #2
 8009742:	d80b      	bhi.n	800975c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	885b      	ldrh	r3, [r3, #2]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d10c      	bne.n	8009766 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f911 	bl	800997c <USBD_CtlSendStatus>
    }
    break;
 800975a:	e004      	b.n	8009766 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f843 	bl	80097ea <USBD_CtlError>
    break;
 8009764:	e000      	b.n	8009768 <USBD_ClrFeature+0x3a>
    break;
 8009766:	bf00      	nop
  }
}
 8009768:	bf00      	nop
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	781a      	ldrb	r2, [r3, #0]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	785a      	ldrb	r2, [r3, #1]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	3302      	adds	r3, #2
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	b29a      	uxth	r2, r3
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	3303      	adds	r3, #3
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	b29b      	uxth	r3, r3
 800979a:	021b      	lsls	r3, r3, #8
 800979c:	b29b      	uxth	r3, r3
 800979e:	4413      	add	r3, r2
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	3304      	adds	r3, #4
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	3305      	adds	r3, #5
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	021b      	lsls	r3, r3, #8
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	4413      	add	r3, r2
 80097bc:	b29a      	uxth	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	3306      	adds	r3, #6
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	3307      	adds	r3, #7
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	021b      	lsls	r3, r3, #8
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	4413      	add	r3, r2
 80097d8:	b29a      	uxth	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	80da      	strh	r2, [r3, #6]

}
 80097de:	bf00      	nop
 80097e0:	370c      	adds	r7, #12
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b082      	sub	sp, #8
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80097f4:	2180      	movs	r1, #128	; 0x80
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f001 fd16 	bl	800b228 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80097fc:	2100      	movs	r1, #0
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f001 fd12 	bl	800b228 <USBD_LL_StallEP>
}
 8009804:	bf00      	nop
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009818:	2300      	movs	r3, #0
 800981a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d032      	beq.n	8009888 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f000 f834 	bl	8009890 <USBD_GetLen>
 8009828:	4603      	mov	r3, r0
 800982a:	3301      	adds	r3, #1
 800982c:	b29b      	uxth	r3, r3
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	b29a      	uxth	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009836:	7dfb      	ldrb	r3, [r7, #23]
 8009838:	1c5a      	adds	r2, r3, #1
 800983a:	75fa      	strb	r2, [r7, #23]
 800983c:	461a      	mov	r2, r3
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	4413      	add	r3, r2
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	7812      	ldrb	r2, [r2, #0]
 8009846:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009848:	7dfb      	ldrb	r3, [r7, #23]
 800984a:	1c5a      	adds	r2, r3, #1
 800984c:	75fa      	strb	r2, [r7, #23]
 800984e:	461a      	mov	r2, r3
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	4413      	add	r3, r2
 8009854:	2203      	movs	r2, #3
 8009856:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009858:	e012      	b.n	8009880 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800985a:	7dfb      	ldrb	r3, [r7, #23]
 800985c:	1c5a      	adds	r2, r3, #1
 800985e:	75fa      	strb	r2, [r7, #23]
 8009860:	461a      	mov	r2, r3
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	441a      	add	r2, r3
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	1c59      	adds	r1, r3, #1
 800986a:	60f9      	str	r1, [r7, #12]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009870:	7dfb      	ldrb	r3, [r7, #23]
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	75fa      	strb	r2, [r7, #23]
 8009876:	461a      	mov	r2, r3
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	4413      	add	r3, r2
 800987c:	2200      	movs	r2, #0
 800987e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1e8      	bne.n	800985a <USBD_GetString+0x4e>
    }
  }
}
 8009888:	bf00      	nop
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8009898:	2300      	movs	r3, #0
 800989a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800989c:	e005      	b.n	80098aa <USBD_GetLen+0x1a>
    {
        len++;
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	3301      	adds	r3, #1
 80098a2:	73fb      	strb	r3, [r7, #15]
        buf++;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	3301      	adds	r3, #1
 80098a8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1f5      	bne.n	800989e <USBD_GetLen+0xe>
    }

    return len;
 80098b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3714      	adds	r7, #20
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	4613      	mov	r3, r2
 80098cc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2202      	movs	r2, #2
 80098d2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80098d6:	88fa      	ldrh	r2, [r7, #6]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80098dc:	88fa      	ldrh	r2, [r7, #6]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80098e2:	88fb      	ldrh	r3, [r7, #6]
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	2100      	movs	r1, #0
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f001 fd65 	bl	800b3b8 <USBD_LL_Transmit>

  return USBD_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3710      	adds	r7, #16
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	4613      	mov	r3, r2
 8009904:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009906:	88fb      	ldrh	r3, [r7, #6]
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	2100      	movs	r1, #0
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f001 fd53 	bl	800b3b8 <USBD_LL_Transmit>

  return USBD_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	4613      	mov	r3, r2
 8009928:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2203      	movs	r2, #3
 800992e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8009932:	88fa      	ldrh	r2, [r7, #6]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800993a:	88fa      	ldrh	r2, [r7, #6]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8009942:	88fb      	ldrh	r3, [r7, #6]
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	2100      	movs	r1, #0
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f001 fd6f 	bl	800b42c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	4613      	mov	r3, r2
 8009964:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009966:	88fb      	ldrh	r3, [r7, #6]
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	2100      	movs	r1, #0
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f001 fd5d 	bl	800b42c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2204      	movs	r2, #4
 8009988:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800998c:	2300      	movs	r3, #0
 800998e:	2200      	movs	r2, #0
 8009990:	2100      	movs	r1, #0
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f001 fd10 	bl	800b3b8 <USBD_LL_Transmit>

  return USBD_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b082      	sub	sp, #8
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2205      	movs	r2, #5
 80099ae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80099b2:	2300      	movs	r3, #0
 80099b4:	2200      	movs	r2, #0
 80099b6:	2100      	movs	r1, #0
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f001 fd37 	bl	800b42c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b08a      	sub	sp, #40	; 0x28
 80099cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099ce:	f107 0314 	add.w	r3, r7, #20
 80099d2:	2200      	movs	r2, #0
 80099d4:	601a      	str	r2, [r3, #0]
 80099d6:	605a      	str	r2, [r3, #4]
 80099d8:	609a      	str	r2, [r3, #8]
 80099da:	60da      	str	r2, [r3, #12]
 80099dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80099de:	4a50      	ldr	r2, [pc, #320]	; (8009b20 <MX_GPIO_Init+0x158>)
 80099e0:	4b4f      	ldr	r3, [pc, #316]	; (8009b20 <MX_GPIO_Init+0x158>)
 80099e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099ea:	4b4d      	ldr	r3, [pc, #308]	; (8009b20 <MX_GPIO_Init+0x158>)
 80099ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099f2:	613b      	str	r3, [r7, #16]
 80099f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80099f6:	4a4a      	ldr	r2, [pc, #296]	; (8009b20 <MX_GPIO_Init+0x158>)
 80099f8:	4b49      	ldr	r3, [pc, #292]	; (8009b20 <MX_GPIO_Init+0x158>)
 80099fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099fc:	f043 0304 	orr.w	r3, r3, #4
 8009a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a02:	4b47      	ldr	r3, [pc, #284]	; (8009b20 <MX_GPIO_Init+0x158>)
 8009a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a06:	f003 0304 	and.w	r3, r3, #4
 8009a0a:	60fb      	str	r3, [r7, #12]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a0e:	4a44      	ldr	r2, [pc, #272]	; (8009b20 <MX_GPIO_Init+0x158>)
 8009a10:	4b43      	ldr	r3, [pc, #268]	; (8009b20 <MX_GPIO_Init+0x158>)
 8009a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a14:	f043 0301 	orr.w	r3, r3, #1
 8009a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a1a:	4b41      	ldr	r3, [pc, #260]	; (8009b20 <MX_GPIO_Init+0x158>)
 8009a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	60bb      	str	r3, [r7, #8]
 8009a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a26:	4a3e      	ldr	r2, [pc, #248]	; (8009b20 <MX_GPIO_Init+0x158>)
 8009a28:	4b3d      	ldr	r3, [pc, #244]	; (8009b20 <MX_GPIO_Init+0x158>)
 8009a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a2c:	f043 0302 	orr.w	r3, r3, #2
 8009a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a32:	4b3b      	ldr	r3, [pc, #236]	; (8009b20 <MX_GPIO_Init+0x158>)
 8009a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a36:	f003 0302 	and.w	r3, r3, #2
 8009a3a:	607b      	str	r3, [r7, #4]
 8009a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009a3e:	4a38      	ldr	r2, [pc, #224]	; (8009b20 <MX_GPIO_Init+0x158>)
 8009a40:	4b37      	ldr	r3, [pc, #220]	; (8009b20 <MX_GPIO_Init+0x158>)
 8009a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a44:	f043 0308 	orr.w	r3, r3, #8
 8009a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a4a:	4b35      	ldr	r3, [pc, #212]	; (8009b20 <MX_GPIO_Init+0x158>)
 8009a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a4e:	f003 0308 	and.w	r3, r3, #8
 8009a52:	603b      	str	r3, [r7, #0]
 8009a54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, O_USART2_DIR_Pin|O_USART1_DIR_Pin, GPIO_PIN_RESET);
 8009a56:	2200      	movs	r2, #0
 8009a58:	f241 0104 	movw	r1, #4100	; 0x1004
 8009a5c:	4831      	ldr	r0, [pc, #196]	; (8009b24 <MX_GPIO_Init+0x15c>)
 8009a5e:	f7f7 fe41 	bl	80016e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O_BT_PWR_GPIO_Port, O_BT_PWR_Pin, GPIO_PIN_RESET);
 8009a62:	2200      	movs	r2, #0
 8009a64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009a6c:	f7f7 fe3a 	bl	80016e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = O_USART2_DIR_Pin|O_USART1_DIR_Pin;
 8009a70:	f241 0304 	movw	r3, #4100	; 0x1004
 8009a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a76:	2301      	movs	r3, #1
 8009a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009a82:	f107 0314 	add.w	r3, r7, #20
 8009a86:	4619      	mov	r1, r3
 8009a88:	4826      	ldr	r0, [pc, #152]	; (8009b24 <MX_GPIO_Init+0x15c>)
 8009a8a:	f7f7 fc99 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_USART2_BREAK_Pin;
 8009a8e:	2308      	movs	r3, #8
 8009a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a92:	2300      	movs	r3, #0
 8009a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a96:	2300      	movs	r3, #0
 8009a98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(O_USART2_BREAK_GPIO_Port, &GPIO_InitStruct);
 8009a9a:	f107 0314 	add.w	r3, r7, #20
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	4820      	ldr	r0, [pc, #128]	; (8009b24 <MX_GPIO_Init+0x15c>)
 8009aa2:	f7f7 fc8d 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = I_GPIO1_Pin|I_GPIO2_Pin|I_GPIO3_Pin|I_GPIO4_Pin 
 8009aa6:	f44f 733c 	mov.w	r3, #752	; 0x2f0
 8009aaa:	617b      	str	r3, [r7, #20]
                          |I_USB_VBUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009aac:	2300      	movs	r3, #0
 8009aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ab4:	f107 0314 	add.w	r3, r7, #20
 8009ab8:	4619      	mov	r1, r3
 8009aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009abe:	f7f7 fc7f 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_SW2_Pin;
 8009ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009acc:	2301      	movs	r3, #1
 8009ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I_SW2_GPIO_Port, &GPIO_InitStruct);
 8009ad0:	f107 0314 	add.w	r3, r7, #20
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ada:	f7f7 fc71 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_BT_PWR_Pin;
 8009ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009aec:	2300      	movs	r3, #0
 8009aee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(O_BT_PWR_GPIO_Port, &GPIO_InitStruct);
 8009af0:	f107 0314 	add.w	r3, r7, #20
 8009af4:	4619      	mov	r1, r3
 8009af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009afa:	f7f7 fc61 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_USART1_BREAK_Pin;
 8009afe:	2304      	movs	r3, #4
 8009b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009b02:	2300      	movs	r3, #0
 8009b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b06:	2300      	movs	r3, #0
 8009b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(O_USART1_BREAK_GPIO_Port, &GPIO_InitStruct);
 8009b0a:	f107 0314 	add.w	r3, r7, #20
 8009b0e:	4619      	mov	r1, r3
 8009b10:	4805      	ldr	r0, [pc, #20]	; (8009b28 <MX_GPIO_Init+0x160>)
 8009b12:	f7f7 fc55 	bl	80013c0 <HAL_GPIO_Init>

}
 8009b16:	bf00      	nop
 8009b18:	3728      	adds	r7, #40	; 0x28
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	40021000 	.word	0x40021000
 8009b24:	48000800 	.word	0x48000800
 8009b28:	48000c00 	.word	0x48000c00

08009b2c <gpio_ConfigureToFloating>:

/* USER CODE BEGIN 2 */
void gpio_ConfigureToFloating(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b088      	sub	sp, #32
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	460b      	mov	r3, r1
 8009b36:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b38:	f107 030c 	add.w	r3, r7, #12
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	601a      	str	r2, [r3, #0]
 8009b40:	605a      	str	r2, [r3, #4]
 8009b42:	609a      	str	r2, [r3, #8]
 8009b44:	60da      	str	r2, [r3, #12]
 8009b46:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8009b48:	887b      	ldrh	r3, [r7, #2]
 8009b4a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b50:	2300      	movs	r3, #0
 8009b52:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8009b54:	f107 030c 	add.w	r3, r7, #12
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7f7 fc30 	bl	80013c0 <HAL_GPIO_Init>
}
 8009b60:	bf00      	nop
 8009b62:	3720      	adds	r7, #32
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <gpio_ConfigureToPushPull>:
void gpio_ConfigureToPushPull(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b088      	sub	sp, #32
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	460b      	mov	r3, r1
 8009b72:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b74:	f107 030c 	add.w	r3, r7, #12
 8009b78:	2200      	movs	r2, #0
 8009b7a:	601a      	str	r2, [r3, #0]
 8009b7c:	605a      	str	r2, [r3, #4]
 8009b7e:	609a      	str	r2, [r3, #8]
 8009b80:	60da      	str	r2, [r3, #12]
 8009b82:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8009b84:	887b      	ldrh	r3, [r7, #2]
 8009b86:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b90:	2303      	movs	r3, #3
 8009b92:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8009b94:	f107 030c 	add.w	r3, r7, #12
 8009b98:	4619      	mov	r1, r3
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7f7 fc10 	bl	80013c0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8009ba0:	887b      	ldrh	r3, [r7, #2]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7f7 fd9c 	bl	80016e4 <HAL_GPIO_WritePin>
}
 8009bac:	bf00      	nop
 8009bae:	3720      	adds	r7, #32
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <gpio_setPinMode>:

#define TEST_GPIO_MODE_MSK 0x03
#define TEST_GPIO_MODE_INPUT_FLOAT 0x00
#define TEST_GPIO_MODE_OUTPUT_OD 0x01

void gpio_setPinMode(uint8_t mode, GPIO_TypeDef  *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState){
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b088      	sub	sp, #32
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6039      	str	r1, [r7, #0]
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	71fb      	strb	r3, [r7, #7]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	80bb      	strh	r3, [r7, #4]
 8009bc8:	4613      	mov	r3, r2
 8009bca:	71bb      	strb	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bcc:	f107 030c 	add.w	r3, r7, #12
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	601a      	str	r2, [r3, #0]
 8009bd4:	605a      	str	r2, [r3, #4]
 8009bd6:	609a      	str	r2, [r3, #8]
 8009bd8:	60da      	str	r2, [r3, #12]
 8009bda:	611a      	str	r2, [r3, #16]
	if(mode == GPIO_MODE_INPUT){
 8009bdc:	79fb      	ldrb	r3, [r7, #7]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10c      	bne.n	8009bfc <gpio_setPinMode+0x48>
//		uint8_t position = ((GPIO_Pin - 1) << 1)
//		GPIOx->MODER &= ~(1 << GPIO_Pin);

		GPIO_InitStruct.Pin = GPIO_Pin;
 8009be2:	88bb      	ldrh	r3, [r7, #4]
 8009be4:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009be6:	2300      	movs	r3, #0
 8009be8:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bea:	2300      	movs	r3, #0
 8009bec:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8009bee:	f107 030c 	add.w	r3, r7, #12
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	6838      	ldr	r0, [r7, #0]
 8009bf6:	f7f7 fbe3 	bl	80013c0 <HAL_GPIO_Init>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
	}
}
 8009bfa:	e016      	b.n	8009c2a <gpio_setPinMode+0x76>
	}else if(mode == GPIO_MODE_OUTPUT_OD){
 8009bfc:	79fb      	ldrb	r3, [r7, #7]
 8009bfe:	2b11      	cmp	r3, #17
 8009c00:	d113      	bne.n	8009c2a <gpio_setPinMode+0x76>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 8009c02:	79ba      	ldrb	r2, [r7, #6]
 8009c04:	88bb      	ldrh	r3, [r7, #4]
 8009c06:	4619      	mov	r1, r3
 8009c08:	6838      	ldr	r0, [r7, #0]
 8009c0a:	f7f7 fd6b 	bl	80016e4 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = GPIO_Pin;
 8009c0e:	88bb      	ldrh	r3, [r7, #4]
 8009c10:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8009c12:	2311      	movs	r3, #17
 8009c14:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c16:	2300      	movs	r3, #0
 8009c18:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8009c1e:	f107 030c 	add.w	r3, r7, #12
 8009c22:	4619      	mov	r1, r3
 8009c24:	6838      	ldr	r0, [r7, #0]
 8009c26:	f7f7 fbcb 	bl	80013c0 <HAL_GPIO_Init>
}
 8009c2a:	bf00      	nop
 8009c2c:	3720      	adds	r7, #32
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <gpio_setPinMode2>:

void gpio_setPinMode2(uint8_t mode, GPIO_TypeDef  *GPIOx, uint8_t GPIO_Pin_BitPos, GPIO_PinState PinState){
 8009c32:	b480      	push	{r7}
 8009c34:	b083      	sub	sp, #12
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6039      	str	r1, [r7, #0]
 8009c3a:	4611      	mov	r1, r2
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	4603      	mov	r3, r0
 8009c40:	71fb      	strb	r3, [r7, #7]
 8009c42:	460b      	mov	r3, r1
 8009c44:	71bb      	strb	r3, [r7, #6]
 8009c46:	4613      	mov	r3, r2
 8009c48:	717b      	strb	r3, [r7, #5]
	if(mode == GPIO_MODE_INPUT){
 8009c4a:	79fb      	ldrb	r3, [r7, #7]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10f      	bne.n	8009c70 <gpio_setPinMode2+0x3e>
		GPIOx->MODER &= ~(TEST_GPIO_MODE_MSK << (GPIO_Pin_BitPos << 1));
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	79ba      	ldrb	r2, [r7, #6]
 8009c56:	0052      	lsls	r2, r2, #1
 8009c58:	2103      	movs	r1, #3
 8009c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8009c5e:	43d2      	mvns	r2, r2
 8009c60:	401a      	ands	r2, r3
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	601a      	str	r2, [r3, #0]
		GPIOx->MODER |= (TEST_GPIO_MODE_INPUT_FLOAT << (GPIO_Pin_BitPos << 1));
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	601a      	str	r2, [r3, #0]
	}else{
		GPIOx->MODER &= ~(TEST_GPIO_MODE_MSK << (GPIO_Pin_BitPos << 1));
		GPIOx->MODER |= (TEST_GPIO_MODE_OUTPUT_OD << (GPIO_Pin_BitPos << 1));
	}
}
 8009c6e:	e014      	b.n	8009c9a <gpio_setPinMode2+0x68>
		GPIOx->MODER &= ~(TEST_GPIO_MODE_MSK << (GPIO_Pin_BitPos << 1));
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	79ba      	ldrb	r2, [r7, #6]
 8009c76:	0052      	lsls	r2, r2, #1
 8009c78:	2103      	movs	r1, #3
 8009c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8009c7e:	43d2      	mvns	r2, r2
 8009c80:	401a      	ands	r2, r3
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	601a      	str	r2, [r3, #0]
		GPIOx->MODER |= (TEST_GPIO_MODE_OUTPUT_OD << (GPIO_Pin_BitPos << 1));
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	79ba      	ldrb	r2, [r7, #6]
 8009c8c:	0052      	lsls	r2, r2, #1
 8009c8e:	2101      	movs	r1, #1
 8009c90:	fa01 f202 	lsl.w	r2, r1, r2
 8009c94:	431a      	orrs	r2, r3
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	601a      	str	r2, [r3, #0]
}
 8009c9a:	bf00      	nop
 8009c9c:	370c      	adds	r7, #12
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
	...

08009ca8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8009cac:	4b1b      	ldr	r3, [pc, #108]	; (8009d1c <MX_I2C2_Init+0x74>)
 8009cae:	4a1c      	ldr	r2, [pc, #112]	; (8009d20 <MX_I2C2_Init+0x78>)
 8009cb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8009cb2:	4b1a      	ldr	r3, [pc, #104]	; (8009d1c <MX_I2C2_Init+0x74>)
 8009cb4:	4a1b      	ldr	r2, [pc, #108]	; (8009d24 <MX_I2C2_Init+0x7c>)
 8009cb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8009cb8:	4b18      	ldr	r3, [pc, #96]	; (8009d1c <MX_I2C2_Init+0x74>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009cbe:	4b17      	ldr	r3, [pc, #92]	; (8009d1c <MX_I2C2_Init+0x74>)
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009cc4:	4b15      	ldr	r3, [pc, #84]	; (8009d1c <MX_I2C2_Init+0x74>)
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8009cca:	4b14      	ldr	r3, [pc, #80]	; (8009d1c <MX_I2C2_Init+0x74>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009cd0:	4b12      	ldr	r3, [pc, #72]	; (8009d1c <MX_I2C2_Init+0x74>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009cd6:	4b11      	ldr	r3, [pc, #68]	; (8009d1c <MX_I2C2_Init+0x74>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009cdc:	4b0f      	ldr	r3, [pc, #60]	; (8009d1c <MX_I2C2_Init+0x74>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8009ce2:	480e      	ldr	r0, [pc, #56]	; (8009d1c <MX_I2C2_Init+0x74>)
 8009ce4:	f7f7 fd16 	bl	8001714 <HAL_I2C_Init>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d001      	beq.n	8009cf2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8009cee:	f000 f9a7 	bl	800a040 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	4809      	ldr	r0, [pc, #36]	; (8009d1c <MX_I2C2_Init+0x74>)
 8009cf6:	f7f8 f801 	bl	8001cfc <HAL_I2CEx_ConfigAnalogFilter>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8009d00:	f000 f99e 	bl	800a040 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8009d04:	2100      	movs	r1, #0
 8009d06:	4805      	ldr	r0, [pc, #20]	; (8009d1c <MX_I2C2_Init+0x74>)
 8009d08:	f7f8 f843 	bl	8001d92 <HAL_I2CEx_ConfigDigitalFilter>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8009d12:	f000 f995 	bl	800a040 <Error_Handler>
  }

}
 8009d16:	bf00      	nop
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	20001638 	.word	0x20001638
 8009d20:	40005800 	.word	0x40005800
 8009d24:	10909cec 	.word	0x10909cec

08009d28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08a      	sub	sp, #40	; 0x28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d30:	f107 0314 	add.w	r3, r7, #20
 8009d34:	2200      	movs	r2, #0
 8009d36:	601a      	str	r2, [r3, #0]
 8009d38:	605a      	str	r2, [r3, #4]
 8009d3a:	609a      	str	r2, [r3, #8]
 8009d3c:	60da      	str	r2, [r3, #12]
 8009d3e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a17      	ldr	r2, [pc, #92]	; (8009da4 <HAL_I2C_MspInit+0x7c>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d128      	bne.n	8009d9c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d4a:	4a17      	ldr	r2, [pc, #92]	; (8009da8 <HAL_I2C_MspInit+0x80>)
 8009d4c:	4b16      	ldr	r3, [pc, #88]	; (8009da8 <HAL_I2C_MspInit+0x80>)
 8009d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d50:	f043 0302 	orr.w	r3, r3, #2
 8009d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d56:	4b14      	ldr	r3, [pc, #80]	; (8009da8 <HAL_I2C_MspInit+0x80>)
 8009d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d5a:	f003 0302 	and.w	r3, r3, #2
 8009d5e:	613b      	str	r3, [r7, #16]
 8009d60:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009d62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009d68:	2312      	movs	r3, #18
 8009d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d70:	2303      	movs	r3, #3
 8009d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8009d74:	2304      	movs	r3, #4
 8009d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d78:	f107 0314 	add.w	r3, r7, #20
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	480b      	ldr	r0, [pc, #44]	; (8009dac <HAL_I2C_MspInit+0x84>)
 8009d80:	f7f7 fb1e 	bl	80013c0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009d84:	4a08      	ldr	r2, [pc, #32]	; (8009da8 <HAL_I2C_MspInit+0x80>)
 8009d86:	4b08      	ldr	r3, [pc, #32]	; (8009da8 <HAL_I2C_MspInit+0x80>)
 8009d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8009d90:	4b05      	ldr	r3, [pc, #20]	; (8009da8 <HAL_I2C_MspInit+0x80>)
 8009d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d98:	60fb      	str	r3, [r7, #12]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8009d9c:	bf00      	nop
 8009d9e:	3728      	adds	r7, #40	; 0x28
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	40005800 	.word	0x40005800
 8009da8:	40021000 	.word	0x40021000
 8009dac:	48000400 	.word	0x48000400

08009db0 <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim1;
LPTIM_HandleTypeDef hlptim2;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	af00      	add	r7, sp, #0

  hlptim1.Instance = LPTIM1;
 8009db4:	4b12      	ldr	r3, [pc, #72]	; (8009e00 <MX_LPTIM1_Init+0x50>)
 8009db6:	4a13      	ldr	r2, [pc, #76]	; (8009e04 <MX_LPTIM1_Init+0x54>)
 8009db8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8009dba:	4b11      	ldr	r3, [pc, #68]	; (8009e00 <MX_LPTIM1_Init+0x50>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8009dc0:	4b0f      	ldr	r3, [pc, #60]	; (8009e00 <MX_LPTIM1_Init+0x50>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8009dc6:	4b0e      	ldr	r3, [pc, #56]	; (8009e00 <MX_LPTIM1_Init+0x50>)
 8009dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009dcc:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8009dce:	4b0c      	ldr	r3, [pc, #48]	; (8009e00 <MX_LPTIM1_Init+0x50>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8009dd4:	4b0a      	ldr	r3, [pc, #40]	; (8009e00 <MX_LPTIM1_Init+0x50>)
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8009dda:	4b09      	ldr	r3, [pc, #36]	; (8009e00 <MX_LPTIM1_Init+0x50>)
 8009ddc:	2200      	movs	r2, #0
 8009dde:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8009de0:	4b07      	ldr	r3, [pc, #28]	; (8009e00 <MX_LPTIM1_Init+0x50>)
 8009de2:	2200      	movs	r2, #0
 8009de4:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8009de6:	4b06      	ldr	r3, [pc, #24]	; (8009e00 <MX_LPTIM1_Init+0x50>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8009dec:	4804      	ldr	r0, [pc, #16]	; (8009e00 <MX_LPTIM1_Init+0x50>)
 8009dee:	f7f8 f81d 	bl	8001e2c <HAL_LPTIM_Init>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d001      	beq.n	8009dfc <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8009df8:	f000 f922 	bl	800a040 <Error_Handler>
  }

}
 8009dfc:	bf00      	nop
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	200016bc 	.word	0x200016bc
 8009e04:	40007c00 	.word	0x40007c00

08009e08 <MX_LPTIM2_Init>:
/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	af00      	add	r7, sp, #0

  hlptim2.Instance = LPTIM2;
 8009e0c:	4b12      	ldr	r3, [pc, #72]	; (8009e58 <MX_LPTIM2_Init+0x50>)
 8009e0e:	4a13      	ldr	r2, [pc, #76]	; (8009e5c <MX_LPTIM2_Init+0x54>)
 8009e10:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8009e12:	4b11      	ldr	r3, [pc, #68]	; (8009e58 <MX_LPTIM2_Init+0x50>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8009e18:	4b0f      	ldr	r3, [pc, #60]	; (8009e58 <MX_LPTIM2_Init+0x50>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8009e1e:	4b0e      	ldr	r3, [pc, #56]	; (8009e58 <MX_LPTIM2_Init+0x50>)
 8009e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e24:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8009e26:	4b0c      	ldr	r3, [pc, #48]	; (8009e58 <MX_LPTIM2_Init+0x50>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8009e2c:	4b0a      	ldr	r3, [pc, #40]	; (8009e58 <MX_LPTIM2_Init+0x50>)
 8009e2e:	2200      	movs	r2, #0
 8009e30:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8009e32:	4b09      	ldr	r3, [pc, #36]	; (8009e58 <MX_LPTIM2_Init+0x50>)
 8009e34:	2200      	movs	r2, #0
 8009e36:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8009e38:	4b07      	ldr	r3, [pc, #28]	; (8009e58 <MX_LPTIM2_Init+0x50>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8009e3e:	4b06      	ldr	r3, [pc, #24]	; (8009e58 <MX_LPTIM2_Init+0x50>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8009e44:	4804      	ldr	r0, [pc, #16]	; (8009e58 <MX_LPTIM2_Init+0x50>)
 8009e46:	f7f7 fff1 	bl	8001e2c <HAL_LPTIM_Init>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d001      	beq.n	8009e54 <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 8009e50:	f000 f8f6 	bl	800a040 <Error_Handler>
  }

}
 8009e54:	bf00      	nop
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	20001684 	.word	0x20001684
 8009e5c:	40009400 	.word	0x40009400

08009e60 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]

  if(lptimHandle->Instance==LPTIM1)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a1a      	ldr	r2, [pc, #104]	; (8009ed8 <HAL_LPTIM_MspInit+0x78>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d114      	bne.n	8009e9c <HAL_LPTIM_MspInit+0x3c>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8009e72:	4a1a      	ldr	r2, [pc, #104]	; (8009edc <HAL_LPTIM_MspInit+0x7c>)
 8009e74:	4b19      	ldr	r3, [pc, #100]	; (8009edc <HAL_LPTIM_MspInit+0x7c>)
 8009e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8009e7e:	4b17      	ldr	r3, [pc, #92]	; (8009edc <HAL_LPTIM_MspInit+0x7c>)
 8009e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e86:	60fb      	str	r3, [r7, #12]
 8009e88:	68fb      	ldr	r3, [r7, #12]

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	2041      	movs	r0, #65	; 0x41
 8009e90:	f7f7 fa5f 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8009e94:	2041      	movs	r0, #65	; 0x41
 8009e96:	f7f7 fa78 	bl	800138a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }
}
 8009e9a:	e018      	b.n	8009ece <HAL_LPTIM_MspInit+0x6e>
  else if(lptimHandle->Instance==LPTIM2)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a0f      	ldr	r2, [pc, #60]	; (8009ee0 <HAL_LPTIM_MspInit+0x80>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d113      	bne.n	8009ece <HAL_LPTIM_MspInit+0x6e>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8009ea6:	4a0d      	ldr	r2, [pc, #52]	; (8009edc <HAL_LPTIM_MspInit+0x7c>)
 8009ea8:	4b0c      	ldr	r3, [pc, #48]	; (8009edc <HAL_LPTIM_MspInit+0x7c>)
 8009eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eac:	f043 0320 	orr.w	r3, r3, #32
 8009eb0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8009eb2:	4b0a      	ldr	r3, [pc, #40]	; (8009edc <HAL_LPTIM_MspInit+0x7c>)
 8009eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eb6:	f003 0320 	and.w	r3, r3, #32
 8009eba:	60bb      	str	r3, [r7, #8]
 8009ebc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	2042      	movs	r0, #66	; 0x42
 8009ec4:	f7f7 fa45 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 8009ec8:	2042      	movs	r0, #66	; 0x42
 8009eca:	f7f7 fa5e 	bl	800138a <HAL_NVIC_EnableIRQ>
}
 8009ece:	bf00      	nop
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	40007c00 	.word	0x40007c00
 8009edc:	40021000 	.word	0x40021000
 8009ee0:	40009400 	.word	0x40009400

08009ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009ee8:	f7f7 f908 	bl	80010fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009eec:	f000 f81f 	bl	8009f2e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009ef0:	f7ff fd6a 	bl	80099c8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8009ef4:	f7ff fed8 	bl	8009ca8 <MX_I2C2_Init>
  MX_LPTIM1_Init();
 8009ef8:	f7ff ff5a 	bl	8009db0 <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 8009efc:	f7ff ff84 	bl	8009e08 <MX_LPTIM2_Init>
  MX_TIM1_Init();
 8009f00:	f000 f98e 	bl	800a220 <MX_TIM1_Init>
  MX_TIM2_Init();
 8009f04:	f000 fa1a 	bl	800a33c <MX_TIM2_Init>
  MX_TIM3_Init();
 8009f08:	f000 fa54 	bl	800a3b4 <MX_TIM3_Init>
  MX_TIM6_Init();
 8009f0c:	f000 fab4 	bl	800a478 <MX_TIM6_Init>
  MX_TIM15_Init();
 8009f10:	f000 fae8 	bl	800a4e4 <MX_TIM15_Init>
  MX_TIM16_Init();
 8009f14:	f000 fb94 	bl	800a640 <MX_TIM16_Init>
  MX_UART4_Init();
 8009f18:	f000 fd88 	bl	800aa2c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8009f1c:	f000 fdb6 	bl	800aa8c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8009f20:	f000 fde6 	bl	800aaf0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8009f24:	f000 fee6 	bl	800acf4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
//  TIM15->CCR4 = 255;
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
  app_main();
 8009f28:	f7f6 ff42 	bl	8000db0 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009f2c:	e7fe      	b.n	8009f2c <main+0x48>

08009f2e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b0b0      	sub	sp, #192	; 0xc0
 8009f32:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009f34:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009f38:	2244      	movs	r2, #68	; 0x44
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f001 fc3d 	bl	800b7bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009f42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009f46:	2200      	movs	r2, #0
 8009f48:	601a      	str	r2, [r3, #0]
 8009f4a:	605a      	str	r2, [r3, #4]
 8009f4c:	609a      	str	r2, [r3, #8]
 8009f4e:	60da      	str	r2, [r3, #12]
 8009f50:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009f52:	463b      	mov	r3, r7
 8009f54:	2268      	movs	r2, #104	; 0x68
 8009f56:	2100      	movs	r1, #0
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f001 fc2f 	bl	800b7bc <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009f66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009f6a:	2302      	movs	r3, #2
 8009f6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009f70:	2303      	movs	r3, #3
 8009f72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8009f76:	2301      	movs	r3, #1
 8009f78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 20;
 8009f7c:	2314      	movs	r3, #20
 8009f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8009f82:	2307      	movs	r3, #7
 8009f84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009f88:	2302      	movs	r3, #2
 8009f8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009f8e:	2302      	movs	r3, #2
 8009f90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009f94:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7f9 f877 	bl	800308c <HAL_RCC_OscConfig>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8009fa4:	f000 f84c 	bl	800a040 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009fa8:	230f      	movs	r3, #15
 8009faa:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009fac:	2303      	movs	r3, #3
 8009fae:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009fbc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009fc0:	2104      	movs	r1, #4
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7f9 fc08 	bl	80037d8 <HAL_RCC_ClockConfig>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8009fce:	f000 f837 	bl	800a040 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8009fd2:	f242 638b 	movw	r3, #9867	; 0x268b
 8009fd6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_LPTIM1
                              |RCC_PERIPHCLK_LPTIM2|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8009ff0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009ff4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8009ff6:	2303      	movs	r3, #3
 8009ff8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8009ffe:	230c      	movs	r3, #12
 800a000:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800a002:	2307      	movs	r3, #7
 800a004:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800a006:	2302      	movs	r3, #2
 800a008:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800a00a:	2302      	movs	r3, #2
 800a00c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800a00e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a012:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a014:	463b      	mov	r3, r7
 800a016:	4618      	mov	r0, r3
 800a018:	f7f9 fdf0 	bl	8003bfc <HAL_RCCEx_PeriphCLKConfig>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800a022:	f000 f80d 	bl	800a040 <Error_Handler>
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800a026:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a02a:	f7f8 ffc9 	bl	8002fc0 <HAL_PWREx_ControlVoltageScaling>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800a034:	f000 f804 	bl	800a040 <Error_Handler>
  }
}
 800a038:	bf00      	nop
 800a03a:	37c0      	adds	r7, #192	; 0xc0
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a040:	b480      	push	{r7}
 800a042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a044:	bf00      	nop
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
	...

0800a050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a056:	4a0f      	ldr	r2, [pc, #60]	; (800a094 <HAL_MspInit+0x44>)
 800a058:	4b0e      	ldr	r3, [pc, #56]	; (800a094 <HAL_MspInit+0x44>)
 800a05a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a05c:	f043 0301 	orr.w	r3, r3, #1
 800a060:	6613      	str	r3, [r2, #96]	; 0x60
 800a062:	4b0c      	ldr	r3, [pc, #48]	; (800a094 <HAL_MspInit+0x44>)
 800a064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a066:	f003 0301 	and.w	r3, r3, #1
 800a06a:	607b      	str	r3, [r7, #4]
 800a06c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a06e:	4a09      	ldr	r2, [pc, #36]	; (800a094 <HAL_MspInit+0x44>)
 800a070:	4b08      	ldr	r3, [pc, #32]	; (800a094 <HAL_MspInit+0x44>)
 800a072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a078:	6593      	str	r3, [r2, #88]	; 0x58
 800a07a:	4b06      	ldr	r3, [pc, #24]	; (800a094 <HAL_MspInit+0x44>)
 800a07c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a07e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a082:	603b      	str	r3, [r7, #0]
 800a084:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a086:	bf00      	nop
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	40021000 	.word	0x40021000

0800a098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a098:	b480      	push	{r7}
 800a09a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a09c:	bf00      	nop
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a0aa:	e7fe      	b.n	800a0aa <HardFault_Handler+0x4>

0800a0ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a0b0:	e7fe      	b.n	800a0b0 <MemManage_Handler+0x4>

0800a0b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a0b2:	b480      	push	{r7}
 800a0b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a0b6:	e7fe      	b.n	800a0b6 <BusFault_Handler+0x4>

0800a0b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a0bc:	e7fe      	b.n	800a0bc <UsageFault_Handler+0x4>

0800a0be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a0be:	b480      	push	{r7}
 800a0c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a0c2:	bf00      	nop
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a0d0:	bf00      	nop
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a0de:	bf00      	nop
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a0ec:	f7f7 f842 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  app_1ms();
 800a0f0:	f7f6 feb4 	bl	8000e5c <app_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 800a0f4:	bf00      	nop
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a0fc:	4803      	ldr	r0, [pc, #12]	; (800a10c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800a0fe:	f7fa f958 	bl	80043b2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800a102:	4803      	ldr	r0, [pc, #12]	; (800a110 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800a104:	f7fa f955 	bl	80043b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800a108:	bf00      	nop
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	200017b4 	.word	0x200017b4
 800a110:	200016f4 	.word	0x200016f4

0800a114 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a118:	4802      	ldr	r0, [pc, #8]	; (800a124 <TIM1_TRG_COM_IRQHandler+0x10>)
 800a11a:	f7fa f94a 	bl	80043b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800a11e:	bf00      	nop
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	200017b4 	.word	0x200017b4

0800a128 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a12c:	4802      	ldr	r0, [pc, #8]	; (800a138 <TIM1_CC_IRQHandler+0x10>)
 800a12e:	f7fa f940 	bl	80043b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800a132:	bf00      	nop
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	200017b4 	.word	0x200017b4

0800a13c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a140:	4802      	ldr	r0, [pc, #8]	; (800a14c <TIM2_IRQHandler+0x10>)
 800a142:	f7fa f936 	bl	80043b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a146:	bf00      	nop
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	200017f4 	.word	0x200017f4

0800a150 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a154:	4802      	ldr	r0, [pc, #8]	; (800a160 <TIM3_IRQHandler+0x10>)
 800a156:	f7fa f92c 	bl	80043b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a15a:	bf00      	nop
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	20001734 	.word	0x20001734

0800a164 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a168:	4802      	ldr	r0, [pc, #8]	; (800a174 <TIM6_DAC_IRQHandler+0x10>)
 800a16a:	f7fa f922 	bl	80043b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a16e:	bf00      	nop
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	20001774 	.word	0x20001774

0800a178 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800a17c:	4802      	ldr	r0, [pc, #8]	; (800a188 <LPTIM1_IRQHandler+0x10>)
 800a17e:	f7f7 fedf 	bl	8001f40 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800a182:	bf00      	nop
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	200016bc 	.word	0x200016bc

0800a18c <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 800a190:	4802      	ldr	r0, [pc, #8]	; (800a19c <LPTIM2_IRQHandler+0x10>)
 800a192:	f7f7 fed5 	bl	8001f40 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 800a196:	bf00      	nop
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20001684 	.word	0x20001684

0800a1a0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800a1a4:	4802      	ldr	r0, [pc, #8]	; (800a1b0 <USB_IRQHandler+0x10>)
 800a1a6:	f7f8 f8a7 	bl	80022f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800a1aa:	bf00      	nop
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	20002c78 	.word	0x20002c78

0800a1b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a1b8:	4a17      	ldr	r2, [pc, #92]	; (800a218 <SystemInit+0x64>)
 800a1ba:	4b17      	ldr	r3, [pc, #92]	; (800a218 <SystemInit+0x64>)
 800a1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a1c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800a1c8:	4a14      	ldr	r2, [pc, #80]	; (800a21c <SystemInit+0x68>)
 800a1ca:	4b14      	ldr	r3, [pc, #80]	; (800a21c <SystemInit+0x68>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f043 0301 	orr.w	r3, r3, #1
 800a1d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800a1d4:	4b11      	ldr	r3, [pc, #68]	; (800a21c <SystemInit+0x68>)
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800a1da:	4a10      	ldr	r2, [pc, #64]	; (800a21c <SystemInit+0x68>)
 800a1dc:	4b0f      	ldr	r3, [pc, #60]	; (800a21c <SystemInit+0x68>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800a1e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800a1e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800a1ea:	4b0c      	ldr	r3, [pc, #48]	; (800a21c <SystemInit+0x68>)
 800a1ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a1f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a1f2:	4a0a      	ldr	r2, [pc, #40]	; (800a21c <SystemInit+0x68>)
 800a1f4:	4b09      	ldr	r3, [pc, #36]	; (800a21c <SystemInit+0x68>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a1fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800a1fe:	4b07      	ldr	r3, [pc, #28]	; (800a21c <SystemInit+0x68>)
 800a200:	2200      	movs	r2, #0
 800a202:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a204:	4b04      	ldr	r3, [pc, #16]	; (800a218 <SystemInit+0x64>)
 800a206:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a20a:	609a      	str	r2, [r3, #8]
#endif
}
 800a20c:	bf00      	nop
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	e000ed00 	.word	0xe000ed00
 800a21c:	40021000 	.word	0x40021000

0800a220 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b096      	sub	sp, #88	; 0x58
 800a224:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a226:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a22a:	2200      	movs	r2, #0
 800a22c:	601a      	str	r2, [r3, #0]
 800a22e:	605a      	str	r2, [r3, #4]
 800a230:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a232:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a236:	2200      	movs	r2, #0
 800a238:	601a      	str	r2, [r3, #0]
 800a23a:	605a      	str	r2, [r3, #4]
 800a23c:	609a      	str	r2, [r3, #8]
 800a23e:	60da      	str	r2, [r3, #12]
 800a240:	611a      	str	r2, [r3, #16]
 800a242:	615a      	str	r2, [r3, #20]
 800a244:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a246:	1d3b      	adds	r3, r7, #4
 800a248:	222c      	movs	r2, #44	; 0x2c
 800a24a:	2100      	movs	r1, #0
 800a24c:	4618      	mov	r0, r3
 800a24e:	f001 fab5 	bl	800b7bc <memset>

  htim1.Instance = TIM1;
 800a252:	4b38      	ldr	r3, [pc, #224]	; (800a334 <MX_TIM1_Init+0x114>)
 800a254:	4a38      	ldr	r2, [pc, #224]	; (800a338 <MX_TIM1_Init+0x118>)
 800a256:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a258:	4b36      	ldr	r3, [pc, #216]	; (800a334 <MX_TIM1_Init+0x114>)
 800a25a:	2200      	movs	r2, #0
 800a25c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a25e:	4b35      	ldr	r3, [pc, #212]	; (800a334 <MX_TIM1_Init+0x114>)
 800a260:	2200      	movs	r2, #0
 800a262:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800a264:	4b33      	ldr	r3, [pc, #204]	; (800a334 <MX_TIM1_Init+0x114>)
 800a266:	2200      	movs	r2, #0
 800a268:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a26a:	4b32      	ldr	r3, [pc, #200]	; (800a334 <MX_TIM1_Init+0x114>)
 800a26c:	2200      	movs	r2, #0
 800a26e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a270:	4b30      	ldr	r3, [pc, #192]	; (800a334 <MX_TIM1_Init+0x114>)
 800a272:	2200      	movs	r2, #0
 800a274:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a276:	4b2f      	ldr	r3, [pc, #188]	; (800a334 <MX_TIM1_Init+0x114>)
 800a278:	2200      	movs	r2, #0
 800a27a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a27c:	482d      	ldr	r0, [pc, #180]	; (800a334 <MX_TIM1_Init+0x114>)
 800a27e:	f7fa f842 	bl	8004306 <HAL_TIM_PWM_Init>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800a288:	f7ff feda 	bl	800a040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a28c:	2300      	movs	r3, #0
 800a28e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a290:	2300      	movs	r3, #0
 800a292:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a294:	2300      	movs	r3, #0
 800a296:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a298:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a29c:	4619      	mov	r1, r3
 800a29e:	4825      	ldr	r0, [pc, #148]	; (800a334 <MX_TIM1_Init+0x114>)
 800a2a0:	f7fb f8e6 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800a2aa:	f7ff fec9 	bl	800a040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a2ae:	2360      	movs	r3, #96	; 0x60
 800a2b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a2ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	4818      	ldr	r0, [pc, #96]	; (800a334 <MX_TIM1_Init+0x114>)
 800a2d4:	f7fa fa28 	bl	8004728 <HAL_TIM_PWM_ConfigChannel>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800a2de:	f7ff feaf 	bl	800a040 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a2f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a300:	2300      	movs	r3, #0
 800a302:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a304:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a308:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a30e:	2300      	movs	r3, #0
 800a310:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a312:	1d3b      	adds	r3, r7, #4
 800a314:	4619      	mov	r1, r3
 800a316:	4807      	ldr	r0, [pc, #28]	; (800a334 <MX_TIM1_Init+0x114>)
 800a318:	f7fb f900 	bl	800551c <HAL_TIMEx_ConfigBreakDeadTime>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800a322:	f7ff fe8d 	bl	800a040 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800a326:	4803      	ldr	r0, [pc, #12]	; (800a334 <MX_TIM1_Init+0x114>)
 800a328:	f000 face 	bl	800a8c8 <HAL_TIM_MspPostInit>

}
 800a32c:	bf00      	nop
 800a32e:	3758      	adds	r7, #88	; 0x58
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	200017b4 	.word	0x200017b4
 800a338:	40012c00 	.word	0x40012c00

0800a33c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b088      	sub	sp, #32
 800a340:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a342:	f107 0314 	add.w	r3, r7, #20
 800a346:	2200      	movs	r2, #0
 800a348:	601a      	str	r2, [r3, #0]
 800a34a:	605a      	str	r2, [r3, #4]
 800a34c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800a34e:	1d3b      	adds	r3, r7, #4
 800a350:	2200      	movs	r2, #0
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	605a      	str	r2, [r3, #4]
 800a356:	609a      	str	r2, [r3, #8]
 800a358:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800a35a:	4b15      	ldr	r3, [pc, #84]	; (800a3b0 <MX_TIM2_Init+0x74>)
 800a35c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a360:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 800a362:	4b13      	ldr	r3, [pc, #76]	; (800a3b0 <MX_TIM2_Init+0x74>)
 800a364:	2208      	movs	r2, #8
 800a366:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a368:	4b11      	ldr	r3, [pc, #68]	; (800a3b0 <MX_TIM2_Init+0x74>)
 800a36a:	2200      	movs	r2, #0
 800a36c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800a36e:	4b10      	ldr	r3, [pc, #64]	; (800a3b0 <MX_TIM2_Init+0x74>)
 800a370:	220a      	movs	r2, #10
 800a372:	60da      	str	r2, [r3, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a374:	4b0e      	ldr	r3, [pc, #56]	; (800a3b0 <MX_TIM2_Init+0x74>)
 800a376:	2200      	movs	r2, #0
 800a378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a37a:	480d      	ldr	r0, [pc, #52]	; (800a3b0 <MX_TIM2_Init+0x74>)
 800a37c:	f7f9 ff98 	bl	80042b0 <HAL_TIM_Base_Init>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <MX_TIM2_Init+0x4e>
  {
    Error_Handler();
 800a386:	f7ff fe5b 	bl	800a040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a38a:	2300      	movs	r3, #0
 800a38c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a38e:	2300      	movs	r3, #0
 800a390:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a392:	f107 0314 	add.w	r3, r7, #20
 800a396:	4619      	mov	r1, r3
 800a398:	4805      	ldr	r0, [pc, #20]	; (800a3b0 <MX_TIM2_Init+0x74>)
 800a39a:	f7fb f869 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800a3a4:	f7ff fe4c 	bl	800a040 <Error_Handler>
  }

}
 800a3a8:	bf00      	nop
 800a3aa:	3720      	adds	r7, #32
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	200017f4 	.word	0x200017f4

0800a3b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b088      	sub	sp, #32
 800a3b8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a3ba:	f107 0314 	add.w	r3, r7, #20
 800a3be:	2200      	movs	r2, #0
 800a3c0:	601a      	str	r2, [r3, #0]
 800a3c2:	605a      	str	r2, [r3, #4]
 800a3c4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800a3c6:	1d3b      	adds	r3, r7, #4
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	601a      	str	r2, [r3, #0]
 800a3cc:	605a      	str	r2, [r3, #4]
 800a3ce:	609a      	str	r2, [r3, #8]
 800a3d0:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 800a3d2:	4b27      	ldr	r3, [pc, #156]	; (800a470 <MX_TIM3_Init+0xbc>)
 800a3d4:	4a27      	ldr	r2, [pc, #156]	; (800a474 <MX_TIM3_Init+0xc0>)
 800a3d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80;
 800a3d8:	4b25      	ldr	r3, [pc, #148]	; (800a470 <MX_TIM3_Init+0xbc>)
 800a3da:	2250      	movs	r2, #80	; 0x50
 800a3dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a3de:	4b24      	ldr	r3, [pc, #144]	; (800a470 <MX_TIM3_Init+0xbc>)
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 800a3e4:	4b22      	ldr	r3, [pc, #136]	; (800a470 <MX_TIM3_Init+0xbc>)
 800a3e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a3ec:	4b20      	ldr	r3, [pc, #128]	; (800a470 <MX_TIM3_Init+0xbc>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a3f2:	4b1f      	ldr	r3, [pc, #124]	; (800a470 <MX_TIM3_Init+0xbc>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800a3f8:	481d      	ldr	r0, [pc, #116]	; (800a470 <MX_TIM3_Init+0xbc>)
 800a3fa:	f7f9 ffaf 	bl	800435c <HAL_TIM_IC_Init>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800a404:	f7ff fe1c 	bl	800a040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a408:	2300      	movs	r3, #0
 800a40a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a40c:	2300      	movs	r3, #0
 800a40e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a410:	f107 0314 	add.w	r3, r7, #20
 800a414:	4619      	mov	r1, r3
 800a416:	4816      	ldr	r0, [pc, #88]	; (800a470 <MX_TIM3_Init+0xbc>)
 800a418:	f7fb f82a 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800a422:	f7ff fe0d 	bl	800a040 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800a426:	2302      	movs	r3, #2
 800a428:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800a42a:	2301      	movs	r3, #1
 800a42c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800a42e:	2300      	movs	r3, #0
 800a430:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800a432:	2300      	movs	r3, #0
 800a434:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800a436:	1d3b      	adds	r3, r7, #4
 800a438:	2200      	movs	r2, #0
 800a43a:	4619      	mov	r1, r3
 800a43c:	480c      	ldr	r0, [pc, #48]	; (800a470 <MX_TIM3_Init+0xbc>)
 800a43e:	f7fa f8d7 	bl	80045f0 <HAL_TIM_IC_ConfigChannel>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d001      	beq.n	800a44c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800a448:	f7ff fdfa 	bl	800a040 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800a44c:	2302      	movs	r3, #2
 800a44e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800a450:	1d3b      	adds	r3, r7, #4
 800a452:	2204      	movs	r2, #4
 800a454:	4619      	mov	r1, r3
 800a456:	4806      	ldr	r0, [pc, #24]	; (800a470 <MX_TIM3_Init+0xbc>)
 800a458:	f7fa f8ca 	bl	80045f0 <HAL_TIM_IC_ConfigChannel>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d001      	beq.n	800a466 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800a462:	f7ff fded 	bl	800a040 <Error_Handler>
  }

}
 800a466:	bf00      	nop
 800a468:	3720      	adds	r7, #32
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	20001734 	.word	0x20001734
 800a474:	40000400 	.word	0x40000400

0800a478 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a47e:	1d3b      	adds	r3, r7, #4
 800a480:	2200      	movs	r2, #0
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	605a      	str	r2, [r3, #4]
 800a486:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 800a488:	4b14      	ldr	r3, [pc, #80]	; (800a4dc <MX_TIM6_Init+0x64>)
 800a48a:	4a15      	ldr	r2, [pc, #84]	; (800a4e0 <MX_TIM6_Init+0x68>)
 800a48c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80;
 800a48e:	4b13      	ldr	r3, [pc, #76]	; (800a4dc <MX_TIM6_Init+0x64>)
 800a490:	2250      	movs	r2, #80	; 0x50
 800a492:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a494:	4b11      	ldr	r3, [pc, #68]	; (800a4dc <MX_TIM6_Init+0x64>)
 800a496:	2200      	movs	r2, #0
 800a498:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 92;
 800a49a:	4b10      	ldr	r3, [pc, #64]	; (800a4dc <MX_TIM6_Init+0x64>)
 800a49c:	225c      	movs	r2, #92	; 0x5c
 800a49e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a4a0:	4b0e      	ldr	r3, [pc, #56]	; (800a4dc <MX_TIM6_Init+0x64>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a4a6:	480d      	ldr	r0, [pc, #52]	; (800a4dc <MX_TIM6_Init+0x64>)
 800a4a8:	f7f9 ff02 	bl	80042b0 <HAL_TIM_Base_Init>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d001      	beq.n	800a4b6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800a4b2:	f7ff fdc5 	bl	800a040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800a4be:	1d3b      	adds	r3, r7, #4
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	4806      	ldr	r0, [pc, #24]	; (800a4dc <MX_TIM6_Init+0x64>)
 800a4c4:	f7fa ffd4 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800a4ce:	f7ff fdb7 	bl	800a040 <Error_Handler>
  }

}
 800a4d2:	bf00      	nop
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	20001774 	.word	0x20001774
 800a4e0:	40001000 	.word	0x40001000

0800a4e4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b09a      	sub	sp, #104	; 0x68
 800a4e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a4ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	601a      	str	r2, [r3, #0]
 800a4f2:	605a      	str	r2, [r3, #4]
 800a4f4:	609a      	str	r2, [r3, #8]
 800a4f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a4f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	605a      	str	r2, [r3, #4]
 800a502:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a504:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a508:	2200      	movs	r2, #0
 800a50a:	601a      	str	r2, [r3, #0]
 800a50c:	605a      	str	r2, [r3, #4]
 800a50e:	609a      	str	r2, [r3, #8]
 800a510:	60da      	str	r2, [r3, #12]
 800a512:	611a      	str	r2, [r3, #16]
 800a514:	615a      	str	r2, [r3, #20]
 800a516:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a518:	1d3b      	adds	r3, r7, #4
 800a51a:	222c      	movs	r2, #44	; 0x2c
 800a51c:	2100      	movs	r1, #0
 800a51e:	4618      	mov	r0, r3
 800a520:	f001 f94c 	bl	800b7bc <memset>

  htim15.Instance = TIM15;
 800a524:	4b44      	ldr	r3, [pc, #272]	; (800a638 <MX_TIM15_Init+0x154>)
 800a526:	4a45      	ldr	r2, [pc, #276]	; (800a63c <MX_TIM15_Init+0x158>)
 800a528:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80;
 800a52a:	4b43      	ldr	r3, [pc, #268]	; (800a638 <MX_TIM15_Init+0x154>)
 800a52c:	2250      	movs	r2, #80	; 0x50
 800a52e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a530:	4b41      	ldr	r3, [pc, #260]	; (800a638 <MX_TIM15_Init+0x154>)
 800a532:	2200      	movs	r2, #0
 800a534:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 0;
 800a536:	4b40      	ldr	r3, [pc, #256]	; (800a638 <MX_TIM15_Init+0x154>)
 800a538:	2200      	movs	r2, #0
 800a53a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a53c:	4b3e      	ldr	r3, [pc, #248]	; (800a638 <MX_TIM15_Init+0x154>)
 800a53e:	2200      	movs	r2, #0
 800a540:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800a542:	4b3d      	ldr	r3, [pc, #244]	; (800a638 <MX_TIM15_Init+0x154>)
 800a544:	2200      	movs	r2, #0
 800a546:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a548:	4b3b      	ldr	r3, [pc, #236]	; (800a638 <MX_TIM15_Init+0x154>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800a54e:	483a      	ldr	r0, [pc, #232]	; (800a638 <MX_TIM15_Init+0x154>)
 800a550:	f7f9 feae 	bl	80042b0 <HAL_TIM_Base_Init>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d001      	beq.n	800a55e <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 800a55a:	f7ff fd71 	bl	800a040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a55e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a562:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800a564:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a568:	4619      	mov	r1, r3
 800a56a:	4833      	ldr	r0, [pc, #204]	; (800a638 <MX_TIM15_Init+0x154>)
 800a56c:	f7fa f9f4 	bl	8004958 <HAL_TIM_ConfigClockSource>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d001      	beq.n	800a57a <MX_TIM15_Init+0x96>
  {
    Error_Handler();
 800a576:	f7ff fd63 	bl	800a040 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800a57a:	482f      	ldr	r0, [pc, #188]	; (800a638 <MX_TIM15_Init+0x154>)
 800a57c:	f7f9 fec3 	bl	8004306 <HAL_TIM_PWM_Init>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d001      	beq.n	800a58a <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 800a586:	f7ff fd5b 	bl	800a040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a58a:	2300      	movs	r3, #0
 800a58c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a58e:	2300      	movs	r3, #0
 800a590:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800a592:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a596:	4619      	mov	r1, r3
 800a598:	4827      	ldr	r0, [pc, #156]	; (800a638 <MX_TIM15_Init+0x154>)
 800a59a:	f7fa ff69 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 800a5a4:	f7ff fd4c 	bl	800a040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a5a8:	2360      	movs	r3, #96	; 0x60
 800a5aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a5c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	481a      	ldr	r0, [pc, #104]	; (800a638 <MX_TIM15_Init+0x154>)
 800a5ce:	f7fa f8ab 	bl	8004728 <HAL_TIM_PWM_ConfigChannel>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d001      	beq.n	800a5dc <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 800a5d8:	f7ff fd32 	bl	800a040 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a5dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a5e0:	2204      	movs	r2, #4
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	4814      	ldr	r0, [pc, #80]	; (800a638 <MX_TIM15_Init+0x154>)
 800a5e6:	f7fa f89f 	bl	8004728 <HAL_TIM_PWM_ConfigChannel>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d001      	beq.n	800a5f4 <MX_TIM15_Init+0x110>
  {
    Error_Handler();
 800a5f0:	f7ff fd26 	bl	800a040 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a600:	2300      	movs	r3, #0
 800a602:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a604:	2300      	movs	r3, #0
 800a606:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a60c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a612:	2300      	movs	r3, #0
 800a614:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800a616:	1d3b      	adds	r3, r7, #4
 800a618:	4619      	mov	r1, r3
 800a61a:	4807      	ldr	r0, [pc, #28]	; (800a638 <MX_TIM15_Init+0x154>)
 800a61c:	f7fa ff7e 	bl	800551c <HAL_TIMEx_ConfigBreakDeadTime>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d001      	beq.n	800a62a <MX_TIM15_Init+0x146>
  {
    Error_Handler();
 800a626:	f7ff fd0b 	bl	800a040 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim15);
 800a62a:	4803      	ldr	r0, [pc, #12]	; (800a638 <MX_TIM15_Init+0x154>)
 800a62c:	f000 f94c 	bl	800a8c8 <HAL_TIM_MspPostInit>

}
 800a630:	bf00      	nop
 800a632:	3768      	adds	r7, #104	; 0x68
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	200016f4 	.word	0x200016f4
 800a63c:	40014000 	.word	0x40014000

0800a640 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800a644:	4b0f      	ldr	r3, [pc, #60]	; (800a684 <MX_TIM16_Init+0x44>)
 800a646:	4a10      	ldr	r2, [pc, #64]	; (800a688 <MX_TIM16_Init+0x48>)
 800a648:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8;
 800a64a:	4b0e      	ldr	r3, [pc, #56]	; (800a684 <MX_TIM16_Init+0x44>)
 800a64c:	2208      	movs	r2, #8
 800a64e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a650:	4b0c      	ldr	r3, [pc, #48]	; (800a684 <MX_TIM16_Init+0x44>)
 800a652:	2200      	movs	r2, #0
 800a654:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50;
 800a656:	4b0b      	ldr	r3, [pc, #44]	; (800a684 <MX_TIM16_Init+0x44>)
 800a658:	2232      	movs	r2, #50	; 0x32
 800a65a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a65c:	4b09      	ldr	r3, [pc, #36]	; (800a684 <MX_TIM16_Init+0x44>)
 800a65e:	2200      	movs	r2, #0
 800a660:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800a662:	4b08      	ldr	r3, [pc, #32]	; (800a684 <MX_TIM16_Init+0x44>)
 800a664:	2200      	movs	r2, #0
 800a666:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a668:	4b06      	ldr	r3, [pc, #24]	; (800a684 <MX_TIM16_Init+0x44>)
 800a66a:	2200      	movs	r2, #0
 800a66c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800a66e:	4805      	ldr	r0, [pc, #20]	; (800a684 <MX_TIM16_Init+0x44>)
 800a670:	f7f9 fe1e 	bl	80042b0 <HAL_TIM_Base_Init>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800a67a:	f7ff fce1 	bl	800a040 <Error_Handler>
  }

}
 800a67e:	bf00      	nop
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	20001834 	.word	0x20001834
 800a688:	40014400 	.word	0x40014400

0800a68c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a19      	ldr	r2, [pc, #100]	; (800a700 <HAL_TIM_PWM_MspInit+0x74>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d12b      	bne.n	800a6f6 <HAL_TIM_PWM_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a69e:	4a19      	ldr	r2, [pc, #100]	; (800a704 <HAL_TIM_PWM_MspInit+0x78>)
 800a6a0:	4b18      	ldr	r3, [pc, #96]	; (800a704 <HAL_TIM_PWM_MspInit+0x78>)
 800a6a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a6a8:	6613      	str	r3, [r2, #96]	; 0x60
 800a6aa:	4b16      	ldr	r3, [pc, #88]	; (800a704 <HAL_TIM_PWM_MspInit+0x78>)
 800a6ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6b2:	60fb      	str	r3, [r7, #12]
 800a6b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	2100      	movs	r1, #0
 800a6ba:	2018      	movs	r0, #24
 800a6bc:	f7f6 fe49 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800a6c0:	2018      	movs	r0, #24
 800a6c2:	f7f6 fe62 	bl	800138a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	2019      	movs	r0, #25
 800a6cc:	f7f6 fe41 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a6d0:	2019      	movs	r0, #25
 800a6d2:	f7f6 fe5a 	bl	800138a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	2100      	movs	r1, #0
 800a6da:	201a      	movs	r0, #26
 800a6dc:	f7f6 fe39 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800a6e0:	201a      	movs	r0, #26
 800a6e2:	f7f6 fe52 	bl	800138a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	201b      	movs	r0, #27
 800a6ec:	f7f6 fe31 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800a6f0:	201b      	movs	r0, #27
 800a6f2:	f7f6 fe4a 	bl	800138a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800a6f6:	bf00      	nop
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	40012c00 	.word	0x40012c00
 800a704:	40021000 	.word	0x40021000

0800a708 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b08c      	sub	sp, #48	; 0x30
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a710:	f107 031c 	add.w	r3, r7, #28
 800a714:	2200      	movs	r2, #0
 800a716:	601a      	str	r2, [r3, #0]
 800a718:	605a      	str	r2, [r3, #4]
 800a71a:	609a      	str	r2, [r3, #8]
 800a71c:	60da      	str	r2, [r3, #12]
 800a71e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a728:	d131      	bne.n	800a78e <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a72a:	4a35      	ldr	r2, [pc, #212]	; (800a800 <HAL_TIM_IC_MspInit+0xf8>)
 800a72c:	4b34      	ldr	r3, [pc, #208]	; (800a800 <HAL_TIM_IC_MspInit+0xf8>)
 800a72e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a730:	f043 0301 	orr.w	r3, r3, #1
 800a734:	6593      	str	r3, [r2, #88]	; 0x58
 800a736:	4b32      	ldr	r3, [pc, #200]	; (800a800 <HAL_TIM_IC_MspInit+0xf8>)
 800a738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	61bb      	str	r3, [r7, #24]
 800a740:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a742:	4a2f      	ldr	r2, [pc, #188]	; (800a800 <HAL_TIM_IC_MspInit+0xf8>)
 800a744:	4b2e      	ldr	r3, [pc, #184]	; (800a800 <HAL_TIM_IC_MspInit+0xf8>)
 800a746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a748:	f043 0301 	orr.w	r3, r3, #1
 800a74c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a74e:	4b2c      	ldr	r3, [pc, #176]	; (800a800 <HAL_TIM_IC_MspInit+0xf8>)
 800a750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a752:	f003 0301 	and.w	r3, r3, #1
 800a756:	617b      	str	r3, [r7, #20]
 800a758:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a75a:	2303      	movs	r3, #3
 800a75c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a75e:	2302      	movs	r3, #2
 800a760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a762:	2300      	movs	r3, #0
 800a764:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a766:	2300      	movs	r3, #0
 800a768:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a76a:	2301      	movs	r3, #1
 800a76c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a76e:	f107 031c 	add.w	r3, r7, #28
 800a772:	4619      	mov	r1, r3
 800a774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a778:	f7f6 fe22 	bl	80013c0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800a77c:	2200      	movs	r2, #0
 800a77e:	2100      	movs	r1, #0
 800a780:	201c      	movs	r0, #28
 800a782:	f7f6 fde6 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a786:	201c      	movs	r0, #28
 800a788:	f7f6 fdff 	bl	800138a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800a78c:	e034      	b.n	800a7f8 <HAL_TIM_IC_MspInit+0xf0>
  else if(tim_icHandle->Instance==TIM3)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a1c      	ldr	r2, [pc, #112]	; (800a804 <HAL_TIM_IC_MspInit+0xfc>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d12f      	bne.n	800a7f8 <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a798:	4a19      	ldr	r2, [pc, #100]	; (800a800 <HAL_TIM_IC_MspInit+0xf8>)
 800a79a:	4b19      	ldr	r3, [pc, #100]	; (800a800 <HAL_TIM_IC_MspInit+0xf8>)
 800a79c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a79e:	f043 0302 	orr.w	r3, r3, #2
 800a7a2:	6593      	str	r3, [r2, #88]	; 0x58
 800a7a4:	4b16      	ldr	r3, [pc, #88]	; (800a800 <HAL_TIM_IC_MspInit+0xf8>)
 800a7a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7a8:	f003 0302 	and.w	r3, r3, #2
 800a7ac:	613b      	str	r3, [r7, #16]
 800a7ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a7b0:	4a13      	ldr	r2, [pc, #76]	; (800a800 <HAL_TIM_IC_MspInit+0xf8>)
 800a7b2:	4b13      	ldr	r3, [pc, #76]	; (800a800 <HAL_TIM_IC_MspInit+0xf8>)
 800a7b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7b6:	f043 0302 	orr.w	r3, r3, #2
 800a7ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a7bc:	4b10      	ldr	r3, [pc, #64]	; (800a800 <HAL_TIM_IC_MspInit+0xf8>)
 800a7be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7c0:	f003 0302 	and.w	r3, r3, #2
 800a7c4:	60fb      	str	r3, [r7, #12]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800a7c8:	2330      	movs	r3, #48	; 0x30
 800a7ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a7d8:	2302      	movs	r3, #2
 800a7da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a7dc:	f107 031c 	add.w	r3, r7, #28
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4809      	ldr	r0, [pc, #36]	; (800a808 <HAL_TIM_IC_MspInit+0x100>)
 800a7e4:	f7f6 fdec 	bl	80013c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	201d      	movs	r0, #29
 800a7ee:	f7f6 fdb0 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a7f2:	201d      	movs	r0, #29
 800a7f4:	f7f6 fdc9 	bl	800138a <HAL_NVIC_EnableIRQ>
}
 800a7f8:	bf00      	nop
 800a7fa:	3730      	adds	r7, #48	; 0x30
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	40021000 	.word	0x40021000
 800a804:	40000400 	.word	0x40000400
 800a808:	48000400 	.word	0x48000400

0800a80c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b086      	sub	sp, #24
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a27      	ldr	r2, [pc, #156]	; (800a8b8 <HAL_TIM_Base_MspInit+0xac>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d114      	bne.n	800a848 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800a81e:	4a27      	ldr	r2, [pc, #156]	; (800a8bc <HAL_TIM_Base_MspInit+0xb0>)
 800a820:	4b26      	ldr	r3, [pc, #152]	; (800a8bc <HAL_TIM_Base_MspInit+0xb0>)
 800a822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a824:	f043 0310 	orr.w	r3, r3, #16
 800a828:	6593      	str	r3, [r2, #88]	; 0x58
 800a82a:	4b24      	ldr	r3, [pc, #144]	; (800a8bc <HAL_TIM_Base_MspInit+0xb0>)
 800a82c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a82e:	f003 0310 	and.w	r3, r3, #16
 800a832:	617b      	str	r3, [r7, #20]
 800a834:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800a836:	2200      	movs	r2, #0
 800a838:	2100      	movs	r1, #0
 800a83a:	2036      	movs	r0, #54	; 0x36
 800a83c:	f7f6 fd89 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a840:	2036      	movs	r0, #54	; 0x36
 800a842:	f7f6 fda2 	bl	800138a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800a846:	e032      	b.n	800a8ae <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM15)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a1c      	ldr	r2, [pc, #112]	; (800a8c0 <HAL_TIM_Base_MspInit+0xb4>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d114      	bne.n	800a87c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800a852:	4a1a      	ldr	r2, [pc, #104]	; (800a8bc <HAL_TIM_Base_MspInit+0xb0>)
 800a854:	4b19      	ldr	r3, [pc, #100]	; (800a8bc <HAL_TIM_Base_MspInit+0xb0>)
 800a856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a85c:	6613      	str	r3, [r2, #96]	; 0x60
 800a85e:	4b17      	ldr	r3, [pc, #92]	; (800a8bc <HAL_TIM_Base_MspInit+0xb0>)
 800a860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a866:	613b      	str	r3, [r7, #16]
 800a868:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800a86a:	2200      	movs	r2, #0
 800a86c:	2100      	movs	r1, #0
 800a86e:	2018      	movs	r0, #24
 800a870:	f7f6 fd6f 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800a874:	2018      	movs	r0, #24
 800a876:	f7f6 fd88 	bl	800138a <HAL_NVIC_EnableIRQ>
}
 800a87a:	e018      	b.n	800a8ae <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM16)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a10      	ldr	r2, [pc, #64]	; (800a8c4 <HAL_TIM_Base_MspInit+0xb8>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d113      	bne.n	800a8ae <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800a886:	4a0d      	ldr	r2, [pc, #52]	; (800a8bc <HAL_TIM_Base_MspInit+0xb0>)
 800a888:	4b0c      	ldr	r3, [pc, #48]	; (800a8bc <HAL_TIM_Base_MspInit+0xb0>)
 800a88a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a88c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a890:	6613      	str	r3, [r2, #96]	; 0x60
 800a892:	4b0a      	ldr	r3, [pc, #40]	; (800a8bc <HAL_TIM_Base_MspInit+0xb0>)
 800a894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a89a:	60fb      	str	r3, [r7, #12]
 800a89c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800a89e:	2200      	movs	r2, #0
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	2019      	movs	r0, #25
 800a8a4:	f7f6 fd55 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a8a8:	2019      	movs	r0, #25
 800a8aa:	f7f6 fd6e 	bl	800138a <HAL_NVIC_EnableIRQ>
}
 800a8ae:	bf00      	nop
 800a8b0:	3718      	adds	r7, #24
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	40001000 	.word	0x40001000
 800a8bc:	40021000 	.word	0x40021000
 800a8c0:	40014000 	.word	0x40014000
 800a8c4:	40014400 	.word	0x40014400

0800a8c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b08a      	sub	sp, #40	; 0x28
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8d0:	f107 0314 	add.w	r3, r7, #20
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	601a      	str	r2, [r3, #0]
 800a8d8:	605a      	str	r2, [r3, #4]
 800a8da:	609a      	str	r2, [r3, #8]
 800a8dc:	60da      	str	r2, [r3, #12]
 800a8de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a23      	ldr	r2, [pc, #140]	; (800a974 <HAL_TIM_MspPostInit+0xac>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d11e      	bne.n	800a928 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8ea:	4a23      	ldr	r2, [pc, #140]	; (800a978 <HAL_TIM_MspPostInit+0xb0>)
 800a8ec:	4b22      	ldr	r3, [pc, #136]	; (800a978 <HAL_TIM_MspPostInit+0xb0>)
 800a8ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8f0:	f043 0301 	orr.w	r3, r3, #1
 800a8f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a8f6:	4b20      	ldr	r3, [pc, #128]	; (800a978 <HAL_TIM_MspPostInit+0xb0>)
 800a8f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8fa:	f003 0301 	and.w	r3, r3, #1
 800a8fe:	613b      	str	r3, [r7, #16]
 800a900:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = O_PWM_LED3_Pin;
 800a902:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a908:	2302      	movs	r3, #2
 800a90a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a90c:	2300      	movs	r3, #0
 800a90e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a910:	2300      	movs	r3, #0
 800a912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a914:	2301      	movs	r3, #1
 800a916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(O_PWM_LED3_GPIO_Port, &GPIO_InitStruct);
 800a918:	f107 0314 	add.w	r3, r7, #20
 800a91c:	4619      	mov	r1, r3
 800a91e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a922:	f7f6 fd4d 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800a926:	e021      	b.n	800a96c <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM15)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a13      	ldr	r2, [pc, #76]	; (800a97c <HAL_TIM_MspPostInit+0xb4>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d11c      	bne.n	800a96c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a932:	4a11      	ldr	r2, [pc, #68]	; (800a978 <HAL_TIM_MspPostInit+0xb0>)
 800a934:	4b10      	ldr	r3, [pc, #64]	; (800a978 <HAL_TIM_MspPostInit+0xb0>)
 800a936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a938:	f043 0302 	orr.w	r3, r3, #2
 800a93c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a93e:	4b0e      	ldr	r3, [pc, #56]	; (800a978 <HAL_TIM_MspPostInit+0xb0>)
 800a940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a942:	f003 0302 	and.w	r3, r3, #2
 800a946:	60fb      	str	r3, [r7, #12]
 800a948:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = O_PWM_LED2_Pin|O_PWM_LED1_Pin;
 800a94a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a94e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a950:	2302      	movs	r3, #2
 800a952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a954:	2300      	movs	r3, #0
 800a956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a958:	2300      	movs	r3, #0
 800a95a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800a95c:	230e      	movs	r3, #14
 800a95e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a960:	f107 0314 	add.w	r3, r7, #20
 800a964:	4619      	mov	r1, r3
 800a966:	4806      	ldr	r0, [pc, #24]	; (800a980 <HAL_TIM_MspPostInit+0xb8>)
 800a968:	f7f6 fd2a 	bl	80013c0 <HAL_GPIO_Init>
}
 800a96c:	bf00      	nop
 800a96e:	3728      	adds	r7, #40	; 0x28
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	40012c00 	.word	0x40012c00
 800a978:	40021000 	.word	0x40021000
 800a97c:	40014000 	.word	0x40014000
 800a980:	48000400 	.word	0x48000400

0800a984 <tim_setNewTimeAndStart>:
  /* USER CODE END TIM16_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void tim_setNewTimeAndStart(TIM_TypeDef *tim, uint32_t time){
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
	tim->CR1 &= ~TIM_CR1_CEN;	//Stop counter
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f023 0201 	bic.w	r2, r3, #1
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	601a      	str	r2, [r3, #0]
	tim->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f043 0202 	orr.w	r2, r3, #2
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	601a      	str	r2, [r3, #0]
	tim->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	691b      	ldr	r3, [r3, #16]
 800a9aa:	f023 0201 	bic.w	r2, r3, #1
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	611a      	str	r2, [r3, #16]
	tim->ARR = time;				//Load new time
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	683a      	ldr	r2, [r7, #0]
 800a9b6:	62da      	str	r2, [r3, #44]	; 0x2c
	tim->EGR |= TIM_EGR_UG;		//Force reload of shadow register -> Start from beginning
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	f043 0201 	orr.w	r2, r3, #1
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	615a      	str	r2, [r3, #20]
	tim->CR1 &= ~TIM_CR1_UDIS;	//Allow new updates to be triggered
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f023 0202 	bic.w	r2, r3, #2
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	601a      	str	r2, [r3, #0]
	tim->DIER |= TIM_DIER_UIE;	//Enable update interrupts
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	f043 0201 	orr.w	r2, r3, #1
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	60da      	str	r2, [r3, #12]
	tim->CR1 |= TIM_CR1_CEN;		//Enable counter
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f043 0201 	orr.w	r2, r3, #1
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	601a      	str	r2, [r3, #0]
}
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <tim_stop>:
void tim_stop(TIM_TypeDef *tim){
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
	tim->CR1 &= ~TIM_CR1_CEN;	//Stop counter
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f023 0201 	bic.w	r2, r3, #1
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	601a      	str	r2, [r3, #0]
	tim->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f043 0202 	orr.w	r2, r3, #2
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	601a      	str	r2, [r3, #0]
	tim->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	f023 0201 	bic.w	r2, r3, #1
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	611a      	str	r2, [r3, #16]
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800aa30:	4b14      	ldr	r3, [pc, #80]	; (800aa84 <MX_UART4_Init+0x58>)
 800aa32:	4a15      	ldr	r2, [pc, #84]	; (800aa88 <MX_UART4_Init+0x5c>)
 800aa34:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800aa36:	4b13      	ldr	r3, [pc, #76]	; (800aa84 <MX_UART4_Init+0x58>)
 800aa38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800aa3c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800aa3e:	4b11      	ldr	r3, [pc, #68]	; (800aa84 <MX_UART4_Init+0x58>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800aa44:	4b0f      	ldr	r3, [pc, #60]	; (800aa84 <MX_UART4_Init+0x58>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800aa4a:	4b0e      	ldr	r3, [pc, #56]	; (800aa84 <MX_UART4_Init+0x58>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800aa50:	4b0c      	ldr	r3, [pc, #48]	; (800aa84 <MX_UART4_Init+0x58>)
 800aa52:	220c      	movs	r2, #12
 800aa54:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aa56:	4b0b      	ldr	r3, [pc, #44]	; (800aa84 <MX_UART4_Init+0x58>)
 800aa58:	2200      	movs	r2, #0
 800aa5a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800aa5c:	4b09      	ldr	r3, [pc, #36]	; (800aa84 <MX_UART4_Init+0x58>)
 800aa5e:	2200      	movs	r2, #0
 800aa60:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800aa62:	4b08      	ldr	r3, [pc, #32]	; (800aa84 <MX_UART4_Init+0x58>)
 800aa64:	2200      	movs	r2, #0
 800aa66:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800aa68:	4b06      	ldr	r3, [pc, #24]	; (800aa84 <MX_UART4_Init+0x58>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800aa6e:	4805      	ldr	r0, [pc, #20]	; (800aa84 <MX_UART4_Init+0x58>)
 800aa70:	f7fa fdea 	bl	8005648 <HAL_UART_Init>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d001      	beq.n	800aa7e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800aa7a:	f7ff fae1 	bl	800a040 <Error_Handler>
  }

}
 800aa7e:	bf00      	nop
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	200018ec 	.word	0x200018ec
 800aa88:	40004c00 	.word	0x40004c00

0800aa8c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800aa90:	4b14      	ldr	r3, [pc, #80]	; (800aae4 <MX_USART1_UART_Init+0x58>)
 800aa92:	4a15      	ldr	r2, [pc, #84]	; (800aae8 <MX_USART1_UART_Init+0x5c>)
 800aa94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 800aa96:	4b13      	ldr	r3, [pc, #76]	; (800aae4 <MX_USART1_UART_Init+0x58>)
 800aa98:	4a14      	ldr	r2, [pc, #80]	; (800aaec <MX_USART1_UART_Init+0x60>)
 800aa9a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800aa9c:	4b11      	ldr	r3, [pc, #68]	; (800aae4 <MX_USART1_UART_Init+0x58>)
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 800aaa2:	4b10      	ldr	r3, [pc, #64]	; (800aae4 <MX_USART1_UART_Init+0x58>)
 800aaa4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800aaa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800aaaa:	4b0e      	ldr	r3, [pc, #56]	; (800aae4 <MX_USART1_UART_Init+0x58>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800aab0:	4b0c      	ldr	r3, [pc, #48]	; (800aae4 <MX_USART1_UART_Init+0x58>)
 800aab2:	220c      	movs	r2, #12
 800aab4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aab6:	4b0b      	ldr	r3, [pc, #44]	; (800aae4 <MX_USART1_UART_Init+0x58>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800aabc:	4b09      	ldr	r3, [pc, #36]	; (800aae4 <MX_USART1_UART_Init+0x58>)
 800aabe:	2200      	movs	r2, #0
 800aac0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800aac2:	4b08      	ldr	r3, [pc, #32]	; (800aae4 <MX_USART1_UART_Init+0x58>)
 800aac4:	2200      	movs	r2, #0
 800aac6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800aac8:	4b06      	ldr	r3, [pc, #24]	; (800aae4 <MX_USART1_UART_Init+0x58>)
 800aaca:	2200      	movs	r2, #0
 800aacc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800aace:	4805      	ldr	r0, [pc, #20]	; (800aae4 <MX_USART1_UART_Init+0x58>)
 800aad0:	f7fa fdba 	bl	8005648 <HAL_UART_Init>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d001      	beq.n	800aade <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800aada:	f7ff fab1 	bl	800a040 <Error_Handler>
  }

}
 800aade:	bf00      	nop
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	20001874 	.word	0x20001874
 800aae8:	40013800 	.word	0x40013800
 800aaec:	0003d090 	.word	0x0003d090

0800aaf0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800aaf4:	4b14      	ldr	r3, [pc, #80]	; (800ab48 <MX_USART2_UART_Init+0x58>)
 800aaf6:	4a15      	ldr	r2, [pc, #84]	; (800ab4c <MX_USART2_UART_Init+0x5c>)
 800aaf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 800aafa:	4b13      	ldr	r3, [pc, #76]	; (800ab48 <MX_USART2_UART_Init+0x58>)
 800aafc:	4a14      	ldr	r2, [pc, #80]	; (800ab50 <MX_USART2_UART_Init+0x60>)
 800aafe:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800ab00:	4b11      	ldr	r3, [pc, #68]	; (800ab48 <MX_USART2_UART_Init+0x58>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800ab06:	4b10      	ldr	r3, [pc, #64]	; (800ab48 <MX_USART2_UART_Init+0x58>)
 800ab08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ab0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800ab0e:	4b0e      	ldr	r3, [pc, #56]	; (800ab48 <MX_USART2_UART_Init+0x58>)
 800ab10:	2200      	movs	r2, #0
 800ab12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ab14:	4b0c      	ldr	r3, [pc, #48]	; (800ab48 <MX_USART2_UART_Init+0x58>)
 800ab16:	220c      	movs	r2, #12
 800ab18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ab1a:	4b0b      	ldr	r3, [pc, #44]	; (800ab48 <MX_USART2_UART_Init+0x58>)
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ab20:	4b09      	ldr	r3, [pc, #36]	; (800ab48 <MX_USART2_UART_Init+0x58>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ab26:	4b08      	ldr	r3, [pc, #32]	; (800ab48 <MX_USART2_UART_Init+0x58>)
 800ab28:	2200      	movs	r2, #0
 800ab2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ab2c:	4b06      	ldr	r3, [pc, #24]	; (800ab48 <MX_USART2_UART_Init+0x58>)
 800ab2e:	2200      	movs	r2, #0
 800ab30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800ab32:	4805      	ldr	r0, [pc, #20]	; (800ab48 <MX_USART2_UART_Init+0x58>)
 800ab34:	f7fa fd88 	bl	8005648 <HAL_UART_Init>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d001      	beq.n	800ab42 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800ab3e:	f7ff fa7f 	bl	800a040 <Error_Handler>
  }

}
 800ab42:	bf00      	nop
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	20001964 	.word	0x20001964
 800ab4c:	40004400 	.word	0x40004400
 800ab50:	0003d090 	.word	0x0003d090

0800ab54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b08e      	sub	sp, #56	; 0x38
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab60:	2200      	movs	r2, #0
 800ab62:	601a      	str	r2, [r3, #0]
 800ab64:	605a      	str	r2, [r3, #4]
 800ab66:	609a      	str	r2, [r3, #8]
 800ab68:	60da      	str	r2, [r3, #12]
 800ab6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a52      	ldr	r2, [pc, #328]	; (800acbc <HAL_UART_MspInit+0x168>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d131      	bne.n	800abda <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800ab76:	4a52      	ldr	r2, [pc, #328]	; (800acc0 <HAL_UART_MspInit+0x16c>)
 800ab78:	4b51      	ldr	r3, [pc, #324]	; (800acc0 <HAL_UART_MspInit+0x16c>)
 800ab7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab80:	6593      	str	r3, [r2, #88]	; 0x58
 800ab82:	4b4f      	ldr	r3, [pc, #316]	; (800acc0 <HAL_UART_MspInit+0x16c>)
 800ab84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab8a:	623b      	str	r3, [r7, #32]
 800ab8c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ab8e:	4a4c      	ldr	r2, [pc, #304]	; (800acc0 <HAL_UART_MspInit+0x16c>)
 800ab90:	4b4b      	ldr	r3, [pc, #300]	; (800acc0 <HAL_UART_MspInit+0x16c>)
 800ab92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab94:	f043 0304 	orr.w	r3, r3, #4
 800ab98:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab9a:	4b49      	ldr	r3, [pc, #292]	; (800acc0 <HAL_UART_MspInit+0x16c>)
 800ab9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab9e:	f003 0304 	and.w	r3, r3, #4
 800aba2:	61fb      	str	r3, [r7, #28]
 800aba4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800aba6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800abaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abac:	2302      	movs	r3, #2
 800abae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abb0:	2300      	movs	r3, #0
 800abb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abb4:	2303      	movs	r3, #3
 800abb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800abb8:	2308      	movs	r3, #8
 800abba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800abbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abc0:	4619      	mov	r1, r3
 800abc2:	4840      	ldr	r0, [pc, #256]	; (800acc4 <HAL_UART_MspInit+0x170>)
 800abc4:	f7f6 fbfc 	bl	80013c0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800abc8:	2200      	movs	r2, #0
 800abca:	2100      	movs	r1, #0
 800abcc:	2034      	movs	r0, #52	; 0x34
 800abce:	f7f6 fbc0 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800abd2:	2034      	movs	r0, #52	; 0x34
 800abd4:	f7f6 fbd9 	bl	800138a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800abd8:	e06b      	b.n	800acb2 <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART1)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a3a      	ldr	r2, [pc, #232]	; (800acc8 <HAL_UART_MspInit+0x174>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d130      	bne.n	800ac46 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 800abe4:	4a36      	ldr	r2, [pc, #216]	; (800acc0 <HAL_UART_MspInit+0x16c>)
 800abe6:	4b36      	ldr	r3, [pc, #216]	; (800acc0 <HAL_UART_MspInit+0x16c>)
 800abe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800abee:	6613      	str	r3, [r2, #96]	; 0x60
 800abf0:	4b33      	ldr	r3, [pc, #204]	; (800acc0 <HAL_UART_MspInit+0x16c>)
 800abf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abf8:	61bb      	str	r3, [r7, #24]
 800abfa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800abfc:	4a30      	ldr	r2, [pc, #192]	; (800acc0 <HAL_UART_MspInit+0x16c>)
 800abfe:	4b30      	ldr	r3, [pc, #192]	; (800acc0 <HAL_UART_MspInit+0x16c>)
 800ac00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac02:	f043 0302 	orr.w	r3, r3, #2
 800ac06:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac08:	4b2d      	ldr	r3, [pc, #180]	; (800acc0 <HAL_UART_MspInit+0x16c>)
 800ac0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac0c:	f003 0302 	and.w	r3, r3, #2
 800ac10:	617b      	str	r3, [r7, #20]
 800ac12:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ac14:	23c0      	movs	r3, #192	; 0xc0
 800ac16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac18:	2302      	movs	r3, #2
 800ac1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac20:	2303      	movs	r3, #3
 800ac22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ac24:	2307      	movs	r3, #7
 800ac26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ac28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	4827      	ldr	r0, [pc, #156]	; (800accc <HAL_UART_MspInit+0x178>)
 800ac30:	f7f6 fbc6 	bl	80013c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800ac34:	2200      	movs	r2, #0
 800ac36:	2101      	movs	r1, #1
 800ac38:	2025      	movs	r0, #37	; 0x25
 800ac3a:	f7f6 fb8a 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800ac3e:	2025      	movs	r0, #37	; 0x25
 800ac40:	f7f6 fba3 	bl	800138a <HAL_NVIC_EnableIRQ>
}
 800ac44:	e035      	b.n	800acb2 <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART2)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a21      	ldr	r2, [pc, #132]	; (800acd0 <HAL_UART_MspInit+0x17c>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d130      	bne.n	800acb2 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800ac50:	4a1b      	ldr	r2, [pc, #108]	; (800acc0 <HAL_UART_MspInit+0x16c>)
 800ac52:	4b1b      	ldr	r3, [pc, #108]	; (800acc0 <HAL_UART_MspInit+0x16c>)
 800ac54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac5a:	6593      	str	r3, [r2, #88]	; 0x58
 800ac5c:	4b18      	ldr	r3, [pc, #96]	; (800acc0 <HAL_UART_MspInit+0x16c>)
 800ac5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac64:	613b      	str	r3, [r7, #16]
 800ac66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac68:	4a15      	ldr	r2, [pc, #84]	; (800acc0 <HAL_UART_MspInit+0x16c>)
 800ac6a:	4b15      	ldr	r3, [pc, #84]	; (800acc0 <HAL_UART_MspInit+0x16c>)
 800ac6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac6e:	f043 0301 	orr.w	r3, r3, #1
 800ac72:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac74:	4b12      	ldr	r3, [pc, #72]	; (800acc0 <HAL_UART_MspInit+0x16c>)
 800ac76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac78:	f003 0301 	and.w	r3, r3, #1
 800ac7c:	60fb      	str	r3, [r7, #12]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800ac80:	230c      	movs	r3, #12
 800ac82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac84:	2302      	movs	r3, #2
 800ac86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac8c:	2303      	movs	r3, #3
 800ac8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ac90:	2307      	movs	r3, #7
 800ac92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac98:	4619      	mov	r1, r3
 800ac9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ac9e:	f7f6 fb8f 	bl	80013c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800aca2:	2200      	movs	r2, #0
 800aca4:	2100      	movs	r1, #0
 800aca6:	2026      	movs	r0, #38	; 0x26
 800aca8:	f7f6 fb53 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800acac:	2026      	movs	r0, #38	; 0x26
 800acae:	f7f6 fb6c 	bl	800138a <HAL_NVIC_EnableIRQ>
}
 800acb2:	bf00      	nop
 800acb4:	3738      	adds	r7, #56	; 0x38
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	40004c00 	.word	0x40004c00
 800acc0:	40021000 	.word	0x40021000
 800acc4:	48000800 	.word	0x48000800
 800acc8:	40013800 	.word	0x40013800
 800accc:	48000400 	.word	0x48000400
 800acd0:	40004400 	.word	0x40004400

0800acd4 <uart_enableReceiveInt>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void uart_enableReceiveInt(USART_TypeDef *uartHandler){
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
	uartHandler->CR1 |= USART_CR1_RXNEIE;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f043 0220 	orr.w	r2, r3, #32
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	601a      	str	r2, [r3, #0]
}
 800ace8:	bf00      	nop
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800acf8:	2200      	movs	r2, #0
 800acfa:	490b      	ldr	r1, [pc, #44]	; (800ad28 <MX_USB_DEVICE_Init+0x34>)
 800acfc:	480b      	ldr	r0, [pc, #44]	; (800ad2c <MX_USB_DEVICE_Init+0x38>)
 800acfe:	f7fd fe2c 	bl	800895a <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 800ad02:	490b      	ldr	r1, [pc, #44]	; (800ad30 <MX_USB_DEVICE_Init+0x3c>)
 800ad04:	4809      	ldr	r0, [pc, #36]	; (800ad2c <MX_USB_DEVICE_Init+0x38>)
 800ad06:	f7fd fe53 	bl	80089b0 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800ad0a:	490a      	ldr	r1, [pc, #40]	; (800ad34 <MX_USB_DEVICE_Init+0x40>)
 800ad0c:	4807      	ldr	r0, [pc, #28]	; (800ad2c <MX_USB_DEVICE_Init+0x38>)
 800ad0e:	f7fd fdb5 	bl	800887c <USBD_CDC_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 800ad12:	4806      	ldr	r0, [pc, #24]	; (800ad2c <MX_USB_DEVICE_Init+0x38>)
 800ad14:	f000 fc2c 	bl	800b570 <USBD_LL_BatteryCharging>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d002      	beq.n	800ad24 <MX_USB_DEVICE_Init+0x30>
  USBD_Start(&hUsbDeviceFS);
 800ad1e:	4803      	ldr	r0, [pc, #12]	; (800ad2c <MX_USB_DEVICE_Init+0x38>)
 800ad20:	f7fd fe60 	bl	80089e4 <USBD_Start>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ad24:	bf00      	nop
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	200005a8 	.word	0x200005a8
 800ad2c:	200019dc 	.word	0x200019dc
 800ad30:	20000490 	.word	0x20000490
 800ad34:	20000598 	.word	0x20000598

0800ad38 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	4905      	ldr	r1, [pc, #20]	; (800ad54 <CDC_Init_FS+0x1c>)
 800ad40:	4805      	ldr	r0, [pc, #20]	; (800ad58 <CDC_Init_FS+0x20>)
 800ad42:	f7fd fdb2 	bl	80088aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ad46:	4905      	ldr	r1, [pc, #20]	; (800ad5c <CDC_Init_FS+0x24>)
 800ad48:	4803      	ldr	r0, [pc, #12]	; (800ad58 <CDC_Init_FS+0x20>)
 800ad4a:	f7fd fdc8 	bl	80088de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ad4e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	20002478 	.word	0x20002478
 800ad58:	200019dc 	.word	0x200019dc
 800ad5c:	20001c78 	.word	0x20001c78

0800ad60 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ad60:	b480      	push	{r7}
 800ad62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ad64:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	4603      	mov	r3, r0
 800ad78:	6039      	str	r1, [r7, #0]
 800ad7a:	71fb      	strb	r3, [r7, #7]
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ad80:	79fb      	ldrb	r3, [r7, #7]
 800ad82:	2b23      	cmp	r3, #35	; 0x23
 800ad84:	d84a      	bhi.n	800ae1c <CDC_Control_FS+0xac>
 800ad86:	a201      	add	r2, pc, #4	; (adr r2, 800ad8c <CDC_Control_FS+0x1c>)
 800ad88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad8c:	0800ae1d 	.word	0x0800ae1d
 800ad90:	0800ae1d 	.word	0x0800ae1d
 800ad94:	0800ae1d 	.word	0x0800ae1d
 800ad98:	0800ae1d 	.word	0x0800ae1d
 800ad9c:	0800ae1d 	.word	0x0800ae1d
 800ada0:	0800ae1d 	.word	0x0800ae1d
 800ada4:	0800ae1d 	.word	0x0800ae1d
 800ada8:	0800ae1d 	.word	0x0800ae1d
 800adac:	0800ae1d 	.word	0x0800ae1d
 800adb0:	0800ae1d 	.word	0x0800ae1d
 800adb4:	0800ae1d 	.word	0x0800ae1d
 800adb8:	0800ae1d 	.word	0x0800ae1d
 800adbc:	0800ae1d 	.word	0x0800ae1d
 800adc0:	0800ae1d 	.word	0x0800ae1d
 800adc4:	0800ae1d 	.word	0x0800ae1d
 800adc8:	0800ae1d 	.word	0x0800ae1d
 800adcc:	0800ae1d 	.word	0x0800ae1d
 800add0:	0800ae1d 	.word	0x0800ae1d
 800add4:	0800ae1d 	.word	0x0800ae1d
 800add8:	0800ae1d 	.word	0x0800ae1d
 800addc:	0800ae1d 	.word	0x0800ae1d
 800ade0:	0800ae1d 	.word	0x0800ae1d
 800ade4:	0800ae1d 	.word	0x0800ae1d
 800ade8:	0800ae1d 	.word	0x0800ae1d
 800adec:	0800ae1d 	.word	0x0800ae1d
 800adf0:	0800ae1d 	.word	0x0800ae1d
 800adf4:	0800ae1d 	.word	0x0800ae1d
 800adf8:	0800ae1d 	.word	0x0800ae1d
 800adfc:	0800ae1d 	.word	0x0800ae1d
 800ae00:	0800ae1d 	.word	0x0800ae1d
 800ae04:	0800ae1d 	.word	0x0800ae1d
 800ae08:	0800ae1d 	.word	0x0800ae1d
 800ae0c:	0800ae1d 	.word	0x0800ae1d
 800ae10:	0800ae1d 	.word	0x0800ae1d
 800ae14:	0800ae1d 	.word	0x0800ae1d
 800ae18:	0800ae1d 	.word	0x0800ae1d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ae1c:	bf00      	nop
  }

  return (USBD_OK);
 800ae1e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ae36:	6879      	ldr	r1, [r7, #4]
 800ae38:	4805      	ldr	r0, [pc, #20]	; (800ae50 <CDC_Receive_FS+0x24>)
 800ae3a:	f7fd fd50 	bl	80088de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ae3e:	4804      	ldr	r0, [pc, #16]	; (800ae50 <CDC_Receive_FS+0x24>)
 800ae40:	f7fd fd61 	bl	8008906 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ae44:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3708      	adds	r7, #8
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	200019dc 	.word	0x200019dc

0800ae54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b088      	sub	sp, #32
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a16      	ldr	r2, [pc, #88]	; (800aebc <HAL_PCD_MspInit+0x68>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d125      	bne.n	800aeb2 <HAL_PCD_MspInit+0x5e>
  
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ae66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ae6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae6c:	2302      	movs	r3, #2
 800ae6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae70:	2300      	movs	r3, #0
 800ae72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae74:	2303      	movs	r3, #3
 800ae76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800ae78:	230a      	movs	r3, #10
 800ae7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae7c:	f107 030c 	add.w	r3, r7, #12
 800ae80:	4619      	mov	r1, r3
 800ae82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae86:	f7f6 fa9b 	bl	80013c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ae8a:	4a0d      	ldr	r2, [pc, #52]	; (800aec0 <HAL_PCD_MspInit+0x6c>)
 800ae8c:	4b0c      	ldr	r3, [pc, #48]	; (800aec0 <HAL_PCD_MspInit+0x6c>)
 800ae8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ae94:	6593      	str	r3, [r2, #88]	; 0x58
 800ae96:	4b0a      	ldr	r3, [pc, #40]	; (800aec0 <HAL_PCD_MspInit+0x6c>)
 800ae98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ae9e:	60bb      	str	r3, [r7, #8]
 800aea0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800aea2:	2200      	movs	r2, #0
 800aea4:	2100      	movs	r1, #0
 800aea6:	2043      	movs	r0, #67	; 0x43
 800aea8:	f7f6 fa53 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800aeac:	2043      	movs	r0, #67	; 0x43
 800aeae:	f7f6 fa6c 	bl	800138a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800aeb2:	bf00      	nop
 800aeb4:	3720      	adds	r7, #32
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	40006800 	.word	0x40006800
 800aec0:	40021000 	.word	0x40021000

0800aec4 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800aed8:	4619      	mov	r1, r3
 800aeda:	4610      	mov	r0, r2
 800aedc:	f7fd fdcb 	bl	8008a76 <USBD_LL_SetupStage>
}
 800aee0:	bf00      	nop
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	460b      	mov	r3, r1
 800aef2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 0470 	ldr.w	r0, [r3, #1136]	; 0x470
 800aefa:	78fb      	ldrb	r3, [r7, #3]
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	015b      	lsls	r3, r3, #5
 800af00:	4413      	add	r3, r2
 800af02:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	78fb      	ldrb	r3, [r7, #3]
 800af0a:	4619      	mov	r1, r3
 800af0c:	f7fd fdfe 	bl	8008b0c <USBD_LL_DataOutStage>
}
 800af10:	bf00      	nop
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	460b      	mov	r3, r1
 800af22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 0470 	ldr.w	r0, [r3, #1136]	; 0x470
 800af2a:	78fb      	ldrb	r3, [r7, #3]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	015b      	lsls	r3, r3, #5
 800af30:	4413      	add	r3, r2
 800af32:	333c      	adds	r3, #60	; 0x3c
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	78fb      	ldrb	r3, [r7, #3]
 800af38:	4619      	mov	r1, r3
 800af3a:	f7fd fe54 	bl	8008be6 <USBD_LL_DataInStage>
}
 800af3e:	bf00      	nop
 800af40:	3708      	adds	r7, #8
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b082      	sub	sp, #8
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800af54:	4618      	mov	r0, r3
 800af56:	f7fd ff62 	bl	8008e1e <USBD_LL_SOF>
}
 800af5a:	bf00      	nop
 800af5c:	3708      	adds	r7, #8
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800af62:	b580      	push	{r7, lr}
 800af64:	b084      	sub	sp, #16
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800af6a:	2301      	movs	r3, #1
 800af6c:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	2b02      	cmp	r3, #2
 800af74:	d102      	bne.n	800af7c <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800af76:	2301      	movs	r3, #1
 800af78:	73fb      	strb	r3, [r7, #15]
    break;
 800af7a:	e002      	b.n	800af82 <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;
 800af7c:	2301      	movs	r3, #1
 800af7e:	73fb      	strb	r3, [r7, #15]
    break;    
 800af80:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800af88:	7bfa      	ldrb	r2, [r7, #15]
 800af8a:	4611      	mov	r1, r2
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7fd ff10 	bl	8008db2 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fd fec9 	bl	8008d30 <USBD_LL_Reset>
}
 800af9e:	bf00      	nop
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
	...

0800afa8 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fd ff0b 	bl	8008dd2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	699b      	ldr	r3, [r3, #24]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d005      	beq.n	800afd0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800afc4:	4a04      	ldr	r2, [pc, #16]	; (800afd8 <HAL_PCD_SuspendCallback+0x30>)
 800afc6:	4b04      	ldr	r3, [pc, #16]	; (800afd8 <HAL_PCD_SuspendCallback+0x30>)
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	f043 0306 	orr.w	r3, r3, #6
 800afce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800afd0:	bf00      	nop
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	e000ed00 	.word	0xe000ed00

0800afdc <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	699b      	ldr	r3, [r3, #24]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d007      	beq.n	800affc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800afec:	4a08      	ldr	r2, [pc, #32]	; (800b010 <HAL_PCD_ResumeCallback+0x34>)
 800afee:	4b08      	ldr	r3, [pc, #32]	; (800b010 <HAL_PCD_ResumeCallback+0x34>)
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	f023 0306 	bic.w	r3, r3, #6
 800aff6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800aff8:	f000 fab4 	bl	800b564 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b002:	4618      	mov	r0, r3
 800b004:	f7fd fefa 	bl	8008dfc <USBD_LL_Resume>
}
 800b008:	bf00      	nop
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	e000ed00 	.word	0xe000ed00

0800b014 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800b01c:	f7f8 f826 	bl	800306c <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b020:	4a2c      	ldr	r2, [pc, #176]	; (800b0d4 <USBD_LL_Init+0xc0>)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
  pdev->pData = &hpcd_USB_FS;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a2a      	ldr	r2, [pc, #168]	; (800b0d4 <USBD_LL_Init+0xc0>)
 800b02c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800b030:	4b28      	ldr	r3, [pc, #160]	; (800b0d4 <USBD_LL_Init+0xc0>)
 800b032:	4a29      	ldr	r2, [pc, #164]	; (800b0d8 <USBD_LL_Init+0xc4>)
 800b034:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b036:	4b27      	ldr	r3, [pc, #156]	; (800b0d4 <USBD_LL_Init+0xc0>)
 800b038:	2208      	movs	r2, #8
 800b03a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b03c:	4b25      	ldr	r3, [pc, #148]	; (800b0d4 <USBD_LL_Init+0xc0>)
 800b03e:	2202      	movs	r2, #2
 800b040:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800b042:	4b24      	ldr	r3, [pc, #144]	; (800b0d4 <USBD_LL_Init+0xc0>)
 800b044:	2200      	movs	r2, #0
 800b046:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b048:	4b22      	ldr	r3, [pc, #136]	; (800b0d4 <USBD_LL_Init+0xc0>)
 800b04a:	2202      	movs	r2, #2
 800b04c:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b04e:	4b21      	ldr	r3, [pc, #132]	; (800b0d4 <USBD_LL_Init+0xc0>)
 800b050:	2200      	movs	r2, #0
 800b052:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b054:	4b1f      	ldr	r3, [pc, #124]	; (800b0d4 <USBD_LL_Init+0xc0>)
 800b056:	2200      	movs	r2, #0
 800b058:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b05a:	4b1e      	ldr	r3, [pc, #120]	; (800b0d4 <USBD_LL_Init+0xc0>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b060:	4b1c      	ldr	r3, [pc, #112]	; (800b0d4 <USBD_LL_Init+0xc0>)
 800b062:	2200      	movs	r2, #0
 800b064:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b066:	481b      	ldr	r0, [pc, #108]	; (800b0d4 <USBD_LL_Init+0xc0>)
 800b068:	f7f7 f84b 	bl	8002102 <HAL_PCD_Init>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d001      	beq.n	800b076 <USBD_LL_Init+0x62>
  {
    Error_Handler( );
 800b072:	f7fe ffe5 	bl	800a040 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b07c:	2318      	movs	r3, #24
 800b07e:	2200      	movs	r2, #0
 800b080:	2100      	movs	r1, #0
 800b082:	f7f7 ff01 	bl	8002e88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b08c:	2358      	movs	r3, #88	; 0x58
 800b08e:	2200      	movs	r2, #0
 800b090:	2180      	movs	r1, #128	; 0x80
 800b092:	f7f7 fef9 	bl	8002e88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b09c:	23c0      	movs	r3, #192	; 0xc0
 800b09e:	2200      	movs	r2, #0
 800b0a0:	2181      	movs	r1, #129	; 0x81
 800b0a2:	f7f7 fef1 	bl	8002e88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b0ac:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	2101      	movs	r1, #1
 800b0b4:	f7f7 fee8 	bl	8002e88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b0be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	2182      	movs	r1, #130	; 0x82
 800b0c6:	f7f7 fedf 	bl	8002e88 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	20002c78 	.word	0x20002c78
 800b0d8:	40006800 	.word	0x40006800

0800b0dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7f7 f8de 	bl	80022b4 <HAL_PCD_Start>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800b0fc:	7bbb      	ldrb	r3, [r7, #14]
 800b0fe:	2b03      	cmp	r3, #3
 800b100:	d816      	bhi.n	800b130 <USBD_LL_Start+0x54>
 800b102:	a201      	add	r2, pc, #4	; (adr r2, 800b108 <USBD_LL_Start+0x2c>)
 800b104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b108:	0800b119 	.word	0x0800b119
 800b10c:	0800b11f 	.word	0x0800b11f
 800b110:	0800b125 	.word	0x0800b125
 800b114:	0800b12b 	.word	0x0800b12b
    case HAL_OK :
      usb_status = USBD_OK;
 800b118:	2300      	movs	r3, #0
 800b11a:	73fb      	strb	r3, [r7, #15]
    break;
 800b11c:	e00b      	b.n	800b136 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b11e:	2302      	movs	r3, #2
 800b120:	73fb      	strb	r3, [r7, #15]
    break;
 800b122:	e008      	b.n	800b136 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b124:	2301      	movs	r3, #1
 800b126:	73fb      	strb	r3, [r7, #15]
    break;
 800b128:	e005      	b.n	800b136 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b12a:	2302      	movs	r3, #2
 800b12c:	73fb      	strb	r3, [r7, #15]
    break;
 800b12e:	e002      	b.n	800b136 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b130:	2302      	movs	r3, #2
 800b132:	73fb      	strb	r3, [r7, #15]
    break;
 800b134:	bf00      	nop
  }
  return usb_status;
 800b136:	7bfb      	ldrb	r3, [r7, #15]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	4608      	mov	r0, r1
 800b14a:	4611      	mov	r1, r2
 800b14c:	461a      	mov	r2, r3
 800b14e:	4603      	mov	r3, r0
 800b150:	70fb      	strb	r3, [r7, #3]
 800b152:	460b      	mov	r3, r1
 800b154:	70bb      	strb	r3, [r7, #2]
 800b156:	4613      	mov	r3, r2
 800b158:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b15a:	2300      	movs	r3, #0
 800b15c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b15e:	2300      	movs	r3, #0
 800b160:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b168:	78bb      	ldrb	r3, [r7, #2]
 800b16a:	883a      	ldrh	r2, [r7, #0]
 800b16c:	78f9      	ldrb	r1, [r7, #3]
 800b16e:	f7f7 fa41 	bl	80025f4 <HAL_PCD_EP_Open>
 800b172:	4603      	mov	r3, r0
 800b174:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b176:	7bbb      	ldrb	r3, [r7, #14]
 800b178:	2b03      	cmp	r3, #3
 800b17a:	d817      	bhi.n	800b1ac <USBD_LL_OpenEP+0x6c>
 800b17c:	a201      	add	r2, pc, #4	; (adr r2, 800b184 <USBD_LL_OpenEP+0x44>)
 800b17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b182:	bf00      	nop
 800b184:	0800b195 	.word	0x0800b195
 800b188:	0800b19b 	.word	0x0800b19b
 800b18c:	0800b1a1 	.word	0x0800b1a1
 800b190:	0800b1a7 	.word	0x0800b1a7
    case HAL_OK :
      usb_status = USBD_OK;
 800b194:	2300      	movs	r3, #0
 800b196:	73fb      	strb	r3, [r7, #15]
    break;
 800b198:	e00b      	b.n	800b1b2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b19a:	2302      	movs	r3, #2
 800b19c:	73fb      	strb	r3, [r7, #15]
    break;
 800b19e:	e008      	b.n	800b1b2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b1a4:	e005      	b.n	800b1b2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	73fb      	strb	r3, [r7, #15]
    break;
 800b1aa:	e002      	b.n	800b1b2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b1b0:	bf00      	nop
  }
  return usb_status;
 800b1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3710      	adds	r7, #16
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b1d6:	78fa      	ldrb	r2, [r7, #3]
 800b1d8:	4611      	mov	r1, r2
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7f7 fa6a 	bl	80026b4 <HAL_PCD_EP_Close>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800b1e4:	7bbb      	ldrb	r3, [r7, #14]
 800b1e6:	2b03      	cmp	r3, #3
 800b1e8:	d816      	bhi.n	800b218 <USBD_LL_CloseEP+0x5c>
 800b1ea:	a201      	add	r2, pc, #4	; (adr r2, 800b1f0 <USBD_LL_CloseEP+0x34>)
 800b1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f0:	0800b201 	.word	0x0800b201
 800b1f4:	0800b207 	.word	0x0800b207
 800b1f8:	0800b20d 	.word	0x0800b20d
 800b1fc:	0800b213 	.word	0x0800b213
    case HAL_OK :
      usb_status = USBD_OK;
 800b200:	2300      	movs	r3, #0
 800b202:	73fb      	strb	r3, [r7, #15]
    break;
 800b204:	e00b      	b.n	800b21e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b206:	2302      	movs	r3, #2
 800b208:	73fb      	strb	r3, [r7, #15]
    break;
 800b20a:	e008      	b.n	800b21e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b20c:	2301      	movs	r3, #1
 800b20e:	73fb      	strb	r3, [r7, #15]
    break;
 800b210:	e005      	b.n	800b21e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b212:	2302      	movs	r3, #2
 800b214:	73fb      	strb	r3, [r7, #15]
    break;
 800b216:	e002      	b.n	800b21e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b218:	2302      	movs	r3, #2
 800b21a:	73fb      	strb	r3, [r7, #15]
    break;
 800b21c:	bf00      	nop
  }
  return usb_status;  
 800b21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	460b      	mov	r3, r1
 800b232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b234:	2300      	movs	r3, #0
 800b236:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b238:	2300      	movs	r3, #0
 800b23a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b242:	78fa      	ldrb	r2, [r7, #3]
 800b244:	4611      	mov	r1, r2
 800b246:	4618      	mov	r0, r3
 800b248:	f7f7 faff 	bl	800284a <HAL_PCD_EP_SetStall>
 800b24c:	4603      	mov	r3, r0
 800b24e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b250:	7bbb      	ldrb	r3, [r7, #14]
 800b252:	2b03      	cmp	r3, #3
 800b254:	d816      	bhi.n	800b284 <USBD_LL_StallEP+0x5c>
 800b256:	a201      	add	r2, pc, #4	; (adr r2, 800b25c <USBD_LL_StallEP+0x34>)
 800b258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b25c:	0800b26d 	.word	0x0800b26d
 800b260:	0800b273 	.word	0x0800b273
 800b264:	0800b279 	.word	0x0800b279
 800b268:	0800b27f 	.word	0x0800b27f
    case HAL_OK :
      usb_status = USBD_OK;
 800b26c:	2300      	movs	r3, #0
 800b26e:	73fb      	strb	r3, [r7, #15]
    break;
 800b270:	e00b      	b.n	800b28a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b272:	2302      	movs	r3, #2
 800b274:	73fb      	strb	r3, [r7, #15]
    break;
 800b276:	e008      	b.n	800b28a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b278:	2301      	movs	r3, #1
 800b27a:	73fb      	strb	r3, [r7, #15]
    break;
 800b27c:	e005      	b.n	800b28a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b27e:	2302      	movs	r3, #2
 800b280:	73fb      	strb	r3, [r7, #15]
    break;
 800b282:	e002      	b.n	800b28a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b284:	2302      	movs	r3, #2
 800b286:	73fb      	strb	r3, [r7, #15]
    break;
 800b288:	bf00      	nop
  }
  return usb_status;  
 800b28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	460b      	mov	r3, r1
 800b29e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b2ae:	78fa      	ldrb	r2, [r7, #3]
 800b2b0:	4611      	mov	r1, r2
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7f7 fb23 	bl	80028fe <HAL_PCD_EP_ClrStall>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800b2bc:	7bbb      	ldrb	r3, [r7, #14]
 800b2be:	2b03      	cmp	r3, #3
 800b2c0:	d816      	bhi.n	800b2f0 <USBD_LL_ClearStallEP+0x5c>
 800b2c2:	a201      	add	r2, pc, #4	; (adr r2, 800b2c8 <USBD_LL_ClearStallEP+0x34>)
 800b2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c8:	0800b2d9 	.word	0x0800b2d9
 800b2cc:	0800b2df 	.word	0x0800b2df
 800b2d0:	0800b2e5 	.word	0x0800b2e5
 800b2d4:	0800b2eb 	.word	0x0800b2eb
    case HAL_OK :
      usb_status = USBD_OK;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	73fb      	strb	r3, [r7, #15]
    break;
 800b2dc:	e00b      	b.n	800b2f6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2de:	2302      	movs	r3, #2
 800b2e0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2e2:	e008      	b.n	800b2f6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2e8:	e005      	b.n	800b2f6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2ea:	2302      	movs	r3, #2
 800b2ec:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ee:	e002      	b.n	800b2f6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b2f0:	2302      	movs	r3, #2
 800b2f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2f4:	bf00      	nop
  }
  return usb_status; 
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b300:	b480      	push	{r7}
 800b302:	b085      	sub	sp, #20
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	460b      	mov	r3, r1
 800b30a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b312:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800b314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	da08      	bge.n	800b32e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800b31c:	78fb      	ldrb	r3, [r7, #3]
 800b31e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b322:	68fa      	ldr	r2, [r7, #12]
 800b324:	015b      	lsls	r3, r3, #5
 800b326:	4413      	add	r3, r2
 800b328:	332a      	adds	r3, #42	; 0x2a
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	e008      	b.n	800b340 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800b32e:	78fb      	ldrb	r3, [r7, #3]
 800b330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	015b      	lsls	r3, r3, #5
 800b338:	4413      	add	r3, r2
 800b33a:	f203 232a 	addw	r3, r3, #554	; 0x22a
 800b33e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b340:	4618      	mov	r0, r3
 800b342:	3714      	adds	r7, #20
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	460b      	mov	r3, r1
 800b356:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b358:	2300      	movs	r3, #0
 800b35a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b35c:	2300      	movs	r3, #0
 800b35e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b366:	78fa      	ldrb	r2, [r7, #3]
 800b368:	4611      	mov	r1, r2
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7f7 f91d 	bl	80025aa <HAL_PCD_SetAddress>
 800b370:	4603      	mov	r3, r0
 800b372:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800b374:	7bbb      	ldrb	r3, [r7, #14]
 800b376:	2b03      	cmp	r3, #3
 800b378:	d816      	bhi.n	800b3a8 <USBD_LL_SetUSBAddress+0x5c>
 800b37a:	a201      	add	r2, pc, #4	; (adr r2, 800b380 <USBD_LL_SetUSBAddress+0x34>)
 800b37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b380:	0800b391 	.word	0x0800b391
 800b384:	0800b397 	.word	0x0800b397
 800b388:	0800b39d 	.word	0x0800b39d
 800b38c:	0800b3a3 	.word	0x0800b3a3
    case HAL_OK :
      usb_status = USBD_OK;
 800b390:	2300      	movs	r3, #0
 800b392:	73fb      	strb	r3, [r7, #15]
    break;
 800b394:	e00b      	b.n	800b3ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b396:	2302      	movs	r3, #2
 800b398:	73fb      	strb	r3, [r7, #15]
    break;
 800b39a:	e008      	b.n	800b3ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b39c:	2301      	movs	r3, #1
 800b39e:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a0:	e005      	b.n	800b3ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3a2:	2302      	movs	r3, #2
 800b3a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a6:	e002      	b.n	800b3ae <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b3a8:	2302      	movs	r3, #2
 800b3aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ac:	bf00      	nop
  }
  return usb_status;  
 800b3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	607a      	str	r2, [r7, #4]
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	72fb      	strb	r3, [r7, #11]
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b3da:	893b      	ldrh	r3, [r7, #8]
 800b3dc:	7af9      	ldrb	r1, [r7, #11]
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	f7f7 f9fa 	bl	80027d8 <HAL_PCD_EP_Transmit>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800b3e8:	7dbb      	ldrb	r3, [r7, #22]
 800b3ea:	2b03      	cmp	r3, #3
 800b3ec:	d816      	bhi.n	800b41c <USBD_LL_Transmit+0x64>
 800b3ee:	a201      	add	r2, pc, #4	; (adr r2, 800b3f4 <USBD_LL_Transmit+0x3c>)
 800b3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f4:	0800b405 	.word	0x0800b405
 800b3f8:	0800b40b 	.word	0x0800b40b
 800b3fc:	0800b411 	.word	0x0800b411
 800b400:	0800b417 	.word	0x0800b417
    case HAL_OK :
      usb_status = USBD_OK;
 800b404:	2300      	movs	r3, #0
 800b406:	75fb      	strb	r3, [r7, #23]
    break;
 800b408:	e00b      	b.n	800b422 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b40a:	2302      	movs	r3, #2
 800b40c:	75fb      	strb	r3, [r7, #23]
    break;
 800b40e:	e008      	b.n	800b422 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b410:	2301      	movs	r3, #1
 800b412:	75fb      	strb	r3, [r7, #23]
    break;
 800b414:	e005      	b.n	800b422 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b416:	2302      	movs	r3, #2
 800b418:	75fb      	strb	r3, [r7, #23]
    break;
 800b41a:	e002      	b.n	800b422 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800b41c:	2302      	movs	r3, #2
 800b41e:	75fb      	strb	r3, [r7, #23]
    break;
 800b420:	bf00      	nop
  }
  return usb_status;    
 800b422:	7dfb      	ldrb	r3, [r7, #23]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3718      	adds	r7, #24
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	607a      	str	r2, [r7, #4]
 800b436:	461a      	mov	r2, r3
 800b438:	460b      	mov	r3, r1
 800b43a:	72fb      	strb	r3, [r7, #11]
 800b43c:	4613      	mov	r3, r2
 800b43e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b440:	2300      	movs	r3, #0
 800b442:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b444:	2300      	movs	r3, #0
 800b446:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b44e:	893b      	ldrh	r3, [r7, #8]
 800b450:	7af9      	ldrb	r1, [r7, #11]
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	f7f7 f970 	bl	8002738 <HAL_PCD_EP_Receive>
 800b458:	4603      	mov	r3, r0
 800b45a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800b45c:	7dbb      	ldrb	r3, [r7, #22]
 800b45e:	2b03      	cmp	r3, #3
 800b460:	d816      	bhi.n	800b490 <USBD_LL_PrepareReceive+0x64>
 800b462:	a201      	add	r2, pc, #4	; (adr r2, 800b468 <USBD_LL_PrepareReceive+0x3c>)
 800b464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b468:	0800b479 	.word	0x0800b479
 800b46c:	0800b47f 	.word	0x0800b47f
 800b470:	0800b485 	.word	0x0800b485
 800b474:	0800b48b 	.word	0x0800b48b
    case HAL_OK :
      usb_status = USBD_OK;
 800b478:	2300      	movs	r3, #0
 800b47a:	75fb      	strb	r3, [r7, #23]
    break;
 800b47c:	e00b      	b.n	800b496 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b47e:	2302      	movs	r3, #2
 800b480:	75fb      	strb	r3, [r7, #23]
    break;
 800b482:	e008      	b.n	800b496 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b484:	2301      	movs	r3, #1
 800b486:	75fb      	strb	r3, [r7, #23]
    break;
 800b488:	e005      	b.n	800b496 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b48a:	2302      	movs	r3, #2
 800b48c:	75fb      	strb	r3, [r7, #23]
    break;
 800b48e:	e002      	b.n	800b496 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800b490:	2302      	movs	r3, #2
 800b492:	75fb      	strb	r3, [r7, #23]
    break;
 800b494:	bf00      	nop
  }
  return usb_status; 
 800b496:	7dfb      	ldrb	r3, [r7, #23]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3718      	adds	r7, #24
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b4b2:	78fa      	ldrb	r2, [r7, #3]
 800b4b4:	4611      	mov	r1, r2
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7f7 f978 	bl	80027ac <HAL_PCD_EP_GetRxCount>
 800b4bc:	4603      	mov	r3, r0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
	...

0800b4c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b4d4:	78fb      	ldrb	r3, [r7, #3]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d002      	beq.n	800b4e0 <HAL_PCDEx_LPM_Callback+0x18>
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d013      	beq.n	800b506 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800b4de:	e023      	b.n	800b528 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	699b      	ldr	r3, [r3, #24]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d007      	beq.n	800b4f8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800b4e8:	f7fe fd21 	bl	8009f2e <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b4ec:	4a10      	ldr	r2, [pc, #64]	; (800b530 <HAL_PCDEx_LPM_Callback+0x68>)
 800b4ee:	4b10      	ldr	r3, [pc, #64]	; (800b530 <HAL_PCDEx_LPM_Callback+0x68>)
 800b4f0:	691b      	ldr	r3, [r3, #16]
 800b4f2:	f023 0306 	bic.w	r3, r3, #6
 800b4f6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7fd fc7c 	bl	8008dfc <USBD_LL_Resume>
    break;
 800b504:	e010      	b.n	800b528 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7fd fc60 	bl	8008dd2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	699b      	ldr	r3, [r3, #24]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d005      	beq.n	800b526 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b51a:	4a05      	ldr	r2, [pc, #20]	; (800b530 <HAL_PCDEx_LPM_Callback+0x68>)
 800b51c:	4b04      	ldr	r3, [pc, #16]	; (800b530 <HAL_PCDEx_LPM_Callback+0x68>)
 800b51e:	691b      	ldr	r3, [r3, #16]
 800b520:	f043 0306 	orr.w	r3, r3, #6
 800b524:	6113      	str	r3, [r2, #16]
    break;   
 800b526:	bf00      	nop
}
 800b528:	bf00      	nop
 800b52a:	3708      	adds	r7, #8
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	e000ed00 	.word	0xe000ed00

0800b534 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b53c:	4b03      	ldr	r3, [pc, #12]	; (800b54c <USBD_static_malloc+0x18>)
}
 800b53e:	4618      	mov	r0, r3
 800b540:	370c      	adds	r7, #12
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop
 800b54c:	20001414 	.word	0x20001414

0800b550 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]

}
 800b558:	bf00      	nop
 800b55a:	370c      	adds	r7, #12
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b568:	f7fe fce1 	bl	8009f2e <SystemClock_Config>
}
 800b56c:	bf00      	nop
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <USBD_LL_BatteryCharging>:
  *         else return USBD_FAIL if false
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
 800b570:	b480      	push	{r7}
 800b572:	b085      	sub	sp, #20
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b57e:	60fb      	str	r3, [r7, #12]
  if (hpcd->Init.battery_charging_enable == ENABLE)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6a1b      	ldr	r3, [r3, #32]
 800b584:	2b01      	cmp	r3, #1
 800b586:	d101      	bne.n	800b58c <USBD_LL_BatteryCharging+0x1c>
  {
    return USBD_OK;
 800b588:	2300      	movs	r3, #0
 800b58a:	e000      	b.n	800b58e <USBD_LL_BatteryCharging+0x1e>
  }
  else
  {
    return USBD_FAIL;
 800b58c:	2302      	movs	r3, #2
  }
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3714      	adds	r7, #20
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
	...

0800b59c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	6039      	str	r1, [r7, #0]
 800b5a6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	2212      	movs	r2, #18
 800b5ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b5ae:	4b03      	ldr	r3, [pc, #12]	; (800b5bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	200005c8 	.word	0x200005c8

0800b5c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	6039      	str	r1, [r7, #0]
 800b5ca:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	2204      	movs	r2, #4
 800b5d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b5d2:	4b03      	ldr	r3, [pc, #12]	; (800b5e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr
 800b5e0:	200005e8 	.word	0x200005e8

0800b5e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	6039      	str	r1, [r7, #0]
 800b5ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5f0:	79fb      	ldrb	r3, [r7, #7]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d105      	bne.n	800b602 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5f6:	683a      	ldr	r2, [r7, #0]
 800b5f8:	4907      	ldr	r1, [pc, #28]	; (800b618 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5fa:	4808      	ldr	r0, [pc, #32]	; (800b61c <USBD_FS_ProductStrDescriptor+0x38>)
 800b5fc:	f7fe f906 	bl	800980c <USBD_GetString>
 800b600:	e004      	b.n	800b60c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b602:	683a      	ldr	r2, [r7, #0]
 800b604:	4904      	ldr	r1, [pc, #16]	; (800b618 <USBD_FS_ProductStrDescriptor+0x34>)
 800b606:	4805      	ldr	r0, [pc, #20]	; (800b61c <USBD_FS_ProductStrDescriptor+0x38>)
 800b608:	f7fe f900 	bl	800980c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b60c:	4b02      	ldr	r3, [pc, #8]	; (800b618 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	200030ec 	.word	0x200030ec
 800b61c:	0800b7f0 	.word	0x0800b7f0

0800b620 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	4603      	mov	r3, r0
 800b628:	6039      	str	r1, [r7, #0]
 800b62a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b62c:	683a      	ldr	r2, [r7, #0]
 800b62e:	4904      	ldr	r1, [pc, #16]	; (800b640 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b630:	4804      	ldr	r0, [pc, #16]	; (800b644 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b632:	f7fe f8eb 	bl	800980c <USBD_GetString>
  return USBD_StrDesc;
 800b636:	4b02      	ldr	r3, [pc, #8]	; (800b640 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3708      	adds	r7, #8
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	200030ec 	.word	0x200030ec
 800b644:	0800b800 	.word	0x0800b800

0800b648 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	4603      	mov	r3, r0
 800b650:	6039      	str	r1, [r7, #0]
 800b652:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b654:	79fb      	ldrb	r3, [r7, #7]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d105      	bne.n	800b666 <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800b65a:	683a      	ldr	r2, [r7, #0]
 800b65c:	4907      	ldr	r1, [pc, #28]	; (800b67c <USBD_FS_SerialStrDescriptor+0x34>)
 800b65e:	4808      	ldr	r0, [pc, #32]	; (800b680 <USBD_FS_SerialStrDescriptor+0x38>)
 800b660:	f7fe f8d4 	bl	800980c <USBD_GetString>
 800b664:	e004      	b.n	800b670 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800b666:	683a      	ldr	r2, [r7, #0]
 800b668:	4904      	ldr	r1, [pc, #16]	; (800b67c <USBD_FS_SerialStrDescriptor+0x34>)
 800b66a:	4805      	ldr	r0, [pc, #20]	; (800b680 <USBD_FS_SerialStrDescriptor+0x38>)
 800b66c:	f7fe f8ce 	bl	800980c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b670:	4b02      	ldr	r3, [pc, #8]	; (800b67c <USBD_FS_SerialStrDescriptor+0x34>)
}
 800b672:	4618      	mov	r0, r3
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	200030ec 	.word	0x200030ec
 800b680:	0800b814 	.word	0x0800b814

0800b684 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	4603      	mov	r3, r0
 800b68c:	6039      	str	r1, [r7, #0]
 800b68e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b690:	79fb      	ldrb	r3, [r7, #7]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d105      	bne.n	800b6a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b696:	683a      	ldr	r2, [r7, #0]
 800b698:	4907      	ldr	r1, [pc, #28]	; (800b6b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b69a:	4808      	ldr	r0, [pc, #32]	; (800b6bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b69c:	f7fe f8b6 	bl	800980c <USBD_GetString>
 800b6a0:	e004      	b.n	800b6ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6a2:	683a      	ldr	r2, [r7, #0]
 800b6a4:	4904      	ldr	r1, [pc, #16]	; (800b6b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6a6:	4805      	ldr	r0, [pc, #20]	; (800b6bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6a8:	f7fe f8b0 	bl	800980c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6ac:	4b02      	ldr	r3, [pc, #8]	; (800b6b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	200030ec 	.word	0x200030ec
 800b6bc:	0800b824 	.word	0x0800b824

0800b6c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	6039      	str	r1, [r7, #0]
 800b6ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6cc:	79fb      	ldrb	r3, [r7, #7]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d105      	bne.n	800b6de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6d2:	683a      	ldr	r2, [r7, #0]
 800b6d4:	4907      	ldr	r1, [pc, #28]	; (800b6f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6d6:	4808      	ldr	r0, [pc, #32]	; (800b6f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6d8:	f7fe f898 	bl	800980c <USBD_GetString>
 800b6dc:	e004      	b.n	800b6e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6de:	683a      	ldr	r2, [r7, #0]
 800b6e0:	4904      	ldr	r1, [pc, #16]	; (800b6f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6e2:	4805      	ldr	r0, [pc, #20]	; (800b6f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6e4:	f7fe f892 	bl	800980c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6e8:	4b02      	ldr	r3, [pc, #8]	; (800b6f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	200030ec 	.word	0x200030ec
 800b6f8:	0800b830 	.word	0x0800b830

0800b6fc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	4603      	mov	r3, r0
 800b704:	6039      	str	r1, [r7, #0]
 800b706:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_BOSDesc);
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	220c      	movs	r2, #12
 800b70c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b70e:	4b03      	ldr	r3, [pc, #12]	; (800b71c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b710:	4618      	mov	r0, r3
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr
 800b71c:	200005dc 	.word	0x200005dc

0800b720 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800b720:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b758 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800b724:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800b726:	e003      	b.n	800b730 <LoopCopyDataInit>

0800b728 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800b728:	4b0c      	ldr	r3, [pc, #48]	; (800b75c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800b72a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800b72c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800b72e:	3104      	adds	r1, #4

0800b730 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800b730:	480b      	ldr	r0, [pc, #44]	; (800b760 <LoopForever+0xa>)
	ldr	r3, =_edata
 800b732:	4b0c      	ldr	r3, [pc, #48]	; (800b764 <LoopForever+0xe>)
	adds	r2, r0, r1
 800b734:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800b736:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800b738:	d3f6      	bcc.n	800b728 <CopyDataInit>
	ldr	r2, =_sbss
 800b73a:	4a0b      	ldr	r2, [pc, #44]	; (800b768 <LoopForever+0x12>)
	b	LoopFillZerobss
 800b73c:	e002      	b.n	800b744 <LoopFillZerobss>

0800b73e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800b73e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800b740:	f842 3b04 	str.w	r3, [r2], #4

0800b744 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800b744:	4b09      	ldr	r3, [pc, #36]	; (800b76c <LoopForever+0x16>)
	cmp	r2, r3
 800b746:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800b748:	d3f9      	bcc.n	800b73e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800b74a:	f7fe fd33 	bl	800a1b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b74e:	f000 f811 	bl	800b774 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b752:	f7fe fbc7 	bl	8009ee4 <main>

0800b756 <LoopForever>:

LoopForever:
    b LoopForever
 800b756:	e7fe      	b.n	800b756 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800b758:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 800b75c:	0800b898 	.word	0x0800b898
	ldr	r0, =_sdata
 800b760:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800b764:	200005ec 	.word	0x200005ec
	ldr	r2, =_sbss
 800b768:	200005ec 	.word	0x200005ec
	ldr	r3, = _ebss
 800b76c:	200032ec 	.word	0x200032ec

0800b770 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b770:	e7fe      	b.n	800b770 <ADC1_IRQHandler>
	...

0800b774 <__libc_init_array>:
 800b774:	b570      	push	{r4, r5, r6, lr}
 800b776:	4e0d      	ldr	r6, [pc, #52]	; (800b7ac <__libc_init_array+0x38>)
 800b778:	4c0d      	ldr	r4, [pc, #52]	; (800b7b0 <__libc_init_array+0x3c>)
 800b77a:	1ba4      	subs	r4, r4, r6
 800b77c:	10a4      	asrs	r4, r4, #2
 800b77e:	2500      	movs	r5, #0
 800b780:	42a5      	cmp	r5, r4
 800b782:	d109      	bne.n	800b798 <__libc_init_array+0x24>
 800b784:	4e0b      	ldr	r6, [pc, #44]	; (800b7b4 <__libc_init_array+0x40>)
 800b786:	4c0c      	ldr	r4, [pc, #48]	; (800b7b8 <__libc_init_array+0x44>)
 800b788:	f000 f820 	bl	800b7cc <_init>
 800b78c:	1ba4      	subs	r4, r4, r6
 800b78e:	10a4      	asrs	r4, r4, #2
 800b790:	2500      	movs	r5, #0
 800b792:	42a5      	cmp	r5, r4
 800b794:	d105      	bne.n	800b7a2 <__libc_init_array+0x2e>
 800b796:	bd70      	pop	{r4, r5, r6, pc}
 800b798:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b79c:	4798      	blx	r3
 800b79e:	3501      	adds	r5, #1
 800b7a0:	e7ee      	b.n	800b780 <__libc_init_array+0xc>
 800b7a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b7a6:	4798      	blx	r3
 800b7a8:	3501      	adds	r5, #1
 800b7aa:	e7f2      	b.n	800b792 <__libc_init_array+0x1e>
 800b7ac:	0800b890 	.word	0x0800b890
 800b7b0:	0800b890 	.word	0x0800b890
 800b7b4:	0800b890 	.word	0x0800b890
 800b7b8:	0800b894 	.word	0x0800b894

0800b7bc <memset>:
 800b7bc:	4402      	add	r2, r0
 800b7be:	4603      	mov	r3, r0
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d100      	bne.n	800b7c6 <memset+0xa>
 800b7c4:	4770      	bx	lr
 800b7c6:	f803 1b01 	strb.w	r1, [r3], #1
 800b7ca:	e7f9      	b.n	800b7c0 <memset+0x4>

0800b7cc <_init>:
 800b7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ce:	bf00      	nop
 800b7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7d2:	bc08      	pop	{r3}
 800b7d4:	469e      	mov	lr, r3
 800b7d6:	4770      	bx	lr

0800b7d8 <_fini>:
 800b7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7da:	bf00      	nop
 800b7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7de:	bc08      	pop	{r3}
 800b7e0:	469e      	mov	lr, r3
 800b7e2:	4770      	bx	lr
