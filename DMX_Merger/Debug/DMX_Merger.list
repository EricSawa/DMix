
DMX_Merger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8dc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800ba70  0800ba70  0001ba70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bb10  0800bb10  0001bb10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bb18  0800bb18  0001bb18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bb1c  0800bb1c  0001bb1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000948  20000000  0800bb20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002f40  20000948  0800c468  00020948  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20003888  0800c468  00023888  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020948  2**0
                  CONTENTS, READONLY
 10 .debug_info   000364d6  00000000  00000000  00020978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000060f7  00000000  00000000  00056e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001e28  00000000  00000000  0005cf48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001b10  00000000  00000000  0005ed70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000fe97  00000000  00000000  00060880  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00008910  00000000  00000000  00070717  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00079027  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007a3c  00000000  00000000  000790a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000948 	.word	0x20000948
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800ba58 	.word	0x0800ba58

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000094c 	.word	0x2000094c
 80001d0:	0800ba58 	.word	0x0800ba58

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <app_btn_init>:
static void getOthSwitches(eal_task_Task *self);
static void debounceOthSwitches(eal_task_Task *self);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_btn_init(eal_task_Task *self){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	memset(othButtonState, 0, sizeof(othButtonState));
 80004ec:	2205      	movs	r2, #5
 80004ee:	2100      	movs	r1, #0
 80004f0:	480d      	ldr	r0, [pc, #52]	; (8000528 <app_btn_init+0x44>)
 80004f2:	f00b faa8 	bl	800ba46 <memset>
	memset(othButtonBuffer, 0, sizeof(othButtonBuffer));
 80004f6:	2205      	movs	r2, #5
 80004f8:	2100      	movs	r1, #0
 80004fa:	480c      	ldr	r0, [pc, #48]	; (800052c <app_btn_init+0x48>)
 80004fc:	f00b faa3 	bl	800ba46 <memset>
	memset(othButtonTime, 0, sizeof(othButtonTime));
 8000500:	220a      	movs	r2, #10
 8000502:	2100      	movs	r1, #0
 8000504:	480a      	ldr	r0, [pc, #40]	; (8000530 <app_btn_init+0x4c>)
 8000506:	f00b fa9e 	bl	800ba46 <memset>
	memset(othButtonHoldTimeShort, 0, sizeof(othButtonHoldTimeShort));
 800050a:	220a      	movs	r2, #10
 800050c:	2100      	movs	r1, #0
 800050e:	4809      	ldr	r0, [pc, #36]	; (8000534 <app_btn_init+0x50>)
 8000510:	f00b fa99 	bl	800ba46 <memset>
	memset(othButtonHoldTimeLong, 0, sizeof(othButtonHoldTimeLong));
 8000514:	220a      	movs	r2, #10
 8000516:	2100      	movs	r1, #0
 8000518:	4807      	ldr	r0, [pc, #28]	; (8000538 <app_btn_init+0x54>)
 800051a:	f00b fa94 	bl	800ba46 <memset>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000964 	.word	0x20000964
 800052c:	2000096c 	.word	0x2000096c
 8000530:	20000974 	.word	0x20000974
 8000534:	20000980 	.word	0x20000980
 8000538:	2000098c 	.word	0x2000098c

0800053c <app_btn_process>:

void app_btn_process(eal_task_Task *self){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	f083 0301 	eor.w	r3, r3, #1
 800054c:	b2db      	uxtb	r3, r3
 800054e:	2b00      	cmp	r3, #0
 8000550:	d111      	bne.n	8000576 <app_btn_process+0x3a>
	if(!cyclicFlag) return;
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <app_btn_process+0x48>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	f083 0301 	eor.w	r3, r3, #1
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d10b      	bne.n	800057a <app_btn_process+0x3e>
	getOthSwitches(self);
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f000 f83e 	bl	80005e4 <getOthSwitches>
	debounceOthSwitches(self);
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f000 f8b9 	bl	80006e0 <debounceOthSwitches>
	cyclicFlag = false;
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <app_btn_process+0x48>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	e002      	b.n	800057c <app_btn_process+0x40>
	if(!self->enable) return;
 8000576:	bf00      	nop
 8000578:	e000      	b.n	800057c <app_btn_process+0x40>
	if(!cyclicFlag) return;
 800057a:	bf00      	nop
}
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000996 	.word	0x20000996

08000588 <app_btn_cyclic1ms>:

void app_btn_cyclic1ms(eal_task_Task *self, bool stat){
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <app_btn_cyclic1ms+0x3c>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
	if(internalTimer > 0)--internalTimer;
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <app_btn_cyclic1ms+0x40>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	b21b      	sxth	r3, r3
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dd08      	ble.n	80005b6 <app_btn_cyclic1ms+0x2e>
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <app_btn_cyclic1ms+0x40>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	3b01      	subs	r3, #1
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	b21a      	sxth	r2, r3
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <app_btn_cyclic1ms+0x40>)
 80005b4:	801a      	strh	r2, [r3, #0]
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000996 	.word	0x20000996
 80005c8:	20000998 	.word	0x20000998

080005cc <app_btn_receiveMsg>:

void app_btn_receiveMsg(eal_task_Task *self, msg_Message *message){
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]

}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <getOthSwitches>:

/* Helper ----------------------------------------------------------------------*/
static void getOthSwitches(eal_task_Task *self){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(I_SW2_GPIO_Port, I_SW2_Pin) == 0) 		othButtonBuffer[0] |= (1 << 0); else othButtonBuffer[0] &= ~(1 << 0);
 80005ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f4:	f001 fc92 	bl	8001f1c <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d107      	bne.n	800060e <getOthSwitches+0x2a>
 80005fe:	4b37      	ldr	r3, [pc, #220]	; (80006dc <getOthSwitches+0xf8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <getOthSwitches+0xf8>)
 800060a:	701a      	strb	r2, [r3, #0]
 800060c:	e006      	b.n	800061c <getOthSwitches+0x38>
 800060e:	4b33      	ldr	r3, [pc, #204]	; (80006dc <getOthSwitches+0xf8>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	f023 0301 	bic.w	r3, r3, #1
 8000616:	b2da      	uxtb	r2, r3
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <getOthSwitches+0xf8>)
 800061a:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO1_GPIO_Port, I_GPIO1_Pin) == 0) 	othButtonBuffer[0] |= (1 << 1); else othButtonBuffer[0] &= ~(1 << 1);
 800061c:	2110      	movs	r1, #16
 800061e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000622:	f001 fc7b 	bl	8001f1c <HAL_GPIO_ReadPin>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d107      	bne.n	800063c <getOthSwitches+0x58>
 800062c:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <getOthSwitches+0xf8>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <getOthSwitches+0xf8>)
 8000638:	701a      	strb	r2, [r3, #0]
 800063a:	e006      	b.n	800064a <getOthSwitches+0x66>
 800063c:	4b27      	ldr	r3, [pc, #156]	; (80006dc <getOthSwitches+0xf8>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	f023 0302 	bic.w	r3, r3, #2
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <getOthSwitches+0xf8>)
 8000648:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO2_GPIO_Port, I_GPIO2_Pin) == 0) 	othButtonBuffer[0] |= (1 << 2); else othButtonBuffer[0] &= ~(1 << 2);
 800064a:	2120      	movs	r1, #32
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f001 fc64 	bl	8001f1c <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d107      	bne.n	800066a <getOthSwitches+0x86>
 800065a:	4b20      	ldr	r3, [pc, #128]	; (80006dc <getOthSwitches+0xf8>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	b2da      	uxtb	r2, r3
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <getOthSwitches+0xf8>)
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	e006      	b.n	8000678 <getOthSwitches+0x94>
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <getOthSwitches+0xf8>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	f023 0304 	bic.w	r3, r3, #4
 8000672:	b2da      	uxtb	r2, r3
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <getOthSwitches+0xf8>)
 8000676:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO3_GPIO_Port, I_GPIO3_Pin) == 0) 	othButtonBuffer[0] |= (1 << 3); else othButtonBuffer[0] &= ~(1 << 3);
 8000678:	2140      	movs	r1, #64	; 0x40
 800067a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067e:	f001 fc4d 	bl	8001f1c <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d107      	bne.n	8000698 <getOthSwitches+0xb4>
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <getOthSwitches+0xf8>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	f043 0308 	orr.w	r3, r3, #8
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <getOthSwitches+0xf8>)
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	e006      	b.n	80006a6 <getOthSwitches+0xc2>
 8000698:	4b10      	ldr	r3, [pc, #64]	; (80006dc <getOthSwitches+0xf8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	f023 0308 	bic.w	r3, r3, #8
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <getOthSwitches+0xf8>)
 80006a4:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO4_GPIO_Port, I_GPIO4_Pin) == 0) 	othButtonBuffer[0] |= (1 << 4); else othButtonBuffer[0] &= ~(1 << 4);
 80006a6:	2180      	movs	r1, #128	; 0x80
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ac:	f001 fc36 	bl	8001f1c <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d107      	bne.n	80006c6 <getOthSwitches+0xe2>
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <getOthSwitches+0xf8>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	f043 0310 	orr.w	r3, r3, #16
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <getOthSwitches+0xf8>)
 80006c2:	701a      	strb	r2, [r3, #0]

}
 80006c4:	e006      	b.n	80006d4 <getOthSwitches+0xf0>
	if(HAL_GPIO_ReadPin(I_GPIO4_GPIO_Port, I_GPIO4_Pin) == 0) 	othButtonBuffer[0] |= (1 << 4); else othButtonBuffer[0] &= ~(1 << 4);
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <getOthSwitches+0xf8>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	f023 0310 	bic.w	r3, r3, #16
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	4b02      	ldr	r3, [pc, #8]	; (80006dc <getOthSwitches+0xf8>)
 80006d2:	701a      	strb	r2, [r3, #0]
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000096c 	.word	0x2000096c

080006e0 <debounceOthSwitches>:

static void debounceOthSwitches(eal_task_Task *self){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	; 0x30
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	static uint8_t swNmbr = 0;
	if(swIndex[swNmbr] != app_btn_NONE){
 80006e8:	4ba3      	ldr	r3, [pc, #652]	; (8000978 <debounceOthSwitches+0x298>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4ba3      	ldr	r3, [pc, #652]	; (800097c <debounceOthSwitches+0x29c>)
 80006f0:	5c9b      	ldrb	r3, [r3, r2]
 80006f2:	2bff      	cmp	r3, #255	; 0xff
 80006f4:	f000 812f 	beq.w	8000956 <debounceOthSwitches+0x276>
		uint16_t msk = 1 << (swIndex[swNmbr]&0xf);
 80006f8:	4b9f      	ldr	r3, [pc, #636]	; (8000978 <debounceOthSwitches+0x298>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b9f      	ldr	r3, [pc, #636]	; (800097c <debounceOthSwitches+0x29c>)
 8000700:	5c9b      	ldrb	r3, [r3, r2]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	2201      	movs	r2, #1
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint8_t  idx = (swIndex[swNmbr]&0xf0) >> 4;
 800070e:	4b9a      	ldr	r3, [pc, #616]	; (8000978 <debounceOthSwitches+0x298>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	4b99      	ldr	r3, [pc, #612]	; (800097c <debounceOthSwitches+0x29c>)
 8000716:	5c9b      	ldrb	r3, [r3, r2]
 8000718:	091b      	lsrs	r3, r3, #4
 800071a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (!(othButtonBuffer[idx] & msk)){ 			/*button is released*/
 800071e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000722:	4a97      	ldr	r2, [pc, #604]	; (8000980 <debounceOthSwitches+0x2a0>)
 8000724:	5cd3      	ldrb	r3, [r2, r3]
 8000726:	461a      	mov	r2, r3
 8000728:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800072a:	4013      	ands	r3, r2
 800072c:	2b00      	cmp	r3, #0
 800072e:	d15d      	bne.n	80007ec <debounceOthSwitches+0x10c>
			if(othButtonTime[swNmbr] > 0){
 8000730:	4b91      	ldr	r3, [pc, #580]	; (8000978 <debounceOthSwitches+0x298>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b93      	ldr	r3, [pc, #588]	; (8000984 <debounceOthSwitches+0x2a4>)
 8000738:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800073c:	2b00      	cmp	r3, #0
 800073e:	f000 80a4 	beq.w	800088a <debounceOthSwitches+0x1aa>
				--othButtonTime[swNmbr];
 8000742:	4b8d      	ldr	r3, [pc, #564]	; (8000978 <debounceOthSwitches+0x298>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4a8f      	ldr	r2, [pc, #572]	; (8000984 <debounceOthSwitches+0x2a4>)
 8000748:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800074c:	3a01      	subs	r2, #1
 800074e:	b291      	uxth	r1, r2
 8000750:	4a8c      	ldr	r2, [pc, #560]	; (8000984 <debounceOthSwitches+0x2a4>)
 8000752:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(othButtonTime[swNmbr] <= 0){
 8000756:	4b88      	ldr	r3, [pc, #544]	; (8000978 <debounceOthSwitches+0x298>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	4b89      	ldr	r3, [pc, #548]	; (8000984 <debounceOthSwitches+0x2a4>)
 800075e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000762:	2b00      	cmp	r3, #0
 8000764:	f040 8091 	bne.w	800088a <debounceOthSwitches+0x1aa>
					if(othButtonState[idx] & msk){
 8000768:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800076c:	4a86      	ldr	r2, [pc, #536]	; (8000988 <debounceOthSwitches+0x2a8>)
 800076e:	5cd3      	ldrb	r3, [r2, r3]
 8000770:	461a      	mov	r2, r3
 8000772:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000774:	4013      	ands	r3, r2
 8000776:	2b00      	cmp	r3, #0
 8000778:	f000 8087 	beq.w	800088a <debounceOthSwitches+0x1aa>
						if(self->sendMsg != NULL){
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d014      	beq.n	80007ae <debounceOthSwitches+0xce>
							msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_RELEASED, 0, 0);
 8000784:	4b7c      	ldr	r3, [pc, #496]	; (8000978 <debounceOthSwitches+0x298>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b29b      	uxth	r3, r3
 800078a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800078c:	2300      	movs	r3, #0
 800078e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000790:	2342      	movs	r3, #66	; 0x42
 8000792:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000796:	2300      	movs	r3, #0
 8000798:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800079c:	2300      	movs	r3, #0
 800079e:	857b      	strh	r3, [r7, #42]	; 0x2a
							self->sendMsg(self, &newMessage);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	695b      	ldr	r3, [r3, #20]
 80007a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80007a8:	4611      	mov	r1, r2
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	4798      	blx	r3
						}
						othButtonState[idx] &=~msk;
 80007ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80007b2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80007b6:	4974      	ldr	r1, [pc, #464]	; (8000988 <debounceOthSwitches+0x2a8>)
 80007b8:	5c8a      	ldrb	r2, [r1, r2]
 80007ba:	b251      	sxtb	r1, r2
 80007bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80007be:	b252      	sxtb	r2, r2
 80007c0:	43d2      	mvns	r2, r2
 80007c2:	b252      	sxtb	r2, r2
 80007c4:	400a      	ands	r2, r1
 80007c6:	b252      	sxtb	r2, r2
 80007c8:	b2d1      	uxtb	r1, r2
 80007ca:	4a6f      	ldr	r2, [pc, #444]	; (8000988 <debounceOthSwitches+0x2a8>)
 80007cc:	54d1      	strb	r1, [r2, r3]
						othButtonHoldTimeShort[swNmbr] = 0;
 80007ce:	4b6a      	ldr	r3, [pc, #424]	; (8000978 <debounceOthSwitches+0x298>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b6d      	ldr	r3, [pc, #436]	; (800098c <debounceOthSwitches+0x2ac>)
 80007d6:	2100      	movs	r1, #0
 80007d8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						othButtonHoldTimeLong[swNmbr] = 0;
 80007dc:	4b66      	ldr	r3, [pc, #408]	; (8000978 <debounceOthSwitches+0x298>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b6b      	ldr	r3, [pc, #428]	; (8000990 <debounceOthSwitches+0x2b0>)
 80007e4:	2100      	movs	r1, #0
 80007e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80007ea:	e04e      	b.n	800088a <debounceOthSwitches+0x1aa>
					}
				}
			}
		}else{					 						/*button is down*/
			if(othButtonTime[swNmbr] < app_cfg_btn_TIME_DEBOUNCE){
 80007ec:	4b62      	ldr	r3, [pc, #392]	; (8000978 <debounceOthSwitches+0x298>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b64      	ldr	r3, [pc, #400]	; (8000984 <debounceOthSwitches+0x2a4>)
 80007f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	d846      	bhi.n	800088a <debounceOthSwitches+0x1aa>
				++othButtonTime[swNmbr];
 80007fc:	4b5e      	ldr	r3, [pc, #376]	; (8000978 <debounceOthSwitches+0x298>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4a60      	ldr	r2, [pc, #384]	; (8000984 <debounceOthSwitches+0x2a4>)
 8000802:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000806:	3201      	adds	r2, #1
 8000808:	b291      	uxth	r1, r2
 800080a:	4a5e      	ldr	r2, [pc, #376]	; (8000984 <debounceOthSwitches+0x2a4>)
 800080c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(othButtonTime[swNmbr] >= app_cfg_btn_TIME_DEBOUNCE){
 8000810:	4b59      	ldr	r3, [pc, #356]	; (8000978 <debounceOthSwitches+0x298>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b5b      	ldr	r3, [pc, #364]	; (8000984 <debounceOthSwitches+0x2a4>)
 8000818:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800081c:	2b03      	cmp	r3, #3
 800081e:	d934      	bls.n	800088a <debounceOthSwitches+0x1aa>
					if(self->sendMsg != NULL){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	695b      	ldr	r3, [r3, #20]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d014      	beq.n	8000852 <debounceOthSwitches+0x172>
						msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_PRESSED, 0, 0);
 8000828:	4b53      	ldr	r3, [pc, #332]	; (8000978 <debounceOthSwitches+0x298>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b29b      	uxth	r3, r3
 800082e:	83bb      	strh	r3, [r7, #28]
 8000830:	2301      	movs	r3, #1
 8000832:	83fb      	strh	r3, [r7, #30]
 8000834:	2342      	movs	r3, #66	; 0x42
 8000836:	f887 3020 	strb.w	r3, [r7, #32]
 800083a:	2300      	movs	r3, #0
 800083c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000840:	2300      	movs	r3, #0
 8000842:	847b      	strh	r3, [r7, #34]	; 0x22
						self->sendMsg(self, &newMessage);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	f107 021c 	add.w	r2, r7, #28
 800084c:	4611      	mov	r1, r2
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	4798      	blx	r3
					}
					othButtonState[idx] |= msk;
 8000852:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000856:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800085a:	494b      	ldr	r1, [pc, #300]	; (8000988 <debounceOthSwitches+0x2a8>)
 800085c:	5c89      	ldrb	r1, [r1, r2]
 800085e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	430a      	orrs	r2, r1
 8000864:	b2d1      	uxtb	r1, r2
 8000866:	4a48      	ldr	r2, [pc, #288]	; (8000988 <debounceOthSwitches+0x2a8>)
 8000868:	54d1      	strb	r1, [r2, r3]
					othButtonHoldTimeShort[swNmbr] = app_cfg_btn_TIME_HOLD_SHORT;
 800086a:	4b43      	ldr	r3, [pc, #268]	; (8000978 <debounceOthSwitches+0x298>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	4b46      	ldr	r3, [pc, #280]	; (800098c <debounceOthSwitches+0x2ac>)
 8000872:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000876:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					othButtonHoldTimeLong[swNmbr] = app_cfg_btn_TIME_HOLD_LONG;
 800087a:	4b3f      	ldr	r3, [pc, #252]	; (8000978 <debounceOthSwitches+0x298>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	4b43      	ldr	r3, [pc, #268]	; (8000990 <debounceOthSwitches+0x2b0>)
 8000882:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000886:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				}
			}
		}
		if(othButtonHoldTimeShort[swNmbr]>0){
 800088a:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <debounceOthSwitches+0x298>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	4b3e      	ldr	r3, [pc, #248]	; (800098c <debounceOthSwitches+0x2ac>)
 8000892:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000896:	2b00      	cmp	r3, #0
 8000898:	dd2a      	ble.n	80008f0 <debounceOthSwitches+0x210>
			--othButtonHoldTimeShort[swNmbr];
 800089a:	4b37      	ldr	r3, [pc, #220]	; (8000978 <debounceOthSwitches+0x298>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	4a3b      	ldr	r2, [pc, #236]	; (800098c <debounceOthSwitches+0x2ac>)
 80008a0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80008a4:	b292      	uxth	r2, r2
 80008a6:	3a01      	subs	r2, #1
 80008a8:	b292      	uxth	r2, r2
 80008aa:	b211      	sxth	r1, r2
 80008ac:	4a37      	ldr	r2, [pc, #220]	; (800098c <debounceOthSwitches+0x2ac>)
 80008ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(othButtonHoldTimeShort[swNmbr] == 0) {
 80008b2:	4b31      	ldr	r3, [pc, #196]	; (8000978 <debounceOthSwitches+0x298>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b34      	ldr	r3, [pc, #208]	; (800098c <debounceOthSwitches+0x2ac>)
 80008ba:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d116      	bne.n	80008f0 <debounceOthSwitches+0x210>
				if(self->sendMsg != NULL){
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d012      	beq.n	80008f0 <debounceOthSwitches+0x210>
					msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_HOLD_SHORT, 0, 0);
 80008ca:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <debounceOthSwitches+0x298>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	82bb      	strh	r3, [r7, #20]
 80008d2:	2302      	movs	r3, #2
 80008d4:	82fb      	strh	r3, [r7, #22]
 80008d6:	2342      	movs	r3, #66	; 0x42
 80008d8:	763b      	strb	r3, [r7, #24]
 80008da:	2300      	movs	r3, #0
 80008dc:	767b      	strb	r3, [r7, #25]
 80008de:	2300      	movs	r3, #0
 80008e0:	837b      	strh	r3, [r7, #26]
					self->sendMsg(self, &newMessage);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f107 0214 	add.w	r2, r7, #20
 80008ea:	4611      	mov	r1, r2
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	4798      	blx	r3
				}
			}
		}
		if(othButtonHoldTimeLong[swNmbr]>0){
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <debounceOthSwitches+0x298>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b26      	ldr	r3, [pc, #152]	; (8000990 <debounceOthSwitches+0x2b0>)
 80008f8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	dd2a      	ble.n	8000956 <debounceOthSwitches+0x276>
			--othButtonHoldTimeLong[swNmbr];
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <debounceOthSwitches+0x298>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4a22      	ldr	r2, [pc, #136]	; (8000990 <debounceOthSwitches+0x2b0>)
 8000906:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800090a:	b292      	uxth	r2, r2
 800090c:	3a01      	subs	r2, #1
 800090e:	b292      	uxth	r2, r2
 8000910:	b211      	sxth	r1, r2
 8000912:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <debounceOthSwitches+0x2b0>)
 8000914:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(othButtonHoldTimeLong[swNmbr] == 0) {
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <debounceOthSwitches+0x298>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <debounceOthSwitches+0x2b0>)
 8000920:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d116      	bne.n	8000956 <debounceOthSwitches+0x276>
				if(self->sendMsg != NULL){
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d012      	beq.n	8000956 <debounceOthSwitches+0x276>
					msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_HOLD_LONG, 0, 0);
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <debounceOthSwitches+0x298>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b29b      	uxth	r3, r3
 8000936:	81bb      	strh	r3, [r7, #12]
 8000938:	2303      	movs	r3, #3
 800093a:	81fb      	strh	r3, [r7, #14]
 800093c:	2342      	movs	r3, #66	; 0x42
 800093e:	743b      	strb	r3, [r7, #16]
 8000940:	2300      	movs	r3, #0
 8000942:	747b      	strb	r3, [r7, #17]
 8000944:	2300      	movs	r3, #0
 8000946:	827b      	strh	r3, [r7, #18]
					self->sendMsg(self, &newMessage);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	f107 020c 	add.w	r2, r7, #12
 8000950:	4611      	mov	r1, r2
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	4798      	blx	r3
				}
			}
		}
	}
	if(++swNmbr >= (app_cfg_NMBR_BTNS))swNmbr = 0;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <debounceOthSwitches+0x298>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <debounceOthSwitches+0x298>)
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <debounceOthSwitches+0x298>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b04      	cmp	r3, #4
 8000968:	d902      	bls.n	8000970 <debounceOthSwitches+0x290>
 800096a:	4b03      	ldr	r3, [pc, #12]	; (8000978 <debounceOthSwitches+0x298>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
}
 8000970:	bf00      	nop
 8000972:	3730      	adds	r7, #48	; 0x30
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2000099a 	.word	0x2000099a
 800097c:	0800bac0 	.word	0x0800bac0
 8000980:	2000096c 	.word	0x2000096c
 8000984:	20000974 	.word	0x20000974
 8000988:	20000964 	.word	0x20000964
 800098c:	20000980 	.word	0x20000980
 8000990:	2000098c 	.word	0x2000098c

08000994 <app_dmx_init>:
app_dmx_Merge dmxMerge = app_dmx_MERGE_ACTIVE;
app_dmx_MergeMode dmxMergeMode = app_dmx_MERGE_MODE_HTP;
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_dmx_init(eal_task_Task *self){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	dmxMerge = app_dmx_MERGE_ACTIVE;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <app_dmx_init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
	dmxMergeMode = app_dmx_MERGE_MODE_HTP;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <app_dmx_init+0x78>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]

	dmx_registerCallback(&dmx1Out, dmx1TransmitterCallback);
 80009a8:	4919      	ldr	r1, [pc, #100]	; (8000a10 <app_dmx_init+0x7c>)
 80009aa:	481a      	ldr	r0, [pc, #104]	; (8000a14 <app_dmx_init+0x80>)
 80009ac:	f006 fe11 	bl	80075d2 <dmx_registerCallback>
	dmx_init(&dmx1Out);
 80009b0:	4818      	ldr	r0, [pc, #96]	; (8000a14 <app_dmx_init+0x80>)
 80009b2:	f006 fe1d 	bl	80075f0 <dmx_init>
	dmx_txStart(&dmx1Out);
 80009b6:	4817      	ldr	r0, [pc, #92]	; (8000a14 <app_dmx_init+0x80>)
 80009b8:	f006 fef0 	bl	800779c <dmx_txStart>

	dmx_registerCallback(&dmx2In, dmx2ReceiverCallback);
 80009bc:	4916      	ldr	r1, [pc, #88]	; (8000a18 <app_dmx_init+0x84>)
 80009be:	4817      	ldr	r0, [pc, #92]	; (8000a1c <app_dmx_init+0x88>)
 80009c0:	f006 fe07 	bl	80075d2 <dmx_registerCallback>
	if(dmxMerge == app_dmx_MERGE_ACTIVE){
 80009c4:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <app_dmx_init+0x74>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d105      	bne.n	80009d8 <app_dmx_init+0x44>
		dmx_init(&dmx2In);
 80009cc:	4813      	ldr	r0, [pc, #76]	; (8000a1c <app_dmx_init+0x88>)
 80009ce:	f006 fe0f 	bl	80075f0 <dmx_init>
		dmx_rxStart(&dmx2In);
 80009d2:	4812      	ldr	r0, [pc, #72]	; (8000a1c <app_dmx_init+0x88>)
 80009d4:	f006 fef4 	bl	80077c0 <dmx_rxStart>
	}

	HAL_GPIO_WritePin(O_USART1_DIR_GPIO_Port, O_USART1_DIR_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009de:	4810      	ldr	r0, [pc, #64]	; (8000a20 <app_dmx_init+0x8c>)
 80009e0:	f001 fab4 	bl	8001f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(O_USART2_DIR_GPIO_Port, O_USART2_DIR_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2104      	movs	r1, #4
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <app_dmx_init+0x8c>)
 80009ea:	f001 faaf 	bl	8001f4c <HAL_GPIO_WritePin>

	memset(dmxModified, 0, sizeof(dmxModified));
 80009ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f2:	2100      	movs	r1, #0
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <app_dmx_init+0x90>)
 80009f6:	f00b f826 	bl	800ba46 <memset>
	dmxTxComplete = false;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <app_dmx_init+0x94>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000fa1 	.word	0x20000fa1
 8000a0c:	20000fa2 	.word	0x20000fa2
 8000a10:	08000bc5 	.word	0x08000bc5
 8000a14:	200005e0 	.word	0x200005e0
 8000a18:	08000be9 	.word	0x08000be9
 8000a1c:	2000063c 	.word	0x2000063c
 8000a20:	48000800 	.word	0x48000800
 8000a24:	20000da0 	.word	0x20000da0
 8000a28:	20000fa0 	.word	0x20000fa0

08000a2c <app_dmx_process>:

void app_dmx_process(eal_task_Task *self){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	f083 0301 	eor.w	r3, r3, #1
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d11e      	bne.n	8000a80 <app_dmx_process+0x54>
	if(!cyclicFlag) return;
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <app_dmx_process+0x60>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	f083 0301 	eor.w	r3, r3, #1
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d118      	bne.n	8000a84 <app_dmx_process+0x58>
	/*Do everything what you want to do*/
	dmx_loop(&dmx1Out);
 8000a52:	480f      	ldr	r0, [pc, #60]	; (8000a90 <app_dmx_process+0x64>)
 8000a54:	f006 fe16 	bl	8007684 <dmx_loop>
	/*Receive makes only sense if merge is enabled*/
	if(dmxMerge == app_dmx_MERGE_ACTIVE) dmx_loop(&dmx2In);
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <app_dmx_process+0x68>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <app_dmx_process+0x3a>
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <app_dmx_process+0x6c>)
 8000a62:	f006 fe0f 	bl	8007684 <dmx_loop>

	if(dmxTxComplete){updateDmxOut(); dmxTxComplete = false;}
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <app_dmx_process+0x70>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d004      	beq.n	8000a78 <app_dmx_process+0x4c>
 8000a6e:	f000 f84b 	bl	8000b08 <updateDmxOut>
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <app_dmx_process+0x70>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]

	cyclicFlag = false;
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <app_dmx_process+0x60>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
 8000a7e:	e002      	b.n	8000a86 <app_dmx_process+0x5a>
	if(!self->enable) return;
 8000a80:	bf00      	nop
 8000a82:	e000      	b.n	8000a86 <app_dmx_process+0x5a>
	if(!cyclicFlag) return;
 8000a84:	bf00      	nop
}
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000d9c 	.word	0x20000d9c
 8000a90:	200005e0 	.word	0x200005e0
 8000a94:	20000fa1 	.word	0x20000fa1
 8000a98:	2000063c 	.word	0x2000063c
 8000a9c:	20000fa0 	.word	0x20000fa0

08000aa0 <app_dmx_cyclic1ms>:

void app_dmx_cyclic1ms(eal_task_Task *self, bool stat){
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <app_dmx_cyclic1ms+0x20>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000d9c 	.word	0x20000d9c

08000ac4 <app_dmx_receiveMsg>:

void app_dmx_receiveMsg(eal_task_Task *self, msg_Message *message){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	if(message->type == app_cfg_DMX_MSG){
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	791b      	ldrb	r3, [r3, #4]
 8000ad2:	2b44      	cmp	r3, #68	; 0x44
 8000ad4:	d111      	bne.n	8000afa <app_dmx_receiveMsg+0x36>
		/*Action parsing*/
		if(msg_isAction(message)){
 8000ad6:	6838      	ldr	r0, [r7, #0]
 8000ad8:	f007 f99e 	bl	8007e18 <msg_isAction>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00b      	beq.n	8000afa <app_dmx_receiveMsg+0x36>
			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000aea:	81fb      	strh	r3, [r7, #14]
			dmxModified[idx] = (uint8_t)message->value;
 8000aec:	89fb      	ldrh	r3, [r7, #14]
 8000aee:	683a      	ldr	r2, [r7, #0]
 8000af0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000af4:	b2d1      	uxtb	r1, r2
 8000af6:	4a03      	ldr	r2, [pc, #12]	; (8000b04 <app_dmx_receiveMsg+0x40>)
 8000af8:	54d1      	strb	r1, [r2, r3]
		}
		/*Event parsing*/
		}else{

		}
}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000da0 	.word	0x20000da0

08000b08 <updateDmxOut>:

/* Helper ---------------------------------------------------------------------*/
static void updateDmxOut(){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
	if(dmxMerge == app_dmx_MERGE_ACTIVE){
 8000b0e:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <updateDmxOut+0xa8>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d13f      	bne.n	8000b96 <updateDmxOut+0x8e>
		for(int i = 0; i < dmx1Out.universeSize; ++i){
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	e034      	b.n	8000b86 <updateDmxOut+0x7e>
			uint8_t dmxRxValue = dmx2In.universe[i]; /*Atomic operation*/
 8000b1c:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <updateDmxOut+0xac>)
 8000b1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4413      	add	r3, r2
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	70fb      	strb	r3, [r7, #3]
			uint8_t dmxModValue = dmxModified[i]; /*Atomic operation*/
 8000b28:	4a23      	ldr	r2, [pc, #140]	; (8000bb8 <updateDmxOut+0xb0>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	70bb      	strb	r3, [r7, #2]
			if(dmxMergeMode == app_dmx_MERGE_MODE_HTP) {	/*Highest takes presence*/
 8000b32:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <updateDmxOut+0xb4>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d111      	bne.n	8000b5e <updateDmxOut+0x56>
				if(dmxRxValue > dmxModValue) dmx1Out.universe[i] = dmxRxValue;
 8000b3a:	78fa      	ldrb	r2, [r7, #3]
 8000b3c:	78bb      	ldrb	r3, [r7, #2]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d906      	bls.n	8000b50 <updateDmxOut+0x48>
 8000b42:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <updateDmxOut+0xb8>)
 8000b44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	78fa      	ldrb	r2, [r7, #3]
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	e017      	b.n	8000b80 <updateDmxOut+0x78>
				else dmx1Out.universe[i] = dmxModValue;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <updateDmxOut+0xb8>)
 8000b52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4413      	add	r3, r2
 8000b58:	78ba      	ldrb	r2, [r7, #2]
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	e010      	b.n	8000b80 <updateDmxOut+0x78>
			}else{								/*Lowest takes presence*/
				if(dmxRxValue < dmxModValue) dmx1Out.universe[i] = dmxRxValue;
 8000b5e:	78fa      	ldrb	r2, [r7, #3]
 8000b60:	78bb      	ldrb	r3, [r7, #2]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d206      	bcs.n	8000b74 <updateDmxOut+0x6c>
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <updateDmxOut+0xb8>)
 8000b68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	78fa      	ldrb	r2, [r7, #3]
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	e005      	b.n	8000b80 <updateDmxOut+0x78>
				else dmx1Out.universe[i] = dmxModValue;
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <updateDmxOut+0xb8>)
 8000b76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	78ba      	ldrb	r2, [r7, #2]
 8000b7e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < dmx1Out.universeSize; ++i){
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3301      	adds	r3, #1
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <updateDmxOut+0xb8>)
 8000b88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dcc3      	bgt.n	8000b1c <updateDmxOut+0x14>
			}
		}
	}else{ /*If merge is disabled just copy the dmxModified data to output*/
		memcpy(dmx1Out.universe, dmxModified, dmx1Out.universeSize);
	}
}
 8000b94:	e008      	b.n	8000ba8 <updateDmxOut+0xa0>
		memcpy(dmx1Out.universe, dmxModified, dmx1Out.universeSize);
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <updateDmxOut+0xb8>)
 8000b98:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <updateDmxOut+0xb8>)
 8000b9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4905      	ldr	r1, [pc, #20]	; (8000bb8 <updateDmxOut+0xb0>)
 8000ba4:	f00a ff44 	bl	800ba30 <memcpy>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000fa1 	.word	0x20000fa1
 8000bb4:	2000063c 	.word	0x2000063c
 8000bb8:	20000da0 	.word	0x20000da0
 8000bbc:	20000fa2 	.word	0x20000fa2
 8000bc0:	200005e0 	.word	0x200005e0

08000bc4 <dmx1TransmitterCallback>:

/* Callback's ---------------------------------------------------------------------*/
bool dmx1TransmitterCallback(dmx_cfg_Instance *dmx){
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	bool state = true;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
	dmxTxComplete = true;
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <dmx1TransmitterCallback+0x20>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
	return state;
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	20000fa0 	.word	0x20000fa0

08000be8 <dmx2ReceiverCallback>:

bool dmx2ReceiverCallback(dmx_cfg_Instance *dmx){
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	bool state = true;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
	return state;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <USART1_IRQHandler>:
/* IRQs ---------------------------------------------------------------------*/
void USART1_IRQHandler(void){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	dmx_irqRxInterfaceHandler(&dmx2In);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <USART1_IRQHandler+0x10>)
 8000c0a:	f006 fecd 	bl	80079a8 <dmx_irqRxInterfaceHandler>
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000063c 	.word	0x2000063c

08000c18 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	dmx_irqTxInterfaceHandler(&dmx1Out);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <USART2_IRQHandler+0x10>)
 8000c1e:	f006 fe4e 	bl	80078be <dmx_irqTxInterfaceHandler>
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200005e0 	.word	0x200005e0

08000c2c <app_dmx_preset_init>:
static volatile bool cyclicFlag = false;
static volatile int16_t internalTimer = 0;
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_dmx_preset_init(eal_task_Task *self){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e061      	b.n	8000cfe <app_dmx_preset_init+0xd2>
		myPresets[i].relTime_ms = 0;
 8000c3a:	4a34      	ldr	r2, [pc, #208]	; (8000d0c <app_dmx_preset_init+0xe0>)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000c42:	fb01 f303 	mul.w	r3, r1, r3
 8000c46:	4413      	add	r3, r2
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
		myPresets[i].trigger = false;
 8000c4e:	4a2f      	ldr	r2, [pc, #188]	; (8000d0c <app_dmx_preset_init+0xe0>)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000c56:	fb01 f303 	mul.w	r3, r1, r3
 8000c5a:	4413      	add	r3, r2
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
		myPresets[i].transitionDoneCnt = 0;
 8000c60:	4a2a      	ldr	r2, [pc, #168]	; (8000d0c <app_dmx_preset_init+0xe0>)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000c68:	fb01 f303 	mul.w	r3, r1, r3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3308      	adds	r3, #8
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
		myPresets[i].transitionEnableSize = 0;
 8000c74:	4a25      	ldr	r2, [pc, #148]	; (8000d0c <app_dmx_preset_init+0xe0>)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000c7c:	fb01 f303 	mul.w	r3, r1, r3
 8000c80:	4413      	add	r3, r2
 8000c82:	330c      	adds	r3, #12
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
		memset(myPresets[i].presetTransitionStatus, 0, sizeof(myPresets[i].presetTransitionStatus));
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8000c8e:	fb02 f303 	mul.w	r3, r2, r3
 8000c92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000c96:	4a1d      	ldr	r2, [pc, #116]	; (8000d0c <app_dmx_preset_init+0xe0>)
 8000c98:	4413      	add	r3, r2
 8000c9a:	2228      	movs	r2, #40	; 0x28
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f00a fed1 	bl	800ba46 <memset>
		for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	e023      	b.n	8000cf2 <app_dmx_preset_init+0xc6>
			if(myPresets[i].presetTransitionSettings[j].enable) ++myPresets[i].transitionEnableSize;
 8000caa:	4918      	ldr	r1, [pc, #96]	; (8000d0c <app_dmx_preset_init+0xe0>)
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8000cb6:	fb00 f303 	mul.w	r3, r0, r3
 8000cba:	4413      	add	r3, r2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	331d      	adds	r3, #29
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d012      	beq.n	8000cec <app_dmx_preset_init+0xc0>
 8000cc6:	4a11      	ldr	r2, [pc, #68]	; (8000d0c <app_dmx_preset_init+0xe0>)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000cce:	fb01 f303 	mul.w	r3, r1, r3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	330c      	adds	r3, #12
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	1c5a      	adds	r2, r3, #1
 8000cda:	490c      	ldr	r1, [pc, #48]	; (8000d0c <app_dmx_preset_init+0xe0>)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8000ce2:	fb00 f303 	mul.w	r3, r0, r3
 8000ce6:	440b      	add	r3, r1
 8000ce8:	330c      	adds	r3, #12
 8000cea:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	2b13      	cmp	r3, #19
 8000cf6:	ddd8      	ble.n	8000caa <app_dmx_preset_init+0x7e>
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	dd9a      	ble.n	8000c3a <app_dmx_preset_init+0xe>
		}
	}
}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000000 	.word	0x20000000

08000d10 <app_dmx_preset_process>:

void app_dmx_preset_process(eal_task_Task *self){
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	f083 0301 	eor.w	r3, r3, #1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 80d9 	bne.w	8000eda <app_dmx_preset_process+0x1ca>
	if(!cyclicFlag) return;
 8000d28:	4b6f      	ldr	r3, [pc, #444]	; (8000ee8 <app_dmx_preset_process+0x1d8>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	f083 0301 	eor.w	r3, r3, #1
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f040 80d2 	bne.w	8000ede <app_dmx_preset_process+0x1ce>
	/*Do everything what you want to do*/
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	e0c4      	b.n	8000eca <app_dmx_preset_process+0x1ba>
		if(myPresets[i].trigger){	/*Preset is triggered and can be executed*/
 8000d40:	4a6a      	ldr	r2, [pc, #424]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000d48:	fb01 f303 	mul.w	r3, r1, r3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 80b7 	beq.w	8000ec4 <app_dmx_preset_process+0x1b4>
			++myPresets[i].relTime_ms;
 8000d56:	4a65      	ldr	r2, [pc, #404]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000d5e:	fb01 f303 	mul.w	r3, r1, r3
 8000d62:	4413      	add	r3, r2
 8000d64:	3304      	adds	r3, #4
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	1c5a      	adds	r2, r3, #1
 8000d6a:	4960      	ldr	r1, [pc, #384]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8000d72:	fb00 f303 	mul.w	r3, r0, r3
 8000d76:	440b      	add	r3, r1
 8000d78:	3304      	adds	r3, #4
 8000d7a:	601a      	str	r2, [r3, #0]
			for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	e05e      	b.n	8000e40 <app_dmx_preset_process+0x130>
				if(myPresets[i].presetTransitionSettings[j].enable){
 8000d82:	495a      	ldr	r1, [pc, #360]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000d84:	68ba      	ldr	r2, [r7, #8]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	0112      	lsls	r2, r2, #4
 8000d8a:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8000d8e:	fb00 f303 	mul.w	r3, r0, r3
 8000d92:	4413      	add	r3, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	331d      	adds	r3, #29
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d04d      	beq.n	8000e3a <app_dmx_preset_process+0x12a>
					if(myPresets[i].presetTransitionStatus[j].transStep == app_dmx_preset_cfg_TRANS_STEP_EXE) performNextTransitionStep(self, i, j);
 8000d9e:	4953      	ldr	r1, [pc, #332]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	22bc      	movs	r2, #188	; 0xbc
 8000da4:	fb02 f203 	mul.w	r2, r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4413      	add	r3, r2
 8000dac:	33a8      	adds	r3, #168	; 0xa8
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	440b      	add	r3, r1
 8000db2:	785b      	ldrb	r3, [r3, #1]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d108      	bne.n	8000dca <app_dmx_preset_process+0xba>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 f964 	bl	8001090 <performNextTransitionStep>
 8000dc8:	e037      	b.n	8000e3a <app_dmx_preset_process+0x12a>
					else if((myPresets[i].relTime_ms >= myPresets[i].presetTransitionSettings[j].transDelay_ms) && (myPresets[i].presetTransitionStatus[j].transStep == app_dmx_preset_cfg_TRANS_STEP_NONE)){
 8000dca:	4a48      	ldr	r2, [pc, #288]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000dd2:	fb01 f303 	mul.w	r3, r1, r3
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3304      	adds	r3, #4
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4843      	ldr	r0, [pc, #268]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000dde:	68b9      	ldr	r1, [r7, #8]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	0109      	lsls	r1, r1, #4
 8000de4:	f44f 74bc 	mov.w	r4, #376	; 0x178
 8000de8:	fb04 f303 	mul.w	r3, r4, r3
 8000dec:	440b      	add	r3, r1
 8000dee:	4403      	add	r3, r0
 8000df0:	3318      	adds	r3, #24
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d320      	bcc.n	8000e3a <app_dmx_preset_process+0x12a>
 8000df8:	493c      	ldr	r1, [pc, #240]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	22bc      	movs	r2, #188	; 0xbc
 8000dfe:	fb02 f203 	mul.w	r2, r2, r3
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	4413      	add	r3, r2
 8000e06:	33a8      	adds	r3, #168	; 0xa8
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	440b      	add	r3, r1
 8000e0c:	785b      	ldrb	r3, [r3, #1]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d113      	bne.n	8000e3a <app_dmx_preset_process+0x12a>
						myPresets[i].presetTransitionStatus[j].transStep = app_dmx_preset_cfg_TRANS_STEP_EXE;
 8000e12:	4936      	ldr	r1, [pc, #216]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	22bc      	movs	r2, #188	; 0xbc
 8000e18:	fb02 f203 	mul.w	r2, r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4413      	add	r3, r2
 8000e20:	33a8      	adds	r3, #168	; 0xa8
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	440b      	add	r3, r1
 8000e26:	2201      	movs	r2, #1
 8000e28:	705a      	strb	r2, [r3, #1]
						performNextTransitionStep(self, i, j);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	4619      	mov	r1, r3
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 f92b 	bl	8001090 <performNextTransitionStep>
			for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	2b13      	cmp	r3, #19
 8000e44:	dd9d      	ble.n	8000d82 <app_dmx_preset_process+0x72>
					}
				}
			}
			if(myPresets[i].transitionDoneCnt >= myPresets[i].transitionEnableSize){	/*All transitions are performed*/
 8000e46:	4a29      	ldr	r2, [pc, #164]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000e4e:	fb01 f303 	mul.w	r3, r1, r3
 8000e52:	4413      	add	r3, r2
 8000e54:	3308      	adds	r3, #8
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4924      	ldr	r1, [pc, #144]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8000e60:	fb00 f303 	mul.w	r3, r0, r3
 8000e64:	440b      	add	r3, r1
 8000e66:	330c      	adds	r3, #12
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d32a      	bcc.n	8000ec4 <app_dmx_preset_process+0x1b4>
				myPresets[i].transitionDoneCnt = 0;
 8000e6e:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000e76:	fb01 f303 	mul.w	r3, r1, r3
 8000e7a:	4413      	add	r3, r2
 8000e7c:	3308      	adds	r3, #8
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
				myPresets[i].trigger = false;
 8000e82:	4a1a      	ldr	r2, [pc, #104]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000e8a:	fb01 f303 	mul.w	r3, r1, r3
 8000e8e:	4413      	add	r3, r2
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
				myPresets[i].relTime_ms = 0;
 8000e94:	4a15      	ldr	r2, [pc, #84]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000e9c:	fb01 f303 	mul.w	r3, r1, r3
 8000ea0:	4413      	add	r3, r2
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
				memset(myPresets[i].presetTransitionStatus, 0, sizeof(myPresets[i].presetTransitionStatus));
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8000eae:	fb02 f303 	mul.w	r3, r2, r3
 8000eb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000eb6:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <app_dmx_preset_process+0x1dc>)
 8000eb8:	4413      	add	r3, r2
 8000eba:	2228      	movs	r2, #40	; 0x28
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f00a fdc1 	bl	800ba46 <memset>
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	f77f af37 	ble.w	8000d40 <app_dmx_preset_process+0x30>
			}
		}
	}
	/*End of everything you want to do*/
	cyclicFlag = false;
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <app_dmx_preset_process+0x1d8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	e002      	b.n	8000ee0 <app_dmx_preset_process+0x1d0>
	if(!self->enable) return;
 8000eda:	bf00      	nop
 8000edc:	e000      	b.n	8000ee0 <app_dmx_preset_process+0x1d0>
	if(!cyclicFlag) return;
 8000ede:	bf00      	nop
}
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd90      	pop	{r4, r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000fa3 	.word	0x20000fa3
 8000eec:	20000000 	.word	0x20000000

08000ef0 <app_dmx_preset_cyclic1ms>:

void app_dmx_preset_cyclic1ms(eal_task_Task *self, bool stat){
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <app_dmx_preset_cyclic1ms+0x20>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000fa3 	.word	0x20000fa3

08000f14 <app_dmx_preset_receiveMsg>:

void app_dmx_preset_receiveMsg(eal_task_Task *self, msg_Message *message){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	if(message->type == app_cfg_DMX_PRESET_MSG){
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	791b      	ldrb	r3, [r3, #4]
 8000f22:	2b50      	cmp	r3, #80	; 0x50
 8000f24:	f040 80ad 	bne.w	8001082 <app_dmx_preset_receiveMsg+0x16e>
		/*Action parsing*/
		if(msg_isAction(message)){
 8000f28:	6838      	ldr	r0, [r7, #0]
 8000f2a:	f006 ff75 	bl	8007e18 <msg_isAction>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 80a6 	beq.w	8001082 <app_dmx_preset_receiveMsg+0x16e>
			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f3e:	83fb      	strh	r3, [r7, #30]
			if(APP_CFG_IS_INDEX_IN_RANGE(idx, app_cfg_dmx_preset_TRIGGER_PRESET_OFFSET_IDX, app_cfg_dmx_preset_TRIGGER_PRESET4_IDX+1)){
 8000f40:	8bfb      	ldrh	r3, [r7, #30]
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	f200 809d 	bhi.w	8001082 <app_dmx_preset_receiveMsg+0x16e>
				if((message->value == app_cfg_dmx_preset_TRIGGER_ENABLE) && (myPresets[idx].trigger == false)) {	/*Can be triggered only once*/
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f4e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d151      	bne.n	8000ffa <app_dmx_preset_receiveMsg+0xe6>
 8000f56:	8bfb      	ldrh	r3, [r7, #30]
 8000f58:	4a4c      	ldr	r2, [pc, #304]	; (800108c <app_dmx_preset_receiveMsg+0x178>)
 8000f5a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000f5e:	fb01 f303 	mul.w	r3, r1, r3
 8000f62:	4413      	add	r3, r2
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	f083 0301 	eor.w	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d044      	beq.n	8000ffa <app_dmx_preset_receiveMsg+0xe6>
					myPresets[idx].trigger = true;
 8000f70:	8bfb      	ldrh	r3, [r7, #30]
 8000f72:	4a46      	ldr	r2, [pc, #280]	; (800108c <app_dmx_preset_receiveMsg+0x178>)
 8000f74:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000f78:	fb01 f303 	mul.w	r3, r1, r3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
					myPresets[idx].relTime_ms = 0;
 8000f82:	8bfb      	ldrh	r3, [r7, #30]
 8000f84:	4a41      	ldr	r2, [pc, #260]	; (800108c <app_dmx_preset_receiveMsg+0x178>)
 8000f86:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000f8a:	fb01 f303 	mul.w	r3, r1, r3
 8000f8e:	4413      	add	r3, r2
 8000f90:	3304      	adds	r3, #4
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
					myPresets[idx].transitionDoneCnt = 0;
 8000f96:	8bfb      	ldrh	r3, [r7, #30]
 8000f98:	4a3c      	ldr	r2, [pc, #240]	; (800108c <app_dmx_preset_receiveMsg+0x178>)
 8000f9a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000f9e:	fb01 f303 	mul.w	r3, r1, r3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	3308      	adds	r3, #8
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
					memset(myPresets[idx].presetTransitionStatus, 0, sizeof(myPresets[idx].presetTransitionStatus));
 8000faa:	8bfb      	ldrh	r3, [r7, #30]
 8000fac:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
 8000fb4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000fb8:	4a34      	ldr	r2, [pc, #208]	; (800108c <app_dmx_preset_receiveMsg+0x178>)
 8000fba:	4413      	add	r3, r2
 8000fbc:	2228      	movs	r2, #40	; 0x28
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f00a fd40 	bl	800ba46 <memset>
					if(self->sendMsg != NULL){
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d059      	beq.n	8001082 <app_dmx_preset_receiveMsg+0x16e>
						msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_EVENT(idx), app_cfg_dmx_preset_TRIGGER_ENABLE, 0, 0);
 8000fce:	8bfb      	ldrh	r3, [r7, #30]
 8000fd0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	82bb      	strh	r3, [r7, #20]
 8000fd8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000fdc:	82fb      	strh	r3, [r7, #22]
 8000fde:	2350      	movs	r3, #80	; 0x50
 8000fe0:	763b      	strb	r3, [r7, #24]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	767b      	strb	r3, [r7, #25]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	837b      	strh	r3, [r7, #26]
						self->sendMsg(self, &newMessage);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f107 0214 	add.w	r2, r7, #20
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	4798      	blx	r3
					if(self->sendMsg != NULL){
 8000ff8:	e043      	b.n	8001082 <app_dmx_preset_receiveMsg+0x16e>
					}
				}else{
					myPresets[idx].trigger = false;
 8000ffa:	8bfb      	ldrh	r3, [r7, #30]
 8000ffc:	4a23      	ldr	r2, [pc, #140]	; (800108c <app_dmx_preset_receiveMsg+0x178>)
 8000ffe:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8001002:	fb01 f303 	mul.w	r3, r1, r3
 8001006:	4413      	add	r3, r2
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
					myPresets[idx].relTime_ms = 0;
 800100c:	8bfb      	ldrh	r3, [r7, #30]
 800100e:	4a1f      	ldr	r2, [pc, #124]	; (800108c <app_dmx_preset_receiveMsg+0x178>)
 8001010:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8001014:	fb01 f303 	mul.w	r3, r1, r3
 8001018:	4413      	add	r3, r2
 800101a:	3304      	adds	r3, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
					myPresets[idx].transitionDoneCnt = 0;
 8001020:	8bfb      	ldrh	r3, [r7, #30]
 8001022:	4a1a      	ldr	r2, [pc, #104]	; (800108c <app_dmx_preset_receiveMsg+0x178>)
 8001024:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8001028:	fb01 f303 	mul.w	r3, r1, r3
 800102c:	4413      	add	r3, r2
 800102e:	3308      	adds	r3, #8
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
					memset(myPresets[idx].presetTransitionStatus, 0, sizeof(myPresets[idx].presetTransitionStatus));
 8001034:	8bfb      	ldrh	r3, [r7, #30]
 8001036:	f44f 72bc 	mov.w	r2, #376	; 0x178
 800103a:	fb02 f303 	mul.w	r3, r2, r3
 800103e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <app_dmx_preset_receiveMsg+0x178>)
 8001044:	4413      	add	r3, r2
 8001046:	2228      	movs	r2, #40	; 0x28
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f00a fcfb 	bl	800ba46 <memset>
					if(self->sendMsg != NULL){
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d014      	beq.n	8001082 <app_dmx_preset_receiveMsg+0x16e>
						msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_EVENT(idx), app_cfg_dmx_preset_TRIGGER_DISABLE, 0, 0);
 8001058:	8bfb      	ldrh	r3, [r7, #30]
 800105a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800105e:	b29b      	uxth	r3, r3
 8001060:	81bb      	strh	r3, [r7, #12]
 8001062:	2300      	movs	r3, #0
 8001064:	81fb      	strh	r3, [r7, #14]
 8001066:	2350      	movs	r3, #80	; 0x50
 8001068:	743b      	strb	r3, [r7, #16]
 800106a:	2300      	movs	r3, #0
 800106c:	747b      	strb	r3, [r7, #17]
 800106e:	2300      	movs	r3, #0
 8001070:	827b      	strh	r3, [r7, #18]
						self->sendMsg(self, &newMessage);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f107 020c 	add.w	r2, r7, #12
 800107a:	4611      	mov	r1, r2
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	4798      	blx	r3
		/*Event parsing*/
		}else{

		}
	}
}
 8001080:	e7ff      	b.n	8001082 <app_dmx_preset_receiveMsg+0x16e>
 8001082:	bf00      	nop
 8001084:	3720      	adds	r7, #32
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000000 	.word	0x20000000

08001090 <performNextTransitionStep>:

/*Helper*/
static void performNextTransitionStep(eal_task_Task *self, uint8_t preset, uint8_t transition){
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b08b      	sub	sp, #44	; 0x2c
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	460b      	mov	r3, r1
 800109a:	72fb      	strb	r3, [r7, #11]
 800109c:	4613      	mov	r3, r2
 800109e:	72bb      	strb	r3, [r7, #10]
	float actualTransitionTime = (float)(myPresets[preset].relTime_ms - myPresets[preset].presetTransitionSettings[transition].transDelay_ms);
 80010a0:	7afb      	ldrb	r3, [r7, #11]
 80010a2:	4aa5      	ldr	r2, [pc, #660]	; (8001338 <performNextTransitionStep+0x2a8>)
 80010a4:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80010a8:	fb01 f303 	mul.w	r3, r1, r3
 80010ac:	4413      	add	r3, r2
 80010ae:	3304      	adds	r3, #4
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	7afb      	ldrb	r3, [r7, #11]
 80010b4:	7ab9      	ldrb	r1, [r7, #10]
 80010b6:	48a0      	ldr	r0, [pc, #640]	; (8001338 <performNextTransitionStep+0x2a8>)
 80010b8:	0109      	lsls	r1, r1, #4
 80010ba:	f44f 74bc 	mov.w	r4, #376	; 0x178
 80010be:	fb04 f303 	mul.w	r3, r4, r3
 80010c2:	440b      	add	r3, r1
 80010c4:	4403      	add	r3, r0
 80010c6:	3318      	adds	r3, #24
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	ee07 3a90 	vmov	s15, r3
 80010d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d4:	edc7 7a08 	vstr	s15, [r7, #32]
	uint16_t newVal = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(myPresets[preset].presetTransitionSettings[transition].transTime_ms == 0){
 80010dc:	7afb      	ldrb	r3, [r7, #11]
 80010de:	7aba      	ldrb	r2, [r7, #10]
 80010e0:	4995      	ldr	r1, [pc, #596]	; (8001338 <performNextTransitionStep+0x2a8>)
 80010e2:	3201      	adds	r2, #1
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	f44f 70bc 	mov.w	r0, #376	; 0x178
 80010ea:	fb00 f303 	mul.w	r3, r0, r3
 80010ee:	4413      	add	r3, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	3304      	adds	r3, #4
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d12c      	bne.n	8001154 <performNextTransitionStep+0xc4>
		newVal = myPresets[preset].presetTransitionSettings[transition].dmxEndVal;
 80010fa:	7afb      	ldrb	r3, [r7, #11]
 80010fc:	7aba      	ldrb	r2, [r7, #10]
 80010fe:	498e      	ldr	r1, [pc, #568]	; (8001338 <performNextTransitionStep+0x2a8>)
 8001100:	3201      	adds	r2, #1
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8001108:	fb00 f303 	mul.w	r3, r0, r3
 800110c:	4413      	add	r3, r2
 800110e:	440b      	add	r3, r1
 8001110:	3303      	adds	r3, #3
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	84fb      	strh	r3, [r7, #38]	; 0x26
		++myPresets[preset].transitionDoneCnt;
 8001116:	7afb      	ldrb	r3, [r7, #11]
 8001118:	4987      	ldr	r1, [pc, #540]	; (8001338 <performNextTransitionStep+0x2a8>)
 800111a:	f44f 72bc 	mov.w	r2, #376	; 0x178
 800111e:	fb02 f203 	mul.w	r2, r2, r3
 8001122:	440a      	add	r2, r1
 8001124:	3208      	adds	r2, #8
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	3201      	adds	r2, #1
 800112a:	4983      	ldr	r1, [pc, #524]	; (8001338 <performNextTransitionStep+0x2a8>)
 800112c:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8001130:	fb00 f303 	mul.w	r3, r0, r3
 8001134:	440b      	add	r3, r1
 8001136:	3308      	adds	r3, #8
 8001138:	601a      	str	r2, [r3, #0]
		myPresets[preset].presetTransitionStatus[transition].transStep = app_dmx_preset_cfg_TRANS_STEP_DONE;
 800113a:	7afa      	ldrb	r2, [r7, #11]
 800113c:	7abb      	ldrb	r3, [r7, #10]
 800113e:	497e      	ldr	r1, [pc, #504]	; (8001338 <performNextTransitionStep+0x2a8>)
 8001140:	20bc      	movs	r0, #188	; 0xbc
 8001142:	fb00 f202 	mul.w	r2, r0, r2
 8001146:	4413      	add	r3, r2
 8001148:	33a8      	adds	r3, #168	; 0xa8
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	440b      	add	r3, r1
 800114e:	2202      	movs	r2, #2
 8001150:	705a      	strb	r2, [r3, #1]
 8001152:	e098      	b.n	8001286 <performNextTransitionStep+0x1f6>
	}else{
		//TODO: Perform different ramps
		float diff = (float)((float)myPresets[preset].presetTransitionSettings[transition].dmxEndVal - (float)myPresets[preset].presetTransitionSettings[transition].dmxStartVal);
 8001154:	7afb      	ldrb	r3, [r7, #11]
 8001156:	7aba      	ldrb	r2, [r7, #10]
 8001158:	4977      	ldr	r1, [pc, #476]	; (8001338 <performNextTransitionStep+0x2a8>)
 800115a:	3201      	adds	r2, #1
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8001162:	fb00 f303 	mul.w	r3, r0, r3
 8001166:	4413      	add	r3, r2
 8001168:	440b      	add	r3, r1
 800116a:	3303      	adds	r3, #3
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	7aba      	ldrb	r2, [r7, #10]
 800117a:	496f      	ldr	r1, [pc, #444]	; (8001338 <performNextTransitionStep+0x2a8>)
 800117c:	3201      	adds	r2, #1
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8001184:	fb00 f303 	mul.w	r3, r0, r3
 8001188:	4413      	add	r3, r2
 800118a:	440b      	add	r3, r1
 800118c:	3302      	adds	r3, #2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800119c:	edc7 7a07 	vstr	s15, [r7, #28]
		float actualVal = (diff/((float)myPresets[preset].presetTransitionSettings[transition].transTime_ms)*actualTransitionTime) + (float)myPresets[preset].presetTransitionSettings[transition].dmxStartVal;
 80011a0:	7afb      	ldrb	r3, [r7, #11]
 80011a2:	7aba      	ldrb	r2, [r7, #10]
 80011a4:	4964      	ldr	r1, [pc, #400]	; (8001338 <performNextTransitionStep+0x2a8>)
 80011a6:	3201      	adds	r2, #1
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	f44f 70bc 	mov.w	r0, #376	; 0x178
 80011ae:	fb00 f303 	mul.w	r3, r0, r3
 80011b2:	4413      	add	r3, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	3304      	adds	r3, #4
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80011c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80011ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d2:	7afb      	ldrb	r3, [r7, #11]
 80011d4:	7aba      	ldrb	r2, [r7, #10]
 80011d6:	4958      	ldr	r1, [pc, #352]	; (8001338 <performNextTransitionStep+0x2a8>)
 80011d8:	3201      	adds	r2, #1
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	f44f 70bc 	mov.w	r0, #376	; 0x178
 80011e0:	fb00 f303 	mul.w	r3, r0, r3
 80011e4:	4413      	add	r3, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	3302      	adds	r3, #2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f8:	edc7 7a06 	vstr	s15, [r7, #24]
		newVal = (uint16_t)actualVal;
 80011fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001204:	edc7 7a01 	vstr	s15, [r7, #4]
 8001208:	88bb      	ldrh	r3, [r7, #4]
 800120a:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(newVal >= myPresets[preset].presetTransitionSettings[transition].dmxEndVal){
 800120c:	7afb      	ldrb	r3, [r7, #11]
 800120e:	7aba      	ldrb	r2, [r7, #10]
 8001210:	4949      	ldr	r1, [pc, #292]	; (8001338 <performNextTransitionStep+0x2a8>)
 8001212:	3201      	adds	r2, #1
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	f44f 70bc 	mov.w	r0, #376	; 0x178
 800121a:	fb00 f303 	mul.w	r3, r0, r3
 800121e:	4413      	add	r3, r2
 8001220:	440b      	add	r3, r1
 8001222:	3303      	adds	r3, #3
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800122a:	429a      	cmp	r2, r3
 800122c:	d32b      	bcc.n	8001286 <performNextTransitionStep+0x1f6>
			newVal = myPresets[preset].presetTransitionSettings[transition].dmxEndVal;
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	7aba      	ldrb	r2, [r7, #10]
 8001232:	4941      	ldr	r1, [pc, #260]	; (8001338 <performNextTransitionStep+0x2a8>)
 8001234:	3201      	adds	r2, #1
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	f44f 70bc 	mov.w	r0, #376	; 0x178
 800123c:	fb00 f303 	mul.w	r3, r0, r3
 8001240:	4413      	add	r3, r2
 8001242:	440b      	add	r3, r1
 8001244:	3303      	adds	r3, #3
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	84fb      	strh	r3, [r7, #38]	; 0x26
			++myPresets[preset].transitionDoneCnt;
 800124a:	7afb      	ldrb	r3, [r7, #11]
 800124c:	493a      	ldr	r1, [pc, #232]	; (8001338 <performNextTransitionStep+0x2a8>)
 800124e:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8001252:	fb02 f203 	mul.w	r2, r2, r3
 8001256:	440a      	add	r2, r1
 8001258:	3208      	adds	r2, #8
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	3201      	adds	r2, #1
 800125e:	4936      	ldr	r1, [pc, #216]	; (8001338 <performNextTransitionStep+0x2a8>)
 8001260:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8001264:	fb00 f303 	mul.w	r3, r0, r3
 8001268:	440b      	add	r3, r1
 800126a:	3308      	adds	r3, #8
 800126c:	601a      	str	r2, [r3, #0]
			myPresets[preset].presetTransitionStatus[transition].transStep = app_dmx_preset_cfg_TRANS_STEP_DONE;
 800126e:	7afa      	ldrb	r2, [r7, #11]
 8001270:	7abb      	ldrb	r3, [r7, #10]
 8001272:	4931      	ldr	r1, [pc, #196]	; (8001338 <performNextTransitionStep+0x2a8>)
 8001274:	20bc      	movs	r0, #188	; 0xbc
 8001276:	fb00 f202 	mul.w	r2, r0, r2
 800127a:	4413      	add	r3, r2
 800127c:	33a8      	adds	r3, #168	; 0xa8
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	440b      	add	r3, r1
 8001282:	2202      	movs	r2, #2
 8001284:	705a      	strb	r2, [r3, #1]
		}
	}
	//If the if request is enabled 0 values can't be send because the comparison will be never true
//	if(newVal != myPresets[preset].presetTransitionStatus[transition].actualVal) {
		myPresets[preset].presetTransitionStatus[transition].actualVal = newVal;
 8001286:	7afa      	ldrb	r2, [r7, #11]
 8001288:	7abb      	ldrb	r3, [r7, #10]
 800128a:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800128c:	b2cc      	uxtb	r4, r1
 800128e:	492a      	ldr	r1, [pc, #168]	; (8001338 <performNextTransitionStep+0x2a8>)
 8001290:	20bc      	movs	r0, #188	; 0xbc
 8001292:	fb00 f202 	mul.w	r2, r0, r2
 8001296:	4413      	add	r3, r2
 8001298:	33a8      	adds	r3, #168	; 0xa8
 800129a:	4622      	mov	r2, r4
 800129c:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
		if(self->sendMsg != NULL){
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d02a      	beq.n	80012fe <performNextTransitionStep+0x26e>
			msg_Message newMessage = msg_LITERAL(app_cfg_DMX_MSG, msg_ACTION(myPresets[preset].presetTransitionSettings[transition].dmxCh), myPresets[preset].presetTransitionStatus[transition].actualVal, 0, 0);
 80012a8:	7afb      	ldrb	r3, [r7, #11]
 80012aa:	7aba      	ldrb	r2, [r7, #10]
 80012ac:	4922      	ldr	r1, [pc, #136]	; (8001338 <performNextTransitionStep+0x2a8>)
 80012ae:	3201      	adds	r2, #1
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	f44f 70bc 	mov.w	r0, #376	; 0x178
 80012b6:	fb00 f303 	mul.w	r3, r0, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	440b      	add	r3, r1
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80012c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	823b      	strh	r3, [r7, #16]
 80012cc:	7afa      	ldrb	r2, [r7, #11]
 80012ce:	7abb      	ldrb	r3, [r7, #10]
 80012d0:	4919      	ldr	r1, [pc, #100]	; (8001338 <performNextTransitionStep+0x2a8>)
 80012d2:	20bc      	movs	r0, #188	; 0xbc
 80012d4:	fb00 f202 	mul.w	r2, r0, r2
 80012d8:	4413      	add	r3, r2
 80012da:	33a8      	adds	r3, #168	; 0xa8
 80012dc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	827b      	strh	r3, [r7, #18]
 80012e4:	2344      	movs	r3, #68	; 0x44
 80012e6:	753b      	strb	r3, [r7, #20]
 80012e8:	2300      	movs	r3, #0
 80012ea:	757b      	strb	r3, [r7, #21]
 80012ec:	2300      	movs	r3, #0
 80012ee:	82fb      	strh	r3, [r7, #22]
			self->sendMsg(self, &newMessage);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	f107 0210 	add.w	r2, r7, #16
 80012f8:	4611      	mov	r1, r2
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	4798      	blx	r3
		}
		if(myPresets[preset].presetTransitionStatus[transition].transStep == app_dmx_preset_cfg_TRANS_STEP_DONE) myPresets[preset].presetTransitionStatus[transition].actualVal = 0;
 80012fe:	7afa      	ldrb	r2, [r7, #11]
 8001300:	7abb      	ldrb	r3, [r7, #10]
 8001302:	490d      	ldr	r1, [pc, #52]	; (8001338 <performNextTransitionStep+0x2a8>)
 8001304:	20bc      	movs	r0, #188	; 0xbc
 8001306:	fb00 f202 	mul.w	r2, r0, r2
 800130a:	4413      	add	r3, r2
 800130c:	33a8      	adds	r3, #168	; 0xa8
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	440b      	add	r3, r1
 8001312:	785b      	ldrb	r3, [r3, #1]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d10a      	bne.n	800132e <performNextTransitionStep+0x29e>
 8001318:	7afa      	ldrb	r2, [r7, #11]
 800131a:	7abb      	ldrb	r3, [r7, #10]
 800131c:	4906      	ldr	r1, [pc, #24]	; (8001338 <performNextTransitionStep+0x2a8>)
 800131e:	20bc      	movs	r0, #188	; 0xbc
 8001320:	fb00 f202 	mul.w	r2, r0, r2
 8001324:	4413      	add	r3, r2
 8001326:	33a8      	adds	r3, #168	; 0xa8
 8001328:	2200      	movs	r2, #0
 800132a:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
//	}
}
 800132e:	bf00      	nop
 8001330:	372c      	adds	r7, #44	; 0x2c
 8001332:	46bd      	mov	sp, r7
 8001334:	bd90      	pop	{r4, r7, pc}
 8001336:	bf00      	nop
 8001338:	20000000 	.word	0x20000000

0800133c <app_footcontrol_init>:
*******************************************************************************/
static void sendDmxPreset(eal_task_Task *self, app_footcontrol_PresetCfg *preset);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_footcontrol_init(eal_task_Task *self){
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	status = app_footcontrol_ACTIVE;
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <app_footcontrol_init+0x1c>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000fa4 	.word	0x20000fa4

0800135c <app_footcontrol_process>:

void app_footcontrol_process(eal_task_Task *self){
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	f083 0301 	eor.w	r3, r3, #1
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10b      	bne.n	800138a <app_footcontrol_process+0x2e>
	if(!cyclicFlag) return;
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <app_footcontrol_process+0x40>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f083 0301 	eor.w	r3, r3, #1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d105      	bne.n	800138e <app_footcontrol_process+0x32>
	//TODO: logic
	cyclicFlag = false;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <app_footcontrol_process+0x40>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	e002      	b.n	8001390 <app_footcontrol_process+0x34>
	if(!self->enable) return;
 800138a:	bf00      	nop
 800138c:	e000      	b.n	8001390 <app_footcontrol_process+0x34>
	if(!cyclicFlag) return;
 800138e:	bf00      	nop
}
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000fa5 	.word	0x20000fa5

080013a0 <app_footcontrol_receiveMsg>:
void app_footcontrol_cyclic1ms(eal_task_Task *self, bool stat){
	cyclicFlag = true;
	if(internalTimer > 0)--internalTimer;
}

void app_footcontrol_receiveMsg(eal_task_Task *self, msg_Message *message){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	if(status != app_footcontrol_ACTIVE) return;
 80013aa:	4b4c      	ldr	r3, [pc, #304]	; (80014dc <app_footcontrol_receiveMsg+0x13c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f040 808f 	bne.w	80014d2 <app_footcontrol_receiveMsg+0x132>
	/*Button message parsing*/
	if(message->type == app_cfg_BTN_MSG){
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	791b      	ldrb	r3, [r3, #4]
 80013b8:	2b42      	cmp	r3, #66	; 0x42
 80013ba:	f040 808b 	bne.w	80014d4 <app_footcontrol_receiveMsg+0x134>
		/*Action parsing*/
		if(msg_isAction(message)){
 80013be:	6838      	ldr	r0, [r7, #0]
 80013c0:	f006 fd2a 	bl	8007e18 <msg_isAction>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f040 8084 	bne.w	80014d4 <app_footcontrol_receiveMsg+0x134>
//			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
		}
		/*Event parsing*/
		else{
			uint16_t idx = message->index;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	81fb      	strh	r3, [r7, #14]
			if(myGpios[idx].mode == app_footcontrol_GPIO_INPUT){
 80013d2:	89fa      	ldrh	r2, [r7, #14]
 80013d4:	4942      	ldr	r1, [pc, #264]	; (80014e0 <app_footcontrol_receiveMsg+0x140>)
 80013d6:	4613      	mov	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4413      	add	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	440b      	add	r3, r1
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d176      	bne.n	80014d4 <app_footcontrol_receiveMsg+0x134>
				if((message->value == app_cfg_btn_STAT_RELEASED) && (myGpios[idx].release.presetNr != app_footcontrol_NO_PRESET)) sendDmxPreset(self, &myGpios[idx].release);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d117      	bne.n	8001420 <app_footcontrol_receiveMsg+0x80>
 80013f0:	89fa      	ldrh	r2, [r7, #14]
 80013f2:	493b      	ldr	r1, [pc, #236]	; (80014e0 <app_footcontrol_receiveMsg+0x140>)
 80013f4:	4613      	mov	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4413      	add	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	440b      	add	r3, r1
 80013fe:	3306      	adds	r3, #6
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2bff      	cmp	r3, #255	; 0xff
 8001404:	d00c      	beq.n	8001420 <app_footcontrol_receiveMsg+0x80>
 8001406:	89fa      	ldrh	r2, [r7, #14]
 8001408:	4613      	mov	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	4413      	add	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4a33      	ldr	r2, [pc, #204]	; (80014e0 <app_footcontrol_receiveMsg+0x140>)
 8001412:	4413      	add	r3, r2
 8001414:	3306      	adds	r3, #6
 8001416:	4619      	mov	r1, r3
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f863 	bl	80014e4 <sendDmxPreset>
 800141e:	e059      	b.n	80014d4 <app_footcontrol_receiveMsg+0x134>
				else if((message->value == app_cfg_btn_STAT_PRESSED) && (myGpios[idx].press.presetNr != app_footcontrol_NO_PRESET)) sendDmxPreset(self, &myGpios[idx].press);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d117      	bne.n	800145a <app_footcontrol_receiveMsg+0xba>
 800142a:	89fa      	ldrh	r2, [r7, #14]
 800142c:	492c      	ldr	r1, [pc, #176]	; (80014e0 <app_footcontrol_receiveMsg+0x140>)
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4413      	add	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	440b      	add	r3, r1
 8001438:	3302      	adds	r3, #2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2bff      	cmp	r3, #255	; 0xff
 800143e:	d00c      	beq.n	800145a <app_footcontrol_receiveMsg+0xba>
 8001440:	89fa      	ldrh	r2, [r7, #14]
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4413      	add	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4a25      	ldr	r2, [pc, #148]	; (80014e0 <app_footcontrol_receiveMsg+0x140>)
 800144c:	4413      	add	r3, r2
 800144e:	3302      	adds	r3, #2
 8001450:	4619      	mov	r1, r3
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f846 	bl	80014e4 <sendDmxPreset>
 8001458:	e03c      	b.n	80014d4 <app_footcontrol_receiveMsg+0x134>
				else if((message->value == app_cfg_btn_STAT_HOLD_SHORT) && (myGpios[idx].holdShort.presetNr != app_footcontrol_NO_PRESET)) sendDmxPreset(self, &myGpios[idx].holdShort);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d118      	bne.n	8001496 <app_footcontrol_receiveMsg+0xf6>
 8001464:	89fa      	ldrh	r2, [r7, #14]
 8001466:	491e      	ldr	r1, [pc, #120]	; (80014e0 <app_footcontrol_receiveMsg+0x140>)
 8001468:	4613      	mov	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4413      	add	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	440b      	add	r3, r1
 8001472:	330a      	adds	r3, #10
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2bff      	cmp	r3, #255	; 0xff
 8001478:	d00d      	beq.n	8001496 <app_footcontrol_receiveMsg+0xf6>
 800147a:	89fa      	ldrh	r2, [r7, #14]
 800147c:	4613      	mov	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4413      	add	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	3308      	adds	r3, #8
 8001486:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <app_footcontrol_receiveMsg+0x140>)
 8001488:	4413      	add	r3, r2
 800148a:	3302      	adds	r3, #2
 800148c:	4619      	mov	r1, r3
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f828 	bl	80014e4 <sendDmxPreset>
 8001494:	e01e      	b.n	80014d4 <app_footcontrol_receiveMsg+0x134>
				else if((message->value == app_cfg_btn_STAT_HOLD_LONG) && (myGpios[idx].holdLong.presetNr != app_footcontrol_NO_PRESET)) sendDmxPreset(self, &myGpios[idx].holdLong);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800149c:	2b03      	cmp	r3, #3
 800149e:	d119      	bne.n	80014d4 <app_footcontrol_receiveMsg+0x134>
 80014a0:	89fa      	ldrh	r2, [r7, #14]
 80014a2:	490f      	ldr	r1, [pc, #60]	; (80014e0 <app_footcontrol_receiveMsg+0x140>)
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4413      	add	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	440b      	add	r3, r1
 80014ae:	330e      	adds	r3, #14
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2bff      	cmp	r3, #255	; 0xff
 80014b4:	d00e      	beq.n	80014d4 <app_footcontrol_receiveMsg+0x134>
 80014b6:	89fa      	ldrh	r2, [r7, #14]
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	3308      	adds	r3, #8
 80014c2:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <app_footcontrol_receiveMsg+0x140>)
 80014c4:	4413      	add	r3, r2
 80014c6:	3306      	adds	r3, #6
 80014c8:	4619      	mov	r1, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f80a 	bl	80014e4 <sendDmxPreset>
 80014d0:	e000      	b.n	80014d4 <app_footcontrol_receiveMsg+0x134>
	if(status != app_footcontrol_ACTIVE) return;
 80014d2:	bf00      	nop
			}
		}
	}
}
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000fa4 	.word	0x20000fa4
 80014e0:	200006e4 	.word	0x200006e4

080014e4 <sendDmxPreset>:

/* Helper ----------------------------------------------------------------------*/
static void sendDmxPreset(eal_task_Task *self, app_footcontrol_PresetCfg *preset){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
	if(self->sendMsg == NULL) return;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d01a      	beq.n	800152c <sendDmxPreset+0x48>
	msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_ACTION(preset->presetNr), preset->triggerValue, 0, 0);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001504:	b29b      	uxth	r3, r3
 8001506:	813b      	strh	r3, [r7, #8]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800150e:	817b      	strh	r3, [r7, #10]
 8001510:	2350      	movs	r3, #80	; 0x50
 8001512:	733b      	strb	r3, [r7, #12]
 8001514:	2300      	movs	r3, #0
 8001516:	737b      	strb	r3, [r7, #13]
 8001518:	2300      	movs	r3, #0
 800151a:	81fb      	strh	r3, [r7, #14]
	self->sendMsg(self, &newMessage);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	f107 0208 	add.w	r2, r7, #8
 8001524:	4611      	mov	r1, r2
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	4798      	blx	r3
 800152a:	e000      	b.n	800152e <sendDmxPreset+0x4a>
	if(self->sendMsg == NULL) return;
 800152c:	bf00      	nop
}
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <app_uart_irqHandler>:
	}
	return bufferState;
}


void app_uart_irqHandler(USART_TypeDef *uartHandler, stRingBuf *rxBuf, stRingBuf *txBuf){
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
		volatile uint16_t ISR;
		char bufferState;

		ISR = uartHandler->ISR;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	b29b      	uxth	r3, r3
 8001546:	82bb      	strh	r3, [r7, #20]
		if(ISR & USART_ISR_RXNE){ //Bit 5 = Read Data Register Not Empty in SR
 8001548:	8abb      	ldrh	r3, [r7, #20]
 800154a:	b29b      	uxth	r3, r3
 800154c:	f003 0320 	and.w	r3, r3, #32
 8001550:	2b00      	cmp	r3, #0
 8001552:	d009      	beq.n	8001568 <app_uart_irqHandler+0x34>
			bufferState = RINGBUFFER_cIn(uartHandler->RDR, rxBuf);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001558:	b29b      	uxth	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	4618      	mov	r0, r3
 8001560:	f006 fc6c 	bl	8007e3c <RINGBUFFER_cIn>
 8001564:	4603      	mov	r3, r0
 8001566:	75fb      	strb	r3, [r7, #23]
			if(bufferState != ringbuffer_OK){
				//TODO Error handling
			}
		}
		if(ISR & USART_ISR_TXE){
 8001568:	8abb      	ldrh	r3, [r7, #20]
 800156a:	b29b      	uxth	r3, r3
 800156c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001570:	2b00      	cmp	r3, #0
 8001572:	d01e      	beq.n	80015b2 <app_uart_irqHandler+0x7e>
			uartHandler->ISR &= ~USART_ISR_TXE;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	61da      	str	r2, [r3, #28]
			char data;
			bufferState = RINGBUFFER_cOut(&data, txBuf);
 8001580:	f107 0313 	add.w	r3, r7, #19
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4618      	mov	r0, r3
 8001588:	f006 fc95 	bl	8007eb6 <RINGBUFFER_cOut>
 800158c:	4603      	mov	r3, r0
 800158e:	75fb      	strb	r3, [r7, #23]
			if(bufferState == ringbuffer_EMPTY){
 8001590:	7dfb      	ldrb	r3, [r7, #23]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d106      	bne.n	80015a4 <app_uart_irqHandler+0x70>
				uartHandler->CR1 &= ~USART_CR1_TXEIE;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e006      	b.n	80015b2 <app_uart_irqHandler+0x7e>
			}else if (bufferState == ringbuffer_NO_BUF){
 80015a4:	7dfb      	ldrb	r3, [r7, #23]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <app_uart_irqHandler+0x7e>

			}else{
				uartHandler->TDR = data;
 80015aa:	7cfb      	ldrb	r3, [r7, #19]
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	851a      	strh	r2, [r3, #40]	; 0x28
			}
		}
		if(ISR & USART_ISR_ORE){
 80015b2:	8abb      	ldrh	r3, [r7, #20]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <app_uart_irqHandler+0x96>
			uartHandler->ICR |= USART_ICR_ORECF;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	f043 0208 	orr.w	r2, r3, #8
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	621a      	str	r2, [r3, #32]
		}
	}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <app_main>:
};
/******************************************************************************
* Function Definitions
*******************************************************************************/
#define SOFT_I2C	1
void app_main(){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	msgTask.enable = true;
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <app_main+0x3c>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
	msgTask.init(&msgTask);
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <app_main+0x3c>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	480b      	ldr	r0, [pc, #44]	; (8001610 <app_main+0x3c>)
 80015e4:	4798      	blx	r3
	while (1){
		msgTask.mainLoop(&msgTask);
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <app_main+0x3c>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	4809      	ldr	r0, [pc, #36]	; (8001610 <app_main+0x3c>)
 80015ec:	4798      	blx	r3
		btnTask.mainLoop(&btnTask);
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <app_main+0x40>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	4808      	ldr	r0, [pc, #32]	; (8001614 <app_main+0x40>)
 80015f4:	4798      	blx	r3
		footcontrolTask.mainLoop(&footcontrolTask);
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <app_main+0x44>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	4807      	ldr	r0, [pc, #28]	; (8001618 <app_main+0x44>)
 80015fc:	4798      	blx	r3
		dmxTask.mainLoop(&dmxTask);
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <app_main+0x48>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	4806      	ldr	r0, [pc, #24]	; (800161c <app_main+0x48>)
 8001604:	4798      	blx	r3
		dmxPresetTask.mainLoop(&dmxPresetTask);
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <app_main+0x4c>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <app_main+0x4c>)
 800160c:	4798      	blx	r3
		msgTask.mainLoop(&msgTask);
 800160e:	e7ea      	b.n	80015e6 <app_main+0x12>
 8001610:	20000768 	.word	0x20000768
 8001614:	200007b0 	.word	0x200007b0
 8001618:	200007c8 	.word	0x200007c8
 800161c:	20000798 	.word	0x20000798
 8001620:	20000780 	.word	0x20000780

08001624 <app_1ms>:
	 }
}

void app_1ms(){
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	static uint16_t timer100ms = 0;
	static uint16_t timer500ms = 0;
	dmx_1ms(&dmx1Out);
 8001628:	481d      	ldr	r0, [pc, #116]	; (80016a0 <app_1ms+0x7c>)
 800162a:	f006 f865 	bl	80076f8 <dmx_1ms>
	if(dmxTask.timer) dmxTask.timer(&dmxTask, true);
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <app_1ms+0x80>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d004      	beq.n	8001640 <app_1ms+0x1c>
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <app_1ms+0x80>)
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2101      	movs	r1, #1
 800163c:	4819      	ldr	r0, [pc, #100]	; (80016a4 <app_1ms+0x80>)
 800163e:	4798      	blx	r3
	if(dmxPresetTask.timer) dmxPresetTask.timer(&dmxPresetTask, true);
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <app_1ms+0x84>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d004      	beq.n	8001652 <app_1ms+0x2e>
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <app_1ms+0x84>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2101      	movs	r1, #1
 800164e:	4816      	ldr	r0, [pc, #88]	; (80016a8 <app_1ms+0x84>)
 8001650:	4798      	blx	r3
	if(btnTask.timer) btnTask.timer(&btnTask, true);
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <app_1ms+0x88>)
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d004      	beq.n	8001664 <app_1ms+0x40>
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <app_1ms+0x88>)
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2101      	movs	r1, #1
 8001660:	4812      	ldr	r0, [pc, #72]	; (80016ac <app_1ms+0x88>)
 8001662:	4798      	blx	r3
	if(++timer100ms >= 100){
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <app_1ms+0x8c>)
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	3301      	adds	r3, #1
 800166a:	b29a      	uxth	r2, r3
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <app_1ms+0x8c>)
 800166e:	801a      	strh	r2, [r3, #0]
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <app_1ms+0x8c>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	2b63      	cmp	r3, #99	; 0x63
 8001676:	d902      	bls.n	800167e <app_1ms+0x5a>
		timer100ms = 0;
 8001678:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <app_1ms+0x8c>)
 800167a:	2200      	movs	r2, #0
 800167c:	801a      	strh	r2, [r3, #0]
//		uart_writeStringToBuffer("AT+NAMEERIC12  ", &uart4TxBuf, huart4.Instance);
//		uart_writeStringToBuffer("AT+NAMEERIC12  ", &uart2TxBuf, huart2.Instance);
	}
	if(++timer500ms >= 500){
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <app_1ms+0x90>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	b29a      	uxth	r2, r3
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <app_1ms+0x90>)
 8001688:	801a      	strh	r2, [r3, #0]
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <app_1ms+0x90>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001692:	d302      	bcc.n	800169a <app_1ms+0x76>
		timer500ms = 0;
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <app_1ms+0x90>)
 8001696:	2200      	movs	r2, #0
 8001698:	801a      	strh	r2, [r3, #0]
	}

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200005e0 	.word	0x200005e0
 80016a4:	20000798 	.word	0x20000798
 80016a8:	20000780 	.word	0x20000780
 80016ac:	200007b0 	.word	0x200007b0
 80016b0:	200019a8 	.word	0x200019a8
 80016b4:	200019aa 	.word	0x200019aa

080016b8 <app_process>:
/* Application Task ------------------------------------------------------------*/
static void app_process(eal_task_Task *self){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	msg_Message buffer = {0};
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
	msg_Message *newMessage = msg_getNext(&buffer, &msgBuf);
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <app_process+0x38>)
 80016d0:	4618      	mov	r0, r3
 80016d2:	f006 fb04 	bl	8007cde <msg_getNext>
 80016d6:	6178      	str	r0, [r7, #20]
	if(newMessage != NULL){
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d004      	beq.n	80016e8 <app_process+0x30>
		self->receiveMsg(self, newMessage);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	6979      	ldr	r1, [r7, #20]
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	4798      	blx	r3
	}
}
 80016e8:	bf00      	nop
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000740 	.word	0x20000740

080016f4 <app_receiveMsg>:
static void app_receiveMsg(eal_task_Task *self, msg_Message *message){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
	dmxTask.receiveMsg(&dmxTask, message);
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <app_receiveMsg+0x3c>)
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	6839      	ldr	r1, [r7, #0]
 8001704:	480a      	ldr	r0, [pc, #40]	; (8001730 <app_receiveMsg+0x3c>)
 8001706:	4798      	blx	r3
	dmxPresetTask.receiveMsg(&dmxPresetTask, message);
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <app_receiveMsg+0x40>)
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	6839      	ldr	r1, [r7, #0]
 800170e:	4809      	ldr	r0, [pc, #36]	; (8001734 <app_receiveMsg+0x40>)
 8001710:	4798      	blx	r3
	btnTask.receiveMsg(&btnTask, message);
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <app_receiveMsg+0x44>)
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	6839      	ldr	r1, [r7, #0]
 8001718:	4807      	ldr	r0, [pc, #28]	; (8001738 <app_receiveMsg+0x44>)
 800171a:	4798      	blx	r3
	footcontrolTask.receiveMsg(&footcontrolTask, message);
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <app_receiveMsg+0x48>)
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	6839      	ldr	r1, [r7, #0]
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <app_receiveMsg+0x48>)
 8001724:	4798      	blx	r3
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000798 	.word	0x20000798
 8001734:	20000780 	.word	0x20000780
 8001738:	200007b0 	.word	0x200007b0
 800173c:	200007c8 	.word	0x200007c8

08001740 <app_init>:

static void app_init(eal_task_Task *self){
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	i2c_soft_init(&softI2C2);
 8001748:	481c      	ldr	r0, [pc, #112]	; (80017bc <app_init+0x7c>)
 800174a:	f006 fd0b 	bl	8008164 <i2c_soft_init>
	eeprom_registerCallback(&eepromDev1, eepromCallback);
 800174e:	491c      	ldr	r1, [pc, #112]	; (80017c0 <app_init+0x80>)
 8001750:	481c      	ldr	r0, [pc, #112]	; (80017c4 <app_init+0x84>)
 8001752:	f006 f9a1 	bl	8007a98 <eeprom_registerCallback>
	eeprom_init(&eepromDev1);
 8001756:	481b      	ldr	r0, [pc, #108]	; (80017c4 <app_init+0x84>)
 8001758:	f006 f9ac 	bl	8007ab4 <eeprom_init>
	dmxTask.enable = true;
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <app_init+0x88>)
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
	if(dmxTask.init) dmxTask.init(&dmxTask);
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <app_init+0x88>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <app_init+0x32>
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <app_init+0x88>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4816      	ldr	r0, [pc, #88]	; (80017c8 <app_init+0x88>)
 8001770:	4798      	blx	r3
	dmxPresetTask.enable = true;
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <app_init+0x8c>)
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
	if(dmxPresetTask.init) dmxPresetTask.init(&dmxPresetTask);
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <app_init+0x8c>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <app_init+0x48>
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <app_init+0x8c>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	4811      	ldr	r0, [pc, #68]	; (80017cc <app_init+0x8c>)
 8001786:	4798      	blx	r3
	btnTask.enable = true;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <app_init+0x90>)
 800178a:	2201      	movs	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]
	if(btnTask.init) btnTask.init(&btnTask);
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <app_init+0x90>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <app_init+0x5e>
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <app_init+0x90>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	480d      	ldr	r0, [pc, #52]	; (80017d0 <app_init+0x90>)
 800179c:	4798      	blx	r3
	footcontrolTask.enable = true;
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <app_init+0x94>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
	if(footcontrolTask.init) footcontrolTask.init(&footcontrolTask);
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <app_init+0x94>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <app_init+0x74>
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <app_init+0x94>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4808      	ldr	r0, [pc, #32]	; (80017d4 <app_init+0x94>)
 80017b2:	4798      	blx	r3

}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200006bc 	.word	0x200006bc
 80017c0:	08001841 	.word	0x08001841
 80017c4:	20000698 	.word	0x20000698
 80017c8:	20000798 	.word	0x20000798
 80017cc:	20000780 	.word	0x20000780
 80017d0:	200007b0 	.word	0x200007b0
 80017d4:	200007c8 	.word	0x200007c8

080017d8 <sendMessage>:

/* Messages --------------------------------------------------------------------*/
static void sendMessage(eal_task_Task *self, msg_Message *message){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
	uint8_t msgBufState = 1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	73fb      	strb	r3, [r7, #15]
	if(msg_isAction(message))msgBufState = msg_writeAction(message, &msgBuf);
 80017e6:	6838      	ldr	r0, [r7, #0]
 80017e8:	f006 fb16 	bl	8007e18 <msg_isAction>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <sendMessage+0x28>
 80017f2:	490c      	ldr	r1, [pc, #48]	; (8001824 <sendMessage+0x4c>)
 80017f4:	6838      	ldr	r0, [r7, #0]
 80017f6:	f006 fa59 	bl	8007cac <msg_writeAction>
 80017fa:	4603      	mov	r3, r0
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	e005      	b.n	800180c <sendMessage+0x34>
	else msgBufState = msg_writeEvent(message, &msgBuf);
 8001800:	4908      	ldr	r1, [pc, #32]	; (8001824 <sendMessage+0x4c>)
 8001802:	6838      	ldr	r0, [r7, #0]
 8001804:	f006 fa3b 	bl	8007c7e <msg_writeEvent>
 8001808:	4603      	mov	r3, r0
 800180a:	73fb      	strb	r3, [r7, #15]
	if(msgBufState != 1) messageBufferError(msgBufState);
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d003      	beq.n	800181a <sendMessage+0x42>
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	4618      	mov	r0, r3
 8001816:	f000 f807 	bl	8001828 <messageBufferError>
}
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000740 	.word	0x20000740

08001828 <messageBufferError>:
static void messageBufferError(uint8_t state){
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
//	if(state == NO_BUF) USART3_WriteStringToBuffer("ERROR: MSG NO BUF\r\n", 18);
//	else if(state == FULL) USART3_WriteStringToBuffer("ERROR: MSG BUF OVR\r\n", 19);
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <eepromCallback>:

/* Callback's ---------------------------------------------------------------------*/
uint8_t eepromCallback(eeprom_cfg_Config *config){
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af02      	add	r7, sp, #8
 8001846:	6078      	str	r0, [r7, #4]
	uint8_t state = 1;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
	if(config->callbackType == EEPROM_CFG_CALL_TX_START){
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7a9b      	ldrb	r3, [r3, #10]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d115      	bne.n	8001880 <eepromCallback+0x40>
		if(i2c_soft_mem_write(&softI2C2, config->devAddr, config->memAddr, I2C_MEMADD_SIZE_16BIT, config->txBuffer, config->dataSize) != soft_i2c_RETURN_OK) state = 0;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	4618      	mov	r0, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6952      	ldr	r2, [r2, #20]
 8001868:	9201      	str	r2, [sp, #4]
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2302      	movs	r3, #2
 800186e:	4602      	mov	r2, r0
 8001870:	481c      	ldr	r0, [pc, #112]	; (80018e4 <eepromCallback+0xa4>)
 8001872:	f006 fd77 	bl	8008364 <i2c_soft_mem_write>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <eepromCallback+0x40>
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]
	}
	if(config->callbackType == EEPROM_CFG_CALL_RX_START){
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7a9b      	ldrb	r3, [r3, #10]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d115      	bne.n	80018b4 <eepromCallback+0x74>
		if(i2c_soft_mem_read(&softI2C2, config->devAddr, config->memAddr, I2C_MEMADD_SIZE_16BIT, config->rxBuffer, config->dataSize) != soft_i2c_RETURN_OK) state = 0;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	4618      	mov	r0, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6952      	ldr	r2, [r2, #20]
 800189c:	9201      	str	r2, [sp, #4]
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	2302      	movs	r3, #2
 80018a2:	4602      	mov	r2, r0
 80018a4:	480f      	ldr	r0, [pc, #60]	; (80018e4 <eepromCallback+0xa4>)
 80018a6:	f006 fc90 	bl	80081ca <i2c_soft_mem_read>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <eepromCallback+0x74>
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]
	}
	if(config->callbackType == EEPROM_CFG_CALL_CHECK_TX_STATE){
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	7a9b      	ldrb	r3, [r3, #10]
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d10e      	bne.n	80018da <eepromCallback+0x9a>
		if(i2c_soft_write(&softI2C2, config->devAddr, config->rxBuffer, config->dataSize) != soft_i2c_RETURN_OK) state = 0;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1a      	ldr	r2, [r3, #32]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	4806      	ldr	r0, [pc, #24]	; (80018e4 <eepromCallback+0xa4>)
 80018cc:	f006 fd05 	bl	80082da <i2c_soft_write>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <eepromCallback+0x9a>
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]
	}
	return state;
 80018da:	7bfb      	ldrb	r3, [r7, #15]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200006bc 	.word	0x200006bc

080018e8 <UART4_IRQHandler>:

/* IRQs ---------------------------------------------------------------------*/
void UART4_IRQHandler(void){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	app_uart_irqHandler(huart4.Instance, &uart4RxBuf, &uart4TxBuf);
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <UART4_IRQHandler+0x18>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <UART4_IRQHandler+0x1c>)
 80018f2:	4905      	ldr	r1, [pc, #20]	; (8001908 <UART4_IRQHandler+0x20>)
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fe1d 	bl	8001534 <app_uart_irqHandler>
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20001e88 	.word	0x20001e88
 8001904:	20000750 	.word	0x20000750
 8001908:	2000075c 	.word	0x2000075c

0800190c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	if(htim->Instance == dmx1Out.txTimer) dmx_irqTxTimerHandler(&dmx1Out);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d102      	bne.n	8001926 <HAL_TIM_PeriodElapsedCallback+0x1a>
 8001920:	4803      	ldr	r0, [pc, #12]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001922:	f005 ff63 	bl	80077ec <dmx_irqTxTimerHandler>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200005e0 	.word	0x200005e0

08001934 <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void){
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  if (__HAL_TIM_GET_FLAG(&htim16, TIM_FLAG_UPDATE) != RESET){
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <TIM1_UP_TIM16_IRQHandler+0x28>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b01      	cmp	r3, #1
 8001944:	d107      	bne.n	8001956 <TIM1_UP_TIM16_IRQHandler+0x22>
	  __HAL_TIM_CLEAR_IT(&htim16, TIM_IT_UPDATE);
 8001946:	4b05      	ldr	r3, [pc, #20]	; (800195c <TIM1_UP_TIM16_IRQHandler+0x28>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f06f 0201 	mvn.w	r2, #1
 800194e:	611a      	str	r2, [r3, #16]
	  i2c_soft_timer_us(&softI2C2);
 8001950:	4803      	ldr	r0, [pc, #12]	; (8001960 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8001952:	f006 fc27 	bl	80081a4 <i2c_soft_timer_us>
  }
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20001dd0 	.word	0x20001dd0
 8001960:	200006bc 	.word	0x200006bc

08001964 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196e:	2003      	movs	r0, #3
 8001970:	f000 f918 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001974:	2000      	movs	r0, #0
 8001976:	f000 f80d 	bl	8001994 <HAL_InitTick>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	71fb      	strb	r3, [r7, #7]
 8001984:	e001      	b.n	800198a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001986:	f008 fc9d 	bl	800a2c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800198a:	79fb      	ldrb	r3, [r7, #7]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <HAL_InitTick+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0c      	ldr	r2, [pc, #48]	; (80019d8 <HAL_InitTick+0x44>)
 80019a6:	fba2 2303 	umull	r2, r3, r2, r3
 80019aa:	099b      	lsrs	r3, r3, #6
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f92e 	bl	8001c0e <HAL_SYSTICK_Config>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <HAL_InitTick+0x2a>
  {
    status = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	e005      	b.n	80019ca <HAL_InitTick+0x36>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	f04f 30ff 	mov.w	r0, #4294967295
 80019c6:	f000 f8f8 	bl	8001bba <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	200008f0 	.word	0x200008f0
 80019d8:	10624dd3 	.word	0x10624dd3

080019dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  uwTick++;
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <HAL_IncTick+0x18>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	4a03      	ldr	r2, [pc, #12]	; (80019f4 <HAL_IncTick+0x18>)
 80019e8:	6013      	str	r3, [r2, #0]
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	20001bd0 	.word	0x20001bd0

080019f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return uwTick;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_GetTick+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20001bd0 	.word	0x20001bd0

08001a10 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <NVIC_SetPriorityGrouping+0x44>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a42:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <NVIC_SetPriorityGrouping+0x44>)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	60d3      	str	r3, [r2, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <NVIC_GetPriorityGrouping+0x18>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	f003 0307 	and.w	r3, r3, #7
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a7e:	4909      	ldr	r1, [pc, #36]	; (8001aa4 <NVIC_EnableIRQ+0x30>)
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	095b      	lsrs	r3, r3, #5
 8001a86:	79fa      	ldrb	r2, [r7, #7]
 8001a88:	f002 021f 	and.w	r2, r2, #31
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000e100 	.word	0xe000e100

08001aa8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	da0b      	bge.n	8001ad4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	490d      	ldr	r1, [pc, #52]	; (8001af4 <NVIC_SetPriority+0x4c>)
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	3b04      	subs	r3, #4
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	0112      	lsls	r2, r2, #4
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	440b      	add	r3, r1
 8001ad0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad2:	e009      	b.n	8001ae8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	4908      	ldr	r1, [pc, #32]	; (8001af8 <NVIC_SetPriority+0x50>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00
 8001af8:	e000e100 	.word	0xe000e100

08001afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f1c3 0307 	rsb	r3, r3, #7
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	bf28      	it	cs
 8001b1a:	2304      	movcs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3304      	adds	r3, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d902      	bls.n	8001b2c <NVIC_EncodePriority+0x30>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	e000      	b.n	8001b2e <NVIC_EncodePriority+0x32>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	2201      	movs	r2, #1
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	1e5a      	subs	r2, r3, #1
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	401a      	ands	r2, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b42:	2101      	movs	r1, #1
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	1e59      	subs	r1, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f7ff ff90 	bl	8001aa8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff2f 	bl	8001a10 <NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff44 	bl	8001a58 <NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff90 	bl	8001afc <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5f 	bl	8001aa8 <NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff37 	bl	8001a74 <NVIC_EnableIRQ>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffa2 	bl	8001b60 <SysTick_Config>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c36:	e154      	b.n	8001ee2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	4013      	ands	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 8146 	beq.w	8001edc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x38>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b12      	cmp	r3, #18
 8001c5e:	d123      	bne.n	8001ca8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	220f      	movs	r2, #15
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	08da      	lsrs	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3208      	adds	r2, #8
 8001ca2:	6939      	ldr	r1, [r7, #16]
 8001ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d00b      	beq.n	8001cfc <HAL_GPIO_Init+0xd4>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d007      	beq.n	8001cfc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cf0:	2b11      	cmp	r3, #17
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b12      	cmp	r3, #18
 8001cfa:	d130      	bne.n	8001d5e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2203      	movs	r2, #3
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d32:	2201      	movs	r2, #1
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	f003 0201 	and.w	r2, r3, #1
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2203      	movs	r2, #3
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 80a0 	beq.w	8001edc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9c:	4a58      	ldr	r2, [pc, #352]	; (8001f00 <HAL_GPIO_Init+0x2d8>)
 8001d9e:	4b58      	ldr	r3, [pc, #352]	; (8001f00 <HAL_GPIO_Init+0x2d8>)
 8001da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6613      	str	r3, [r2, #96]	; 0x60
 8001da8:	4b55      	ldr	r3, [pc, #340]	; (8001f00 <HAL_GPIO_Init+0x2d8>)
 8001daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001db4:	4a53      	ldr	r2, [pc, #332]	; (8001f04 <HAL_GPIO_Init+0x2dc>)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	3302      	adds	r3, #2
 8001dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	220f      	movs	r2, #15
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dde:	d019      	beq.n	8001e14 <HAL_GPIO_Init+0x1ec>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a49      	ldr	r2, [pc, #292]	; (8001f08 <HAL_GPIO_Init+0x2e0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d013      	beq.n	8001e10 <HAL_GPIO_Init+0x1e8>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a48      	ldr	r2, [pc, #288]	; (8001f0c <HAL_GPIO_Init+0x2e4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d00d      	beq.n	8001e0c <HAL_GPIO_Init+0x1e4>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a47      	ldr	r2, [pc, #284]	; (8001f10 <HAL_GPIO_Init+0x2e8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d007      	beq.n	8001e08 <HAL_GPIO_Init+0x1e0>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a46      	ldr	r2, [pc, #280]	; (8001f14 <HAL_GPIO_Init+0x2ec>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d101      	bne.n	8001e04 <HAL_GPIO_Init+0x1dc>
 8001e00:	2304      	movs	r3, #4
 8001e02:	e008      	b.n	8001e16 <HAL_GPIO_Init+0x1ee>
 8001e04:	2307      	movs	r3, #7
 8001e06:	e006      	b.n	8001e16 <HAL_GPIO_Init+0x1ee>
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e004      	b.n	8001e16 <HAL_GPIO_Init+0x1ee>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e002      	b.n	8001e16 <HAL_GPIO_Init+0x1ee>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_GPIO_Init+0x1ee>
 8001e14:	2300      	movs	r3, #0
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	f002 0203 	and.w	r2, r2, #3
 8001e1c:	0092      	lsls	r2, r2, #2
 8001e1e:	4093      	lsls	r3, r2
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e26:	4937      	ldr	r1, [pc, #220]	; (8001f04 <HAL_GPIO_Init+0x2dc>)
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	089b      	lsrs	r3, r3, #2
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e34:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e58:	4a2f      	ldr	r2, [pc, #188]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e5e:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e82:	4a25      	ldr	r2, [pc, #148]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e88:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eac:	4a1a      	ldr	r2, [pc, #104]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eb2:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ed6:	4a10      	ldr	r2, [pc, #64]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f47f aea3 	bne.w	8001c38 <HAL_GPIO_Init+0x10>
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	371c      	adds	r7, #28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010000 	.word	0x40010000
 8001f08:	48000400 	.word	0x48000400
 8001f0c:	48000800 	.word	0x48000800
 8001f10:	48000c00 	.word	0x48000c00
 8001f14:	48001000 	.word	0x48001000
 8001f18:	40010400 	.word	0x40010400

08001f1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f34:	2301      	movs	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
 8001f38:	e001      	b.n	8001f3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f5c:	787b      	ldrb	r3, [r7, #1]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f68:	e002      	b.n	8001f70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e080      	b.n	8002090 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d106      	bne.n	8001fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f007 fffa 	bl	8009f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2224      	movs	r2, #36	; 0x24
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	f022 0201 	bic.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6852      	ldr	r2, [r2, #4]
 8001fc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	6892      	ldr	r2, [r2, #8]
 8001fd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d107      	bne.n	8001ff6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6892      	ldr	r2, [r2, #8]
 8001fee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	e006      	b.n	8002004 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6892      	ldr	r2, [r2, #8]
 8001ffe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002002:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d104      	bne.n	8002016 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002014:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002028:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6812      	ldr	r2, [r2, #0]
 8002032:	68d2      	ldr	r2, [r2, #12]
 8002034:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002038:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6911      	ldr	r1, [r2, #16]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6952      	ldr	r2, [r2, #20]
 8002046:	4311      	orrs	r1, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6992      	ldr	r2, [r2, #24]
 800204c:	0212      	lsls	r2, r2, #8
 800204e:	430a      	orrs	r2, r1
 8002050:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	69d1      	ldr	r1, [r2, #28]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6a12      	ldr	r2, [r2, #32]
 800205e:	430a      	orrs	r2, r1
 8002060:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	d138      	bne.n	8002120 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e032      	b.n	8002122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2224      	movs	r2, #36	; 0x24
 80020c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	6811      	ldr	r1, [r2, #0]
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2220      	movs	r2, #32
 8002110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	e000      	b.n	8002122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002120:	2302      	movs	r3, #2
  }
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800212e:	b480      	push	{r7}
 8002130:	b085      	sub	sp, #20
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b20      	cmp	r3, #32
 8002142:	d139      	bne.n	80021b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800214e:	2302      	movs	r3, #2
 8002150:	e033      	b.n	80021ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2224      	movs	r2, #36	; 0x24
 800215e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	f022 0201 	bic.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002180:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4313      	orrs	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	e000      	b.n	80021ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021b8:	2302      	movs	r3, #2
  }
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim: LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_LPTIM_Init+0x16>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e076      	b.n	80022cc <HAL_LPTIM_Init+0x104>

#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_LPTIM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f007 ff6e 	bl	800a0d4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d103      	bne.n	8002218 <HAL_LPTIM_Init+0x50>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f023 031e 	bic.w	r3, r3, #30
 8002216:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002220:	4293      	cmp	r3, r2
 8002222:	d005      	beq.n	8002230 <HAL_LPTIM_Init+0x68>
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800222a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800222e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <HAL_LPTIM_Init+0x10c>)
 8002234:	4013      	ands	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002240:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8002246:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800224c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8002252:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d107      	bne.n	8002272 <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 800226a:	4313      	orrs	r3, r2
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800227a:	4293      	cmp	r3, r2
 800227c:	d00a      	beq.n	8002294 <HAL_LPTIM_Init+0xcc>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002286:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800228c:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4313      	orrs	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0d      	ldr	r2, [pc, #52]	; (80022d8 <HAL_LPTIM_Init+0x110>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d108      	bne.n	80022b8 <HAL_LPTIM_Init+0xf0>
    /* Check LPTIM1 Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));

    /* Configure LPTIM1 Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022b2:	430a      	orrs	r2, r1
 80022b4:	621a      	str	r2, [r3, #32]
 80022b6:	e004      	b.n	80022c2 <HAL_LPTIM_Init+0xfa>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022c0:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	ff19f1fe 	.word	0xff19f1fe
 80022d8:	40007c00 	.word	0x40007c00

080022dc <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim: LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d10d      	bne.n	800230e <HAL_LPTIM_IRQHandler+0x32>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d106      	bne.n	800230e <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2201      	movs	r2, #1
 8002306:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f882 	bl	8002412 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b02      	cmp	r3, #2
 800231a:	d10d      	bne.n	8002338 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b02      	cmp	r3, #2
 8002328:	d106      	bne.n	8002338 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2202      	movs	r2, #2
 8002330:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f877 	bl	8002426 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b04      	cmp	r3, #4
 8002344:	d10d      	bne.n	8002362 <HAL_LPTIM_IRQHandler+0x86>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b04      	cmp	r3, #4
 8002352:	d106      	bne.n	8002362 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2204      	movs	r2, #4
 800235a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f86c 	bl	800243a <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b08      	cmp	r3, #8
 800236e:	d10d      	bne.n	800238c <HAL_LPTIM_IRQHandler+0xb0>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b08      	cmp	r3, #8
 800237c:	d106      	bne.n	800238c <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2208      	movs	r2, #8
 8002384:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f861 	bl	800244e <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	2b10      	cmp	r3, #16
 8002398:	d10d      	bne.n	80023b6 <HAL_LPTIM_IRQHandler+0xda>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b10      	cmp	r3, #16
 80023a6:	d106      	bne.n	80023b6 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2210      	movs	r2, #16
 80023ae:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f856 	bl	8002462 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d10d      	bne.n	80023e0 <HAL_LPTIM_IRQHandler+0x104>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0320 	and.w	r3, r3, #32
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d106      	bne.n	80023e0 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2220      	movs	r2, #32
 80023d8:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f84b 	bl	8002476 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ea:	2b40      	cmp	r3, #64	; 0x40
 80023ec:	d10d      	bne.n	800240a <HAL_LPTIM_IRQHandler+0x12e>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f8:	2b40      	cmp	r3, #64	; 0x40
 80023fa:	d106      	bne.n	800240a <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2240      	movs	r2, #64	; 0x40
 8002402:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f840 	bl	800248a <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */      
    }
  }
#endif
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800249e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a0:	b08b      	sub	sp, #44	; 0x2c
 80024a2:	af06      	add	r7, sp, #24
 80024a4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0cb      	b.n	8002648 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d106      	bne.n	80024ca <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f008 fdff 	bl	800b0c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2203      	movs	r2, #3
 80024ce:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 ff44 	bl	8006364 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	603b      	str	r3, [r7, #0]
 80024e2:	687e      	ldr	r6, [r7, #4]
 80024e4:	466d      	mov	r5, sp
 80024e6:	f106 0410 	add.w	r4, r6, #16
 80024ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ee:	6823      	ldr	r3, [r4, #0]
 80024f0:	602b      	str	r3, [r5, #0]
 80024f2:	1d33      	adds	r3, r6, #4
 80024f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024f6:	6838      	ldr	r0, [r7, #0]
 80024f8:	f003 ff0b 	bl	8006312 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2100      	movs	r1, #0
 8002502:	4618      	mov	r0, r3
 8002504:	f003 ff4b 	bl	800639e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	e035      	b.n	800257a <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	015b      	lsls	r3, r3, #5
 8002514:	4413      	add	r3, r2
 8002516:	3329      	adds	r3, #41	; 0x29
 8002518:	2201      	movs	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	015b      	lsls	r3, r3, #5
 8002522:	4413      	add	r3, r2
 8002524:	3328      	adds	r3, #40	; 0x28
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	b291      	uxth	r1, r2
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	015b      	lsls	r3, r3, #5
 8002534:	4413      	add	r3, r2
 8002536:	3336      	adds	r3, #54	; 0x36
 8002538:	460a      	mov	r2, r1
 800253a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	015b      	lsls	r3, r3, #5
 8002542:	4413      	add	r3, r2
 8002544:	332b      	adds	r3, #43	; 0x2b
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	015b      	lsls	r3, r3, #5
 8002550:	4413      	add	r3, r2
 8002552:	3338      	adds	r3, #56	; 0x38
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	015b      	lsls	r3, r3, #5
 800255e:	4413      	add	r3, r2
 8002560:	333c      	adds	r3, #60	; 0x3c
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	3302      	adds	r3, #2
 800256c:	015b      	lsls	r3, r3, #5
 800256e:	4413      	add	r3, r2
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < 15U; i++)
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	3301      	adds	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	2b0e      	cmp	r3, #14
 800257e:	d9c6      	bls.n	800250e <HAL_PCD_Init+0x70>
  }

  for (i = 0U; i < 15U; i++)
 8002580:	2300      	movs	r3, #0
 8002582:	73fb      	strb	r3, [r7, #15]
 8002584:	e031      	b.n	80025ea <HAL_PCD_Init+0x14c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	015b      	lsls	r3, r3, #5
 800258c:	4413      	add	r3, r2
 800258e:	f203 2329 	addw	r3, r3, #553	; 0x229
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	015b      	lsls	r3, r3, #5
 800259c:	4413      	add	r3, r2
 800259e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	015b      	lsls	r3, r3, #5
 80025ac:	4413      	add	r3, r2
 80025ae:	f203 232b 	addw	r3, r3, #555	; 0x22b
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	015b      	lsls	r3, r3, #5
 80025bc:	4413      	add	r3, r2
 80025be:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	015b      	lsls	r3, r3, #5
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	3312      	adds	r3, #18
 80025dc:	015b      	lsls	r3, r3, #5
 80025de:	4413      	add	r3, r2
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < 15U; i++)
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	3301      	adds	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b0e      	cmp	r3, #14
 80025ee:	d9ca      	bls.n	8002586 <HAL_PCD_Init+0xe8>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	603b      	str	r3, [r7, #0]
 80025f6:	687e      	ldr	r6, [r7, #4]
 80025f8:	466d      	mov	r5, sp
 80025fa:	f106 0410 	add.w	r4, r6, #16
 80025fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	602b      	str	r3, [r5, #0]
 8002606:	1d33      	adds	r3, r6, #4
 8002608:	cb0e      	ldmia	r3, {r1, r2, r3}
 800260a:	6838      	ldr	r0, [r7, #0]
 800260c:	f003 fed4 	bl	80063b8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d102      	bne.n	800262e <HAL_PCD_Init+0x190>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 fe5e 	bl	80032ea <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d102      	bne.n	800263c <HAL_PCD_Init+0x19e>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fe31 	bl	800329e <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f004 ff04 	bl	800744e <USB_DevDisconnect>

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002650 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_PCD_Start+0x16>
 8002662:	2302      	movs	r3, #2
 8002664:	e012      	b.n	800268c <HAL_PCD_Start+0x3c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_DevConnect(hpcd->Instance);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f004 fed4 	bl	8007420 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f003 fe59 	bl	8006334 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f004 fee9 	bl	8007478 <USB_ReadInterrupts>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b0:	d102      	bne.n	80026b8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fb40 	bl	8002d38 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f004 fedb 	bl	8007478 <USB_ReadInterrupts>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026cc:	d112      	bne.n	80026f4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80026da:	b292      	uxth	r2, r2
 80026dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e0:	b292      	uxth	r2, r2
 80026e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f008 fd75 	bl	800b1d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80026ec:	2100      	movs	r1, #0
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f929 	bl	8002946 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f004 febd 	bl	8007478 <USB_ReadInterrupts>
 80026fe:	4603      	mov	r3, r0
 8002700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002708:	d10b      	bne.n	8002722 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002716:	b292      	uxth	r2, r2
 8002718:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800271c:	b292      	uxth	r2, r2
 800271e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f004 fea6 	bl	8007478 <USB_ReadInterrupts>
 800272c:	4603      	mov	r3, r0
 800272e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002736:	d10b      	bne.n	8002750 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002744:	b292      	uxth	r2, r2
 8002746:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800274a:	b292      	uxth	r2, r2
 800274c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f004 fe8f 	bl	8007478 <USB_ReadInterrupts>
 800275a:	4603      	mov	r3, r0
 800275c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002764:	d133      	bne.n	80027ce <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002772:	b292      	uxth	r2, r2
 8002774:	f022 0204 	bic.w	r2, r2, #4
 8002778:	b292      	uxth	r2, r2
 800277a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 800278a:	b292      	uxth	r2, r2
 800278c:	f022 0208 	bic.w	r2, r2, #8
 8002790:	b292      	uxth	r2, r2
 8002792:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 800279c:	2b01      	cmp	r3, #1
 800279e:	d107      	bne.n	80027b0 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027a8:	2100      	movs	r1, #0
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f008 ffc6 	bl	800b73c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f008 fd4d 	bl	800b250 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80027c2:	b292      	uxth	r2, r2
 80027c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027c8:	b292      	uxth	r2, r2
 80027ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f004 fe50 	bl	8007478 <USB_ReadInterrupts>
 80027d8:	4603      	mov	r3, r0
 80027da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027e2:	d131      	bne.n	8002848 <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80027f0:	b292      	uxth	r2, r2
 80027f2:	f042 0208 	orr.w	r2, r2, #8
 80027f6:	b292      	uxth	r2, r2
 80027f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002808:	b292      	uxth	r2, r2
 800280a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800280e:	b292      	uxth	r2, r2
 8002810:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002820:	b292      	uxth	r2, r2
 8002822:	f042 0204 	orr.w	r2, r2, #4
 8002826:	b292      	uxth	r2, r2
 8002828:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f004 fe21 	bl	8007478 <USB_ReadInterrupts>
 8002836:	4603      	mov	r3, r0
 8002838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002840:	d002      	beq.n	8002848 <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f008 fcea 	bl	800b21c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f004 fe13 	bl	8007478 <USB_ReadInterrupts>
 8002852:	4603      	mov	r3, r0
 8002854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002858:	2b80      	cmp	r3, #128	; 0x80
 800285a:	d13f      	bne.n	80028dc <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002868:	b292      	uxth	r2, r2
 800286a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800286e:	b292      	uxth	r2, r2
 8002870:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 800287a:	2b00      	cmp	r3, #0
 800287c:	d12b      	bne.n	80028d6 <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 800288a:	b292      	uxth	r2, r2
 800288c:	f042 0204 	orr.w	r2, r2, #4
 8002890:	b292      	uxth	r2, r2
 8002892:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80028a2:	b292      	uxth	r2, r2
 80028a4:	f042 0208 	orr.w	r2, r2, #8
 80028a8:	b292      	uxth	r2, r2
 80028aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80028be:	b29b      	uxth	r3, r3
 80028c0:	089b      	lsrs	r3, r3, #2
 80028c2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80028cc:	2101      	movs	r1, #1
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f008 ff34 	bl	800b73c <HAL_PCDEx_LPM_Callback>
 80028d4:	e002      	b.n	80028dc <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f008 fca0 	bl	800b21c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f004 fdc9 	bl	8007478 <USB_ReadInterrupts>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f0:	d10e      	bne.n	8002910 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6812      	ldr	r2, [r2, #0]
 80028fa:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80028fe:	b292      	uxth	r2, r2
 8002900:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002904:	b292      	uxth	r2, r2
 8002906:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f008 fc55 	bl	800b1ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f004 fdaf 	bl	8007478 <USB_ReadInterrupts>
 800291a:	4603      	mov	r3, r0
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002924:	d10b      	bne.n	800293e <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002932:	b292      	uxth	r2, r2
 8002934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002938:	b292      	uxth	r2, r2
 800293a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_PCD_SetAddress+0x1a>
 800295c:	2302      	movs	r3, #2
 800295e:	e013      	b.n	8002988 <HAL_PCD_SetAddress+0x42>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f004 fd3d 	bl	80073f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	4608      	mov	r0, r1
 800299a:	4611      	mov	r1, r2
 800299c:	461a      	mov	r2, r3
 800299e:	4603      	mov	r3, r0
 80029a0:	70fb      	strb	r3, [r7, #3]
 80029a2:	460b      	mov	r3, r1
 80029a4:	803b      	strh	r3, [r7, #0]
 80029a6:	4613      	mov	r3, r2
 80029a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	da0b      	bge.n	80029ce <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	015b      	lsls	r3, r3, #5
 80029be:	3328      	adds	r3, #40	; 0x28
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	4413      	add	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	705a      	strb	r2, [r3, #1]
 80029cc:	e00b      	b.n	80029e6 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80029ce:	78fb      	ldrb	r3, [r7, #3]
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	015b      	lsls	r3, r3, #5
 80029d6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & 0xFU;
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029f2:	883a      	ldrh	r2, [r7, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	78ba      	ldrb	r2, [r7, #2]
 80029fc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	785b      	ldrb	r3, [r3, #1]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d004      	beq.n	8002a10 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a10:	78bb      	ldrb	r3, [r7, #2]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d102      	bne.n	8002a1c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_PCD_EP_Open+0x9a>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e00e      	b.n	8002a48 <HAL_PCD_EP_Open+0xb8>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68f9      	ldr	r1, [r7, #12]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f003 fce1 	bl	8006400 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return ret;
 8002a46:	7afb      	ldrb	r3, [r7, #11]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	da0b      	bge.n	8002a7c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	015b      	lsls	r3, r3, #5
 8002a6c:	3328      	adds	r3, #40	; 0x28
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	4413      	add	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	705a      	strb	r2, [r3, #1]
 8002a7a:	e00b      	b.n	8002a94 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	015b      	lsls	r3, r3, #5
 8002a84:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & 0xFU;
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_PCD_EP_Close+0x5e>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e00e      	b.n	8002acc <HAL_PCD_EP_Close+0x7c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68f9      	ldr	r1, [r7, #12]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f003 ff81 	bl	80069c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8002ae4:	7afb      	ldrb	r3, [r7, #11]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	015b      	lsls	r3, r3, #5
 8002aec:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4413      	add	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2200      	movs	r2, #0
 8002b06:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0xFU;
 8002b0e:	7afb      	ldrb	r3, [r7, #11]
 8002b10:	f003 030f 	and.w	r3, r3, #15
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0xFU) == 0U)
 8002b1a:	7afb      	ldrb	r3, [r7, #11]
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d106      	bne.n	8002b32 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6979      	ldr	r1, [r7, #20]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f004 f8e0 	bl	8006cf0 <USB_EPStartXfer>
 8002b30:	e005      	b.n	8002b3e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6979      	ldr	r1, [r7, #20]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f004 f8d9 	bl	8006cf0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	70fb      	strb	r3, [r7, #3]
  return (uint16_t)hpcd->OUT_ep[ep_addr & 0xFU].xfer_count;
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	3312      	adds	r3, #18
 8002b5e:	015b      	lsls	r3, r3, #5
 8002b60:	4413      	add	r3, r2
 8002b62:	3304      	adds	r3, #4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	460b      	mov	r3, r1
 8002b82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8002b84:	7afb      	ldrb	r3, [r7, #11]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	015b      	lsls	r3, r3, #5
 8002b8c:	3328      	adds	r3, #40	; 0x28
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4413      	add	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0xFU;
 8002bac:	7afb      	ldrb	r3, [r7, #11]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0xFU) == 0U)
 8002bb8:	7afb      	ldrb	r3, [r7, #11]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d106      	bne.n	8002bd0 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6979      	ldr	r1, [r7, #20]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f004 f891 	bl	8006cf0 <USB_EPStartXfer>
 8002bce:	e005      	b.n	8002bdc <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6979      	ldr	r1, [r7, #20]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f004 f88a 	bl	8006cf0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	f003 020f 	and.w	r2, r3, #15
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d901      	bls.n	8002c04 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e046      	b.n	8002c92 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	da0b      	bge.n	8002c24 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	015b      	lsls	r3, r3, #5
 8002c14:	3328      	adds	r3, #40	; 0x28
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	4413      	add	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	705a      	strb	r2, [r3, #1]
 8002c22:	e009      	b.n	8002c38 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	015b      	lsls	r3, r3, #5
 8002c28:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	4413      	add	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_PCD_EP_SetStall+0x72>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e01c      	b.n	8002c92 <HAL_PCD_EP_SetStall+0xac>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68f9      	ldr	r1, [r7, #12]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f004 faf6 	bl	8007258 <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d108      	bne.n	8002c88 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8002c80:	4619      	mov	r1, r3
 8002c82:	4610      	mov	r0, r2
 8002c84:	f004 fc08 	bl	8007498 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	f003 020f 	and.w	r2, r3, #15
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d901      	bls.n	8002cb8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e03a      	b.n	8002d2e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	da0b      	bge.n	8002cd8 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	015b      	lsls	r3, r3, #5
 8002cc8:	3328      	adds	r3, #40	; 0x28
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	4413      	add	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	705a      	strb	r2, [r3, #1]
 8002cd6:	e00b      	b.n	8002cf0 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	015b      	lsls	r3, r3, #5
 8002ce0:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_PCD_EP_ClrStall+0x76>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e00e      	b.n	8002d2e <HAL_PCD_EP_ClrStall+0x94>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68f9      	ldr	r1, [r7, #12]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f004 fadc 	bl	80072dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b089      	sub	sp, #36	; 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d40:	e25e      	b.n	8003200 <PCD_EP_ISR_Handler+0x4c8>
  {
    wIstr = hpcd->Instance->ISTR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d4a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002d4c:	8afb      	ldrh	r3, [r7, #22]
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002d56:	7d7b      	ldrb	r3, [r7, #21]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f040 812c 	bne.w	8002fb6 <PCD_EP_ISR_Handler+0x27e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002d5e:	8afb      	ldrh	r3, [r7, #22]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d14b      	bne.n	8002e00 <PCD_EP_ISR_Handler+0xc8>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d78:	b29c      	uxth	r4, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4622      	mov	r2, r4
 8002d80:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3328      	adds	r3, #40	; 0x28
 8002d86:	613b      	str	r3, [r7, #16]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	4413      	add	r3, r2
 8002da2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	695a      	ldr	r2, [r3, #20]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	441a      	add	r2, r3
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f008 f9e3 	bl	800b18c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8216 	beq.w	8003200 <PCD_EP_ISR_Handler+0x4c8>
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f040 8211 	bne.w	8003200 <PCD_EP_ISR_Handler+0x4c8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	b292      	uxth	r2, r2
 8002df2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002dfe:	e1ff      	b.n	8003200 <PCD_EP_ISR_Handler+0x4c8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002e06:	613b      	str	r3, [r7, #16]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	81fb      	strh	r3, [r7, #14]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e10:	89fb      	ldrh	r3, [r7, #14]
 8002e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d02f      	beq.n	8002e7a <PCD_EP_ISR_Handler+0x142>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f503 6186 	add.w	r1, r3, #1072	; 0x430
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	88da      	ldrh	r2, [r3, #6]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	f004 fb6c 	bl	8007532 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e66:	4013      	ands	r3, r2
 8002e68:	b29c      	uxth	r4, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4622      	mov	r2, r4
 8002e70:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f008 f960 	bl	800b138 <HAL_PCD_SetupStageCallback>
 8002e78:	e1c2      	b.n	8003200 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f280 81be 	bge.w	8003200 <PCD_EP_ISR_Handler+0x4c8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e90:	4013      	ands	r3, r2
 8002e92:	b29c      	uxth	r4, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4622      	mov	r2, r4
 8002e9a:	801a      	strh	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 0U)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d011      	beq.n	8002ef0 <PCD_EP_ISR_Handler+0x1b8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	6959      	ldr	r1, [r3, #20]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	88da      	ldrh	r2, [r3, #6]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	f004 fb28 	bl	8007532 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	441a      	add	r2, r3
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	615a      	str	r2, [r3, #20]

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f008 f932 	bl	800b15c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461c      	mov	r4, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	441c      	add	r4, r3
 8002f0a:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d111      	bne.n	8002f3c <PCD_EP_ISR_Handler+0x204>
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	881a      	ldrh	r2, [r3, #0]
 8002f1c:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8002f20:	4013      	ands	r3, r2
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	801a      	strh	r2, [r3, #0]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	801a      	strh	r2, [r3, #0]
 8002f3a:	e026      	b.n	8002f8a <PCD_EP_ISR_Handler+0x252>
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	2b3d      	cmp	r3, #61	; 0x3d
 8002f42:	d813      	bhi.n	8002f6c <PCD_EP_ISR_Handler+0x234>
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	085b      	lsrs	r3, r3, #1
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <PCD_EP_ISR_Handler+0x226>
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	029b      	lsls	r3, r3, #10
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	801a      	strh	r2, [r3, #0]
 8002f6a:	e00e      	b.n	8002f8a <PCD_EP_ISR_Handler+0x252>
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	61bb      	str	r3, [r7, #24]
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	029b      	lsls	r3, r3, #10
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9a:	b29c      	uxth	r4, r3
 8002f9c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002fa0:	b29c      	uxth	r4, r3
 8002fa2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002fa6:	b29c      	uxth	r4, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4b9b      	ldr	r3, [pc, #620]	; (800321c <PCD_EP_ISR_Handler+0x4e4>)
 8002fae:	4323      	orrs	r3, r4
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	8013      	strh	r3, [r2, #0]
 8002fb4:	e124      	b.n	8003200 <PCD_EP_ISR_Handler+0x4c8>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	7d7b      	ldrb	r3, [r7, #21]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	81fb      	strh	r3, [r7, #14]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002fc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f280 80c9 	bge.w	8003162 <PCD_EP_ISR_Handler+0x42a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	7d7b      	ldrb	r3, [r7, #21]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	b29c      	uxth	r4, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	7d7b      	ldrb	r3, [r7, #21]
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	4622      	mov	r2, r4
 8002ff6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002ff8:	7d7b      	ldrb	r3, [r7, #21]
 8002ffa:	015b      	lsls	r3, r3, #5
 8002ffc:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	4413      	add	r3, r2
 8003004:	613b      	str	r3, [r7, #16]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	7b1b      	ldrb	r3, [r3, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d11f      	bne.n	800304e <PCD_EP_ISR_Handler+0x316>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003016:	b29b      	uxth	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	4413      	add	r3, r2
 8003028:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003032:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003034:	8bfb      	ldrh	r3, [r7, #30]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d06e      	beq.n	8003118 <PCD_EP_ISR_Handler+0x3e0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	6959      	ldr	r1, [r3, #20]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	88da      	ldrh	r2, [r3, #6]
 8003046:	8bfb      	ldrh	r3, [r7, #30]
 8003048:	f004 fa73 	bl	8007532 <USB_ReadPMA>
 800304c:	e064      	b.n	8003118 <PCD_EP_ISR_Handler+0x3e0>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01f      	beq.n	80030a8 <PCD_EP_ISR_Handler+0x370>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003070:	b29b      	uxth	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4413      	add	r3, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	4413      	add	r3, r2
 8003082:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800308c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800308e:	8bfb      	ldrh	r3, [r7, #30]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d028      	beq.n	80030e6 <PCD_EP_ISR_Handler+0x3ae>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	6959      	ldr	r1, [r3, #20]
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	891a      	ldrh	r2, [r3, #8]
 80030a0:	8bfb      	ldrh	r3, [r7, #30]
 80030a2:	f004 fa46 	bl	8007532 <USB_ReadPMA>
 80030a6:	e01e      	b.n	80030e6 <PCD_EP_ISR_Handler+0x3ae>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4413      	add	r3, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	4413      	add	r3, r2
 80030c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030cc:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80030ce:	8bfb      	ldrh	r3, [r7, #30]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <PCD_EP_ISR_Handler+0x3ae>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	6959      	ldr	r1, [r3, #20]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	895a      	ldrh	r2, [r3, #10]
 80030e0:	8bfb      	ldrh	r3, [r7, #30]
 80030e2:	f004 fa26 	bl	8007532 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003100:	b29c      	uxth	r4, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	441a      	add	r2, r3
 8003110:	4b43      	ldr	r3, [pc, #268]	; (8003220 <PCD_EP_ISR_Handler+0x4e8>)
 8003112:	4323      	orrs	r3, r4
 8003114:	b29b      	uxth	r3, r3
 8003116:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	69da      	ldr	r2, [r3, #28]
 800311c:	8bfb      	ldrh	r3, [r7, #30]
 800311e:	441a      	add	r2, r3
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	8bfb      	ldrh	r3, [r7, #30]
 800312a:	441a      	add	r2, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d004      	beq.n	8003142 <PCD_EP_ISR_Handler+0x40a>
 8003138:	8bfa      	ldrh	r2, [r7, #30]
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	429a      	cmp	r2, r3
 8003140:	d206      	bcs.n	8003150 <PCD_EP_ISR_Handler+0x418>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	4619      	mov	r1, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f008 f807 	bl	800b15c <HAL_PCD_DataOutStageCallback>
 800314e:	e008      	b.n	8003162 <PCD_EP_ISR_Handler+0x42a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	7819      	ldrb	r1, [r3, #0]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff fcb9 	bl	8002ad4 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003162:	89fb      	ldrh	r3, [r7, #14]
 8003164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003168:	2b00      	cmp	r3, #0
 800316a:	d049      	beq.n	8003200 <PCD_EP_ISR_Handler+0x4c8>
      {
        ep = &hpcd->IN_ep[epindex];
 800316c:	7d7b      	ldrb	r3, [r7, #21]
 800316e:	015b      	lsls	r3, r3, #5
 8003170:	3328      	adds	r3, #40	; 0x28
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	613b      	str	r3, [r7, #16]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	7d7b      	ldrb	r3, [r7, #21]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	b29b      	uxth	r3, r3
 8003188:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800318c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003190:	b29c      	uxth	r4, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	7d7b      	ldrb	r3, [r7, #21]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	4622      	mov	r2, r4
 80031a0:	801a      	strh	r2, [r3, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4413      	add	r3, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	4413      	add	r3, r2
 80031bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	441a      	add	r2, r3
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d106      	bne.n	80031ee <PCD_EP_ISR_Handler+0x4b6>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	4619      	mov	r1, r3
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f007 ffd0 	bl	800b18c <HAL_PCD_DataInStageCallback>
 80031ec:	e008      	b.n	8003200 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	7819      	ldrb	r1, [r3, #0]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff fcba 	bl	8002b74 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003208:	b29b      	uxth	r3, r3
 800320a:	b21b      	sxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	f6ff ad98 	blt.w	8002d42 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3724      	adds	r7, #36	; 0x24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd90      	pop	{r4, r7, pc}
 800321c:	ffff8080 	.word	0xffff8080
 8003220:	ffff80c0 	.word	0xffff80c0

08003224 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	607b      	str	r3, [r7, #4]
 800322e:	460b      	mov	r3, r1
 8003230:	817b      	strh	r3, [r7, #10]
 8003232:	4613      	mov	r3, r2
 8003234:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003236:	897b      	ldrh	r3, [r7, #10]
 8003238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003242:	897b      	ldrh	r3, [r7, #10]
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	015b      	lsls	r3, r3, #5
 800324a:	3328      	adds	r3, #40	; 0x28
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	e006      	b.n	8003262 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003254:	897b      	ldrh	r3, [r7, #10]
 8003256:	015b      	lsls	r3, r3, #5
 8003258:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003262:	893b      	ldrh	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d107      	bne.n	8003278 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	2200      	movs	r2, #0
 800326c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	b29a      	uxth	r2, r3
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	80da      	strh	r2, [r3, #6]
 8003276:	e00b      	b.n	8003290 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2201      	movs	r2, #1
 800327c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	b29a      	uxth	r2, r3
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	0c1b      	lsrs	r3, r3, #16
 800328a:	b29a      	uxth	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 800329e:	b480      	push	{r7}
 80032a0:	b085      	sub	sp, #20
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c

  USBx->BCDR |= (USB_BCDR_BCDEN);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	f043 0302 	orr.w	r3, r3, #2
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
  hpcd->LPM_State = LPM_L0;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800330e:	b29b      	uxth	r3, r3
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003322:	b29b      	uxth	r3, r3
 8003324:	f043 0302 	orr.w	r3, r3, #2
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <HAL_PWREx_GetVoltageRange+0x18>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40007000 	.word	0x40007000

0800335c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336a:	d130      	bne.n	80033ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800336c:	4b23      	ldr	r3, [pc, #140]	; (80033fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003378:	d038      	beq.n	80033ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800337a:	4a20      	ldr	r2, [pc, #128]	; (80033fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800337c:	4b1f      	ldr	r3, [pc, #124]	; (80033fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003384:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003388:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800338a:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2232      	movs	r2, #50	; 0x32
 8003390:	fb02 f303 	mul.w	r3, r2, r3
 8003394:	4a1b      	ldr	r2, [pc, #108]	; (8003404 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	0c9b      	lsrs	r3, r3, #18
 800339c:	3301      	adds	r3, #1
 800339e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033a0:	e002      	b.n	80033a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033a8:	4b14      	ldr	r3, [pc, #80]	; (80033fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b4:	d102      	bne.n	80033bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f2      	bne.n	80033a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033bc:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c8:	d110      	bne.n	80033ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e00f      	b.n	80033ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033da:	d007      	beq.n	80033ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033dc:	4a07      	ldr	r2, [pc, #28]	; (80033fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033de:	4b07      	ldr	r3, [pc, #28]	; (80033fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40007000 	.word	0x40007000
 8003400:	200008f0 	.word	0x200008f0
 8003404:	431bde83 	.word	0x431bde83

08003408 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800340c:	4a05      	ldr	r2, [pc, #20]	; (8003424 <HAL_PWREx_EnableVddUSB+0x1c>)
 800340e:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003416:	6053      	str	r3, [r2, #4]
}
 8003418:	bf00      	nop
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40007000 	.word	0x40007000

08003428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_oscsource;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e395      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800343a:	4ba3      	ldr	r3, [pc, #652]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003444:	4ba0      	ldr	r3, [pc, #640]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 80df 	beq.w	800361a <HAL_RCC_OscConfig+0x1f2>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <HAL_RCC_OscConfig+0x4a>
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b0c      	cmp	r3, #12
 8003466:	f040 8086 	bne.w	8003576 <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b01      	cmp	r3, #1
 800346e:	f040 8082 	bne.w	8003576 <HAL_RCC_OscConfig+0x14e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003472:	4b95      	ldr	r3, [pc, #596]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <HAL_RCC_OscConfig+0x62>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e36d      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1a      	ldr	r2, [r3, #32]
 800348e:	4b8e      	ldr	r3, [pc, #568]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d004      	beq.n	80034a4 <HAL_RCC_OscConfig+0x7c>
 800349a:	4b8b      	ldr	r3, [pc, #556]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a2:	e005      	b.n	80034b0 <HAL_RCC_OscConfig+0x88>
 80034a4:	4b88      	ldr	r3, [pc, #544]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 80034a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034aa:	091b      	lsrs	r3, r3, #4
 80034ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d923      	bls.n	80034fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 fd0d 	bl	8003ed8 <RCC_SetFlashLatencyFromMSIRange>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e34e      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034c8:	4a7f      	ldr	r2, [pc, #508]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 80034ca:	4b7f      	ldr	r3, [pc, #508]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f043 0308 	orr.w	r3, r3, #8
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	497c      	ldr	r1, [pc, #496]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 80034d6:	4b7c      	ldr	r3, [pc, #496]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034e6:	4978      	ldr	r1, [pc, #480]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 80034e8:	4b77      	ldr	r3, [pc, #476]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	4313      	orrs	r3, r2
 80034f8:	604b      	str	r3, [r1, #4]
 80034fa:	e022      	b.n	8003542 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034fc:	4a72      	ldr	r2, [pc, #456]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 80034fe:	4b72      	ldr	r3, [pc, #456]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f043 0308 	orr.w	r3, r3, #8
 8003506:	6013      	str	r3, [r2, #0]
 8003508:	496f      	ldr	r1, [pc, #444]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 800350a:	4b6f      	ldr	r3, [pc, #444]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	4313      	orrs	r3, r2
 8003518:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800351a:	496b      	ldr	r1, [pc, #428]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 800351c:	4b6a      	ldr	r3, [pc, #424]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	021b      	lsls	r3, r3, #8
 800352a:	4313      	orrs	r3, r2
 800352c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 fcd0 	bl	8003ed8 <RCC_SetFlashLatencyFromMSIRange>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e311      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003542:	f000 fbf5 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 8003546:	4601      	mov	r1, r0
 8003548:	4b5f      	ldr	r3, [pc, #380]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	4a5e      	ldr	r2, [pc, #376]	; (80036cc <HAL_RCC_OscConfig+0x2a4>)
 8003554:	5cd3      	ldrb	r3, [r2, r3]
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	fa21 f303 	lsr.w	r3, r1, r3
 800355e:	4a5c      	ldr	r2, [pc, #368]	; (80036d0 <HAL_RCC_OscConfig+0x2a8>)
 8003560:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003562:	2000      	movs	r0, #0
 8003564:	f7fe fa16 	bl	8001994 <HAL_InitTick>
 8003568:	4603      	mov	r3, r0
 800356a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d052      	beq.n	8003618 <HAL_RCC_OscConfig+0x1f0>
        {
          return status;
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	e2f7      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d032      	beq.n	80035e4 <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800357e:	4a52      	ldr	r2, [pc, #328]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 8003580:	4b51      	ldr	r3, [pc, #324]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800358a:	f7fe fa35 	bl	80019f8 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003592:	f7fe fa31 	bl	80019f8 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e2e0      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035a4:	4b48      	ldr	r3, [pc, #288]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x16a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035b0:	4a45      	ldr	r2, [pc, #276]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 80035b2:	4b45      	ldr	r3, [pc, #276]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f043 0308 	orr.w	r3, r3, #8
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	4942      	ldr	r1, [pc, #264]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 80035be:	4b42      	ldr	r3, [pc, #264]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035ce:	493e      	ldr	r1, [pc, #248]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 80035d0:	4b3d      	ldr	r3, [pc, #244]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]
 80035e2:	e01a      	b.n	800361a <HAL_RCC_OscConfig+0x1f2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035e4:	4a38      	ldr	r2, [pc, #224]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 80035e6:	4b38      	ldr	r3, [pc, #224]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035f0:	f7fe fa02 	bl	80019f8 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035f8:	f7fe f9fe 	bl	80019f8 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e2ad      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800360a:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x1d0>
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x1f2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003618:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d072      	beq.n	800370c <HAL_RCC_OscConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b08      	cmp	r3, #8
 800362a:	d005      	beq.n	8003638 <HAL_RCC_OscConfig+0x210>
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b0c      	cmp	r3, #12
 8003630:	d10e      	bne.n	8003650 <HAL_RCC_OscConfig+0x228>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2b03      	cmp	r3, #3
 8003636:	d10b      	bne.n	8003650 <HAL_RCC_OscConfig+0x228>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003638:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d062      	beq.n	800370a <HAL_RCC_OscConfig+0x2e2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d15e      	bne.n	800370a <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e28a      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003658:	d106      	bne.n	8003668 <HAL_RCC_OscConfig+0x240>
 800365a:	4a1b      	ldr	r2, [pc, #108]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 800365c:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	e01d      	b.n	80036a4 <HAL_RCC_OscConfig+0x27c>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003670:	d10c      	bne.n	800368c <HAL_RCC_OscConfig+0x264>
 8003672:	4a15      	ldr	r2, [pc, #84]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 8003674:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 8003680:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	e00b      	b.n	80036a4 <HAL_RCC_OscConfig+0x27c>
 800368c:	4a0e      	ldr	r2, [pc, #56]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 800368e:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	4a0b      	ldr	r2, [pc, #44]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 800369a:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCC_OscConfig+0x2a0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d01a      	beq.n	80036e2 <HAL_RCC_OscConfig+0x2ba>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fe f9a4 	bl	80019f8 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036b2:	e00f      	b.n	80036d4 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b4:	f7fe f9a0 	bl	80019f8 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b64      	cmp	r3, #100	; 0x64
 80036c0:	d908      	bls.n	80036d4 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e24f      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
 80036c6:	bf00      	nop
 80036c8:	40021000 	.word	0x40021000
 80036cc:	0800bac8 	.word	0x0800bac8
 80036d0:	200008f0 	.word	0x200008f0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036d4:	4bae      	ldr	r3, [pc, #696]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0e9      	beq.n	80036b4 <HAL_RCC_OscConfig+0x28c>
 80036e0:	e014      	b.n	800370c <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e2:	f7fe f989 	bl	80019f8 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x2d4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ea:	f7fe f985 	bl	80019f8 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b64      	cmp	r3, #100	; 0x64
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e234      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036fc:	4ba4      	ldr	r3, [pc, #656]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1f0      	bne.n	80036ea <HAL_RCC_OscConfig+0x2c2>
 8003708:	e000      	b.n	800370c <HAL_RCC_OscConfig+0x2e4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d060      	beq.n	80037da <HAL_RCC_OscConfig+0x3b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	2b04      	cmp	r3, #4
 800371c:	d005      	beq.n	800372a <HAL_RCC_OscConfig+0x302>
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2b0c      	cmp	r3, #12
 8003722:	d119      	bne.n	8003758 <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d116      	bne.n	8003758 <HAL_RCC_OscConfig+0x330>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800372a:	4b99      	ldr	r3, [pc, #612]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_RCC_OscConfig+0x31a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e211      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003742:	4993      	ldr	r1, [pc, #588]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 8003744:	4b92      	ldr	r3, [pc, #584]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	061b      	lsls	r3, r3, #24
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003756:	e040      	b.n	80037da <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d023      	beq.n	80037a8 <HAL_RCC_OscConfig+0x380>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003760:	4a8b      	ldr	r2, [pc, #556]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 8003762:	4b8b      	ldr	r3, [pc, #556]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376c:	f7fe f944 	bl	80019f8 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003774:	f7fe f940 	bl	80019f8 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e1ef      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003786:	4b82      	ldr	r3, [pc, #520]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x34c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003792:	497f      	ldr	r1, [pc, #508]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 8003794:	4b7e      	ldr	r3, [pc, #504]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	061b      	lsls	r3, r3, #24
 80037a2:	4313      	orrs	r3, r2
 80037a4:	604b      	str	r3, [r1, #4]
 80037a6:	e018      	b.n	80037da <HAL_RCC_OscConfig+0x3b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a8:	4a79      	ldr	r2, [pc, #484]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 80037aa:	4b79      	ldr	r3, [pc, #484]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fe f920 	bl	80019f8 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037bc:	f7fe f91c 	bl	80019f8 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e1cb      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037ce:	4b70      	ldr	r3, [pc, #448]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d03c      	beq.n	8003860 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d01c      	beq.n	8003828 <HAL_RCC_OscConfig+0x400>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ee:	4a68      	ldr	r2, [pc, #416]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 80037f0:	4b67      	ldr	r3, [pc, #412]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 80037f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fe:	f7fe f8fb 	bl	80019f8 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003806:	f7fe f8f7 	bl	80019f8 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e1a6      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003818:	4b5d      	ldr	r3, [pc, #372]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 800381a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0ef      	beq.n	8003806 <HAL_RCC_OscConfig+0x3de>
 8003826:	e01b      	b.n	8003860 <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003828:	4a59      	ldr	r2, [pc, #356]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 800382a:	4b59      	ldr	r3, [pc, #356]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 800382c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003830:	f023 0301 	bic.w	r3, r3, #1
 8003834:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fe f8de 	bl	80019f8 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003840:	f7fe f8da 	bl	80019f8 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e189      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003852:	4b4f      	ldr	r3, [pc, #316]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 8003854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1ef      	bne.n	8003840 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80a5 	beq.w	80039b8 <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003872:	4b47      	ldr	r3, [pc, #284]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 8003874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10d      	bne.n	800389a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800387e:	4a44      	ldr	r2, [pc, #272]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 8003880:	4b43      	ldr	r3, [pc, #268]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 8003882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003888:	6593      	str	r3, [r2, #88]	; 0x58
 800388a:	4b41      	ldr	r3, [pc, #260]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 800388c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003896:	2301      	movs	r3, #1
 8003898:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800389a:	4b3e      	ldr	r3, [pc, #248]	; (8003994 <HAL_RCC_OscConfig+0x56c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d118      	bne.n	80038d8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038a6:	4a3b      	ldr	r2, [pc, #236]	; (8003994 <HAL_RCC_OscConfig+0x56c>)
 80038a8:	4b3a      	ldr	r3, [pc, #232]	; (8003994 <HAL_RCC_OscConfig+0x56c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b2:	f7fe f8a1 	bl	80019f8 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ba:	f7fe f89d 	bl	80019f8 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e14c      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038cc:	4b31      	ldr	r3, [pc, #196]	; (8003994 <HAL_RCC_OscConfig+0x56c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x492>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d108      	bne.n	80038f2 <HAL_RCC_OscConfig+0x4ca>
 80038e0:	4a2b      	ldr	r2, [pc, #172]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 80038e2:	4b2b      	ldr	r3, [pc, #172]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038f0:	e024      	b.n	800393c <HAL_RCC_OscConfig+0x514>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b05      	cmp	r3, #5
 80038f8:	d110      	bne.n	800391c <HAL_RCC_OscConfig+0x4f4>
 80038fa:	4a25      	ldr	r2, [pc, #148]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 80038fc:	4b24      	ldr	r3, [pc, #144]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	f043 0304 	orr.w	r3, r3, #4
 8003906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800390a:	4a21      	ldr	r2, [pc, #132]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 800390c:	4b20      	ldr	r3, [pc, #128]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800391a:	e00f      	b.n	800393c <HAL_RCC_OscConfig+0x514>
 800391c:	4a1c      	ldr	r2, [pc, #112]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 800391e:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 8003920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800392c:	4a18      	ldr	r2, [pc, #96]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 800392e:	4b18      	ldr	r3, [pc, #96]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	f023 0304 	bic.w	r3, r3, #4
 8003938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d016      	beq.n	8003972 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003944:	f7fe f858 	bl	80019f8 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800394a:	e00a      	b.n	8003962 <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394c:	f7fe f854 	bl	80019f8 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	; 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e101      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_RCC_OscConfig+0x568>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0ed      	beq.n	800394c <HAL_RCC_OscConfig+0x524>
 8003970:	e019      	b.n	80039a6 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003972:	f7fe f841 	bl	80019f8 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003978:	e00e      	b.n	8003998 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397a:	f7fe f83d 	bl	80019f8 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	f241 3288 	movw	r2, #5000	; 0x1388
 8003988:	4293      	cmp	r3, r2
 800398a:	d905      	bls.n	8003998 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e0ea      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
 8003990:	40021000 	.word	0x40021000
 8003994:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003998:	4b75      	ldr	r3, [pc, #468]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1e9      	bne.n	800397a <HAL_RCC_OscConfig+0x552>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039a6:	7ffb      	ldrb	r3, [r7, #31]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d105      	bne.n	80039b8 <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ac:	4a70      	ldr	r2, [pc, #448]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 80039ae:	4b70      	ldr	r3, [pc, #448]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 80039b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d03c      	beq.n	8003a3e <HAL_RCC_OscConfig+0x616>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01c      	beq.n	8003a06 <HAL_RCC_OscConfig+0x5de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039cc:	4a68      	ldr	r2, [pc, #416]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 80039ce:	4b68      	ldr	r3, [pc, #416]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 80039d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fe f80c 	bl	80019f8 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x5ce>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039e4:	f7fe f808 	bl	80019f8 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e0b7      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039f6:	4b5e      	ldr	r3, [pc, #376]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 80039f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0ef      	beq.n	80039e4 <HAL_RCC_OscConfig+0x5bc>
 8003a04:	e01b      	b.n	8003a3e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a06:	4a5a      	ldr	r2, [pc, #360]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003a08:	4b59      	ldr	r3, [pc, #356]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a16:	f7fd ffef 	bl	80019f8 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a1e:	f7fd ffeb 	bl	80019f8 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e09a      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a30:	4b4f      	ldr	r3, [pc, #316]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003a32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1ef      	bne.n	8003a1e <HAL_RCC_OscConfig+0x5f6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 808e 	beq.w	8003b64 <HAL_RCC_OscConfig+0x73c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b0c      	cmp	r3, #12
 8003a4c:	f000 8088 	beq.w	8003b60 <HAL_RCC_OscConfig+0x738>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d155      	bne.n	8003b04 <HAL_RCC_OscConfig+0x6dc>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a58:	4a45      	ldr	r2, [pc, #276]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003a5a:	4b45      	ldr	r3, [pc, #276]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a64:	f7fd ffc8 	bl	80019f8 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6c:	f7fd ffc4 	bl	80019f8 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e073      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a7e:	4b3c      	ldr	r3, [pc, #240]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x644>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a8a:	4939      	ldr	r1, [pc, #228]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	3b01      	subs	r3, #1
 8003a92:	011a      	lsls	r2, r3, #4
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa6:	085b      	lsrs	r3, r3, #1
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	055b      	lsls	r3, r3, #21
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	085b      	lsrs	r3, r3, #1
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	065b      	lsls	r3, r3, #25
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	06db      	lsls	r3, r3, #27
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac4:	4a2a      	ldr	r2, [pc, #168]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003ac6:	4b2a      	ldr	r3, [pc, #168]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ace:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ad0:	4a27      	ldr	r2, [pc, #156]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003ad2:	4b27      	ldr	r3, [pc, #156]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ada:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fd ff8c 	bl	80019f8 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x6ce>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae4:	f7fd ff88 	bl	80019f8 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x6ce>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e037      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af6:	4b1e      	ldr	r3, [pc, #120]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x6bc>
 8003b02:	e02f      	b.n	8003b64 <HAL_RCC_OscConfig+0x73c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b04:	4a1a      	ldr	r2, [pc, #104]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003b06:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b0e:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b10:	4b17      	ldr	r3, [pc, #92]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d105      	bne.n	8003b28 <HAL_RCC_OscConfig+0x700>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003b1c:	4a14      	ldr	r2, [pc, #80]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003b1e:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f023 0303 	bic.w	r3, r3, #3
 8003b26:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003b28:	4a11      	ldr	r2, [pc, #68]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003b2a:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b36:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fd ff5e 	bl	80019f8 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x72a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b40:	f7fd ff5a 	bl	80019f8 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x72a>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e009      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <HAL_RCC_OscConfig+0x748>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x718>
 8003b5e:	e001      	b.n	8003b64 <HAL_RCC_OscConfig+0x73c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e000      	b.n	8003b66 <HAL_RCC_OscConfig+0x73e>
    }
  }
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000

08003b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0c6      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b88:	4b65      	ldr	r3, [pc, #404]	; (8003d20 <HAL_RCC_ClockConfig+0x1ac>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0207 	and.w	r2, r3, #7
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d210      	bcs.n	8003bb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b96:	4962      	ldr	r1, [pc, #392]	; (8003d20 <HAL_RCC_ClockConfig+0x1ac>)
 8003b98:	4b61      	ldr	r3, [pc, #388]	; (8003d20 <HAL_RCC_ClockConfig+0x1ac>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f023 0207 	bic.w	r2, r3, #7
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	4b5e      	ldr	r3, [pc, #376]	; (8003d20 <HAL_RCC_ClockConfig+0x1ac>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0207 	and.w	r2, r3, #7
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0ae      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d04c      	beq.n	8003c5e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d107      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bcc:	4b55      	ldr	r3, [pc, #340]	; (8003d24 <HAL_RCC_ClockConfig+0x1b0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d121      	bne.n	8003c1c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e09c      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1a2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d107      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003be4:	4b4f      	ldr	r3, [pc, #316]	; (8003d24 <HAL_RCC_ClockConfig+0x1b0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d115      	bne.n	8003c1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e090      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d107      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bfc:	4b49      	ldr	r3, [pc, #292]	; (8003d24 <HAL_RCC_ClockConfig+0x1b0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d109      	bne.n	8003c1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e084      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c0c:	4b45      	ldr	r3, [pc, #276]	; (8003d24 <HAL_RCC_ClockConfig+0x1b0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e07c      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1a2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c1c:	4941      	ldr	r1, [pc, #260]	; (8003d24 <HAL_RCC_ClockConfig+0x1b0>)
 8003c1e:	4b41      	ldr	r3, [pc, #260]	; (8003d24 <HAL_RCC_ClockConfig+0x1b0>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f023 0203 	bic.w	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c2e:	f7fd fee3 	bl	80019f8 <HAL_GetTick>
 8003c32:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c34:	e00a      	b.n	8003c4c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c36:	f7fd fedf 	bl	80019f8 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e064      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1a2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4c:	4b35      	ldr	r3, [pc, #212]	; (8003d24 <HAL_RCC_ClockConfig+0x1b0>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 020c 	and.w	r2, r3, #12
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d1eb      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c6a:	492e      	ldr	r1, [pc, #184]	; (8003d24 <HAL_RCC_ClockConfig+0x1b0>)
 8003c6c:	4b2d      	ldr	r3, [pc, #180]	; (8003d24 <HAL_RCC_ClockConfig+0x1b0>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b28      	ldr	r3, [pc, #160]	; (8003d20 <HAL_RCC_ClockConfig+0x1ac>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0207 	and.w	r2, r3, #7
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d910      	bls.n	8003cac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4925      	ldr	r1, [pc, #148]	; (8003d20 <HAL_RCC_ClockConfig+0x1ac>)
 8003c8c:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <HAL_RCC_ClockConfig+0x1ac>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f023 0207 	bic.w	r2, r3, #7
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9a:	4b21      	ldr	r3, [pc, #132]	; (8003d20 <HAL_RCC_ClockConfig+0x1ac>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0207 	and.w	r2, r3, #7
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e034      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb8:	491a      	ldr	r1, [pc, #104]	; (8003d24 <HAL_RCC_ClockConfig+0x1b0>)
 8003cba:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <HAL_RCC_ClockConfig+0x1b0>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cd6:	4913      	ldr	r1, [pc, #76]	; (8003d24 <HAL_RCC_ClockConfig+0x1b0>)
 8003cd8:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <HAL_RCC_ClockConfig+0x1b0>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cea:	f000 f821 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 8003cee:	4601      	mov	r1, r0
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <HAL_RCC_ClockConfig+0x1b0>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	4a0b      	ldr	r2, [pc, #44]	; (8003d28 <HAL_RCC_ClockConfig+0x1b4>)
 8003cfc:	5cd3      	ldrb	r3, [r2, r3]
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	fa21 f303 	lsr.w	r3, r1, r3
 8003d06:	4a09      	ldr	r2, [pc, #36]	; (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	f7fd fe42 	bl	8001994 <HAL_InitTick>
 8003d10:	4603      	mov	r3, r0
 8003d12:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d14:	7afb      	ldrb	r3, [r7, #11]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40022000 	.word	0x40022000
 8003d24:	40021000 	.word	0x40021000
 8003d28:	0800bac8 	.word	0x0800bac8
 8003d2c:	200008f0 	.word	0x200008f0

08003d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b089      	sub	sp, #36	; 0x24
 8003d34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d3e:	4b46      	ldr	r3, [pc, #280]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x128>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d48:	4b43      	ldr	r3, [pc, #268]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x128>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_RCC_GetSysClockFreq+0x34>
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	2b0c      	cmp	r3, #12
 8003d5c:	d121      	bne.n	8003da2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d11e      	bne.n	8003da2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d64:	4b3c      	ldr	r3, [pc, #240]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x128>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d107      	bne.n	8003d80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d70:	4b39      	ldr	r3, [pc, #228]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x128>)
 8003d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	f003 030f 	and.w	r3, r3, #15
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	e005      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d80:	4b35      	ldr	r3, [pc, #212]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x128>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d8c:	4a33      	ldr	r2, [pc, #204]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x12c>)
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10d      	bne.n	8003db8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003da0:	e00a      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d102      	bne.n	8003dae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003da8:	4b2d      	ldr	r3, [pc, #180]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x130>)
 8003daa:	61bb      	str	r3, [r7, #24]
 8003dac:	e004      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003db4:	4b2b      	ldr	r3, [pc, #172]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x134>)
 8003db6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b0c      	cmp	r3, #12
 8003dbc:	d145      	bne.n	8003e4a <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dbe:	4b26      	ldr	r3, [pc, #152]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x128>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dc8:	4b23      	ldr	r3, [pc, #140]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x128>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	091b      	lsrs	r3, r3, #4
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d002      	beq.n	8003de2 <HAL_RCC_GetSysClockFreq+0xb2>
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d00d      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0xcc>
 8003de0:	e019      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0xe6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003de2:	4a1f      	ldr	r2, [pc, #124]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x130>)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dea:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x128>)
 8003dec:	68d2      	ldr	r2, [r2, #12]
 8003dee:	0a12      	lsrs	r2, r2, #8
 8003df0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003df4:	fb02 f303 	mul.w	r3, r2, r3
 8003df8:	617b      	str	r3, [r7, #20]
      break;
 8003dfa:	e019      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dfc:	4a19      	ldr	r2, [pc, #100]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x134>)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e04:	4a14      	ldr	r2, [pc, #80]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x128>)
 8003e06:	68d2      	ldr	r2, [r2, #12]
 8003e08:	0a12      	lsrs	r2, r2, #8
 8003e0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e0e:	fb02 f303 	mul.w	r3, r2, r3
 8003e12:	617b      	str	r3, [r7, #20]
      break;
 8003e14:	e00c      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1e:	4a0e      	ldr	r2, [pc, #56]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x128>)
 8003e20:	68d2      	ldr	r2, [r2, #12]
 8003e22:	0a12      	lsrs	r2, r2, #8
 8003e24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e28:	fb02 f303 	mul.w	r3, r2, r3
 8003e2c:	617b      	str	r3, [r7, #20]
      break;
 8003e2e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e30:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x128>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	0e5b      	lsrs	r3, r3, #25
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco/pllr;
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e48:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3724      	adds	r7, #36	; 0x24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	0800bae0 	.word	0x0800bae0
 8003e60:	00f42400 	.word	0x00f42400
 8003e64:	007a1200 	.word	0x007a1200

08003e68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	200008f0 	.word	0x200008f0

08003e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e84:	f7ff fff0 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8003e88:	4601      	mov	r1, r0
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	4a04      	ldr	r2, [pc, #16]	; (8003ea8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e96:	5cd3      	ldrb	r3, [r2, r3]
 8003e98:	f003 031f 	and.w	r3, r3, #31
 8003e9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	0800bad8 	.word	0x0800bad8

08003eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003eb0:	f7ff ffda 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8003eb4:	4601      	mov	r1, r0
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	0adb      	lsrs	r3, r3, #11
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ec2:	5cd3      	ldrb	r3, [r2, r3]
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	0800bad8 	.word	0x0800bad8

08003ed8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ee4:	4b2a      	ldr	r3, [pc, #168]	; (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ef0:	f7ff fa26 	bl	8003340 <HAL_PWREx_GetVoltageRange>
 8003ef4:	6178      	str	r0, [r7, #20]
 8003ef6:	e014      	b.n	8003f22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ef8:	4a25      	ldr	r2, [pc, #148]	; (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003efa:	4b25      	ldr	r3, [pc, #148]	; (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f02:	6593      	str	r3, [r2, #88]	; 0x58
 8003f04:	4b22      	ldr	r3, [pc, #136]	; (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f10:	f7ff fa16 	bl	8003340 <HAL_PWREx_GetVoltageRange>
 8003f14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f16:	4a1e      	ldr	r2, [pc, #120]	; (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f18:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f28:	d10b      	bne.n	8003f42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b80      	cmp	r3, #128	; 0x80
 8003f2e:	d919      	bls.n	8003f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2ba0      	cmp	r3, #160	; 0xa0
 8003f34:	d902      	bls.n	8003f3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f36:	2302      	movs	r3, #2
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	e013      	b.n	8003f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	e010      	b.n	8003f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b80      	cmp	r3, #128	; 0x80
 8003f46:	d902      	bls.n	8003f4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f48:	2303      	movs	r3, #3
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	e00a      	b.n	8003f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b80      	cmp	r3, #128	; 0x80
 8003f52:	d102      	bne.n	8003f5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f54:	2302      	movs	r3, #2
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	e004      	b.n	8003f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b70      	cmp	r3, #112	; 0x70
 8003f5e:	d101      	bne.n	8003f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f60:	2301      	movs	r3, #1
 8003f62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f64:	490b      	ldr	r1, [pc, #44]	; (8003f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f023 0207 	bic.w	r2, r3, #7
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f74:	4b07      	ldr	r3, [pc, #28]	; (8003f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0207 	and.w	r2, r3, #7
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d001      	beq.n	8003f86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40022000 	.word	0x40022000

08003f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d02f      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fbc:	d005      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003fbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fc2:	d015      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d007      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003fc8:	e00f      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003fca:	4a5d      	ldr	r2, [pc, #372]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003fcc:	4b5c      	ldr	r3, [pc, #368]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fd6:	e00c      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	2100      	movs	r1, #0
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fa44 	bl	800446c <RCCEx_PLLSAI1_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fe8:	e003      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	74fb      	strb	r3, [r7, #19]
      break;
 8003fee:	e000      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003ff0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ff2:	7cfb      	ldrb	r3, [r7, #19]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10b      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ff8:	4951      	ldr	r1, [pc, #324]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003ffa:	4b51      	ldr	r3, [pc, #324]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004000:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800400e:	e001      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004010:	7cfb      	ldrb	r3, [r7, #19]
 8004012:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 809e 	beq.w	800415e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004022:	2300      	movs	r3, #0
 8004024:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004026:	4b46      	ldr	r3, [pc, #280]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004036:	2300      	movs	r3, #0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00d      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800403c:	4a40      	ldr	r2, [pc, #256]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800403e:	4b40      	ldr	r3, [pc, #256]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004046:	6593      	str	r3, [r2, #88]	; 0x58
 8004048:	4b3d      	ldr	r3, [pc, #244]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800404a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004054:	2301      	movs	r3, #1
 8004056:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004058:	4a3a      	ldr	r2, [pc, #232]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800405a:	4b3a      	ldr	r3, [pc, #232]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004062:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004064:	f7fd fcc8 	bl	80019f8 <HAL_GetTick>
 8004068:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800406a:	e009      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406c:	f7fd fcc4 	bl	80019f8 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d902      	bls.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	74fb      	strb	r3, [r7, #19]
        break;
 800407e:	e005      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004080:	4b30      	ldr	r3, [pc, #192]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0ef      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800408c:	7cfb      	ldrb	r3, [r7, #19]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d15a      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004092:	4b2b      	ldr	r3, [pc, #172]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d01e      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d019      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040ae:	4b24      	ldr	r3, [pc, #144]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040ba:	4a21      	ldr	r2, [pc, #132]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80040bc:	4b20      	ldr	r3, [pc, #128]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040ca:	4a1d      	ldr	r2, [pc, #116]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80040cc:	4b1c      	ldr	r3, [pc, #112]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040da:	4a19      	ldr	r2, [pc, #100]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d016      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fd fc84 	bl	80019f8 <HAL_GetTick>
 80040f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f2:	e00b      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f4:	f7fd fc80 	bl	80019f8 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d902      	bls.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	74fb      	strb	r3, [r7, #19]
            break;
 800410a:	e006      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800410c:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0ec      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800411a:	7cfb      	ldrb	r3, [r7, #19]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10b      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004120:	4907      	ldr	r1, [pc, #28]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004122:	4b07      	ldr	r3, [pc, #28]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004136:	e009      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	74bb      	strb	r3, [r7, #18]
 800413c:	e006      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800413e:	bf00      	nop
 8004140:	40021000 	.word	0x40021000
 8004144:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004148:	7cfb      	ldrb	r3, [r7, #19]
 800414a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800414c:	7c7b      	ldrb	r3, [r7, #17]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d105      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004152:	4a9e      	ldr	r2, [pc, #632]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004154:	4b9d      	ldr	r3, [pc, #628]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800415c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800416a:	4998      	ldr	r1, [pc, #608]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800416c:	4b97      	ldr	r3, [pc, #604]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004172:	f023 0203 	bic.w	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800418c:	498f      	ldr	r1, [pc, #572]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800418e:	4b8f      	ldr	r3, [pc, #572]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004194:	f023 020c 	bic.w	r2, r3, #12
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041ae:	4987      	ldr	r1, [pc, #540]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80041b0:	4b86      	ldr	r3, [pc, #536]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041d0:	497e      	ldr	r1, [pc, #504]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80041d2:	4b7e      	ldr	r3, [pc, #504]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041f2:	4976      	ldr	r1, [pc, #472]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80041f4:	4b75      	ldr	r3, [pc, #468]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004214:	496d      	ldr	r1, [pc, #436]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004216:	4b6d      	ldr	r3, [pc, #436]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004236:	4965      	ldr	r1, [pc, #404]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004238:	4b64      	ldr	r3, [pc, #400]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004258:	495c      	ldr	r1, [pc, #368]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800425a:	4b5c      	ldr	r3, [pc, #368]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800427a:	4954      	ldr	r1, [pc, #336]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800427c:	4b53      	ldr	r3, [pc, #332]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800429c:	494b      	ldr	r1, [pc, #300]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800429e:	4b4b      	ldr	r3, [pc, #300]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042be:	4943      	ldr	r1, [pc, #268]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80042c0:	4b42      	ldr	r3, [pc, #264]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80042c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042c6:	f023 0203 	bic.w	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d028      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042e0:	493a      	ldr	r1, [pc, #232]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80042e2:	4b3a      	ldr	r3, [pc, #232]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042fe:	d106      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004300:	4a32      	ldr	r2, [pc, #200]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004302:	4b32      	ldr	r3, [pc, #200]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800430a:	60d3      	str	r3, [r2, #12]
 800430c:	e011      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004312:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004316:	d10c      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	2101      	movs	r1, #1
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f8a4 	bl	800446c <RCCEx_PLLSAI1_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004328:	7cfb      	ldrb	r3, [r7, #19]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 800432e:	7cfb      	ldrb	r3, [r7, #19]
 8004330:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d028      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800433e:	4923      	ldr	r1, [pc, #140]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004340:	4b22      	ldr	r3, [pc, #136]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800435c:	d106      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800435e:	4a1b      	ldr	r2, [pc, #108]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004360:	4b1a      	ldr	r3, [pc, #104]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004368:	60d3      	str	r3, [r2, #12]
 800436a:	e011      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004374:	d10c      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3304      	adds	r3, #4
 800437a:	2101      	movs	r1, #1
 800437c:	4618      	mov	r0, r3
 800437e:	f000 f875 	bl	800446c <RCCEx_PLLSAI1_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004386:	7cfb      	ldrb	r3, [r7, #19]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d02b      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800439c:	490b      	ldr	r1, [pc, #44]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800439e:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80043a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043ba:	d109      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043bc:	4a03      	ldr	r2, [pc, #12]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80043be:	4b03      	ldr	r3, [pc, #12]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043c6:	60d3      	str	r3, [r2, #12]
 80043c8:	e014      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043d8:	d10c      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3304      	adds	r3, #4
 80043de:	2101      	movs	r1, #1
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 f843 	bl	800446c <RCCEx_PLLSAI1_Config>
 80043e6:	4603      	mov	r3, r0
 80043e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ea:	7cfb      	ldrb	r3, [r7, #19]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 80043f0:	7cfb      	ldrb	r3, [r7, #19]
 80043f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01c      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004400:	4919      	ldr	r1, [pc, #100]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004402:	4b19      	ldr	r3, [pc, #100]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004408:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800441e:	d10c      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3304      	adds	r3, #4
 8004424:	2102      	movs	r1, #2
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f820 	bl	800446c <RCCEx_PLLSAI1_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004430:	7cfb      	ldrb	r3, [r7, #19]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 8004436:	7cfb      	ldrb	r3, [r7, #19]
 8004438:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004446:	4908      	ldr	r1, [pc, #32]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004448:	4b07      	ldr	r3, [pc, #28]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800445c:	7cbb      	ldrb	r3, [r7, #18]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3718      	adds	r7, #24
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40021000 	.word	0x40021000

0800446c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800447a:	4b73      	ldr	r3, [pc, #460]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d018      	beq.n	80044b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004486:	4b70      	ldr	r3, [pc, #448]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f003 0203 	and.w	r2, r3, #3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d10d      	bne.n	80044b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
       ||
 800449a:	2b00      	cmp	r3, #0
 800449c:	d009      	beq.n	80044b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800449e:	4b6a      	ldr	r3, [pc, #424]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	091b      	lsrs	r3, r3, #4
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
       ||
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d044      	beq.n	800453c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	73fb      	strb	r3, [r7, #15]
 80044b6:	e041      	b.n	800453c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d00c      	beq.n	80044da <RCCEx_PLLSAI1_Config+0x6e>
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d013      	beq.n	80044ec <RCCEx_PLLSAI1_Config+0x80>
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d120      	bne.n	800450a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044c8:	4b5f      	ldr	r3, [pc, #380]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d11d      	bne.n	8004510 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d8:	e01a      	b.n	8004510 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044da:	4b5b      	ldr	r3, [pc, #364]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d116      	bne.n	8004514 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ea:	e013      	b.n	8004514 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044ec:	4b56      	ldr	r3, [pc, #344]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10f      	bne.n	8004518 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044f8:	4b53      	ldr	r3, [pc, #332]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d109      	bne.n	8004518 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004508:	e006      	b.n	8004518 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	73fb      	strb	r3, [r7, #15]
      break;
 800450e:	e004      	b.n	800451a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004510:	bf00      	nop
 8004512:	e002      	b.n	800451a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004514:	bf00      	nop
 8004516:	e000      	b.n	800451a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004518:	bf00      	nop
    }

    if(status == HAL_OK)
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10d      	bne.n	800453c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004520:	4849      	ldr	r0, [pc, #292]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004522:	4b49      	ldr	r3, [pc, #292]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6819      	ldr	r1, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	3b01      	subs	r3, #1
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	430b      	orrs	r3, r1
 8004538:	4313      	orrs	r3, r2
 800453a:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d17c      	bne.n	800463c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004542:	4a41      	ldr	r2, [pc, #260]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004544:	4b40      	ldr	r3, [pc, #256]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800454c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800454e:	f7fd fa53 	bl	80019f8 <HAL_GetTick>
 8004552:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004554:	e009      	b.n	800456a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004556:	f7fd fa4f 	bl	80019f8 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d902      	bls.n	800456a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	73fb      	strb	r3, [r7, #15]
        break;
 8004568:	e005      	b.n	8004576 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800456a:	4b37      	ldr	r3, [pc, #220]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1ef      	bne.n	8004556 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d15f      	bne.n	800463c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d110      	bne.n	80045a4 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004582:	4831      	ldr	r0, [pc, #196]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004584:	4b30      	ldr	r3, [pc, #192]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800458c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6892      	ldr	r2, [r2, #8]
 8004594:	0211      	lsls	r1, r2, #8
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	68d2      	ldr	r2, [r2, #12]
 800459a:	06d2      	lsls	r2, r2, #27
 800459c:	430a      	orrs	r2, r1
 800459e:	4313      	orrs	r3, r2
 80045a0:	6103      	str	r3, [r0, #16]
 80045a2:	e027      	b.n	80045f4 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d112      	bne.n	80045d0 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045aa:	4827      	ldr	r0, [pc, #156]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045ac:	4b26      	ldr	r3, [pc, #152]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6892      	ldr	r2, [r2, #8]
 80045bc:	0211      	lsls	r1, r2, #8
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6912      	ldr	r2, [r2, #16]
 80045c2:	0852      	lsrs	r2, r2, #1
 80045c4:	3a01      	subs	r2, #1
 80045c6:	0552      	lsls	r2, r2, #21
 80045c8:	430a      	orrs	r2, r1
 80045ca:	4313      	orrs	r3, r2
 80045cc:	6103      	str	r3, [r0, #16]
 80045ce:	e011      	b.n	80045f4 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045d0:	481d      	ldr	r0, [pc, #116]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045d2:	4b1d      	ldr	r3, [pc, #116]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6892      	ldr	r2, [r2, #8]
 80045e2:	0211      	lsls	r1, r2, #8
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6952      	ldr	r2, [r2, #20]
 80045e8:	0852      	lsrs	r2, r2, #1
 80045ea:	3a01      	subs	r2, #1
 80045ec:	0652      	lsls	r2, r2, #25
 80045ee:	430a      	orrs	r2, r1
 80045f0:	4313      	orrs	r3, r2
 80045f2:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045f4:	4a14      	ldr	r2, [pc, #80]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045f6:	4b14      	ldr	r3, [pc, #80]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004600:	f7fd f9fa 	bl	80019f8 <HAL_GetTick>
 8004604:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004606:	e009      	b.n	800461c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004608:	f7fd f9f6 	bl	80019f8 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d902      	bls.n	800461c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	73fb      	strb	r3, [r7, #15]
          break;
 800461a:	e005      	b.n	8004628 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800461c:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0ef      	beq.n	8004608 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800462e:	4906      	ldr	r1, [pc, #24]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	4313      	orrs	r3, r2
 800463a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800463c:	7bfb      	ldrb	r3, [r7, #15]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000

0800464c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e01d      	b.n	800469a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f006 fa04 	bl	800aa80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3304      	adds	r3, #4
 8004688:	4619      	mov	r1, r3
 800468a:	4610      	mov	r0, r2
 800468c:	f000 fc26 	bl	8004edc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e01d      	b.n	80046f0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d106      	bne.n	80046ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f006 f919 	bl	800a900 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2202      	movs	r2, #2
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3304      	adds	r3, #4
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f000 fbfb 	bl	8004edc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e01d      	b.n	8004746 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f006 f92c 	bl	800a97c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3304      	adds	r3, #4
 8004734:	4619      	mov	r1, r3
 8004736:	4610      	mov	r0, r2
 8004738:	f000 fbd0 	bl	8004edc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b02      	cmp	r3, #2
 8004762:	d122      	bne.n	80047aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b02      	cmp	r3, #2
 8004770:	d11b      	bne.n	80047aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f06f 0202 	mvn.w	r2, #2
 800477a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fb84 	bl	8004e9e <HAL_TIM_IC_CaptureCallback>
 8004796:	e005      	b.n	80047a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 fb76 	bl	8004e8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fb87 	bl	8004eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d122      	bne.n	80047fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d11b      	bne.n	80047fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f06f 0204 	mvn.w	r2, #4
 80047ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 fb5a 	bl	8004e9e <HAL_TIM_IC_CaptureCallback>
 80047ea:	e005      	b.n	80047f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fb4c 	bl	8004e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fb5d 	bl	8004eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b08      	cmp	r3, #8
 800480a:	d122      	bne.n	8004852 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b08      	cmp	r3, #8
 8004818:	d11b      	bne.n	8004852 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f06f 0208 	mvn.w	r2, #8
 8004822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2204      	movs	r2, #4
 8004828:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fb30 	bl	8004e9e <HAL_TIM_IC_CaptureCallback>
 800483e:	e005      	b.n	800484c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fb22 	bl	8004e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fb33 	bl	8004eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b10      	cmp	r3, #16
 800485e:	d122      	bne.n	80048a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	2b10      	cmp	r3, #16
 800486c:	d11b      	bne.n	80048a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f06f 0210 	mvn.w	r2, #16
 8004876:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2208      	movs	r2, #8
 800487c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 fb06 	bl	8004e9e <HAL_TIM_IC_CaptureCallback>
 8004892:	e005      	b.n	80048a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 faf8 	bl	8004e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fb09 	bl	8004eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d10e      	bne.n	80048d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d107      	bne.n	80048d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f06f 0201 	mvn.w	r2, #1
 80048ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7fd f81d 	bl	800190c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048dc:	2b80      	cmp	r3, #128	; 0x80
 80048de:	d10e      	bne.n	80048fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ea:	2b80      	cmp	r3, #128	; 0x80
 80048ec:	d107      	bne.n	80048fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f001 f85f 	bl	80059bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800490c:	d10e      	bne.n	800492c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004918:	2b80      	cmp	r3, #128	; 0x80
 800491a:	d107      	bne.n	800492c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f001 f852 	bl	80059d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004936:	2b40      	cmp	r3, #64	; 0x40
 8004938:	d10e      	bne.n	8004958 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004944:	2b40      	cmp	r3, #64	; 0x40
 8004946:	d107      	bne.n	8004958 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fab7 	bl	8004ec6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b20      	cmp	r3, #32
 8004964:	d10e      	bne.n	8004984 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b20      	cmp	r3, #32
 8004972:	d107      	bne.n	8004984 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0220 	mvn.w	r2, #32
 800497c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f001 f812 	bl	80059a8 <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004984:	bf00      	nop
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e08a      	b.n	8004abc <HAL_TIM_IC_ConfigChannel+0x130>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2202      	movs	r2, #2
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d11b      	bne.n	80049f4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	6819      	ldr	r1, [r3, #0]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f000 fd72 	bl	80054b4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	6812      	ldr	r2, [r2, #0]
 80049d8:	6992      	ldr	r2, [r2, #24]
 80049da:	f022 020c 	bic.w	r2, r2, #12
 80049de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	6991      	ldr	r1, [r2, #24]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	6892      	ldr	r2, [r2, #8]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	619a      	str	r2, [r3, #24]
 80049f2:	e05a      	b.n	8004aaa <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d11c      	bne.n	8004a34 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	6819      	ldr	r1, [r3, #0]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f000 fdde 	bl	80055ca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	6992      	ldr	r2, [r2, #24]
 8004a18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a1c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	6812      	ldr	r2, [r2, #0]
 8004a26:	6991      	ldr	r1, [r2, #24]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	6892      	ldr	r2, [r2, #8]
 8004a2c:	0212      	lsls	r2, r2, #8
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	619a      	str	r2, [r3, #24]
 8004a32:	e03a      	b.n	8004aaa <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d11b      	bne.n	8004a72 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	6819      	ldr	r1, [r3, #0]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f000 fe2b 	bl	80056a4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	69d2      	ldr	r2, [r2, #28]
 8004a58:	f022 020c 	bic.w	r2, r2, #12
 8004a5c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	69d1      	ldr	r1, [r2, #28]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	6892      	ldr	r2, [r2, #8]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	61da      	str	r2, [r3, #28]
 8004a70:	e01b      	b.n	8004aaa <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6819      	ldr	r1, [r3, #0]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f000 fe4b 	bl	800571c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	69d2      	ldr	r2, [r2, #28]
 8004a90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a94:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	69d1      	ldr	r1, [r2, #28]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	6892      	ldr	r2, [r2, #8]
 8004aa4:	0212      	lsls	r2, r2, #8
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d101      	bne.n	8004ade <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e105      	b.n	8004cea <HAL_TIM_PWM_ConfigChannel+0x226>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b14      	cmp	r3, #20
 8004af2:	f200 80f0 	bhi.w	8004cd6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004af6:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b51 	.word	0x08004b51
 8004b00:	08004cd7 	.word	0x08004cd7
 8004b04:	08004cd7 	.word	0x08004cd7
 8004b08:	08004cd7 	.word	0x08004cd7
 8004b0c:	08004b91 	.word	0x08004b91
 8004b10:	08004cd7 	.word	0x08004cd7
 8004b14:	08004cd7 	.word	0x08004cd7
 8004b18:	08004cd7 	.word	0x08004cd7
 8004b1c:	08004bd3 	.word	0x08004bd3
 8004b20:	08004cd7 	.word	0x08004cd7
 8004b24:	08004cd7 	.word	0x08004cd7
 8004b28:	08004cd7 	.word	0x08004cd7
 8004b2c:	08004c13 	.word	0x08004c13
 8004b30:	08004cd7 	.word	0x08004cd7
 8004b34:	08004cd7 	.word	0x08004cd7
 8004b38:	08004cd7 	.word	0x08004cd7
 8004b3c:	08004c55 	.word	0x08004c55
 8004b40:	08004cd7 	.word	0x08004cd7
 8004b44:	08004cd7 	.word	0x08004cd7
 8004b48:	08004cd7 	.word	0x08004cd7
 8004b4c:	08004c95 	.word	0x08004c95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fa2e 	bl	8004fb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	6812      	ldr	r2, [r2, #0]
 8004b64:	6992      	ldr	r2, [r2, #24]
 8004b66:	f042 0208 	orr.w	r2, r2, #8
 8004b6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	6992      	ldr	r2, [r2, #24]
 8004b76:	f022 0204 	bic.w	r2, r2, #4
 8004b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	6812      	ldr	r2, [r2, #0]
 8004b84:	6991      	ldr	r1, [r2, #24]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	6912      	ldr	r2, [r2, #16]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	619a      	str	r2, [r3, #24]
      break;
 8004b8e:	e0a3      	b.n	8004cd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fa8a 	bl	80050b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	6992      	ldr	r2, [r2, #24]
 8004ba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	6992      	ldr	r2, [r2, #24]
 8004bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	6991      	ldr	r1, [r2, #24]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	6912      	ldr	r2, [r2, #16]
 8004bca:	0212      	lsls	r2, r2, #8
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	619a      	str	r2, [r3, #24]
      break;
 8004bd0:	e082      	b.n	8004cd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68b9      	ldr	r1, [r7, #8]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fae3 	bl	80051a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	6812      	ldr	r2, [r2, #0]
 8004be6:	69d2      	ldr	r2, [r2, #28]
 8004be8:	f042 0208 	orr.w	r2, r2, #8
 8004bec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	69d2      	ldr	r2, [r2, #28]
 8004bf8:	f022 0204 	bic.w	r2, r2, #4
 8004bfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	6812      	ldr	r2, [r2, #0]
 8004c06:	69d1      	ldr	r1, [r2, #28]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	6912      	ldr	r2, [r2, #16]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	61da      	str	r2, [r3, #28]
      break;
 8004c10:	e062      	b.n	8004cd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fb3b 	bl	8005294 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	6812      	ldr	r2, [r2, #0]
 8004c26:	69d2      	ldr	r2, [r2, #28]
 8004c28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	6812      	ldr	r2, [r2, #0]
 8004c36:	69d2      	ldr	r2, [r2, #28]
 8004c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	6812      	ldr	r2, [r2, #0]
 8004c46:	69d1      	ldr	r1, [r2, #28]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	6912      	ldr	r2, [r2, #16]
 8004c4c:	0212      	lsls	r2, r2, #8
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	61da      	str	r2, [r3, #28]
      break;
 8004c52:	e041      	b.n	8004cd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68b9      	ldr	r1, [r7, #8]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fb78 	bl	8005350 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	6812      	ldr	r2, [r2, #0]
 8004c68:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004c6a:	f042 0208 	orr.w	r2, r2, #8
 8004c6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004c7a:	f022 0204 	bic.w	r2, r2, #4
 8004c7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	6912      	ldr	r2, [r2, #16]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c92:	e021      	b.n	8004cd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fbb0 	bl	8005400 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	6812      	ldr	r2, [r2, #0]
 8004ca8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	6812      	ldr	r2, [r2, #0]
 8004cb8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	6912      	ldr	r2, [r2, #16]
 8004cce:	0212      	lsls	r2, r2, #8
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cd4:	e000      	b.n	8004cd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8004cd6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop

08004cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_TIM_ConfigClockSource+0x18>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e0ba      	b.n	8004e82 <HAL_TIM_ConfigClockSource+0x18e>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b40      	cmp	r3, #64	; 0x40
 8004d46:	d07a      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0x14a>
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	d80d      	bhi.n	8004d68 <HAL_TIM_ConfigClockSource+0x74>
 8004d4c:	2b10      	cmp	r3, #16
 8004d4e:	f000 8086 	beq.w	8004e5e <HAL_TIM_ConfigClockSource+0x16a>
 8004d52:	2b10      	cmp	r3, #16
 8004d54:	d803      	bhi.n	8004d5e <HAL_TIM_ConfigClockSource+0x6a>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 8081 	beq.w	8004e5e <HAL_TIM_ConfigClockSource+0x16a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004d5c:	e088      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	d07d      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x16a>
 8004d62:	2b30      	cmp	r3, #48	; 0x30
 8004d64:	d07b      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x16a>
      break;
 8004d66:	e083      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 8004d68:	2b70      	cmp	r3, #112	; 0x70
 8004d6a:	d018      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0xaa>
 8004d6c:	2b70      	cmp	r3, #112	; 0x70
 8004d6e:	d804      	bhi.n	8004d7a <HAL_TIM_ConfigClockSource+0x86>
 8004d70:	2b50      	cmp	r3, #80	; 0x50
 8004d72:	d044      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x10a>
 8004d74:	2b60      	cmp	r3, #96	; 0x60
 8004d76:	d052      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0x12a>
      break;
 8004d78:	e07a      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 8004d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7e:	d003      	beq.n	8004d88 <HAL_TIM_ConfigClockSource+0x94>
 8004d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d84:	d028      	beq.n	8004dd8 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8004d86:	e073      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x17c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d96:	f023 0307 	bic.w	r3, r3, #7
 8004d9a:	6093      	str	r3, [r2, #8]
      break;
 8004d9c:	e068      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	6899      	ldr	r1, [r3, #8]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f000 fd0d 	bl	80057cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dc4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dcc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	609a      	str	r2, [r3, #8]
      break;
 8004dd6:	e04b      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	6899      	ldr	r1, [r3, #8]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f000 fcf0 	bl	80057cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	6892      	ldr	r2, [r2, #8]
 8004df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dfa:	609a      	str	r2, [r3, #8]
      break;
 8004dfc:	e038      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6859      	ldr	r1, [r3, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f000 fbae 	bl	800556c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2150      	movs	r1, #80	; 0x50
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fcbd 	bl	8005796 <TIM_ITRx_SetConfig>
      break;
 8004e1c:	e028      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	6859      	ldr	r1, [r3, #4]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f000 fc0a 	bl	8005644 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2160      	movs	r1, #96	; 0x60
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fcad 	bl	8005796 <TIM_ITRx_SetConfig>
      break;
 8004e3c:	e018      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6859      	ldr	r1, [r3, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f000 fb8e 	bl	800556c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2140      	movs	r1, #64	; 0x40
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fc9d 	bl	8005796 <TIM_ITRx_SetConfig>
      break;
 8004e5c:	e008      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4619      	mov	r1, r3
 8004e68:	4610      	mov	r0, r2
 8004e6a:	f000 fc94 	bl	8005796 <TIM_ITRx_SetConfig>
      break;
 8004e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
	...

08004edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a2e      	ldr	r2, [pc, #184]	; (8004fa8 <TIM_Base_SetConfig+0xcc>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d007      	beq.n	8004f04 <TIM_Base_SetConfig+0x28>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efa:	d003      	beq.n	8004f04 <TIM_Base_SetConfig+0x28>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a2b      	ldr	r2, [pc, #172]	; (8004fac <TIM_Base_SetConfig+0xd0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d108      	bne.n	8004f16 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a23      	ldr	r2, [pc, #140]	; (8004fa8 <TIM_Base_SetConfig+0xcc>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00f      	beq.n	8004f3e <TIM_Base_SetConfig+0x62>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f24:	d00b      	beq.n	8004f3e <TIM_Base_SetConfig+0x62>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a20      	ldr	r2, [pc, #128]	; (8004fac <TIM_Base_SetConfig+0xd0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d007      	beq.n	8004f3e <TIM_Base_SetConfig+0x62>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a1f      	ldr	r2, [pc, #124]	; (8004fb0 <TIM_Base_SetConfig+0xd4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d003      	beq.n	8004f3e <TIM_Base_SetConfig+0x62>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a1e      	ldr	r2, [pc, #120]	; (8004fb4 <TIM_Base_SetConfig+0xd8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d108      	bne.n	8004f50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a0c      	ldr	r2, [pc, #48]	; (8004fa8 <TIM_Base_SetConfig+0xcc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d007      	beq.n	8004f8c <TIM_Base_SetConfig+0xb0>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a0c      	ldr	r2, [pc, #48]	; (8004fb0 <TIM_Base_SetConfig+0xd4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_Base_SetConfig+0xb0>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a0b      	ldr	r2, [pc, #44]	; (8004fb4 <TIM_Base_SetConfig+0xd8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d103      	bne.n	8004f94 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	615a      	str	r2, [r3, #20]
}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40000400 	.word	0x40000400
 8004fb0:	40014000 	.word	0x40014000
 8004fb4:	40014400 	.word	0x40014400

08004fb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f023 0201 	bic.w	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0303 	bic.w	r3, r3, #3
 8004ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f023 0302 	bic.w	r3, r3, #2
 8005004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a24      	ldr	r2, [pc, #144]	; (80050a4 <TIM_OC1_SetConfig+0xec>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d007      	beq.n	8005028 <TIM_OC1_SetConfig+0x70>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a23      	ldr	r2, [pc, #140]	; (80050a8 <TIM_OC1_SetConfig+0xf0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <TIM_OC1_SetConfig+0x70>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a22      	ldr	r2, [pc, #136]	; (80050ac <TIM_OC1_SetConfig+0xf4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d10c      	bne.n	8005042 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f023 0308 	bic.w	r3, r3, #8
 800502e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f023 0304 	bic.w	r3, r3, #4
 8005040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a17      	ldr	r2, [pc, #92]	; (80050a4 <TIM_OC1_SetConfig+0xec>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d007      	beq.n	800505a <TIM_OC1_SetConfig+0xa2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a16      	ldr	r2, [pc, #88]	; (80050a8 <TIM_OC1_SetConfig+0xf0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d003      	beq.n	800505a <TIM_OC1_SetConfig+0xa2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a15      	ldr	r2, [pc, #84]	; (80050ac <TIM_OC1_SetConfig+0xf4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d111      	bne.n	800507e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	621a      	str	r2, [r3, #32]
}
 8005098:	bf00      	nop
 800509a:	371c      	adds	r7, #28
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40012c00 	.word	0x40012c00
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40014400 	.word	0x40014400

080050b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f023 0210 	bic.w	r2, r3, #16
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f023 0320 	bic.w	r3, r3, #32
 80050fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a22      	ldr	r2, [pc, #136]	; (8005198 <TIM_OC2_SetConfig+0xe8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d10d      	bne.n	8005130 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800511a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800512e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a19      	ldr	r2, [pc, #100]	; (8005198 <TIM_OC2_SetConfig+0xe8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d007      	beq.n	8005148 <TIM_OC2_SetConfig+0x98>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a18      	ldr	r2, [pc, #96]	; (800519c <TIM_OC2_SetConfig+0xec>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_OC2_SetConfig+0x98>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a17      	ldr	r2, [pc, #92]	; (80051a0 <TIM_OC2_SetConfig+0xf0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d113      	bne.n	8005170 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800514e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005156:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40012c00 	.word	0x40012c00
 800519c:	40014000 	.word	0x40014000
 80051a0:	40014400 	.word	0x40014400

080051a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0303 	bic.w	r3, r3, #3
 80051de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a21      	ldr	r2, [pc, #132]	; (8005288 <TIM_OC3_SetConfig+0xe4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d10d      	bne.n	8005222 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800520c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a18      	ldr	r2, [pc, #96]	; (8005288 <TIM_OC3_SetConfig+0xe4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d007      	beq.n	800523a <TIM_OC3_SetConfig+0x96>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a17      	ldr	r2, [pc, #92]	; (800528c <TIM_OC3_SetConfig+0xe8>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d003      	beq.n	800523a <TIM_OC3_SetConfig+0x96>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a16      	ldr	r2, [pc, #88]	; (8005290 <TIM_OC3_SetConfig+0xec>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d113      	bne.n	8005262 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4313      	orrs	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	621a      	str	r2, [r3, #32]
}
 800527c:	bf00      	nop
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	40012c00 	.word	0x40012c00
 800528c:	40014000 	.word	0x40014000
 8005290:	40014400 	.word	0x40014400

08005294 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	021b      	lsls	r3, r3, #8
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	4313      	orrs	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	031b      	lsls	r3, r3, #12
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a14      	ldr	r2, [pc, #80]	; (8005344 <TIM_OC4_SetConfig+0xb0>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d007      	beq.n	8005308 <TIM_OC4_SetConfig+0x74>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a13      	ldr	r2, [pc, #76]	; (8005348 <TIM_OC4_SetConfig+0xb4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d003      	beq.n	8005308 <TIM_OC4_SetConfig+0x74>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a12      	ldr	r2, [pc, #72]	; (800534c <TIM_OC4_SetConfig+0xb8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d109      	bne.n	800531c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800530e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	019b      	lsls	r3, r3, #6
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	621a      	str	r2, [r3, #32]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40012c00 	.word	0x40012c00
 8005348:	40014000 	.word	0x40014000
 800534c:	40014400 	.word	0x40014400

08005350 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800537e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005394:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	041b      	lsls	r3, r3, #16
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a13      	ldr	r2, [pc, #76]	; (80053f4 <TIM_OC5_SetConfig+0xa4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d007      	beq.n	80053ba <TIM_OC5_SetConfig+0x6a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a12      	ldr	r2, [pc, #72]	; (80053f8 <TIM_OC5_SetConfig+0xa8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <TIM_OC5_SetConfig+0x6a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a11      	ldr	r2, [pc, #68]	; (80053fc <TIM_OC5_SetConfig+0xac>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d109      	bne.n	80053ce <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	621a      	str	r2, [r3, #32]
}
 80053e8:	bf00      	nop
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	40012c00 	.word	0x40012c00
 80053f8:	40014000 	.word	0x40014000
 80053fc:	40014400 	.word	0x40014400

08005400 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800542e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	051b      	lsls	r3, r3, #20
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a14      	ldr	r2, [pc, #80]	; (80054a8 <TIM_OC6_SetConfig+0xa8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d007      	beq.n	800546c <TIM_OC6_SetConfig+0x6c>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a13      	ldr	r2, [pc, #76]	; (80054ac <TIM_OC6_SetConfig+0xac>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d003      	beq.n	800546c <TIM_OC6_SetConfig+0x6c>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a12      	ldr	r2, [pc, #72]	; (80054b0 <TIM_OC6_SetConfig+0xb0>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d109      	bne.n	8005480 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005472:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	029b      	lsls	r3, r3, #10
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4313      	orrs	r3, r2
 800547e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	621a      	str	r2, [r3, #32]
}
 800549a:	bf00      	nop
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40012c00 	.word	0x40012c00
 80054ac:	40014000 	.word	0x40014000
 80054b0:	40014400 	.word	0x40014400

080054b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f023 0201 	bic.w	r2, r3, #1
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4a20      	ldr	r2, [pc, #128]	; (8005560 <TIM_TI1_SetConfig+0xac>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00b      	beq.n	80054fa <TIM_TI1_SetConfig+0x46>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e8:	d007      	beq.n	80054fa <TIM_TI1_SetConfig+0x46>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4a1d      	ldr	r2, [pc, #116]	; (8005564 <TIM_TI1_SetConfig+0xb0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d003      	beq.n	80054fa <TIM_TI1_SetConfig+0x46>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4a1c      	ldr	r2, [pc, #112]	; (8005568 <TIM_TI1_SetConfig+0xb4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d101      	bne.n	80054fe <TIM_TI1_SetConfig+0x4a>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <TIM_TI1_SetConfig+0x4c>
 80054fe:	2300      	movs	r3, #0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d008      	beq.n	8005516 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f023 0303 	bic.w	r3, r3, #3
 800550a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	e003      	b.n	800551e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f043 0301 	orr.w	r3, r3, #1
 800551c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005524:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	b2db      	uxtb	r3, r3
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f023 030a 	bic.w	r3, r3, #10
 8005538:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f003 030a 	and.w	r3, r3, #10
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	4313      	orrs	r3, r2
 8005544:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	621a      	str	r2, [r3, #32]
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40012c00 	.word	0x40012c00
 8005564:	40000400 	.word	0x40000400
 8005568:	40014000 	.word	0x40014000

0800556c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f023 0201 	bic.w	r2, r3, #1
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f023 030a 	bic.w	r3, r3, #10
 80055a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	621a      	str	r2, [r3, #32]
}
 80055be:	bf00      	nop
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b087      	sub	sp, #28
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	607a      	str	r2, [r7, #4]
 80055d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f023 0210 	bic.w	r2, r3, #16
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	021b      	lsls	r3, r3, #8
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005608:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	031b      	lsls	r3, r3, #12
 800560e:	b29b      	uxth	r3, r3
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800561c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	621a      	str	r2, [r3, #32]
}
 8005638:	bf00      	nop
 800563a:	371c      	adds	r7, #28
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	f023 0210 	bic.w	r2, r3, #16
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800566e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	031b      	lsls	r3, r3, #12
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005680:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	011b      	lsls	r3, r3, #4
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	621a      	str	r2, [r3, #32]
}
 8005698:	bf00      	nop
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f023 0303 	bic.w	r3, r3, #3
 80056d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80056f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	621a      	str	r2, [r3, #32]
}
 8005710:	bf00      	nop
 8005712:	371c      	adds	r7, #28
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005748:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	021b      	lsls	r3, r3, #8
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800575a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	031b      	lsls	r3, r3, #12
 8005760:	b29b      	uxth	r3, r3
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800576e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	031b      	lsls	r3, r3, #12
 8005774:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	621a      	str	r2, [r3, #32]
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005796:	b480      	push	{r7}
 8005798:	b085      	sub	sp, #20
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	f043 0307 	orr.w	r3, r3, #7
 80057b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	609a      	str	r2, [r3, #8]
}
 80057c0:	bf00      	nop
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	021a      	lsls	r2, r3, #8
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	609a      	str	r2, [r3, #8]
}
 8005800:	bf00      	nop
 8005802:	371c      	adds	r7, #28
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005820:	2302      	movs	r3, #2
 8005822:	e040      	b.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a1a      	ldr	r2, [pc, #104]	; (80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d108      	bne.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005854:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4313      	orrs	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005866:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005878:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	4313      	orrs	r3, r2
 8005882:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40012c00 	.word	0x40012c00

080058b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e060      	b.n	8005996 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4313      	orrs	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	041b      	lsls	r3, r3, #16
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a14      	ldr	r2, [pc, #80]	; (80059a4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d115      	bne.n	8005984 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	051b      	lsls	r3, r3, #20
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40012c00 	.word	0x40012c00

080059a8 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e043      	b.n	8005a7e <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f005 f9dc 	bl	800adc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2224      	movs	r2, #36	; 0x24
 8005a14:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	6812      	ldr	r2, [r2, #0]
 8005a22:	f022 0201 	bic.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f82d 	bl	8005a88 <UART_SetConfig>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d101      	bne.n	8005a38 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e022      	b.n	8005a7e <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fb31 	bl	80060a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6812      	ldr	r2, [r2, #0]
 8005a4e:	6852      	ldr	r2, [r2, #4]
 8005a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	6892      	ldr	r2, [r2, #8]
 8005a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a64:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6812      	ldr	r2, [r2, #0]
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	f042 0201 	orr.w	r2, r2, #1
 8005a74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fbb8 	bl	80061ec <UART_CheckIdleState>
 8005a7c:	4603      	mov	r3, r0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005a8c:	b088      	sub	sp, #32
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005a96:	2310      	movs	r3, #16
 8005a98:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6819      	ldr	r1, [r3, #0]
 8005acc:	4bad      	ldr	r3, [pc, #692]	; (8005d84 <UART_SetConfig+0x2fc>)
 8005ace:	400b      	ands	r3, r1
 8005ad0:	69f9      	ldr	r1, [r7, #28]
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6812      	ldr	r2, [r2, #0]
 8005ade:	6852      	ldr	r2, [r2, #4]
 8005ae0:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	68d2      	ldr	r2, [r2, #12]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4aa4      	ldr	r2, [pc, #656]	; (8005d88 <UART_SetConfig+0x300>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d004      	beq.n	8005b06 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	6892      	ldr	r2, [r2, #8]
 8005b10:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8005b14:	69fa      	ldr	r2, [r7, #28]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a9b      	ldr	r2, [pc, #620]	; (8005d8c <UART_SetConfig+0x304>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d121      	bne.n	8005b68 <UART_SetConfig+0xe0>
 8005b24:	4b9a      	ldr	r3, [pc, #616]	; (8005d90 <UART_SetConfig+0x308>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d816      	bhi.n	8005b60 <UART_SetConfig+0xd8>
 8005b32:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <UART_SetConfig+0xb0>)
 8005b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b38:	08005b49 	.word	0x08005b49
 8005b3c:	08005b55 	.word	0x08005b55
 8005b40:	08005b4f 	.word	0x08005b4f
 8005b44:	08005b5b 	.word	0x08005b5b
 8005b48:	2301      	movs	r3, #1
 8005b4a:	76fb      	strb	r3, [r7, #27]
 8005b4c:	e0ba      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	76fb      	strb	r3, [r7, #27]
 8005b52:	e0b7      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005b54:	2304      	movs	r3, #4
 8005b56:	76fb      	strb	r3, [r7, #27]
 8005b58:	e0b4      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005b5a:	2308      	movs	r3, #8
 8005b5c:	76fb      	strb	r3, [r7, #27]
 8005b5e:	e0b1      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005b60:	2310      	movs	r3, #16
 8005b62:	76fb      	strb	r3, [r7, #27]
 8005b64:	bf00      	nop
 8005b66:	e0ad      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a89      	ldr	r2, [pc, #548]	; (8005d94 <UART_SetConfig+0x30c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d134      	bne.n	8005bdc <UART_SetConfig+0x154>
 8005b72:	4b87      	ldr	r3, [pc, #540]	; (8005d90 <UART_SetConfig+0x308>)
 8005b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b78:	f003 030c 	and.w	r3, r3, #12
 8005b7c:	2b0c      	cmp	r3, #12
 8005b7e:	d829      	bhi.n	8005bd4 <UART_SetConfig+0x14c>
 8005b80:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <UART_SetConfig+0x100>)
 8005b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b86:	bf00      	nop
 8005b88:	08005bbd 	.word	0x08005bbd
 8005b8c:	08005bd5 	.word	0x08005bd5
 8005b90:	08005bd5 	.word	0x08005bd5
 8005b94:	08005bd5 	.word	0x08005bd5
 8005b98:	08005bc9 	.word	0x08005bc9
 8005b9c:	08005bd5 	.word	0x08005bd5
 8005ba0:	08005bd5 	.word	0x08005bd5
 8005ba4:	08005bd5 	.word	0x08005bd5
 8005ba8:	08005bc3 	.word	0x08005bc3
 8005bac:	08005bd5 	.word	0x08005bd5
 8005bb0:	08005bd5 	.word	0x08005bd5
 8005bb4:	08005bd5 	.word	0x08005bd5
 8005bb8:	08005bcf 	.word	0x08005bcf
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	76fb      	strb	r3, [r7, #27]
 8005bc0:	e080      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	76fb      	strb	r3, [r7, #27]
 8005bc6:	e07d      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005bc8:	2304      	movs	r3, #4
 8005bca:	76fb      	strb	r3, [r7, #27]
 8005bcc:	e07a      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005bce:	2308      	movs	r3, #8
 8005bd0:	76fb      	strb	r3, [r7, #27]
 8005bd2:	e077      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005bd4:	2310      	movs	r3, #16
 8005bd6:	76fb      	strb	r3, [r7, #27]
 8005bd8:	bf00      	nop
 8005bda:	e073      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a6d      	ldr	r2, [pc, #436]	; (8005d98 <UART_SetConfig+0x310>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d120      	bne.n	8005c28 <UART_SetConfig+0x1a0>
 8005be6:	4b6a      	ldr	r3, [pc, #424]	; (8005d90 <UART_SetConfig+0x308>)
 8005be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bf0:	2b10      	cmp	r3, #16
 8005bf2:	d00f      	beq.n	8005c14 <UART_SetConfig+0x18c>
 8005bf4:	2b10      	cmp	r3, #16
 8005bf6:	d802      	bhi.n	8005bfe <UART_SetConfig+0x176>
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d005      	beq.n	8005c08 <UART_SetConfig+0x180>
 8005bfc:	e010      	b.n	8005c20 <UART_SetConfig+0x198>
 8005bfe:	2b20      	cmp	r3, #32
 8005c00:	d005      	beq.n	8005c0e <UART_SetConfig+0x186>
 8005c02:	2b30      	cmp	r3, #48	; 0x30
 8005c04:	d009      	beq.n	8005c1a <UART_SetConfig+0x192>
 8005c06:	e00b      	b.n	8005c20 <UART_SetConfig+0x198>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	76fb      	strb	r3, [r7, #27]
 8005c0c:	e05a      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	76fb      	strb	r3, [r7, #27]
 8005c12:	e057      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005c14:	2304      	movs	r3, #4
 8005c16:	76fb      	strb	r3, [r7, #27]
 8005c18:	e054      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005c1a:	2308      	movs	r3, #8
 8005c1c:	76fb      	strb	r3, [r7, #27]
 8005c1e:	e051      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005c20:	2310      	movs	r3, #16
 8005c22:	76fb      	strb	r3, [r7, #27]
 8005c24:	bf00      	nop
 8005c26:	e04d      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a5b      	ldr	r2, [pc, #364]	; (8005d9c <UART_SetConfig+0x314>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d120      	bne.n	8005c74 <UART_SetConfig+0x1ec>
 8005c32:	4b57      	ldr	r3, [pc, #348]	; (8005d90 <UART_SetConfig+0x308>)
 8005c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c38:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c3c:	2b40      	cmp	r3, #64	; 0x40
 8005c3e:	d00f      	beq.n	8005c60 <UART_SetConfig+0x1d8>
 8005c40:	2b40      	cmp	r3, #64	; 0x40
 8005c42:	d802      	bhi.n	8005c4a <UART_SetConfig+0x1c2>
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d005      	beq.n	8005c54 <UART_SetConfig+0x1cc>
 8005c48:	e010      	b.n	8005c6c <UART_SetConfig+0x1e4>
 8005c4a:	2b80      	cmp	r3, #128	; 0x80
 8005c4c:	d005      	beq.n	8005c5a <UART_SetConfig+0x1d2>
 8005c4e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c50:	d009      	beq.n	8005c66 <UART_SetConfig+0x1de>
 8005c52:	e00b      	b.n	8005c6c <UART_SetConfig+0x1e4>
 8005c54:	2300      	movs	r3, #0
 8005c56:	76fb      	strb	r3, [r7, #27]
 8005c58:	e034      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	76fb      	strb	r3, [r7, #27]
 8005c5e:	e031      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005c60:	2304      	movs	r3, #4
 8005c62:	76fb      	strb	r3, [r7, #27]
 8005c64:	e02e      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005c66:	2308      	movs	r3, #8
 8005c68:	76fb      	strb	r3, [r7, #27]
 8005c6a:	e02b      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	76fb      	strb	r3, [r7, #27]
 8005c70:	bf00      	nop
 8005c72:	e027      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a43      	ldr	r2, [pc, #268]	; (8005d88 <UART_SetConfig+0x300>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d123      	bne.n	8005cc6 <UART_SetConfig+0x23e>
 8005c7e:	4b44      	ldr	r3, [pc, #272]	; (8005d90 <UART_SetConfig+0x308>)
 8005c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c8c:	d012      	beq.n	8005cb4 <UART_SetConfig+0x22c>
 8005c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c92:	d802      	bhi.n	8005c9a <UART_SetConfig+0x212>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d007      	beq.n	8005ca8 <UART_SetConfig+0x220>
 8005c98:	e012      	b.n	8005cc0 <UART_SetConfig+0x238>
 8005c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c9e:	d006      	beq.n	8005cae <UART_SetConfig+0x226>
 8005ca0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ca4:	d009      	beq.n	8005cba <UART_SetConfig+0x232>
 8005ca6:	e00b      	b.n	8005cc0 <UART_SetConfig+0x238>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	76fb      	strb	r3, [r7, #27]
 8005cac:	e00a      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	76fb      	strb	r3, [r7, #27]
 8005cb2:	e007      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005cb4:	2304      	movs	r3, #4
 8005cb6:	76fb      	strb	r3, [r7, #27]
 8005cb8:	e004      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005cba:	2308      	movs	r3, #8
 8005cbc:	76fb      	strb	r3, [r7, #27]
 8005cbe:	e001      	b.n	8005cc4 <UART_SetConfig+0x23c>
 8005cc0:	2310      	movs	r3, #16
 8005cc2:	76fb      	strb	r3, [r7, #27]
 8005cc4:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a2f      	ldr	r2, [pc, #188]	; (8005d88 <UART_SetConfig+0x300>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	f040 80ea 	bne.w	8005ea6 <UART_SetConfig+0x41e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cd2:	7efb      	ldrb	r3, [r7, #27]
 8005cd4:	2b08      	cmp	r3, #8
 8005cd6:	d824      	bhi.n	8005d22 <UART_SetConfig+0x29a>
 8005cd8:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <UART_SetConfig+0x258>)
 8005cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cde:	bf00      	nop
 8005ce0:	08005d05 	.word	0x08005d05
 8005ce4:	08005d23 	.word	0x08005d23
 8005ce8:	08005d0d 	.word	0x08005d0d
 8005cec:	08005d23 	.word	0x08005d23
 8005cf0:	08005d13 	.word	0x08005d13
 8005cf4:	08005d23 	.word	0x08005d23
 8005cf8:	08005d23 	.word	0x08005d23
 8005cfc:	08005d23 	.word	0x08005d23
 8005d00:	08005d1b 	.word	0x08005d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005d04:	f7fe f8bc 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 8005d08:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8005d0a:	e00d      	b.n	8005d28 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005d0c:	4b24      	ldr	r3, [pc, #144]	; (8005da0 <UART_SetConfig+0x318>)
 8005d0e:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8005d10:	e00a      	b.n	8005d28 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005d12:	f7fe f80d 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 8005d16:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8005d18:	e006      	b.n	8005d28 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d1e:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8005d20:	e002      	b.n	8005d28 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	74fb      	strb	r3, [r7, #19]
        break;
 8005d26:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 81ad 	beq.w	800608a <UART_SetConfig+0x602>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	4613      	mov	r3, r2
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	441a      	add	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d805      	bhi.n	8005d4c <UART_SetConfig+0x2c4>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d202      	bcs.n	8005d52 <UART_SetConfig+0x2ca>
      {
        ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	74fb      	strb	r3, [r7, #19]
 8005d50:	e19b      	b.n	800608a <UART_SetConfig+0x602>
      }
      else
      {
        switch (clocksource)
 8005d52:	7efb      	ldrb	r3, [r7, #27]
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	f200 8093 	bhi.w	8005e80 <UART_SetConfig+0x3f8>
 8005d5a:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <UART_SetConfig+0x2d8>)
 8005d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d60:	08005da5 	.word	0x08005da5
 8005d64:	08005e81 	.word	0x08005e81
 8005d68:	08005de5 	.word	0x08005de5
 8005d6c:	08005e81 	.word	0x08005e81
 8005d70:	08005e19 	.word	0x08005e19
 8005d74:	08005e81 	.word	0x08005e81
 8005d78:	08005e81 	.word	0x08005e81
 8005d7c:	08005e81 	.word	0x08005e81
 8005d80:	08005e57 	.word	0x08005e57
 8005d84:	efff69f3 	.word	0xefff69f3
 8005d88:	40008000 	.word	0x40008000
 8005d8c:	40013800 	.word	0x40013800
 8005d90:	40021000 	.word	0x40021000
 8005d94:	40004400 	.word	0x40004400
 8005d98:	40004800 	.word	0x40004800
 8005d9c:	40004c00 	.word	0x40004c00
 8005da0:	00f42400 	.word	0x00f42400
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005da4:	f7fe f86c 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 8005da8:	4603      	mov	r3, r0
 8005daa:	f04f 0400 	mov.w	r4, #0
 8005dae:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8005db2:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8005db6:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	085b      	lsrs	r3, r3, #1
 8005dc0:	f04f 0400 	mov.w	r4, #0
 8005dc4:	eb18 0003 	adds.w	r0, r8, r3
 8005dc8:	eb49 0104 	adc.w	r1, r9, r4
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f04f 0400 	mov.w	r4, #0
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	4623      	mov	r3, r4
 8005dd8:	f7fa f9fc 	bl	80001d4 <__aeabi_uldivmod>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	460c      	mov	r4, r1
 8005de0:	617b      	str	r3, [r7, #20]
#endif
            break;
 8005de2:	e050      	b.n	8005e86 <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	085b      	lsrs	r3, r3, #1
 8005dea:	f04f 0400 	mov.w	r4, #0
 8005dee:	49ad      	ldr	r1, [pc, #692]	; (80060a4 <UART_SetConfig+0x61c>)
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	eb13 0801 	adds.w	r8, r3, r1
 8005df8:	eb44 0902 	adc.w	r9, r4, r2
 8005dfc:	4640      	mov	r0, r8
 8005dfe:	4649      	mov	r1, r9
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f04f 0400 	mov.w	r4, #0
 8005e08:	461a      	mov	r2, r3
 8005e0a:	4623      	mov	r3, r4
 8005e0c:	f7fa f9e2 	bl	80001d4 <__aeabi_uldivmod>
 8005e10:	4603      	mov	r3, r0
 8005e12:	460c      	mov	r4, r1
 8005e14:	617b      	str	r3, [r7, #20]
#endif
            break;
 8005e16:	e036      	b.n	8005e86 <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005e18:	f7fd ff8a 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f04f 0300 	mov.w	r3, #0
 8005e24:	021d      	lsls	r5, r3, #8
 8005e26:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8005e2a:	0214      	lsls	r4, r2, #8
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	085b      	lsrs	r3, r3, #1
 8005e32:	461a      	mov	r2, r3
 8005e34:	f04f 0300 	mov.w	r3, #0
 8005e38:	18a0      	adds	r0, r4, r2
 8005e3a:	eb45 0103 	adc.w	r1, r5, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f04f 0400 	mov.w	r4, #0
 8005e46:	461a      	mov	r2, r3
 8005e48:	4623      	mov	r3, r4
 8005e4a:	f7fa f9c3 	bl	80001d4 <__aeabi_uldivmod>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	460c      	mov	r4, r1
 8005e52:	617b      	str	r3, [r7, #20]
#endif
            break;
 8005e54:	e017      	b.n	8005e86 <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	085b      	lsrs	r3, r3, #1
 8005e5c:	f04f 0400 	mov.w	r4, #0
 8005e60:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005e64:	f144 0100 	adc.w	r1, r4, #0
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f04f 0400 	mov.w	r4, #0
 8005e70:	461a      	mov	r2, r3
 8005e72:	4623      	mov	r3, r4
 8005e74:	f7fa f9ae 	bl	80001d4 <__aeabi_uldivmod>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	617b      	str	r3, [r7, #20]
#endif
            break;
 8005e7e:	e002      	b.n	8005e86 <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	74fb      	strb	r3, [r7, #19]
            break;
 8005e84:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e8c:	d308      	bcc.n	8005ea0 <UART_SetConfig+0x418>
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e94:	d204      	bcs.n	8005ea0 <UART_SetConfig+0x418>
        {
          huart->Instance->BRR = usartdiv;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	60da      	str	r2, [r3, #12]
 8005e9e:	e0f4      	b.n	800608a <UART_SetConfig+0x602>
        }
        else
        {
          ret = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	74fb      	strb	r3, [r7, #19]
 8005ea4:	e0f1      	b.n	800608a <UART_SetConfig+0x602>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eae:	d17e      	bne.n	8005fae <UART_SetConfig+0x526>
  {
    switch (clocksource)
 8005eb0:	7efb      	ldrb	r3, [r7, #27]
 8005eb2:	2b08      	cmp	r3, #8
 8005eb4:	d85b      	bhi.n	8005f6e <UART_SetConfig+0x4e6>
 8005eb6:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <UART_SetConfig+0x434>)
 8005eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebc:	08005ee1 	.word	0x08005ee1
 8005ec0:	08005eff 	.word	0x08005eff
 8005ec4:	08005f1d 	.word	0x08005f1d
 8005ec8:	08005f6f 	.word	0x08005f6f
 8005ecc:	08005f39 	.word	0x08005f39
 8005ed0:	08005f6f 	.word	0x08005f6f
 8005ed4:	08005f6f 	.word	0x08005f6f
 8005ed8:	08005f6f 	.word	0x08005f6f
 8005edc:	08005f57 	.word	0x08005f57
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005ee0:	f7fd ffce 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	005a      	lsls	r2, r3, #1
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	085b      	lsrs	r3, r3, #1
 8005eee:	441a      	add	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005efc:	e03a      	b.n	8005f74 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005efe:	f7fd ffd5 	bl	8003eac <HAL_RCC_GetPCLK2Freq>
 8005f02:	4603      	mov	r3, r0
 8005f04:	005a      	lsls	r2, r3, #1
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	085b      	lsrs	r3, r3, #1
 8005f0c:	441a      	add	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005f1a:	e02b      	b.n	8005f74 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	085b      	lsrs	r3, r3, #1
 8005f22:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005f26:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6852      	ldr	r2, [r2, #4]
 8005f2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005f36:	e01d      	b.n	8005f74 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005f38:	f7fd fefa 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	005a      	lsls	r2, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	085b      	lsrs	r3, r3, #1
 8005f46:	441a      	add	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005f54:	e00e      	b.n	8005f74 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	085b      	lsrs	r3, r3, #1
 8005f5c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005f6c:	e002      	b.n	8005f74 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	74fb      	strb	r3, [r7, #19]
        break;
 8005f72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2b0f      	cmp	r3, #15
 8005f78:	d916      	bls.n	8005fa8 <UART_SetConfig+0x520>
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f80:	d212      	bcs.n	8005fa8 <UART_SetConfig+0x520>
    {
      brrtemp = usartdiv & 0xFFF0U;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	f023 030f 	bic.w	r3, r3, #15
 8005f8a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	085b      	lsrs	r3, r3, #1
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	897b      	ldrh	r3, [r7, #10]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	897a      	ldrh	r2, [r7, #10]
 8005fa4:	60da      	str	r2, [r3, #12]
 8005fa6:	e070      	b.n	800608a <UART_SetConfig+0x602>
    }
    else
    {
      ret = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	74fb      	strb	r3, [r7, #19]
 8005fac:	e06d      	b.n	800608a <UART_SetConfig+0x602>
    }
  }
  else
  {
    switch (clocksource)
 8005fae:	7efb      	ldrb	r3, [r7, #27]
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d859      	bhi.n	8006068 <UART_SetConfig+0x5e0>
 8005fb4:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <UART_SetConfig+0x534>)
 8005fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fba:	bf00      	nop
 8005fbc:	08005fe1 	.word	0x08005fe1
 8005fc0:	08005ffd 	.word	0x08005ffd
 8005fc4:	08006019 	.word	0x08006019
 8005fc8:	08006069 	.word	0x08006069
 8005fcc:	08006035 	.word	0x08006035
 8005fd0:	08006069 	.word	0x08006069
 8005fd4:	08006069 	.word	0x08006069
 8005fd8:	08006069 	.word	0x08006069
 8005fdc:	08006051 	.word	0x08006051
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005fe0:	f7fd ff4e 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	085b      	lsrs	r3, r3, #1
 8005fec:	441a      	add	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005ffa:	e038      	b.n	800606e <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005ffc:	f7fd ff56 	bl	8003eac <HAL_RCC_GetPCLK2Freq>
 8006000:	4602      	mov	r2, r0
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	085b      	lsrs	r3, r3, #1
 8006008:	441a      	add	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006012:	b29b      	uxth	r3, r3
 8006014:	617b      	str	r3, [r7, #20]
#endif
        break;
 8006016:	e02a      	b.n	800606e <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	085b      	lsrs	r3, r3, #1
 800601e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006022:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6852      	ldr	r2, [r2, #4]
 800602a:	fbb3 f3f2 	udiv	r3, r3, r2
 800602e:	b29b      	uxth	r3, r3
 8006030:	617b      	str	r3, [r7, #20]
#endif
        break;
 8006032:	e01c      	b.n	800606e <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006034:	f7fd fe7c 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 8006038:	4602      	mov	r2, r0
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	085b      	lsrs	r3, r3, #1
 8006040:	441a      	add	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	fbb2 f3f3 	udiv	r3, r2, r3
 800604a:	b29b      	uxth	r3, r3
 800604c:	617b      	str	r3, [r7, #20]
#endif
        break;
 800604e:	e00e      	b.n	800606e <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	085b      	lsrs	r3, r3, #1
 8006056:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006062:	b29b      	uxth	r3, r3
 8006064:	617b      	str	r3, [r7, #20]
#endif
        break;
 8006066:	e002      	b.n	800606e <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	74fb      	strb	r3, [r7, #19]
        break;
 800606c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2b0f      	cmp	r3, #15
 8006072:	d908      	bls.n	8006086 <UART_SetConfig+0x5fe>
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800607a:	d204      	bcs.n	8006086 <UART_SetConfig+0x5fe>
    {
      huart->Instance->BRR = usartdiv;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	60da      	str	r2, [r3, #12]
 8006084:	e001      	b.n	800608a <UART_SetConfig+0x602>
    }
    else
    {
      ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006096:	7cfb      	ldrb	r3, [r7, #19]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3720      	adds	r7, #32
 800609c:	46bd      	mov	sp, r7
 800609e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80060a2:	bf00      	nop
 80060a4:	f4240000 	.word	0xf4240000

080060a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00a      	beq.n	80060d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	6812      	ldr	r2, [r2, #0]
 80060c4:	6852      	ldr	r2, [r2, #4]
 80060c6:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80060ce:	430a      	orrs	r2, r1
 80060d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00a      	beq.n	80060f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	6852      	ldr	r2, [r2, #4]
 80060e8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80060f0:	430a      	orrs	r2, r1
 80060f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00a      	beq.n	8006116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6812      	ldr	r2, [r2, #0]
 8006108:	6852      	ldr	r2, [r2, #4]
 800610a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006112:	430a      	orrs	r2, r1
 8006114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	6812      	ldr	r2, [r2, #0]
 800612a:	6852      	ldr	r2, [r2, #4]
 800612c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006134:	430a      	orrs	r2, r1
 8006136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	f003 0310 	and.w	r3, r3, #16
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00a      	beq.n	800615a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6812      	ldr	r2, [r2, #0]
 800614c:	6892      	ldr	r2, [r2, #8]
 800614e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006156:	430a      	orrs	r2, r1
 8006158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	f003 0320 	and.w	r3, r3, #32
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00a      	beq.n	800617c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6812      	ldr	r2, [r2, #0]
 800616e:	6892      	ldr	r2, [r2, #8]
 8006170:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006178:	430a      	orrs	r2, r1
 800617a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01a      	beq.n	80061be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6812      	ldr	r2, [r2, #0]
 8006190:	6852      	ldr	r2, [r2, #4]
 8006192:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800619a:	430a      	orrs	r2, r1
 800619c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061a6:	d10a      	bne.n	80061be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6812      	ldr	r2, [r2, #0]
 80061b0:	6852      	ldr	r2, [r2, #4]
 80061b2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80061ba:	430a      	orrs	r2, r1
 80061bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6812      	ldr	r2, [r2, #0]
 80061d2:	6852      	ldr	r2, [r2, #4]
 80061d4:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80061dc:	430a      	orrs	r2, r1
 80061de:	605a      	str	r2, [r3, #4]
  }
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af02      	add	r7, sp, #8
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80061fe:	f7fb fbfb 	bl	80019f8 <HAL_GetTick>
 8006202:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0308 	and.w	r3, r3, #8
 800620e:	2b08      	cmp	r3, #8
 8006210:	d10e      	bne.n	8006230 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006212:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f82c 	bl	800627e <UART_WaitOnFlagUntilTimeout>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e022      	b.n	8006276 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	2b04      	cmp	r3, #4
 800623c:	d10e      	bne.n	800625c <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800623e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f816 	bl	800627e <UART_WaitOnFlagUntilTimeout>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e00c      	b.n	8006276 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2220      	movs	r2, #32
 8006260:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2220      	movs	r2, #32
 8006268:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	603b      	str	r3, [r7, #0]
 800628a:	4613      	mov	r3, r2
 800628c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800628e:	e02c      	b.n	80062ea <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d028      	beq.n	80062ea <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d007      	beq.n	80062ae <UART_WaitOnFlagUntilTimeout+0x30>
 800629e:	f7fb fbab 	bl	80019f8 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	1ad2      	subs	r2, r2, r3
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d91d      	bls.n	80062ea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	6812      	ldr	r2, [r2, #0]
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062bc:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	6812      	ldr	r2, [r2, #0]
 80062c6:	6892      	ldr	r2, [r2, #8]
 80062c8:	f022 0201 	bic.w	r2, r2, #1
 80062cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e00f      	b.n	800630a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	69da      	ldr	r2, [r3, #28]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	401a      	ands	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	bf0c      	ite	eq
 80062fa:	2301      	moveq	r3, #1
 80062fc:	2300      	movne	r3, #0
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	461a      	mov	r2, r3
 8006302:	79fb      	ldrb	r3, [r7, #7]
 8006304:	429a      	cmp	r2, r3
 8006306:	d0c3      	beq.n	8006290 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006312:	b084      	sub	sp, #16
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	f107 0014 	add.w	r0, r7, #20
 8006320:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	b004      	add	sp, #16
 8006332:	4770      	bx	lr

08006334 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800633c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006340:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006348:	b29a      	uxth	r2, r3
 800634a:	89fb      	ldrh	r3, [r7, #14]
 800634c:	4313      	orrs	r3, r2
 800634e:	b29a      	uxth	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800636c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006370:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006378:	b29b      	uxth	r3, r3
 800637a:	b21a      	sxth	r2, r3
 800637c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006380:	43db      	mvns	r3, r3
 8006382:	b21b      	sxth	r3, r3
 8006384:	4013      	ands	r3, r2
 8006386:	b21b      	sxth	r3, r3
 8006388:	b29a      	uxth	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	460b      	mov	r3, r1
 80063a8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063b8:	b084      	sub	sp, #16
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b082      	sub	sp, #8
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	f107 0014 	add.w	r0, r7, #20
 80063c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7ff ffa2 	bl	8006334 <USB_EnableGlobalInt>

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063fc:	b004      	add	sp, #16
 80063fe:	4770      	bx	lr

08006400 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006400:	b490      	push	{r4, r7}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	b29b      	uxth	r3, r3
 800641c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006424:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	78db      	ldrb	r3, [r3, #3]
 800642a:	2b03      	cmp	r3, #3
 800642c:	d819      	bhi.n	8006462 <USB_ActivateEndpoint+0x62>
 800642e:	a201      	add	r2, pc, #4	; (adr r2, 8006434 <USB_ActivateEndpoint+0x34>)
 8006430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006434:	08006445 	.word	0x08006445
 8006438:	08006459 	.word	0x08006459
 800643c:	08006469 	.word	0x08006469
 8006440:	0800644f 	.word	0x0800644f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006444:	8abb      	ldrh	r3, [r7, #20]
 8006446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800644a:	82bb      	strh	r3, [r7, #20]
      break;
 800644c:	e00d      	b.n	800646a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800644e:	8abb      	ldrh	r3, [r7, #20]
 8006450:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006454:	82bb      	strh	r3, [r7, #20]
      break;
 8006456:	e008      	b.n	800646a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006458:	8abb      	ldrh	r3, [r7, #20]
 800645a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800645e:	82bb      	strh	r3, [r7, #20]
      break;
 8006460:	e003      	b.n	800646a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	75fb      	strb	r3, [r7, #23]
      break;
 8006466:	e000      	b.n	800646a <USB_ActivateEndpoint+0x6a>
      break;
 8006468:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal);
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	8aba      	ldrh	r2, [r7, #20]
 8006476:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	b29b      	uxth	r3, r3
 8006486:	b21b      	sxth	r3, r3
 8006488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800648c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006490:	b21a      	sxth	r2, r3
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	b21b      	sxth	r3, r3
 8006498:	4313      	orrs	r3, r2
 800649a:	b21b      	sxth	r3, r3
 800649c:	b29c      	uxth	r4, r3
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	441a      	add	r2, r3
 80064a8:	4b87      	ldr	r3, [pc, #540]	; (80066c8 <USB_ActivateEndpoint+0x2c8>)
 80064aa:	4323      	orrs	r3, r4
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	7b1b      	ldrb	r3, [r3, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f040 810d 	bne.w	80066d4 <USB_ActivateEndpoint+0x2d4>
  {
    if (ep->is_in != 0U)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	785b      	ldrb	r3, [r3, #1]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d067      	beq.n	8006592 <USB_ActivateEndpoint+0x192>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80064c2:	687c      	ldr	r4, [r7, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	441c      	add	r4, r3
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	4423      	add	r3, r4
 80064d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064da:	461c      	mov	r4, r3
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	88db      	ldrh	r3, [r3, #6]
 80064e0:	085b      	lsrs	r3, r3, #1
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29c      	uxth	r4, r3
 80064f8:	4623      	mov	r3, r4
 80064fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d014      	beq.n	800652c <USB_ActivateEndpoint+0x12c>
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	b29b      	uxth	r3, r3
 8006510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006518:	b29c      	uxth	r4, r3
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	441a      	add	r2, r3
 8006524:	4b69      	ldr	r3, [pc, #420]	; (80066cc <USB_ActivateEndpoint+0x2cc>)
 8006526:	4323      	orrs	r3, r4
 8006528:	b29b      	uxth	r3, r3
 800652a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	78db      	ldrb	r3, [r3, #3]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d018      	beq.n	8006566 <USB_ActivateEndpoint+0x166>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	b29b      	uxth	r3, r3
 8006542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800654a:	b29c      	uxth	r4, r3
 800654c:	f084 0320 	eor.w	r3, r4, #32
 8006550:	b29c      	uxth	r4, r3
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	441a      	add	r2, r3
 800655c:	4b5a      	ldr	r3, [pc, #360]	; (80066c8 <USB_ActivateEndpoint+0x2c8>)
 800655e:	4323      	orrs	r3, r4
 8006560:	b29b      	uxth	r3, r3
 8006562:	8013      	strh	r3, [r2, #0]
 8006564:	e226      	b.n	80069b4 <USB_ActivateEndpoint+0x5b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	b29b      	uxth	r3, r3
 8006574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800657c:	b29c      	uxth	r4, r3
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	441a      	add	r2, r3
 8006588:	4b4f      	ldr	r3, [pc, #316]	; (80066c8 <USB_ActivateEndpoint+0x2c8>)
 800658a:	4323      	orrs	r3, r4
 800658c:	b29b      	uxth	r3, r3
 800658e:	8013      	strh	r3, [r2, #0]
 8006590:	e210      	b.n	80069b4 <USB_ActivateEndpoint+0x5b4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006592:	687c      	ldr	r4, [r7, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800659a:	b29b      	uxth	r3, r3
 800659c:	441c      	add	r4, r3
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	4423      	add	r3, r4
 80065a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065aa:	461c      	mov	r4, r3
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	88db      	ldrh	r3, [r3, #6]
 80065b0:	085b      	lsrs	r3, r3, #1
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80065ba:	687c      	ldr	r4, [r7, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	441c      	add	r4, r3
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	4423      	add	r3, r4
 80065ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d111      	bne.n	8006600 <USB_ActivateEndpoint+0x200>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	881a      	ldrh	r2, [r3, #0]
 80065e0:	f243 33ff 	movw	r3, #13311	; 0x33ff
 80065e4:	4013      	ands	r3, r2
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	801a      	strh	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	801a      	strh	r2, [r3, #0]
 80065fe:	e026      	b.n	800664e <USB_ActivateEndpoint+0x24e>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	2b3d      	cmp	r3, #61	; 0x3d
 8006606:	d813      	bhi.n	8006630 <USB_ActivateEndpoint+0x230>
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	085b      	lsrs	r3, r3, #1
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <USB_ActivateEndpoint+0x222>
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	3301      	adds	r3, #1
 8006620:	613b      	str	r3, [r7, #16]
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	b29b      	uxth	r3, r3
 8006626:	029b      	lsls	r3, r3, #10
 8006628:	b29a      	uxth	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	801a      	strh	r2, [r3, #0]
 800662e:	e00e      	b.n	800664e <USB_ActivateEndpoint+0x24e>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	095b      	lsrs	r3, r3, #5
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	b29b      	uxth	r3, r3
 800663c:	029b      	lsls	r3, r3, #10
 800663e:	b29b      	uxth	r3, r3
 8006640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	b29c      	uxth	r4, r3
 800665c:	4623      	mov	r3, r4
 800665e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d014      	beq.n	8006690 <USB_ActivateEndpoint+0x290>
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667c:	b29c      	uxth	r4, r3
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	441a      	add	r2, r3
 8006688:	4b11      	ldr	r3, [pc, #68]	; (80066d0 <USB_ActivateEndpoint+0x2d0>)
 800668a:	4323      	orrs	r3, r4
 800668c:	b29b      	uxth	r3, r3
 800668e:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	b29b      	uxth	r3, r3
 800669e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a6:	b29c      	uxth	r4, r3
 80066a8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80066ac:	b29c      	uxth	r4, r3
 80066ae:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80066b2:	b29c      	uxth	r4, r3
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	441a      	add	r2, r3
 80066be:	4b02      	ldr	r3, [pc, #8]	; (80066c8 <USB_ActivateEndpoint+0x2c8>)
 80066c0:	4323      	orrs	r3, r4
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	8013      	strh	r3, [r2, #0]
 80066c6:	e175      	b.n	80069b4 <USB_ActivateEndpoint+0x5b4>
 80066c8:	ffff8080 	.word	0xffff8080
 80066cc:	ffff80c0 	.word	0xffff80c0
 80066d0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ea:	b29c      	uxth	r4, r3
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	441a      	add	r2, r3
 80066f6:	4b96      	ldr	r3, [pc, #600]	; (8006950 <USB_ActivateEndpoint+0x550>)
 80066f8:	4323      	orrs	r3, r4
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80066fe:	687c      	ldr	r4, [r7, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006706:	b29b      	uxth	r3, r3
 8006708:	441c      	add	r4, r3
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	4423      	add	r3, r4
 8006712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006716:	461c      	mov	r4, r3
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	891b      	ldrh	r3, [r3, #8]
 800671c:	085b      	lsrs	r3, r3, #1
 800671e:	b29b      	uxth	r3, r3
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	b29b      	uxth	r3, r3
 8006724:	8023      	strh	r3, [r4, #0]
 8006726:	687c      	ldr	r4, [r7, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800672e:	b29b      	uxth	r3, r3
 8006730:	441c      	add	r4, r3
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	00db      	lsls	r3, r3, #3
 8006738:	4423      	add	r3, r4
 800673a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800673e:	461c      	mov	r4, r3
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	895b      	ldrh	r3, [r3, #10]
 8006744:	085b      	lsrs	r3, r3, #1
 8006746:	b29b      	uxth	r3, r3
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	b29b      	uxth	r3, r3
 800674c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	785b      	ldrb	r3, [r3, #1]
 8006752:	2b00      	cmp	r3, #0
 8006754:	f040 8088 	bne.w	8006868 <USB_ActivateEndpoint+0x468>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	b29c      	uxth	r4, r3
 8006766:	4623      	mov	r3, r4
 8006768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d014      	beq.n	800679a <USB_ActivateEndpoint+0x39a>
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	b29b      	uxth	r3, r3
 800677e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006786:	b29c      	uxth	r4, r3
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	441a      	add	r2, r3
 8006792:	4b70      	ldr	r3, [pc, #448]	; (8006954 <USB_ActivateEndpoint+0x554>)
 8006794:	4323      	orrs	r3, r4
 8006796:	b29b      	uxth	r3, r3
 8006798:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	b29c      	uxth	r4, r3
 80067a8:	4623      	mov	r3, r4
 80067aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d014      	beq.n	80067dc <USB_ActivateEndpoint+0x3dc>
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	b29b      	uxth	r3, r3
 80067c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c8:	b29c      	uxth	r4, r3
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	441a      	add	r2, r3
 80067d4:	4b60      	ldr	r3, [pc, #384]	; (8006958 <USB_ActivateEndpoint+0x558>)
 80067d6:	4323      	orrs	r3, r4
 80067d8:	b29b      	uxth	r3, r3
 80067da:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f2:	b29c      	uxth	r4, r3
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	441a      	add	r2, r3
 80067fe:	4b56      	ldr	r3, [pc, #344]	; (8006958 <USB_ActivateEndpoint+0x558>)
 8006800:	4323      	orrs	r3, r4
 8006802:	b29b      	uxth	r3, r3
 8006804:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29b      	uxth	r3, r3
 8006814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681c:	b29c      	uxth	r4, r3
 800681e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006822:	b29c      	uxth	r4, r3
 8006824:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006828:	b29c      	uxth	r4, r3
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	441a      	add	r2, r3
 8006834:	4b49      	ldr	r3, [pc, #292]	; (800695c <USB_ActivateEndpoint+0x55c>)
 8006836:	4323      	orrs	r3, r4
 8006838:	b29b      	uxth	r3, r3
 800683a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b29b      	uxth	r3, r3
 800684a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800684e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006852:	b29c      	uxth	r4, r3
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	441a      	add	r2, r3
 800685e:	4b3f      	ldr	r3, [pc, #252]	; (800695c <USB_ActivateEndpoint+0x55c>)
 8006860:	4323      	orrs	r3, r4
 8006862:	b29b      	uxth	r3, r3
 8006864:	8013      	strh	r3, [r2, #0]
 8006866:	e0a5      	b.n	80069b4 <USB_ActivateEndpoint+0x5b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	b29c      	uxth	r4, r3
 8006876:	4623      	mov	r3, r4
 8006878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d014      	beq.n	80068aa <USB_ActivateEndpoint+0x4aa>
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006896:	b29c      	uxth	r4, r3
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	441a      	add	r2, r3
 80068a2:	4b2c      	ldr	r3, [pc, #176]	; (8006954 <USB_ActivateEndpoint+0x554>)
 80068a4:	4323      	orrs	r3, r4
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	b29c      	uxth	r4, r3
 80068b8:	4623      	mov	r3, r4
 80068ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d014      	beq.n	80068ec <USB_ActivateEndpoint+0x4ec>
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d8:	b29c      	uxth	r4, r3
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	441a      	add	r2, r3
 80068e4:	4b1c      	ldr	r3, [pc, #112]	; (8006958 <USB_ActivateEndpoint+0x558>)
 80068e6:	4323      	orrs	r3, r4
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006902:	b29c      	uxth	r4, r3
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	441a      	add	r2, r3
 800690e:	4b11      	ldr	r3, [pc, #68]	; (8006954 <USB_ActivateEndpoint+0x554>)
 8006910:	4323      	orrs	r3, r4
 8006912:	b29b      	uxth	r3, r3
 8006914:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	78db      	ldrb	r3, [r3, #3]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d020      	beq.n	8006960 <USB_ActivateEndpoint+0x560>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	b29b      	uxth	r3, r3
 800692c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006934:	b29c      	uxth	r4, r3
 8006936:	f084 0320 	eor.w	r3, r4, #32
 800693a:	b29c      	uxth	r4, r3
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	441a      	add	r2, r3
 8006946:	4b05      	ldr	r3, [pc, #20]	; (800695c <USB_ActivateEndpoint+0x55c>)
 8006948:	4323      	orrs	r3, r4
 800694a:	b29b      	uxth	r3, r3
 800694c:	8013      	strh	r3, [r2, #0]
 800694e:	e01c      	b.n	800698a <USB_ActivateEndpoint+0x58a>
 8006950:	ffff8180 	.word	0xffff8180
 8006954:	ffffc080 	.word	0xffffc080
 8006958:	ffff80c0 	.word	0xffff80c0
 800695c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	b29b      	uxth	r3, r3
 800696e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006976:	b29c      	uxth	r4, r3
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	441a      	add	r2, r3
 8006982:	4b0f      	ldr	r3, [pc, #60]	; (80069c0 <USB_ActivateEndpoint+0x5c0>)
 8006984:	4323      	orrs	r3, r4
 8006986:	b29b      	uxth	r3, r3
 8006988:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	b29b      	uxth	r3, r3
 8006998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800699c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a0:	b29c      	uxth	r4, r3
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	441a      	add	r2, r3
 80069ac:	4b04      	ldr	r3, [pc, #16]	; (80069c0 <USB_ActivateEndpoint+0x5c0>)
 80069ae:	4323      	orrs	r3, r4
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80069b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bc90      	pop	{r4, r7}
 80069be:	4770      	bx	lr
 80069c0:	ffff8080 	.word	0xffff8080

080069c4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069c4:	b490      	push	{r4, r7}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	7b1b      	ldrb	r3, [r3, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d171      	bne.n	8006aba <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	785b      	ldrb	r3, [r3, #1]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d036      	beq.n	8006a4c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b29c      	uxth	r4, r3
 80069ec:	4623      	mov	r3, r4
 80069ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d014      	beq.n	8006a20 <USB_DeactivateEndpoint+0x5c>
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0c:	b29c      	uxth	r4, r3
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	441a      	add	r2, r3
 8006a18:	4b6b      	ldr	r3, [pc, #428]	; (8006bc8 <USB_DeactivateEndpoint+0x204>)
 8006a1a:	4323      	orrs	r3, r4
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a36:	b29c      	uxth	r4, r3
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	441a      	add	r2, r3
 8006a42:	4b62      	ldr	r3, [pc, #392]	; (8006bcc <USB_DeactivateEndpoint+0x208>)
 8006a44:	4323      	orrs	r3, r4
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	8013      	strh	r3, [r2, #0]
 8006a4a:	e144      	b.n	8006cd6 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	881b      	ldrh	r3, [r3, #0]
 8006a58:	b29c      	uxth	r4, r3
 8006a5a:	4623      	mov	r3, r4
 8006a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d014      	beq.n	8006a8e <USB_DeactivateEndpoint+0xca>
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7a:	b29c      	uxth	r4, r3
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	441a      	add	r2, r3
 8006a86:	4b52      	ldr	r3, [pc, #328]	; (8006bd0 <USB_DeactivateEndpoint+0x20c>)
 8006a88:	4323      	orrs	r3, r4
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa4:	b29c      	uxth	r4, r3
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	441a      	add	r2, r3
 8006ab0:	4b46      	ldr	r3, [pc, #280]	; (8006bcc <USB_DeactivateEndpoint+0x208>)
 8006ab2:	4323      	orrs	r3, r4
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	8013      	strh	r3, [r2, #0]
 8006ab8:	e10d      	b.n	8006cd6 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	785b      	ldrb	r3, [r3, #1]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f040 8088 	bne.w	8006bd4 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	b29c      	uxth	r4, r3
 8006ad2:	4623      	mov	r3, r4
 8006ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d014      	beq.n	8006b06 <USB_DeactivateEndpoint+0x142>
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af2:	b29c      	uxth	r4, r3
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	441a      	add	r2, r3
 8006afe:	4b34      	ldr	r3, [pc, #208]	; (8006bd0 <USB_DeactivateEndpoint+0x20c>)
 8006b00:	4323      	orrs	r3, r4
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	b29c      	uxth	r4, r3
 8006b14:	4623      	mov	r3, r4
 8006b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d014      	beq.n	8006b48 <USB_DeactivateEndpoint+0x184>
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b34:	b29c      	uxth	r4, r3
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	441a      	add	r2, r3
 8006b40:	4b21      	ldr	r3, [pc, #132]	; (8006bc8 <USB_DeactivateEndpoint+0x204>)
 8006b42:	4323      	orrs	r3, r4
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5e:	b29c      	uxth	r4, r3
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	441a      	add	r2, r3
 8006b6a:	4b17      	ldr	r3, [pc, #92]	; (8006bc8 <USB_DeactivateEndpoint+0x204>)
 8006b6c:	4323      	orrs	r3, r4
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b88:	b29c      	uxth	r4, r3
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	441a      	add	r2, r3
 8006b94:	4b0d      	ldr	r3, [pc, #52]	; (8006bcc <USB_DeactivateEndpoint+0x208>)
 8006b96:	4323      	orrs	r3, r4
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb2:	b29c      	uxth	r4, r3
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	441a      	add	r2, r3
 8006bbe:	4b03      	ldr	r3, [pc, #12]	; (8006bcc <USB_DeactivateEndpoint+0x208>)
 8006bc0:	4323      	orrs	r3, r4
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	8013      	strh	r3, [r2, #0]
 8006bc6:	e086      	b.n	8006cd6 <USB_DeactivateEndpoint+0x312>
 8006bc8:	ffff80c0 	.word	0xffff80c0
 8006bcc:	ffff8080 	.word	0xffff8080
 8006bd0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	b29c      	uxth	r4, r3
 8006be2:	4623      	mov	r3, r4
 8006be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d014      	beq.n	8006c16 <USB_DeactivateEndpoint+0x252>
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c02:	b29c      	uxth	r4, r3
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	441a      	add	r2, r3
 8006c0e:	4b35      	ldr	r3, [pc, #212]	; (8006ce4 <USB_DeactivateEndpoint+0x320>)
 8006c10:	4323      	orrs	r3, r4
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	b29c      	uxth	r4, r3
 8006c24:	4623      	mov	r3, r4
 8006c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d014      	beq.n	8006c58 <USB_DeactivateEndpoint+0x294>
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c44:	b29c      	uxth	r4, r3
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	441a      	add	r2, r3
 8006c50:	4b25      	ldr	r3, [pc, #148]	; (8006ce8 <USB_DeactivateEndpoint+0x324>)
 8006c52:	4323      	orrs	r3, r4
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6e:	b29c      	uxth	r4, r3
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	441a      	add	r2, r3
 8006c7a:	4b1a      	ldr	r3, [pc, #104]	; (8006ce4 <USB_DeactivateEndpoint+0x320>)
 8006c7c:	4323      	orrs	r3, r4
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c98:	b29c      	uxth	r4, r3
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	441a      	add	r2, r3
 8006ca4:	4b11      	ldr	r3, [pc, #68]	; (8006cec <USB_DeactivateEndpoint+0x328>)
 8006ca6:	4323      	orrs	r3, r4
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc2:	b29c      	uxth	r4, r3
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	441a      	add	r2, r3
 8006cce:	4b07      	ldr	r3, [pc, #28]	; (8006cec <USB_DeactivateEndpoint+0x328>)
 8006cd0:	4323      	orrs	r3, r4
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bc90      	pop	{r4, r7}
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	ffffc080 	.word	0xffffc080
 8006ce8:	ffff80c0 	.word	0xffff80c0
 8006cec:	ffff8080 	.word	0xffff8080

08006cf0 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cf0:	b590      	push	{r4, r7, lr}
 8006cf2:	b095      	sub	sp, #84	; 0x54
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len = ep->xfer_len;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	785b      	ldrb	r3, [r3, #1]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	f040 815f 	bne.w	8006fc8 <USB_EPStartXfer+0x2d8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d909      	bls.n	8006d2a <USB_EPStartXfer+0x3a>
    {
      len = ep->maxpacket;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	699a      	ldr	r2, [r3, #24]
 8006d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d22:	1ad2      	subs	r2, r2, r3
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	619a      	str	r2, [r3, #24]
 8006d28:	e005      	b.n	8006d36 <USB_EPStartXfer+0x46>
    }
    else
    {
      len = ep->xfer_len;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2200      	movs	r2, #0
 8006d34:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	7b1b      	ldrb	r3, [r3, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d11a      	bne.n	8006d74 <USB_EPStartXfer+0x84>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	6959      	ldr	r1, [r3, #20]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	88da      	ldrh	r2, [r3, #6]
 8006d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fbb0 	bl	80074b0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d50:	687c      	ldr	r4, [r7, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	441c      	add	r4, r3
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	4423      	add	r3, r4
 8006d64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d68:	633b      	str	r3, [r7, #48]	; 0x30
 8006d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	801a      	strh	r2, [r3, #0]
 8006d72:	e10d      	b.n	8006f90 <USB_EPStartXfer+0x2a0>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d063      	beq.n	8006e52 <USB_EPStartXfer+0x162>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d8a:	687c      	ldr	r4, [r7, #4]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	785b      	ldrb	r3, [r3, #1]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d145      	bne.n	8006e20 <USB_EPStartXfer+0x130>
 8006d94:	687c      	ldr	r4, [r7, #4]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	441c      	add	r4, r3
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	4423      	add	r3, r4
 8006da8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d111      	bne.n	8006dd8 <USB_EPStartXfer+0xe8>
 8006db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db6:	881a      	ldrh	r2, [r3, #0]
 8006db8:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc2:	801a      	strh	r2, [r3, #0]
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd4:	801a      	strh	r2, [r3, #0]
 8006dd6:	e037      	b.n	8006e48 <USB_EPStartXfer+0x158>
 8006dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dda:	2b3d      	cmp	r3, #61	; 0x3d
 8006ddc:	d811      	bhi.n	8006e02 <USB_EPStartXfer+0x112>
 8006dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006de0:	085b      	lsrs	r3, r3, #1
 8006de2:	647b      	str	r3, [r7, #68]	; 0x44
 8006de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <USB_EPStartXfer+0x104>
 8006dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006df0:	3301      	adds	r3, #1
 8006df2:	647b      	str	r3, [r7, #68]	; 0x44
 8006df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	029b      	lsls	r3, r3, #10
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfe:	801a      	strh	r2, [r3, #0]
 8006e00:	e022      	b.n	8006e48 <USB_EPStartXfer+0x158>
 8006e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e04:	095b      	lsrs	r3, r3, #5
 8006e06:	647b      	str	r3, [r7, #68]	; 0x44
 8006e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	029b      	lsls	r3, r3, #10
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1c:	801a      	strh	r2, [r3, #0]
 8006e1e:	e013      	b.n	8006e48 <USB_EPStartXfer+0x158>
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	785b      	ldrb	r3, [r3, #1]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d10f      	bne.n	8006e48 <USB_EPStartXfer+0x158>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	441c      	add	r4, r3
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	00db      	lsls	r3, r3, #3
 8006e38:	4423      	add	r3, r4
 8006e3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	895b      	ldrh	r3, [r3, #10]
 8006e4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006e50:	e062      	b.n	8006f18 <USB_EPStartXfer+0x228>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	785b      	ldrb	r3, [r3, #1]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d145      	bne.n	8006ee6 <USB_EPStartXfer+0x1f6>
 8006e5a:	687c      	ldr	r4, [r7, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	441c      	add	r4, r3
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	4423      	add	r3, r4
 8006e6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
 8006e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d111      	bne.n	8006e9e <USB_EPStartXfer+0x1ae>
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	881a      	ldrh	r2, [r3, #0]
 8006e7e:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8006e82:	4013      	ands	r3, r2
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	801a      	strh	r2, [r3, #0]
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	881b      	ldrh	r3, [r3, #0]
 8006e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	801a      	strh	r2, [r3, #0]
 8006e9c:	e038      	b.n	8006f10 <USB_EPStartXfer+0x220>
 8006e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ea0:	2b3d      	cmp	r3, #61	; 0x3d
 8006ea2:	d811      	bhi.n	8006ec8 <USB_EPStartXfer+0x1d8>
 8006ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ea6:	085b      	lsrs	r3, r3, #1
 8006ea8:	643b      	str	r3, [r7, #64]	; 0x40
 8006eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <USB_EPStartXfer+0x1ca>
 8006eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8006eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	029b      	lsls	r3, r3, #10
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	801a      	strh	r2, [r3, #0]
 8006ec6:	e023      	b.n	8006f10 <USB_EPStartXfer+0x220>
 8006ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eca:	095b      	lsrs	r3, r3, #5
 8006ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	029b      	lsls	r3, r3, #10
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	801a      	strh	r2, [r3, #0]
 8006ee4:	e014      	b.n	8006f10 <USB_EPStartXfer+0x220>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	785b      	ldrb	r3, [r3, #1]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d110      	bne.n	8006f10 <USB_EPStartXfer+0x220>
 8006eee:	687c      	ldr	r4, [r7, #4]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	441c      	add	r4, r3
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	4423      	add	r3, r4
 8006f02:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f06:	623b      	str	r3, [r7, #32]
 8006f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	891b      	ldrh	r3, [r3, #8]
 8006f14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	6959      	ldr	r1, [r3, #20]
 8006f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fac3 	bl	80074b0 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	785b      	ldrb	r3, [r3, #1]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d115      	bne.n	8006f5e <USB_EPStartXfer+0x26e>
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f48:	b29c      	uxth	r4, r3
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	441a      	add	r2, r3
 8006f54:	4b9a      	ldr	r3, [pc, #616]	; (80071c0 <USB_EPStartXfer+0x4d0>)
 8006f56:	4323      	orrs	r3, r4
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	8013      	strh	r3, [r2, #0]
 8006f5c:	e018      	b.n	8006f90 <USB_EPStartXfer+0x2a0>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	785b      	ldrb	r3, [r3, #1]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d114      	bne.n	8006f90 <USB_EPStartXfer+0x2a0>
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7c:	b29c      	uxth	r4, r3
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	441a      	add	r2, r3
 8006f88:	4b8e      	ldr	r3, [pc, #568]	; (80071c4 <USB_EPStartXfer+0x4d4>)
 8006f8a:	4323      	orrs	r3, r4
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fa6:	b29c      	uxth	r4, r3
 8006fa8:	f084 0310 	eor.w	r3, r4, #16
 8006fac:	b29c      	uxth	r4, r3
 8006fae:	f084 0320 	eor.w	r3, r4, #32
 8006fb2:	b29c      	uxth	r4, r3
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	441a      	add	r2, r3
 8006fbe:	4b82      	ldr	r3, [pc, #520]	; (80071c8 <USB_EPStartXfer+0x4d8>)
 8006fc0:	4323      	orrs	r3, r4
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	8013      	strh	r3, [r2, #0]
 8006fc6:	e13f      	b.n	8007248 <USB_EPStartXfer+0x558>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	699a      	ldr	r2, [r3, #24]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d909      	bls.n	8006fe8 <USB_EPStartXfer+0x2f8>
    {
      len = ep->maxpacket;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	699a      	ldr	r2, [r3, #24]
 8006fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe0:	1ad2      	subs	r2, r2, r3
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	619a      	str	r2, [r3, #24]
 8006fe6:	e005      	b.n	8006ff4 <USB_EPStartXfer+0x304>
    }
    else
    {
      len = ep->xfer_len;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	7b1b      	ldrb	r3, [r3, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d145      	bne.n	8007088 <USB_EPStartXfer+0x398>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006ffc:	687c      	ldr	r4, [r7, #4]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007004:	b29b      	uxth	r3, r3
 8007006:	441c      	add	r4, r3
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	00db      	lsls	r3, r3, #3
 800700e:	4423      	add	r3, r4
 8007010:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007014:	61fb      	str	r3, [r7, #28]
 8007016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007018:	2b00      	cmp	r3, #0
 800701a:	d111      	bne.n	8007040 <USB_EPStartXfer+0x350>
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	881a      	ldrh	r2, [r3, #0]
 8007020:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8007024:	4013      	ands	r3, r2
 8007026:	b29a      	uxth	r2, r3
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	801a      	strh	r2, [r3, #0]
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007038:	b29a      	uxth	r2, r3
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	801a      	strh	r2, [r3, #0]
 800703e:	e0e8      	b.n	8007212 <USB_EPStartXfer+0x522>
 8007040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007042:	2b3d      	cmp	r3, #61	; 0x3d
 8007044:	d811      	bhi.n	800706a <USB_EPStartXfer+0x37a>
 8007046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007048:	085b      	lsrs	r3, r3, #1
 800704a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800704c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <USB_EPStartXfer+0x36c>
 8007056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007058:	3301      	adds	r3, #1
 800705a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800705c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800705e:	b29b      	uxth	r3, r3
 8007060:	029b      	lsls	r3, r3, #10
 8007062:	b29a      	uxth	r2, r3
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	801a      	strh	r2, [r3, #0]
 8007068:	e0d3      	b.n	8007212 <USB_EPStartXfer+0x522>
 800706a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007072:	b29b      	uxth	r3, r3
 8007074:	029b      	lsls	r3, r3, #10
 8007076:	b29b      	uxth	r3, r3
 8007078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800707c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007080:	b29a      	uxth	r2, r3
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	801a      	strh	r2, [r3, #0]
 8007086:	e0c4      	b.n	8007212 <USB_EPStartXfer+0x522>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	785b      	ldrb	r3, [r3, #1]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d145      	bne.n	800711c <USB_EPStartXfer+0x42c>
 8007090:	687c      	ldr	r4, [r7, #4]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007098:	b29b      	uxth	r3, r3
 800709a:	441c      	add	r4, r3
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	00db      	lsls	r3, r3, #3
 80070a2:	4423      	add	r3, r4
 80070a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070a8:	61bb      	str	r3, [r7, #24]
 80070aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d111      	bne.n	80070d4 <USB_EPStartXfer+0x3e4>
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	881a      	ldrh	r2, [r3, #0]
 80070b4:	f243 33ff 	movw	r3, #13311	; 0x33ff
 80070b8:	4013      	ands	r3, r2
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	801a      	strh	r2, [r3, #0]
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	801a      	strh	r2, [r3, #0]
 80070d2:	e038      	b.n	8007146 <USB_EPStartXfer+0x456>
 80070d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070d6:	2b3d      	cmp	r3, #61	; 0x3d
 80070d8:	d811      	bhi.n	80070fe <USB_EPStartXfer+0x40e>
 80070da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070dc:	085b      	lsrs	r3, r3, #1
 80070de:	63bb      	str	r3, [r7, #56]	; 0x38
 80070e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <USB_EPStartXfer+0x400>
 80070ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ec:	3301      	adds	r3, #1
 80070ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80070f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	029b      	lsls	r3, r3, #10
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	801a      	strh	r2, [r3, #0]
 80070fc:	e023      	b.n	8007146 <USB_EPStartXfer+0x456>
 80070fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007100:	095b      	lsrs	r3, r3, #5
 8007102:	63bb      	str	r3, [r7, #56]	; 0x38
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	b29b      	uxth	r3, r3
 8007108:	029b      	lsls	r3, r3, #10
 800710a:	b29b      	uxth	r3, r3
 800710c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007114:	b29a      	uxth	r2, r3
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	801a      	strh	r2, [r3, #0]
 800711a:	e014      	b.n	8007146 <USB_EPStartXfer+0x456>
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	785b      	ldrb	r3, [r3, #1]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d110      	bne.n	8007146 <USB_EPStartXfer+0x456>
 8007124:	687c      	ldr	r4, [r7, #4]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800712c:	b29b      	uxth	r3, r3
 800712e:	441c      	add	r4, r3
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	00db      	lsls	r3, r3, #3
 8007136:	4423      	add	r3, r4
 8007138:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800713c:	617b      	str	r3, [r7, #20]
 800713e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007140:	b29a      	uxth	r2, r3
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	801a      	strh	r2, [r3, #0]
 8007146:	687c      	ldr	r4, [r7, #4]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	785b      	ldrb	r3, [r3, #1]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d14c      	bne.n	80071ea <USB_EPStartXfer+0x4fa>
 8007150:	687c      	ldr	r4, [r7, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007158:	b29b      	uxth	r3, r3
 800715a:	441c      	add	r4, r3
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	00db      	lsls	r3, r3, #3
 8007162:	4423      	add	r3, r4
 8007164:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007168:	613b      	str	r3, [r7, #16]
 800716a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800716c:	2b00      	cmp	r3, #0
 800716e:	d111      	bne.n	8007194 <USB_EPStartXfer+0x4a4>
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	881a      	ldrh	r2, [r3, #0]
 8007174:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8007178:	4013      	ands	r3, r2
 800717a:	b29a      	uxth	r2, r3
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	801a      	strh	r2, [r3, #0]
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800718c:	b29a      	uxth	r2, r3
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	801a      	strh	r2, [r3, #0]
 8007192:	e03e      	b.n	8007212 <USB_EPStartXfer+0x522>
 8007194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007196:	2b3d      	cmp	r3, #61	; 0x3d
 8007198:	d818      	bhi.n	80071cc <USB_EPStartXfer+0x4dc>
 800719a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800719c:	085b      	lsrs	r3, r3, #1
 800719e:	637b      	str	r3, [r7, #52]	; 0x34
 80071a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <USB_EPStartXfer+0x4c0>
 80071aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ac:	3301      	adds	r3, #1
 80071ae:	637b      	str	r3, [r7, #52]	; 0x34
 80071b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	029b      	lsls	r3, r3, #10
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	801a      	strh	r2, [r3, #0]
 80071bc:	e029      	b.n	8007212 <USB_EPStartXfer+0x522>
 80071be:	bf00      	nop
 80071c0:	ffff80c0 	.word	0xffff80c0
 80071c4:	ffffc080 	.word	0xffffc080
 80071c8:	ffff8080 	.word	0xffff8080
 80071cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ce:	095b      	lsrs	r3, r3, #5
 80071d0:	637b      	str	r3, [r7, #52]	; 0x34
 80071d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	029b      	lsls	r3, r3, #10
 80071d8:	b29b      	uxth	r3, r3
 80071da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	801a      	strh	r2, [r3, #0]
 80071e8:	e013      	b.n	8007212 <USB_EPStartXfer+0x522>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	785b      	ldrb	r3, [r3, #1]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d10f      	bne.n	8007212 <USB_EPStartXfer+0x522>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	441c      	add	r4, r3
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	00db      	lsls	r3, r3, #3
 8007202:	4423      	add	r3, r4
 8007204:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007208:	60fb      	str	r3, [r7, #12]
 800720a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800720c:	b29a      	uxth	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	881b      	ldrh	r3, [r3, #0]
 800721e:	b29b      	uxth	r3, r3
 8007220:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007228:	b29c      	uxth	r4, r3
 800722a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800722e:	b29c      	uxth	r4, r3
 8007230:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007234:	b29c      	uxth	r4, r3
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	441a      	add	r2, r3
 8007240:	4b04      	ldr	r3, [pc, #16]	; (8007254 <USB_EPStartXfer+0x564>)
 8007242:	4323      	orrs	r3, r4
 8007244:	b29b      	uxth	r3, r3
 8007246:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3754      	adds	r7, #84	; 0x54
 800724e:	46bd      	mov	sp, r7
 8007250:	bd90      	pop	{r4, r7, pc}
 8007252:	bf00      	nop
 8007254:	ffff8080 	.word	0xffff8080

08007258 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007258:	b490      	push	{r4, r7}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	785b      	ldrb	r3, [r3, #1]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d018      	beq.n	800729c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	b29b      	uxth	r3, r3
 8007278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800727c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007280:	b29c      	uxth	r4, r3
 8007282:	f084 0310 	eor.w	r3, r4, #16
 8007286:	b29c      	uxth	r4, r3
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	441a      	add	r2, r3
 8007292:	4b11      	ldr	r3, [pc, #68]	; (80072d8 <USB_EPSetStall+0x80>)
 8007294:	4323      	orrs	r3, r4
 8007296:	b29b      	uxth	r3, r3
 8007298:	8013      	strh	r3, [r2, #0]
 800729a:	e017      	b.n	80072cc <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b2:	b29c      	uxth	r4, r3
 80072b4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80072b8:	b29c      	uxth	r4, r3
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	441a      	add	r2, r3
 80072c4:	4b04      	ldr	r3, [pc, #16]	; (80072d8 <USB_EPSetStall+0x80>)
 80072c6:	4323      	orrs	r3, r4
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bc90      	pop	{r4, r7}
 80072d6:	4770      	bx	lr
 80072d8:	ffff8080 	.word	0xffff8080

080072dc <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072dc:	b490      	push	{r4, r7}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	785b      	ldrb	r3, [r3, #1]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d03c      	beq.n	8007368 <USB_EPClearStall+0x8c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	b29c      	uxth	r4, r3
 80072fc:	4623      	mov	r3, r4
 80072fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007302:	2b00      	cmp	r3, #0
 8007304:	d014      	beq.n	8007330 <USB_EPClearStall+0x54>
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	b29b      	uxth	r3, r3
 8007314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800731c:	b29c      	uxth	r4, r3
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	441a      	add	r2, r3
 8007328:	4b30      	ldr	r3, [pc, #192]	; (80073ec <USB_EPClearStall+0x110>)
 800732a:	4323      	orrs	r3, r4
 800732c:	b29b      	uxth	r3, r3
 800732e:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	b29b      	uxth	r3, r3
 800733e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007346:	b29c      	uxth	r4, r3
 8007348:	f084 0310 	eor.w	r3, r4, #16
 800734c:	b29c      	uxth	r4, r3
 800734e:	f084 0320 	eor.w	r3, r4, #32
 8007352:	b29c      	uxth	r4, r3
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	441a      	add	r2, r3
 800735e:	4b24      	ldr	r3, [pc, #144]	; (80073f0 <USB_EPClearStall+0x114>)
 8007360:	4323      	orrs	r3, r4
 8007362:	b29b      	uxth	r3, r3
 8007364:	8013      	strh	r3, [r2, #0]
 8007366:	e03b      	b.n	80073e0 <USB_EPClearStall+0x104>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	b29c      	uxth	r4, r3
 8007376:	4623      	mov	r3, r4
 8007378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d014      	beq.n	80073aa <USB_EPClearStall+0xce>
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007396:	b29c      	uxth	r4, r3
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	441a      	add	r2, r3
 80073a2:	4b14      	ldr	r3, [pc, #80]	; (80073f4 <USB_EPClearStall+0x118>)
 80073a4:	4323      	orrs	r3, r4
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c0:	b29c      	uxth	r4, r3
 80073c2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80073c6:	b29c      	uxth	r4, r3
 80073c8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80073cc:	b29c      	uxth	r4, r3
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	441a      	add	r2, r3
 80073d8:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <USB_EPClearStall+0x114>)
 80073da:	4323      	orrs	r3, r4
 80073dc:	b29b      	uxth	r3, r3
 80073de:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bc90      	pop	{r4, r7}
 80073ea:	4770      	bx	lr
 80073ec:	ffff80c0 	.word	0xffff80c0
 80073f0:	ffff8080 	.word	0xffff8080
 80073f4:	ffffc080 	.word	0xffffc080

080073f8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	460b      	mov	r3, r1
 8007402:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007404:	78fb      	ldrb	r3, [r7, #3]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d103      	bne.n	8007412 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2280      	movs	r2, #128	; 0x80
 800740e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800742e:	b29b      	uxth	r3, r3
 8007430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007438:	b29a      	uxth	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	370c      	adds	r7, #12
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800745c:	b29b      	uxth	r3, r3
 800745e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007462:	b29a      	uxth	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007486:	b29b      	uxth	r3, r3
 8007488:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800748a:	68fb      	ldr	r3, [r7, #12]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b08d      	sub	sp, #52	; 0x34
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	4611      	mov	r1, r2
 80074bc:	461a      	mov	r2, r3
 80074be:	460b      	mov	r3, r1
 80074c0:	80fb      	strh	r3, [r7, #6]
 80074c2:	4613      	mov	r3, r2
 80074c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80074c6:	88bb      	ldrh	r3, [r7, #4]
 80074c8:	3301      	adds	r3, #1
 80074ca:	085b      	lsrs	r3, r3, #1
 80074cc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80074d6:	88fa      	ldrh	r2, [r7, #6]
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074e0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074e6:	e01b      	b.n	8007520 <USB_WritePMA+0x70>
  {
    temp1 = (uint16_t) * pBuf;
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80074ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f0:	3301      	adds	r3, #1
 80074f2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	021b      	lsls	r3, r3, #8
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	461a      	mov	r2, r3
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	4313      	orrs	r3, r2
 8007504:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	b29a      	uxth	r2, r3
 800750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007510:	3302      	adds	r3, #2
 8007512:	62bb      	str	r3, [r7, #40]	; 0x28

    if (PMA_ACCESS > 1U)
    {
      pdwVal++;
    }
    pBuf++;
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	3301      	adds	r3, #1
 8007518:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800751a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751c:	3b01      	subs	r3, #1
 800751e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1e0      	bne.n	80074e8 <USB_WritePMA+0x38>
  }
}
 8007526:	bf00      	nop
 8007528:	3734      	adds	r7, #52	; 0x34
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007532:	b480      	push	{r7}
 8007534:	b08b      	sub	sp, #44	; 0x2c
 8007536:	af00      	add	r7, sp, #0
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	4611      	mov	r1, r2
 800753e:	461a      	mov	r2, r3
 8007540:	460b      	mov	r3, r1
 8007542:	80fb      	strh	r3, [r7, #6]
 8007544:	4613      	mov	r3, r2
 8007546:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007548:	88bb      	ldrh	r3, [r7, #4]
 800754a:	085b      	lsrs	r3, r3, #1
 800754c:	b29b      	uxth	r3, r3
 800754e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007558:	88fa      	ldrh	r2, [r7, #6]
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007562:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
 8007568:	e017      	b.n	800759a <USB_ReadPMA+0x68>
  {
    temp = *pdwVal;
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	3302      	adds	r3, #2
 8007574:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	b2da      	uxtb	r2, r3
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	3301      	adds	r3, #1
 8007582:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	0a1b      	lsrs	r3, r3, #8
 8007588:	b2da      	uxtb	r2, r3
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	3301      	adds	r3, #1
 8007592:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	3b01      	subs	r3, #1
 8007598:	627b      	str	r3, [r7, #36]	; 0x24
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1e4      	bne.n	800756a <USB_ReadPMA+0x38>
    {
      pdwVal++;
    }
  }

  if ((wNBytes % 2U) != 0U)
 80075a0:	88bb      	ldrh	r3, [r7, #4]
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00c      	beq.n	80075c6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	881b      	ldrh	r3, [r3, #0]
 80075b0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	3302      	adds	r3, #2
 80075b6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	3301      	adds	r3, #1
 80075c4:	61fb      	str	r3, [r7, #28]
  }
}
 80075c6:	bf00      	nop
 80075c8:	372c      	adds	r7, #44	; 0x2c
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <dmx_registerCallback>:
* Variable Declarations
*******************************************************************************/
/******************************************************************************
* Function Definitions
*******************************************************************************/
void dmx_registerCallback(dmx_cfg_Instance *dmx, dmx_cfg_callback callback){
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	6039      	str	r1, [r7, #0]
	dmx->callback = callback;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	655a      	str	r2, [r3, #84]	; 0x54
}
 80075e2:	bf00      	nop
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
	...

080075f0 <dmx_init>:

void dmx_init(dmx_cfg_Instance *dmx){
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
	if(dmx->type == dmx_cfg_TYPE_TRANSMITTER){
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d126      	bne.n	800764e <dmx_init+0x5e>
		gpio_ConfigureToFloating(dmx->txBreakPort, dmx->txBreakPin);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	891b      	ldrh	r3, [r3, #8]
 8007608:	4619      	mov	r1, r3
 800760a:	4610      	mov	r0, r2
 800760c:	f002 fc42 	bl	8009e94 <gpio_ConfigureToFloating>
		dmx->txState = dmx_cfg_TX_STATE_NONE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	705a      	strb	r2, [r3, #1]
		dmx->txBreakToBreakCnt = 0;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	621a      	str	r2, [r3, #32]
		dmx->txBreakToBreakTime_ms = dmx->txBreakToBreakTime_ms + (dmx->txBreakTime_us + dmx->txMarkAfterBreakTime_us + dmx->txMarkBetweenTime_us*dmx->universeSize)/1000;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	69da      	ldr	r2, [r3, #28]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6919      	ldr	r1, [r3, #16]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	4419      	add	r1, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
 8007634:	fb00 f303 	mul.w	r3, r0, r3
 8007638:	440b      	add	r3, r1
 800763a:	4911      	ldr	r1, [pc, #68]	; (8007680 <dmx_init+0x90>)
 800763c:	fb81 0103 	smull	r0, r1, r1, r3
 8007640:	1189      	asrs	r1, r1, #6
 8007642:	17db      	asrs	r3, r3, #31
 8007644:	1acb      	subs	r3, r1, r3
 8007646:	441a      	add	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	61da      	str	r2, [r3, #28]
 800764c:	e010      	b.n	8007670 <dmx_init+0x80>
	}else if(dmx->type == dmx_cfg_TYPE_RECEIVER){
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d10c      	bne.n	8007670 <dmx_init+0x80>
		dmx->rxState = dmx_cfg_RX_STATE_NONE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		dmx->rxFallingTime = 0;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	631a      	str	r2, [r3, #48]	; 0x30
		dmx->rxRisingTime = 0;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	635a      	str	r2, [r3, #52]	; 0x34
		dmx->rxTimerUpdateCnt = 0;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	641a      	str	r2, [r3, #64]	; 0x40
	}
	dmx->universeCnt = 0;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8007678:	bf00      	nop
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	10624dd3 	.word	0x10624dd3

08007684 <dmx_loop>:

void dmx_loop(dmx_cfg_Instance *dmx){
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
	if(dmx->type == dmx_cfg_TYPE_TRANSMITTER){
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10e      	bne.n	80076b2 <dmx_loop+0x2e>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	785b      	ldrb	r3, [r3, #1]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d029      	beq.n	80076f0 <dmx_loop+0x6c>
		if(dmx->txBreakToBreakCnt == 0){
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d106      	bne.n	80076b2 <dmx_loop+0x2e>
			dmx_sendStart(dmx);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f83a 	bl	800771e <dmx_sendStart>
			dmx->txBreakToBreakCnt = dmx->txBreakToBreakTime_ms;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	69da      	ldr	r2, [r3, #28]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	621a      	str	r2, [r3, #32]
		}
	}else if(dmx->type == dmx_cfg_TYPE_RECEIVER){
	}
	/*Loop flags*/
	if(dmx->universeComplete){
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01a      	beq.n	80076f2 <dmx_loop+0x6e>
		dmx->universeComplete = false;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
		if(dmx->type == dmx_cfg_TYPE_TRANSMITTER) dmx->callbackType = dmx_cfg_CALL_TX_COMPLETE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d104      	bne.n	80076d6 <dmx_loop+0x52>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80076d4:	e003      	b.n	80076de <dmx_loop+0x5a>
		else dmx->callbackType = dmx_cfg_CALL_RX_COMPLETE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		if(dmx->callback) dmx->callback(dmx);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d005      	beq.n	80076f2 <dmx_loop+0x6e>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	4798      	blx	r3
 80076ee:	e000      	b.n	80076f2 <dmx_loop+0x6e>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 80076f0:	bf00      	nop
	}
}
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <dmx_1ms>:

void dmx_1ms(dmx_cfg_Instance *dmx){
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
	if(dmx->txBreakToBreakCnt > 0) --dmx->txBreakToBreakCnt;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	2b00      	cmp	r3, #0
 8007706:	dd04      	ble.n	8007712 <dmx_1ms+0x1a>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a1b      	ldr	r3, [r3, #32]
 800770c:	1e5a      	subs	r2, r3, #1
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	621a      	str	r2, [r3, #32]
}
 8007712:	bf00      	nop
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <dmx_sendStart>:

void dmx_sendStart(dmx_cfg_Instance *dmx){
 800771e:	b580      	push	{r7, lr}
 8007720:	b082      	sub	sp, #8
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d130      	bne.n	8007790 <dmx_sendStart+0x72>
	if(dmx->universe == NULL) return;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007732:	2b00      	cmp	r3, #0
 8007734:	d02e      	beq.n	8007794 <dmx_sendStart+0x76>
	if(dmx->txBreakToBreakTime_ms < dmx_cfg_MIN_BREAK_TO_BREAK_TIME_MS) dmx->txBreakToBreakTime_ms = dmx_cfg_MIN_BREAK_TO_BREAK_TIME_MS;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	2b18      	cmp	r3, #24
 800773c:	dc02      	bgt.n	8007744 <dmx_sendStart+0x26>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2219      	movs	r2, #25
 8007742:	61da      	str	r2, [r3, #28]
	if(dmx->txBreakTime_us < dmx_cfg_MIN_BREAK_TIME_US) dmx->txBreakTime_us = dmx_cfg_MIN_BREAK_TIME_US;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	2b5f      	cmp	r3, #95	; 0x5f
 800774a:	dc02      	bgt.n	8007752 <dmx_sendStart+0x34>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2260      	movs	r2, #96	; 0x60
 8007750:	611a      	str	r2, [r3, #16]
	if(dmx->txMarkAfterBreakTime_us < dmx_cfg_MIN_MARK_AFTER_BREAK_TIME_US) dmx->txMarkAfterBreakTime_us = dmx_cfg_MIN_MARK_AFTER_BREAK_TIME_US;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	2b0b      	cmp	r3, #11
 8007758:	dc02      	bgt.n	8007760 <dmx_sendStart+0x42>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	220c      	movs	r2, #12
 800775e:	615a      	str	r2, [r3, #20]
	dmx->universeComplete = false;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	dmx->txState = dmx_cfg_TX_STATE_SEND_BREAK;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	705a      	strb	r2, [r3, #1]
	tim_setNewTimeAndStart(dmx->txTimer, dmx->txBreakTime_us);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68da      	ldr	r2, [r3, #12]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	4619      	mov	r1, r3
 8007778:	4610      	mov	r0, r2
 800777a:	f003 fa3d 	bl	800abf8 <tim_setNewTimeAndStart>
	gpio_ConfigureToPushPull(dmx->txBreakPort, dmx->txBreakPin);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	891b      	ldrh	r3, [r3, #8]
 8007786:	4619      	mov	r1, r3
 8007788:	4610      	mov	r0, r2
 800778a:	f002 fba1 	bl	8009ed0 <gpio_ConfigureToPushPull>
 800778e:	e002      	b.n	8007796 <dmx_sendStart+0x78>
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 8007790:	bf00      	nop
 8007792:	e000      	b.n	8007796 <dmx_sendStart+0x78>
	if(dmx->universe == NULL) return;
 8007794:	bf00      	nop
}
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <dmx_txStart>:
	else if(timeIdx == dmx_cfg_TIME_MARK_AFTER_BREAK) dmx->txMarkAfterBreakTime_us = time_us;
	else if(timeIdx == dmx_cfg_TIME_MARK_BETWEEN) dmx->txMarkBetweenTime_us = time_us;
	else if(timeIdx == dmx_cfg_TIME_BREAK_TO_BREAK) dmx->txBreakToBreakTime_ms = (time_us + dmx->txBreakTime_us + dmx->txMarkAfterBreakTime_us + dmx->txMarkBetweenTime_us*dmx->universeSize)/1000;
}

void dmx_txStart(dmx_cfg_Instance *dmx){
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d103      	bne.n	80077b4 <dmx_txStart+0x18>
	dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	705a      	strb	r2, [r3, #1]
 80077b2:	e000      	b.n	80077b6 <dmx_txStart+0x1a>
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 80077b4:	bf00      	nop
}
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <dmx_rxStart>:
void dmx_txStop(dmx_cfg_Instance *dmx){
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
	dmx->txState = dmx_cfg_TX_STATE_NONE;
}

void dmx_rxStart(dmx_cfg_Instance *dmx){
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_RECEIVER) return;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d109      	bne.n	80077e4 <dmx_rxStart+0x24>
	uart_enableReceiveInt(dmx->uart);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d4:	4618      	mov	r0, r3
 80077d6:	f003 fbb7 	bl	800af48 <uart_enableReceiveInt>
	dmx->rxState = dmx_cfg_RX_STATE_WAIT_FOR_BREAK;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80077e2:	e000      	b.n	80077e6 <dmx_rxStart+0x26>
	if(dmx->type != dmx_cfg_TYPE_RECEIVER) return;
 80077e4:	bf00      	nop
}
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <dmx_irqTxTimerHandler>:
void dmx_incrementRxUpdateCnt(dmx_cfg_Instance *dmx){
	++dmx->rxTimerUpdateCnt;
}

/*Transmit IRQs*/
void dmx_irqTxTimerHandler(dmx_cfg_Instance *dmx){
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
	if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	785b      	ldrb	r3, [r3, #1]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d05c      	beq.n	80078b6 <dmx_irqTxTimerHandler+0xca>
	if(dmx->txState == dmx_cfg_TX_STATE_SEND_BREAK){
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	785b      	ldrb	r3, [r3, #1]
 8007800:	2b02      	cmp	r3, #2
 8007802:	d113      	bne.n	800782c <dmx_irqTxTimerHandler+0x40>
		gpio_ConfigureToFloating(dmx->txBreakPort, dmx->txBreakPin);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	891b      	ldrh	r3, [r3, #8]
 800780c:	4619      	mov	r1, r3
 800780e:	4610      	mov	r0, r2
 8007810:	f002 fb40 	bl	8009e94 <gpio_ConfigureToFloating>
		tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkAfterBreakTime_us);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68da      	ldr	r2, [r3, #12]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	4619      	mov	r1, r3
 800781e:	4610      	mov	r0, r2
 8007820:	f003 f9ea 	bl	800abf8 <tim_setNewTimeAndStart>
		dmx->txState = dmx_cfg_TX_STATE_SEND_MARK;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2203      	movs	r2, #3
 8007828:	705a      	strb	r2, [r3, #1]
 800782a:	e045      	b.n	80078b8 <dmx_irqTxTimerHandler+0xcc>
	}else if(dmx->txState == dmx_cfg_TX_STATE_SEND_MARK){
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	785b      	ldrb	r3, [r3, #1]
 8007830:	2b03      	cmp	r3, #3
 8007832:	d133      	bne.n	800789c <dmx_irqTxTimerHandler+0xb0>
		dmx->universeCnt = 0;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		dmx->uart->CR1 &= ~USART_CR1_TXEIE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007844:	6812      	ldr	r2, [r2, #0]
 8007846:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800784a:	601a      	str	r2, [r3, #0]
		dmx->uart->TDR = dmx->universeStartCode;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007856:	b292      	uxth	r2, r2
 8007858:	851a      	strh	r2, [r3, #40]	; 0x28
		if(dmx->txMarkBetweenTime_us == 0) {
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d110      	bne.n	8007884 <dmx_irqTxTimerHandler+0x98>
			dmx->uart->CR1 |= USART_CR1_TXEIE;		//start with transmission --> enable transmitbuffer empty interrupt
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800786a:	6812      	ldr	r2, [r2, #0]
 800786c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007870:	601a      	str	r2, [r3, #0]
			tim_stop(dmx->txTimer);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	4618      	mov	r0, r3
 8007878:	f003 f9f6 	bl	800ac68 <tim_stop>
			dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;	//The whole universe can be transmitted as fast as possible
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	705a      	strb	r2, [r3, #1]
 8007882:	e019      	b.n	80078b8 <dmx_irqTxTimerHandler+0xcc>
		}
		else{
			tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkBetweenTime_us);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	68da      	ldr	r2, [r3, #12]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	4619      	mov	r1, r3
 800788e:	4610      	mov	r0, r2
 8007890:	f003 f9b2 	bl	800abf8 <tim_setNewTimeAndStart>
			dmx->txState = dmx_cfg_TX_STATE_SEND_UNIVERSE;	//The universe can be transmitted with defined delay between all data bytes
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2205      	movs	r2, #5
 8007898:	705a      	strb	r2, [r3, #1]
 800789a:	e00d      	b.n	80078b8 <dmx_irqTxTimerHandler+0xcc>
		}
	}else if(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE){
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	785b      	ldrb	r3, [r3, #1]
 80078a0:	2b05      	cmp	r3, #5
 80078a2:	d109      	bne.n	80078b8 <dmx_irqTxTimerHandler+0xcc>
		dmx->uart->CR1 |= USART_CR1_TXEIE;		//start with transmission --> enable transmitbuffer empty interrupt
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80078ac:	6812      	ldr	r2, [r2, #0]
 80078ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	e000      	b.n	80078b8 <dmx_irqTxTimerHandler+0xcc>
	if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 80078b6:	bf00      	nop
	}
}
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <dmx_irqTxInterfaceHandler>:

void dmx_irqTxInterfaceHandler(dmx_cfg_Instance *dmx){
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
	if (dmx->uart->ISR & USART_ISR_TXE){				//transmit dmx values
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d066      	beq.n	80079a2 <dmx_irqTxInterfaceHandler+0xe4>
		dmx->uart->ISR &= ~USART_ISR_TXE; //Kill transmit-buffer empty flag
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80078dc:	69d2      	ldr	r2, [r2, #28]
 80078de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078e2:	61da      	str	r2, [r3, #28]
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	785b      	ldrb	r3, [r3, #1]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d059      	beq.n	80079a0 <dmx_irqTxInterfaceHandler+0xe2>
		if((dmx->txState == dmx_cfg_TX_STATE_WAIT_FOR_BREAK)||(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE)){
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	785b      	ldrb	r3, [r3, #1]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d003      	beq.n	80078fc <dmx_irqTxInterfaceHandler+0x3e>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	785b      	ldrb	r3, [r3, #1]
 80078f8:	2b05      	cmp	r3, #5
 80078fa:	d152      	bne.n	80079a2 <dmx_irqTxInterfaceHandler+0xe4>
			if(dmx->universeCnt < dmx->universeSize){
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007908:	429a      	cmp	r2, r3
 800790a:	d230      	bcs.n	800796e <dmx_irqTxInterfaceHandler+0xb0>
				dmx->uart->CR1 &= ~USART_CR1_TXEIE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007914:	6812      	ldr	r2, [r2, #0]
 8007916:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800791a:	601a      	str	r2, [r3, #0]
				dmx->uart->TDR = dmx->universe[dmx->universeCnt];
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007924:	6879      	ldr	r1, [r7, #4]
 8007926:	f8b1 1050 	ldrh.w	r1, [r1, #80]	; 0x50
 800792a:	440a      	add	r2, r1
 800792c:	7812      	ldrb	r2, [r2, #0]
 800792e:	b292      	uxth	r2, r2
 8007930:	851a      	strh	r2, [r3, #40]	; 0x28
				dmx->universeCnt++;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007938:	3301      	adds	r3, #1
 800793a:	b29a      	uxth	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				if(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE) tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkBetweenTime_us);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	785b      	ldrb	r3, [r3, #1]
 8007946:	2b05      	cmp	r3, #5
 8007948:	d108      	bne.n	800795c <dmx_irqTxInterfaceHandler+0x9e>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68da      	ldr	r2, [r3, #12]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	4619      	mov	r1, r3
 8007954:	4610      	mov	r0, r2
 8007956:	f003 f94f 	bl	800abf8 <tim_setNewTimeAndStart>
 800795a:	e022      	b.n	80079a2 <dmx_irqTxInterfaceHandler+0xe4>
				else dmx->uart->CR1 |= USART_CR1_TXEIE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007964:	6812      	ldr	r2, [r2, #0]
 8007966:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800796a:	601a      	str	r2, [r3, #0]
 800796c:	e019      	b.n	80079a2 <dmx_irqTxInterfaceHandler+0xe4>
			}else{
				dmx->universeCnt = 0;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				dmx->uart->CR1 &= ~USART_CR1_TXEIE;	//disable transmit-buffer empty interrupt
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800797e:	6812      	ldr	r2, [r2, #0]
 8007980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007984:	601a      	str	r2, [r3, #0]
				dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	705a      	strb	r2, [r3, #1]
				tim_stop(dmx->txTimer);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	4618      	mov	r0, r3
 8007992:	f003 f969 	bl	800ac68 <tim_stop>
				dmx->universeComplete = true;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800799e:	e000      	b.n	80079a2 <dmx_irqTxInterfaceHandler+0xe4>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 80079a0:	bf00      	nop
			}
		}

	}
}
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <dmx_irqRxInterfaceHandler>:
/*Receive IRQs*/
void dmx_irqRxTimerHandler(dmx_cfg_Instance *dmx){
//TODO: Add measurement of break
}

void dmx_irqRxInterfaceHandler(dmx_cfg_Instance *dmx){
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
	uint32_t sr = dmx->uart->ISR;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	60fb      	str	r3, [r7, #12]
	if (sr & USART_ISR_RXNE){
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f003 0320 	and.w	r3, r3, #32
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d065      	beq.n	8007a8e <dmx_irqRxInterfaceHandler+0xe6>
		if(sr & USART_ISR_ORE) dmx->uart->ICR |= USART_ICR_ORECF; /*Kill overrun error*/
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f003 0308 	and.w	r3, r3, #8
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d007      	beq.n	80079dc <dmx_irqRxInterfaceHandler+0x34>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80079d4:	6a12      	ldr	r2, [r2, #32]
 80079d6:	f042 0208 	orr.w	r2, r2, #8
 80079da:	621a      	str	r2, [r3, #32]
		uint8_t  dmxByte = (uint8_t)dmx->uart->RDR;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	72fb      	strb	r3, [r7, #11]
		if(dmx->rxState == dmx_cfg_RX_STATE_NONE) return;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d04d      	beq.n	8007a8c <dmx_irqRxInterfaceHandler+0xe4>
		if(sr & USART_ISR_FE){	/*Frame error*/
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f003 0302 	and.w	r3, r3, #2
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d014      	beq.n	8007a24 <dmx_irqRxInterfaceHandler+0x7c>
			dmx->uart->ICR |= USART_ICR_FECF; /*Kill frame error*/
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007a02:	6a12      	ldr	r2, [r2, #32]
 8007a04:	f042 0202 	orr.w	r2, r2, #2
 8007a08:	621a      	str	r2, [r3, #32]
			dmx->universeCnt = 0;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			dmx->rxState = dmx_cfg_RX_STATE_RECEIVE_START_CODE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2203      	movs	r2, #3
 8007a16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			dmx->universeComplete = false;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007a22:	e034      	b.n	8007a8e <dmx_irqRxInterfaceHandler+0xe6>
		}else if(dmx->rxState == dmx_cfg_RX_STATE_RECEIVE_START_CODE){
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d108      	bne.n	8007a40 <dmx_irqRxInterfaceHandler+0x98>
			dmx->rxState = dmx_cfg_RX_STATE_RECEIVE_UNIVERSE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2204      	movs	r2, #4
 8007a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			dmx->universeStartCode = dmxByte;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	7afa      	ldrb	r2, [r7, #11]
 8007a3a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8007a3e:	e026      	b.n	8007a8e <dmx_irqRxInterfaceHandler+0xe6>
		}else if(dmx->rxState == dmx_cfg_RX_STATE_RECEIVE_UNIVERSE){
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d121      	bne.n	8007a8e <dmx_irqRxInterfaceHandler+0xe6>
			dmx->universe[dmx->universeCnt] = dmxByte;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8007a54:	4413      	add	r3, r2
 8007a56:	7afa      	ldrb	r2, [r7, #11]
 8007a58:	701a      	strb	r2, [r3, #0]
			dmx->universeCnt++;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a60:	3301      	adds	r3, #1
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			if(dmx->universeCnt >= dmx->universeSize){
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d309      	bcc.n	8007a8e <dmx_irqRxInterfaceHandler+0xe6>
				dmx->universeComplete = true;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
				dmx->rxState = dmx_cfg_RX_STATE_WAIT_FOR_BREAK;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007a8a:	e000      	b.n	8007a8e <dmx_irqRxInterfaceHandler+0xe6>
		if(dmx->rxState == dmx_cfg_RX_STATE_NONE) return;
 8007a8c:	bf00      	nop
			}
		}
	}
}
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <eeprom_registerCallback>:
static inline void readData(eeprom_cfg_Config *config, uint8_t *data, uint16_t dataSize);
static inline void callbackError(uint8_t type);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void eeprom_registerCallback(eeprom_cfg_Config *config, eeprom_cfg_callback callback){
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
	config->callback = callback;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	60da      	str	r2, [r3, #12]
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <eeprom_init>:
void eeprom_init(eeprom_cfg_Config *config){
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
	if(config->callback != NULL){
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d004      	beq.n	8007ace <eeprom_init+0x1a>
		config->maxAddress = config->memorySize >> 3; /*Convert Bit to Byte*/
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	08da      	lsrs	r2, r3, #3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	611a      	str	r2, [r3, #16]
	}
}
 8007ace:	bf00      	nop
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <isSimilarToLast>:
	message->origin = 0;
	message->value = 0;
	message->ctx = 0;
}

static inline uint8_t isSimilarToLast(msg_Message *message, msg_Buffer *buf){
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b084      	sub	sp, #16
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	6039      	str	r1, [r7, #0]
	char type;
	uint16_t idx;
	if(RINGBUFFER_isEmpty(&buf->buffer)) return 0;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 fa16 	bl	8007f18 <RINGBUFFER_isEmpty>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <isSimilarToLast+0x1c>
 8007af2:	2300      	movs	r3, #0
 8007af4:	e039      	b.n	8007b6a <isSimilarToLast+0x90>
	uint16_t lastTmp = buf->lastMsg;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	899b      	ldrh	r3, [r3, #12]
 8007afa:	81fb      	strh	r3, [r7, #14]
	type = buf->buffer.data[lastTmp];
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	89fb      	ldrh	r3, [r7, #14]
 8007b02:	4413      	add	r3, r2
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	737b      	strb	r3, [r7, #13]
	if(++lastTmp >= buf->buffer.size) lastTmp = 0;
 8007b08:	89fb      	ldrh	r3, [r7, #14]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	81fb      	strh	r3, [r7, #14]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	889b      	ldrh	r3, [r3, #4]
 8007b12:	89fa      	ldrh	r2, [r7, #14]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d301      	bcc.n	8007b1c <isSimilarToLast+0x42>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	81fb      	strh	r3, [r7, #14]
	idx = (buf->buffer.data[lastTmp] << 8) & 0xFF00;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	689a      	ldr	r2, [r3, #8]
 8007b20:	89fb      	ldrh	r3, [r7, #14]
 8007b22:	4413      	add	r3, r2
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	021b      	lsls	r3, r3, #8
 8007b28:	817b      	strh	r3, [r7, #10]
	if(++lastTmp >= buf->buffer.size) lastTmp = 0;
 8007b2a:	89fb      	ldrh	r3, [r7, #14]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	81fb      	strh	r3, [r7, #14]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	889b      	ldrh	r3, [r3, #4]
 8007b34:	89fa      	ldrh	r2, [r7, #14]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d301      	bcc.n	8007b3e <isSimilarToLast+0x64>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	81fb      	strh	r3, [r7, #14]
	idx |= (buf->buffer.data[lastTmp] << 0) & 0xFF;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	689a      	ldr	r2, [r3, #8]
 8007b42:	89fb      	ldrh	r3, [r7, #14]
 8007b44:	4413      	add	r3, r2
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	897b      	ldrh	r3, [r7, #10]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	817b      	strh	r3, [r7, #10]
	if((type == message->type) && (idx == message->index)) return 1;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	791b      	ldrb	r3, [r3, #4]
 8007b54:	7b7a      	ldrb	r2, [r7, #13]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d106      	bne.n	8007b68 <isSimilarToLast+0x8e>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	881b      	ldrh	r3, [r3, #0]
 8007b5e:	897a      	ldrh	r2, [r7, #10]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d101      	bne.n	8007b68 <isSimilarToLast+0x8e>
 8007b64:	2301      	movs	r3, #1
 8007b66:	e000      	b.n	8007b6a <isSimilarToLast+0x90>
	else return 0;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <writeMsg>:

static inline uint8_t writeMsg(msg_Message *message, msg_Buffer *buf){
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	6039      	str	r1, [r7, #0]
	uint8_t bufferState =  ringbuffer_NO_BUF;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	73fb      	strb	r3, [r7, #15]
	uint8_t isSimilarActive = 0;
 8007b80:	2300      	movs	r3, #0
 8007b82:	73bb      	strb	r3, [r7, #14]
	uint16_t nextMsgTmp = buf->buffer.in;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	81bb      	strh	r3, [r7, #12]
	if(message != NULL){
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d064      	beq.n	8007c5a <writeMsg+0xe8>
		if(isSimilarToLast(message, buf)){
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7ff ffa1 	bl	8007ada <isSimilarToLast>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d005      	beq.n	8007baa <writeMsg+0x38>
			buf->buffer.in = buf->lastMsg;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	899a      	ldrh	r2, [r3, #12]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	801a      	strh	r2, [r3, #0]
			isSimilarActive = 1;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	73bb      	strb	r3, [r7, #14]
		}
		bufferState = RINGBUFFER_cIn(message->type, &buf->buffer);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	791b      	ldrb	r3, [r3, #4]
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 f942 	bl	8007e3c <RINGBUFFER_cIn>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->index >> 8), &buf->buffer);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	881b      	ldrh	r3, [r3, #0]
 8007bc0:	0a1b      	lsrs	r3, r3, #8
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	4611      	mov	r1, r2
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f000 f936 	bl	8007e3c <RINGBUFFER_cIn>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->index), &buf->buffer);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	881b      	ldrh	r3, [r3, #0]
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	4611      	mov	r1, r2
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 f92c 	bl	8007e3c <RINGBUFFER_cIn>
 8007be4:	4603      	mov	r3, r0
 8007be6:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->value >> 8), &buf->buffer);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007bee:	121b      	asrs	r3, r3, #8
 8007bf0:	b21b      	sxth	r3, r3
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 f91f 	bl	8007e3c <RINGBUFFER_cIn>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->value), &buf->buffer);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 f914 	bl	8007e3c <RINGBUFFER_cIn>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->ctx >> 8), &buf->buffer);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007c1e:	121b      	asrs	r3, r3, #8
 8007c20:	b21b      	sxth	r3, r3
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	683a      	ldr	r2, [r7, #0]
 8007c26:	4611      	mov	r1, r2
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 f907 	bl	8007e3c <RINGBUFFER_cIn>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->ctx), &buf->buffer);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 f8fc 	bl	8007e3c <RINGBUFFER_cIn>
 8007c44:	4603      	mov	r3, r0
 8007c46:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn(message->origin, &buf->buffer);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	795b      	ldrb	r3, [r3, #5]
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	4611      	mov	r1, r2
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 f8f3 	bl	8007e3c <RINGBUFFER_cIn>
 8007c56:	4603      	mov	r3, r0
 8007c58:	73fb      	strb	r3, [r7, #15]
	}
	if(bufferState ==  ringbuffer_FULL) buf->buffer.in = nextMsgTmp;
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d103      	bne.n	8007c68 <writeMsg+0xf6>
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	89ba      	ldrh	r2, [r7, #12]
 8007c64:	801a      	strh	r2, [r3, #0]
 8007c66:	e005      	b.n	8007c74 <writeMsg+0x102>
	else if(!isSimilarActive) buf->lastMsg = nextMsgTmp;
 8007c68:	7bbb      	ldrb	r3, [r7, #14]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d102      	bne.n	8007c74 <writeMsg+0x102>
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	89ba      	ldrh	r2, [r7, #12]
 8007c72:	819a      	strh	r2, [r3, #12]
	return bufferState;
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <msg_writeEvent>:
	msgBuffer.out = 0;
	msgBuffer.size = size;
	msgBuffer.data = pData;
}

uint8_t msg_writeEvent(msg_Message *message, msg_Buffer *buf){
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b084      	sub	sp, #16
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	6039      	str	r1, [r7, #0]
	message->index = CAST_MSG_TO_EVENT(message->index);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	881b      	ldrh	r3, [r3, #0]
 8007c8c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	801a      	strh	r2, [r3, #0]
	uint8_t bufferState = writeMsg(message, buf);
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7ff ff6a 	bl	8007b72 <writeMsg>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	73fb      	strb	r3, [r7, #15]
	return bufferState;
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <msg_writeAction>:

uint8_t msg_writeAction(msg_Message *message, msg_Buffer *buf){
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
	message->index = CAST_MSG_TO_ACTION(message->index);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	801a      	strh	r2, [r3, #0]
	uint8_t bufferState = writeMsg(message, buf);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7ff ff51 	bl	8007b72 <writeMsg>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73fb      	strb	r3, [r7, #15]
	return bufferState;
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <msg_getNext>:

msg_Message *msg_getNext(msg_Message *message, msg_Buffer *buf){
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	6039      	str	r1, [r7, #0]
	uint8_t bufferState =  ringbuffer_OK;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	73fb      	strb	r3, [r7, #15]
	char tmp = 0;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73bb      	strb	r3, [r7, #14]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	f107 030e 	add.w	r3, r7, #14
 8007cf6:	4611      	mov	r1, r2
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 f8dc 	bl	8007eb6 <RINGBUFFER_cOut>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	73fb      	strb	r3, [r7, #15]
	message->type = tmp;
 8007d02:	7bba      	ldrb	r2, [r7, #14]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	711a      	strb	r2, [r3, #4]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	f107 030e 	add.w	r3, r7, #14
 8007d0e:	4611      	mov	r1, r2
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 f8d0 	bl	8007eb6 <RINGBUFFER_cOut>
 8007d16:	4603      	mov	r3, r0
 8007d18:	73fb      	strb	r3, [r7, #15]
	message->index |= (uint16_t)((tmp & 0xFF) << 8);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	881a      	ldrh	r2, [r3, #0]
 8007d1e:	7bbb      	ldrb	r3, [r7, #14]
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	021b      	lsls	r3, r3, #8
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	4313      	orrs	r3, r2
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	801a      	strh	r2, [r3, #0]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	f107 030e 	add.w	r3, r7, #14
 8007d34:	4611      	mov	r1, r2
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 f8bd 	bl	8007eb6 <RINGBUFFER_cOut>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	73fb      	strb	r3, [r7, #15]
	message->index |= (uint16_t)(tmp & 0xFF);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	881a      	ldrh	r2, [r3, #0]
 8007d44:	7bbb      	ldrb	r3, [r7, #14]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	801a      	strh	r2, [r3, #0]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	f107 030e 	add.w	r3, r7, #14
 8007d56:	4611      	mov	r1, r2
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f000 f8ac 	bl	8007eb6 <RINGBUFFER_cOut>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	73fb      	strb	r3, [r7, #15]
	message->value |= (uint16_t)((tmp & 0xFF) << 8);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8007d68:	7bbb      	ldrb	r3, [r7, #14]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	021b      	lsls	r3, r3, #8
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	b21b      	sxth	r3, r3
 8007d72:	4313      	orrs	r3, r2
 8007d74:	b21a      	sxth	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	805a      	strh	r2, [r3, #2]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	f107 030e 	add.w	r3, r7, #14
 8007d80:	4611      	mov	r1, r2
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 f897 	bl	8007eb6 <RINGBUFFER_cOut>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	73fb      	strb	r3, [r7, #15]
	message->value |= (uint16_t)(tmp & 0xFF);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8007d92:	7bbb      	ldrb	r3, [r7, #14]
 8007d94:	b21b      	sxth	r3, r3
 8007d96:	4313      	orrs	r3, r2
 8007d98:	b21a      	sxth	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	805a      	strh	r2, [r3, #2]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	f107 030e 	add.w	r3, r7, #14
 8007da4:	4611      	mov	r1, r2
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 f885 	bl	8007eb6 <RINGBUFFER_cOut>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73fb      	strb	r3, [r7, #15]
	message->ctx |= (uint16_t)((tmp & 0xFF) << 8);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8007db6:	7bbb      	ldrb	r3, [r7, #14]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	021b      	lsls	r3, r3, #8
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	b21b      	sxth	r3, r3
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	b21a      	sxth	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	80da      	strh	r2, [r3, #6]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	f107 030e 	add.w	r3, r7, #14
 8007dce:	4611      	mov	r1, r2
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 f870 	bl	8007eb6 <RINGBUFFER_cOut>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	73fb      	strb	r3, [r7, #15]
	message->ctx |= (uint16_t)(tmp & 0xFF);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
 8007de2:	b21b      	sxth	r3, r3
 8007de4:	4313      	orrs	r3, r2
 8007de6:	b21a      	sxth	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	80da      	strh	r2, [r3, #6]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	f107 030e 	add.w	r3, r7, #14
 8007df2:	4611      	mov	r1, r2
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 f85e 	bl	8007eb6 <RINGBUFFER_cOut>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	73fb      	strb	r3, [r7, #15]
	message->origin = tmp;
 8007dfe:	7bba      	ldrb	r2, [r7, #14]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	715a      	strb	r2, [r3, #5]
	if(bufferState ==  ringbuffer_OK)return message;
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d101      	bne.n	8007e0e <msg_getNext+0x130>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	e000      	b.n	8007e10 <msg_getNext+0x132>
	else return NULL;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <msg_isAction>:

uint8_t msg_isAction(msg_Message *message){
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
	if((message->index & ACTION_MSK) == ACTION_MSK) return TRUE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	b21b      	sxth	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	da01      	bge.n	8007e2e <msg_isAction+0x16>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e000      	b.n	8007e30 <msg_isAction+0x18>
	else return FALSE;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <RINGBUFFER_cIn>:
 *  Created on: 15.01.2018
 *      Author: sawadee
 */
#include "ringbuffer.h"

uint8_t RINGBUFFER_cIn(char data, stRingBuf *pBuf){
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	4603      	mov	r3, r0
 8007e44:	6039      	str	r1, [r7, #0]
 8007e46:	71fb      	strb	r3, [r7, #7]
	if(pBuf->data != NULL){
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d02b      	beq.n	8007ea8 <RINGBUFFER_cIn+0x6c>
		if ( ( pBuf->in + 1 == pBuf->out ) || ( pBuf->out == 0 && pBuf->in + 1 == pBuf->size ) ) return ringbuffer_FULL;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	3301      	adds	r3, #1
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	8852      	ldrh	r2, [r2, #2]
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d00a      	beq.n	8007e74 <RINGBUFFER_cIn+0x38>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	885b      	ldrh	r3, [r3, #2]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d108      	bne.n	8007e78 <RINGBUFFER_cIn+0x3c>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	881b      	ldrh	r3, [r3, #0]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	8892      	ldrh	r2, [r2, #4]
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d101      	bne.n	8007e78 <RINGBUFFER_cIn+0x3c>
 8007e74:	2303      	movs	r3, #3
 8007e76:	e018      	b.n	8007eaa <RINGBUFFER_cIn+0x6e>
		pBuf->data[pBuf->in] = data;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	8812      	ldrh	r2, [r2, #0]
 8007e80:	4413      	add	r3, r2
 8007e82:	79fa      	ldrb	r2, [r7, #7]
 8007e84:	701a      	strb	r2, [r3, #0]
		pBuf->in++;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	801a      	strh	r2, [r3, #0]
		if (pBuf->in >= pBuf->size) pBuf->in = 0;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	881a      	ldrh	r2, [r3, #0]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	889b      	ldrh	r3, [r3, #4]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d302      	bcc.n	8007ea4 <RINGBUFFER_cIn+0x68>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	801a      	strh	r2, [r3, #0]
		return ringbuffer_OK;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e000      	b.n	8007eaa <RINGBUFFER_cIn+0x6e>
	}else return ringbuffer_NO_BUF;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <RINGBUFFER_cOut>:
uint8_t RINGBUFFER_cOut(char *pData, stRingBuf *pBuf){
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	6039      	str	r1, [r7, #0]
	if(pBuf->data != NULL){
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d020      	beq.n	8007f0a <RINGBUFFER_cOut+0x54>
		if (pBuf->out == pBuf->in) return ringbuffer_EMPTY;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	885a      	ldrh	r2, [r3, #2]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d101      	bne.n	8007ed8 <RINGBUFFER_cOut+0x22>
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	e019      	b.n	8007f0c <RINGBUFFER_cOut+0x56>
		*pData = pBuf->data[pBuf->out];
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	8852      	ldrh	r2, [r2, #2]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	781a      	ldrb	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	701a      	strb	r2, [r3, #0]
		pBuf->out++;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	885b      	ldrh	r3, [r3, #2]
 8007eec:	3301      	adds	r3, #1
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	805a      	strh	r2, [r3, #2]
		if (pBuf->out >= pBuf->size)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	885a      	ldrh	r2, [r3, #2]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	889b      	ldrh	r3, [r3, #4]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d302      	bcc.n	8007f06 <RINGBUFFER_cOut+0x50>
		  pBuf->out = 0;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	2200      	movs	r2, #0
 8007f04:	805a      	strh	r2, [r3, #2]
		return ringbuffer_OK;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e000      	b.n	8007f0c <RINGBUFFER_cOut+0x56>
	}else return ringbuffer_NO_BUF;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <RINGBUFFER_isEmpty>:

uint8_t RINGBUFFER_isEmpty(stRingBuf *pBuf){
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
	if(pBuf->out == pBuf->in) return 1;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	885a      	ldrh	r2, [r3, #2]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d101      	bne.n	8007f30 <RINGBUFFER_isEmpty+0x18>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e000      	b.n	8007f32 <RINGBUFFER_isEmpty+0x1a>
	else return 0;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <soft_i2c_bsp_gpioInit>:

#define soft_i2c_bsp_GPIO_MODE_MSK 			0x03
#define soft_i2c_bsp_GPIO_MODE_INPUT_FLOAT 	0x00
#define soft_i2c_bsp_GPIO_MODE_OUTPUT_OD 	0x01

static inline void soft_i2c_bsp_gpioInit(soft_i2c_bsp_pin_device *pin){
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
	/*Enable open drain output*/
	pin->GPIOx->OTYPER |= pin->GPIO_Pin;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	6812      	ldr	r2, [r2, #0]
 8007f4e:	6852      	ldr	r2, [r2, #4]
 8007f50:	6879      	ldr	r1, [r7, #4]
 8007f52:	8889      	ldrh	r1, [r1, #4]
 8007f54:	430a      	orrs	r2, r1
 8007f56:	605a      	str	r2, [r3, #4]
	/*Set as input*/
	pin->GPIOx->MODER &= ~(soft_i2c_bsp_GPIO_MODE_MSK << (pin->GPIO_Pin_BitPos << 1));
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	6812      	ldr	r2, [r2, #0]
 8007f60:	6812      	ldr	r2, [r2, #0]
 8007f62:	6879      	ldr	r1, [r7, #4]
 8007f64:	7989      	ldrb	r1, [r1, #6]
 8007f66:	0049      	lsls	r1, r1, #1
 8007f68:	2003      	movs	r0, #3
 8007f6a:	fa00 f101 	lsl.w	r1, r0, r1
 8007f6e:	43c9      	mvns	r1, r1
 8007f70:	400a      	ands	r2, r1
 8007f72:	601a      	str	r2, [r3, #0]
	pin->GPIOx->MODER |= (soft_i2c_bsp_GPIO_MODE_INPUT_FLOAT << (pin->GPIO_Pin_BitPos << 1));
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	6812      	ldr	r2, [r2, #0]
 8007f7c:	6812      	ldr	r2, [r2, #0]
 8007f7e:	601a      	str	r2, [r3, #0]
	/*Disable all pull ups or pull downs*/
	pin->GPIOx->PUPDR &= ~(soft_i2c_bsp_GPIO_PULL_MSK << (pin->GPIO_Pin_BitPos << 1));
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	6812      	ldr	r2, [r2, #0]
 8007f88:	68d2      	ldr	r2, [r2, #12]
 8007f8a:	6879      	ldr	r1, [r7, #4]
 8007f8c:	7989      	ldrb	r1, [r1, #6]
 8007f8e:	0049      	lsls	r1, r1, #1
 8007f90:	2003      	movs	r0, #3
 8007f92:	fa00 f101 	lsl.w	r1, r0, r1
 8007f96:	43c9      	mvns	r1, r1
 8007f98:	400a      	ands	r2, r1
 8007f9a:	60da      	str	r2, [r3, #12]
	pin->GPIOx->PUPDR |= (soft_i2c_bsp_GPIO_PULL_NONE << (pin->GPIO_Pin_BitPos << 1));
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	6812      	ldr	r2, [r2, #0]
 8007fa4:	68d2      	ldr	r2, [r2, #12]
 8007fa6:	60da      	str	r2, [r3, #12]
	/*Set gpio speed as high as possible*/
	pin->GPIOx->OSPEEDR &= ~(soft_i2c_bsp_GPIO_SPEED_MSK << (pin->GPIO_Pin_BitPos << 1));
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	6812      	ldr	r2, [r2, #0]
 8007fb0:	6892      	ldr	r2, [r2, #8]
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	7989      	ldrb	r1, [r1, #6]
 8007fb6:	0049      	lsls	r1, r1, #1
 8007fb8:	2003      	movs	r0, #3
 8007fba:	fa00 f101 	lsl.w	r1, r0, r1
 8007fbe:	43c9      	mvns	r1, r1
 8007fc0:	400a      	ands	r2, r1
 8007fc2:	609a      	str	r2, [r3, #8]
	pin->GPIOx->OSPEEDR |= soft_i2c_bsp_GPIO_SPEED_VERY_HIGH << (pin->GPIO_Pin_BitPos << 1);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	6812      	ldr	r2, [r2, #0]
 8007fcc:	6892      	ldr	r2, [r2, #8]
 8007fce:	6879      	ldr	r1, [r7, #4]
 8007fd0:	7989      	ldrb	r1, [r1, #6]
 8007fd2:	0049      	lsls	r1, r1, #1
 8007fd4:	2003      	movs	r0, #3
 8007fd6:	fa00 f101 	lsl.w	r1, r0, r1
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	609a      	str	r2, [r3, #8]
	/*Set gpio output level always to low*/
	pin->GPIOx->ODR &= ~pin->GPIO_Pin;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	6812      	ldr	r2, [r2, #0]
 8007fe6:	6952      	ldr	r2, [r2, #20]
 8007fe8:	6879      	ldr	r1, [r7, #4]
 8007fea:	8889      	ldrh	r1, [r1, #4]
 8007fec:	43c9      	mvns	r1, r1
 8007fee:	400a      	ands	r2, r1
 8007ff0:	615a      	str	r2, [r3, #20]
}
 8007ff2:	bf00      	nop
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <soft_i2c_bsp_setGpioMode>:


static inline void soft_i2c_bsp_setGpioMode(i2c_bsp_GpioMode mode, soft_i2c_bsp_pin_device *pin){
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	4603      	mov	r3, r0
 8008006:	6039      	str	r1, [r7, #0]
 8008008:	71fb      	strb	r3, [r7, #7]
	if(mode == soft_i2c_bsp_GPIO_MODE_INPUT){
 800800a:	79fb      	ldrb	r3, [r7, #7]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d114      	bne.n	800803a <soft_i2c_bsp_setGpioMode+0x3c>
		pin->GPIOx->MODER &= ~(soft_i2c_bsp_GPIO_MODE_MSK << (pin->GPIO_Pin_BitPos << 1));
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	683a      	ldr	r2, [r7, #0]
 8008016:	6812      	ldr	r2, [r2, #0]
 8008018:	6812      	ldr	r2, [r2, #0]
 800801a:	6839      	ldr	r1, [r7, #0]
 800801c:	7989      	ldrb	r1, [r1, #6]
 800801e:	0049      	lsls	r1, r1, #1
 8008020:	2003      	movs	r0, #3
 8008022:	fa00 f101 	lsl.w	r1, r0, r1
 8008026:	43c9      	mvns	r1, r1
 8008028:	400a      	ands	r2, r1
 800802a:	601a      	str	r2, [r3, #0]
		pin->GPIOx->MODER |= (soft_i2c_bsp_GPIO_MODE_INPUT_FLOAT << (pin->GPIO_Pin_BitPos << 1));
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	6812      	ldr	r2, [r2, #0]
 8008034:	6812      	ldr	r2, [r2, #0]
 8008036:	601a      	str	r2, [r3, #0]
	}else{
		pin->GPIOx->MODER &= ~(soft_i2c_bsp_GPIO_MODE_MSK << (pin->GPIO_Pin_BitPos << 1));
		pin->GPIOx->MODER |= (soft_i2c_bsp_GPIO_MODE_OUTPUT_OD << (pin->GPIO_Pin_BitPos << 1));
	}
}
 8008038:	e01a      	b.n	8008070 <soft_i2c_bsp_setGpioMode+0x72>
		pin->GPIOx->MODER &= ~(soft_i2c_bsp_GPIO_MODE_MSK << (pin->GPIO_Pin_BitPos << 1));
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	6812      	ldr	r2, [r2, #0]
 8008042:	6812      	ldr	r2, [r2, #0]
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	7989      	ldrb	r1, [r1, #6]
 8008048:	0049      	lsls	r1, r1, #1
 800804a:	2003      	movs	r0, #3
 800804c:	fa00 f101 	lsl.w	r1, r0, r1
 8008050:	43c9      	mvns	r1, r1
 8008052:	400a      	ands	r2, r1
 8008054:	601a      	str	r2, [r3, #0]
		pin->GPIOx->MODER |= (soft_i2c_bsp_GPIO_MODE_OUTPUT_OD << (pin->GPIO_Pin_BitPos << 1));
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	6812      	ldr	r2, [r2, #0]
 800805e:	6812      	ldr	r2, [r2, #0]
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	7989      	ldrb	r1, [r1, #6]
 8008064:	0049      	lsls	r1, r1, #1
 8008066:	2001      	movs	r0, #1
 8008068:	fa00 f101 	lsl.w	r1, r0, r1
 800806c:	430a      	orrs	r2, r1
 800806e:	601a      	str	r2, [r3, #0]
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <soft_i2c_bsp_readGpio>:

static inline bool soft_i2c_bsp_readGpio(soft_i2c_bsp_pin_device *pin){
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
	//TODO: remove HAL
	return HAL_GPIO_ReadPin(pin->GPIOx, pin->GPIO_Pin);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	889b      	ldrh	r3, [r3, #4]
 800808c:	4619      	mov	r1, r3
 800808e:	4610      	mov	r0, r2
 8008090:	f7f9 ff44 	bl	8001f1c <HAL_GPIO_ReadPin>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	bf14      	ite	ne
 800809a:	2301      	movne	r3, #1
 800809c:	2300      	moveq	r3, #0
 800809e:	b2db      	uxtb	r3, r3
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <soft_i2c_bsp_timInit>:

static inline void soft_i2c_bsp_timInit(soft_i2c_bsp_tim_device *tim){
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
	tim->TIMx->CR1 &= ~TIM_CR1_CEN;		//Stop counter
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	6812      	ldr	r2, [r2, #0]
 80080b8:	6812      	ldr	r2, [r2, #0]
 80080ba:	f022 0201 	bic.w	r2, r2, #1
 80080be:	601a      	str	r2, [r3, #0]
	tim->TIMx->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	6812      	ldr	r2, [r2, #0]
 80080c8:	6812      	ldr	r2, [r2, #0]
 80080ca:	f042 0202 	orr.w	r2, r2, #2
 80080ce:	601a      	str	r2, [r3, #0]
	tim->TIMx->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	6812      	ldr	r2, [r2, #0]
 80080d8:	6912      	ldr	r2, [r2, #16]
 80080da:	f022 0201 	bic.w	r2, r2, #1
 80080de:	611a      	str	r2, [r3, #16]
	tim->TIMx->EGR |= TIM_EGR_UG;		//Force reload of shadow register -> Start from beginning
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	6812      	ldr	r2, [r2, #0]
 80080e8:	6952      	ldr	r2, [r2, #20]
 80080ea:	f042 0201 	orr.w	r2, r2, #1
 80080ee:	615a      	str	r2, [r3, #20]
	tim->TIMx->DIER |= TIM_DIER_UIE;	//Enable update interrupts
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	6812      	ldr	r2, [r2, #0]
 80080f8:	68d2      	ldr	r2, [r2, #12]
 80080fa:	f042 0201 	orr.w	r2, r2, #1
 80080fe:	60da      	str	r2, [r3, #12]
	tim->TIMx->CR1 |= TIM_CR1_CEN;		//Enable counter
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	6812      	ldr	r2, [r2, #0]
 8008108:	6812      	ldr	r2, [r2, #0]
 800810a:	f042 0201 	orr.w	r2, r2, #1
 800810e:	601a      	str	r2, [r3, #0]
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <soft_i2c_bsp_timStart>:

static inline void soft_i2c_bsp_timStart(soft_i2c_bsp_tim_device *tim){
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
//	tim->TIMx->CR1 |= TIM_CR1_CEN;		//Enable counter
	tim->TIMx->CR1 &= ~TIM_CR1_UDIS;	//Allow that update can be triggered
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	6812      	ldr	r2, [r2, #0]
 800812c:	6812      	ldr	r2, [r2, #0]
 800812e:	f022 0202 	bic.w	r2, r2, #2
 8008132:	601a      	str	r2, [r3, #0]
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <soft_i2c_bsp_timStop>:

static inline void soft_i2c_bsp_timStop(soft_i2c_bsp_tim_device *tim){
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
//	tim->TIMx->CR1 &= ~TIM_CR1_CEN;		//Enable counter
	tim->TIMx->CR1 |= TIM_CR1_UDIS;		//Avoid that update can be triggered
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	6812      	ldr	r2, [r2, #0]
 8008150:	6812      	ldr	r2, [r2, #0]
 8008152:	f042 0202 	orr.w	r2, r2, #2
 8008156:	601a      	str	r2, [r3, #0]
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <i2c_soft_init>:
static int write_byte(soft_i2c_cfg_Config *self, uint8_t byte);
static int read_byte(soft_i2c_cfg_Config *self, uint8_t *byte_p, int ack);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void i2c_soft_init(soft_i2c_cfg_Config *self){
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
    self->baudrate_us = (1000000L / 2L / self->baudrate);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	4a0b      	ldr	r2, [pc, #44]	; (80081a0 <i2c_soft_init+0x3c>)
 8008172:	fbb2 f2f3 	udiv	r2, r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	619a      	str	r2, [r3, #24]
    soft_i2c_bsp_gpioInit(&self->scl_pin);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff fede 	bl	8007f3e <soft_i2c_bsp_gpioInit>
    soft_i2c_bsp_gpioInit(&self->sda_pin);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	3308      	adds	r3, #8
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff fed9 	bl	8007f3e <soft_i2c_bsp_gpioInit>
    soft_i2c_bsp_timInit(&self->timer);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3310      	adds	r3, #16
 8008190:	4618      	mov	r0, r3
 8008192:	f7ff ff89 	bl	80080a8 <soft_i2c_bsp_timInit>
}
 8008196:	bf00      	nop
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	0007a120 	.word	0x0007a120

080081a4 <i2c_soft_timer_us>:

void i2c_soft_timer_us(soft_i2c_cfg_Config *self){
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
	if(self->timer_us > 0) --self->timer_us;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	dd04      	ble.n	80081be <i2c_soft_timer_us+0x1a>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	1e5a      	subs	r2, r3, #1
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80081be:	bf00      	nop
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <i2c_soft_mem_read>:
	/*4. Send the stop condition. */
	status = stop_cond(self);
	return status;
}

int i2c_soft_mem_read(soft_i2c_cfg_Config *self, int address, int memAddr, int memAddrSize, uint8_t *data, int size){
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b088      	sub	sp, #32
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	60f8      	str	r0, [r7, #12]
 80081d2:	60b9      	str	r1, [r7, #8]
 80081d4:	607a      	str	r2, [r7, #4]
 80081d6:	603b      	str	r3, [r7, #0]
	int i;
	int ack;
	int status = soft_i2c_RETURN_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	61bb      	str	r3, [r7, #24]
	/*** Write part ***/
	/* 1. Send the start condition. */
	status = start_cond(self);
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f000 f964 	bl	80084aa <start_cond>
 80081e2:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) return status;
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <i2c_soft_mem_read+0x24>
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	e071      	b.n	80082d2 <i2c_soft_mem_read+0x108>
	/* 2. Write the address with the direction bit set to 0.*/
	status = write_byte(self, address);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	4619      	mov	r1, r3
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 fa45 	bl	8008684 <write_byte>
 80081fa:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) {
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d004      	beq.n	800820c <i2c_soft_mem_read+0x42>
		stop_cond(self);	/*Ignore the possible error of stop condition*/
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 f984 	bl	8008510 <stop_cond>
		return status;
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	e062      	b.n	80082d2 <i2c_soft_mem_read+0x108>
	}
	/* 3. Write the mem address. */
	for (i = memAddrSize; i > 0; i--) {
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	61fb      	str	r3, [r7, #28]
 8008210:	e017      	b.n	8008242 <i2c_soft_mem_read+0x78>
		uint8_t addressPart = ((memAddr >> ((i-1) << 3)) & 0xFF);
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	3b01      	subs	r3, #1
 8008216:	00db      	lsls	r3, r3, #3
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	fa42 f303 	asr.w	r3, r2, r3
 800821e:	75fb      	strb	r3, [r7, #23]
		status = write_byte(self, addressPart);
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	4619      	mov	r1, r3
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f000 fa2d 	bl	8008684 <write_byte>
 800822a:	61b8      	str	r0, [r7, #24]
		if (status != soft_i2c_RETURN_OK) {
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d004      	beq.n	800823c <i2c_soft_mem_read+0x72>
			stop_cond(self); /*Ignore the possible error of stop condition*/
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f000 f96c 	bl	8008510 <stop_cond>
			return status;
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	e04a      	b.n	80082d2 <i2c_soft_mem_read+0x108>
	for (i = memAddrSize; i > 0; i--) {
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	3b01      	subs	r3, #1
 8008240:	61fb      	str	r3, [r7, #28]
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	2b00      	cmp	r3, #0
 8008246:	dce4      	bgt.n	8008212 <i2c_soft_mem_read+0x48>
		}
	}
	/*** Read part ***/
	/* 4. Send the start condition. */
	status = start_cond(self);
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 f92e 	bl	80084aa <start_cond>
 800824e:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) return status;
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <i2c_soft_mem_read+0x90>
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	e03b      	b.n	80082d2 <i2c_soft_mem_read+0x108>
	/* 5. Write the address with the direction bit set to 1.*/
	status = write_byte(self, ((address) | 0x1));
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	b25b      	sxtb	r3, r3
 800825e:	f043 0301 	orr.w	r3, r3, #1
 8008262:	b25b      	sxtb	r3, r3
 8008264:	b2db      	uxtb	r3, r3
 8008266:	4619      	mov	r1, r3
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 fa0b 	bl	8008684 <write_byte>
 800826e:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) {
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d004      	beq.n	8008280 <i2c_soft_mem_read+0xb6>
		stop_cond(self); /*Ignore the possible error of stop condition*/
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f000 f94a 	bl	8008510 <stop_cond>
		return status;
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	e028      	b.n	80082d2 <i2c_soft_mem_read+0x108>
	}
	/* 6. Read the data. */
	for (i = 0; i < size; i++) {
 8008280:	2300      	movs	r3, #0
 8008282:	61fb      	str	r3, [r7, #28]
 8008284:	e01c      	b.n	80082c0 <i2c_soft_mem_read+0xf6>
		/* ACK all but last read byte. */
		ack = (i + 1 != size);
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	1c5a      	adds	r2, r3, #1
 800828a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828c:	429a      	cmp	r2, r3
 800828e:	bf14      	ite	ne
 8008290:	2301      	movne	r3, #1
 8008292:	2300      	moveq	r3, #0
 8008294:	b2db      	uxtb	r3, r3
 8008296:	613b      	str	r3, [r7, #16]
		status = read_byte(self, &data[i], ack);
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800829c:	4413      	add	r3, r2
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	4619      	mov	r1, r3
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 fa28 	bl	80086f8 <read_byte>
 80082a8:	61b8      	str	r0, [r7, #24]
		if (status != soft_i2c_RETURN_OK) {
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d004      	beq.n	80082ba <i2c_soft_mem_read+0xf0>
			stop_cond(self); /*Ignore the possible error of stop condition*/
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 f92d 	bl	8008510 <stop_cond>
			return status;
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	e00b      	b.n	80082d2 <i2c_soft_mem_read+0x108>
	for (i = 0; i < size; i++) {
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	3301      	adds	r3, #1
 80082be:	61fb      	str	r3, [r7, #28]
 80082c0:	69fa      	ldr	r2, [r7, #28]
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	429a      	cmp	r2, r3
 80082c6:	dbde      	blt.n	8008286 <i2c_soft_mem_read+0xbc>
		}
	}
	/*7. Send the stop condition. */
	status = stop_cond(self);
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 f921 	bl	8008510 <stop_cond>
 80082ce:	61b8      	str	r0, [r7, #24]
	return status;
 80082d0:	69bb      	ldr	r3, [r7, #24]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3720      	adds	r7, #32
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <i2c_soft_write>:

int i2c_soft_write(soft_i2c_cfg_Config *self, int address, const uint8_t *data, int size){
 80082da:	b580      	push	{r7, lr}
 80082dc:	b086      	sub	sp, #24
 80082de:	af00      	add	r7, sp, #0
 80082e0:	60f8      	str	r0, [r7, #12]
 80082e2:	60b9      	str	r1, [r7, #8]
 80082e4:	607a      	str	r2, [r7, #4]
 80082e6:	603b      	str	r3, [r7, #0]
	int i;
	int status = soft_i2c_RETURN_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	613b      	str	r3, [r7, #16]
	/* 1. Send the start condition. */
	status = start_cond(self);
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 f8dc 	bl	80084aa <start_cond>
 80082f2:	6138      	str	r0, [r7, #16]
	if (status != soft_i2c_RETURN_OK) return status;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <i2c_soft_write+0x24>
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	e02e      	b.n	800835c <i2c_soft_write+0x82>
	/* 2. Write the address with the direction bit set to 0. */
	status = write_byte(self, address);
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	b2db      	uxtb	r3, r3
 8008302:	4619      	mov	r1, r3
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f000 f9bd 	bl	8008684 <write_byte>
 800830a:	6138      	str	r0, [r7, #16]
	if (status != soft_i2c_RETURN_OK) {
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d004      	beq.n	800831c <i2c_soft_write+0x42>
		stop_cond(self);	/*Ignore the possible error of stop condition*/
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 f8fc 	bl	8008510 <stop_cond>
		return status;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	e01f      	b.n	800835c <i2c_soft_write+0x82>
	}
	/* 3. Write the data. */
	for (i = 0; i < size; i++) {
 800831c:	2300      	movs	r3, #0
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	e013      	b.n	800834a <i2c_soft_write+0x70>
		status = write_byte(self, data[i]);
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	4413      	add	r3, r2
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	4619      	mov	r1, r3
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 f9a9 	bl	8008684 <write_byte>
 8008332:	6138      	str	r0, [r7, #16]
		if (status != soft_i2c_RETURN_OK) {
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d004      	beq.n	8008344 <i2c_soft_write+0x6a>
			stop_cond(self); /*Ignore the possible error of stop condition*/
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f000 f8e8 	bl	8008510 <stop_cond>
			return status;
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	e00b      	b.n	800835c <i2c_soft_write+0x82>
	for (i = 0; i < size; i++) {
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	3301      	adds	r3, #1
 8008348:	617b      	str	r3, [r7, #20]
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	429a      	cmp	r2, r3
 8008350:	dbe7      	blt.n	8008322 <i2c_soft_write+0x48>
		}
	}
	/*4. Send the stop condition. */
	status = stop_cond(self);
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 f8dc 	bl	8008510 <stop_cond>
 8008358:	6138      	str	r0, [r7, #16]
	return status;
 800835a:	693b      	ldr	r3, [r7, #16]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <i2c_soft_mem_write>:

int i2c_soft_mem_write(soft_i2c_cfg_Config *self, int address, int memAddr, int memAddrSize, const uint8_t *data, int size){
 8008364:	b580      	push	{r7, lr}
 8008366:	b088      	sub	sp, #32
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
	int i;
	int status = soft_i2c_RETURN_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	61bb      	str	r3, [r7, #24]
	/* 1. Send the start condition. */
	status = start_cond(self);
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f000 f897 	bl	80084aa <start_cond>
 800837c:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) return status;
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <i2c_soft_mem_write+0x24>
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	e04c      	b.n	8008422 <i2c_soft_mem_write+0xbe>
	/* 2. Write the address with the direction bit set to 0. */
	status = write_byte(self, address);
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	b2db      	uxtb	r3, r3
 800838c:	4619      	mov	r1, r3
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 f978 	bl	8008684 <write_byte>
 8008394:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) {
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d004      	beq.n	80083a6 <i2c_soft_mem_write+0x42>
		stop_cond(self);	/*Ignore the possible error of stop condition*/
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 f8b7 	bl	8008510 <stop_cond>
		return status;
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	e03d      	b.n	8008422 <i2c_soft_mem_write+0xbe>
	}
	/* 3. Write the mem address. */
	for (i = memAddrSize; i > 0; i--) {
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	61fb      	str	r3, [r7, #28]
 80083aa:	e017      	b.n	80083dc <i2c_soft_mem_write+0x78>
		uint8_t addressPart = ((memAddr >> ((i-1) << 3)) & 0xFF);
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	3b01      	subs	r3, #1
 80083b0:	00db      	lsls	r3, r3, #3
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	fa42 f303 	asr.w	r3, r2, r3
 80083b8:	75fb      	strb	r3, [r7, #23]
		status = write_byte(self, addressPart);
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
 80083bc:	4619      	mov	r1, r3
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 f960 	bl	8008684 <write_byte>
 80083c4:	61b8      	str	r0, [r7, #24]
		if (status != soft_i2c_RETURN_OK) {
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d004      	beq.n	80083d6 <i2c_soft_mem_write+0x72>
			stop_cond(self); /*Ignore the possible error of stop condition*/
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 f89f 	bl	8008510 <stop_cond>
			return status;
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	e025      	b.n	8008422 <i2c_soft_mem_write+0xbe>
	for (i = memAddrSize; i > 0; i--) {
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	3b01      	subs	r3, #1
 80083da:	61fb      	str	r3, [r7, #28]
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	dce4      	bgt.n	80083ac <i2c_soft_mem_write+0x48>
		}
	}
	/* 4. Write the data. */
	for (i = 0; i < size; i++) {
 80083e2:	2300      	movs	r3, #0
 80083e4:	61fb      	str	r3, [r7, #28]
 80083e6:	e013      	b.n	8008410 <i2c_soft_mem_write+0xac>
		status = write_byte(self, data[i]);
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083ec:	4413      	add	r3, r2
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	4619      	mov	r1, r3
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 f946 	bl	8008684 <write_byte>
 80083f8:	61b8      	str	r0, [r7, #24]
		if (status != soft_i2c_RETURN_OK) {
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d004      	beq.n	800840a <i2c_soft_mem_write+0xa6>
			stop_cond(self); /*Ignore the possible error of stop condition*/
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f000 f885 	bl	8008510 <stop_cond>
			return status;
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	e00b      	b.n	8008422 <i2c_soft_mem_write+0xbe>
	for (i = 0; i < size; i++) {
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	3301      	adds	r3, #1
 800840e:	61fb      	str	r3, [r7, #28]
 8008410:	69fa      	ldr	r2, [r7, #28]
 8008412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008414:	429a      	cmp	r2, r3
 8008416:	dbe7      	blt.n	80083e8 <i2c_soft_mem_write+0x84>
		}
	}
	/*5. Send the stop condition. */
	status = stop_cond(self);
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f000 f879 	bl	8008510 <stop_cond>
 800841e:	61b8      	str	r0, [r7, #24]
	return status;
 8008420:	69bb      	ldr	r3, [r7, #24]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3720      	adds	r7, #32
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <busy_wait_us>:
    if (status != soft_i2c_RETURN_OK) return status;
    return res;
}

/* Helper ----------------------------------------------------------------------*/
static void busy_wait_us(soft_i2c_cfg_Config *self, uint32_t time_us){
 800842a:	b580      	push	{r7, lr}
 800842c:	b082      	sub	sp, #8
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
	self->timer_us = time_us;
 8008434:	683a      	ldr	r2, [r7, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	625a      	str	r2, [r3, #36]	; 0x24
	//TODO: Enable timer
	soft_i2c_bsp_timStart(&self->timer);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3310      	adds	r3, #16
 800843e:	4618      	mov	r0, r3
 8008440:	f7ff fe6c 	bl	800811c <soft_i2c_bsp_timStart>
//	htim16.Instance->CR1 &= ~TIM_CR1_UDIS;
	while(self->timer_us > 0);
 8008444:	bf00      	nop
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844a:	2b00      	cmp	r3, #0
 800844c:	dcfb      	bgt.n	8008446 <busy_wait_us+0x1c>
	//TODO: stop timer
	soft_i2c_bsp_timStop(&self->timer);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	3310      	adds	r3, #16
 8008452:	4618      	mov	r0, r3
 8008454:	f7ff fe74 	bl	8008140 <soft_i2c_bsp_timStop>
//	htim16.Instance->CR1 |= TIM_CR1_UDIS;

}
 8008458:	bf00      	nop
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <wait_for_clock_stretching_end>:

static int wait_for_clock_stretching_end(soft_i2c_cfg_Config *self){
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
    uint32_t clock_stretching_us = 0;
 8008468:	2300      	movs	r3, #0
 800846a:	60fb      	str	r3, [r7, #12]
    do {
        if (soft_i2c_bsp_readGpio(&self->scl_pin) == 1) {
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4618      	mov	r0, r3
 8008470:	f7ff fe04 	bl	800807c <soft_i2c_bsp_readGpio>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <wait_for_clock_stretching_end+0x1e>
            return soft_i2c_RETURN_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	e011      	b.n	80084a2 <wait_for_clock_stretching_end+0x42>
        }
        busy_wait_us(self, self->clock_stretching_sleep_us);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7ff ffd0 	bl	800842a <busy_wait_us>
        clock_stretching_us += self->clock_stretching_sleep_us;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	4413      	add	r3, r2
 8008492:	60fb      	str	r3, [r7, #12]
    } while (clock_stretching_us < self->max_clock_stretching_us);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	69da      	ldr	r2, [r3, #28]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	429a      	cmp	r2, r3
 800849c:	d8e6      	bhi.n	800846c <wait_for_clock_stretching_end+0xc>
    return soft_i2c_RETURN_CLOCK_STRETCH;
 800849e:	f06f 0302 	mvn.w	r3, #2
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <start_cond>:

static int start_cond(soft_i2c_cfg_Config *self){
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b082      	sub	sp, #8
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
	soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_INPUT, &self->scl_pin);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4619      	mov	r1, r3
 80084b6:	2000      	movs	r0, #0
 80084b8:	f7ff fda1 	bl	8007ffe <soft_i2c_bsp_setGpioMode>
	/* The line is busy if SDA is low. */
	soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_INPUT, &self->sda_pin);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	3308      	adds	r3, #8
 80084c0:	4619      	mov	r1, r3
 80084c2:	2000      	movs	r0, #0
 80084c4:	f7ff fd9b 	bl	8007ffe <soft_i2c_bsp_setGpioMode>
    if (soft_i2c_bsp_readGpio(&self->sda_pin) == 0) {
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3308      	adds	r3, #8
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7ff fdd5 	bl	800807c <soft_i2c_bsp_readGpio>
 80084d2:	4603      	mov	r3, r0
 80084d4:	f083 0301 	eor.w	r3, r3, #1
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d002      	beq.n	80084e4 <start_cond+0x3a>
        return soft_i2c_RETURN_BUSY;
 80084de:	f06f 0301 	mvn.w	r3, #1
 80084e2:	e011      	b.n	8008508 <start_cond+0x5e>
    }
    /* SCL is high, set SDA from 1 to 0. */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_OUTPUT, &self->sda_pin);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3308      	adds	r3, #8
 80084e8:	4619      	mov	r1, r3
 80084ea:	2001      	movs	r0, #1
 80084ec:	f7ff fd87 	bl	8007ffe <soft_i2c_bsp_setGpioMode>
    busy_wait_us(self, self->baudrate_us);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	4619      	mov	r1, r3
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f7ff ff97 	bl	800842a <busy_wait_us>
    /* Set SCL low as preparation for the first transfer. */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_OUTPUT, &self->scl_pin);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4619      	mov	r1, r3
 8008500:	2001      	movs	r0, #1
 8008502:	f7ff fd7c 	bl	8007ffe <soft_i2c_bsp_setGpioMode>
    return soft_i2c_RETURN_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <stop_cond>:

static int stop_cond(soft_i2c_cfg_Config *self){
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
    /* Set SDA to 0. */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_OUTPUT, &self->sda_pin);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	3308      	adds	r3, #8
 800851c:	4619      	mov	r1, r3
 800851e:	2001      	movs	r0, #1
 8008520:	f7ff fd6d 	bl	8007ffe <soft_i2c_bsp_setGpioMode>
    busy_wait_us(self, self->baudrate_us);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7ff ff7d 	bl	800842a <busy_wait_us>
    /* SDA to 1. */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_INPUT, &self->scl_pin);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4619      	mov	r1, r3
 8008534:	2000      	movs	r0, #0
 8008536:	f7ff fd62 	bl	8007ffe <soft_i2c_bsp_setGpioMode>
    /* Clock stretching. */
    if (wait_for_clock_stretching_end(self) != soft_i2c_RETURN_OK) {
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7ff ff90 	bl	8008460 <wait_for_clock_stretching_end>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d002      	beq.n	800854c <stop_cond+0x3c>
        return soft_i2c_RETURN_CLOCK_STRETCH;
 8008546:	f06f 0302 	mvn.w	r3, #2
 800854a:	e026      	b.n	800859a <stop_cond+0x8a>
    }
    /* Stop bit setup time, minimum 4us. */
    busy_wait_us(self, self->baudrate_us);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7ff ff69 	bl	800842a <busy_wait_us>
    /* SCL is high, set SDA from 0 to 1. */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_INPUT, &self->sda_pin);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3308      	adds	r3, #8
 800855c:	4619      	mov	r1, r3
 800855e:	2000      	movs	r0, #0
 8008560:	f7ff fd4d 	bl	8007ffe <soft_i2c_bsp_setGpioMode>
    busy_wait_us(self, self->baudrate_us);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7ff ff5d 	bl	800842a <busy_wait_us>
    /* Make sure no device is pulling SDA low. */
    if (soft_i2c_bsp_readGpio(&self->sda_pin) == 0) {
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3308      	adds	r3, #8
 8008574:	4618      	mov	r0, r3
 8008576:	f7ff fd81 	bl	800807c <soft_i2c_bsp_readGpio>
 800857a:	4603      	mov	r3, r0
 800857c:	f083 0301 	eor.w	r3, r3, #1
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d002      	beq.n	800858c <stop_cond+0x7c>
        return soft_i2c_RETURN_BUSY;
 8008586:	f06f 0301 	mvn.w	r3, #1
 800858a:	e006      	b.n	800859a <stop_cond+0x8a>
    }
    busy_wait_us(self, self->baudrate_us);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff ff49 	bl	800842a <busy_wait_us>
    return soft_i2c_RETURN_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <write_bit>:

static int write_bit(soft_i2c_cfg_Config *self, int value){
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b082      	sub	sp, #8
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
    if (value == 1) soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_INPUT, &self->sda_pin);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d106      	bne.n	80085c0 <write_bit+0x1e>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	3308      	adds	r3, #8
 80085b6:	4619      	mov	r1, r3
 80085b8:	2000      	movs	r0, #0
 80085ba:	f7ff fd20 	bl	8007ffe <soft_i2c_bsp_setGpioMode>
 80085be:	e005      	b.n	80085cc <write_bit+0x2a>
    else soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_OUTPUT, &self->sda_pin);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	3308      	adds	r3, #8
 80085c4:	4619      	mov	r1, r3
 80085c6:	2001      	movs	r0, #1
 80085c8:	f7ff fd19 	bl	8007ffe <soft_i2c_bsp_setGpioMode>
    /* SDA change propagation delay. */
    busy_wait_us(self, self->baudrate_us);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7ff ff29 	bl	800842a <busy_wait_us>
    /* Set SCL high to indicate a new valid SDA value is available */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_INPUT, &self->scl_pin);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4619      	mov	r1, r3
 80085dc:	2000      	movs	r0, #0
 80085de:	f7ff fd0e 	bl	8007ffe <soft_i2c_bsp_setGpioMode>
    /* Wait for SDA value to be read by slave, minimum of 4us for
       standard mode. */
    busy_wait_us(self, self->baudrate_us);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7ff ff1e 	bl	800842a <busy_wait_us>
    /* Clock stretching */
    if (wait_for_clock_stretching_end(self) != soft_i2c_RETURN_OK) {
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7ff ff36 	bl	8008460 <wait_for_clock_stretching_end>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d002      	beq.n	8008600 <write_bit+0x5e>
        return soft_i2c_RETURN_CLOCK_STRETCH;
 80085fa:	f06f 0302 	mvn.w	r3, #2
 80085fe:	e005      	b.n	800860c <write_bit+0x6a>
    }
    /* Clear the SCL to low in preparation for next change. */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_OUTPUT, &self->scl_pin);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4619      	mov	r1, r3
 8008604:	2001      	movs	r0, #1
 8008606:	f7ff fcfa 	bl	8007ffe <soft_i2c_bsp_setGpioMode>
    return soft_i2c_RETURN_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3708      	adds	r7, #8
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <read_bit>:

static int read_bit(soft_i2c_cfg_Config *self, uint8_t *value_p){
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
    /* Let the slave drive data. */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_INPUT, &self->sda_pin);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	3308      	adds	r3, #8
 8008622:	4619      	mov	r1, r3
 8008624:	2000      	movs	r0, #0
 8008626:	f7ff fcea 	bl	8007ffe <soft_i2c_bsp_setGpioMode>
    /* Wait for SDA value to be written by slave, minimum of 4us for
       standard mode. */
    busy_wait_us(self, self->baudrate_us);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7ff fefa 	bl	800842a <busy_wait_us>
    /* Set SCL high to indicate a new valid SDA value is available. */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_INPUT, &self->scl_pin);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4619      	mov	r1, r3
 800863a:	2000      	movs	r0, #0
 800863c:	f7ff fcdf 	bl	8007ffe <soft_i2c_bsp_setGpioMode>
    /* Clock stretching. */
    if (wait_for_clock_stretching_end(self) != soft_i2c_RETURN_OK) {
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f7ff ff0d 	bl	8008460 <wait_for_clock_stretching_end>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d002      	beq.n	8008652 <read_bit+0x3e>
        return soft_i2c_RETURN_CLOCK_STRETCH;
 800864c:	f06f 0302 	mvn.w	r3, #2
 8008650:	e014      	b.n	800867c <read_bit+0x68>
    }
    /* Wait for SDA value to be written by slave, minimum of 4us for
       standard mode. */
    busy_wait_us(self, self->baudrate_us);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7ff fee6 	bl	800842a <busy_wait_us>
    /* SCL is high, read out bit. */
    *value_p = soft_i2c_bsp_readGpio(&self->sda_pin);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	3308      	adds	r3, #8
 8008662:	4618      	mov	r0, r3
 8008664:	f7ff fd0a 	bl	800807c <soft_i2c_bsp_readGpio>
 8008668:	4603      	mov	r3, r0
 800866a:	461a      	mov	r2, r3
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	701a      	strb	r2, [r3, #0]
    /* Set SCL low in preparation for next operation. */
    soft_i2c_bsp_setGpioMode(soft_i2c_bsp_GPIO_MODE_OUTPUT, &self->scl_pin);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4619      	mov	r1, r3
 8008674:	2001      	movs	r0, #1
 8008676:	f7ff fcc2 	bl	8007ffe <soft_i2c_bsp_setGpioMode>
    return soft_i2c_RETURN_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <write_byte>:

static int write_byte(soft_i2c_cfg_Config *self, uint8_t byte){
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	70fb      	strb	r3, [r7, #3]
    uint8_t data;
    int status = soft_i2c_RETURN_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 8; i++) {
 8008694:	2300      	movs	r3, #0
 8008696:	617b      	str	r3, [r7, #20]
 8008698:	e014      	b.n	80086c4 <write_byte+0x40>
    	status = write_bit(self, (byte & 0x80) != 0);
 800869a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	09db      	lsrs	r3, r3, #7
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	4619      	mov	r1, r3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7ff ff7b 	bl	80085a2 <write_bit>
 80086ac:	6138      	str	r0, [r7, #16]
        if (status != soft_i2c_RETURN_OK) return status;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <write_byte+0x34>
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	e01b      	b.n	80086f0 <write_byte+0x6c>
        byte <<= 1;
 80086b8:	78fb      	ldrb	r3, [r7, #3]
 80086ba:	005b      	lsls	r3, r3, #1
 80086bc:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 8; i++) {
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	3301      	adds	r3, #1
 80086c2:	617b      	str	r3, [r7, #20]
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	2b07      	cmp	r3, #7
 80086c8:	dde7      	ble.n	800869a <write_byte+0x16>
    }
    status = read_bit(self, &data);
 80086ca:	f107 030f 	add.w	r3, r7, #15
 80086ce:	4619      	mov	r1, r3
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7ff ff9f 	bl	8008614 <read_bit>
 80086d6:	6138      	str	r0, [r7, #16]
    if (status != soft_i2c_RETURN_OK) return status;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <write_byte+0x5e>
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	e006      	b.n	80086f0 <write_byte+0x6c>
    if(data == 0) return soft_i2c_RETURN_OK;
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d101      	bne.n	80086ec <write_byte+0x68>
 80086e8:	2300      	movs	r3, #0
 80086ea:	e001      	b.n	80086f0 <write_byte+0x6c>
    else return soft_i2c_RETURN_NACK;
 80086ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <read_byte>:

static int read_byte(soft_i2c_cfg_Config *self, uint8_t *byte_p, int ack){
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
    uint8_t bit = 0;
 8008704:	2300      	movs	r3, #0
 8008706:	75fb      	strb	r3, [r7, #23]
    *byte_p = 0;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2200      	movs	r2, #0
 800870c:	701a      	strb	r2, [r3, #0]
    int status = soft_i2c_RETURN_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < 8; i++) {
 8008712:	2300      	movs	r3, #0
 8008714:	61fb      	str	r3, [r7, #28]
 8008716:	e019      	b.n	800874c <read_byte+0x54>
    	status = read_bit(self, &bit);
 8008718:	f107 0317 	add.w	r3, r7, #23
 800871c:	4619      	mov	r1, r3
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f7ff ff78 	bl	8008614 <read_bit>
 8008724:	61b8      	str	r0, [r7, #24]
        if (status != 0) return status;
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <read_byte+0x38>
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	e021      	b.n	8008774 <read_byte+0x7c>
        *byte_p = ((*byte_p << 1 ) | bit);
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	b25a      	sxtb	r2, r3
 8008738:	7dfb      	ldrb	r3, [r7, #23]
 800873a:	b25b      	sxtb	r3, r3
 800873c:	4313      	orrs	r3, r2
 800873e:	b25b      	sxtb	r3, r3
 8008740:	b2da      	uxtb	r2, r3
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	3301      	adds	r3, #1
 800874a:	61fb      	str	r3, [r7, #28]
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	2b07      	cmp	r3, #7
 8008750:	dde2      	ble.n	8008718 <read_byte+0x20>
    }
    /* Acknowledge that the byte was successfully received. */
    status = write_bit(self, !ack);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	bf0c      	ite	eq
 8008758:	2301      	moveq	r3, #1
 800875a:	2300      	movne	r3, #0
 800875c:	b2db      	uxtb	r3, r3
 800875e:	4619      	mov	r1, r3
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f7ff ff1e 	bl	80085a2 <write_bit>
 8008766:	61b8      	str	r0, [r7, #24]
    if (status != soft_i2c_RETURN_OK) return status;
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <read_byte+0x7a>
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	e000      	b.n	8008774 <read_byte+0x7c>
    return soft_i2c_RETURN_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3720      	adds	r7, #32
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	7c1b      	ldrb	r3, [r3, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d115      	bne.n	80087c0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008798:	2202      	movs	r2, #2
 800879a:	2181      	movs	r1, #129	; 0x81
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f002 fe09 	bl	800b3b4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2201      	movs	r2, #1
 80087a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80087a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087ac:	2202      	movs	r2, #2
 80087ae:	2101      	movs	r1, #1
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f002 fdff 	bl	800b3b4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80087be:	e012      	b.n	80087e6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80087c0:	2340      	movs	r3, #64	; 0x40
 80087c2:	2202      	movs	r2, #2
 80087c4:	2181      	movs	r1, #129	; 0x81
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f002 fdf4 	bl	800b3b4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80087d2:	2340      	movs	r3, #64	; 0x40
 80087d4:	2202      	movs	r2, #2
 80087d6:	2101      	movs	r1, #1
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f002 fdeb 	bl	800b3b4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80087e6:	2308      	movs	r3, #8
 80087e8:	2203      	movs	r2, #3
 80087ea:	2182      	movs	r1, #130	; 0x82
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f002 fde1 	bl	800b3b4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2201      	movs	r2, #1
 80087f6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80087f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80087fc:	f002 ffd4 	bl	800b7a8 <USBD_static_malloc>
 8008800:	4602      	mov	r2, r0
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800880e:	2b00      	cmp	r3, #0
 8008810:	d102      	bne.n	8008818 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008812:	2301      	movs	r3, #1
 8008814:	73fb      	strb	r3, [r7, #15]
 8008816:	e026      	b.n	8008866 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800881e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2200      	movs	r2, #0
 800882e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2200      	movs	r2, #0
 8008836:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	7c1b      	ldrb	r3, [r3, #16]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d109      	bne.n	8008856 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800884c:	2101      	movs	r1, #1
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f002 ff26 	bl	800b6a0 <USBD_LL_PrepareReceive>
 8008854:	e007      	b.n	8008866 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800885c:	2340      	movs	r3, #64	; 0x40
 800885e:	2101      	movs	r1, #1
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f002 ff1d 	bl	800b6a0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008866:	7bfb      	ldrb	r3, [r7, #15]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	460b      	mov	r3, r1
 800887a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800887c:	2300      	movs	r3, #0
 800887e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008880:	2181      	movs	r1, #129	; 0x81
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f002 fdd4 	bl	800b430 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800888e:	2101      	movs	r1, #1
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f002 fdcd 	bl	800b430 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800889e:	2182      	movs	r1, #130	; 0x82
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f002 fdc5 	bl	800b430 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00e      	beq.n	80088d4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80088c6:	4618      	mov	r0, r3
 80088c8:	f002 ff7c 	bl	800b7c4 <USBD_static_free>
    pdev->pClassData = NULL;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b086      	sub	sp, #24
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
 80088e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80088ee:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80088f0:	2300      	movs	r3, #0
 80088f2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008904:	2b00      	cmp	r3, #0
 8008906:	d039      	beq.n	800897c <USBD_CDC_Setup+0x9e>
 8008908:	2b20      	cmp	r3, #32
 800890a:	d17c      	bne.n	8008a06 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	88db      	ldrh	r3, [r3, #6]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d029      	beq.n	8008968 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	b25b      	sxtb	r3, r3
 800891a:	2b00      	cmp	r3, #0
 800891c:	da11      	bge.n	8008942 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800892a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800892c:	683a      	ldr	r2, [r7, #0]
 800892e:	88d2      	ldrh	r2, [r2, #6]
 8008930:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008932:	6939      	ldr	r1, [r7, #16]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	88db      	ldrh	r3, [r3, #6]
 8008938:	461a      	mov	r2, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f001 f974 	bl	8009c28 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8008940:	e068      	b.n	8008a14 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	785a      	ldrb	r2, [r3, #1]
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	88db      	ldrh	r3, [r3, #6]
 8008950:	b2da      	uxtb	r2, r3
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008958:	6939      	ldr	r1, [r7, #16]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	88db      	ldrh	r3, [r3, #6]
 800895e:	461a      	mov	r2, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f001 f98f 	bl	8009c84 <USBD_CtlPrepareRx>
    break;
 8008966:	e055      	b.n	8008a14 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	7850      	ldrb	r0, [r2, #1]
 8008974:	2200      	movs	r2, #0
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	4798      	blx	r3
    break;
 800897a:	e04b      	b.n	8008a14 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	785b      	ldrb	r3, [r3, #1]
 8008980:	2b0a      	cmp	r3, #10
 8008982:	d017      	beq.n	80089b4 <USBD_CDC_Setup+0xd6>
 8008984:	2b0b      	cmp	r3, #11
 8008986:	d029      	beq.n	80089dc <USBD_CDC_Setup+0xfe>
 8008988:	2b00      	cmp	r3, #0
 800898a:	d133      	bne.n	80089f4 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008992:	2b03      	cmp	r3, #3
 8008994:	d107      	bne.n	80089a6 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8008996:	f107 030c 	add.w	r3, r7, #12
 800899a:	2202      	movs	r2, #2
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 f942 	bl	8009c28 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80089a4:	e02e      	b.n	8008a04 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f001 f8d2 	bl	8009b52 <USBD_CtlError>
			  ret = USBD_FAIL;
 80089ae:	2302      	movs	r3, #2
 80089b0:	75fb      	strb	r3, [r7, #23]
      break;
 80089b2:	e027      	b.n	8008a04 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	d107      	bne.n	80089ce <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80089be:	f107 030f 	add.w	r3, r7, #15
 80089c2:	2201      	movs	r2, #1
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f001 f92e 	bl	8009c28 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80089cc:	e01a      	b.n	8008a04 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f001 f8be 	bl	8009b52 <USBD_CtlError>
			  ret = USBD_FAIL;
 80089d6:	2302      	movs	r3, #2
 80089d8:	75fb      	strb	r3, [r7, #23]
      break;
 80089da:	e013      	b.n	8008a04 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	d00d      	beq.n	8008a02 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f001 f8b2 	bl	8009b52 <USBD_CtlError>
			  ret = USBD_FAIL;
 80089ee:	2302      	movs	r3, #2
 80089f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80089f2:	e006      	b.n	8008a02 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f001 f8ab 	bl	8009b52 <USBD_CtlError>
      ret = USBD_FAIL;
 80089fc:	2302      	movs	r3, #2
 80089fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008a00:	e000      	b.n	8008a04 <USBD_CDC_Setup+0x126>
      break;
 8008a02:	bf00      	nop
    }
    break;
 8008a04:	e006      	b.n	8008a14 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 f8a2 	bl	8009b52 <USBD_CtlError>
    ret = USBD_FAIL;
 8008a0e:	2302      	movs	r3, #2
 8008a10:	75fb      	strb	r3, [r7, #23]
    break;
 8008a12:	bf00      	nop
  }

  return ret;
 8008a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3718      	adds	r7, #24
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	460b      	mov	r3, r1
 8008a28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008a30:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008a38:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d037      	beq.n	8008ab4 <USBD_CDC_DataIn+0x96>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008a44:	78fa      	ldrb	r2, [r7, #3]
 8008a46:	6879      	ldr	r1, [r7, #4]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	440b      	add	r3, r1
 8008a52:	331c      	adds	r3, #28
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d026      	beq.n	8008aa8 <USBD_CDC_DataIn+0x8a>
 8008a5a:	78fa      	ldrb	r2, [r7, #3]
 8008a5c:	6879      	ldr	r1, [r7, #4]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	440b      	add	r3, r1
 8008a68:	331c      	adds	r3, #28
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	78fa      	ldrb	r2, [r7, #3]
 8008a6e:	68b9      	ldr	r1, [r7, #8]
 8008a70:	0152      	lsls	r2, r2, #5
 8008a72:	440a      	add	r2, r1
 8008a74:	3238      	adds	r2, #56	; 0x38
 8008a76:	6812      	ldr	r2, [r2, #0]
 8008a78:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a7c:	fb02 f201 	mul.w	r2, r2, r1
 8008a80:	1a9b      	subs	r3, r3, r2
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d110      	bne.n	8008aa8 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008a86:	78fa      	ldrb	r2, [r7, #3]
 8008a88:	6879      	ldr	r1, [r7, #4]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	440b      	add	r3, r1
 8008a94:	331c      	adds	r3, #28
 8008a96:	2200      	movs	r2, #0
 8008a98:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8008a9a:	78f9      	ldrb	r1, [r7, #3]
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f002 fdc3 	bl	800b62c <USBD_LL_Transmit>
 8008aa6:	e003      	b.n	8008ab0 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	e000      	b.n	8008ab6 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8008ab4:	2302      	movs	r3, #2
  }
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b084      	sub	sp, #16
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008ad0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8008ad2:	78fb      	ldrb	r3, [r7, #3]
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f002 fe1c 	bl	800b714 <USBD_LL_GetRxDataSize>
 8008adc:	4602      	mov	r2, r0
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00d      	beq.n	8008b0a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008b02:	4611      	mov	r1, r2
 8008b04:	4798      	blx	r3

    return USBD_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	e000      	b.n	8008b0c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008b0a:	2302      	movs	r3, #2
  }
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008b22:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d015      	beq.n	8008b5a <USBD_CDC_EP0_RxReady+0x46>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008b34:	2bff      	cmp	r3, #255	; 0xff
 8008b36:	d010      	beq.n	8008b5a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008b46:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b4e:	b292      	uxth	r2, r2
 8008b50:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	22ff      	movs	r2, #255	; 0xff
 8008b56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2243      	movs	r2, #67	; 0x43
 8008b70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008b72:	4b03      	ldr	r3, [pc, #12]	; (8008b80 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr
 8008b80:	20000868 	.word	0x20000868

08008b84 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2243      	movs	r2, #67	; 0x43
 8008b90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008b92:	4b03      	ldr	r3, [pc, #12]	; (8008ba0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	20000824 	.word	0x20000824

08008ba4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2243      	movs	r2, #67	; 0x43
 8008bb0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008bb2:	4b03      	ldr	r3, [pc, #12]	; (8008bc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	200008ac 	.word	0x200008ac

08008bc4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	220a      	movs	r2, #10
 8008bd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008bd2:	4b03      	ldr	r3, [pc, #12]	; (8008be0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	200007e0 	.word	0x200007e0

08008be4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008bee:	2302      	movs	r3, #2
 8008bf0:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d005      	beq.n	8008c04 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3714      	adds	r7, #20
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b087      	sub	sp, #28
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008c26:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008c30:	88fa      	ldrh	r2, [r7, #6]
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	371c      	adds	r7, #28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b085      	sub	sp, #20
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008c56:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b084      	sub	sp, #16
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008c7c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d017      	beq.n	8008cb8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	7c1b      	ldrb	r3, [r3, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d109      	bne.n	8008ca4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c9a:	2101      	movs	r1, #1
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f002 fcff 	bl	800b6a0 <USBD_LL_PrepareReceive>
 8008ca2:	e007      	b.n	8008cb4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008caa:	2340      	movs	r3, #64	; 0x40
 8008cac:	2101      	movs	r1, #1
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f002 fcf6 	bl	800b6a0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	e000      	b.n	8008cba <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008cb8:	2302      	movs	r3, #2
  }
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	60f8      	str	r0, [r7, #12]
 8008cca:	60b9      	str	r1, [r7, #8]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	e01a      	b.n	8008d10 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d003      	beq.n	8008cec <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d003      	beq.n	8008cfa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	79fa      	ldrb	r2, [r7, #7]
 8008d06:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f002 fabd 	bl	800b288 <USBD_LL_Init>

  return USBD_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d006      	beq.n	8008d3a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	73fb      	strb	r3, [r7, #15]
 8008d38:	e001      	b.n	8008d3e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f002 fafb 	bl	800b350 <USBD_LL_Start>

  return USBD_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b084      	sub	sp, #16
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	460b      	mov	r3, r1
 8008d84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008d86:	2302      	movs	r3, #2
 8008d88:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00c      	beq.n	8008dae <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	78fa      	ldrb	r2, [r7, #3]
 8008d9e:	4611      	mov	r1, r2
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	4798      	blx	r3
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	78fa      	ldrb	r2, [r7, #3]
 8008dce:	4611      	mov	r1, r2
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	4798      	blx	r3
  return USBD_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b082      	sub	sp, #8
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f000 fe71 	bl	8009ad8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008e04:	461a      	mov	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008e12:	f003 031f 	and.w	r3, r3, #31
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d00c      	beq.n	8008e34 <USBD_LL_SetupStage+0x56>
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d302      	bcc.n	8008e24 <USBD_LL_SetupStage+0x46>
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d010      	beq.n	8008e44 <USBD_LL_SetupStage+0x66>
 8008e22:	e017      	b.n	8008e54 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f9c5 	bl	80091bc <USBD_StdDevReq>
    break;
 8008e32:	e01a      	b.n	8008e6a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fa27 	bl	8009290 <USBD_StdItfReq>
    break;
 8008e42:	e012      	b.n	8008e6a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fa65 	bl	800931c <USBD_StdEPReq>
    break;
 8008e52:	e00a      	b.n	8008e6a <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008e5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	4619      	mov	r1, r3
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f002 fb1a 	bl	800b49c <USBD_LL_StallEP>
    break;
 8008e68:	bf00      	nop
  }

  return USBD_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	607a      	str	r2, [r7, #4]
 8008e80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008e82:	7afb      	ldrb	r3, [r7, #11]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d147      	bne.n	8008f18 <USBD_LL_DataOutStage+0xa4>
  {
    pep = &pdev->ep_out[0];
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008e8e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	d134      	bne.n	8008f04 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	68da      	ldr	r2, [r3, #12]
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d919      	bls.n	8008eda <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	68da      	ldr	r2, [r3, #12]
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	1ad2      	subs	r2, r2, r3
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	68da      	ldr	r2, [r3, #12]
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d203      	bcs.n	8008ec8 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	e002      	b.n	8008ece <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	461a      	mov	r2, r3
 8008ed0:	6879      	ldr	r1, [r7, #4]
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f000 fef4 	bl	8009cc0 <USBD_CtlContinueRx>
 8008ed8:	e034      	b.n	8008f44 <USBD_LL_DataOutStage+0xd0>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00a      	beq.n	8008efc <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008eec:	2b03      	cmp	r3, #3
 8008eee:	d105      	bne.n	8008efc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f000 fef1 	bl	8009ce4 <USBD_CtlSendStatus>
 8008f02:	e01f      	b.n	8008f44 <USBD_LL_DataOutStage+0xd0>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008f0a:	2b05      	cmp	r3, #5
 8008f0c:	d11a      	bne.n	8008f44 <USBD_LL_DataOutStage+0xd0>
      {
        USBD_LL_StallEP(pdev, 0U);
 8008f0e:	2100      	movs	r1, #0
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f002 fac3 	bl	800b49c <USBD_LL_StallEP>
 8008f16:	e015      	b.n	8008f44 <USBD_LL_DataOutStage+0xd0>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00d      	beq.n	8008f40 <USBD_LL_DataOutStage+0xcc>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d108      	bne.n	8008f40 <USBD_LL_DataOutStage+0xcc>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	7afa      	ldrb	r2, [r7, #11]
 8008f38:	4611      	mov	r1, r2
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	4798      	blx	r3
 8008f3e:	e001      	b.n	8008f44 <USBD_LL_DataOutStage+0xd0>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008f40:	2302      	movs	r3, #2
 8008f42:	e000      	b.n	8008f46 <USBD_LL_DataOutStage+0xd2>
  }

  return USBD_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3718      	adds	r7, #24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b086      	sub	sp, #24
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	60f8      	str	r0, [r7, #12]
 8008f56:	460b      	mov	r3, r1
 8008f58:	607a      	str	r2, [r7, #4]
 8008f5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008f5c:	7afb      	ldrb	r3, [r7, #11]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d17f      	bne.n	8009062 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	3314      	adds	r3, #20
 8008f66:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d15c      	bne.n	800902c <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	68da      	ldr	r2, [r3, #12]
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d915      	bls.n	8008faa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	68da      	ldr	r2, [r3, #12]
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	1ad2      	subs	r2, r2, r3
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	461a      	mov	r2, r3
 8008f94:	6879      	ldr	r1, [r7, #4]
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f000 fe62 	bl	8009c60 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f002 fb7c 	bl	800b6a0 <USBD_LL_PrepareReceive>
 8008fa8:	e04e      	b.n	8009048 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	6912      	ldr	r2, [r2, #16]
 8008fb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fb6:	fb02 f201 	mul.w	r2, r2, r1
 8008fba:	1a9b      	subs	r3, r3, r2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d11c      	bne.n	8008ffa <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	689a      	ldr	r2, [r3, #8]
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d316      	bcc.n	8008ffa <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	689a      	ldr	r2, [r3, #8]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d20f      	bcs.n	8008ffa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008fda:	2200      	movs	r2, #0
 8008fdc:	2100      	movs	r1, #0
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f000 fe3e 	bl	8009c60 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008fec:	2300      	movs	r3, #0
 8008fee:	2200      	movs	r2, #0
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f002 fb54 	bl	800b6a0 <USBD_LL_PrepareReceive>
 8008ff8:	e026      	b.n	8009048 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00a      	beq.n	800901c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800900c:	2b03      	cmp	r3, #3
 800900e:	d105      	bne.n	800901c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800901c:	2180      	movs	r1, #128	; 0x80
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f002 fa3c 	bl	800b49c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f000 fe70 	bl	8009d0a <USBD_CtlReceiveStatus>
 800902a:	e00d      	b.n	8009048 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009032:	2b04      	cmp	r3, #4
 8009034:	d004      	beq.n	8009040 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800903c:	2b00      	cmp	r3, #0
 800903e:	d103      	bne.n	8009048 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009040:	2180      	movs	r1, #128	; 0x80
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f002 fa2a 	bl	800b49c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800904e:	2b01      	cmp	r3, #1
 8009050:	d11d      	bne.n	800908e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f7ff fe86 	bl	8008d64 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8009060:	e015      	b.n	800908e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00d      	beq.n	800908a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8009074:	2b03      	cmp	r3, #3
 8009076:	d108      	bne.n	800908a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800907e:	695b      	ldr	r3, [r3, #20]
 8009080:	7afa      	ldrb	r2, [r7, #11]
 8009082:	4611      	mov	r1, r2
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	4798      	blx	r3
 8009088:	e001      	b.n	800908e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800908a:	2302      	movs	r3, #2
 800908c:	e000      	b.n	8009090 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090a0:	2340      	movs	r3, #64	; 0x40
 80090a2:	2200      	movs	r2, #0
 80090a4:	2100      	movs	r1, #0
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f002 f984 	bl	800b3b4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2240      	movs	r2, #64	; 0x40
 80090b8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090bc:	2340      	movs	r3, #64	; 0x40
 80090be:	2200      	movs	r2, #0
 80090c0:	2180      	movs	r1, #128	; 0x80
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f002 f976 	bl	800b3b4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2240      	movs	r2, #64	; 0x40
 80090d2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d009      	beq.n	8009110 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	6852      	ldr	r2, [r2, #4]
 8009108:	b2d2      	uxtb	r2, r2
 800910a:	4611      	mov	r1, r2
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	4798      	blx	r3
  }

  return USBD_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800911a:	b480      	push	{r7}
 800911c:	b083      	sub	sp, #12
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	460b      	mov	r3, r1
 8009124:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	78fa      	ldrb	r2, [r7, #3]
 800912a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800913a:	b480      	push	{r7}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2204      	movs	r2, #4
 8009152:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b082      	sub	sp, #8
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009194:	2b03      	cmp	r3, #3
 8009196:	d10b      	bne.n	80091b0 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800919e:	69db      	ldr	r3, [r3, #28]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d005      	beq.n	80091b0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80091aa:	69db      	ldr	r3, [r3, #28]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091d2:	2b20      	cmp	r3, #32
 80091d4:	d004      	beq.n	80091e0 <USBD_StdDevReq+0x24>
 80091d6:	2b40      	cmp	r3, #64	; 0x40
 80091d8:	d002      	beq.n	80091e0 <USBD_StdDevReq+0x24>
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d008      	beq.n	80091f0 <USBD_StdDevReq+0x34>
 80091de:	e04c      	b.n	800927a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	4798      	blx	r3
    break;
 80091ee:	e049      	b.n	8009284 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	785b      	ldrb	r3, [r3, #1]
 80091f4:	2b09      	cmp	r3, #9
 80091f6:	d83a      	bhi.n	800926e <USBD_StdDevReq+0xb2>
 80091f8:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <USBD_StdDevReq+0x44>)
 80091fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fe:	bf00      	nop
 8009200:	08009251 	.word	0x08009251
 8009204:	08009265 	.word	0x08009265
 8009208:	0800926f 	.word	0x0800926f
 800920c:	0800925b 	.word	0x0800925b
 8009210:	0800926f 	.word	0x0800926f
 8009214:	08009233 	.word	0x08009233
 8009218:	08009229 	.word	0x08009229
 800921c:	0800926f 	.word	0x0800926f
 8009220:	08009247 	.word	0x08009247
 8009224:	0800923d 	.word	0x0800923d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f9d2 	bl	80095d4 <USBD_GetDescriptor>
      break;
 8009230:	e022      	b.n	8009278 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8009232:	6839      	ldr	r1, [r7, #0]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fae3 	bl	8009800 <USBD_SetAddress>
      break;
 800923a:	e01d      	b.n	8009278 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fb20 	bl	8009884 <USBD_SetConfig>
      break;
 8009244:	e018      	b.n	8009278 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fba9 	bl	80099a0 <USBD_GetConfig>
      break;
 800924e:	e013      	b.n	8009278 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fbd8 	bl	8009a08 <USBD_GetStatus>
      break;
 8009258:	e00e      	b.n	8009278 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fc06 	bl	8009a6e <USBD_SetFeature>
      break;
 8009262:	e009      	b.n	8009278 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fc15 	bl	8009a96 <USBD_ClrFeature>
      break;
 800926c:	e004      	b.n	8009278 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fc6e 	bl	8009b52 <USBD_CtlError>
      break;
 8009276:	bf00      	nop
    }
    break;
 8009278:	e004      	b.n	8009284 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fc68 	bl	8009b52 <USBD_CtlError>
    break;
 8009282:	bf00      	nop
  }

  return ret;
 8009284:	7bfb      	ldrb	r3, [r7, #15]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop

08009290 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800929a:	2300      	movs	r3, #0
 800929c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092a6:	2b20      	cmp	r3, #32
 80092a8:	d003      	beq.n	80092b2 <USBD_StdItfReq+0x22>
 80092aa:	2b40      	cmp	r3, #64	; 0x40
 80092ac:	d001      	beq.n	80092b2 <USBD_StdItfReq+0x22>
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d12a      	bne.n	8009308 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80092b8:	3b01      	subs	r3, #1
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d81d      	bhi.n	80092fa <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	889b      	ldrh	r3, [r3, #4]
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d813      	bhi.n	80092f0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	6839      	ldr	r1, [r7, #0]
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	4798      	blx	r3
 80092d6:	4603      	mov	r3, r0
 80092d8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	88db      	ldrh	r3, [r3, #6]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d110      	bne.n	8009304 <USBD_StdItfReq+0x74>
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10d      	bne.n	8009304 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fcfb 	bl	8009ce4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80092ee:	e009      	b.n	8009304 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fc2d 	bl	8009b52 <USBD_CtlError>
      break;
 80092f8:	e004      	b.n	8009304 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fc28 	bl	8009b52 <USBD_CtlError>
      break;
 8009302:	e000      	b.n	8009306 <USBD_StdItfReq+0x76>
      break;
 8009304:	bf00      	nop
    }
    break;
 8009306:	e004      	b.n	8009312 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009308:	6839      	ldr	r1, [r7, #0]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fc21 	bl	8009b52 <USBD_CtlError>
    break;
 8009310:	bf00      	nop
  }

  return USBD_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009326:	2300      	movs	r3, #0
 8009328:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	889b      	ldrh	r3, [r3, #4]
 800932e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009338:	2b20      	cmp	r3, #32
 800933a:	d004      	beq.n	8009346 <USBD_StdEPReq+0x2a>
 800933c:	2b40      	cmp	r3, #64	; 0x40
 800933e:	d002      	beq.n	8009346 <USBD_StdEPReq+0x2a>
 8009340:	2b00      	cmp	r3, #0
 8009342:	d008      	beq.n	8009356 <USBD_StdEPReq+0x3a>
 8009344:	e13b      	b.n	80095be <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	6839      	ldr	r1, [r7, #0]
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	4798      	blx	r3
    break;
 8009354:	e138      	b.n	80095c8 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800935e:	2b20      	cmp	r3, #32
 8009360:	d10a      	bne.n	8009378 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	4798      	blx	r3
 8009370:	4603      	mov	r3, r0
 8009372:	73fb      	strb	r3, [r7, #15]

      return ret;
 8009374:	7bfb      	ldrb	r3, [r7, #15]
 8009376:	e128      	b.n	80095ca <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	785b      	ldrb	r3, [r3, #1]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d03e      	beq.n	80093fe <USBD_StdEPReq+0xe2>
 8009380:	2b03      	cmp	r3, #3
 8009382:	d002      	beq.n	800938a <USBD_StdEPReq+0x6e>
 8009384:	2b00      	cmp	r3, #0
 8009386:	d070      	beq.n	800946a <USBD_StdEPReq+0x14e>
 8009388:	e113      	b.n	80095b2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009390:	2b02      	cmp	r3, #2
 8009392:	d002      	beq.n	800939a <USBD_StdEPReq+0x7e>
 8009394:	2b03      	cmp	r3, #3
 8009396:	d015      	beq.n	80093c4 <USBD_StdEPReq+0xa8>
 8009398:	e02b      	b.n	80093f2 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800939a:	7bbb      	ldrb	r3, [r7, #14]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00c      	beq.n	80093ba <USBD_StdEPReq+0x9e>
 80093a0:	7bbb      	ldrb	r3, [r7, #14]
 80093a2:	2b80      	cmp	r3, #128	; 0x80
 80093a4:	d009      	beq.n	80093ba <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80093a6:	7bbb      	ldrb	r3, [r7, #14]
 80093a8:	4619      	mov	r1, r3
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f002 f876 	bl	800b49c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80093b0:	2180      	movs	r1, #128	; 0x80
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f002 f872 	bl	800b49c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80093b8:	e020      	b.n	80093fc <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80093ba:	6839      	ldr	r1, [r7, #0]
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fbc8 	bl	8009b52 <USBD_CtlError>
        break;
 80093c2:	e01b      	b.n	80093fc <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	885b      	ldrh	r3, [r3, #2]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10e      	bne.n	80093ea <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00b      	beq.n	80093ea <USBD_StdEPReq+0xce>
 80093d2:	7bbb      	ldrb	r3, [r7, #14]
 80093d4:	2b80      	cmp	r3, #128	; 0x80
 80093d6:	d008      	beq.n	80093ea <USBD_StdEPReq+0xce>
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	88db      	ldrh	r3, [r3, #6]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d104      	bne.n	80093ea <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80093e0:	7bbb      	ldrb	r3, [r7, #14]
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f002 f859 	bl	800b49c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fc7a 	bl	8009ce4 <USBD_CtlSendStatus>

        break;
 80093f0:	e004      	b.n	80093fc <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fbac 	bl	8009b52 <USBD_CtlError>
        break;
 80093fa:	bf00      	nop
      }
      break;
 80093fc:	e0de      	b.n	80095bc <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009404:	2b02      	cmp	r3, #2
 8009406:	d002      	beq.n	800940e <USBD_StdEPReq+0xf2>
 8009408:	2b03      	cmp	r3, #3
 800940a:	d015      	beq.n	8009438 <USBD_StdEPReq+0x11c>
 800940c:	e026      	b.n	800945c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800940e:	7bbb      	ldrb	r3, [r7, #14]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00c      	beq.n	800942e <USBD_StdEPReq+0x112>
 8009414:	7bbb      	ldrb	r3, [r7, #14]
 8009416:	2b80      	cmp	r3, #128	; 0x80
 8009418:	d009      	beq.n	800942e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800941a:	7bbb      	ldrb	r3, [r7, #14]
 800941c:	4619      	mov	r1, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f002 f83c 	bl	800b49c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009424:	2180      	movs	r1, #128	; 0x80
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f002 f838 	bl	800b49c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800942c:	e01c      	b.n	8009468 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800942e:	6839      	ldr	r1, [r7, #0]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fb8e 	bl	8009b52 <USBD_CtlError>
        break;
 8009436:	e017      	b.n	8009468 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	885b      	ldrh	r3, [r3, #2]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d112      	bne.n	8009466 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009440:	7bbb      	ldrb	r3, [r7, #14]
 8009442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009446:	2b00      	cmp	r3, #0
 8009448:	d004      	beq.n	8009454 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	4619      	mov	r1, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f002 f85a 	bl	800b508 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fc45 	bl	8009ce4 <USBD_CtlSendStatus>
        }
        break;
 800945a:	e004      	b.n	8009466 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800945c:	6839      	ldr	r1, [r7, #0]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fb77 	bl	8009b52 <USBD_CtlError>
        break;
 8009464:	e000      	b.n	8009468 <USBD_StdEPReq+0x14c>
        break;
 8009466:	bf00      	nop
      }
      break;
 8009468:	e0a8      	b.n	80095bc <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009470:	2b02      	cmp	r3, #2
 8009472:	d002      	beq.n	800947a <USBD_StdEPReq+0x15e>
 8009474:	2b03      	cmp	r3, #3
 8009476:	d031      	beq.n	80094dc <USBD_StdEPReq+0x1c0>
 8009478:	e095      	b.n	80095a6 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800947a:	7bbb      	ldrb	r3, [r7, #14]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d007      	beq.n	8009490 <USBD_StdEPReq+0x174>
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	2b80      	cmp	r3, #128	; 0x80
 8009484:	d004      	beq.n	8009490 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8009486:	6839      	ldr	r1, [r7, #0]
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fb62 	bl	8009b52 <USBD_CtlError>
          break;
 800948e:	e08f      	b.n	80095b0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009490:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009494:	2b00      	cmp	r3, #0
 8009496:	da0b      	bge.n	80094b0 <USBD_StdEPReq+0x194>
 8009498:	7bbb      	ldrb	r3, [r7, #14]
 800949a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800949e:	4613      	mov	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	3310      	adds	r3, #16
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	4413      	add	r3, r2
 80094ac:	3304      	adds	r3, #4
 80094ae:	e00a      	b.n	80094c6 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
 80094b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80094b6:	4613      	mov	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	4413      	add	r3, r2
 80094c6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2200      	movs	r2, #0
 80094cc:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	2202      	movs	r2, #2
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fba7 	bl	8009c28 <USBD_CtlSendData>
          break;
 80094da:	e069      	b.n	80095b0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80094dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	da11      	bge.n	8009508 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094e4:	7bbb      	ldrb	r3, [r7, #14]
 80094e6:	f003 020f 	and.w	r2, r3, #15
 80094ea:	6879      	ldr	r1, [r7, #4]
 80094ec:	4613      	mov	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	4413      	add	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	440b      	add	r3, r1
 80094f6:	3318      	adds	r3, #24
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d117      	bne.n	800952e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80094fe:	6839      	ldr	r1, [r7, #0]
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fb26 	bl	8009b52 <USBD_CtlError>
            break;
 8009506:	e053      	b.n	80095b0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009508:	7bbb      	ldrb	r3, [r7, #14]
 800950a:	f003 020f 	and.w	r2, r3, #15
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	4613      	mov	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	440b      	add	r3, r1
 800951a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d104      	bne.n	800952e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8009524:	6839      	ldr	r1, [r7, #0]
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fb13 	bl	8009b52 <USBD_CtlError>
            break;
 800952c:	e040      	b.n	80095b0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800952e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009532:	2b00      	cmp	r3, #0
 8009534:	da0b      	bge.n	800954e <USBD_StdEPReq+0x232>
 8009536:	7bbb      	ldrb	r3, [r7, #14]
 8009538:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800953c:	4613      	mov	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	3310      	adds	r3, #16
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	4413      	add	r3, r2
 800954a:	3304      	adds	r3, #4
 800954c:	e00a      	b.n	8009564 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800954e:	7bbb      	ldrb	r3, [r7, #14]
 8009550:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009554:	4613      	mov	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	4413      	add	r3, r2
 8009564:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009566:	7bbb      	ldrb	r3, [r7, #14]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d002      	beq.n	8009572 <USBD_StdEPReq+0x256>
 800956c:	7bbb      	ldrb	r3, [r7, #14]
 800956e:	2b80      	cmp	r3, #128	; 0x80
 8009570:	d103      	bne.n	800957a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	2200      	movs	r2, #0
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	e00e      	b.n	8009598 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	4619      	mov	r1, r3
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f001 fff8 	bl	800b574 <USBD_LL_IsStallEP>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d003      	beq.n	8009592 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	2201      	movs	r2, #1
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	e002      	b.n	8009598 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	2200      	movs	r2, #0
 8009596:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	2202      	movs	r2, #2
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fb42 	bl	8009c28 <USBD_CtlSendData>
          break;
 80095a4:	e004      	b.n	80095b0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fad2 	bl	8009b52 <USBD_CtlError>
        break;
 80095ae:	bf00      	nop
      }
      break;
 80095b0:	e004      	b.n	80095bc <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 facc 	bl	8009b52 <USBD_CtlError>
      break;
 80095ba:	bf00      	nop
    }
    break;
 80095bc:	e004      	b.n	80095c8 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80095be:	6839      	ldr	r1, [r7, #0]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fac6 	bl	8009b52 <USBD_CtlError>
    break;
 80095c6:	bf00      	nop
  }

  return ret;
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
	...

080095d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	885b      	ldrh	r3, [r3, #2]
 80095e2:	0a1b      	lsrs	r3, r3, #8
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	3b01      	subs	r3, #1
 80095e8:	2b0e      	cmp	r3, #14
 80095ea:	f200 80e5 	bhi.w	80097b8 <USBD_GetDescriptor+0x1e4>
 80095ee:	a201      	add	r2, pc, #4	; (adr r2, 80095f4 <USBD_GetDescriptor+0x20>)
 80095f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f4:	08009649 	.word	0x08009649
 80095f8:	08009661 	.word	0x08009661
 80095fc:	080096a1 	.word	0x080096a1
 8009600:	080097b9 	.word	0x080097b9
 8009604:	080097b9 	.word	0x080097b9
 8009608:	08009765 	.word	0x08009765
 800960c:	0800978b 	.word	0x0800978b
 8009610:	080097b9 	.word	0x080097b9
 8009614:	080097b9 	.word	0x080097b9
 8009618:	080097b9 	.word	0x080097b9
 800961c:	080097b9 	.word	0x080097b9
 8009620:	080097b9 	.word	0x080097b9
 8009624:	080097b9 	.word	0x080097b9
 8009628:	080097b9 	.word	0x080097b9
 800962c:	08009631 	.word	0x08009631
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009636:	69db      	ldr	r3, [r3, #28]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	7c12      	ldrb	r2, [r2, #16]
 800963c:	f107 010a 	add.w	r1, r7, #10
 8009640:	4610      	mov	r0, r2
 8009642:	4798      	blx	r3
 8009644:	60f8      	str	r0, [r7, #12]
    break;
 8009646:	e0bc      	b.n	80097c2 <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	7c12      	ldrb	r2, [r2, #16]
 8009654:	f107 010a 	add.w	r1, r7, #10
 8009658:	4610      	mov	r0, r2
 800965a:	4798      	blx	r3
 800965c:	60f8      	str	r0, [r7, #12]
    break;
 800965e:	e0b0      	b.n	80097c2 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	7c1b      	ldrb	r3, [r3, #16]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10d      	bne.n	8009684 <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800966e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009670:	f107 020a 	add.w	r2, r7, #10
 8009674:	4610      	mov	r0, r2
 8009676:	4798      	blx	r3
 8009678:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	3301      	adds	r3, #1
 800967e:	2202      	movs	r2, #2
 8009680:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009682:	e09e      	b.n	80097c2 <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800968a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968c:	f107 020a 	add.w	r2, r7, #10
 8009690:	4610      	mov	r0, r2
 8009692:	4798      	blx	r3
 8009694:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	3301      	adds	r3, #1
 800969a:	2202      	movs	r2, #2
 800969c:	701a      	strb	r2, [r3, #0]
    break;
 800969e:	e090      	b.n	80097c2 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	885b      	ldrh	r3, [r3, #2]
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b05      	cmp	r3, #5
 80096a8:	d856      	bhi.n	8009758 <USBD_GetDescriptor+0x184>
 80096aa:	a201      	add	r2, pc, #4	; (adr r2, 80096b0 <USBD_GetDescriptor+0xdc>)
 80096ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b0:	080096c9 	.word	0x080096c9
 80096b4:	080096e1 	.word	0x080096e1
 80096b8:	080096f9 	.word	0x080096f9
 80096bc:	08009711 	.word	0x08009711
 80096c0:	08009729 	.word	0x08009729
 80096c4:	08009741 	.word	0x08009741
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	7c12      	ldrb	r2, [r2, #16]
 80096d4:	f107 010a 	add.w	r1, r7, #10
 80096d8:	4610      	mov	r0, r2
 80096da:	4798      	blx	r3
 80096dc:	60f8      	str	r0, [r7, #12]
      break;
 80096de:	e040      	b.n	8009762 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	7c12      	ldrb	r2, [r2, #16]
 80096ec:	f107 010a 	add.w	r1, r7, #10
 80096f0:	4610      	mov	r0, r2
 80096f2:	4798      	blx	r3
 80096f4:	60f8      	str	r0, [r7, #12]
      break;
 80096f6:	e034      	b.n	8009762 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	7c12      	ldrb	r2, [r2, #16]
 8009704:	f107 010a 	add.w	r1, r7, #10
 8009708:	4610      	mov	r0, r2
 800970a:	4798      	blx	r3
 800970c:	60f8      	str	r0, [r7, #12]
      break;
 800970e:	e028      	b.n	8009762 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	7c12      	ldrb	r2, [r2, #16]
 800971c:	f107 010a 	add.w	r1, r7, #10
 8009720:	4610      	mov	r0, r2
 8009722:	4798      	blx	r3
 8009724:	60f8      	str	r0, [r7, #12]
      break;
 8009726:	e01c      	b.n	8009762 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800972e:	695b      	ldr	r3, [r3, #20]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	7c12      	ldrb	r2, [r2, #16]
 8009734:	f107 010a 	add.w	r1, r7, #10
 8009738:	4610      	mov	r0, r2
 800973a:	4798      	blx	r3
 800973c:	60f8      	str	r0, [r7, #12]
      break;
 800973e:	e010      	b.n	8009762 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	7c12      	ldrb	r2, [r2, #16]
 800974c:	f107 010a 	add.w	r1, r7, #10
 8009750:	4610      	mov	r0, r2
 8009752:	4798      	blx	r3
 8009754:	60f8      	str	r0, [r7, #12]
      break;
 8009756:	e004      	b.n	8009762 <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f9f9 	bl	8009b52 <USBD_CtlError>
      return;
 8009760:	e04b      	b.n	80097fa <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 8009762:	e02e      	b.n	80097c2 <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	7c1b      	ldrb	r3, [r3, #16]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d109      	bne.n	8009780 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009774:	f107 020a 	add.w	r2, r7, #10
 8009778:	4610      	mov	r0, r2
 800977a:	4798      	blx	r3
 800977c:	60f8      	str	r0, [r7, #12]
      break;
 800977e:	e020      	b.n	80097c2 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009780:	6839      	ldr	r1, [r7, #0]
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f9e5 	bl	8009b52 <USBD_CtlError>
      return;
 8009788:	e037      	b.n	80097fa <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	7c1b      	ldrb	r3, [r3, #16]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10d      	bne.n	80097ae <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800979a:	f107 020a 	add.w	r2, r7, #10
 800979e:	4610      	mov	r0, r2
 80097a0:	4798      	blx	r3
 80097a2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	3301      	adds	r3, #1
 80097a8:	2207      	movs	r2, #7
 80097aa:	701a      	strb	r2, [r3, #0]
      break;
 80097ac:	e009      	b.n	80097c2 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80097ae:	6839      	ldr	r1, [r7, #0]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 f9ce 	bl	8009b52 <USBD_CtlError>
      return;
 80097b6:	e020      	b.n	80097fa <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 80097b8:	6839      	ldr	r1, [r7, #0]
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f9c9 	bl	8009b52 <USBD_CtlError>
    return;
 80097c0:	e01b      	b.n	80097fa <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 80097c2:	897b      	ldrh	r3, [r7, #10]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d011      	beq.n	80097ec <USBD_GetDescriptor+0x218>
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	88db      	ldrh	r3, [r3, #6]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00d      	beq.n	80097ec <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	88da      	ldrh	r2, [r3, #6]
 80097d4:	897b      	ldrh	r3, [r7, #10]
 80097d6:	4293      	cmp	r3, r2
 80097d8:	bf28      	it	cs
 80097da:	4613      	movcs	r3, r2
 80097dc:	b29b      	uxth	r3, r3
 80097de:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80097e0:	897b      	ldrh	r3, [r7, #10]
 80097e2:	461a      	mov	r2, r3
 80097e4:	68f9      	ldr	r1, [r7, #12]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fa1e 	bl	8009c28 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	88db      	ldrh	r3, [r3, #6]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d102      	bne.n	80097fa <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fa75 	bl	8009ce4 <USBD_CtlSendStatus>
  }
}
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	889b      	ldrh	r3, [r3, #4]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d130      	bne.n	8009874 <USBD_SetAddress+0x74>
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	88db      	ldrh	r3, [r3, #6]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d12c      	bne.n	8009874 <USBD_SetAddress+0x74>
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	885b      	ldrh	r3, [r3, #2]
 800981e:	2b7f      	cmp	r3, #127	; 0x7f
 8009820:	d828      	bhi.n	8009874 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	885b      	ldrh	r3, [r3, #2]
 8009826:	b2db      	uxtb	r3, r3
 8009828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800982c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009834:	2b03      	cmp	r3, #3
 8009836:	d104      	bne.n	8009842 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8009838:	6839      	ldr	r1, [r7, #0]
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f989 	bl	8009b52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009840:	e01c      	b.n	800987c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	7bfa      	ldrb	r2, [r7, #15]
 8009846:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800984a:	7bfb      	ldrb	r3, [r7, #15]
 800984c:	4619      	mov	r1, r3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f001 feb6 	bl	800b5c0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fa45 	bl	8009ce4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800985a:	7bfb      	ldrb	r3, [r7, #15]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d004      	beq.n	800986a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2202      	movs	r2, #2
 8009864:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009868:	e008      	b.n	800987c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009872:	e003      	b.n	800987c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 f96b 	bl	8009b52 <USBD_CtlError>
  }
}
 800987c:	bf00      	nop
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	885b      	ldrh	r3, [r3, #2]
 8009892:	b2da      	uxtb	r2, r3
 8009894:	4b41      	ldr	r3, [pc, #260]	; (800999c <USBD_SetConfig+0x118>)
 8009896:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009898:	4b40      	ldr	r3, [pc, #256]	; (800999c <USBD_SetConfig+0x118>)
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d904      	bls.n	80098aa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f955 	bl	8009b52 <USBD_CtlError>
 80098a8:	e075      	b.n	8009996 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d002      	beq.n	80098ba <USBD_SetConfig+0x36>
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	d023      	beq.n	8009900 <USBD_SetConfig+0x7c>
 80098b8:	e062      	b.n	8009980 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80098ba:	4b38      	ldr	r3, [pc, #224]	; (800999c <USBD_SetConfig+0x118>)
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d01a      	beq.n	80098f8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80098c2:	4b36      	ldr	r3, [pc, #216]	; (800999c <USBD_SetConfig+0x118>)
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	461a      	mov	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2203      	movs	r2, #3
 80098d0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80098d4:	4b31      	ldr	r3, [pc, #196]	; (800999c <USBD_SetConfig+0x118>)
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	4619      	mov	r1, r3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7ff fa4d 	bl	8008d7a <USBD_SetClassConfig>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d104      	bne.n	80098f0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80098e6:	6839      	ldr	r1, [r7, #0]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f932 	bl	8009b52 <USBD_CtlError>
          return;
 80098ee:	e052      	b.n	8009996 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f9f7 	bl	8009ce4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80098f6:	e04e      	b.n	8009996 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f9f3 	bl	8009ce4 <USBD_CtlSendStatus>
      break;
 80098fe:	e04a      	b.n	8009996 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009900:	4b26      	ldr	r3, [pc, #152]	; (800999c <USBD_SetConfig+0x118>)
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d112      	bne.n	800992e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2202      	movs	r2, #2
 800990c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8009910:	4b22      	ldr	r3, [pc, #136]	; (800999c <USBD_SetConfig+0x118>)
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	461a      	mov	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800991a:	4b20      	ldr	r3, [pc, #128]	; (800999c <USBD_SetConfig+0x118>)
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	4619      	mov	r1, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7ff fa49 	bl	8008db8 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f9dc 	bl	8009ce4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800992c:	e033      	b.n	8009996 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800992e:	4b1b      	ldr	r3, [pc, #108]	; (800999c <USBD_SetConfig+0x118>)
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	461a      	mov	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	429a      	cmp	r2, r3
 800993a:	d01d      	beq.n	8009978 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	b2db      	uxtb	r3, r3
 8009942:	4619      	mov	r1, r3
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7ff fa37 	bl	8008db8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800994a:	4b14      	ldr	r3, [pc, #80]	; (800999c <USBD_SetConfig+0x118>)
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	461a      	mov	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009954:	4b11      	ldr	r3, [pc, #68]	; (800999c <USBD_SetConfig+0x118>)
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	4619      	mov	r1, r3
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f7ff fa0d 	bl	8008d7a <USBD_SetClassConfig>
 8009960:	4603      	mov	r3, r0
 8009962:	2b02      	cmp	r3, #2
 8009964:	d104      	bne.n	8009970 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009966:	6839      	ldr	r1, [r7, #0]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f8f2 	bl	8009b52 <USBD_CtlError>
          return;
 800996e:	e012      	b.n	8009996 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 f9b7 	bl	8009ce4 <USBD_CtlSendStatus>
      break;
 8009976:	e00e      	b.n	8009996 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f9b3 	bl	8009ce4 <USBD_CtlSendStatus>
      break;
 800997e:	e00a      	b.n	8009996 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8009980:	6839      	ldr	r1, [r7, #0]
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 f8e5 	bl	8009b52 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009988:	4b04      	ldr	r3, [pc, #16]	; (800999c <USBD_SetConfig+0x118>)
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	4619      	mov	r1, r3
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7ff fa12 	bl	8008db8 <USBD_ClrClassConfig>
      break;
 8009994:	bf00      	nop
    }
  }
}
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	200019ac 	.word	0x200019ac

080099a0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	88db      	ldrh	r3, [r3, #6]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d004      	beq.n	80099bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f8cc 	bl	8009b52 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80099ba:	e021      	b.n	8009a00 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	db17      	blt.n	80099f6 <USBD_GetConfig+0x56>
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	dd02      	ble.n	80099d0 <USBD_GetConfig+0x30>
 80099ca:	2b03      	cmp	r3, #3
 80099cc:	d00b      	beq.n	80099e6 <USBD_GetConfig+0x46>
 80099ce:	e012      	b.n	80099f6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	3308      	adds	r3, #8
 80099da:	2201      	movs	r2, #1
 80099dc:	4619      	mov	r1, r3
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f922 	bl	8009c28 <USBD_CtlSendData>
      break;
 80099e4:	e00c      	b.n	8009a00 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	3304      	adds	r3, #4
 80099ea:	2201      	movs	r2, #1
 80099ec:	4619      	mov	r1, r3
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f91a 	bl	8009c28 <USBD_CtlSendData>
      break;
 80099f4:	e004      	b.n	8009a00 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80099f6:	6839      	ldr	r1, [r7, #0]
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f8aa 	bl	8009b52 <USBD_CtlError>
      break;
 80099fe:	bf00      	nop
}
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d81e      	bhi.n	8009a5c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	88db      	ldrh	r3, [r3, #6]
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d004      	beq.n	8009a30 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 f892 	bl	8009b52 <USBD_CtlError>
      break;
 8009a2e:	e01a      	b.n	8009a66 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2201      	movs	r2, #1
 8009a34:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d005      	beq.n	8009a4c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	f043 0202 	orr.w	r2, r3, #2
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	330c      	adds	r3, #12
 8009a50:	2202      	movs	r2, #2
 8009a52:	4619      	mov	r1, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 f8e7 	bl	8009c28 <USBD_CtlSendData>
    break;
 8009a5a:	e004      	b.n	8009a66 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f877 	bl	8009b52 <USBD_CtlError>
    break;
 8009a64:	bf00      	nop
  }
}
 8009a66:	bf00      	nop
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b082      	sub	sp, #8
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	885b      	ldrh	r3, [r3, #2]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d106      	bne.n	8009a8e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f92b 	bl	8009ce4 <USBD_CtlSendStatus>
  }

}
 8009a8e:	bf00      	nop
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b082      	sub	sp, #8
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d80b      	bhi.n	8009ac4 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	885b      	ldrh	r3, [r3, #2]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d10c      	bne.n	8009ace <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f911 	bl	8009ce4 <USBD_CtlSendStatus>
    }
    break;
 8009ac2:	e004      	b.n	8009ace <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f843 	bl	8009b52 <USBD_CtlError>
    break;
 8009acc:	e000      	b.n	8009ad0 <USBD_ClrFeature+0x3a>
    break;
 8009ace:	bf00      	nop
  }
}
 8009ad0:	bf00      	nop
 8009ad2:	3708      	adds	r7, #8
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	781a      	ldrb	r2, [r3, #0]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	785a      	ldrb	r2, [r3, #1]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	3302      	adds	r3, #2
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	3303      	adds	r3, #3
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	021b      	lsls	r3, r3, #8
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	4413      	add	r3, r2
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	3304      	adds	r3, #4
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	3305      	adds	r3, #5
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	021b      	lsls	r3, r3, #8
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	4413      	add	r3, r2
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	3306      	adds	r3, #6
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	3307      	adds	r3, #7
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	021b      	lsls	r3, r3, #8
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	4413      	add	r3, r2
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	80da      	strh	r2, [r3, #6]

}
 8009b46:	bf00      	nop
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr

08009b52 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b082      	sub	sp, #8
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8009b5c:	2180      	movs	r1, #128	; 0x80
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f001 fc9c 	bl	800b49c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009b64:	2100      	movs	r1, #0
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f001 fc98 	bl	800b49c <USBD_LL_StallEP>
}
 8009b6c:	bf00      	nop
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b80:	2300      	movs	r3, #0
 8009b82:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d032      	beq.n	8009bf0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f000 f834 	bl	8009bf8 <USBD_GetLen>
 8009b90:	4603      	mov	r3, r0
 8009b92:	3301      	adds	r3, #1
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	005b      	lsls	r3, r3, #1
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009b9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	75fa      	strb	r2, [r7, #23]
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	4413      	add	r3, r2
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	7812      	ldrb	r2, [r2, #0]
 8009bae:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009bb0:	7dfb      	ldrb	r3, [r7, #23]
 8009bb2:	1c5a      	adds	r2, r3, #1
 8009bb4:	75fa      	strb	r2, [r7, #23]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	4413      	add	r3, r2
 8009bbc:	2203      	movs	r2, #3
 8009bbe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009bc0:	e012      	b.n	8009be8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009bc2:	7dfb      	ldrb	r3, [r7, #23]
 8009bc4:	1c5a      	adds	r2, r3, #1
 8009bc6:	75fa      	strb	r2, [r7, #23]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	441a      	add	r2, r3
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	1c59      	adds	r1, r3, #1
 8009bd2:	60f9      	str	r1, [r7, #12]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009bd8:	7dfb      	ldrb	r3, [r7, #23]
 8009bda:	1c5a      	adds	r2, r3, #1
 8009bdc:	75fa      	strb	r2, [r7, #23]
 8009bde:	461a      	mov	r2, r3
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	4413      	add	r3, r2
 8009be4:	2200      	movs	r2, #0
 8009be6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d1e8      	bne.n	8009bc2 <USBD_GetString+0x4e>
    }
  }
}
 8009bf0:	bf00      	nop
 8009bf2:	3718      	adds	r7, #24
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8009c00:	2300      	movs	r3, #0
 8009c02:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8009c04:	e005      	b.n	8009c12 <USBD_GetLen+0x1a>
    {
        len++;
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	73fb      	strb	r3, [r7, #15]
        buf++;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1f5      	bne.n	8009c06 <USBD_GetLen+0xe>
    }

    return len;
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3714      	adds	r7, #20
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	4613      	mov	r3, r2
 8009c34:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2202      	movs	r2, #2
 8009c3a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8009c3e:	88fa      	ldrh	r2, [r7, #6]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009c44:	88fa      	ldrh	r2, [r7, #6]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009c4a:	88fb      	ldrh	r3, [r7, #6]
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	2100      	movs	r1, #0
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f001 fceb 	bl	800b62c <USBD_LL_Transmit>

  return USBD_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009c6e:	88fb      	ldrh	r3, [r7, #6]
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	2100      	movs	r1, #0
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f001 fcd9 	bl	800b62c <USBD_LL_Transmit>

  return USBD_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2203      	movs	r2, #3
 8009c96:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8009c9a:	88fa      	ldrh	r2, [r7, #6]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8009ca2:	88fa      	ldrh	r2, [r7, #6]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8009caa:	88fb      	ldrh	r3, [r7, #6]
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	2100      	movs	r1, #0
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f001 fcf5 	bl	800b6a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cce:	88fb      	ldrh	r3, [r7, #6]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f001 fce3 	bl	800b6a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2204      	movs	r2, #4
 8009cf0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f001 fc96 	bl	800b62c <USBD_LL_Transmit>

  return USBD_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b082      	sub	sp, #8
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2205      	movs	r2, #5
 8009d16:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2100      	movs	r1, #0
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f001 fcbd 	bl	800b6a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b08a      	sub	sp, #40	; 0x28
 8009d34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d36:	f107 0314 	add.w	r3, r7, #20
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	601a      	str	r2, [r3, #0]
 8009d3e:	605a      	str	r2, [r3, #4]
 8009d40:	609a      	str	r2, [r3, #8]
 8009d42:	60da      	str	r2, [r3, #12]
 8009d44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009d46:	4a50      	ldr	r2, [pc, #320]	; (8009e88 <MX_GPIO_Init+0x158>)
 8009d48:	4b4f      	ldr	r3, [pc, #316]	; (8009e88 <MX_GPIO_Init+0x158>)
 8009d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d52:	4b4d      	ldr	r3, [pc, #308]	; (8009e88 <MX_GPIO_Init+0x158>)
 8009d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d5a:	613b      	str	r3, [r7, #16]
 8009d5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009d5e:	4a4a      	ldr	r2, [pc, #296]	; (8009e88 <MX_GPIO_Init+0x158>)
 8009d60:	4b49      	ldr	r3, [pc, #292]	; (8009e88 <MX_GPIO_Init+0x158>)
 8009d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d64:	f043 0304 	orr.w	r3, r3, #4
 8009d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d6a:	4b47      	ldr	r3, [pc, #284]	; (8009e88 <MX_GPIO_Init+0x158>)
 8009d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d6e:	f003 0304 	and.w	r3, r3, #4
 8009d72:	60fb      	str	r3, [r7, #12]
 8009d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d76:	4a44      	ldr	r2, [pc, #272]	; (8009e88 <MX_GPIO_Init+0x158>)
 8009d78:	4b43      	ldr	r3, [pc, #268]	; (8009e88 <MX_GPIO_Init+0x158>)
 8009d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d7c:	f043 0301 	orr.w	r3, r3, #1
 8009d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d82:	4b41      	ldr	r3, [pc, #260]	; (8009e88 <MX_GPIO_Init+0x158>)
 8009d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d86:	f003 0301 	and.w	r3, r3, #1
 8009d8a:	60bb      	str	r3, [r7, #8]
 8009d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d8e:	4a3e      	ldr	r2, [pc, #248]	; (8009e88 <MX_GPIO_Init+0x158>)
 8009d90:	4b3d      	ldr	r3, [pc, #244]	; (8009e88 <MX_GPIO_Init+0x158>)
 8009d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d94:	f043 0302 	orr.w	r3, r3, #2
 8009d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d9a:	4b3b      	ldr	r3, [pc, #236]	; (8009e88 <MX_GPIO_Init+0x158>)
 8009d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d9e:	f003 0302 	and.w	r3, r3, #2
 8009da2:	607b      	str	r3, [r7, #4]
 8009da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009da6:	4a38      	ldr	r2, [pc, #224]	; (8009e88 <MX_GPIO_Init+0x158>)
 8009da8:	4b37      	ldr	r3, [pc, #220]	; (8009e88 <MX_GPIO_Init+0x158>)
 8009daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dac:	f043 0308 	orr.w	r3, r3, #8
 8009db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009db2:	4b35      	ldr	r3, [pc, #212]	; (8009e88 <MX_GPIO_Init+0x158>)
 8009db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009db6:	f003 0308 	and.w	r3, r3, #8
 8009dba:	603b      	str	r3, [r7, #0]
 8009dbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, O_USART2_DIR_Pin|O_USART1_DIR_Pin, GPIO_PIN_RESET);
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f241 0104 	movw	r1, #4100	; 0x1004
 8009dc4:	4831      	ldr	r0, [pc, #196]	; (8009e8c <MX_GPIO_Init+0x15c>)
 8009dc6:	f7f8 f8c1 	bl	8001f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O_BT_PWR_GPIO_Port, O_BT_PWR_Pin, GPIO_PIN_RESET);
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009dd4:	f7f8 f8ba 	bl	8001f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = O_USART2_DIR_Pin|O_USART1_DIR_Pin;
 8009dd8:	f241 0304 	movw	r3, #4100	; 0x1004
 8009ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009dde:	2301      	movs	r3, #1
 8009de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009de2:	2300      	movs	r3, #0
 8009de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009de6:	2300      	movs	r3, #0
 8009de8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009dea:	f107 0314 	add.w	r3, r7, #20
 8009dee:	4619      	mov	r1, r3
 8009df0:	4826      	ldr	r0, [pc, #152]	; (8009e8c <MX_GPIO_Init+0x15c>)
 8009df2:	f7f7 ff19 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_USART2_BREAK_Pin;
 8009df6:	2308      	movs	r3, #8
 8009df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(O_USART2_BREAK_GPIO_Port, &GPIO_InitStruct);
 8009e02:	f107 0314 	add.w	r3, r7, #20
 8009e06:	4619      	mov	r1, r3
 8009e08:	4820      	ldr	r0, [pc, #128]	; (8009e8c <MX_GPIO_Init+0x15c>)
 8009e0a:	f7f7 ff0d 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = I_GPIO1_Pin|I_GPIO2_Pin|I_GPIO3_Pin|I_GPIO4_Pin 
 8009e0e:	f44f 733c 	mov.w	r3, #752	; 0x2f0
 8009e12:	617b      	str	r3, [r7, #20]
                          |I_USB_VBUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009e14:	2300      	movs	r3, #0
 8009e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e1c:	f107 0314 	add.w	r3, r7, #20
 8009e20:	4619      	mov	r1, r3
 8009e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009e26:	f7f7 feff 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_SW2_Pin;
 8009e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009e30:	2300      	movs	r3, #0
 8009e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009e34:	2301      	movs	r3, #1
 8009e36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I_SW2_GPIO_Port, &GPIO_InitStruct);
 8009e38:	f107 0314 	add.w	r3, r7, #20
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009e42:	f7f7 fef1 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_BT_PWR_Pin;
 8009e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e50:	2300      	movs	r3, #0
 8009e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e54:	2300      	movs	r3, #0
 8009e56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(O_BT_PWR_GPIO_Port, &GPIO_InitStruct);
 8009e58:	f107 0314 	add.w	r3, r7, #20
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009e62:	f7f7 fee1 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_USART1_BREAK_Pin;
 8009e66:	2304      	movs	r3, #4
 8009e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(O_USART1_BREAK_GPIO_Port, &GPIO_InitStruct);
 8009e72:	f107 0314 	add.w	r3, r7, #20
 8009e76:	4619      	mov	r1, r3
 8009e78:	4805      	ldr	r0, [pc, #20]	; (8009e90 <MX_GPIO_Init+0x160>)
 8009e7a:	f7f7 fed5 	bl	8001c28 <HAL_GPIO_Init>

}
 8009e7e:	bf00      	nop
 8009e80:	3728      	adds	r7, #40	; 0x28
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	40021000 	.word	0x40021000
 8009e8c:	48000800 	.word	0x48000800
 8009e90:	48000c00 	.word	0x48000c00

08009e94 <gpio_ConfigureToFloating>:

/* USER CODE BEGIN 2 */
void gpio_ConfigureToFloating(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b088      	sub	sp, #32
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ea0:	f107 030c 	add.w	r3, r7, #12
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	601a      	str	r2, [r3, #0]
 8009ea8:	605a      	str	r2, [r3, #4]
 8009eaa:	609a      	str	r2, [r3, #8]
 8009eac:	60da      	str	r2, [r3, #12]
 8009eae:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8009eb0:	887b      	ldrh	r3, [r7, #2]
 8009eb2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8009ebc:	f107 030c 	add.w	r3, r7, #12
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7f7 feb0 	bl	8001c28 <HAL_GPIO_Init>
}
 8009ec8:	bf00      	nop
 8009eca:	3720      	adds	r7, #32
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <gpio_ConfigureToPushPull>:
void gpio_ConfigureToPushPull(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b088      	sub	sp, #32
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	460b      	mov	r3, r1
 8009eda:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009edc:	f107 030c 	add.w	r3, r7, #12
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	605a      	str	r2, [r3, #4]
 8009ee6:	609a      	str	r2, [r3, #8]
 8009ee8:	60da      	str	r2, [r3, #12]
 8009eea:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8009eec:	887b      	ldrh	r3, [r7, #2]
 8009eee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8009efc:	f107 030c 	add.w	r3, r7, #12
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7f7 fe90 	bl	8001c28 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8009f08:	887b      	ldrh	r3, [r7, #2]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7f8 f81c 	bl	8001f4c <HAL_GPIO_WritePin>
}
 8009f14:	bf00      	nop
 8009f16:	3720      	adds	r7, #32
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8009f20:	4b1b      	ldr	r3, [pc, #108]	; (8009f90 <MX_I2C2_Init+0x74>)
 8009f22:	4a1c      	ldr	r2, [pc, #112]	; (8009f94 <MX_I2C2_Init+0x78>)
 8009f24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8009f26:	4b1a      	ldr	r3, [pc, #104]	; (8009f90 <MX_I2C2_Init+0x74>)
 8009f28:	4a1b      	ldr	r2, [pc, #108]	; (8009f98 <MX_I2C2_Init+0x7c>)
 8009f2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8009f2c:	4b18      	ldr	r3, [pc, #96]	; (8009f90 <MX_I2C2_Init+0x74>)
 8009f2e:	2200      	movs	r2, #0
 8009f30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009f32:	4b17      	ldr	r3, [pc, #92]	; (8009f90 <MX_I2C2_Init+0x74>)
 8009f34:	2201      	movs	r2, #1
 8009f36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009f38:	4b15      	ldr	r3, [pc, #84]	; (8009f90 <MX_I2C2_Init+0x74>)
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8009f3e:	4b14      	ldr	r3, [pc, #80]	; (8009f90 <MX_I2C2_Init+0x74>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009f44:	4b12      	ldr	r3, [pc, #72]	; (8009f90 <MX_I2C2_Init+0x74>)
 8009f46:	2200      	movs	r2, #0
 8009f48:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009f4a:	4b11      	ldr	r3, [pc, #68]	; (8009f90 <MX_I2C2_Init+0x74>)
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009f50:	4b0f      	ldr	r3, [pc, #60]	; (8009f90 <MX_I2C2_Init+0x74>)
 8009f52:	2200      	movs	r2, #0
 8009f54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8009f56:	480e      	ldr	r0, [pc, #56]	; (8009f90 <MX_I2C2_Init+0x74>)
 8009f58:	f7f8 f810 	bl	8001f7c <HAL_I2C_Init>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8009f62:	f000 f9a7 	bl	800a2b4 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009f66:	2100      	movs	r1, #0
 8009f68:	4809      	ldr	r0, [pc, #36]	; (8009f90 <MX_I2C2_Init+0x74>)
 8009f6a:	f7f8 f895 	bl	8002098 <HAL_I2CEx_ConfigAnalogFilter>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d001      	beq.n	8009f78 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8009f74:	f000 f99e 	bl	800a2b4 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8009f78:	2100      	movs	r1, #0
 8009f7a:	4805      	ldr	r0, [pc, #20]	; (8009f90 <MX_I2C2_Init+0x74>)
 8009f7c:	f7f8 f8d7 	bl	800212e <HAL_I2CEx_ConfigDigitalFilter>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d001      	beq.n	8009f8a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8009f86:	f000 f995 	bl	800a2b4 <Error_Handler>
  }

}
 8009f8a:	bf00      	nop
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	20001bd4 	.word	0x20001bd4
 8009f94:	40005800 	.word	0x40005800
 8009f98:	10909cec 	.word	0x10909cec

08009f9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b08a      	sub	sp, #40	; 0x28
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fa4:	f107 0314 	add.w	r3, r7, #20
 8009fa8:	2200      	movs	r2, #0
 8009faa:	601a      	str	r2, [r3, #0]
 8009fac:	605a      	str	r2, [r3, #4]
 8009fae:	609a      	str	r2, [r3, #8]
 8009fb0:	60da      	str	r2, [r3, #12]
 8009fb2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a17      	ldr	r2, [pc, #92]	; (800a018 <HAL_I2C_MspInit+0x7c>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d128      	bne.n	800a010 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009fbe:	4a17      	ldr	r2, [pc, #92]	; (800a01c <HAL_I2C_MspInit+0x80>)
 8009fc0:	4b16      	ldr	r3, [pc, #88]	; (800a01c <HAL_I2C_MspInit+0x80>)
 8009fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fc4:	f043 0302 	orr.w	r3, r3, #2
 8009fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009fca:	4b14      	ldr	r3, [pc, #80]	; (800a01c <HAL_I2C_MspInit+0x80>)
 8009fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fce:	f003 0302 	and.w	r3, r3, #2
 8009fd2:	613b      	str	r3, [r7, #16]
 8009fd4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009fd6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009fdc:	2312      	movs	r3, #18
 8009fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8009fe8:	2304      	movs	r3, #4
 8009fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fec:	f107 0314 	add.w	r3, r7, #20
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	480b      	ldr	r0, [pc, #44]	; (800a020 <HAL_I2C_MspInit+0x84>)
 8009ff4:	f7f7 fe18 	bl	8001c28 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009ff8:	4a08      	ldr	r2, [pc, #32]	; (800a01c <HAL_I2C_MspInit+0x80>)
 8009ffa:	4b08      	ldr	r3, [pc, #32]	; (800a01c <HAL_I2C_MspInit+0x80>)
 8009ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ffe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a002:	6593      	str	r3, [r2, #88]	; 0x58
 800a004:	4b05      	ldr	r3, [pc, #20]	; (800a01c <HAL_I2C_MspInit+0x80>)
 800a006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a00c:	60fb      	str	r3, [r7, #12]
 800a00e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800a010:	bf00      	nop
 800a012:	3728      	adds	r7, #40	; 0x28
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	40005800 	.word	0x40005800
 800a01c:	40021000 	.word	0x40021000
 800a020:	48000400 	.word	0x48000400

0800a024 <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim1;
LPTIM_HandleTypeDef hlptim2;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	af00      	add	r7, sp, #0

  hlptim1.Instance = LPTIM1;
 800a028:	4b12      	ldr	r3, [pc, #72]	; (800a074 <MX_LPTIM1_Init+0x50>)
 800a02a:	4a13      	ldr	r2, [pc, #76]	; (800a078 <MX_LPTIM1_Init+0x54>)
 800a02c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800a02e:	4b11      	ldr	r3, [pc, #68]	; (800a074 <MX_LPTIM1_Init+0x50>)
 800a030:	2200      	movs	r2, #0
 800a032:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800a034:	4b0f      	ldr	r3, [pc, #60]	; (800a074 <MX_LPTIM1_Init+0x50>)
 800a036:	2200      	movs	r2, #0
 800a038:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800a03a:	4b0e      	ldr	r3, [pc, #56]	; (800a074 <MX_LPTIM1_Init+0x50>)
 800a03c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a040:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800a042:	4b0c      	ldr	r3, [pc, #48]	; (800a074 <MX_LPTIM1_Init+0x50>)
 800a044:	2200      	movs	r2, #0
 800a046:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800a048:	4b0a      	ldr	r3, [pc, #40]	; (800a074 <MX_LPTIM1_Init+0x50>)
 800a04a:	2200      	movs	r2, #0
 800a04c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800a04e:	4b09      	ldr	r3, [pc, #36]	; (800a074 <MX_LPTIM1_Init+0x50>)
 800a050:	2200      	movs	r2, #0
 800a052:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800a054:	4b07      	ldr	r3, [pc, #28]	; (800a074 <MX_LPTIM1_Init+0x50>)
 800a056:	2200      	movs	r2, #0
 800a058:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800a05a:	4b06      	ldr	r3, [pc, #24]	; (800a074 <MX_LPTIM1_Init+0x50>)
 800a05c:	2200      	movs	r2, #0
 800a05e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800a060:	4804      	ldr	r0, [pc, #16]	; (800a074 <MX_LPTIM1_Init+0x50>)
 800a062:	f7f8 f8b1 	bl	80021c8 <HAL_LPTIM_Init>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d001      	beq.n	800a070 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 800a06c:	f000 f922 	bl	800a2b4 <Error_Handler>
  }

}
 800a070:	bf00      	nop
 800a072:	bd80      	pop	{r7, pc}
 800a074:	20001c58 	.word	0x20001c58
 800a078:	40007c00 	.word	0x40007c00

0800a07c <MX_LPTIM2_Init>:
/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	af00      	add	r7, sp, #0

  hlptim2.Instance = LPTIM2;
 800a080:	4b12      	ldr	r3, [pc, #72]	; (800a0cc <MX_LPTIM2_Init+0x50>)
 800a082:	4a13      	ldr	r2, [pc, #76]	; (800a0d0 <MX_LPTIM2_Init+0x54>)
 800a084:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800a086:	4b11      	ldr	r3, [pc, #68]	; (800a0cc <MX_LPTIM2_Init+0x50>)
 800a088:	2200      	movs	r2, #0
 800a08a:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800a08c:	4b0f      	ldr	r3, [pc, #60]	; (800a0cc <MX_LPTIM2_Init+0x50>)
 800a08e:	2200      	movs	r2, #0
 800a090:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800a092:	4b0e      	ldr	r3, [pc, #56]	; (800a0cc <MX_LPTIM2_Init+0x50>)
 800a094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a098:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800a09a:	4b0c      	ldr	r3, [pc, #48]	; (800a0cc <MX_LPTIM2_Init+0x50>)
 800a09c:	2200      	movs	r2, #0
 800a09e:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800a0a0:	4b0a      	ldr	r3, [pc, #40]	; (800a0cc <MX_LPTIM2_Init+0x50>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800a0a6:	4b09      	ldr	r3, [pc, #36]	; (800a0cc <MX_LPTIM2_Init+0x50>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800a0ac:	4b07      	ldr	r3, [pc, #28]	; (800a0cc <MX_LPTIM2_Init+0x50>)
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800a0b2:	4b06      	ldr	r3, [pc, #24]	; (800a0cc <MX_LPTIM2_Init+0x50>)
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 800a0b8:	4804      	ldr	r0, [pc, #16]	; (800a0cc <MX_LPTIM2_Init+0x50>)
 800a0ba:	f7f8 f885 	bl	80021c8 <HAL_LPTIM_Init>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d001      	beq.n	800a0c8 <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 800a0c4:	f000 f8f6 	bl	800a2b4 <Error_Handler>
  }

}
 800a0c8:	bf00      	nop
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	20001c20 	.word	0x20001c20
 800a0d0:	40009400 	.word	0x40009400

0800a0d4 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]

  if(lptimHandle->Instance==LPTIM1)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a1a      	ldr	r2, [pc, #104]	; (800a14c <HAL_LPTIM_MspInit+0x78>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d114      	bne.n	800a110 <HAL_LPTIM_MspInit+0x3c>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800a0e6:	4a1a      	ldr	r2, [pc, #104]	; (800a150 <HAL_LPTIM_MspInit+0x7c>)
 800a0e8:	4b19      	ldr	r3, [pc, #100]	; (800a150 <HAL_LPTIM_MspInit+0x7c>)
 800a0ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0f0:	6593      	str	r3, [r2, #88]	; 0x58
 800a0f2:	4b17      	ldr	r3, [pc, #92]	; (800a150 <HAL_LPTIM_MspInit+0x7c>)
 800a0f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0fa:	60fb      	str	r3, [r7, #12]
 800a0fc:	68fb      	ldr	r3, [r7, #12]

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800a0fe:	2200      	movs	r2, #0
 800a100:	2100      	movs	r1, #0
 800a102:	2041      	movs	r0, #65	; 0x41
 800a104:	f7f7 fd59 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800a108:	2041      	movs	r0, #65	; 0x41
 800a10a:	f7f7 fd72 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }
}
 800a10e:	e018      	b.n	800a142 <HAL_LPTIM_MspInit+0x6e>
  else if(lptimHandle->Instance==LPTIM2)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a0f      	ldr	r2, [pc, #60]	; (800a154 <HAL_LPTIM_MspInit+0x80>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d113      	bne.n	800a142 <HAL_LPTIM_MspInit+0x6e>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800a11a:	4a0d      	ldr	r2, [pc, #52]	; (800a150 <HAL_LPTIM_MspInit+0x7c>)
 800a11c:	4b0c      	ldr	r3, [pc, #48]	; (800a150 <HAL_LPTIM_MspInit+0x7c>)
 800a11e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a120:	f043 0320 	orr.w	r3, r3, #32
 800a124:	65d3      	str	r3, [r2, #92]	; 0x5c
 800a126:	4b0a      	ldr	r3, [pc, #40]	; (800a150 <HAL_LPTIM_MspInit+0x7c>)
 800a128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a12a:	f003 0320 	and.w	r3, r3, #32
 800a12e:	60bb      	str	r3, [r7, #8]
 800a130:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 800a132:	2200      	movs	r2, #0
 800a134:	2100      	movs	r1, #0
 800a136:	2042      	movs	r0, #66	; 0x42
 800a138:	f7f7 fd3f 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 800a13c:	2042      	movs	r0, #66	; 0x42
 800a13e:	f7f7 fd58 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
}
 800a142:	bf00      	nop
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	40007c00 	.word	0x40007c00
 800a150:	40021000 	.word	0x40021000
 800a154:	40009400 	.word	0x40009400

0800a158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a15c:	f7f7 fc02 	bl	8001964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a160:	f000 f81f 	bl	800a1a2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a164:	f7ff fde4 	bl	8009d30 <MX_GPIO_Init>
  MX_I2C2_Init();
 800a168:	f7ff fed8 	bl	8009f1c <MX_I2C2_Init>
  MX_LPTIM1_Init();
 800a16c:	f7ff ff5a 	bl	800a024 <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 800a170:	f7ff ff84 	bl	800a07c <MX_LPTIM2_Init>
  MX_TIM1_Init();
 800a174:	f000 f98e 	bl	800a494 <MX_TIM1_Init>
  MX_TIM2_Init();
 800a178:	f000 fa1a 	bl	800a5b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800a17c:	f000 fa54 	bl	800a628 <MX_TIM3_Init>
  MX_TIM6_Init();
 800a180:	f000 fab4 	bl	800a6ec <MX_TIM6_Init>
  MX_TIM15_Init();
 800a184:	f000 fae8 	bl	800a758 <MX_TIM15_Init>
  MX_TIM16_Init();
 800a188:	f000 fb94 	bl	800a8b4 <MX_TIM16_Init>
  MX_UART4_Init();
 800a18c:	f000 fd88 	bl	800aca0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800a190:	f000 fdb6 	bl	800ad00 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800a194:	f000 fde6 	bl	800ad64 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800a198:	f000 fee6 	bl	800af68 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
//  TIM15->CCR4 = 255;
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
  app_main();
 800a19c:	f7f7 fa1a 	bl	80015d4 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a1a0:	e7fe      	b.n	800a1a0 <main+0x48>

0800a1a2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b0b0      	sub	sp, #192	; 0xc0
 800a1a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a1a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800a1ac:	2244      	movs	r2, #68	; 0x44
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f001 fc48 	bl	800ba46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a1b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	605a      	str	r2, [r3, #4]
 800a1c0:	609a      	str	r2, [r3, #8]
 800a1c2:	60da      	str	r2, [r3, #12]
 800a1c4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a1c6:	463b      	mov	r3, r7
 800a1c8:	2268      	movs	r2, #104	; 0x68
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f001 fc3a 	bl	800ba46 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a1d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a1da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a1de:	2302      	movs	r3, #2
 800a1e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 20;
 800a1f0:	2314      	movs	r3, #20
 800a1f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800a1f6:	2307      	movs	r3, #7
 800a1f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a202:	2302      	movs	r3, #2
 800a204:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a208:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7f9 f90b 	bl	8003428 <HAL_RCC_OscConfig>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d001      	beq.n	800a21c <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800a218:	f000 f84c 	bl	800a2b4 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a21c:	230f      	movs	r3, #15
 800a21e:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a220:	2303      	movs	r3, #3
 800a222:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a224:	2300      	movs	r3, #0
 800a226:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a228:	2300      	movs	r3, #0
 800a22a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a22c:	2300      	movs	r3, #0
 800a22e:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a230:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a234:	2104      	movs	r1, #4
 800a236:	4618      	mov	r0, r3
 800a238:	f7f9 fc9c 	bl	8003b74 <HAL_RCC_ClockConfig>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d001      	beq.n	800a246 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800a242:	f000 f837 	bl	800a2b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800a246:	f242 638b 	movw	r3, #9867	; 0x268b
 800a24a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_LPTIM1
                              |RCC_PERIPHCLK_LPTIM2|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a24c:	2300      	movs	r3, #0
 800a24e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a250:	2300      	movs	r3, #0
 800a252:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800a254:	2300      	movs	r3, #0
 800a256:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800a258:	2300      	movs	r3, #0
 800a25a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800a25c:	2300      	movs	r3, #0
 800a25e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 800a260:	2300      	movs	r3, #0
 800a262:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800a264:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a268:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800a26a:	2303      	movs	r3, #3
 800a26c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800a26e:	2301      	movs	r3, #1
 800a270:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800a272:	230c      	movs	r3, #12
 800a274:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800a276:	2307      	movs	r3, #7
 800a278:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800a27a:	2302      	movs	r3, #2
 800a27c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800a27e:	2302      	movs	r3, #2
 800a280:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800a282:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a286:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a288:	463b      	mov	r3, r7
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7f9 fe84 	bl	8003f98 <HAL_RCCEx_PeriphCLKConfig>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d001      	beq.n	800a29a <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800a296:	f000 f80d 	bl	800a2b4 <Error_Handler>
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800a29a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a29e:	f7f9 f85d 	bl	800335c <HAL_PWREx_ControlVoltageScaling>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800a2a8:	f000 f804 	bl	800a2b4 <Error_Handler>
  }
}
 800a2ac:	bf00      	nop
 800a2ae:	37c0      	adds	r7, #192	; 0xc0
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a2b8:	bf00      	nop
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
	...

0800a2c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2ca:	4a0f      	ldr	r2, [pc, #60]	; (800a308 <HAL_MspInit+0x44>)
 800a2cc:	4b0e      	ldr	r3, [pc, #56]	; (800a308 <HAL_MspInit+0x44>)
 800a2ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2d0:	f043 0301 	orr.w	r3, r3, #1
 800a2d4:	6613      	str	r3, [r2, #96]	; 0x60
 800a2d6:	4b0c      	ldr	r3, [pc, #48]	; (800a308 <HAL_MspInit+0x44>)
 800a2d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2da:	f003 0301 	and.w	r3, r3, #1
 800a2de:	607b      	str	r3, [r7, #4]
 800a2e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a2e2:	4a09      	ldr	r2, [pc, #36]	; (800a308 <HAL_MspInit+0x44>)
 800a2e4:	4b08      	ldr	r3, [pc, #32]	; (800a308 <HAL_MspInit+0x44>)
 800a2e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2ec:	6593      	str	r3, [r2, #88]	; 0x58
 800a2ee:	4b06      	ldr	r3, [pc, #24]	; (800a308 <HAL_MspInit+0x44>)
 800a2f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2f6:	603b      	str	r3, [r7, #0]
 800a2f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a2fa:	bf00      	nop
 800a2fc:	370c      	adds	r7, #12
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	40021000 	.word	0x40021000

0800a30c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a30c:	b480      	push	{r7}
 800a30e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a310:	bf00      	nop
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr

0800a31a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a31a:	b480      	push	{r7}
 800a31c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a31e:	e7fe      	b.n	800a31e <HardFault_Handler+0x4>

0800a320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a320:	b480      	push	{r7}
 800a322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a324:	e7fe      	b.n	800a324 <MemManage_Handler+0x4>

0800a326 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a326:	b480      	push	{r7}
 800a328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a32a:	e7fe      	b.n	800a32a <BusFault_Handler+0x4>

0800a32c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a32c:	b480      	push	{r7}
 800a32e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a330:	e7fe      	b.n	800a330 <UsageFault_Handler+0x4>

0800a332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a332:	b480      	push	{r7}
 800a334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a336:	bf00      	nop
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a340:	b480      	push	{r7}
 800a342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a344:	bf00      	nop
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a34e:	b480      	push	{r7}
 800a350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a352:	bf00      	nop
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a360:	f7f7 fb3c 	bl	80019dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  app_1ms();
 800a364:	f7f7 f95e 	bl	8001624 <app_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 800a368:	bf00      	nop
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a370:	4803      	ldr	r0, [pc, #12]	; (800a380 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800a372:	f7fa f9ec 	bl	800474e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800a376:	4803      	ldr	r0, [pc, #12]	; (800a384 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800a378:	f7fa f9e9 	bl	800474e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800a37c:	bf00      	nop
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	20001d50 	.word	0x20001d50
 800a384:	20001c90 	.word	0x20001c90

0800a388 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a38c:	4802      	ldr	r0, [pc, #8]	; (800a398 <TIM1_TRG_COM_IRQHandler+0x10>)
 800a38e:	f7fa f9de 	bl	800474e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800a392:	bf00      	nop
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	20001d50 	.word	0x20001d50

0800a39c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a3a0:	4802      	ldr	r0, [pc, #8]	; (800a3ac <TIM1_CC_IRQHandler+0x10>)
 800a3a2:	f7fa f9d4 	bl	800474e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800a3a6:	bf00      	nop
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	20001d50 	.word	0x20001d50

0800a3b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a3b4:	4802      	ldr	r0, [pc, #8]	; (800a3c0 <TIM2_IRQHandler+0x10>)
 800a3b6:	f7fa f9ca 	bl	800474e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a3ba:	bf00      	nop
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	20001d90 	.word	0x20001d90

0800a3c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a3c8:	4802      	ldr	r0, [pc, #8]	; (800a3d4 <TIM3_IRQHandler+0x10>)
 800a3ca:	f7fa f9c0 	bl	800474e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a3ce:	bf00      	nop
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	20001cd0 	.word	0x20001cd0

0800a3d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a3dc:	4802      	ldr	r0, [pc, #8]	; (800a3e8 <TIM6_DAC_IRQHandler+0x10>)
 800a3de:	f7fa f9b6 	bl	800474e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a3e2:	bf00      	nop
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20001d10 	.word	0x20001d10

0800a3ec <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800a3f0:	4802      	ldr	r0, [pc, #8]	; (800a3fc <LPTIM1_IRQHandler+0x10>)
 800a3f2:	f7f7 ff73 	bl	80022dc <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800a3f6:	bf00      	nop
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20001c58 	.word	0x20001c58

0800a400 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 800a404:	4802      	ldr	r0, [pc, #8]	; (800a410 <LPTIM2_IRQHandler+0x10>)
 800a406:	f7f7 ff69 	bl	80022dc <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 800a40a:	bf00      	nop
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	20001c20 	.word	0x20001c20

0800a414 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800a418:	4802      	ldr	r0, [pc, #8]	; (800a424 <USB_IRQHandler+0x10>)
 800a41a:	f7f8 f93b 	bl	8002694 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800a41e:	bf00      	nop
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	20003214 	.word	0x20003214

0800a428 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800a428:	b480      	push	{r7}
 800a42a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a42c:	4a17      	ldr	r2, [pc, #92]	; (800a48c <SystemInit+0x64>)
 800a42e:	4b17      	ldr	r3, [pc, #92]	; (800a48c <SystemInit+0x64>)
 800a430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800a43c:	4a14      	ldr	r2, [pc, #80]	; (800a490 <SystemInit+0x68>)
 800a43e:	4b14      	ldr	r3, [pc, #80]	; (800a490 <SystemInit+0x68>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f043 0301 	orr.w	r3, r3, #1
 800a446:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800a448:	4b11      	ldr	r3, [pc, #68]	; (800a490 <SystemInit+0x68>)
 800a44a:	2200      	movs	r2, #0
 800a44c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800a44e:	4a10      	ldr	r2, [pc, #64]	; (800a490 <SystemInit+0x68>)
 800a450:	4b0f      	ldr	r3, [pc, #60]	; (800a490 <SystemInit+0x68>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800a458:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800a45c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800a45e:	4b0c      	ldr	r3, [pc, #48]	; (800a490 <SystemInit+0x68>)
 800a460:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a464:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a466:	4a0a      	ldr	r2, [pc, #40]	; (800a490 <SystemInit+0x68>)
 800a468:	4b09      	ldr	r3, [pc, #36]	; (800a490 <SystemInit+0x68>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a470:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800a472:	4b07      	ldr	r3, [pc, #28]	; (800a490 <SystemInit+0x68>)
 800a474:	2200      	movs	r2, #0
 800a476:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a478:	4b04      	ldr	r3, [pc, #16]	; (800a48c <SystemInit+0x64>)
 800a47a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a47e:	609a      	str	r2, [r3, #8]
#endif
}
 800a480:	bf00      	nop
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	e000ed00 	.word	0xe000ed00
 800a490:	40021000 	.word	0x40021000

0800a494 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b096      	sub	sp, #88	; 0x58
 800a498:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a49a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a49e:	2200      	movs	r2, #0
 800a4a0:	601a      	str	r2, [r3, #0]
 800a4a2:	605a      	str	r2, [r3, #4]
 800a4a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a4a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	601a      	str	r2, [r3, #0]
 800a4ae:	605a      	str	r2, [r3, #4]
 800a4b0:	609a      	str	r2, [r3, #8]
 800a4b2:	60da      	str	r2, [r3, #12]
 800a4b4:	611a      	str	r2, [r3, #16]
 800a4b6:	615a      	str	r2, [r3, #20]
 800a4b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a4ba:	1d3b      	adds	r3, r7, #4
 800a4bc:	222c      	movs	r2, #44	; 0x2c
 800a4be:	2100      	movs	r1, #0
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f001 fac0 	bl	800ba46 <memset>

  htim1.Instance = TIM1;
 800a4c6:	4b38      	ldr	r3, [pc, #224]	; (800a5a8 <MX_TIM1_Init+0x114>)
 800a4c8:	4a38      	ldr	r2, [pc, #224]	; (800a5ac <MX_TIM1_Init+0x118>)
 800a4ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a4cc:	4b36      	ldr	r3, [pc, #216]	; (800a5a8 <MX_TIM1_Init+0x114>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a4d2:	4b35      	ldr	r3, [pc, #212]	; (800a5a8 <MX_TIM1_Init+0x114>)
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800a4d8:	4b33      	ldr	r3, [pc, #204]	; (800a5a8 <MX_TIM1_Init+0x114>)
 800a4da:	2200      	movs	r2, #0
 800a4dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a4de:	4b32      	ldr	r3, [pc, #200]	; (800a5a8 <MX_TIM1_Init+0x114>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a4e4:	4b30      	ldr	r3, [pc, #192]	; (800a5a8 <MX_TIM1_Init+0x114>)
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a4ea:	4b2f      	ldr	r3, [pc, #188]	; (800a5a8 <MX_TIM1_Init+0x114>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a4f0:	482d      	ldr	r0, [pc, #180]	; (800a5a8 <MX_TIM1_Init+0x114>)
 800a4f2:	f7fa f8d6 	bl	80046a2 <HAL_TIM_PWM_Init>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d001      	beq.n	800a500 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800a4fc:	f7ff feda 	bl	800a2b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a500:	2300      	movs	r3, #0
 800a502:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a504:	2300      	movs	r3, #0
 800a506:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a508:	2300      	movs	r3, #0
 800a50a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a50c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a510:	4619      	mov	r1, r3
 800a512:	4825      	ldr	r0, [pc, #148]	; (800a5a8 <MX_TIM1_Init+0x114>)
 800a514:	f7fb f97a 	bl	800580c <HAL_TIMEx_MasterConfigSynchronization>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d001      	beq.n	800a522 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800a51e:	f7ff fec9 	bl	800a2b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a522:	2360      	movs	r3, #96	; 0x60
 800a524:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800a526:	2300      	movs	r3, #0
 800a528:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a52a:	2300      	movs	r3, #0
 800a52c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a52e:	2300      	movs	r3, #0
 800a530:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a532:	2300      	movs	r3, #0
 800a534:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a536:	2300      	movs	r3, #0
 800a538:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a53a:	2300      	movs	r3, #0
 800a53c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a53e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a542:	2200      	movs	r2, #0
 800a544:	4619      	mov	r1, r3
 800a546:	4818      	ldr	r0, [pc, #96]	; (800a5a8 <MX_TIM1_Init+0x114>)
 800a548:	f7fa fabc 	bl	8004ac4 <HAL_TIM_PWM_ConfigChannel>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d001      	beq.n	800a556 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800a552:	f7ff feaf 	bl	800a2b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a556:	2300      	movs	r3, #0
 800a558:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a55a:	2300      	movs	r3, #0
 800a55c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a55e:	2300      	movs	r3, #0
 800a560:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a566:	2300      	movs	r3, #0
 800a568:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a56a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a56e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a570:	2300      	movs	r3, #0
 800a572:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a574:	2300      	movs	r3, #0
 800a576:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a578:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a57c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a57e:	2300      	movs	r3, #0
 800a580:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a582:	2300      	movs	r3, #0
 800a584:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a586:	1d3b      	adds	r3, r7, #4
 800a588:	4619      	mov	r1, r3
 800a58a:	4807      	ldr	r0, [pc, #28]	; (800a5a8 <MX_TIM1_Init+0x114>)
 800a58c:	f7fb f994 	bl	80058b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800a596:	f7ff fe8d 	bl	800a2b4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800a59a:	4803      	ldr	r0, [pc, #12]	; (800a5a8 <MX_TIM1_Init+0x114>)
 800a59c:	f000 face 	bl	800ab3c <HAL_TIM_MspPostInit>

}
 800a5a0:	bf00      	nop
 800a5a2:	3758      	adds	r7, #88	; 0x58
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	20001d50 	.word	0x20001d50
 800a5ac:	40012c00 	.word	0x40012c00

0800a5b0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b088      	sub	sp, #32
 800a5b4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a5b6:	f107 0314 	add.w	r3, r7, #20
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	605a      	str	r2, [r3, #4]
 800a5c0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800a5c2:	1d3b      	adds	r3, r7, #4
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	601a      	str	r2, [r3, #0]
 800a5c8:	605a      	str	r2, [r3, #4]
 800a5ca:	609a      	str	r2, [r3, #8]
 800a5cc:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800a5ce:	4b15      	ldr	r3, [pc, #84]	; (800a624 <MX_TIM2_Init+0x74>)
 800a5d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a5d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 800a5d6:	4b13      	ldr	r3, [pc, #76]	; (800a624 <MX_TIM2_Init+0x74>)
 800a5d8:	2208      	movs	r2, #8
 800a5da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a5dc:	4b11      	ldr	r3, [pc, #68]	; (800a624 <MX_TIM2_Init+0x74>)
 800a5de:	2200      	movs	r2, #0
 800a5e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800a5e2:	4b10      	ldr	r3, [pc, #64]	; (800a624 <MX_TIM2_Init+0x74>)
 800a5e4:	220a      	movs	r2, #10
 800a5e6:	60da      	str	r2, [r3, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a5e8:	4b0e      	ldr	r3, [pc, #56]	; (800a624 <MX_TIM2_Init+0x74>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a5ee:	480d      	ldr	r0, [pc, #52]	; (800a624 <MX_TIM2_Init+0x74>)
 800a5f0:	f7fa f82c 	bl	800464c <HAL_TIM_Base_Init>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d001      	beq.n	800a5fe <MX_TIM2_Init+0x4e>
  {
    Error_Handler();
 800a5fa:	f7ff fe5b 	bl	800a2b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a5fe:	2300      	movs	r3, #0
 800a600:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a602:	2300      	movs	r3, #0
 800a604:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a606:	f107 0314 	add.w	r3, r7, #20
 800a60a:	4619      	mov	r1, r3
 800a60c:	4805      	ldr	r0, [pc, #20]	; (800a624 <MX_TIM2_Init+0x74>)
 800a60e:	f7fb f8fd 	bl	800580c <HAL_TIMEx_MasterConfigSynchronization>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800a618:	f7ff fe4c 	bl	800a2b4 <Error_Handler>
  }

}
 800a61c:	bf00      	nop
 800a61e:	3720      	adds	r7, #32
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}
 800a624:	20001d90 	.word	0x20001d90

0800a628 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b088      	sub	sp, #32
 800a62c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a62e:	f107 0314 	add.w	r3, r7, #20
 800a632:	2200      	movs	r2, #0
 800a634:	601a      	str	r2, [r3, #0]
 800a636:	605a      	str	r2, [r3, #4]
 800a638:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800a63a:	1d3b      	adds	r3, r7, #4
 800a63c:	2200      	movs	r2, #0
 800a63e:	601a      	str	r2, [r3, #0]
 800a640:	605a      	str	r2, [r3, #4]
 800a642:	609a      	str	r2, [r3, #8]
 800a644:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 800a646:	4b27      	ldr	r3, [pc, #156]	; (800a6e4 <MX_TIM3_Init+0xbc>)
 800a648:	4a27      	ldr	r2, [pc, #156]	; (800a6e8 <MX_TIM3_Init+0xc0>)
 800a64a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80;
 800a64c:	4b25      	ldr	r3, [pc, #148]	; (800a6e4 <MX_TIM3_Init+0xbc>)
 800a64e:	2250      	movs	r2, #80	; 0x50
 800a650:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a652:	4b24      	ldr	r3, [pc, #144]	; (800a6e4 <MX_TIM3_Init+0xbc>)
 800a654:	2200      	movs	r2, #0
 800a656:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 800a658:	4b22      	ldr	r3, [pc, #136]	; (800a6e4 <MX_TIM3_Init+0xbc>)
 800a65a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a65e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a660:	4b20      	ldr	r3, [pc, #128]	; (800a6e4 <MX_TIM3_Init+0xbc>)
 800a662:	2200      	movs	r2, #0
 800a664:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a666:	4b1f      	ldr	r3, [pc, #124]	; (800a6e4 <MX_TIM3_Init+0xbc>)
 800a668:	2200      	movs	r2, #0
 800a66a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800a66c:	481d      	ldr	r0, [pc, #116]	; (800a6e4 <MX_TIM3_Init+0xbc>)
 800a66e:	f7fa f843 	bl	80046f8 <HAL_TIM_IC_Init>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d001      	beq.n	800a67c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800a678:	f7ff fe1c 	bl	800a2b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a67c:	2300      	movs	r3, #0
 800a67e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a680:	2300      	movs	r3, #0
 800a682:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a684:	f107 0314 	add.w	r3, r7, #20
 800a688:	4619      	mov	r1, r3
 800a68a:	4816      	ldr	r0, [pc, #88]	; (800a6e4 <MX_TIM3_Init+0xbc>)
 800a68c:	f7fb f8be 	bl	800580c <HAL_TIMEx_MasterConfigSynchronization>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800a696:	f7ff fe0d 	bl	800a2b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800a69a:	2302      	movs	r3, #2
 800a69c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800a6aa:	1d3b      	adds	r3, r7, #4
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	480c      	ldr	r0, [pc, #48]	; (800a6e4 <MX_TIM3_Init+0xbc>)
 800a6b2:	f7fa f96b 	bl	800498c <HAL_TIM_IC_ConfigChannel>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800a6bc:	f7ff fdfa 	bl	800a2b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800a6c0:	2302      	movs	r3, #2
 800a6c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800a6c4:	1d3b      	adds	r3, r7, #4
 800a6c6:	2204      	movs	r2, #4
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	4806      	ldr	r0, [pc, #24]	; (800a6e4 <MX_TIM3_Init+0xbc>)
 800a6cc:	f7fa f95e 	bl	800498c <HAL_TIM_IC_ConfigChannel>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d001      	beq.n	800a6da <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800a6d6:	f7ff fded 	bl	800a2b4 <Error_Handler>
  }

}
 800a6da:	bf00      	nop
 800a6dc:	3720      	adds	r7, #32
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	20001cd0 	.word	0x20001cd0
 800a6e8:	40000400 	.word	0x40000400

0800a6ec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a6f2:	1d3b      	adds	r3, r7, #4
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	601a      	str	r2, [r3, #0]
 800a6f8:	605a      	str	r2, [r3, #4]
 800a6fa:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 800a6fc:	4b14      	ldr	r3, [pc, #80]	; (800a750 <MX_TIM6_Init+0x64>)
 800a6fe:	4a15      	ldr	r2, [pc, #84]	; (800a754 <MX_TIM6_Init+0x68>)
 800a700:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80;
 800a702:	4b13      	ldr	r3, [pc, #76]	; (800a750 <MX_TIM6_Init+0x64>)
 800a704:	2250      	movs	r2, #80	; 0x50
 800a706:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a708:	4b11      	ldr	r3, [pc, #68]	; (800a750 <MX_TIM6_Init+0x64>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 92;
 800a70e:	4b10      	ldr	r3, [pc, #64]	; (800a750 <MX_TIM6_Init+0x64>)
 800a710:	225c      	movs	r2, #92	; 0x5c
 800a712:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a714:	4b0e      	ldr	r3, [pc, #56]	; (800a750 <MX_TIM6_Init+0x64>)
 800a716:	2200      	movs	r2, #0
 800a718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a71a:	480d      	ldr	r0, [pc, #52]	; (800a750 <MX_TIM6_Init+0x64>)
 800a71c:	f7f9 ff96 	bl	800464c <HAL_TIM_Base_Init>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d001      	beq.n	800a72a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800a726:	f7ff fdc5 	bl	800a2b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a72a:	2300      	movs	r3, #0
 800a72c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a72e:	2300      	movs	r3, #0
 800a730:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800a732:	1d3b      	adds	r3, r7, #4
 800a734:	4619      	mov	r1, r3
 800a736:	4806      	ldr	r0, [pc, #24]	; (800a750 <MX_TIM6_Init+0x64>)
 800a738:	f7fb f868 	bl	800580c <HAL_TIMEx_MasterConfigSynchronization>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800a742:	f7ff fdb7 	bl	800a2b4 <Error_Handler>
  }

}
 800a746:	bf00      	nop
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	20001d10 	.word	0x20001d10
 800a754:	40001000 	.word	0x40001000

0800a758 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b09a      	sub	sp, #104	; 0x68
 800a75c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a75e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a762:	2200      	movs	r2, #0
 800a764:	601a      	str	r2, [r3, #0]
 800a766:	605a      	str	r2, [r3, #4]
 800a768:	609a      	str	r2, [r3, #8]
 800a76a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a76c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a770:	2200      	movs	r2, #0
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	605a      	str	r2, [r3, #4]
 800a776:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a778:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a77c:	2200      	movs	r2, #0
 800a77e:	601a      	str	r2, [r3, #0]
 800a780:	605a      	str	r2, [r3, #4]
 800a782:	609a      	str	r2, [r3, #8]
 800a784:	60da      	str	r2, [r3, #12]
 800a786:	611a      	str	r2, [r3, #16]
 800a788:	615a      	str	r2, [r3, #20]
 800a78a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a78c:	1d3b      	adds	r3, r7, #4
 800a78e:	222c      	movs	r2, #44	; 0x2c
 800a790:	2100      	movs	r1, #0
 800a792:	4618      	mov	r0, r3
 800a794:	f001 f957 	bl	800ba46 <memset>

  htim15.Instance = TIM15;
 800a798:	4b44      	ldr	r3, [pc, #272]	; (800a8ac <MX_TIM15_Init+0x154>)
 800a79a:	4a45      	ldr	r2, [pc, #276]	; (800a8b0 <MX_TIM15_Init+0x158>)
 800a79c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80;
 800a79e:	4b43      	ldr	r3, [pc, #268]	; (800a8ac <MX_TIM15_Init+0x154>)
 800a7a0:	2250      	movs	r2, #80	; 0x50
 800a7a2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a7a4:	4b41      	ldr	r3, [pc, #260]	; (800a8ac <MX_TIM15_Init+0x154>)
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 0;
 800a7aa:	4b40      	ldr	r3, [pc, #256]	; (800a8ac <MX_TIM15_Init+0x154>)
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a7b0:	4b3e      	ldr	r3, [pc, #248]	; (800a8ac <MX_TIM15_Init+0x154>)
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800a7b6:	4b3d      	ldr	r3, [pc, #244]	; (800a8ac <MX_TIM15_Init+0x154>)
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a7bc:	4b3b      	ldr	r3, [pc, #236]	; (800a8ac <MX_TIM15_Init+0x154>)
 800a7be:	2200      	movs	r2, #0
 800a7c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800a7c2:	483a      	ldr	r0, [pc, #232]	; (800a8ac <MX_TIM15_Init+0x154>)
 800a7c4:	f7f9 ff42 	bl	800464c <HAL_TIM_Base_Init>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d001      	beq.n	800a7d2 <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 800a7ce:	f7ff fd71 	bl	800a2b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a7d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7d6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800a7d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a7dc:	4619      	mov	r1, r3
 800a7de:	4833      	ldr	r0, [pc, #204]	; (800a8ac <MX_TIM15_Init+0x154>)
 800a7e0:	f7fa fa88 	bl	8004cf4 <HAL_TIM_ConfigClockSource>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d001      	beq.n	800a7ee <MX_TIM15_Init+0x96>
  {
    Error_Handler();
 800a7ea:	f7ff fd63 	bl	800a2b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800a7ee:	482f      	ldr	r0, [pc, #188]	; (800a8ac <MX_TIM15_Init+0x154>)
 800a7f0:	f7f9 ff57 	bl	80046a2 <HAL_TIM_PWM_Init>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d001      	beq.n	800a7fe <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 800a7fa:	f7ff fd5b 	bl	800a2b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a7fe:	2300      	movs	r3, #0
 800a800:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a802:	2300      	movs	r3, #0
 800a804:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800a806:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a80a:	4619      	mov	r1, r3
 800a80c:	4827      	ldr	r0, [pc, #156]	; (800a8ac <MX_TIM15_Init+0x154>)
 800a80e:	f7fa fffd 	bl	800580c <HAL_TIMEx_MasterConfigSynchronization>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d001      	beq.n	800a81c <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 800a818:	f7ff fd4c 	bl	800a2b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a81c:	2360      	movs	r3, #96	; 0x60
 800a81e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800a820:	2300      	movs	r3, #0
 800a822:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a824:	2300      	movs	r3, #0
 800a826:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a828:	2300      	movs	r3, #0
 800a82a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a82c:	2300      	movs	r3, #0
 800a82e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a830:	2300      	movs	r3, #0
 800a832:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a834:	2300      	movs	r3, #0
 800a836:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a838:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a83c:	2200      	movs	r2, #0
 800a83e:	4619      	mov	r1, r3
 800a840:	481a      	ldr	r0, [pc, #104]	; (800a8ac <MX_TIM15_Init+0x154>)
 800a842:	f7fa f93f 	bl	8004ac4 <HAL_TIM_PWM_ConfigChannel>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d001      	beq.n	800a850 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 800a84c:	f7ff fd32 	bl	800a2b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a850:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a854:	2204      	movs	r2, #4
 800a856:	4619      	mov	r1, r3
 800a858:	4814      	ldr	r0, [pc, #80]	; (800a8ac <MX_TIM15_Init+0x154>)
 800a85a:	f7fa f933 	bl	8004ac4 <HAL_TIM_PWM_ConfigChannel>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d001      	beq.n	800a868 <MX_TIM15_Init+0x110>
  {
    Error_Handler();
 800a864:	f7ff fd26 	bl	800a2b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a868:	2300      	movs	r3, #0
 800a86a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a86c:	2300      	movs	r3, #0
 800a86e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a870:	2300      	movs	r3, #0
 800a872:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a874:	2300      	movs	r3, #0
 800a876:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a878:	2300      	movs	r3, #0
 800a87a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a87c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a880:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a882:	2300      	movs	r3, #0
 800a884:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a886:	2300      	movs	r3, #0
 800a888:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800a88a:	1d3b      	adds	r3, r7, #4
 800a88c:	4619      	mov	r1, r3
 800a88e:	4807      	ldr	r0, [pc, #28]	; (800a8ac <MX_TIM15_Init+0x154>)
 800a890:	f7fb f812 	bl	80058b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d001      	beq.n	800a89e <MX_TIM15_Init+0x146>
  {
    Error_Handler();
 800a89a:	f7ff fd0b 	bl	800a2b4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim15);
 800a89e:	4803      	ldr	r0, [pc, #12]	; (800a8ac <MX_TIM15_Init+0x154>)
 800a8a0:	f000 f94c 	bl	800ab3c <HAL_TIM_MspPostInit>

}
 800a8a4:	bf00      	nop
 800a8a6:	3768      	adds	r7, #104	; 0x68
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	20001c90 	.word	0x20001c90
 800a8b0:	40014000 	.word	0x40014000

0800a8b4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800a8b8:	4b0f      	ldr	r3, [pc, #60]	; (800a8f8 <MX_TIM16_Init+0x44>)
 800a8ba:	4a10      	ldr	r2, [pc, #64]	; (800a8fc <MX_TIM16_Init+0x48>)
 800a8bc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8;
 800a8be:	4b0e      	ldr	r3, [pc, #56]	; (800a8f8 <MX_TIM16_Init+0x44>)
 800a8c0:	2208      	movs	r2, #8
 800a8c2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a8c4:	4b0c      	ldr	r3, [pc, #48]	; (800a8f8 <MX_TIM16_Init+0x44>)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50;
 800a8ca:	4b0b      	ldr	r3, [pc, #44]	; (800a8f8 <MX_TIM16_Init+0x44>)
 800a8cc:	2232      	movs	r2, #50	; 0x32
 800a8ce:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a8d0:	4b09      	ldr	r3, [pc, #36]	; (800a8f8 <MX_TIM16_Init+0x44>)
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800a8d6:	4b08      	ldr	r3, [pc, #32]	; (800a8f8 <MX_TIM16_Init+0x44>)
 800a8d8:	2200      	movs	r2, #0
 800a8da:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a8dc:	4b06      	ldr	r3, [pc, #24]	; (800a8f8 <MX_TIM16_Init+0x44>)
 800a8de:	2200      	movs	r2, #0
 800a8e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800a8e2:	4805      	ldr	r0, [pc, #20]	; (800a8f8 <MX_TIM16_Init+0x44>)
 800a8e4:	f7f9 feb2 	bl	800464c <HAL_TIM_Base_Init>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800a8ee:	f7ff fce1 	bl	800a2b4 <Error_Handler>
  }

}
 800a8f2:	bf00      	nop
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	20001dd0 	.word	0x20001dd0
 800a8fc:	40014400 	.word	0x40014400

0800a900 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a19      	ldr	r2, [pc, #100]	; (800a974 <HAL_TIM_PWM_MspInit+0x74>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d12b      	bne.n	800a96a <HAL_TIM_PWM_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a912:	4a19      	ldr	r2, [pc, #100]	; (800a978 <HAL_TIM_PWM_MspInit+0x78>)
 800a914:	4b18      	ldr	r3, [pc, #96]	; (800a978 <HAL_TIM_PWM_MspInit+0x78>)
 800a916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a918:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a91c:	6613      	str	r3, [r2, #96]	; 0x60
 800a91e:	4b16      	ldr	r3, [pc, #88]	; (800a978 <HAL_TIM_PWM_MspInit+0x78>)
 800a920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a926:	60fb      	str	r3, [r7, #12]
 800a928:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800a92a:	2200      	movs	r2, #0
 800a92c:	2100      	movs	r1, #0
 800a92e:	2018      	movs	r0, #24
 800a930:	f7f7 f943 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800a934:	2018      	movs	r0, #24
 800a936:	f7f7 f95c 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800a93a:	2200      	movs	r2, #0
 800a93c:	2100      	movs	r1, #0
 800a93e:	2019      	movs	r0, #25
 800a940:	f7f7 f93b 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a944:	2019      	movs	r0, #25
 800a946:	f7f7 f954 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800a94a:	2200      	movs	r2, #0
 800a94c:	2100      	movs	r1, #0
 800a94e:	201a      	movs	r0, #26
 800a950:	f7f7 f933 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800a954:	201a      	movs	r0, #26
 800a956:	f7f7 f94c 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800a95a:	2200      	movs	r2, #0
 800a95c:	2100      	movs	r1, #0
 800a95e:	201b      	movs	r0, #27
 800a960:	f7f7 f92b 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800a964:	201b      	movs	r0, #27
 800a966:	f7f7 f944 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800a96a:	bf00      	nop
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	40012c00 	.word	0x40012c00
 800a978:	40021000 	.word	0x40021000

0800a97c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b08c      	sub	sp, #48	; 0x30
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a984:	f107 031c 	add.w	r3, r7, #28
 800a988:	2200      	movs	r2, #0
 800a98a:	601a      	str	r2, [r3, #0]
 800a98c:	605a      	str	r2, [r3, #4]
 800a98e:	609a      	str	r2, [r3, #8]
 800a990:	60da      	str	r2, [r3, #12]
 800a992:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a99c:	d131      	bne.n	800aa02 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a99e:	4a35      	ldr	r2, [pc, #212]	; (800aa74 <HAL_TIM_IC_MspInit+0xf8>)
 800a9a0:	4b34      	ldr	r3, [pc, #208]	; (800aa74 <HAL_TIM_IC_MspInit+0xf8>)
 800a9a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9a4:	f043 0301 	orr.w	r3, r3, #1
 800a9a8:	6593      	str	r3, [r2, #88]	; 0x58
 800a9aa:	4b32      	ldr	r3, [pc, #200]	; (800aa74 <HAL_TIM_IC_MspInit+0xf8>)
 800a9ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ae:	f003 0301 	and.w	r3, r3, #1
 800a9b2:	61bb      	str	r3, [r7, #24]
 800a9b4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9b6:	4a2f      	ldr	r2, [pc, #188]	; (800aa74 <HAL_TIM_IC_MspInit+0xf8>)
 800a9b8:	4b2e      	ldr	r3, [pc, #184]	; (800aa74 <HAL_TIM_IC_MspInit+0xf8>)
 800a9ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9bc:	f043 0301 	orr.w	r3, r3, #1
 800a9c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a9c2:	4b2c      	ldr	r3, [pc, #176]	; (800aa74 <HAL_TIM_IC_MspInit+0xf8>)
 800a9c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	617b      	str	r3, [r7, #20]
 800a9cc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a9ce:	2303      	movs	r3, #3
 800a9d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9e2:	f107 031c 	add.w	r3, r7, #28
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a9ec:	f7f7 f91c 	bl	8001c28 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	201c      	movs	r0, #28
 800a9f6:	f7f7 f8e0 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a9fa:	201c      	movs	r0, #28
 800a9fc:	f7f7 f8f9 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800aa00:	e034      	b.n	800aa6c <HAL_TIM_IC_MspInit+0xf0>
  else if(tim_icHandle->Instance==TIM3)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a1c      	ldr	r2, [pc, #112]	; (800aa78 <HAL_TIM_IC_MspInit+0xfc>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d12f      	bne.n	800aa6c <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800aa0c:	4a19      	ldr	r2, [pc, #100]	; (800aa74 <HAL_TIM_IC_MspInit+0xf8>)
 800aa0e:	4b19      	ldr	r3, [pc, #100]	; (800aa74 <HAL_TIM_IC_MspInit+0xf8>)
 800aa10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa12:	f043 0302 	orr.w	r3, r3, #2
 800aa16:	6593      	str	r3, [r2, #88]	; 0x58
 800aa18:	4b16      	ldr	r3, [pc, #88]	; (800aa74 <HAL_TIM_IC_MspInit+0xf8>)
 800aa1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa1c:	f003 0302 	and.w	r3, r3, #2
 800aa20:	613b      	str	r3, [r7, #16]
 800aa22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa24:	4a13      	ldr	r2, [pc, #76]	; (800aa74 <HAL_TIM_IC_MspInit+0xf8>)
 800aa26:	4b13      	ldr	r3, [pc, #76]	; (800aa74 <HAL_TIM_IC_MspInit+0xf8>)
 800aa28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa2a:	f043 0302 	orr.w	r3, r3, #2
 800aa2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa30:	4b10      	ldr	r3, [pc, #64]	; (800aa74 <HAL_TIM_IC_MspInit+0xf8>)
 800aa32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa34:	f003 0302 	and.w	r3, r3, #2
 800aa38:	60fb      	str	r3, [r7, #12]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800aa3c:	2330      	movs	r3, #48	; 0x30
 800aa3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa40:	2302      	movs	r3, #2
 800aa42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa44:	2300      	movs	r3, #0
 800aa46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa50:	f107 031c 	add.w	r3, r7, #28
 800aa54:	4619      	mov	r1, r3
 800aa56:	4809      	ldr	r0, [pc, #36]	; (800aa7c <HAL_TIM_IC_MspInit+0x100>)
 800aa58:	f7f7 f8e6 	bl	8001c28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	2100      	movs	r1, #0
 800aa60:	201d      	movs	r0, #29
 800aa62:	f7f7 f8aa 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800aa66:	201d      	movs	r0, #29
 800aa68:	f7f7 f8c3 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
}
 800aa6c:	bf00      	nop
 800aa6e:	3730      	adds	r7, #48	; 0x30
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	40021000 	.word	0x40021000
 800aa78:	40000400 	.word	0x40000400
 800aa7c:	48000400 	.word	0x48000400

0800aa80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a27      	ldr	r2, [pc, #156]	; (800ab2c <HAL_TIM_Base_MspInit+0xac>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d114      	bne.n	800aabc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800aa92:	4a27      	ldr	r2, [pc, #156]	; (800ab30 <HAL_TIM_Base_MspInit+0xb0>)
 800aa94:	4b26      	ldr	r3, [pc, #152]	; (800ab30 <HAL_TIM_Base_MspInit+0xb0>)
 800aa96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa98:	f043 0310 	orr.w	r3, r3, #16
 800aa9c:	6593      	str	r3, [r2, #88]	; 0x58
 800aa9e:	4b24      	ldr	r3, [pc, #144]	; (800ab30 <HAL_TIM_Base_MspInit+0xb0>)
 800aaa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaa2:	f003 0310 	and.w	r3, r3, #16
 800aaa6:	617b      	str	r3, [r7, #20]
 800aaa8:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800aaaa:	2200      	movs	r2, #0
 800aaac:	2100      	movs	r1, #0
 800aaae:	2036      	movs	r0, #54	; 0x36
 800aab0:	f7f7 f883 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800aab4:	2036      	movs	r0, #54	; 0x36
 800aab6:	f7f7 f89c 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800aaba:	e032      	b.n	800ab22 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM15)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a1c      	ldr	r2, [pc, #112]	; (800ab34 <HAL_TIM_Base_MspInit+0xb4>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d114      	bne.n	800aaf0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800aac6:	4a1a      	ldr	r2, [pc, #104]	; (800ab30 <HAL_TIM_Base_MspInit+0xb0>)
 800aac8:	4b19      	ldr	r3, [pc, #100]	; (800ab30 <HAL_TIM_Base_MspInit+0xb0>)
 800aaca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aacc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aad0:	6613      	str	r3, [r2, #96]	; 0x60
 800aad2:	4b17      	ldr	r3, [pc, #92]	; (800ab30 <HAL_TIM_Base_MspInit+0xb0>)
 800aad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aada:	613b      	str	r3, [r7, #16]
 800aadc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800aade:	2200      	movs	r2, #0
 800aae0:	2100      	movs	r1, #0
 800aae2:	2018      	movs	r0, #24
 800aae4:	f7f7 f869 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800aae8:	2018      	movs	r0, #24
 800aaea:	f7f7 f882 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
}
 800aaee:	e018      	b.n	800ab22 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM16)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a10      	ldr	r2, [pc, #64]	; (800ab38 <HAL_TIM_Base_MspInit+0xb8>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d113      	bne.n	800ab22 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800aafa:	4a0d      	ldr	r2, [pc, #52]	; (800ab30 <HAL_TIM_Base_MspInit+0xb0>)
 800aafc:	4b0c      	ldr	r3, [pc, #48]	; (800ab30 <HAL_TIM_Base_MspInit+0xb0>)
 800aafe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab04:	6613      	str	r3, [r2, #96]	; 0x60
 800ab06:	4b0a      	ldr	r3, [pc, #40]	; (800ab30 <HAL_TIM_Base_MspInit+0xb0>)
 800ab08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab0e:	60fb      	str	r3, [r7, #12]
 800ab10:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800ab12:	2200      	movs	r2, #0
 800ab14:	2100      	movs	r1, #0
 800ab16:	2019      	movs	r0, #25
 800ab18:	f7f7 f84f 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800ab1c:	2019      	movs	r0, #25
 800ab1e:	f7f7 f868 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
}
 800ab22:	bf00      	nop
 800ab24:	3718      	adds	r7, #24
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	40001000 	.word	0x40001000
 800ab30:	40021000 	.word	0x40021000
 800ab34:	40014000 	.word	0x40014000
 800ab38:	40014400 	.word	0x40014400

0800ab3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b08a      	sub	sp, #40	; 0x28
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab44:	f107 0314 	add.w	r3, r7, #20
 800ab48:	2200      	movs	r2, #0
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	605a      	str	r2, [r3, #4]
 800ab4e:	609a      	str	r2, [r3, #8]
 800ab50:	60da      	str	r2, [r3, #12]
 800ab52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a23      	ldr	r2, [pc, #140]	; (800abe8 <HAL_TIM_MspPostInit+0xac>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d11e      	bne.n	800ab9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab5e:	4a23      	ldr	r2, [pc, #140]	; (800abec <HAL_TIM_MspPostInit+0xb0>)
 800ab60:	4b22      	ldr	r3, [pc, #136]	; (800abec <HAL_TIM_MspPostInit+0xb0>)
 800ab62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab64:	f043 0301 	orr.w	r3, r3, #1
 800ab68:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab6a:	4b20      	ldr	r3, [pc, #128]	; (800abec <HAL_TIM_MspPostInit+0xb0>)
 800ab6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab6e:	f003 0301 	and.w	r3, r3, #1
 800ab72:	613b      	str	r3, [r7, #16]
 800ab74:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = O_PWM_LED3_Pin;
 800ab76:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab7c:	2302      	movs	r3, #2
 800ab7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab80:	2300      	movs	r3, #0
 800ab82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab84:	2300      	movs	r3, #0
 800ab86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(O_PWM_LED3_GPIO_Port, &GPIO_InitStruct);
 800ab8c:	f107 0314 	add.w	r3, r7, #20
 800ab90:	4619      	mov	r1, r3
 800ab92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ab96:	f7f7 f847 	bl	8001c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800ab9a:	e021      	b.n	800abe0 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM15)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a13      	ldr	r2, [pc, #76]	; (800abf0 <HAL_TIM_MspPostInit+0xb4>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d11c      	bne.n	800abe0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aba6:	4a11      	ldr	r2, [pc, #68]	; (800abec <HAL_TIM_MspPostInit+0xb0>)
 800aba8:	4b10      	ldr	r3, [pc, #64]	; (800abec <HAL_TIM_MspPostInit+0xb0>)
 800abaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abac:	f043 0302 	orr.w	r3, r3, #2
 800abb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800abb2:	4b0e      	ldr	r3, [pc, #56]	; (800abec <HAL_TIM_MspPostInit+0xb0>)
 800abb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abb6:	f003 0302 	and.w	r3, r3, #2
 800abba:	60fb      	str	r3, [r7, #12]
 800abbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = O_PWM_LED2_Pin|O_PWM_LED1_Pin;
 800abbe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800abc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abc4:	2302      	movs	r3, #2
 800abc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abc8:	2300      	movs	r3, #0
 800abca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abcc:	2300      	movs	r3, #0
 800abce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800abd0:	230e      	movs	r3, #14
 800abd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800abd4:	f107 0314 	add.w	r3, r7, #20
 800abd8:	4619      	mov	r1, r3
 800abda:	4806      	ldr	r0, [pc, #24]	; (800abf4 <HAL_TIM_MspPostInit+0xb8>)
 800abdc:	f7f7 f824 	bl	8001c28 <HAL_GPIO_Init>
}
 800abe0:	bf00      	nop
 800abe2:	3728      	adds	r7, #40	; 0x28
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	40012c00 	.word	0x40012c00
 800abec:	40021000 	.word	0x40021000
 800abf0:	40014000 	.word	0x40014000
 800abf4:	48000400 	.word	0x48000400

0800abf8 <tim_setNewTimeAndStart>:
  /* USER CODE END TIM16_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void tim_setNewTimeAndStart(TIM_TypeDef *tim, uint32_t time){
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
	tim->CR1 &= ~TIM_CR1_CEN;	//Stop counter
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f023 0201 	bic.w	r2, r3, #1
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	601a      	str	r2, [r3, #0]
	tim->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f043 0202 	orr.w	r2, r3, #2
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	601a      	str	r2, [r3, #0]
	tim->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	f023 0201 	bic.w	r2, r3, #1
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	611a      	str	r2, [r3, #16]
	tim->ARR = time;				//Load new time
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	683a      	ldr	r2, [r7, #0]
 800ac2a:	62da      	str	r2, [r3, #44]	; 0x2c
	tim->EGR |= TIM_EGR_UG;		//Force reload of shadow register -> Start from beginning
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	695b      	ldr	r3, [r3, #20]
 800ac30:	f043 0201 	orr.w	r2, r3, #1
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	615a      	str	r2, [r3, #20]
	tim->CR1 &= ~TIM_CR1_UDIS;	//Allow new updates to be triggered
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f023 0202 	bic.w	r2, r3, #2
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	601a      	str	r2, [r3, #0]
	tim->DIER |= TIM_DIER_UIE;	//Enable update interrupts
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	f043 0201 	orr.w	r2, r3, #1
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	60da      	str	r2, [r3, #12]
	tim->CR1 |= TIM_CR1_CEN;		//Enable counter
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f043 0201 	orr.w	r2, r3, #1
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	601a      	str	r2, [r3, #0]
}
 800ac5c:	bf00      	nop
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <tim_stop>:
void tim_stop(TIM_TypeDef *tim){
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
	tim->CR1 &= ~TIM_CR1_CEN;	//Stop counter
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f023 0201 	bic.w	r2, r3, #1
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	601a      	str	r2, [r3, #0]
	tim->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f043 0202 	orr.w	r2, r3, #2
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	601a      	str	r2, [r3, #0]
	tim->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	691b      	ldr	r3, [r3, #16]
 800ac8c:	f023 0201 	bic.w	r2, r3, #1
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	611a      	str	r2, [r3, #16]
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800aca4:	4b14      	ldr	r3, [pc, #80]	; (800acf8 <MX_UART4_Init+0x58>)
 800aca6:	4a15      	ldr	r2, [pc, #84]	; (800acfc <MX_UART4_Init+0x5c>)
 800aca8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800acaa:	4b13      	ldr	r3, [pc, #76]	; (800acf8 <MX_UART4_Init+0x58>)
 800acac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800acb0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800acb2:	4b11      	ldr	r3, [pc, #68]	; (800acf8 <MX_UART4_Init+0x58>)
 800acb4:	2200      	movs	r2, #0
 800acb6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800acb8:	4b0f      	ldr	r3, [pc, #60]	; (800acf8 <MX_UART4_Init+0x58>)
 800acba:	2200      	movs	r2, #0
 800acbc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800acbe:	4b0e      	ldr	r3, [pc, #56]	; (800acf8 <MX_UART4_Init+0x58>)
 800acc0:	2200      	movs	r2, #0
 800acc2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800acc4:	4b0c      	ldr	r3, [pc, #48]	; (800acf8 <MX_UART4_Init+0x58>)
 800acc6:	220c      	movs	r2, #12
 800acc8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800acca:	4b0b      	ldr	r3, [pc, #44]	; (800acf8 <MX_UART4_Init+0x58>)
 800accc:	2200      	movs	r2, #0
 800acce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800acd0:	4b09      	ldr	r3, [pc, #36]	; (800acf8 <MX_UART4_Init+0x58>)
 800acd2:	2200      	movs	r2, #0
 800acd4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800acd6:	4b08      	ldr	r3, [pc, #32]	; (800acf8 <MX_UART4_Init+0x58>)
 800acd8:	2200      	movs	r2, #0
 800acda:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800acdc:	4b06      	ldr	r3, [pc, #24]	; (800acf8 <MX_UART4_Init+0x58>)
 800acde:	2200      	movs	r2, #0
 800ace0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800ace2:	4805      	ldr	r0, [pc, #20]	; (800acf8 <MX_UART4_Init+0x58>)
 800ace4:	f7fa fe7e 	bl	80059e4 <HAL_UART_Init>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d001      	beq.n	800acf2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800acee:	f7ff fae1 	bl	800a2b4 <Error_Handler>
  }

}
 800acf2:	bf00      	nop
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	20001e88 	.word	0x20001e88
 800acfc:	40004c00 	.word	0x40004c00

0800ad00 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800ad04:	4b14      	ldr	r3, [pc, #80]	; (800ad58 <MX_USART1_UART_Init+0x58>)
 800ad06:	4a15      	ldr	r2, [pc, #84]	; (800ad5c <MX_USART1_UART_Init+0x5c>)
 800ad08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 800ad0a:	4b13      	ldr	r3, [pc, #76]	; (800ad58 <MX_USART1_UART_Init+0x58>)
 800ad0c:	4a14      	ldr	r2, [pc, #80]	; (800ad60 <MX_USART1_UART_Init+0x60>)
 800ad0e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ad10:	4b11      	ldr	r3, [pc, #68]	; (800ad58 <MX_USART1_UART_Init+0x58>)
 800ad12:	2200      	movs	r2, #0
 800ad14:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 800ad16:	4b10      	ldr	r3, [pc, #64]	; (800ad58 <MX_USART1_UART_Init+0x58>)
 800ad18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ad1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ad1e:	4b0e      	ldr	r3, [pc, #56]	; (800ad58 <MX_USART1_UART_Init+0x58>)
 800ad20:	2200      	movs	r2, #0
 800ad22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ad24:	4b0c      	ldr	r3, [pc, #48]	; (800ad58 <MX_USART1_UART_Init+0x58>)
 800ad26:	220c      	movs	r2, #12
 800ad28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ad2a:	4b0b      	ldr	r3, [pc, #44]	; (800ad58 <MX_USART1_UART_Init+0x58>)
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ad30:	4b09      	ldr	r3, [pc, #36]	; (800ad58 <MX_USART1_UART_Init+0x58>)
 800ad32:	2200      	movs	r2, #0
 800ad34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ad36:	4b08      	ldr	r3, [pc, #32]	; (800ad58 <MX_USART1_UART_Init+0x58>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ad3c:	4b06      	ldr	r3, [pc, #24]	; (800ad58 <MX_USART1_UART_Init+0x58>)
 800ad3e:	2200      	movs	r2, #0
 800ad40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ad42:	4805      	ldr	r0, [pc, #20]	; (800ad58 <MX_USART1_UART_Init+0x58>)
 800ad44:	f7fa fe4e 	bl	80059e4 <HAL_UART_Init>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d001      	beq.n	800ad52 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800ad4e:	f7ff fab1 	bl	800a2b4 <Error_Handler>
  }

}
 800ad52:	bf00      	nop
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20001e10 	.word	0x20001e10
 800ad5c:	40013800 	.word	0x40013800
 800ad60:	0003d090 	.word	0x0003d090

0800ad64 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800ad68:	4b14      	ldr	r3, [pc, #80]	; (800adbc <MX_USART2_UART_Init+0x58>)
 800ad6a:	4a15      	ldr	r2, [pc, #84]	; (800adc0 <MX_USART2_UART_Init+0x5c>)
 800ad6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 800ad6e:	4b13      	ldr	r3, [pc, #76]	; (800adbc <MX_USART2_UART_Init+0x58>)
 800ad70:	4a14      	ldr	r2, [pc, #80]	; (800adc4 <MX_USART2_UART_Init+0x60>)
 800ad72:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800ad74:	4b11      	ldr	r3, [pc, #68]	; (800adbc <MX_USART2_UART_Init+0x58>)
 800ad76:	2200      	movs	r2, #0
 800ad78:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800ad7a:	4b10      	ldr	r3, [pc, #64]	; (800adbc <MX_USART2_UART_Init+0x58>)
 800ad7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ad80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800ad82:	4b0e      	ldr	r3, [pc, #56]	; (800adbc <MX_USART2_UART_Init+0x58>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ad88:	4b0c      	ldr	r3, [pc, #48]	; (800adbc <MX_USART2_UART_Init+0x58>)
 800ad8a:	220c      	movs	r2, #12
 800ad8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ad8e:	4b0b      	ldr	r3, [pc, #44]	; (800adbc <MX_USART2_UART_Init+0x58>)
 800ad90:	2200      	movs	r2, #0
 800ad92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ad94:	4b09      	ldr	r3, [pc, #36]	; (800adbc <MX_USART2_UART_Init+0x58>)
 800ad96:	2200      	movs	r2, #0
 800ad98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ad9a:	4b08      	ldr	r3, [pc, #32]	; (800adbc <MX_USART2_UART_Init+0x58>)
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ada0:	4b06      	ldr	r3, [pc, #24]	; (800adbc <MX_USART2_UART_Init+0x58>)
 800ada2:	2200      	movs	r2, #0
 800ada4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800ada6:	4805      	ldr	r0, [pc, #20]	; (800adbc <MX_USART2_UART_Init+0x58>)
 800ada8:	f7fa fe1c 	bl	80059e4 <HAL_UART_Init>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d001      	beq.n	800adb6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800adb2:	f7ff fa7f 	bl	800a2b4 <Error_Handler>
  }

}
 800adb6:	bf00      	nop
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	20001f00 	.word	0x20001f00
 800adc0:	40004400 	.word	0x40004400
 800adc4:	0003d090 	.word	0x0003d090

0800adc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b08e      	sub	sp, #56	; 0x38
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800add0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800add4:	2200      	movs	r2, #0
 800add6:	601a      	str	r2, [r3, #0]
 800add8:	605a      	str	r2, [r3, #4]
 800adda:	609a      	str	r2, [r3, #8]
 800addc:	60da      	str	r2, [r3, #12]
 800adde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a52      	ldr	r2, [pc, #328]	; (800af30 <HAL_UART_MspInit+0x168>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d131      	bne.n	800ae4e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800adea:	4a52      	ldr	r2, [pc, #328]	; (800af34 <HAL_UART_MspInit+0x16c>)
 800adec:	4b51      	ldr	r3, [pc, #324]	; (800af34 <HAL_UART_MspInit+0x16c>)
 800adee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800adf4:	6593      	str	r3, [r2, #88]	; 0x58
 800adf6:	4b4f      	ldr	r3, [pc, #316]	; (800af34 <HAL_UART_MspInit+0x16c>)
 800adf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800adfe:	623b      	str	r3, [r7, #32]
 800ae00:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ae02:	4a4c      	ldr	r2, [pc, #304]	; (800af34 <HAL_UART_MspInit+0x16c>)
 800ae04:	4b4b      	ldr	r3, [pc, #300]	; (800af34 <HAL_UART_MspInit+0x16c>)
 800ae06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae08:	f043 0304 	orr.w	r3, r3, #4
 800ae0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae0e:	4b49      	ldr	r3, [pc, #292]	; (800af34 <HAL_UART_MspInit+0x16c>)
 800ae10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae12:	f003 0304 	and.w	r3, r3, #4
 800ae16:	61fb      	str	r3, [r7, #28]
 800ae18:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800ae1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ae1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae20:	2302      	movs	r3, #2
 800ae22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae24:	2300      	movs	r3, #0
 800ae26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae28:	2303      	movs	r3, #3
 800ae2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800ae2c:	2308      	movs	r3, #8
 800ae2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ae30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae34:	4619      	mov	r1, r3
 800ae36:	4840      	ldr	r0, [pc, #256]	; (800af38 <HAL_UART_MspInit+0x170>)
 800ae38:	f7f6 fef6 	bl	8001c28 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	2100      	movs	r1, #0
 800ae40:	2034      	movs	r0, #52	; 0x34
 800ae42:	f7f6 feba 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800ae46:	2034      	movs	r0, #52	; 0x34
 800ae48:	f7f6 fed3 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800ae4c:	e06b      	b.n	800af26 <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART1)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a3a      	ldr	r2, [pc, #232]	; (800af3c <HAL_UART_MspInit+0x174>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d130      	bne.n	800aeba <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 800ae58:	4a36      	ldr	r2, [pc, #216]	; (800af34 <HAL_UART_MspInit+0x16c>)
 800ae5a:	4b36      	ldr	r3, [pc, #216]	; (800af34 <HAL_UART_MspInit+0x16c>)
 800ae5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae62:	6613      	str	r3, [r2, #96]	; 0x60
 800ae64:	4b33      	ldr	r3, [pc, #204]	; (800af34 <HAL_UART_MspInit+0x16c>)
 800ae66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae6c:	61bb      	str	r3, [r7, #24]
 800ae6e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae70:	4a30      	ldr	r2, [pc, #192]	; (800af34 <HAL_UART_MspInit+0x16c>)
 800ae72:	4b30      	ldr	r3, [pc, #192]	; (800af34 <HAL_UART_MspInit+0x16c>)
 800ae74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae76:	f043 0302 	orr.w	r3, r3, #2
 800ae7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae7c:	4b2d      	ldr	r3, [pc, #180]	; (800af34 <HAL_UART_MspInit+0x16c>)
 800ae7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae80:	f003 0302 	and.w	r3, r3, #2
 800ae84:	617b      	str	r3, [r7, #20]
 800ae86:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ae88:	23c0      	movs	r3, #192	; 0xc0
 800ae8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae8c:	2302      	movs	r3, #2
 800ae8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae90:	2300      	movs	r3, #0
 800ae92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae94:	2303      	movs	r3, #3
 800ae96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ae98:	2307      	movs	r3, #7
 800ae9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aea0:	4619      	mov	r1, r3
 800aea2:	4827      	ldr	r0, [pc, #156]	; (800af40 <HAL_UART_MspInit+0x178>)
 800aea4:	f7f6 fec0 	bl	8001c28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800aea8:	2200      	movs	r2, #0
 800aeaa:	2101      	movs	r1, #1
 800aeac:	2025      	movs	r0, #37	; 0x25
 800aeae:	f7f6 fe84 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800aeb2:	2025      	movs	r0, #37	; 0x25
 800aeb4:	f7f6 fe9d 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
}
 800aeb8:	e035      	b.n	800af26 <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART2)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4a21      	ldr	r2, [pc, #132]	; (800af44 <HAL_UART_MspInit+0x17c>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d130      	bne.n	800af26 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800aec4:	4a1b      	ldr	r2, [pc, #108]	; (800af34 <HAL_UART_MspInit+0x16c>)
 800aec6:	4b1b      	ldr	r3, [pc, #108]	; (800af34 <HAL_UART_MspInit+0x16c>)
 800aec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aece:	6593      	str	r3, [r2, #88]	; 0x58
 800aed0:	4b18      	ldr	r3, [pc, #96]	; (800af34 <HAL_UART_MspInit+0x16c>)
 800aed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aed8:	613b      	str	r3, [r7, #16]
 800aeda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aedc:	4a15      	ldr	r2, [pc, #84]	; (800af34 <HAL_UART_MspInit+0x16c>)
 800aede:	4b15      	ldr	r3, [pc, #84]	; (800af34 <HAL_UART_MspInit+0x16c>)
 800aee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aee2:	f043 0301 	orr.w	r3, r3, #1
 800aee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aee8:	4b12      	ldr	r3, [pc, #72]	; (800af34 <HAL_UART_MspInit+0x16c>)
 800aeea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeec:	f003 0301 	and.w	r3, r3, #1
 800aef0:	60fb      	str	r3, [r7, #12]
 800aef2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800aef4:	230c      	movs	r3, #12
 800aef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aef8:	2302      	movs	r3, #2
 800aefa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aefc:	2300      	movs	r3, #0
 800aefe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af00:	2303      	movs	r3, #3
 800af02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800af04:	2307      	movs	r3, #7
 800af06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af0c:	4619      	mov	r1, r3
 800af0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af12:	f7f6 fe89 	bl	8001c28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800af16:	2200      	movs	r2, #0
 800af18:	2100      	movs	r1, #0
 800af1a:	2026      	movs	r0, #38	; 0x26
 800af1c:	f7f6 fe4d 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800af20:	2026      	movs	r0, #38	; 0x26
 800af22:	f7f6 fe66 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
}
 800af26:	bf00      	nop
 800af28:	3738      	adds	r7, #56	; 0x38
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	40004c00 	.word	0x40004c00
 800af34:	40021000 	.word	0x40021000
 800af38:	48000800 	.word	0x48000800
 800af3c:	40013800 	.word	0x40013800
 800af40:	48000400 	.word	0x48000400
 800af44:	40004400 	.word	0x40004400

0800af48 <uart_enableReceiveInt>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void uart_enableReceiveInt(USART_TypeDef *uartHandler){
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
	uartHandler->CR1 |= USART_CR1_RXNEIE;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f043 0220 	orr.w	r2, r3, #32
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	601a      	str	r2, [r3, #0]
}
 800af5c:	bf00      	nop
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800af6c:	2200      	movs	r2, #0
 800af6e:	490b      	ldr	r1, [pc, #44]	; (800af9c <MX_USB_DEVICE_Init+0x34>)
 800af70:	480b      	ldr	r0, [pc, #44]	; (800afa0 <MX_USB_DEVICE_Init+0x38>)
 800af72:	f7fd fea6 	bl	8008cc2 <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 800af76:	490b      	ldr	r1, [pc, #44]	; (800afa4 <MX_USB_DEVICE_Init+0x3c>)
 800af78:	4809      	ldr	r0, [pc, #36]	; (800afa0 <MX_USB_DEVICE_Init+0x38>)
 800af7a:	f7fd fecd 	bl	8008d18 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800af7e:	490a      	ldr	r1, [pc, #40]	; (800afa8 <MX_USB_DEVICE_Init+0x40>)
 800af80:	4807      	ldr	r0, [pc, #28]	; (800afa0 <MX_USB_DEVICE_Init+0x38>)
 800af82:	f7fd fe2f 	bl	8008be4 <USBD_CDC_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 800af86:	4806      	ldr	r0, [pc, #24]	; (800afa0 <MX_USB_DEVICE_Init+0x38>)
 800af88:	f000 fc2c 	bl	800b7e4 <USBD_LL_BatteryCharging>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d002      	beq.n	800af98 <MX_USB_DEVICE_Init+0x30>
  USBD_Start(&hUsbDeviceFS);
 800af92:	4803      	ldr	r0, [pc, #12]	; (800afa0 <MX_USB_DEVICE_Init+0x38>)
 800af94:	f7fd feda 	bl	8008d4c <USBD_Start>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800af98:	bf00      	nop
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	20000904 	.word	0x20000904
 800afa0:	20001f78 	.word	0x20001f78
 800afa4:	200007ec 	.word	0x200007ec
 800afa8:	200008f4 	.word	0x200008f4

0800afac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800afb0:	2200      	movs	r2, #0
 800afb2:	4905      	ldr	r1, [pc, #20]	; (800afc8 <CDC_Init_FS+0x1c>)
 800afb4:	4805      	ldr	r0, [pc, #20]	; (800afcc <CDC_Init_FS+0x20>)
 800afb6:	f7fd fe2c 	bl	8008c12 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800afba:	4905      	ldr	r1, [pc, #20]	; (800afd0 <CDC_Init_FS+0x24>)
 800afbc:	4803      	ldr	r0, [pc, #12]	; (800afcc <CDC_Init_FS+0x20>)
 800afbe:	f7fd fe42 	bl	8008c46 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800afc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	20002a14 	.word	0x20002a14
 800afcc:	20001f78 	.word	0x20001f78
 800afd0:	20002214 	.word	0x20002214

0800afd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800afd4:	b480      	push	{r7}
 800afd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800afd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800afda:	4618      	mov	r0, r3
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	4603      	mov	r3, r0
 800afec:	6039      	str	r1, [r7, #0]
 800afee:	71fb      	strb	r3, [r7, #7]
 800aff0:	4613      	mov	r3, r2
 800aff2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aff4:	79fb      	ldrb	r3, [r7, #7]
 800aff6:	2b23      	cmp	r3, #35	; 0x23
 800aff8:	d84a      	bhi.n	800b090 <CDC_Control_FS+0xac>
 800affa:	a201      	add	r2, pc, #4	; (adr r2, 800b000 <CDC_Control_FS+0x1c>)
 800affc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b000:	0800b091 	.word	0x0800b091
 800b004:	0800b091 	.word	0x0800b091
 800b008:	0800b091 	.word	0x0800b091
 800b00c:	0800b091 	.word	0x0800b091
 800b010:	0800b091 	.word	0x0800b091
 800b014:	0800b091 	.word	0x0800b091
 800b018:	0800b091 	.word	0x0800b091
 800b01c:	0800b091 	.word	0x0800b091
 800b020:	0800b091 	.word	0x0800b091
 800b024:	0800b091 	.word	0x0800b091
 800b028:	0800b091 	.word	0x0800b091
 800b02c:	0800b091 	.word	0x0800b091
 800b030:	0800b091 	.word	0x0800b091
 800b034:	0800b091 	.word	0x0800b091
 800b038:	0800b091 	.word	0x0800b091
 800b03c:	0800b091 	.word	0x0800b091
 800b040:	0800b091 	.word	0x0800b091
 800b044:	0800b091 	.word	0x0800b091
 800b048:	0800b091 	.word	0x0800b091
 800b04c:	0800b091 	.word	0x0800b091
 800b050:	0800b091 	.word	0x0800b091
 800b054:	0800b091 	.word	0x0800b091
 800b058:	0800b091 	.word	0x0800b091
 800b05c:	0800b091 	.word	0x0800b091
 800b060:	0800b091 	.word	0x0800b091
 800b064:	0800b091 	.word	0x0800b091
 800b068:	0800b091 	.word	0x0800b091
 800b06c:	0800b091 	.word	0x0800b091
 800b070:	0800b091 	.word	0x0800b091
 800b074:	0800b091 	.word	0x0800b091
 800b078:	0800b091 	.word	0x0800b091
 800b07c:	0800b091 	.word	0x0800b091
 800b080:	0800b091 	.word	0x0800b091
 800b084:	0800b091 	.word	0x0800b091
 800b088:	0800b091 	.word	0x0800b091
 800b08c:	0800b091 	.word	0x0800b091
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b090:	bf00      	nop
  }

  return (USBD_OK);
 800b092:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b094:	4618      	mov	r0, r3
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b0aa:	6879      	ldr	r1, [r7, #4]
 800b0ac:	4805      	ldr	r0, [pc, #20]	; (800b0c4 <CDC_Receive_FS+0x24>)
 800b0ae:	f7fd fdca 	bl	8008c46 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b0b2:	4804      	ldr	r0, [pc, #16]	; (800b0c4 <CDC_Receive_FS+0x24>)
 800b0b4:	f7fd fddb 	bl	8008c6e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b0b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3708      	adds	r7, #8
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	20001f78 	.word	0x20001f78

0800b0c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b088      	sub	sp, #32
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a16      	ldr	r2, [pc, #88]	; (800b130 <HAL_PCD_MspInit+0x68>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d125      	bne.n	800b126 <HAL_PCD_MspInit+0x5e>
  
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b0da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b0de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0e0:	2302      	movs	r3, #2
 800b0e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0e8:	2303      	movs	r3, #3
 800b0ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800b0ec:	230a      	movs	r3, #10
 800b0ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0f0:	f107 030c 	add.w	r3, r7, #12
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b0fa:	f7f6 fd95 	bl	8001c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b0fe:	4a0d      	ldr	r2, [pc, #52]	; (800b134 <HAL_PCD_MspInit+0x6c>)
 800b100:	4b0c      	ldr	r3, [pc, #48]	; (800b134 <HAL_PCD_MspInit+0x6c>)
 800b102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b104:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b108:	6593      	str	r3, [r2, #88]	; 0x58
 800b10a:	4b0a      	ldr	r3, [pc, #40]	; (800b134 <HAL_PCD_MspInit+0x6c>)
 800b10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b10e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b112:	60bb      	str	r3, [r7, #8]
 800b114:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b116:	2200      	movs	r2, #0
 800b118:	2100      	movs	r1, #0
 800b11a:	2043      	movs	r0, #67	; 0x43
 800b11c:	f7f6 fd4d 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b120:	2043      	movs	r0, #67	; 0x43
 800b122:	f7f6 fd66 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b126:	bf00      	nop
 800b128:	3720      	adds	r7, #32
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	40006800 	.word	0x40006800
 800b134:	40021000 	.word	0x40021000

0800b138 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800b14c:	4619      	mov	r1, r3
 800b14e:	4610      	mov	r0, r2
 800b150:	f7fd fe45 	bl	8008dde <USBD_LL_SetupStage>
}
 800b154:	bf00      	nop
 800b156:	3708      	adds	r7, #8
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	460b      	mov	r3, r1
 800b166:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 0470 	ldr.w	r0, [r3, #1136]	; 0x470
 800b16e:	78fb      	ldrb	r3, [r7, #3]
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	015b      	lsls	r3, r3, #5
 800b174:	4413      	add	r3, r2
 800b176:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	78fb      	ldrb	r3, [r7, #3]
 800b17e:	4619      	mov	r1, r3
 800b180:	f7fd fe78 	bl	8008e74 <USBD_LL_DataOutStage>
}
 800b184:	bf00      	nop
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	460b      	mov	r3, r1
 800b196:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 0470 	ldr.w	r0, [r3, #1136]	; 0x470
 800b19e:	78fb      	ldrb	r3, [r7, #3]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	015b      	lsls	r3, r3, #5
 800b1a4:	4413      	add	r3, r2
 800b1a6:	333c      	adds	r3, #60	; 0x3c
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	78fb      	ldrb	r3, [r7, #3]
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	f7fd fece 	bl	8008f4e <USBD_LL_DataInStage>
}
 800b1b2:	bf00      	nop
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b082      	sub	sp, #8
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7fd ffdc 	bl	8009186 <USBD_LL_SOF>
}
 800b1ce:	bf00      	nop
 800b1d0:	3708      	adds	r7, #8
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b084      	sub	sp, #16
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	d102      	bne.n	800b1f0 <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	73fb      	strb	r3, [r7, #15]
    break;
 800b1ee:	e002      	b.n	800b1f6 <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	73fb      	strb	r3, [r7, #15]
    break;    
 800b1f4:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b1fc:	7bfa      	ldrb	r2, [r7, #15]
 800b1fe:	4611      	mov	r1, r2
 800b200:	4618      	mov	r0, r3
 800b202:	f7fd ff8a 	bl	800911a <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7fd ff43 	bl	8009098 <USBD_LL_Reset>
}
 800b212:	bf00      	nop
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
	...

0800b21c <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fd ff85 	bl	800913a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	699b      	ldr	r3, [r3, #24]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d005      	beq.n	800b244 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b238:	4a04      	ldr	r2, [pc, #16]	; (800b24c <HAL_PCD_SuspendCallback+0x30>)
 800b23a:	4b04      	ldr	r3, [pc, #16]	; (800b24c <HAL_PCD_SuspendCallback+0x30>)
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	f043 0306 	orr.w	r3, r3, #6
 800b242:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b244:	bf00      	nop
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	e000ed00 	.word	0xe000ed00

0800b250 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	699b      	ldr	r3, [r3, #24]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d007      	beq.n	800b270 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b260:	4a08      	ldr	r2, [pc, #32]	; (800b284 <HAL_PCD_ResumeCallback+0x34>)
 800b262:	4b08      	ldr	r3, [pc, #32]	; (800b284 <HAL_PCD_ResumeCallback+0x34>)
 800b264:	691b      	ldr	r3, [r3, #16]
 800b266:	f023 0306 	bic.w	r3, r3, #6
 800b26a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b26c:	f000 fab4 	bl	800b7d8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b276:	4618      	mov	r0, r3
 800b278:	f7fd ff74 	bl	8009164 <USBD_LL_Resume>
}
 800b27c:	bf00      	nop
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	e000ed00 	.word	0xe000ed00

0800b288 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800b290:	f7f8 f8ba 	bl	8003408 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b294:	4a2c      	ldr	r2, [pc, #176]	; (800b348 <USBD_LL_Init+0xc0>)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
  pdev->pData = &hpcd_USB_FS;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	4a2a      	ldr	r2, [pc, #168]	; (800b348 <USBD_LL_Init+0xc0>)
 800b2a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800b2a4:	4b28      	ldr	r3, [pc, #160]	; (800b348 <USBD_LL_Init+0xc0>)
 800b2a6:	4a29      	ldr	r2, [pc, #164]	; (800b34c <USBD_LL_Init+0xc4>)
 800b2a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b2aa:	4b27      	ldr	r3, [pc, #156]	; (800b348 <USBD_LL_Init+0xc0>)
 800b2ac:	2208      	movs	r2, #8
 800b2ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b2b0:	4b25      	ldr	r3, [pc, #148]	; (800b348 <USBD_LL_Init+0xc0>)
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800b2b6:	4b24      	ldr	r3, [pc, #144]	; (800b348 <USBD_LL_Init+0xc0>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b2bc:	4b22      	ldr	r3, [pc, #136]	; (800b348 <USBD_LL_Init+0xc0>)
 800b2be:	2202      	movs	r2, #2
 800b2c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b2c2:	4b21      	ldr	r3, [pc, #132]	; (800b348 <USBD_LL_Init+0xc0>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b2c8:	4b1f      	ldr	r3, [pc, #124]	; (800b348 <USBD_LL_Init+0xc0>)
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b2ce:	4b1e      	ldr	r3, [pc, #120]	; (800b348 <USBD_LL_Init+0xc0>)
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b2d4:	4b1c      	ldr	r3, [pc, #112]	; (800b348 <USBD_LL_Init+0xc0>)
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b2da:	481b      	ldr	r0, [pc, #108]	; (800b348 <USBD_LL_Init+0xc0>)
 800b2dc:	f7f7 f8df 	bl	800249e <HAL_PCD_Init>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d001      	beq.n	800b2ea <USBD_LL_Init+0x62>
  {
    Error_Handler( );
 800b2e6:	f7fe ffe5 	bl	800a2b4 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b2f0:	2318      	movs	r3, #24
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	f7f7 ff95 	bl	8003224 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b300:	2358      	movs	r3, #88	; 0x58
 800b302:	2200      	movs	r2, #0
 800b304:	2180      	movs	r1, #128	; 0x80
 800b306:	f7f7 ff8d 	bl	8003224 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b310:	23c0      	movs	r3, #192	; 0xc0
 800b312:	2200      	movs	r2, #0
 800b314:	2181      	movs	r1, #129	; 0x81
 800b316:	f7f7 ff85 	bl	8003224 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b320:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b324:	2200      	movs	r2, #0
 800b326:	2101      	movs	r1, #1
 800b328:	f7f7 ff7c 	bl	8003224 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b332:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b336:	2200      	movs	r2, #0
 800b338:	2182      	movs	r1, #130	; 0x82
 800b33a:	f7f7 ff73 	bl	8003224 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	20003214 	.word	0x20003214
 800b34c:	40006800 	.word	0x40006800

0800b350 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b358:	2300      	movs	r3, #0
 800b35a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b35c:	2300      	movs	r3, #0
 800b35e:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b366:	4618      	mov	r0, r3
 800b368:	f7f7 f972 	bl	8002650 <HAL_PCD_Start>
 800b36c:	4603      	mov	r3, r0
 800b36e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800b370:	7bbb      	ldrb	r3, [r7, #14]
 800b372:	2b03      	cmp	r3, #3
 800b374:	d816      	bhi.n	800b3a4 <USBD_LL_Start+0x54>
 800b376:	a201      	add	r2, pc, #4	; (adr r2, 800b37c <USBD_LL_Start+0x2c>)
 800b378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37c:	0800b38d 	.word	0x0800b38d
 800b380:	0800b393 	.word	0x0800b393
 800b384:	0800b399 	.word	0x0800b399
 800b388:	0800b39f 	.word	0x0800b39f
    case HAL_OK :
      usb_status = USBD_OK;
 800b38c:	2300      	movs	r3, #0
 800b38e:	73fb      	strb	r3, [r7, #15]
    break;
 800b390:	e00b      	b.n	800b3aa <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b392:	2302      	movs	r3, #2
 800b394:	73fb      	strb	r3, [r7, #15]
    break;
 800b396:	e008      	b.n	800b3aa <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b398:	2301      	movs	r3, #1
 800b39a:	73fb      	strb	r3, [r7, #15]
    break;
 800b39c:	e005      	b.n	800b3aa <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b39e:	2302      	movs	r3, #2
 800b3a0:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a2:	e002      	b.n	800b3aa <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b3a4:	2302      	movs	r3, #2
 800b3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a8:	bf00      	nop
  }
  return usb_status;
 800b3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	4608      	mov	r0, r1
 800b3be:	4611      	mov	r1, r2
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	70fb      	strb	r3, [r7, #3]
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	70bb      	strb	r3, [r7, #2]
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b3dc:	78bb      	ldrb	r3, [r7, #2]
 800b3de:	883a      	ldrh	r2, [r7, #0]
 800b3e0:	78f9      	ldrb	r1, [r7, #3]
 800b3e2:	f7f7 fad5 	bl	8002990 <HAL_PCD_EP_Open>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b3ea:	7bbb      	ldrb	r3, [r7, #14]
 800b3ec:	2b03      	cmp	r3, #3
 800b3ee:	d817      	bhi.n	800b420 <USBD_LL_OpenEP+0x6c>
 800b3f0:	a201      	add	r2, pc, #4	; (adr r2, 800b3f8 <USBD_LL_OpenEP+0x44>)
 800b3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f6:	bf00      	nop
 800b3f8:	0800b409 	.word	0x0800b409
 800b3fc:	0800b40f 	.word	0x0800b40f
 800b400:	0800b415 	.word	0x0800b415
 800b404:	0800b41b 	.word	0x0800b41b
    case HAL_OK :
      usb_status = USBD_OK;
 800b408:	2300      	movs	r3, #0
 800b40a:	73fb      	strb	r3, [r7, #15]
    break;
 800b40c:	e00b      	b.n	800b426 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b40e:	2302      	movs	r3, #2
 800b410:	73fb      	strb	r3, [r7, #15]
    break;
 800b412:	e008      	b.n	800b426 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b414:	2301      	movs	r3, #1
 800b416:	73fb      	strb	r3, [r7, #15]
    break;
 800b418:	e005      	b.n	800b426 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b41a:	2302      	movs	r3, #2
 800b41c:	73fb      	strb	r3, [r7, #15]
    break;
 800b41e:	e002      	b.n	800b426 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b420:	2302      	movs	r3, #2
 800b422:	73fb      	strb	r3, [r7, #15]
    break;
 800b424:	bf00      	nop
  }
  return usb_status;
 800b426:	7bfb      	ldrb	r3, [r7, #15]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	460b      	mov	r3, r1
 800b43a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b43c:	2300      	movs	r3, #0
 800b43e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b440:	2300      	movs	r3, #0
 800b442:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b44a:	78fa      	ldrb	r2, [r7, #3]
 800b44c:	4611      	mov	r1, r2
 800b44e:	4618      	mov	r0, r3
 800b450:	f7f7 fafe 	bl	8002a50 <HAL_PCD_EP_Close>
 800b454:	4603      	mov	r3, r0
 800b456:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800b458:	7bbb      	ldrb	r3, [r7, #14]
 800b45a:	2b03      	cmp	r3, #3
 800b45c:	d816      	bhi.n	800b48c <USBD_LL_CloseEP+0x5c>
 800b45e:	a201      	add	r2, pc, #4	; (adr r2, 800b464 <USBD_LL_CloseEP+0x34>)
 800b460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b464:	0800b475 	.word	0x0800b475
 800b468:	0800b47b 	.word	0x0800b47b
 800b46c:	0800b481 	.word	0x0800b481
 800b470:	0800b487 	.word	0x0800b487
    case HAL_OK :
      usb_status = USBD_OK;
 800b474:	2300      	movs	r3, #0
 800b476:	73fb      	strb	r3, [r7, #15]
    break;
 800b478:	e00b      	b.n	800b492 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b47a:	2302      	movs	r3, #2
 800b47c:	73fb      	strb	r3, [r7, #15]
    break;
 800b47e:	e008      	b.n	800b492 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b480:	2301      	movs	r3, #1
 800b482:	73fb      	strb	r3, [r7, #15]
    break;
 800b484:	e005      	b.n	800b492 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b486:	2302      	movs	r3, #2
 800b488:	73fb      	strb	r3, [r7, #15]
    break;
 800b48a:	e002      	b.n	800b492 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b48c:	2302      	movs	r3, #2
 800b48e:	73fb      	strb	r3, [r7, #15]
    break;
 800b490:	bf00      	nop
  }
  return usb_status;  
 800b492:	7bfb      	ldrb	r3, [r7, #15]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3710      	adds	r7, #16
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b4b6:	78fa      	ldrb	r2, [r7, #3]
 800b4b8:	4611      	mov	r1, r2
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7f7 fb93 	bl	8002be6 <HAL_PCD_EP_SetStall>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b4c4:	7bbb      	ldrb	r3, [r7, #14]
 800b4c6:	2b03      	cmp	r3, #3
 800b4c8:	d816      	bhi.n	800b4f8 <USBD_LL_StallEP+0x5c>
 800b4ca:	a201      	add	r2, pc, #4	; (adr r2, 800b4d0 <USBD_LL_StallEP+0x34>)
 800b4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d0:	0800b4e1 	.word	0x0800b4e1
 800b4d4:	0800b4e7 	.word	0x0800b4e7
 800b4d8:	0800b4ed 	.word	0x0800b4ed
 800b4dc:	0800b4f3 	.word	0x0800b4f3
    case HAL_OK :
      usb_status = USBD_OK;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b4e4:	e00b      	b.n	800b4fe <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b4e6:	2302      	movs	r3, #2
 800b4e8:	73fb      	strb	r3, [r7, #15]
    break;
 800b4ea:	e008      	b.n	800b4fe <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b4f0:	e005      	b.n	800b4fe <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b4f2:	2302      	movs	r3, #2
 800b4f4:	73fb      	strb	r3, [r7, #15]
    break;
 800b4f6:	e002      	b.n	800b4fe <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b4f8:	2302      	movs	r3, #2
 800b4fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b4fc:	bf00      	nop
  }
  return usb_status;  
 800b4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3710      	adds	r7, #16
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	460b      	mov	r3, r1
 800b512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b514:	2300      	movs	r3, #0
 800b516:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b518:	2300      	movs	r3, #0
 800b51a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b522:	78fa      	ldrb	r2, [r7, #3]
 800b524:	4611      	mov	r1, r2
 800b526:	4618      	mov	r0, r3
 800b528:	f7f7 fbb7 	bl	8002c9a <HAL_PCD_EP_ClrStall>
 800b52c:	4603      	mov	r3, r0
 800b52e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800b530:	7bbb      	ldrb	r3, [r7, #14]
 800b532:	2b03      	cmp	r3, #3
 800b534:	d816      	bhi.n	800b564 <USBD_LL_ClearStallEP+0x5c>
 800b536:	a201      	add	r2, pc, #4	; (adr r2, 800b53c <USBD_LL_ClearStallEP+0x34>)
 800b538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b53c:	0800b54d 	.word	0x0800b54d
 800b540:	0800b553 	.word	0x0800b553
 800b544:	0800b559 	.word	0x0800b559
 800b548:	0800b55f 	.word	0x0800b55f
    case HAL_OK :
      usb_status = USBD_OK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	73fb      	strb	r3, [r7, #15]
    break;
 800b550:	e00b      	b.n	800b56a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b552:	2302      	movs	r3, #2
 800b554:	73fb      	strb	r3, [r7, #15]
    break;
 800b556:	e008      	b.n	800b56a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b558:	2301      	movs	r3, #1
 800b55a:	73fb      	strb	r3, [r7, #15]
    break;
 800b55c:	e005      	b.n	800b56a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b55e:	2302      	movs	r3, #2
 800b560:	73fb      	strb	r3, [r7, #15]
    break;
 800b562:	e002      	b.n	800b56a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b564:	2302      	movs	r3, #2
 800b566:	73fb      	strb	r3, [r7, #15]
    break;
 800b568:	bf00      	nop
  }
  return usb_status; 
 800b56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	460b      	mov	r3, r1
 800b57e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b586:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800b588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	da08      	bge.n	800b5a2 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800b590:	78fb      	ldrb	r3, [r7, #3]
 800b592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b596:	68fa      	ldr	r2, [r7, #12]
 800b598:	015b      	lsls	r3, r3, #5
 800b59a:	4413      	add	r3, r2
 800b59c:	332a      	adds	r3, #42	; 0x2a
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	e008      	b.n	800b5b4 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800b5a2:	78fb      	ldrb	r3, [r7, #3]
 800b5a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	015b      	lsls	r3, r3, #5
 800b5ac:	4413      	add	r3, r2
 800b5ae:	f203 232a 	addw	r3, r3, #554	; 0x22a
 800b5b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3714      	adds	r7, #20
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b5da:	78fa      	ldrb	r2, [r7, #3]
 800b5dc:	4611      	mov	r1, r2
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7f7 f9b1 	bl	8002946 <HAL_PCD_SetAddress>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800b5e8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ea:	2b03      	cmp	r3, #3
 800b5ec:	d816      	bhi.n	800b61c <USBD_LL_SetUSBAddress+0x5c>
 800b5ee:	a201      	add	r2, pc, #4	; (adr r2, 800b5f4 <USBD_LL_SetUSBAddress+0x34>)
 800b5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f4:	0800b605 	.word	0x0800b605
 800b5f8:	0800b60b 	.word	0x0800b60b
 800b5fc:	0800b611 	.word	0x0800b611
 800b600:	0800b617 	.word	0x0800b617
    case HAL_OK :
      usb_status = USBD_OK;
 800b604:	2300      	movs	r3, #0
 800b606:	73fb      	strb	r3, [r7, #15]
    break;
 800b608:	e00b      	b.n	800b622 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b60a:	2302      	movs	r3, #2
 800b60c:	73fb      	strb	r3, [r7, #15]
    break;
 800b60e:	e008      	b.n	800b622 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b610:	2301      	movs	r3, #1
 800b612:	73fb      	strb	r3, [r7, #15]
    break;
 800b614:	e005      	b.n	800b622 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b616:	2302      	movs	r3, #2
 800b618:	73fb      	strb	r3, [r7, #15]
    break;
 800b61a:	e002      	b.n	800b622 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b61c:	2302      	movs	r3, #2
 800b61e:	73fb      	strb	r3, [r7, #15]
    break;
 800b620:	bf00      	nop
  }
  return usb_status;  
 800b622:	7bfb      	ldrb	r3, [r7, #15]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3710      	adds	r7, #16
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	607a      	str	r2, [r7, #4]
 800b636:	461a      	mov	r2, r3
 800b638:	460b      	mov	r3, r1
 800b63a:	72fb      	strb	r3, [r7, #11]
 800b63c:	4613      	mov	r3, r2
 800b63e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b640:	2300      	movs	r3, #0
 800b642:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b644:	2300      	movs	r3, #0
 800b646:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b64e:	893b      	ldrh	r3, [r7, #8]
 800b650:	7af9      	ldrb	r1, [r7, #11]
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	f7f7 fa8e 	bl	8002b74 <HAL_PCD_EP_Transmit>
 800b658:	4603      	mov	r3, r0
 800b65a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800b65c:	7dbb      	ldrb	r3, [r7, #22]
 800b65e:	2b03      	cmp	r3, #3
 800b660:	d816      	bhi.n	800b690 <USBD_LL_Transmit+0x64>
 800b662:	a201      	add	r2, pc, #4	; (adr r2, 800b668 <USBD_LL_Transmit+0x3c>)
 800b664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b668:	0800b679 	.word	0x0800b679
 800b66c:	0800b67f 	.word	0x0800b67f
 800b670:	0800b685 	.word	0x0800b685
 800b674:	0800b68b 	.word	0x0800b68b
    case HAL_OK :
      usb_status = USBD_OK;
 800b678:	2300      	movs	r3, #0
 800b67a:	75fb      	strb	r3, [r7, #23]
    break;
 800b67c:	e00b      	b.n	800b696 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b67e:	2302      	movs	r3, #2
 800b680:	75fb      	strb	r3, [r7, #23]
    break;
 800b682:	e008      	b.n	800b696 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b684:	2301      	movs	r3, #1
 800b686:	75fb      	strb	r3, [r7, #23]
    break;
 800b688:	e005      	b.n	800b696 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b68a:	2302      	movs	r3, #2
 800b68c:	75fb      	strb	r3, [r7, #23]
    break;
 800b68e:	e002      	b.n	800b696 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800b690:	2302      	movs	r3, #2
 800b692:	75fb      	strb	r3, [r7, #23]
    break;
 800b694:	bf00      	nop
  }
  return usb_status;    
 800b696:	7dfb      	ldrb	r3, [r7, #23]
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3718      	adds	r7, #24
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b086      	sub	sp, #24
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	607a      	str	r2, [r7, #4]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	72fb      	strb	r3, [r7, #11]
 800b6b0:	4613      	mov	r3, r2
 800b6b2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b6c2:	893b      	ldrh	r3, [r7, #8]
 800b6c4:	7af9      	ldrb	r1, [r7, #11]
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	f7f7 fa04 	bl	8002ad4 <HAL_PCD_EP_Receive>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800b6d0:	7dbb      	ldrb	r3, [r7, #22]
 800b6d2:	2b03      	cmp	r3, #3
 800b6d4:	d816      	bhi.n	800b704 <USBD_LL_PrepareReceive+0x64>
 800b6d6:	a201      	add	r2, pc, #4	; (adr r2, 800b6dc <USBD_LL_PrepareReceive+0x3c>)
 800b6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6dc:	0800b6ed 	.word	0x0800b6ed
 800b6e0:	0800b6f3 	.word	0x0800b6f3
 800b6e4:	0800b6f9 	.word	0x0800b6f9
 800b6e8:	0800b6ff 	.word	0x0800b6ff
    case HAL_OK :
      usb_status = USBD_OK;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	75fb      	strb	r3, [r7, #23]
    break;
 800b6f0:	e00b      	b.n	800b70a <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b6f2:	2302      	movs	r3, #2
 800b6f4:	75fb      	strb	r3, [r7, #23]
    break;
 800b6f6:	e008      	b.n	800b70a <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	75fb      	strb	r3, [r7, #23]
    break;
 800b6fc:	e005      	b.n	800b70a <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b6fe:	2302      	movs	r3, #2
 800b700:	75fb      	strb	r3, [r7, #23]
    break;
 800b702:	e002      	b.n	800b70a <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800b704:	2302      	movs	r3, #2
 800b706:	75fb      	strb	r3, [r7, #23]
    break;
 800b708:	bf00      	nop
  }
  return usb_status; 
 800b70a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3718      	adds	r7, #24
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	460b      	mov	r3, r1
 800b71e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b726:	78fa      	ldrb	r2, [r7, #3]
 800b728:	4611      	mov	r1, r2
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7f7 fa0c 	bl	8002b48 <HAL_PCD_EP_GetRxCount>
 800b730:	4603      	mov	r3, r0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3708      	adds	r7, #8
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
	...

0800b73c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	460b      	mov	r3, r1
 800b746:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b748:	78fb      	ldrb	r3, [r7, #3]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d002      	beq.n	800b754 <HAL_PCDEx_LPM_Callback+0x18>
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d013      	beq.n	800b77a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800b752:	e023      	b.n	800b79c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	699b      	ldr	r3, [r3, #24]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d007      	beq.n	800b76c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800b75c:	f7fe fd21 	bl	800a1a2 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b760:	4a10      	ldr	r2, [pc, #64]	; (800b7a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800b762:	4b10      	ldr	r3, [pc, #64]	; (800b7a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800b764:	691b      	ldr	r3, [r3, #16]
 800b766:	f023 0306 	bic.w	r3, r3, #6
 800b76a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b772:	4618      	mov	r0, r3
 800b774:	f7fd fcf6 	bl	8009164 <USBD_LL_Resume>
    break;
 800b778:	e010      	b.n	800b79c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b780:	4618      	mov	r0, r3
 800b782:	f7fd fcda 	bl	800913a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	699b      	ldr	r3, [r3, #24]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d005      	beq.n	800b79a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b78e:	4a05      	ldr	r2, [pc, #20]	; (800b7a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800b790:	4b04      	ldr	r3, [pc, #16]	; (800b7a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800b792:	691b      	ldr	r3, [r3, #16]
 800b794:	f043 0306 	orr.w	r3, r3, #6
 800b798:	6113      	str	r3, [r2, #16]
    break;   
 800b79a:	bf00      	nop
}
 800b79c:	bf00      	nop
 800b79e:	3708      	adds	r7, #8
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	e000ed00 	.word	0xe000ed00

0800b7a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b7b0:	4b03      	ldr	r3, [pc, #12]	; (800b7c0 <USBD_static_malloc+0x18>)
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	370c      	adds	r7, #12
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop
 800b7c0:	200019b0 	.word	0x200019b0

0800b7c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b083      	sub	sp, #12
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]

}
 800b7cc:	bf00      	nop
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b7dc:	f7fe fce1 	bl	800a1a2 <SystemClock_Config>
}
 800b7e0:	bf00      	nop
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <USBD_LL_BatteryCharging>:
  *         else return USBD_FAIL if false
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b085      	sub	sp, #20
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b7f2:	60fb      	str	r3, [r7, #12]
  if (hpcd->Init.battery_charging_enable == ENABLE)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6a1b      	ldr	r3, [r3, #32]
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d101      	bne.n	800b800 <USBD_LL_BatteryCharging+0x1c>
  {
    return USBD_OK;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	e000      	b.n	800b802 <USBD_LL_BatteryCharging+0x1e>
  }
  else
  {
    return USBD_FAIL;
 800b800:	2302      	movs	r3, #2
  }
}
 800b802:	4618      	mov	r0, r3
 800b804:	3714      	adds	r7, #20
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
	...

0800b810 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	4603      	mov	r3, r0
 800b818:	6039      	str	r1, [r7, #0]
 800b81a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	2212      	movs	r2, #18
 800b820:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b822:	4b03      	ldr	r3, [pc, #12]	; (800b830 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b824:	4618      	mov	r0, r3
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr
 800b830:	20000924 	.word	0x20000924

0800b834 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	4603      	mov	r3, r0
 800b83c:	6039      	str	r1, [r7, #0]
 800b83e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	2204      	movs	r2, #4
 800b844:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b846:	4b03      	ldr	r3, [pc, #12]	; (800b854 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b848:	4618      	mov	r0, r3
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr
 800b854:	20000944 	.word	0x20000944

0800b858 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	4603      	mov	r3, r0
 800b860:	6039      	str	r1, [r7, #0]
 800b862:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b864:	79fb      	ldrb	r3, [r7, #7]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d105      	bne.n	800b876 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b86a:	683a      	ldr	r2, [r7, #0]
 800b86c:	4907      	ldr	r1, [pc, #28]	; (800b88c <USBD_FS_ProductStrDescriptor+0x34>)
 800b86e:	4808      	ldr	r0, [pc, #32]	; (800b890 <USBD_FS_ProductStrDescriptor+0x38>)
 800b870:	f7fe f980 	bl	8009b74 <USBD_GetString>
 800b874:	e004      	b.n	800b880 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b876:	683a      	ldr	r2, [r7, #0]
 800b878:	4904      	ldr	r1, [pc, #16]	; (800b88c <USBD_FS_ProductStrDescriptor+0x34>)
 800b87a:	4805      	ldr	r0, [pc, #20]	; (800b890 <USBD_FS_ProductStrDescriptor+0x38>)
 800b87c:	f7fe f97a 	bl	8009b74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b880:	4b02      	ldr	r3, [pc, #8]	; (800b88c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b882:	4618      	mov	r0, r3
 800b884:	3708      	adds	r7, #8
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	20003688 	.word	0x20003688
 800b890:	0800ba70 	.word	0x0800ba70

0800b894 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	4603      	mov	r3, r0
 800b89c:	6039      	str	r1, [r7, #0]
 800b89e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b8a0:	683a      	ldr	r2, [r7, #0]
 800b8a2:	4904      	ldr	r1, [pc, #16]	; (800b8b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b8a4:	4804      	ldr	r0, [pc, #16]	; (800b8b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b8a6:	f7fe f965 	bl	8009b74 <USBD_GetString>
  return USBD_StrDesc;
 800b8aa:	4b02      	ldr	r3, [pc, #8]	; (800b8b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3708      	adds	r7, #8
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	20003688 	.word	0x20003688
 800b8b8:	0800ba80 	.word	0x0800ba80

0800b8bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	6039      	str	r1, [r7, #0]
 800b8c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b8c8:	79fb      	ldrb	r3, [r7, #7]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d105      	bne.n	800b8da <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	4907      	ldr	r1, [pc, #28]	; (800b8f0 <USBD_FS_SerialStrDescriptor+0x34>)
 800b8d2:	4808      	ldr	r0, [pc, #32]	; (800b8f4 <USBD_FS_SerialStrDescriptor+0x38>)
 800b8d4:	f7fe f94e 	bl	8009b74 <USBD_GetString>
 800b8d8:	e004      	b.n	800b8e4 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800b8da:	683a      	ldr	r2, [r7, #0]
 800b8dc:	4904      	ldr	r1, [pc, #16]	; (800b8f0 <USBD_FS_SerialStrDescriptor+0x34>)
 800b8de:	4805      	ldr	r0, [pc, #20]	; (800b8f4 <USBD_FS_SerialStrDescriptor+0x38>)
 800b8e0:	f7fe f948 	bl	8009b74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8e4:	4b02      	ldr	r3, [pc, #8]	; (800b8f0 <USBD_FS_SerialStrDescriptor+0x34>)
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3708      	adds	r7, #8
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	20003688 	.word	0x20003688
 800b8f4:	0800ba94 	.word	0x0800ba94

0800b8f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	4603      	mov	r3, r0
 800b900:	6039      	str	r1, [r7, #0]
 800b902:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b904:	79fb      	ldrb	r3, [r7, #7]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d105      	bne.n	800b916 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b90a:	683a      	ldr	r2, [r7, #0]
 800b90c:	4907      	ldr	r1, [pc, #28]	; (800b92c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b90e:	4808      	ldr	r0, [pc, #32]	; (800b930 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b910:	f7fe f930 	bl	8009b74 <USBD_GetString>
 800b914:	e004      	b.n	800b920 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b916:	683a      	ldr	r2, [r7, #0]
 800b918:	4904      	ldr	r1, [pc, #16]	; (800b92c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b91a:	4805      	ldr	r0, [pc, #20]	; (800b930 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b91c:	f7fe f92a 	bl	8009b74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b920:	4b02      	ldr	r3, [pc, #8]	; (800b92c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b922:	4618      	mov	r0, r3
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	20003688 	.word	0x20003688
 800b930:	0800baa4 	.word	0x0800baa4

0800b934 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	4603      	mov	r3, r0
 800b93c:	6039      	str	r1, [r7, #0]
 800b93e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b940:	79fb      	ldrb	r3, [r7, #7]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d105      	bne.n	800b952 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b946:	683a      	ldr	r2, [r7, #0]
 800b948:	4907      	ldr	r1, [pc, #28]	; (800b968 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b94a:	4808      	ldr	r0, [pc, #32]	; (800b96c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b94c:	f7fe f912 	bl	8009b74 <USBD_GetString>
 800b950:	e004      	b.n	800b95c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b952:	683a      	ldr	r2, [r7, #0]
 800b954:	4904      	ldr	r1, [pc, #16]	; (800b968 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b956:	4805      	ldr	r0, [pc, #20]	; (800b96c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b958:	f7fe f90c 	bl	8009b74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b95c:	4b02      	ldr	r3, [pc, #8]	; (800b968 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3708      	adds	r7, #8
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	20003688 	.word	0x20003688
 800b96c:	0800bab0 	.word	0x0800bab0

0800b970 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	4603      	mov	r3, r0
 800b978:	6039      	str	r1, [r7, #0]
 800b97a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_BOSDesc);
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	220c      	movs	r2, #12
 800b980:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b982:	4b03      	ldr	r3, [pc, #12]	; (800b990 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b984:	4618      	mov	r0, r3
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr
 800b990:	20000938 	.word	0x20000938

0800b994 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800b994:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b9cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800b998:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800b99a:	e003      	b.n	800b9a4 <LoopCopyDataInit>

0800b99c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800b99c:	4b0c      	ldr	r3, [pc, #48]	; (800b9d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800b99e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800b9a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800b9a2:	3104      	adds	r1, #4

0800b9a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800b9a4:	480b      	ldr	r0, [pc, #44]	; (800b9d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800b9a6:	4b0c      	ldr	r3, [pc, #48]	; (800b9d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800b9a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800b9aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800b9ac:	d3f6      	bcc.n	800b99c <CopyDataInit>
	ldr	r2, =_sbss
 800b9ae:	4a0b      	ldr	r2, [pc, #44]	; (800b9dc <LoopForever+0x12>)
	b	LoopFillZerobss
 800b9b0:	e002      	b.n	800b9b8 <LoopFillZerobss>

0800b9b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800b9b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800b9b4:	f842 3b04 	str.w	r3, [r2], #4

0800b9b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800b9b8:	4b09      	ldr	r3, [pc, #36]	; (800b9e0 <LoopForever+0x16>)
	cmp	r2, r3
 800b9ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800b9bc:	d3f9      	bcc.n	800b9b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800b9be:	f7fe fd33 	bl	800a428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b9c2:	f000 f811 	bl	800b9e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b9c6:	f7fe fbc7 	bl	800a158 <main>

0800b9ca <LoopForever>:

LoopForever:
    b LoopForever
 800b9ca:	e7fe      	b.n	800b9ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800b9cc:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 800b9d0:	0800bb20 	.word	0x0800bb20
	ldr	r0, =_sdata
 800b9d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800b9d8:	20000948 	.word	0x20000948
	ldr	r2, =_sbss
 800b9dc:	20000948 	.word	0x20000948
	ldr	r3, = _ebss
 800b9e0:	20003888 	.word	0x20003888

0800b9e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b9e4:	e7fe      	b.n	800b9e4 <ADC1_IRQHandler>
	...

0800b9e8 <__libc_init_array>:
 800b9e8:	b570      	push	{r4, r5, r6, lr}
 800b9ea:	4e0d      	ldr	r6, [pc, #52]	; (800ba20 <__libc_init_array+0x38>)
 800b9ec:	4c0d      	ldr	r4, [pc, #52]	; (800ba24 <__libc_init_array+0x3c>)
 800b9ee:	1ba4      	subs	r4, r4, r6
 800b9f0:	10a4      	asrs	r4, r4, #2
 800b9f2:	2500      	movs	r5, #0
 800b9f4:	42a5      	cmp	r5, r4
 800b9f6:	d109      	bne.n	800ba0c <__libc_init_array+0x24>
 800b9f8:	4e0b      	ldr	r6, [pc, #44]	; (800ba28 <__libc_init_array+0x40>)
 800b9fa:	4c0c      	ldr	r4, [pc, #48]	; (800ba2c <__libc_init_array+0x44>)
 800b9fc:	f000 f82c 	bl	800ba58 <_init>
 800ba00:	1ba4      	subs	r4, r4, r6
 800ba02:	10a4      	asrs	r4, r4, #2
 800ba04:	2500      	movs	r5, #0
 800ba06:	42a5      	cmp	r5, r4
 800ba08:	d105      	bne.n	800ba16 <__libc_init_array+0x2e>
 800ba0a:	bd70      	pop	{r4, r5, r6, pc}
 800ba0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba10:	4798      	blx	r3
 800ba12:	3501      	adds	r5, #1
 800ba14:	e7ee      	b.n	800b9f4 <__libc_init_array+0xc>
 800ba16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba1a:	4798      	blx	r3
 800ba1c:	3501      	adds	r5, #1
 800ba1e:	e7f2      	b.n	800ba06 <__libc_init_array+0x1e>
 800ba20:	0800bb18 	.word	0x0800bb18
 800ba24:	0800bb18 	.word	0x0800bb18
 800ba28:	0800bb18 	.word	0x0800bb18
 800ba2c:	0800bb1c 	.word	0x0800bb1c

0800ba30 <memcpy>:
 800ba30:	b510      	push	{r4, lr}
 800ba32:	1e43      	subs	r3, r0, #1
 800ba34:	440a      	add	r2, r1
 800ba36:	4291      	cmp	r1, r2
 800ba38:	d100      	bne.n	800ba3c <memcpy+0xc>
 800ba3a:	bd10      	pop	{r4, pc}
 800ba3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba40:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba44:	e7f7      	b.n	800ba36 <memcpy+0x6>

0800ba46 <memset>:
 800ba46:	4402      	add	r2, r0
 800ba48:	4603      	mov	r3, r0
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d100      	bne.n	800ba50 <memset+0xa>
 800ba4e:	4770      	bx	lr
 800ba50:	f803 1b01 	strb.w	r1, [r3], #1
 800ba54:	e7f9      	b.n	800ba4a <memset+0x4>
	...

0800ba58 <_init>:
 800ba58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba5a:	bf00      	nop
 800ba5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba5e:	bc08      	pop	{r3}
 800ba60:	469e      	mov	lr, r3
 800ba62:	4770      	bx	lr

0800ba64 <_fini>:
 800ba64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba66:	bf00      	nop
 800ba68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba6a:	bc08      	pop	{r3}
 800ba6c:	469e      	mov	lr, r3
 800ba6e:	4770      	bx	lr
