
DMX_Merger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  0800d11c  0800d11c  0001d11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d32c  0800d32c  0001d32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d334  0800d334  0001d334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d338  0800d338  0001d338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000014a4  20000000  0800d33c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007fb0  200014a4  0800e7e0  000214a4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20009454  0800e7e0  00029454  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000214a4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000394dc  00000000  00000000  000214d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000064f6  00000000  00000000  0005a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001ef8  00000000  00000000  00060ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001c08  00000000  00000000  00062da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000108f3  00000000  00000000  000649a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00008d8c  00000000  00000000  0007529b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007e027  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00008270  00000000  00000000  0007e0a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200014a4 	.word	0x200014a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d104 	.word	0x0800d104

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200014a8 	.word	0x200014a8
 80001dc:	0800d104 	.word	0x0800d104

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <app_btn_init>:
static void getOthSwitches(eal_task_Task *self);
static void debounceOthSwitches(eal_task_Task *self);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_btn_init(eal_task_Task *self){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	memset(othButtonState, 0, sizeof(othButtonState));
 80005a8:	2205      	movs	r2, #5
 80005aa:	2100      	movs	r1, #0
 80005ac:	480d      	ldr	r0, [pc, #52]	; (80005e4 <app_btn_init+0x44>)
 80005ae:	f00c f8a2 	bl	800c6f6 <memset>
	memset(othButtonBuffer, 0, sizeof(othButtonBuffer));
 80005b2:	2205      	movs	r2, #5
 80005b4:	2100      	movs	r1, #0
 80005b6:	480c      	ldr	r0, [pc, #48]	; (80005e8 <app_btn_init+0x48>)
 80005b8:	f00c f89d 	bl	800c6f6 <memset>
	memset(othButtonTime, 0, sizeof(othButtonTime));
 80005bc:	220a      	movs	r2, #10
 80005be:	2100      	movs	r1, #0
 80005c0:	480a      	ldr	r0, [pc, #40]	; (80005ec <app_btn_init+0x4c>)
 80005c2:	f00c f898 	bl	800c6f6 <memset>
	memset(othButtonHoldTimeShort, 0, sizeof(othButtonHoldTimeShort));
 80005c6:	220a      	movs	r2, #10
 80005c8:	2100      	movs	r1, #0
 80005ca:	4809      	ldr	r0, [pc, #36]	; (80005f0 <app_btn_init+0x50>)
 80005cc:	f00c f893 	bl	800c6f6 <memset>
	memset(othButtonHoldTimeLong, 0, sizeof(othButtonHoldTimeLong));
 80005d0:	220a      	movs	r2, #10
 80005d2:	2100      	movs	r1, #0
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <app_btn_init+0x54>)
 80005d6:	f00c f88e 	bl	800c6f6 <memset>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200014c0 	.word	0x200014c0
 80005e8:	200014c8 	.word	0x200014c8
 80005ec:	200014d0 	.word	0x200014d0
 80005f0:	200014dc 	.word	0x200014dc
 80005f4:	200014e8 	.word	0x200014e8

080005f8 <app_btn_process>:

void app_btn_process(eal_task_Task *self){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	f083 0301 	eor.w	r3, r3, #1
 8000608:	b2db      	uxtb	r3, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	d111      	bne.n	8000632 <app_btn_process+0x3a>
	if(!cyclicFlag) return;
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <app_btn_process+0x48>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	f083 0301 	eor.w	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d10b      	bne.n	8000636 <app_btn_process+0x3e>
	getOthSwitches(self);
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f83e 	bl	80006a0 <getOthSwitches>
	debounceOthSwitches(self);
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f8b9 	bl	800079c <debounceOthSwitches>
	cyclicFlag = false;
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <app_btn_process+0x48>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	e002      	b.n	8000638 <app_btn_process+0x40>
	if(!self->enable) return;
 8000632:	bf00      	nop
 8000634:	e000      	b.n	8000638 <app_btn_process+0x40>
	if(!cyclicFlag) return;
 8000636:	bf00      	nop
}
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200014f2 	.word	0x200014f2

08000644 <app_btn_cyclic1ms>:

void app_btn_cyclic1ms(eal_task_Task *self, bool stat){
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <app_btn_cyclic1ms+0x3c>)
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
	if(internalTimer > 0)--internalTimer;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <app_btn_cyclic1ms+0x40>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	b21b      	sxth	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	dd08      	ble.n	8000672 <app_btn_cyclic1ms+0x2e>
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <app_btn_cyclic1ms+0x40>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	b21b      	sxth	r3, r3
 8000666:	b29b      	uxth	r3, r3
 8000668:	3b01      	subs	r3, #1
 800066a:	b29b      	uxth	r3, r3
 800066c:	b21a      	sxth	r2, r3
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <app_btn_cyclic1ms+0x40>)
 8000670:	801a      	strh	r2, [r3, #0]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	200014f2 	.word	0x200014f2
 8000684:	200014f4 	.word	0x200014f4

08000688 <app_btn_receiveMsg>:

void app_btn_receiveMsg(eal_task_Task *self, msg_Message *message){
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]

}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
	...

080006a0 <getOthSwitches>:

/* Helper ----------------------------------------------------------------------*/
static void getOthSwitches(eal_task_Task *self){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(I_SW2_GPIO_Port, I_SW2_Pin) == 0) 		othButtonBuffer[0] |= (1 << 0); else othButtonBuffer[0] &= ~(1 << 0);
 80006a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f002 fef6 	bl	80034a0 <HAL_GPIO_ReadPin>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d107      	bne.n	80006ca <getOthSwitches+0x2a>
 80006ba:	4b37      	ldr	r3, [pc, #220]	; (8000798 <getOthSwitches+0xf8>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b34      	ldr	r3, [pc, #208]	; (8000798 <getOthSwitches+0xf8>)
 80006c6:	701a      	strb	r2, [r3, #0]
 80006c8:	e006      	b.n	80006d8 <getOthSwitches+0x38>
 80006ca:	4b33      	ldr	r3, [pc, #204]	; (8000798 <getOthSwitches+0xf8>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	f023 0301 	bic.w	r3, r3, #1
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b30      	ldr	r3, [pc, #192]	; (8000798 <getOthSwitches+0xf8>)
 80006d6:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO1_GPIO_Port, I_GPIO1_Pin) == 0) 	othButtonBuffer[0] |= (1 << 1); else othButtonBuffer[0] &= ~(1 << 1);
 80006d8:	2110      	movs	r1, #16
 80006da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006de:	f002 fedf 	bl	80034a0 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d107      	bne.n	80006f8 <getOthSwitches+0x58>
 80006e8:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <getOthSwitches+0xf8>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b29      	ldr	r3, [pc, #164]	; (8000798 <getOthSwitches+0xf8>)
 80006f4:	701a      	strb	r2, [r3, #0]
 80006f6:	e006      	b.n	8000706 <getOthSwitches+0x66>
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <getOthSwitches+0xf8>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	f023 0302 	bic.w	r3, r3, #2
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b25      	ldr	r3, [pc, #148]	; (8000798 <getOthSwitches+0xf8>)
 8000704:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO2_GPIO_Port, I_GPIO2_Pin) == 0) 	othButtonBuffer[0] |= (1 << 2); else othButtonBuffer[0] &= ~(1 << 2);
 8000706:	2120      	movs	r1, #32
 8000708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070c:	f002 fec8 	bl	80034a0 <HAL_GPIO_ReadPin>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d107      	bne.n	8000726 <getOthSwitches+0x86>
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <getOthSwitches+0xf8>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	f043 0304 	orr.w	r3, r3, #4
 800071e:	b2da      	uxtb	r2, r3
 8000720:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <getOthSwitches+0xf8>)
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	e006      	b.n	8000734 <getOthSwitches+0x94>
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <getOthSwitches+0xf8>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	f023 0304 	bic.w	r3, r3, #4
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b19      	ldr	r3, [pc, #100]	; (8000798 <getOthSwitches+0xf8>)
 8000732:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO3_GPIO_Port, I_GPIO3_Pin) == 0) 	othButtonBuffer[0] |= (1 << 3); else othButtonBuffer[0] &= ~(1 << 3);
 8000734:	2140      	movs	r1, #64	; 0x40
 8000736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073a:	f002 feb1 	bl	80034a0 <HAL_GPIO_ReadPin>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d107      	bne.n	8000754 <getOthSwitches+0xb4>
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <getOthSwitches+0xf8>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <getOthSwitches+0xf8>)
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	e006      	b.n	8000762 <getOthSwitches+0xc2>
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <getOthSwitches+0xf8>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	f023 0308 	bic.w	r3, r3, #8
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <getOthSwitches+0xf8>)
 8000760:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO4_GPIO_Port, I_GPIO4_Pin) == 0) 	othButtonBuffer[0] |= (1 << 4); else othButtonBuffer[0] &= ~(1 << 4);
 8000762:	2180      	movs	r1, #128	; 0x80
 8000764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000768:	f002 fe9a 	bl	80034a0 <HAL_GPIO_ReadPin>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d107      	bne.n	8000782 <getOthSwitches+0xe2>
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <getOthSwitches+0xf8>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	f043 0310 	orr.w	r3, r3, #16
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <getOthSwitches+0xf8>)
 800077e:	701a      	strb	r2, [r3, #0]

}
 8000780:	e006      	b.n	8000790 <getOthSwitches+0xf0>
	if(HAL_GPIO_ReadPin(I_GPIO4_GPIO_Port, I_GPIO4_Pin) == 0) 	othButtonBuffer[0] |= (1 << 4); else othButtonBuffer[0] &= ~(1 << 4);
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <getOthSwitches+0xf8>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	f023 0310 	bic.w	r3, r3, #16
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b02      	ldr	r3, [pc, #8]	; (8000798 <getOthSwitches+0xf8>)
 800078e:	701a      	strb	r2, [r3, #0]
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200014c8 	.word	0x200014c8

0800079c <debounceOthSwitches>:

static void debounceOthSwitches(eal_task_Task *self){
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	; 0x30
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	static uint8_t swNmbr = 0;
	if(swIndex[swNmbr] != app_btn_NONE){
 80007a4:	4ba3      	ldr	r3, [pc, #652]	; (8000a34 <debounceOthSwitches+0x298>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4ba3      	ldr	r3, [pc, #652]	; (8000a38 <debounceOthSwitches+0x29c>)
 80007ac:	5c9b      	ldrb	r3, [r3, r2]
 80007ae:	2bff      	cmp	r3, #255	; 0xff
 80007b0:	f000 812f 	beq.w	8000a12 <debounceOthSwitches+0x276>
		uint16_t msk = 1 << (swIndex[swNmbr]&0xf);
 80007b4:	4b9f      	ldr	r3, [pc, #636]	; (8000a34 <debounceOthSwitches+0x298>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b9f      	ldr	r3, [pc, #636]	; (8000a38 <debounceOthSwitches+0x29c>)
 80007bc:	5c9b      	ldrb	r3, [r3, r2]
 80007be:	f003 030f 	and.w	r3, r3, #15
 80007c2:	2201      	movs	r2, #1
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint8_t  idx = (swIndex[swNmbr]&0xf0) >> 4;
 80007ca:	4b9a      	ldr	r3, [pc, #616]	; (8000a34 <debounceOthSwitches+0x298>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b99      	ldr	r3, [pc, #612]	; (8000a38 <debounceOthSwitches+0x29c>)
 80007d2:	5c9b      	ldrb	r3, [r3, r2]
 80007d4:	091b      	lsrs	r3, r3, #4
 80007d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (!(othButtonBuffer[idx] & msk)){ 			/*button is released*/
 80007da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80007de:	4a97      	ldr	r2, [pc, #604]	; (8000a3c <debounceOthSwitches+0x2a0>)
 80007e0:	5cd3      	ldrb	r3, [r2, r3]
 80007e2:	461a      	mov	r2, r3
 80007e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007e6:	4013      	ands	r3, r2
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d15d      	bne.n	80008a8 <debounceOthSwitches+0x10c>
			if(othButtonTime[swNmbr] > 0){
 80007ec:	4b91      	ldr	r3, [pc, #580]	; (8000a34 <debounceOthSwitches+0x298>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b93      	ldr	r3, [pc, #588]	; (8000a40 <debounceOthSwitches+0x2a4>)
 80007f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	f000 80a4 	beq.w	8000946 <debounceOthSwitches+0x1aa>
				--othButtonTime[swNmbr];
 80007fe:	4b8d      	ldr	r3, [pc, #564]	; (8000a34 <debounceOthSwitches+0x298>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	4a8f      	ldr	r2, [pc, #572]	; (8000a40 <debounceOthSwitches+0x2a4>)
 8000804:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000808:	3a01      	subs	r2, #1
 800080a:	b291      	uxth	r1, r2
 800080c:	4a8c      	ldr	r2, [pc, #560]	; (8000a40 <debounceOthSwitches+0x2a4>)
 800080e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(othButtonTime[swNmbr] <= 0){
 8000812:	4b88      	ldr	r3, [pc, #544]	; (8000a34 <debounceOthSwitches+0x298>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	4b89      	ldr	r3, [pc, #548]	; (8000a40 <debounceOthSwitches+0x2a4>)
 800081a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800081e:	2b00      	cmp	r3, #0
 8000820:	f040 8091 	bne.w	8000946 <debounceOthSwitches+0x1aa>
					if(othButtonState[idx] & msk){
 8000824:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000828:	4a86      	ldr	r2, [pc, #536]	; (8000a44 <debounceOthSwitches+0x2a8>)
 800082a:	5cd3      	ldrb	r3, [r2, r3]
 800082c:	461a      	mov	r2, r3
 800082e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000830:	4013      	ands	r3, r2
 8000832:	2b00      	cmp	r3, #0
 8000834:	f000 8087 	beq.w	8000946 <debounceOthSwitches+0x1aa>
						if(self->sendMsg != NULL){
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d014      	beq.n	800086a <debounceOthSwitches+0xce>
							msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_RELEASED, 0, 0);
 8000840:	4b7c      	ldr	r3, [pc, #496]	; (8000a34 <debounceOthSwitches+0x298>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b29b      	uxth	r3, r3
 8000846:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000848:	2300      	movs	r3, #0
 800084a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800084c:	2342      	movs	r3, #66	; 0x42
 800084e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000852:	2300      	movs	r3, #0
 8000854:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000858:	2300      	movs	r3, #0
 800085a:	857b      	strh	r3, [r7, #42]	; 0x2a
							self->sendMsg(self, &newMessage);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	695b      	ldr	r3, [r3, #20]
 8000860:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000864:	4611      	mov	r1, r2
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	4798      	blx	r3
						}
						othButtonState[idx] &=~msk;
 800086a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800086e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000872:	4974      	ldr	r1, [pc, #464]	; (8000a44 <debounceOthSwitches+0x2a8>)
 8000874:	5c8a      	ldrb	r2, [r1, r2]
 8000876:	b251      	sxtb	r1, r2
 8000878:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800087a:	b252      	sxtb	r2, r2
 800087c:	43d2      	mvns	r2, r2
 800087e:	b252      	sxtb	r2, r2
 8000880:	400a      	ands	r2, r1
 8000882:	b252      	sxtb	r2, r2
 8000884:	b2d1      	uxtb	r1, r2
 8000886:	4a6f      	ldr	r2, [pc, #444]	; (8000a44 <debounceOthSwitches+0x2a8>)
 8000888:	54d1      	strb	r1, [r2, r3]
						othButtonHoldTimeShort[swNmbr] = 0;
 800088a:	4b6a      	ldr	r3, [pc, #424]	; (8000a34 <debounceOthSwitches+0x298>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	4b6d      	ldr	r3, [pc, #436]	; (8000a48 <debounceOthSwitches+0x2ac>)
 8000892:	2100      	movs	r1, #0
 8000894:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						othButtonHoldTimeLong[swNmbr] = 0;
 8000898:	4b66      	ldr	r3, [pc, #408]	; (8000a34 <debounceOthSwitches+0x298>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	4b6b      	ldr	r3, [pc, #428]	; (8000a4c <debounceOthSwitches+0x2b0>)
 80008a0:	2100      	movs	r1, #0
 80008a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80008a6:	e04e      	b.n	8000946 <debounceOthSwitches+0x1aa>
					}
				}
			}
		}else{					 						/*button is down*/
			if(othButtonTime[swNmbr] < app_cfg_btn_TIME_DEBOUNCE){
 80008a8:	4b62      	ldr	r3, [pc, #392]	; (8000a34 <debounceOthSwitches+0x298>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b64      	ldr	r3, [pc, #400]	; (8000a40 <debounceOthSwitches+0x2a4>)
 80008b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	d846      	bhi.n	8000946 <debounceOthSwitches+0x1aa>
				++othButtonTime[swNmbr];
 80008b8:	4b5e      	ldr	r3, [pc, #376]	; (8000a34 <debounceOthSwitches+0x298>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4a60      	ldr	r2, [pc, #384]	; (8000a40 <debounceOthSwitches+0x2a4>)
 80008be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80008c2:	3201      	adds	r2, #1
 80008c4:	b291      	uxth	r1, r2
 80008c6:	4a5e      	ldr	r2, [pc, #376]	; (8000a40 <debounceOthSwitches+0x2a4>)
 80008c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(othButtonTime[swNmbr] >= app_cfg_btn_TIME_DEBOUNCE){
 80008cc:	4b59      	ldr	r3, [pc, #356]	; (8000a34 <debounceOthSwitches+0x298>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b5b      	ldr	r3, [pc, #364]	; (8000a40 <debounceOthSwitches+0x2a4>)
 80008d4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80008d8:	2b03      	cmp	r3, #3
 80008da:	d934      	bls.n	8000946 <debounceOthSwitches+0x1aa>
					if(self->sendMsg != NULL){
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d014      	beq.n	800090e <debounceOthSwitches+0x172>
						msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_PRESSED, 0, 0);
 80008e4:	4b53      	ldr	r3, [pc, #332]	; (8000a34 <debounceOthSwitches+0x298>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	83bb      	strh	r3, [r7, #28]
 80008ec:	2301      	movs	r3, #1
 80008ee:	83fb      	strh	r3, [r7, #30]
 80008f0:	2342      	movs	r3, #66	; 0x42
 80008f2:	f887 3020 	strb.w	r3, [r7, #32]
 80008f6:	2300      	movs	r3, #0
 80008f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80008fc:	2300      	movs	r3, #0
 80008fe:	847b      	strh	r3, [r7, #34]	; 0x22
						self->sendMsg(self, &newMessage);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	f107 021c 	add.w	r2, r7, #28
 8000908:	4611      	mov	r1, r2
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	4798      	blx	r3
					}
					othButtonState[idx] |= msk;
 800090e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000912:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000916:	494b      	ldr	r1, [pc, #300]	; (8000a44 <debounceOthSwitches+0x2a8>)
 8000918:	5c89      	ldrb	r1, [r1, r2]
 800091a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800091c:	b2d2      	uxtb	r2, r2
 800091e:	430a      	orrs	r2, r1
 8000920:	b2d1      	uxtb	r1, r2
 8000922:	4a48      	ldr	r2, [pc, #288]	; (8000a44 <debounceOthSwitches+0x2a8>)
 8000924:	54d1      	strb	r1, [r2, r3]
					othButtonHoldTimeShort[swNmbr] = app_cfg_btn_TIME_HOLD_SHORT;
 8000926:	4b43      	ldr	r3, [pc, #268]	; (8000a34 <debounceOthSwitches+0x298>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	461a      	mov	r2, r3
 800092c:	4b46      	ldr	r3, [pc, #280]	; (8000a48 <debounceOthSwitches+0x2ac>)
 800092e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000932:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					othButtonHoldTimeLong[swNmbr] = app_cfg_btn_TIME_HOLD_LONG;
 8000936:	4b3f      	ldr	r3, [pc, #252]	; (8000a34 <debounceOthSwitches+0x298>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <debounceOthSwitches+0x2b0>)
 800093e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000942:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				}
			}
		}
		if(othButtonHoldTimeShort[swNmbr]>0){
 8000946:	4b3b      	ldr	r3, [pc, #236]	; (8000a34 <debounceOthSwitches+0x298>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	4b3e      	ldr	r3, [pc, #248]	; (8000a48 <debounceOthSwitches+0x2ac>)
 800094e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000952:	2b00      	cmp	r3, #0
 8000954:	dd2a      	ble.n	80009ac <debounceOthSwitches+0x210>
			--othButtonHoldTimeShort[swNmbr];
 8000956:	4b37      	ldr	r3, [pc, #220]	; (8000a34 <debounceOthSwitches+0x298>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4a3b      	ldr	r2, [pc, #236]	; (8000a48 <debounceOthSwitches+0x2ac>)
 800095c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000960:	b292      	uxth	r2, r2
 8000962:	3a01      	subs	r2, #1
 8000964:	b292      	uxth	r2, r2
 8000966:	b211      	sxth	r1, r2
 8000968:	4a37      	ldr	r2, [pc, #220]	; (8000a48 <debounceOthSwitches+0x2ac>)
 800096a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(othButtonHoldTimeShort[swNmbr] == 0) {
 800096e:	4b31      	ldr	r3, [pc, #196]	; (8000a34 <debounceOthSwitches+0x298>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <debounceOthSwitches+0x2ac>)
 8000976:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d116      	bne.n	80009ac <debounceOthSwitches+0x210>
				if(self->sendMsg != NULL){
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d012      	beq.n	80009ac <debounceOthSwitches+0x210>
					msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_HOLD_SHORT, 0, 0);
 8000986:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <debounceOthSwitches+0x298>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b29b      	uxth	r3, r3
 800098c:	82bb      	strh	r3, [r7, #20]
 800098e:	2302      	movs	r3, #2
 8000990:	82fb      	strh	r3, [r7, #22]
 8000992:	2342      	movs	r3, #66	; 0x42
 8000994:	763b      	strb	r3, [r7, #24]
 8000996:	2300      	movs	r3, #0
 8000998:	767b      	strb	r3, [r7, #25]
 800099a:	2300      	movs	r3, #0
 800099c:	837b      	strh	r3, [r7, #26]
					self->sendMsg(self, &newMessage);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f107 0214 	add.w	r2, r7, #20
 80009a6:	4611      	mov	r1, r2
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	4798      	blx	r3
				}
			}
		}
		if(othButtonHoldTimeLong[swNmbr]>0){
 80009ac:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <debounceOthSwitches+0x298>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <debounceOthSwitches+0x2b0>)
 80009b4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	dd2a      	ble.n	8000a12 <debounceOthSwitches+0x276>
			--othButtonHoldTimeLong[swNmbr];
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <debounceOthSwitches+0x298>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <debounceOthSwitches+0x2b0>)
 80009c2:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80009c6:	b292      	uxth	r2, r2
 80009c8:	3a01      	subs	r2, #1
 80009ca:	b292      	uxth	r2, r2
 80009cc:	b211      	sxth	r1, r2
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <debounceOthSwitches+0x2b0>)
 80009d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(othButtonHoldTimeLong[swNmbr] == 0) {
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <debounceOthSwitches+0x298>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <debounceOthSwitches+0x2b0>)
 80009dc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d116      	bne.n	8000a12 <debounceOthSwitches+0x276>
				if(self->sendMsg != NULL){
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d012      	beq.n	8000a12 <debounceOthSwitches+0x276>
					msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_HOLD_LONG, 0, 0);
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <debounceOthSwitches+0x298>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	81bb      	strh	r3, [r7, #12]
 80009f4:	2303      	movs	r3, #3
 80009f6:	81fb      	strh	r3, [r7, #14]
 80009f8:	2342      	movs	r3, #66	; 0x42
 80009fa:	743b      	strb	r3, [r7, #16]
 80009fc:	2300      	movs	r3, #0
 80009fe:	747b      	strb	r3, [r7, #17]
 8000a00:	2300      	movs	r3, #0
 8000a02:	827b      	strh	r3, [r7, #18]
					self->sendMsg(self, &newMessage);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	695b      	ldr	r3, [r3, #20]
 8000a08:	f107 020c 	add.w	r2, r7, #12
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	4798      	blx	r3
				}
			}
		}
	}
	if(++swNmbr >= (app_cfg_NMBR_BTNS))swNmbr = 0;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <debounceOthSwitches+0x298>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <debounceOthSwitches+0x298>)
 8000a1c:	701a      	strb	r2, [r3, #0]
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <debounceOthSwitches+0x298>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	d902      	bls.n	8000a2c <debounceOthSwitches+0x290>
 8000a26:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <debounceOthSwitches+0x298>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	3730      	adds	r7, #48	; 0x30
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200014f6 	.word	0x200014f6
 8000a38:	0800d19c 	.word	0x0800d19c
 8000a3c:	200014c8 	.word	0x200014c8
 8000a40:	200014d0 	.word	0x200014d0
 8000a44:	200014c0 	.word	0x200014c0
 8000a48:	200014dc 	.word	0x200014dc
 8000a4c:	200014e8 	.word	0x200014e8

08000a50 <app_dmx_init>:
app_dmx_Merge dmxMerge = app_dmx_MERGE_ACTIVE;
app_dmx_MergeMode dmxMergeMode = app_dmx_MERGE_MODE_HTP;
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_dmx_init(eal_task_Task *self){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	dmxMerge = app_dmx_MERGE_ACTIVE;
 8000a58:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <app_dmx_init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
	dmxMergeMode = app_dmx_MERGE_MODE_HTP;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <app_dmx_init+0x78>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]

	dmx_registerCallback(&dmx1Out, dmx1TransmitterCallback);
 8000a64:	4919      	ldr	r1, [pc, #100]	; (8000acc <app_dmx_init+0x7c>)
 8000a66:	481a      	ldr	r0, [pc, #104]	; (8000ad0 <app_dmx_init+0x80>)
 8000a68:	f008 f82b 	bl	8008ac2 <dmx_registerCallback>
	dmx_init(&dmx1Out);
 8000a6c:	4818      	ldr	r0, [pc, #96]	; (8000ad0 <app_dmx_init+0x80>)
 8000a6e:	f008 f837 	bl	8008ae0 <dmx_init>
	dmx_txStart(&dmx1Out);
 8000a72:	4817      	ldr	r0, [pc, #92]	; (8000ad0 <app_dmx_init+0x80>)
 8000a74:	f008 f90a 	bl	8008c8c <dmx_txStart>

	dmx_registerCallback(&dmx2In, dmx2ReceiverCallback);
 8000a78:	4916      	ldr	r1, [pc, #88]	; (8000ad4 <app_dmx_init+0x84>)
 8000a7a:	4817      	ldr	r0, [pc, #92]	; (8000ad8 <app_dmx_init+0x88>)
 8000a7c:	f008 f821 	bl	8008ac2 <dmx_registerCallback>
	if(dmxMerge == app_dmx_MERGE_ACTIVE){
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <app_dmx_init+0x74>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d105      	bne.n	8000a94 <app_dmx_init+0x44>
		dmx_init(&dmx2In);
 8000a88:	4813      	ldr	r0, [pc, #76]	; (8000ad8 <app_dmx_init+0x88>)
 8000a8a:	f008 f829 	bl	8008ae0 <dmx_init>
		dmx_rxStart(&dmx2In);
 8000a8e:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <app_dmx_init+0x88>)
 8000a90:	f008 f90e 	bl	8008cb0 <dmx_rxStart>
	}

	HAL_GPIO_WritePin(O_USART1_DIR_GPIO_Port, O_USART1_DIR_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9a:	4810      	ldr	r0, [pc, #64]	; (8000adc <app_dmx_init+0x8c>)
 8000a9c:	f002 fd18 	bl	80034d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(O_USART2_DIR_GPIO_Port, O_USART2_DIR_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2104      	movs	r1, #4
 8000aa4:	480d      	ldr	r0, [pc, #52]	; (8000adc <app_dmx_init+0x8c>)
 8000aa6:	f002 fd13 	bl	80034d0 <HAL_GPIO_WritePin>

	memset(dmxModified, 0, sizeof(dmxModified));
 8000aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aae:	2100      	movs	r1, #0
 8000ab0:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <app_dmx_init+0x90>)
 8000ab2:	f00b fe20 	bl	800c6f6 <memset>
	dmxTxComplete = false;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <app_dmx_init+0x94>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20001afd 	.word	0x20001afd
 8000ac8:	20001afe 	.word	0x20001afe
 8000acc:	08000c81 	.word	0x08000c81
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	08000ca5 	.word	0x08000ca5
 8000ad8:	2000005c 	.word	0x2000005c
 8000adc:	48000800 	.word	0x48000800
 8000ae0:	200018fc 	.word	0x200018fc
 8000ae4:	20001afc 	.word	0x20001afc

08000ae8 <app_dmx_process>:

void app_dmx_process(eal_task_Task *self){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	f083 0301 	eor.w	r3, r3, #1
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d11e      	bne.n	8000b3c <app_dmx_process+0x54>
	if(!cyclicFlag) return;
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <app_dmx_process+0x60>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	f083 0301 	eor.w	r3, r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d118      	bne.n	8000b40 <app_dmx_process+0x58>
	/*Do everything what you want to do*/
	dmx_loop(&dmx1Out);
 8000b0e:	480f      	ldr	r0, [pc, #60]	; (8000b4c <app_dmx_process+0x64>)
 8000b10:	f008 f830 	bl	8008b74 <dmx_loop>
	/*Receive makes only sense if merge is enabled*/
	if(dmxMerge == app_dmx_MERGE_ACTIVE) dmx_loop(&dmx2In);
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <app_dmx_process+0x68>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <app_dmx_process+0x3a>
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <app_dmx_process+0x6c>)
 8000b1e:	f008 f829 	bl	8008b74 <dmx_loop>

	if(dmxTxComplete){updateDmxOut(); dmxTxComplete = false;}
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <app_dmx_process+0x70>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d004      	beq.n	8000b34 <app_dmx_process+0x4c>
 8000b2a:	f000 f84b 	bl	8000bc4 <updateDmxOut>
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <app_dmx_process+0x70>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]

	cyclicFlag = false;
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <app_dmx_process+0x60>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
 8000b3a:	e002      	b.n	8000b42 <app_dmx_process+0x5a>
	if(!self->enable) return;
 8000b3c:	bf00      	nop
 8000b3e:	e000      	b.n	8000b42 <app_dmx_process+0x5a>
	if(!cyclicFlag) return;
 8000b40:	bf00      	nop
}
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200018f8 	.word	0x200018f8
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20001afd 	.word	0x20001afd
 8000b54:	2000005c 	.word	0x2000005c
 8000b58:	20001afc 	.word	0x20001afc

08000b5c <app_dmx_cyclic1ms>:

void app_dmx_cyclic1ms(eal_task_Task *self, bool stat){
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <app_dmx_cyclic1ms+0x20>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	200018f8 	.word	0x200018f8

08000b80 <app_dmx_receiveMsg>:

void app_dmx_receiveMsg(eal_task_Task *self, msg_Message *message){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	if(message->type == app_cfg_DMX_MSG){
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	791b      	ldrb	r3, [r3, #4]
 8000b8e:	2b44      	cmp	r3, #68	; 0x44
 8000b90:	d111      	bne.n	8000bb6 <app_dmx_receiveMsg+0x36>
		/*Action parsing*/
		if(msg_isAction(message)){
 8000b92:	6838      	ldr	r0, [r7, #0]
 8000b94:	f008 fcc3 	bl	800951e <msg_isAction>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d00b      	beq.n	8000bb6 <app_dmx_receiveMsg+0x36>
			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ba6:	81fb      	strh	r3, [r7, #14]
			dmxModified[idx] = (uint8_t)message->value;
 8000ba8:	89fb      	ldrh	r3, [r7, #14]
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000bb0:	b2d1      	uxtb	r1, r2
 8000bb2:	4a03      	ldr	r2, [pc, #12]	; (8000bc0 <app_dmx_receiveMsg+0x40>)
 8000bb4:	54d1      	strb	r1, [r2, r3]
		}
		/*Event parsing*/
		}else{

		}
}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200018fc 	.word	0x200018fc

08000bc4 <updateDmxOut>:

/* Helper ---------------------------------------------------------------------*/
static void updateDmxOut(){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
	if(dmxMerge == app_dmx_MERGE_ACTIVE){
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <updateDmxOut+0xa8>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d13f      	bne.n	8000c52 <updateDmxOut+0x8e>
		for(int i = 0; i < dmx1Out.universeSize; ++i){
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	e034      	b.n	8000c42 <updateDmxOut+0x7e>
			uint8_t dmxRxValue = dmx2In.universe[i]; /*Atomic operation*/
 8000bd8:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <updateDmxOut+0xac>)
 8000bda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4413      	add	r3, r2
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	70fb      	strb	r3, [r7, #3]
			uint8_t dmxModValue = dmxModified[i]; /*Atomic operation*/
 8000be4:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <updateDmxOut+0xb0>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	70bb      	strb	r3, [r7, #2]
			if(dmxMergeMode == app_dmx_MERGE_MODE_HTP) {	/*Highest takes presence*/
 8000bee:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <updateDmxOut+0xb4>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d111      	bne.n	8000c1a <updateDmxOut+0x56>
				if(dmxRxValue > dmxModValue) dmx1Out.universe[i] = dmxRxValue;
 8000bf6:	78fa      	ldrb	r2, [r7, #3]
 8000bf8:	78bb      	ldrb	r3, [r7, #2]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d906      	bls.n	8000c0c <updateDmxOut+0x48>
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <updateDmxOut+0xb8>)
 8000c00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	78fa      	ldrb	r2, [r7, #3]
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	e017      	b.n	8000c3c <updateDmxOut+0x78>
				else dmx1Out.universe[i] = dmxModValue;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <updateDmxOut+0xb8>)
 8000c0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4413      	add	r3, r2
 8000c14:	78ba      	ldrb	r2, [r7, #2]
 8000c16:	701a      	strb	r2, [r3, #0]
 8000c18:	e010      	b.n	8000c3c <updateDmxOut+0x78>
			}else{								/*Lowest takes presence*/
				if(dmxRxValue < dmxModValue) dmx1Out.universe[i] = dmxRxValue;
 8000c1a:	78fa      	ldrb	r2, [r7, #3]
 8000c1c:	78bb      	ldrb	r3, [r7, #2]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d206      	bcs.n	8000c30 <updateDmxOut+0x6c>
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <updateDmxOut+0xb8>)
 8000c24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	78fa      	ldrb	r2, [r7, #3]
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	e005      	b.n	8000c3c <updateDmxOut+0x78>
				else dmx1Out.universe[i] = dmxModValue;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <updateDmxOut+0xb8>)
 8000c32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4413      	add	r3, r2
 8000c38:	78ba      	ldrb	r2, [r7, #2]
 8000c3a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < dmx1Out.universeSize; ++i){
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <updateDmxOut+0xb8>)
 8000c44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000c48:	461a      	mov	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	dcc3      	bgt.n	8000bd8 <updateDmxOut+0x14>
			}
		}
	}else{ /*If merge is disabled just copy the dmxModified data to output*/
		memcpy(dmx1Out.universe, dmxModified, dmx1Out.universeSize);
	}
}
 8000c50:	e008      	b.n	8000c64 <updateDmxOut+0xa0>
		memcpy(dmx1Out.universe, dmxModified, dmx1Out.universeSize);
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <updateDmxOut+0xb8>)
 8000c54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <updateDmxOut+0xb8>)
 8000c58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4905      	ldr	r1, [pc, #20]	; (8000c74 <updateDmxOut+0xb0>)
 8000c60:	f00b fd3e 	bl	800c6e0 <memcpy>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20001afd 	.word	0x20001afd
 8000c70:	2000005c 	.word	0x2000005c
 8000c74:	200018fc 	.word	0x200018fc
 8000c78:	20001afe 	.word	0x20001afe
 8000c7c:	20000000 	.word	0x20000000

08000c80 <dmx1TransmitterCallback>:

/* Callback's ---------------------------------------------------------------------*/
bool dmx1TransmitterCallback(dmx_cfg_Instance *dmx){
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	bool state = true;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	73fb      	strb	r3, [r7, #15]
	dmxTxComplete = true;
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <dmx1TransmitterCallback+0x20>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
	return state;
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	20001afc 	.word	0x20001afc

08000ca4 <dmx2ReceiverCallback>:

bool dmx2ReceiverCallback(dmx_cfg_Instance *dmx){
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	bool state = true;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
	return state;
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <USART1_IRQHandler>:
/* IRQs ---------------------------------------------------------------------*/
void USART1_IRQHandler(void){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	dmx_irqRxInterfaceHandler(&dmx2In);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <USART1_IRQHandler+0x10>)
 8000cc6:	f008 f8e7 	bl	8008e98 <dmx_irqRxInterfaceHandler>
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000005c 	.word	0x2000005c

08000cd4 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	dmx_irqTxInterfaceHandler(&dmx1Out);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <USART2_IRQHandler+0x10>)
 8000cda:	f008 f868 	bl	8008dae <dmx_irqTxInterfaceHandler>
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000000 	.word	0x20000000

08000ce8 <app_dmx_preset_init>:
static volatile bool cyclicFlag = false;
static volatile int16_t internalTimer = 0;
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_dmx_preset_init(eal_task_Task *self){
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	e020      	b.n	8000d38 <app_dmx_preset_init+0x50>
		app_model_model.presets[i].relTime_ms = 0;
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <app_dmx_preset_init+0x64>)
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000d00:	fb01 f303 	mul.w	r3, r1, r3
 8000d04:	4413      	add	r3, r2
 8000d06:	2200      	movs	r2, #0
 8000d08:	615a      	str	r2, [r3, #20]
		app_model_model.presets[i].trigger = false;
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <app_dmx_preset_init+0x64>)
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000d14:	fb01 f303 	mul.w	r3, r1, r3
 8000d18:	4413      	add	r3, r2
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	74da      	strb	r2, [r3, #19]
		app_model_model.presets[i].transitionDoneCnt = 0;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <app_dmx_preset_init+0x64>)
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000d28:	fb01 f303 	mul.w	r3, r1, r3
 8000d2c:	4413      	add	r3, r2
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	3301      	adds	r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b09      	cmp	r3, #9
 8000d3c:	dddb      	ble.n	8000cf6 <app_dmx_preset_init+0xe>
	}
}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	200010a0 	.word	0x200010a0

08000d50 <app_dmx_preset_process>:

void app_dmx_preset_process(eal_task_Task *self){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	f083 0301 	eor.w	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 80dc 	bne.w	8000f20 <app_dmx_preset_process+0x1d0>
	if(!cyclicFlag) return;
 8000d68:	4b70      	ldr	r3, [pc, #448]	; (8000f2c <app_dmx_preset_process+0x1dc>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	f083 0301 	eor.w	r3, r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f040 80d5 	bne.w	8000f24 <app_dmx_preset_process+0x1d4>
	/*Do everything what you want to do*/
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	e0c7      	b.n	8000f10 <app_dmx_preset_process+0x1c0>
		if(app_model_model.presets[i].trigger){	/*Preset is triggered and can be executed*/
 8000d80:	4b6b      	ldr	r3, [pc, #428]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000d8a:	fb01 f303 	mul.w	r3, r1, r3
 8000d8e:	4413      	add	r3, r2
 8000d90:	7cdb      	ldrb	r3, [r3, #19]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 80b9 	beq.w	8000f0a <app_dmx_preset_process+0x1ba>
			++app_model_model.presets[i].relTime_ms;
 8000d98:	4b65      	ldr	r3, [pc, #404]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000da2:	fb01 f303 	mul.w	r3, r1, r3
 8000da6:	4413      	add	r3, r2
 8000da8:	695a      	ldr	r2, [r3, #20]
 8000daa:	3201      	adds	r2, #1
 8000dac:	615a      	str	r2, [r3, #20]
			for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	e066      	b.n	8000e82 <app_dmx_preset_process+0x132>
				if(app_model_model.presets[i].presetTransitionSettings[j].enable){
 8000db4:	4b5e      	ldr	r3, [pc, #376]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000dbe:	fb01 f303 	mul.w	r3, r1, r3
 8000dc2:	441a      	add	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	4413      	add	r3, r2
 8000dca:	332d      	adds	r3, #45	; 0x2d
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d054      	beq.n	8000e7c <app_dmx_preset_process+0x12c>
					if(app_model_model.presets[i].presetTransitionStatus[j].transStep == app_dmx_preset_cfg_TRANS_STEP_EXE) performNextTransitionStep(self, i, j);
 8000dd2:	4b57      	ldr	r3, [pc, #348]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000ddc:	fb01 f303 	mul.w	r3, r1, r3
 8000de0:	441a      	add	r2, r3
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	33b0      	adds	r3, #176	; 0xb0
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	4413      	add	r3, r2
 8000dea:	785b      	ldrb	r3, [r3, #1]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d108      	bne.n	8000e02 <app_dmx_preset_process+0xb2>
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	68ba      	ldr	r2, [r7, #8]
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 f96e 	bl	80010dc <performNextTransitionStep>
 8000e00:	e03c      	b.n	8000e7c <app_dmx_preset_process+0x12c>
					else if((app_model_model.presets[i].relTime_ms >= app_model_model.presets[i].presetTransitionSettings[j].transDelay_ms) && (app_model_model.presets[i].presetTransitionStatus[j].transStep == app_dmx_preset_cfg_TRANS_STEP_NONE)){
 8000e02:	4b4b      	ldr	r3, [pc, #300]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000e0c:	fb01 f303 	mul.w	r3, r1, r3
 8000e10:	4413      	add	r3, r2
 8000e12:	695a      	ldr	r2, [r3, #20]
 8000e14:	4b46      	ldr	r3, [pc, #280]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000e16:	6859      	ldr	r1, [r3, #4]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8000e1e:	fb00 f303 	mul.w	r3, r0, r3
 8000e22:	4419      	add	r1, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	440b      	add	r3, r1
 8000e2a:	3328      	adds	r3, #40	; 0x28
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d324      	bcc.n	8000e7c <app_dmx_preset_process+0x12c>
 8000e32:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000e3c:	fb01 f303 	mul.w	r3, r1, r3
 8000e40:	441a      	add	r2, r3
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	33b0      	adds	r3, #176	; 0xb0
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	785b      	ldrb	r3, [r3, #1]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d115      	bne.n	8000e7c <app_dmx_preset_process+0x12c>
						app_model_model.presets[i].presetTransitionStatus[j].transStep = app_dmx_preset_cfg_TRANS_STEP_EXE;
 8000e50:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000e5a:	fb01 f303 	mul.w	r3, r1, r3
 8000e5e:	441a      	add	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	33b0      	adds	r3, #176	; 0xb0
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4413      	add	r3, r2
 8000e68:	2201      	movs	r2, #1
 8000e6a:	705a      	strb	r2, [r3, #1]
						performNextTransitionStep(self, i, j);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 f930 	bl	80010dc <performNextTransitionStep>
			for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	2b13      	cmp	r3, #19
 8000e86:	dd95      	ble.n	8000db4 <app_dmx_preset_process+0x64>
					}
				}
			}
			if(app_model_model.presets[i].transitionDoneCnt >= app_model_model.presets[i].transitionEnableSize){	/*All transitions are performed*/
 8000e88:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000e92:	fb01 f303 	mul.w	r3, r1, r3
 8000e96:	4413      	add	r3, r2
 8000e98:	699a      	ldr	r2, [r3, #24]
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000e9c:	6859      	ldr	r1, [r3, #4]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8000ea4:	fb00 f303 	mul.w	r3, r0, r3
 8000ea8:	440b      	add	r3, r1
 8000eaa:	69db      	ldr	r3, [r3, #28]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d32c      	bcc.n	8000f0a <app_dmx_preset_process+0x1ba>
				app_model_model.presets[i].transitionDoneCnt = 0;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000eba:	fb01 f303 	mul.w	r3, r1, r3
 8000ebe:	4413      	add	r3, r2
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
				app_model_model.presets[i].trigger = false;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000ece:	fb01 f303 	mul.w	r3, r1, r3
 8000ed2:	4413      	add	r3, r2
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	74da      	strb	r2, [r3, #19]
				app_model_model.presets[i].relTime_ms = 0;
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000ee2:	fb01 f303 	mul.w	r3, r1, r3
 8000ee6:	4413      	add	r3, r2
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
				memset(app_model_model.presets[i].presetTransitionStatus, 0, sizeof(app_model_model.presets[i].presetTransitionStatus));
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <app_dmx_preset_process+0x1e0>)
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000ef6:	fb01 f303 	mul.w	r3, r1, r3
 8000efa:	4413      	add	r3, r2
 8000efc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000f00:	2228      	movs	r2, #40	; 0x28
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f00b fbf6 	bl	800c6f6 <memset>
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b09      	cmp	r3, #9
 8000f14:	f77f af34 	ble.w	8000d80 <app_dmx_preset_process+0x30>
			}
		}
	}
	/*End of everything you want to do*/
	cyclicFlag = false;
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <app_dmx_preset_process+0x1dc>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	e002      	b.n	8000f26 <app_dmx_preset_process+0x1d6>
	if(!self->enable) return;
 8000f20:	bf00      	nop
 8000f22:	e000      	b.n	8000f26 <app_dmx_preset_process+0x1d6>
	if(!cyclicFlag) return;
 8000f24:	bf00      	nop
}
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20001aff 	.word	0x20001aff
 8000f30:	200010a0 	.word	0x200010a0

08000f34 <app_dmx_preset_cyclic1ms>:

void app_dmx_preset_cyclic1ms(eal_task_Task *self, bool stat){
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <app_dmx_preset_cyclic1ms+0x20>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20001aff 	.word	0x20001aff

08000f58 <app_dmx_preset_receiveMsg>:

void app_dmx_preset_receiveMsg(eal_task_Task *self, msg_Message *message){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	if(message->type == app_cfg_DMX_PRESET_MSG){
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	791b      	ldrb	r3, [r3, #4]
 8000f66:	2b50      	cmp	r3, #80	; 0x50
 8000f68:	f040 80b2 	bne.w	80010d0 <app_dmx_preset_receiveMsg+0x178>
		/*Action parsing*/
		if(msg_isAction(message)){
 8000f6c:	6838      	ldr	r0, [r7, #0]
 8000f6e:	f008 fad6 	bl	800951e <msg_isAction>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80ab 	beq.w	80010d0 <app_dmx_preset_receiveMsg+0x178>
			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f82:	83fb      	strh	r3, [r7, #30]
			if(APP_CFG_IS_INDEX_IN_RANGE(idx, app_cfg_dmx_preset_TRIGGER_PRESET_OFFSET_IDX, app_cfg_dmx_preset_TRIGGER_PRESET_OFFSET_IDX+app_cfg_NMBR_PRESETS)){
 8000f84:	8bfb      	ldrh	r3, [r7, #30]
 8000f86:	2b09      	cmp	r3, #9
 8000f88:	f200 80a2 	bhi.w	80010d0 <app_dmx_preset_receiveMsg+0x178>
				if((message->value == app_cfg_dmx_preset_TRIGGER_ENABLE) && (app_model_model.presets[idx].trigger == false)) {	/*Can be triggered only once*/
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f92:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d154      	bne.n	8001044 <app_dmx_preset_receiveMsg+0xec>
 8000f9a:	4b4f      	ldr	r3, [pc, #316]	; (80010d8 <app_dmx_preset_receiveMsg+0x180>)
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	8bfb      	ldrh	r3, [r7, #30]
 8000fa0:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000fa4:	fb01 f303 	mul.w	r3, r1, r3
 8000fa8:	4413      	add	r3, r2
 8000faa:	7cdb      	ldrb	r3, [r3, #19]
 8000fac:	f083 0301 	eor.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d046      	beq.n	8001044 <app_dmx_preset_receiveMsg+0xec>
					app_model_model.presets[idx].trigger = true;
 8000fb6:	4b48      	ldr	r3, [pc, #288]	; (80010d8 <app_dmx_preset_receiveMsg+0x180>)
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	8bfb      	ldrh	r3, [r7, #30]
 8000fbc:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000fc0:	fb01 f303 	mul.w	r3, r1, r3
 8000fc4:	4413      	add	r3, r2
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	74da      	strb	r2, [r3, #19]
					app_model_model.presets[idx].relTime_ms = 0;
 8000fca:	4b43      	ldr	r3, [pc, #268]	; (80010d8 <app_dmx_preset_receiveMsg+0x180>)
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	8bfb      	ldrh	r3, [r7, #30]
 8000fd0:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000fd4:	fb01 f303 	mul.w	r3, r1, r3
 8000fd8:	4413      	add	r3, r2
 8000fda:	2200      	movs	r2, #0
 8000fdc:	615a      	str	r2, [r3, #20]
					app_model_model.presets[idx].transitionDoneCnt = 0;
 8000fde:	4b3e      	ldr	r3, [pc, #248]	; (80010d8 <app_dmx_preset_receiveMsg+0x180>)
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	8bfb      	ldrh	r3, [r7, #30]
 8000fe4:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000fe8:	fb01 f303 	mul.w	r3, r1, r3
 8000fec:	4413      	add	r3, r2
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
					memset(app_model_model.presets[idx].presetTransitionStatus, 0, sizeof(app_model_model.presets[idx].presetTransitionStatus));
 8000ff2:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <app_dmx_preset_receiveMsg+0x180>)
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	8bfb      	ldrh	r3, [r7, #30]
 8000ff8:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8000ffc:	fb01 f303 	mul.w	r3, r1, r3
 8001000:	4413      	add	r3, r2
 8001002:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001006:	2228      	movs	r2, #40	; 0x28
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f00b fb73 	bl	800c6f6 <memset>
					if(self->sendMsg != NULL){
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d05b      	beq.n	80010d0 <app_dmx_preset_receiveMsg+0x178>
						msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_EVENT(idx), app_cfg_dmx_preset_TRIGGER_ENABLE, 0, 0);
 8001018:	8bfb      	ldrh	r3, [r7, #30]
 800101a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800101e:	b29b      	uxth	r3, r3
 8001020:	82bb      	strh	r3, [r7, #20]
 8001022:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001026:	82fb      	strh	r3, [r7, #22]
 8001028:	2350      	movs	r3, #80	; 0x50
 800102a:	763b      	strb	r3, [r7, #24]
 800102c:	2300      	movs	r3, #0
 800102e:	767b      	strb	r3, [r7, #25]
 8001030:	2300      	movs	r3, #0
 8001032:	837b      	strh	r3, [r7, #26]
						self->sendMsg(self, &newMessage);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	f107 0214 	add.w	r2, r7, #20
 800103c:	4611      	mov	r1, r2
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	4798      	blx	r3
					if(self->sendMsg != NULL){
 8001042:	e045      	b.n	80010d0 <app_dmx_preset_receiveMsg+0x178>
					}
				}else{
					app_model_model.presets[idx].trigger = false;
 8001044:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <app_dmx_preset_receiveMsg+0x180>)
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	8bfb      	ldrh	r3, [r7, #30]
 800104a:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800104e:	fb01 f303 	mul.w	r3, r1, r3
 8001052:	4413      	add	r3, r2
 8001054:	2200      	movs	r2, #0
 8001056:	74da      	strb	r2, [r3, #19]
					app_model_model.presets[idx].relTime_ms = 0;
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <app_dmx_preset_receiveMsg+0x180>)
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	8bfb      	ldrh	r3, [r7, #30]
 800105e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001062:	fb01 f303 	mul.w	r3, r1, r3
 8001066:	4413      	add	r3, r2
 8001068:	2200      	movs	r2, #0
 800106a:	615a      	str	r2, [r3, #20]
					app_model_model.presets[idx].transitionDoneCnt = 0;
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <app_dmx_preset_receiveMsg+0x180>)
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	8bfb      	ldrh	r3, [r7, #30]
 8001072:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001076:	fb01 f303 	mul.w	r3, r1, r3
 800107a:	4413      	add	r3, r2
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
					memset(app_model_model.presets[idx].presetTransitionStatus, 0, sizeof(app_model_model.presets[idx].presetTransitionStatus));
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <app_dmx_preset_receiveMsg+0x180>)
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	8bfb      	ldrh	r3, [r7, #30]
 8001086:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800108a:	fb01 f303 	mul.w	r3, r1, r3
 800108e:	4413      	add	r3, r2
 8001090:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001094:	2228      	movs	r2, #40	; 0x28
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f00b fb2c 	bl	800c6f6 <memset>
					if(self->sendMsg != NULL){
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d014      	beq.n	80010d0 <app_dmx_preset_receiveMsg+0x178>
						msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_EVENT(idx), app_cfg_dmx_preset_TRIGGER_DISABLE, 0, 0);
 80010a6:	8bfb      	ldrh	r3, [r7, #30]
 80010a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	81bb      	strh	r3, [r7, #12]
 80010b0:	2300      	movs	r3, #0
 80010b2:	81fb      	strh	r3, [r7, #14]
 80010b4:	2350      	movs	r3, #80	; 0x50
 80010b6:	743b      	strb	r3, [r7, #16]
 80010b8:	2300      	movs	r3, #0
 80010ba:	747b      	strb	r3, [r7, #17]
 80010bc:	2300      	movs	r3, #0
 80010be:	827b      	strh	r3, [r7, #18]
						self->sendMsg(self, &newMessage);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	f107 020c 	add.w	r2, r7, #12
 80010c8:	4611      	mov	r1, r2
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	4798      	blx	r3
		/*Event parsing*/
		}else{

		}
	}
}
 80010ce:	e7ff      	b.n	80010d0 <app_dmx_preset_receiveMsg+0x178>
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200010a0 	.word	0x200010a0

080010dc <performNextTransitionStep>:

/*Helper*/
static void performNextTransitionStep(eal_task_Task *self, uint8_t preset, uint8_t transition){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	460b      	mov	r3, r1
 80010e6:	72fb      	strb	r3, [r7, #11]
 80010e8:	4613      	mov	r3, r2
 80010ea:	72bb      	strb	r3, [r7, #10]
	float actualTransitionTime = (float)(app_model_model.presets[preset].relTime_ms - app_model_model.presets[preset].presetTransitionSettings[transition].transDelay_ms);
 80010ec:	4ba8      	ldr	r3, [pc, #672]	; (8001390 <performNextTransitionStep+0x2b4>)
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	7afb      	ldrb	r3, [r7, #11]
 80010f2:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80010f6:	fb01 f303 	mul.w	r3, r1, r3
 80010fa:	4413      	add	r3, r2
 80010fc:	695a      	ldr	r2, [r3, #20]
 80010fe:	4ba4      	ldr	r3, [pc, #656]	; (8001390 <performNextTransitionStep+0x2b4>)
 8001100:	6859      	ldr	r1, [r3, #4]
 8001102:	7afb      	ldrb	r3, [r7, #11]
 8001104:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8001108:	fb00 f303 	mul.w	r3, r0, r3
 800110c:	4419      	add	r1, r3
 800110e:	7abb      	ldrb	r3, [r7, #10]
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	440b      	add	r3, r1
 8001114:	3328      	adds	r3, #40	; 0x28
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001122:	edc7 7a08 	vstr	s15, [r7, #32]
	uint16_t newVal = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(app_model_model.presets[preset].presetTransitionSettings[transition].transTime_ms == 0){
 800112a:	4b99      	ldr	r3, [pc, #612]	; (8001390 <performNextTransitionStep+0x2b4>)
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	7afb      	ldrb	r3, [r7, #11]
 8001130:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001134:	fb01 f303 	mul.w	r3, r1, r3
 8001138:	441a      	add	r2, r3
 800113a:	7abb      	ldrb	r3, [r7, #10]
 800113c:	3302      	adds	r3, #2
 800113e:	011b      	lsls	r3, r3, #4
 8001140:	4413      	add	r3, r2
 8001142:	3304      	adds	r3, #4
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d128      	bne.n	800119c <performNextTransitionStep+0xc0>
		newVal = app_model_model.presets[preset].presetTransitionSettings[transition].dmxEndVal;
 800114a:	4b91      	ldr	r3, [pc, #580]	; (8001390 <performNextTransitionStep+0x2b4>)
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	7afb      	ldrb	r3, [r7, #11]
 8001150:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001154:	fb01 f303 	mul.w	r3, r1, r3
 8001158:	441a      	add	r2, r3
 800115a:	7abb      	ldrb	r3, [r7, #10]
 800115c:	3302      	adds	r3, #2
 800115e:	011b      	lsls	r3, r3, #4
 8001160:	4413      	add	r3, r2
 8001162:	3303      	adds	r3, #3
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	84fb      	strh	r3, [r7, #38]	; 0x26
		++app_model_model.presets[preset].transitionDoneCnt;
 8001168:	4b89      	ldr	r3, [pc, #548]	; (8001390 <performNextTransitionStep+0x2b4>)
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	7afb      	ldrb	r3, [r7, #11]
 800116e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001172:	fb01 f303 	mul.w	r3, r1, r3
 8001176:	4413      	add	r3, r2
 8001178:	699a      	ldr	r2, [r3, #24]
 800117a:	3201      	adds	r2, #1
 800117c:	619a      	str	r2, [r3, #24]
		app_model_model.presets[preset].presetTransitionStatus[transition].transStep = app_dmx_preset_cfg_TRANS_STEP_DONE;
 800117e:	4b84      	ldr	r3, [pc, #528]	; (8001390 <performNextTransitionStep+0x2b4>)
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	7afb      	ldrb	r3, [r7, #11]
 8001184:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001188:	fb01 f303 	mul.w	r3, r1, r3
 800118c:	441a      	add	r2, r3
 800118e:	7abb      	ldrb	r3, [r7, #10]
 8001190:	33b0      	adds	r3, #176	; 0xb0
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	2202      	movs	r2, #2
 8001198:	705a      	strb	r2, [r3, #1]
 800119a:	e099      	b.n	80012d0 <performNextTransitionStep+0x1f4>
	}else{
		//TODO: Perform different ramps
		float diff = (float)((float)app_model_model.presets[preset].presetTransitionSettings[transition].dmxEndVal - (float)app_model_model.presets[preset].presetTransitionSettings[transition].dmxStartVal);
 800119c:	4b7c      	ldr	r3, [pc, #496]	; (8001390 <performNextTransitionStep+0x2b4>)
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	7afb      	ldrb	r3, [r7, #11]
 80011a2:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80011a6:	fb01 f303 	mul.w	r3, r1, r3
 80011aa:	441a      	add	r2, r3
 80011ac:	7abb      	ldrb	r3, [r7, #10]
 80011ae:	3302      	adds	r3, #2
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	4413      	add	r3, r2
 80011b4:	3303      	adds	r3, #3
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	ee07 3a90 	vmov	s15, r3
 80011bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011c0:	4b73      	ldr	r3, [pc, #460]	; (8001390 <performNextTransitionStep+0x2b4>)
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	7afb      	ldrb	r3, [r7, #11]
 80011c6:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80011ca:	fb01 f303 	mul.w	r3, r1, r3
 80011ce:	441a      	add	r2, r3
 80011d0:	7abb      	ldrb	r3, [r7, #10]
 80011d2:	3302      	adds	r3, #2
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	4413      	add	r3, r2
 80011d8:	3302      	adds	r3, #2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e8:	edc7 7a07 	vstr	s15, [r7, #28]
		float actualVal = (diff/((float)app_model_model.presets[preset].presetTransitionSettings[transition].transTime_ms)*actualTransitionTime) + (float)app_model_model.presets[preset].presetTransitionSettings[transition].dmxStartVal;
 80011ec:	4b68      	ldr	r3, [pc, #416]	; (8001390 <performNextTransitionStep+0x2b4>)
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	7afb      	ldrb	r3, [r7, #11]
 80011f2:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80011f6:	fb01 f303 	mul.w	r3, r1, r3
 80011fa:	441a      	add	r2, r3
 80011fc:	7abb      	ldrb	r3, [r7, #10]
 80011fe:	3302      	adds	r3, #2
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	4413      	add	r3, r2
 8001204:	3304      	adds	r3, #4
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001210:	edd7 6a07 	vldr	s13, [r7, #28]
 8001214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001218:	edd7 7a08 	vldr	s15, [r7, #32]
 800121c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001220:	4b5b      	ldr	r3, [pc, #364]	; (8001390 <performNextTransitionStep+0x2b4>)
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	7afb      	ldrb	r3, [r7, #11]
 8001226:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800122a:	fb01 f303 	mul.w	r3, r1, r3
 800122e:	441a      	add	r2, r3
 8001230:	7abb      	ldrb	r3, [r7, #10]
 8001232:	3302      	adds	r3, #2
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	4413      	add	r3, r2
 8001238:	3302      	adds	r3, #2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001248:	edc7 7a06 	vstr	s15, [r7, #24]
		newVal = (uint16_t)actualVal;
 800124c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001254:	edc7 7a01 	vstr	s15, [r7, #4]
 8001258:	88bb      	ldrh	r3, [r7, #4]
 800125a:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(newVal >= app_model_model.presets[preset].presetTransitionSettings[transition].dmxEndVal){
 800125c:	4b4c      	ldr	r3, [pc, #304]	; (8001390 <performNextTransitionStep+0x2b4>)
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	7afb      	ldrb	r3, [r7, #11]
 8001262:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001266:	fb01 f303 	mul.w	r3, r1, r3
 800126a:	441a      	add	r2, r3
 800126c:	7abb      	ldrb	r3, [r7, #10]
 800126e:	3302      	adds	r3, #2
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	4413      	add	r3, r2
 8001274:	3303      	adds	r3, #3
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b29b      	uxth	r3, r3
 800127a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800127c:	429a      	cmp	r2, r3
 800127e:	d327      	bcc.n	80012d0 <performNextTransitionStep+0x1f4>
			newVal = app_model_model.presets[preset].presetTransitionSettings[transition].dmxEndVal;
 8001280:	4b43      	ldr	r3, [pc, #268]	; (8001390 <performNextTransitionStep+0x2b4>)
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	7afb      	ldrb	r3, [r7, #11]
 8001286:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800128a:	fb01 f303 	mul.w	r3, r1, r3
 800128e:	441a      	add	r2, r3
 8001290:	7abb      	ldrb	r3, [r7, #10]
 8001292:	3302      	adds	r3, #2
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	4413      	add	r3, r2
 8001298:	3303      	adds	r3, #3
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	84fb      	strh	r3, [r7, #38]	; 0x26
			++app_model_model.presets[preset].transitionDoneCnt;
 800129e:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <performNextTransitionStep+0x2b4>)
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	7afb      	ldrb	r3, [r7, #11]
 80012a4:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80012a8:	fb01 f303 	mul.w	r3, r1, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	699a      	ldr	r2, [r3, #24]
 80012b0:	3201      	adds	r2, #1
 80012b2:	619a      	str	r2, [r3, #24]
			app_model_model.presets[preset].presetTransitionStatus[transition].transStep = app_dmx_preset_cfg_TRANS_STEP_DONE;
 80012b4:	4b36      	ldr	r3, [pc, #216]	; (8001390 <performNextTransitionStep+0x2b4>)
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	7afb      	ldrb	r3, [r7, #11]
 80012ba:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80012be:	fb01 f303 	mul.w	r3, r1, r3
 80012c2:	441a      	add	r2, r3
 80012c4:	7abb      	ldrb	r3, [r7, #10]
 80012c6:	33b0      	adds	r3, #176	; 0xb0
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	2202      	movs	r2, #2
 80012ce:	705a      	strb	r2, [r3, #1]
		}
	}
	//If the if request is enabled 0 values can't be send because the comparison will be never true
//	if(newVal != app_model_model.presets[preset].presetTransitionStatus[transition].actualVal) {
		app_model_model.presets[preset].presetTransitionStatus[transition].actualVal = newVal;
 80012d0:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <performNextTransitionStep+0x2b4>)
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	7afb      	ldrb	r3, [r7, #11]
 80012d6:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80012da:	fb01 f303 	mul.w	r3, r1, r3
 80012de:	4413      	add	r3, r2
 80012e0:	7aba      	ldrb	r2, [r7, #10]
 80012e2:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80012e4:	b2c9      	uxtb	r1, r1
 80012e6:	32b0      	adds	r2, #176	; 0xb0
 80012e8:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
		if(self->sendMsg != NULL){
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d02d      	beq.n	8001350 <performNextTransitionStep+0x274>
			msg_Message newMessage = msg_LITERAL(app_cfg_DMX_MSG, msg_ACTION(app_model_model.presets[preset].presetTransitionSettings[transition].dmxCh), app_model_model.presets[preset].presetTransitionStatus[transition].actualVal, 0, 0);
 80012f4:	4b26      	ldr	r3, [pc, #152]	; (8001390 <performNextTransitionStep+0x2b4>)
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	7afb      	ldrb	r3, [r7, #11]
 80012fa:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80012fe:	fb01 f303 	mul.w	r3, r1, r3
 8001302:	441a      	add	r2, r3
 8001304:	7abb      	ldrb	r3, [r7, #10]
 8001306:	3302      	adds	r3, #2
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	4413      	add	r3, r2
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001316:	b29b      	uxth	r3, r3
 8001318:	823b      	strh	r3, [r7, #16]
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <performNextTransitionStep+0x2b4>)
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	7afb      	ldrb	r3, [r7, #11]
 8001320:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001324:	fb01 f303 	mul.w	r3, r1, r3
 8001328:	4413      	add	r3, r2
 800132a:	7aba      	ldrb	r2, [r7, #10]
 800132c:	32b0      	adds	r2, #176	; 0xb0
 800132e:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8001332:	b21b      	sxth	r3, r3
 8001334:	827b      	strh	r3, [r7, #18]
 8001336:	2344      	movs	r3, #68	; 0x44
 8001338:	753b      	strb	r3, [r7, #20]
 800133a:	2300      	movs	r3, #0
 800133c:	757b      	strb	r3, [r7, #21]
 800133e:	2300      	movs	r3, #0
 8001340:	82fb      	strh	r3, [r7, #22]
			self->sendMsg(self, &newMessage);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	f107 0210 	add.w	r2, r7, #16
 800134a:	4611      	mov	r1, r2
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	4798      	blx	r3
		}
		if(app_model_model.presets[preset].presetTransitionStatus[transition].transStep == app_dmx_preset_cfg_TRANS_STEP_DONE) app_model_model.presets[preset].presetTransitionStatus[transition].actualVal = 0;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <performNextTransitionStep+0x2b4>)
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	7afb      	ldrb	r3, [r7, #11]
 8001356:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800135a:	fb01 f303 	mul.w	r3, r1, r3
 800135e:	441a      	add	r2, r3
 8001360:	7abb      	ldrb	r3, [r7, #10]
 8001362:	33b0      	adds	r3, #176	; 0xb0
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	785b      	ldrb	r3, [r3, #1]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d10c      	bne.n	8001388 <performNextTransitionStep+0x2ac>
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <performNextTransitionStep+0x2b4>)
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	7afb      	ldrb	r3, [r7, #11]
 8001374:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001378:	fb01 f303 	mul.w	r3, r1, r3
 800137c:	4413      	add	r3, r2
 800137e:	7aba      	ldrb	r2, [r7, #10]
 8001380:	32b0      	adds	r2, #176	; 0xb0
 8001382:	2100      	movs	r1, #0
 8001384:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
//	}
}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	; 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200010a0 	.word	0x200010a0

08001394 <app_eeprom_init>:
static void storeFootswitch(uint16_t pageAddress, app_footcontrol_cfg_GpioCfg *footswitch);
static void readFootswitch(uint16_t pageAddress, app_footcontrol_cfg_GpioCfg *footswitch);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_eeprom_init(eal_task_Task *self){
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	eeprom_registerCallback(&eepromDev1, eepromCallback);
 800139c:	490f      	ldr	r1, [pc, #60]	; (80013dc <app_eeprom_init+0x48>)
 800139e:	4810      	ldr	r0, [pc, #64]	; (80013e0 <app_eeprom_init+0x4c>)
 80013a0:	f007 fdf2 	bl	8008f88 <eeprom_registerCallback>
	eeprom_init(&eepromDev1);
 80013a4:	480e      	ldr	r0, [pc, #56]	; (80013e0 <app_eeprom_init+0x4c>)
 80013a6:	f007 fdfd 	bl	8008fa4 <eeprom_init>
	secondTimer = 0;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <app_eeprom_init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	801a      	strh	r2, [r3, #0]
	if(readVersion() != EE_FW_VERSION){
 80013b0:	f000 f8b0 	bl	8001514 <readVersion>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f240 1303 	movw	r3, #259	; 0x103
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d007      	beq.n	80013ce <app_eeprom_init+0x3a>
		erase();
 80013be:	f000 f8d1 	bl	8001564 <erase>
		writeVersion(EE_FW_VERSION);
 80013c2:	f240 1003 	movw	r0, #259	; 0x103
 80013c6:	f000 f879 	bl	80014bc <writeVersion>
		storeModel();
 80013ca:	f000 f915 	bl	80015f8 <storeModel>
	}
	readModel();
 80013ce:	f000 f959 	bl	8001684 <readModel>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	08001a19 	.word	0x08001a19
 80013e0:	200000b8 	.word	0x200000b8
 80013e4:	20001b04 	.word	0x20001b04

080013e8 <app_eeprom_process>:

void app_eeprom_process(eal_task_Task *self){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	f083 0301 	eor.w	r3, r3, #1
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d123      	bne.n	8001446 <app_eeprom_process+0x5e>
	if(!cyclicFlag) return;
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <app_eeprom_process+0x6c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	f083 0301 	eor.w	r3, r3, #1
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d11d      	bne.n	800144a <app_eeprom_process+0x62>
	if(++secondTimer == 1000){
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <app_eeprom_process+0x70>)
 8001410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001414:	b29b      	uxth	r3, r3
 8001416:	3301      	adds	r3, #1
 8001418:	b29b      	uxth	r3, r3
 800141a:	b21a      	sxth	r2, r3
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <app_eeprom_process+0x70>)
 800141e:	801a      	strh	r2, [r3, #0]
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <app_eeprom_process+0x70>)
 8001422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800142a:	d108      	bne.n	800143e <app_eeprom_process+0x56>
		secondTimer = 0;
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <app_eeprom_process+0x70>)
 800142e:	2200      	movs	r2, #0
 8001430:	801a      	strh	r2, [r3, #0]
		if(app_model_model.dirty) storeModel();
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <app_eeprom_process+0x74>)
 8001434:	7c1b      	ldrb	r3, [r3, #16]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <app_eeprom_process+0x56>
 800143a:	f000 f8dd 	bl	80015f8 <storeModel>
	}

	cyclicFlag = false;
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <app_eeprom_process+0x6c>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
 8001444:	e002      	b.n	800144c <app_eeprom_process+0x64>
	if(!self->enable) return;
 8001446:	bf00      	nop
 8001448:	e000      	b.n	800144c <app_eeprom_process+0x64>
	if(!cyclicFlag) return;
 800144a:	bf00      	nop
}
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20001b00 	.word	0x20001b00
 8001458:	20001b04 	.word	0x20001b04
 800145c:	200010a0 	.word	0x200010a0

08001460 <app_eeprom_cyclic1ms>:

void app_eeprom_cyclic1ms(eal_task_Task *self, bool stat){
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <app_eeprom_cyclic1ms+0x3c>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
	if(internalTimer > 0)--internalTimer;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <app_eeprom_cyclic1ms+0x40>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	b21b      	sxth	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	dd08      	ble.n	800148e <app_eeprom_cyclic1ms+0x2e>
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <app_eeprom_cyclic1ms+0x40>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	b21b      	sxth	r3, r3
 8001482:	b29b      	uxth	r3, r3
 8001484:	3b01      	subs	r3, #1
 8001486:	b29b      	uxth	r3, r3
 8001488:	b21a      	sxth	r2, r3
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <app_eeprom_cyclic1ms+0x40>)
 800148c:	801a      	strh	r2, [r3, #0]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20001b00 	.word	0x20001b00
 80014a0:	20001b02 	.word	0x20001b02

080014a4 <app_eeprom_receiveMsg>:

void app_eeprom_receiveMsg(eal_task_Task *self, msg_Message *message){
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <writeVersion>:
/* Store/Read ----------------------------------------------------------------------*/
static void writeVersion(uint32_t version){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	uint8_t versionArray[4] = {0};
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
	versionArray[0] = ((version >> 24) & 0xFF);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	0e1b      	lsrs	r3, r3, #24
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	733b      	strb	r3, [r7, #12]
	versionArray[1] = ((version >> 16) & 0xFF);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	0c1b      	lsrs	r3, r3, #16
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	737b      	strb	r3, [r7, #13]
	versionArray[2] = ((version >> 8) & 0xFF);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	73bb      	strb	r3, [r7, #14]
	versionArray[3] = ((version >> 0) & 0xFF);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	73fb      	strb	r3, [r7, #15]
	if(!writeUntilLastEEPROMWriteFinished()) return;
 80014e6:	f000 fa75 	bl	80019d4 <writeUntilLastEEPROMWriteFinished>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f083 0301 	eor.w	r3, r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d107      	bne.n	8001506 <writeVersion+0x4a>
	eeprom_write(&eepromDev1, 0, versionArray, 4);
 80014f6:	f107 020c 	add.w	r2, r7, #12
 80014fa:	2304      	movs	r3, #4
 80014fc:	2100      	movs	r1, #0
 80014fe:	4804      	ldr	r0, [pc, #16]	; (8001510 <writeVersion+0x54>)
 8001500:	f007 fd63 	bl	8008fca <eeprom_write>
 8001504:	e000      	b.n	8001508 <writeVersion+0x4c>
	if(!writeUntilLastEEPROMWriteFinished()) return;
 8001506:	bf00      	nop
}
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200000b8 	.word	0x200000b8

08001514 <readVersion>:

static uint32_t readVersion(){
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
	uint8_t versionArray[4] = {0};
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
	if(!writeUntilLastEEPROMWriteFinished()) return 0;
 800151e:	f000 fa59 	bl	80019d4 <writeUntilLastEEPROMWriteFinished>
 8001522:	4603      	mov	r3, r0
 8001524:	f083 0301 	eor.w	r3, r3, #1
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <readVersion+0x1e>
 800152e:	2300      	movs	r3, #0
 8001530:	e011      	b.n	8001556 <readVersion+0x42>
	eeprom_read(&eepromDev1, 0, versionArray, 4);
 8001532:	463a      	mov	r2, r7
 8001534:	2304      	movs	r3, #4
 8001536:	2100      	movs	r1, #0
 8001538:	4809      	ldr	r0, [pc, #36]	; (8001560 <readVersion+0x4c>)
 800153a:	f007 fd68 	bl	800900e <eeprom_read>
	uint32_t version = (versionArray[0] << 24)|(versionArray[1] << 16)|(versionArray[2] << 8)|(versionArray[3] << 0);
 800153e:	783b      	ldrb	r3, [r7, #0]
 8001540:	061a      	lsls	r2, r3, #24
 8001542:	787b      	ldrb	r3, [r7, #1]
 8001544:	041b      	lsls	r3, r3, #16
 8001546:	431a      	orrs	r2, r3
 8001548:	78bb      	ldrb	r3, [r7, #2]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	4313      	orrs	r3, r2
 800154e:	78fa      	ldrb	r2, [r7, #3]
 8001550:	4313      	orrs	r3, r2
 8001552:	607b      	str	r3, [r7, #4]
	return version;
 8001554:	687b      	ldr	r3, [r7, #4]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200000b8 	.word	0x200000b8

08001564 <erase>:

static void erase(){
 8001564:	b580      	push	{r7, lr}
 8001566:	b0c4      	sub	sp, #272	; 0x110
 8001568:	af00      	add	r7, sp, #0
	app_eeprom_Page newPage;
	uint8_t eraseTxData = 0x00;
 800156a:	2300      	movs	r3, #0
 800156c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	for(int i = 0; i < app_eeprom_PAGE_SIZE; ++i) newPage.data[i] = eraseTxData;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001576:	e00b      	b.n	8001590 <erase+0x2c>
 8001578:	1d3a      	adds	r2, r7, #4
 800157a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800157e:	4413      	add	r3, r2
 8001580:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800158a:	3301      	adds	r3, #1
 800158c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001594:	2bff      	cmp	r3, #255	; 0xff
 8001596:	ddef      	ble.n	8001578 <erase+0x14>
	for(int i = 0; i < app_eeprom_PAGE_NMBR; ++i){
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800159e:	e01d      	b.n	80015dc <erase+0x78>
		if(!writeUntilLastEEPROMWriteFinished())return;
 80015a0:	f000 fa18 	bl	80019d4 <writeUntilLastEEPROMWriteFinished>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f083 0301 	eor.w	r3, r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d11b      	bne.n	80015e8 <erase+0x84>
		newPage.addr = i*app_eeprom_PAGE_SIZE;
 80015b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
		eeprom_write(&eepromDev1, newPage.addr, newPage.data, app_eeprom_PAGE_SIZE);
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	f8b3 1100 	ldrh.w	r1, [r3, #256]	; 0x100
 80015c6:	1d3a      	adds	r2, r7, #4
 80015c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015cc:	4809      	ldr	r0, [pc, #36]	; (80015f4 <erase+0x90>)
 80015ce:	f007 fcfc 	bl	8008fca <eeprom_write>
	for(int i = 0; i < app_eeprom_PAGE_NMBR; ++i){
 80015d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015d6:	3301      	adds	r3, #1
 80015d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80015dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015e4:	dbdc      	blt.n	80015a0 <erase+0x3c>
 80015e6:	e000      	b.n	80015ea <erase+0x86>
		if(!writeUntilLastEEPROMWriteFinished())return;
 80015e8:	bf00      	nop
	}
}
 80015ea:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200000b8 	.word	0x200000b8

080015f8 <storeModel>:

static void storeModel(){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
	/*Store presets*/
	uint16_t pageAddress = app_eeprom_PRESET_START_PAGE*app_eeprom_PAGE_SIZE;
 80015fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001602:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8001604:	2300      	movs	r3, #0
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	e01b      	b.n	8001642 <storeModel+0x4a>
		if(!writeUntilLastEEPROMWriteFinished()) return;
 800160a:	f000 f9e3 	bl	80019d4 <writeUntilLastEEPROMWriteFinished>
 800160e:	4603      	mov	r3, r0
 8001610:	f083 0301 	eor.w	r3, r3, #1
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d12c      	bne.n	8001674 <storeModel+0x7c>
		storePreset(pageAddress, &app_model_model.presets[i]);
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <storeModel+0x88>)
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001624:	fb01 f303 	mul.w	r3, r1, r3
 8001628:	441a      	add	r2, r3
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	4611      	mov	r1, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f86c 	bl	800170c <storePreset>
		pageAddress += (app_eeprom_PAGES_PER_PRESET*app_eeprom_PAGE_SIZE);
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800163a:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2b09      	cmp	r3, #9
 8001646:	dde0      	ble.n	800160a <storeModel+0x12>
	}
	/*Store footswitch*/
	pageAddress = app_eeprom_FOOTSWITCH_START_PAGE*app_eeprom_PAGE_SIZE;
 8001648:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 800164c:	80fb      	strh	r3, [r7, #6]
	if(!writeUntilLastEEPROMWriteFinished()) return;
 800164e:	f000 f9c1 	bl	80019d4 <writeUntilLastEEPROMWriteFinished>
 8001652:	4603      	mov	r3, r0
 8001654:	f083 0301 	eor.w	r3, r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <storeModel+0x80>
	storeFootswitch(pageAddress, &app_model_model.footswitches[0]);
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <storeModel+0x88>)
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f934 	bl	80018d4 <storeFootswitch>
	app_model_model.dirty = false;
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <storeModel+0x88>)
 800166e:	2200      	movs	r2, #0
 8001670:	741a      	strb	r2, [r3, #16]
 8001672:	e002      	b.n	800167a <storeModel+0x82>
		if(!writeUntilLastEEPROMWriteFinished()) return;
 8001674:	bf00      	nop
 8001676:	e000      	b.n	800167a <storeModel+0x82>
	if(!writeUntilLastEEPROMWriteFinished()) return;
 8001678:	bf00      	nop
}
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200010a0 	.word	0x200010a0

08001684 <readModel>:

static void readModel(){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
	/*Read presets*/
	uint16_t pageAddress = app_eeprom_PRESET_START_PAGE*app_eeprom_PAGE_SIZE;
 800168a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168e:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8001690:	2300      	movs	r3, #0
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	e01b      	b.n	80016ce <readModel+0x4a>
		if(!writeUntilLastEEPROMWriteFinished()) return;
 8001696:	f000 f99d 	bl	80019d4 <writeUntilLastEEPROMWriteFinished>
 800169a:	4603      	mov	r3, r0
 800169c:	f083 0301 	eor.w	r3, r3, #1
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d129      	bne.n	80016fa <readModel+0x76>
		readPreset(pageAddress, &app_model_model.presets[i]);
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <readModel+0x84>)
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80016b0:	fb01 f303 	mul.w	r3, r1, r3
 80016b4:	441a      	add	r2, r3
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f898 	bl	80017f0 <readPreset>
		pageAddress += (app_eeprom_PAGES_PER_PRESET*app_eeprom_PAGE_SIZE);
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80016c6:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	3301      	adds	r3, #1
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	2b09      	cmp	r3, #9
 80016d2:	dde0      	ble.n	8001696 <readModel+0x12>
	}
	/*Read footswitch*/
	pageAddress = app_eeprom_FOOTSWITCH_START_PAGE*app_eeprom_PAGE_SIZE;
 80016d4:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 80016d8:	80fb      	strh	r3, [r7, #6]
	if(!writeUntilLastEEPROMWriteFinished()) return;
 80016da:	f000 f97b 	bl	80019d4 <writeUntilLastEEPROMWriteFinished>
 80016de:	4603      	mov	r3, r0
 80016e0:	f083 0301 	eor.w	r3, r3, #1
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d109      	bne.n	80016fe <readModel+0x7a>
	readFootswitch(pageAddress, &app_model_model.footswitches[0]);
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <readModel+0x84>)
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f92c 	bl	8001950 <readFootswitch>
 80016f8:	e002      	b.n	8001700 <readModel+0x7c>
		if(!writeUntilLastEEPROMWriteFinished()) return;
 80016fa:	bf00      	nop
 80016fc:	e000      	b.n	8001700 <readModel+0x7c>
	if(!writeUntilLastEEPROMWriteFinished()) return;
 80016fe:	bf00      	nop
}
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200010a0 	.word	0x200010a0

0800170c <storePreset>:

static void storePreset(uint16_t pageAddress, app_dmx_preset_cfg_Preset *preset){
 800170c:	b580      	push	{r7, lr}
 800170e:	f5ad 7d66 	sub.w	sp, sp, #920	; 0x398
 8001712:	af00      	add	r7, sp, #0
 8001714:	4602      	mov	r2, r0
 8001716:	463b      	mov	r3, r7
 8001718:	6019      	str	r1, [r3, #0]
 800171a:	1dbb      	adds	r3, r7, #6
 800171c:	801a      	strh	r2, [r3, #0]
	/*Move struct into byte array*/
	uint8_t storage[app_dmx_preset_cfg_PRESET_SIZE] = {0};
 800171e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001722:	4618      	mov	r0, r3
 8001724:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8001728:	461a      	mov	r2, r3
 800172a:	2100      	movs	r1, #0
 800172c:	f00a ffe3 	bl	800c6f6 <memset>
	memcpy(storage, preset, app_dmx_preset_cfg_PRESET_SIZE);
 8001730:	463b      	mov	r3, r7
 8001732:	f507 7004 	add.w	r0, r7, #528	; 0x210
 8001736:	f44f 72c4 	mov.w	r2, #392	; 0x188
 800173a:	6819      	ldr	r1, [r3, #0]
 800173c:	f00a ffd0 	bl	800c6e0 <memcpy>
	/*Generate pages to store*/
	app_eeprom_Page newPage[2];
	memset(newPage[0].data, 0, app_eeprom_PAGE_SIZE); /*Clean data*/
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f00a ffd3 	bl	800c6f6 <memset>
	memset(newPage[1].data, 0, app_eeprom_PAGE_SIZE); /*Clean data*/
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	f503 7381 	add.w	r3, r3, #258	; 0x102
 8001758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f00a ffc9 	bl	800c6f6 <memset>
	newPage[0].addr = pageAddress;
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	1dba      	adds	r2, r7, #6
 800176a:	8812      	ldrh	r2, [r2, #0]
 800176c:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	newPage[1].addr = pageAddress + app_eeprom_PAGE_SIZE;
 8001770:	1dbb      	adds	r3, r7, #6
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001778:	b29a      	uxth	r2, r3
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
	memcpy(newPage[0].data, &storage[0], app_eeprom_PAGE_SIZE);
 8001782:	f107 020c 	add.w	r2, r7, #12
 8001786:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001792:	461a      	mov	r2, r3
 8001794:	f00a ffa4 	bl	800c6e0 <memcpy>
	memcpy(newPage[1].data, &storage[app_eeprom_PAGE_SIZE], (app_dmx_preset_cfg_PRESET_SIZE - app_eeprom_PAGE_SIZE));
 8001798:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800179c:	f503 7180 	add.w	r1, r3, #256	; 0x100
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	f503 7381 	add.w	r3, r3, #258	; 0x102
 80017a8:	2288      	movs	r2, #136	; 0x88
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00a ff98 	bl	800c6e0 <memcpy>
	eeprom_write(&eepromDev1, newPage[0].addr, newPage[0].data, app_eeprom_PAGE_SIZE);
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	f8b3 1100 	ldrh.w	r1, [r3, #256]	; 0x100
 80017b8:	f107 020c 	add.w	r2, r7, #12
 80017bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c0:	480a      	ldr	r0, [pc, #40]	; (80017ec <storePreset+0xe0>)
 80017c2:	f007 fc02 	bl	8008fca <eeprom_write>
	eeprom_write(&eepromDev1, newPage[1].addr, newPage[1].data, app_eeprom_PAGE_SIZE);
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	f8b3 1202 	ldrh.w	r1, [r3, #514]	; 0x202
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	f503 7281 	add.w	r2, r3, #258	; 0x102
 80017d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017da:	4804      	ldr	r0, [pc, #16]	; (80017ec <storePreset+0xe0>)
 80017dc:	f007 fbf5 	bl	8008fca <eeprom_write>
}
 80017e0:	bf00      	nop
 80017e2:	f507 7766 	add.w	r7, r7, #920	; 0x398
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200000b8 	.word	0x200000b8

080017f0 <readPreset>:

static void readPreset(uint16_t pageAddress, app_dmx_preset_cfg_Preset *preset){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	f5ad 7d66 	sub.w	sp, sp, #920	; 0x398
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4602      	mov	r2, r0
 80017fa:	463b      	mov	r3, r7
 80017fc:	6019      	str	r1, [r3, #0]
 80017fe:	1dbb      	adds	r3, r7, #6
 8001800:	801a      	strh	r2, [r3, #0]
	/*Generate pages to store*/
	app_eeprom_Page newPage[2];
	memset(newPage[0].data, 0, app_eeprom_PAGE_SIZE); /*Clean data*/
 8001802:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001806:	f44f 7280 	mov.w	r2, #256	; 0x100
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f00a ff72 	bl	800c6f6 <memset>
	memset(newPage[1].data, 0, app_eeprom_PAGE_SIZE); /*Clean data*/
 8001812:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001816:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800181a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800181e:	2100      	movs	r1, #0
 8001820:	4618      	mov	r0, r3
 8001822:	f00a ff68 	bl	800c6f6 <memset>
	newPage[0].addr = pageAddress;
 8001826:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800182a:	1dba      	adds	r2, r7, #6
 800182c:	8812      	ldrh	r2, [r2, #0]
 800182e:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	newPage[1].addr = pageAddress + app_eeprom_PAGE_SIZE;
 8001832:	1dbb      	adds	r3, r7, #6
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800183a:	b29a      	uxth	r2, r3
 800183c:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001840:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
	eeprom_read(&eepromDev1, newPage[0].addr, newPage[0].data, app_eeprom_PAGE_SIZE);
 8001844:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001848:	f8b3 1100 	ldrh.w	r1, [r3, #256]	; 0x100
 800184c:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8001850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001854:	481e      	ldr	r0, [pc, #120]	; (80018d0 <readPreset+0xe0>)
 8001856:	f007 fbda 	bl	800900e <eeprom_read>
	eeprom_read(&eepromDev1, newPage[1].addr, newPage[1].data, app_eeprom_PAGE_SIZE);
 800185a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800185e:	f8b3 1202 	ldrh.w	r1, [r3, #514]	; 0x202
 8001862:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001866:	f503 7281 	add.w	r2, r3, #258	; 0x102
 800186a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800186e:	4818      	ldr	r0, [pc, #96]	; (80018d0 <readPreset+0xe0>)
 8001870:	f007 fbcd 	bl	800900e <eeprom_read>
	uint8_t storage[app_dmx_preset_cfg_PRESET_SIZE] = {0};
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	4618      	mov	r0, r3
 800187a:	f44f 73c4 	mov.w	r3, #392	; 0x188
 800187e:	461a      	mov	r2, r3
 8001880:	2100      	movs	r1, #0
 8001882:	f00a ff38 	bl	800c6f6 <memset>
	memcpy(&storage[0], newPage[0].data, app_eeprom_PAGE_SIZE);
 8001886:	f107 020c 	add.w	r2, r7, #12
 800188a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001896:	461a      	mov	r2, r3
 8001898:	f00a ff22 	bl	800c6e0 <memcpy>
	memcpy(&storage[app_eeprom_PAGE_SIZE], newPage[1].data, (app_dmx_preset_cfg_PRESET_SIZE - app_eeprom_PAGE_SIZE));
 800189c:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80018a0:	f503 7181 	add.w	r1, r3, #258	; 0x102
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80018ac:	2288      	movs	r2, #136	; 0x88
 80018ae:	4618      	mov	r0, r3
 80018b0:	f00a ff16 	bl	800c6e0 <memcpy>
	/*Move byte array into struct*/
	memcpy(preset, storage, app_dmx_preset_cfg_PRESET_SIZE);
 80018b4:	f107 010c 	add.w	r1, r7, #12
 80018b8:	463b      	mov	r3, r7
 80018ba:	f44f 72c4 	mov.w	r2, #392	; 0x188
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	f00a ff0e 	bl	800c6e0 <memcpy>
}
 80018c4:	bf00      	nop
 80018c6:	f507 7766 	add.w	r7, r7, #920	; 0x398
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200000b8 	.word	0x200000b8

080018d4 <storeFootswitch>:

static void storeFootswitch(uint16_t pageAddress, app_footcontrol_cfg_GpioCfg *footswitch){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b0da      	sub	sp, #360	; 0x168
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4602      	mov	r2, r0
 80018dc:	463b      	mov	r3, r7
 80018de:	6019      	str	r1, [r3, #0]
 80018e0:	1dbb      	adds	r3, r7, #6
 80018e2:	801a      	strh	r2, [r3, #0]
	/*Move struct into byte array*/
	uint8_t storage[app_dmx_footswitch_cfg_FOOTSWITCH_SIZE*app_cfg_NMBR_BTNS] = {0};
 80018e4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80018e8:	225a      	movs	r2, #90	; 0x5a
 80018ea:	2100      	movs	r1, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f00a ff02 	bl	800c6f6 <memset>
	memcpy(storage, footswitch, sizeof(storage));
 80018f2:	463b      	mov	r3, r7
 80018f4:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 80018f8:	225a      	movs	r2, #90	; 0x5a
 80018fa:	6819      	ldr	r1, [r3, #0]
 80018fc:	f00a fef0 	bl	800c6e0 <memcpy>
	/*Generate pages to store*/
	app_eeprom_Page newPage;
	memset(newPage.data, 0, app_eeprom_PAGE_SIZE); /*Clean data*/
 8001900:	f107 0308 	add.w	r3, r7, #8
 8001904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f00a fef3 	bl	800c6f6 <memset>
	newPage.addr = pageAddress;
 8001910:	f107 0308 	add.w	r3, r7, #8
 8001914:	1dba      	adds	r2, r7, #6
 8001916:	8812      	ldrh	r2, [r2, #0]
 8001918:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	memcpy(newPage.data, &storage[0], sizeof(storage));
 800191c:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8001920:	f107 0308 	add.w	r3, r7, #8
 8001924:	225a      	movs	r2, #90	; 0x5a
 8001926:	4618      	mov	r0, r3
 8001928:	f00a feda 	bl	800c6e0 <memcpy>
	eeprom_write(&eepromDev1, newPage.addr, newPage.data, app_eeprom_PAGE_SIZE);
 800192c:	f107 0308 	add.w	r3, r7, #8
 8001930:	f8b3 1100 	ldrh.w	r1, [r3, #256]	; 0x100
 8001934:	f107 0208 	add.w	r2, r7, #8
 8001938:	f44f 7380 	mov.w	r3, #256	; 0x100
 800193c:	4803      	ldr	r0, [pc, #12]	; (800194c <storeFootswitch+0x78>)
 800193e:	f007 fb44 	bl	8008fca <eeprom_write>
}
 8001942:	bf00      	nop
 8001944:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200000b8 	.word	0x200000b8

08001950 <readFootswitch>:
static void readFootswitch(uint16_t pageAddress, app_footcontrol_cfg_GpioCfg *footswitch){
 8001950:	b580      	push	{r7, lr}
 8001952:	b0da      	sub	sp, #360	; 0x168
 8001954:	af00      	add	r7, sp, #0
 8001956:	4602      	mov	r2, r0
 8001958:	463b      	mov	r3, r7
 800195a:	6019      	str	r1, [r3, #0]
 800195c:	1dbb      	adds	r3, r7, #6
 800195e:	801a      	strh	r2, [r3, #0]
	/*Generate pages to store*/
	app_eeprom_Page newPage;
	memset(newPage.data, 0, app_eeprom_PAGE_SIZE); /*Clean data*/
 8001960:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f00a fec3 	bl	800c6f6 <memset>
	newPage.addr = pageAddress;
 8001970:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001974:	1dba      	adds	r2, r7, #6
 8001976:	8812      	ldrh	r2, [r2, #0]
 8001978:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	eeprom_read(&eepromDev1, newPage.addr, newPage.data, app_eeprom_PAGE_SIZE);
 800197c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001980:	f8b3 1100 	ldrh.w	r1, [r3, #256]	; 0x100
 8001984:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800198c:	4810      	ldr	r0, [pc, #64]	; (80019d0 <readFootswitch+0x80>)
 800198e:	f007 fb3e 	bl	800900e <eeprom_read>
	uint8_t storage[app_dmx_footswitch_cfg_FOOTSWITCH_SIZE*app_cfg_NMBR_BTNS] = {0};
 8001992:	f107 0308 	add.w	r3, r7, #8
 8001996:	4618      	mov	r0, r3
 8001998:	235a      	movs	r3, #90	; 0x5a
 800199a:	461a      	mov	r2, r3
 800199c:	2100      	movs	r1, #0
 800199e:	f00a feaa 	bl	800c6f6 <memset>
	memcpy(&storage, newPage.data, sizeof(storage));
 80019a2:	f107 0208 	add.w	r2, r7, #8
 80019a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	235a      	movs	r3, #90	; 0x5a
 80019b0:	461a      	mov	r2, r3
 80019b2:	f00a fe95 	bl	800c6e0 <memcpy>
	/*Move byte array into struct*/
	memcpy(footswitch, storage, sizeof(storage));
 80019b6:	f107 0108 	add.w	r1, r7, #8
 80019ba:	463b      	mov	r3, r7
 80019bc:	225a      	movs	r2, #90	; 0x5a
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	f00a fe8e 	bl	800c6e0 <memcpy>
}
 80019c4:	bf00      	nop
 80019c6:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200000b8 	.word	0x200000b8

080019d4 <writeUntilLastEEPROMWriteFinished>:
/* Helper ----------------------------------------------------------------------*/
static bool writeUntilLastEEPROMWriteFinished(){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	internalTimer = 1000;
 80019d8:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <writeUntilLastEEPROMWriteFinished+0x3c>)
 80019da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019de:	801a      	strh	r2, [r3, #0]
	while(!eeprom_isFree(&eepromDev1)){
 80019e0:	e006      	b.n	80019f0 <writeUntilLastEEPROMWriteFinished+0x1c>
		if(internalTimer <= 0){
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <writeUntilLastEEPROMWriteFinished+0x3c>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b21b      	sxth	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	dc01      	bgt.n	80019f0 <writeUntilLastEEPROMWriteFinished+0x1c>
			return false;
 80019ec:	2300      	movs	r3, #0
 80019ee:	e00c      	b.n	8001a0a <writeUntilLastEEPROMWriteFinished+0x36>
	while(!eeprom_isFree(&eepromDev1)){
 80019f0:	4808      	ldr	r0, [pc, #32]	; (8001a14 <writeUntilLastEEPROMWriteFinished+0x40>)
 80019f2:	f007 fb2e 	bl	8009052 <eeprom_isFree>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f083 0301 	eor.w	r3, r3, #1
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ef      	bne.n	80019e2 <writeUntilLastEEPROMWriteFinished+0xe>
		}
	}
	internalTimer = 0;
 8001a02:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <writeUntilLastEEPROMWriteFinished+0x3c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	801a      	strh	r2, [r3, #0]
	return true;
 8001a08:	2301      	movs	r3, #1
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20001b02 	.word	0x20001b02
 8001a14:	200000b8 	.word	0x200000b8

08001a18 <eepromCallback>:
/* Callback's ------------------------------------------------------------------*/
uint8_t eepromCallback(eeprom_cfg_Config *config){
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af04      	add	r7, sp, #16
 8001a1e:	6078      	str	r0, [r7, #4]
	uint8_t state = 1;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
	if(config->callbackType == EEPROM_CFG_CALL_TX_START){
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7a9b      	ldrb	r3, [r3, #10]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d119      	bne.n	8001a60 <eepromCallback+0x48>
		if(HAL_I2C_Mem_Write(&hi2c2, config->devAddr, config->memAddr, I2C_MEMADD_SIZE_16BIT, config->txBuffer, config->dataSize, 100) != HAL_OK) state = 0;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b298      	uxth	r0, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	b29c      	uxth	r4, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6952      	ldr	r2, [r2, #20]
 8001a40:	b292      	uxth	r2, r2
 8001a42:	2164      	movs	r1, #100	; 0x64
 8001a44:	9102      	str	r1, [sp, #8]
 8001a46:	9201      	str	r2, [sp, #4]
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	4622      	mov	r2, r4
 8001a4e:	4601      	mov	r1, r0
 8001a50:	4820      	ldr	r0, [pc, #128]	; (8001ad4 <eepromCallback+0xbc>)
 8001a52:	f001 feef 	bl	8003834 <HAL_I2C_Mem_Write>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <eepromCallback+0x48>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]
	}
	if(config->callbackType == EEPROM_CFG_CALL_RX_START){
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7a9b      	ldrb	r3, [r3, #10]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d119      	bne.n	8001a9c <eepromCallback+0x84>
		if(HAL_I2C_Mem_Read(&hi2c2,  config->devAddr, config->memAddr, I2C_MEMADD_SIZE_16BIT, config->rxBuffer, config->dataSize, 100) != HAL_OK) state = 0;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	b298      	uxth	r0, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	b29c      	uxth	r4, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6952      	ldr	r2, [r2, #20]
 8001a7c:	b292      	uxth	r2, r2
 8001a7e:	2164      	movs	r1, #100	; 0x64
 8001a80:	9102      	str	r1, [sp, #8]
 8001a82:	9201      	str	r2, [sp, #4]
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2302      	movs	r3, #2
 8001a88:	4622      	mov	r2, r4
 8001a8a:	4601      	mov	r1, r0
 8001a8c:	4811      	ldr	r0, [pc, #68]	; (8001ad4 <eepromCallback+0xbc>)
 8001a8e:	f001 ffe5 	bl	8003a5c <HAL_I2C_Mem_Read>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <eepromCallback+0x84>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]
	}
	if(config->callbackType == EEPROM_CFG_CALL_CHECK_TX_STATE){
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7a9b      	ldrb	r3, [r3, #10]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d112      	bne.n	8001aca <eepromCallback+0xb2>
		if(HAL_I2C_Master_Transmit(&hi2c2, config->devAddr, config->rxBuffer, config->dataSize, 100) != HAL_OK) state = 0;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b299      	uxth	r1, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1a      	ldr	r2, [r3, #32]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	b298      	uxth	r0, r3
 8001ab4:	2364      	movs	r3, #100	; 0x64
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <eepromCallback+0xbc>)
 8001abc:	f001 fdc6 	bl	800364c <HAL_I2C_Master_Transmit>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <eepromCallback+0xb2>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
	}
	return state;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}
 8001ad4:	2000779c 	.word	0x2000779c

08001ad8 <app_footcontrol_init>:
*******************************************************************************/
static void sendDmxPreset(eal_task_Task *self, app_footcontrol_cfg_PresetCfg *preset);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_footcontrol_init(eal_task_Task *self){
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	status = app_footcontrol_ACTIVE;
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <app_footcontrol_init+0x1c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20001b06 	.word	0x20001b06

08001af8 <app_footcontrol_process>:

void app_footcontrol_process(eal_task_Task *self){
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	f083 0301 	eor.w	r3, r3, #1
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10b      	bne.n	8001b26 <app_footcontrol_process+0x2e>
	if(!cyclicFlag) return;
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <app_footcontrol_process+0x40>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f083 0301 	eor.w	r3, r3, #1
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d105      	bne.n	8001b2a <app_footcontrol_process+0x32>
	//TODO: logic
	cyclicFlag = false;
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <app_footcontrol_process+0x40>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
 8001b24:	e002      	b.n	8001b2c <app_footcontrol_process+0x34>
	if(!self->enable) return;
 8001b26:	bf00      	nop
 8001b28:	e000      	b.n	8001b2c <app_footcontrol_process+0x34>
	if(!cyclicFlag) return;
 8001b2a:	bf00      	nop
}
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20001b07 	.word	0x20001b07

08001b3c <app_footcontrol_receiveMsg>:
void app_footcontrol_cyclic1ms(eal_task_Task *self, bool stat){
	cyclicFlag = true;
	if(internalTimer > 0)--internalTimer;
}

void app_footcontrol_receiveMsg(eal_task_Task *self, msg_Message *message){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
	if(status != app_footcontrol_ACTIVE) return;
 8001b46:	4b4d      	ldr	r3, [pc, #308]	; (8001c7c <app_footcontrol_receiveMsg+0x140>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f040 8092 	bne.w	8001c74 <app_footcontrol_receiveMsg+0x138>
	/*Button message parsing*/
	if(message->type == app_cfg_BTN_MSG){
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	791b      	ldrb	r3, [r3, #4]
 8001b54:	2b42      	cmp	r3, #66	; 0x42
 8001b56:	f040 808e 	bne.w	8001c76 <app_footcontrol_receiveMsg+0x13a>
		/*Action parsing*/
		if(msg_isAction(message)){
 8001b5a:	6838      	ldr	r0, [r7, #0]
 8001b5c:	f007 fcdf 	bl	800951e <msg_isAction>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f040 8087 	bne.w	8001c76 <app_footcontrol_receiveMsg+0x13a>
//			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
		}
		/*Event parsing*/
		else{
			uint16_t idx = message->index;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	81fb      	strh	r3, [r7, #14]
			if(app_model_model.footswitches[idx].mode == app_footcontrol_GPIO_INPUT){
 8001b6e:	4b44      	ldr	r3, [pc, #272]	; (8001c80 <app_footcontrol_receiveMsg+0x144>)
 8001b70:	68d9      	ldr	r1, [r3, #12]
 8001b72:	89fa      	ldrh	r2, [r7, #14]
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	440b      	add	r3, r1
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d178      	bne.n	8001c76 <app_footcontrol_receiveMsg+0x13a>
				if((message->value == app_cfg_btn_STAT_RELEASED) && (app_model_model.footswitches[idx].release.presetNr < app_cfg_NMBR_PRESETS)) sendDmxPreset(self, &app_model_model.footswitches[idx].release);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d118      	bne.n	8001bc0 <app_footcontrol_receiveMsg+0x84>
 8001b8e:	4b3c      	ldr	r3, [pc, #240]	; (8001c80 <app_footcontrol_receiveMsg+0x144>)
 8001b90:	68d9      	ldr	r1, [r3, #12]
 8001b92:	89fa      	ldrh	r2, [r7, #14]
 8001b94:	4613      	mov	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4413      	add	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	440b      	add	r3, r1
 8001b9e:	799b      	ldrb	r3, [r3, #6]
 8001ba0:	2b09      	cmp	r3, #9
 8001ba2:	d80d      	bhi.n	8001bc0 <app_footcontrol_receiveMsg+0x84>
 8001ba4:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <app_footcontrol_receiveMsg+0x144>)
 8001ba6:	68d9      	ldr	r1, [r3, #12]
 8001ba8:	89fa      	ldrh	r2, [r7, #14]
 8001baa:	4613      	mov	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4413      	add	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3306      	adds	r3, #6
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f863 	bl	8001c84 <sendDmxPreset>
 8001bbe:	e05a      	b.n	8001c76 <app_footcontrol_receiveMsg+0x13a>
				else if((message->value == app_cfg_btn_STAT_PRESSED) && (app_model_model.footswitches[idx].press.presetNr < app_cfg_NMBR_PRESETS)) sendDmxPreset(self, &app_model_model.footswitches[idx].press);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d118      	bne.n	8001bfc <app_footcontrol_receiveMsg+0xc0>
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <app_footcontrol_receiveMsg+0x144>)
 8001bcc:	68d9      	ldr	r1, [r3, #12]
 8001bce:	89fa      	ldrh	r2, [r7, #14]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	440b      	add	r3, r1
 8001bda:	789b      	ldrb	r3, [r3, #2]
 8001bdc:	2b09      	cmp	r3, #9
 8001bde:	d80d      	bhi.n	8001bfc <app_footcontrol_receiveMsg+0xc0>
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <app_footcontrol_receiveMsg+0x144>)
 8001be2:	68d9      	ldr	r1, [r3, #12]
 8001be4:	89fa      	ldrh	r2, [r7, #14]
 8001be6:	4613      	mov	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4413      	add	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	440b      	add	r3, r1
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f845 	bl	8001c84 <sendDmxPreset>
 8001bfa:	e03c      	b.n	8001c76 <app_footcontrol_receiveMsg+0x13a>
				else if((message->value == app_cfg_btn_STAT_HOLD_SHORT) && (app_model_model.footswitches[idx].holdShort.presetNr < app_cfg_NMBR_PRESETS)) sendDmxPreset(self, &app_model_model.footswitches[idx].holdShort);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d118      	bne.n	8001c38 <app_footcontrol_receiveMsg+0xfc>
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <app_footcontrol_receiveMsg+0x144>)
 8001c08:	68d9      	ldr	r1, [r3, #12]
 8001c0a:	89fa      	ldrh	r2, [r7, #14]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	440b      	add	r3, r1
 8001c16:	7a9b      	ldrb	r3, [r3, #10]
 8001c18:	2b09      	cmp	r3, #9
 8001c1a:	d80d      	bhi.n	8001c38 <app_footcontrol_receiveMsg+0xfc>
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <app_footcontrol_receiveMsg+0x144>)
 8001c1e:	68d9      	ldr	r1, [r3, #12]
 8001c20:	89fa      	ldrh	r2, [r7, #14]
 8001c22:	4613      	mov	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4413      	add	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	440b      	add	r3, r1
 8001c2c:	330a      	adds	r3, #10
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f827 	bl	8001c84 <sendDmxPreset>
 8001c36:	e01e      	b.n	8001c76 <app_footcontrol_receiveMsg+0x13a>
				else if((message->value == app_cfg_btn_STAT_HOLD_LONG) && (app_model_model.footswitches[idx].holdLong.presetNr < app_cfg_NMBR_PRESETS)) sendDmxPreset(self, &app_model_model.footswitches[idx].holdLong);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d119      	bne.n	8001c76 <app_footcontrol_receiveMsg+0x13a>
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <app_footcontrol_receiveMsg+0x144>)
 8001c44:	68d9      	ldr	r1, [r3, #12]
 8001c46:	89fa      	ldrh	r2, [r7, #14]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	440b      	add	r3, r1
 8001c52:	7b9b      	ldrb	r3, [r3, #14]
 8001c54:	2b09      	cmp	r3, #9
 8001c56:	d80e      	bhi.n	8001c76 <app_footcontrol_receiveMsg+0x13a>
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <app_footcontrol_receiveMsg+0x144>)
 8001c5a:	68d9      	ldr	r1, [r3, #12]
 8001c5c:	89fa      	ldrh	r2, [r7, #14]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	440b      	add	r3, r1
 8001c68:	330e      	adds	r3, #14
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f809 	bl	8001c84 <sendDmxPreset>
 8001c72:	e000      	b.n	8001c76 <app_footcontrol_receiveMsg+0x13a>
	if(status != app_footcontrol_ACTIVE) return;
 8001c74:	bf00      	nop
			}
		}
	}
}
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20001b06 	.word	0x20001b06
 8001c80:	200010a0 	.word	0x200010a0

08001c84 <sendDmxPreset>:

/* Helper ----------------------------------------------------------------------*/
static void sendDmxPreset(eal_task_Task *self, app_footcontrol_cfg_PresetCfg *preset){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
	if(self->sendMsg == NULL) return;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d01e      	beq.n	8001cd4 <sendDmxPreset+0x50>
	msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_ACTION(preset->presetNr - 1), preset->triggerValue, 0, 0);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	b21b      	sxth	r3, r3
 8001ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	813b      	strh	r3, [r7, #8]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cb6:	817b      	strh	r3, [r7, #10]
 8001cb8:	2350      	movs	r3, #80	; 0x50
 8001cba:	733b      	strb	r3, [r7, #12]
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	737b      	strb	r3, [r7, #13]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	81fb      	strh	r3, [r7, #14]
	self->sendMsg(self, &newMessage);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	f107 0208 	add.w	r2, r7, #8
 8001ccc:	4611      	mov	r1, r2
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
 8001cd2:	e000      	b.n	8001cd6 <sendDmxPreset+0x52>
	if(self->sendMsg == NULL) return;
 8001cd4:	bf00      	nop
}
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <app_interface_init>:
static void sendToInterface(eal_task_Task *self, app_interface_CmdInterface *interface, char *data);
static void sendDmxPreset(eal_task_Task *self, uint8_t preset);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_interface_init(eal_task_Task *self){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	app_usb_init();
 8001ce4:	f000 fd5e 	bl	80027a4 <app_usb_init>
	app_usb_rxBufferInit(usbRxData, sizeof(usbRxData));
 8001ce8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cec:	480e      	ldr	r0, [pc, #56]	; (8001d28 <app_interface_init+0x4c>)
 8001cee:	f000 fd6d 	bl	80027cc <app_usb_rxBufferInit>
	app_usb_txBufferInit(usbTxData, sizeof(usbTxData));
 8001cf2:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8001cf6:	480d      	ldr	r0, [pc, #52]	; (8001d2c <app_interface_init+0x50>)
 8001cf8:	f000 fd82 	bl	8002800 <app_usb_txBufferInit>

	app_uart_bufferInit(&uart4TxBuf, uart4TxData, sizeof(uart4TxData));
 8001cfc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8001d00:	490b      	ldr	r1, [pc, #44]	; (8001d30 <app_interface_init+0x54>)
 8001d02:	480c      	ldr	r0, [pc, #48]	; (8001d34 <app_interface_init+0x58>)
 8001d04:	f000 fe72 	bl	80029ec <app_uart_bufferInit>
	app_uart_bufferInit(&uart4RxBuf, uart4RxData, sizeof(uart4RxData));
 8001d08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d0c:	490a      	ldr	r1, [pc, #40]	; (8001d38 <app_interface_init+0x5c>)
 8001d0e:	480b      	ldr	r0, [pc, #44]	; (8001d3c <app_interface_init+0x60>)
 8001d10:	f000 fe6c 	bl	80029ec <app_uart_bufferInit>
	app_uart_enableReceiveInt(huart4.Instance);
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <app_interface_init+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 fe80 	bl	8002a1e <app_uart_enableReceiveInt>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20006f08 	.word	0x20006f08
 8001d2c:	20004708 	.word	0x20004708
 8001d30:	20001b08 	.word	0x20001b08
 8001d34:	200000dc 	.word	0x200000dc
 8001d38:	20004308 	.word	0x20004308
 8001d3c:	200000e8 	.word	0x200000e8
 8001d40:	20007a50 	.word	0x20007a50

08001d44 <app_interface_process>:

void app_interface_process(eal_task_Task *self){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	f083 0301 	eor.w	r3, r3, #1
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d122      	bne.n	8001da0 <app_interface_process+0x5c>
	checkInterfaces(self);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f858 	bl	8001e10 <checkInterfaces>
	if(!cyclicFlag) return;
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <app_interface_process+0x68>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	f083 0301 	eor.w	r3, r3, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d119      	bne.n	8001da4 <app_interface_process+0x60>
	if(++uploadTimer >= UPLOAD_TIMER) {
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <app_interface_process+0x6c>)
 8001d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	b21a      	sxth	r2, r3
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <app_interface_process+0x6c>)
 8001d80:	801a      	strh	r2, [r3, #0]
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <app_interface_process+0x6c>)
 8001d84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d88:	2b09      	cmp	r3, #9
 8001d8a:	dd05      	ble.n	8001d98 <app_interface_process+0x54>
		uploadConfig(self);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 fc4d 	bl	800262c <uploadConfig>
		uploadTimer = 0;
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <app_interface_process+0x6c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	801a      	strh	r2, [r3, #0]
	}
	cyclicFlag = false;
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <app_interface_process+0x68>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
 8001d9e:	e002      	b.n	8001da6 <app_interface_process+0x62>
	if(!self->enable) return;
 8001da0:	bf00      	nop
 8001da2:	e000      	b.n	8001da6 <app_interface_process+0x62>
	if(!cyclicFlag) return;
 8001da4:	bf00      	nop
}
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20007334 	.word	0x20007334
 8001db0:	20007338 	.word	0x20007338

08001db4 <app_interface_cyclic1ms>:

void app_interface_cyclic1ms(eal_task_Task *self, bool stat){
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <app_interface_cyclic1ms+0x3c>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
	if(internalTimer > 0)--internalTimer;
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <app_interface_cyclic1ms+0x40>)
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	b21b      	sxth	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	dd08      	ble.n	8001de2 <app_interface_cyclic1ms+0x2e>
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <app_interface_cyclic1ms+0x40>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	b21a      	sxth	r2, r3
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <app_interface_cyclic1ms+0x40>)
 8001de0:	801a      	strh	r2, [r3, #0]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20007334 	.word	0x20007334
 8001df4:	20007336 	.word	0x20007336

08001df8 <app_interface_receiveMsg>:

void app_interface_receiveMsg(eal_task_Task *self, msg_Message *message){
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <checkInterfaces>:

/*Helper --------------------------------------------------------------------*/
static void checkInterfaces(eal_task_Task *self){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	app_usb_txLoop();
 8001e18:	f000 fd0c 	bl	8002834 <app_usb_txLoop>
	char intData;
	if(app_usb_getCharFromRxBuffer(&intData) == ringbuffer_OK) parseCommand(self, &usbInterface, intData);
 8001e1c:	f107 030f 	add.w	r3, r7, #15
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 fd6f 	bl	8002904 <app_usb_getCharFromRxBuffer>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d105      	bne.n	8001e38 <checkInterfaces+0x28>
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	490b      	ldr	r1, [pc, #44]	; (8001e60 <checkInterfaces+0x50>)
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f81a 	bl	8001e6c <parseCommand>
	if(app_uart_getCharFromBuffer(&intData, &uart4RxBuf) == ringbuffer_OK) parseCommand(self, &btInterface, intData);
 8001e38:	f107 030f 	add.w	r3, r7, #15
 8001e3c:	4909      	ldr	r1, [pc, #36]	; (8001e64 <checkInterfaces+0x54>)
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 fdfd 	bl	8002a3e <app_uart_getCharFromBuffer>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d105      	bne.n	8001e56 <checkInterfaces+0x46>
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4906      	ldr	r1, [pc, #24]	; (8001e68 <checkInterfaces+0x58>)
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f80b 	bl	8001e6c <parseCommand>
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2000731c 	.word	0x2000731c
 8001e64:	200000e8 	.word	0x200000e8
 8001e68:	20007308 	.word	0x20007308

08001e6c <parseCommand>:

static void parseCommand(eal_task_Task *self, app_interface_CmdInterface *interface, char data){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	4613      	mov	r3, r2
 8001e78:	71fb      	strb	r3, [r7, #7]
	if(data == '#'){
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	2b23      	cmp	r3, #35	; 0x23
 8001e7e:	d109      	bne.n	8001e94 <parseCommand+0x28>
		interface->cmdCnt = 1;
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2201      	movs	r2, #1
 8001e84:	805a      	strh	r2, [r3, #2]
		interface->state = app_interface_REC_CMD;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
		interface->cmd[0] = data;
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	79fa      	ldrb	r2, [r7, #7]
 8001e90:	711a      	strb	r2, [r3, #4]
				//TODO: Maybe send to both interfaces.
				sendToInterface(self, activeInterface, interface->cmd);
			}
		}
	}
}
 8001e92:	e02b      	b.n	8001eec <parseCommand+0x80>
	}else if(interface->state == app_interface_REC_CMD){
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d127      	bne.n	8001eec <parseCommand+0x80>
		interface->cmd[interface->cmdCnt] = data;
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	885b      	ldrh	r3, [r3, #2]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	79fa      	ldrb	r2, [r7, #7]
 8001ea8:	711a      	strb	r2, [r3, #4]
		++interface->cmdCnt;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	885b      	ldrh	r3, [r3, #2]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	805a      	strh	r2, [r3, #2]
		if(interface->cmdCnt >= app_cfg_CMD_LENGTH){
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	885b      	ldrh	r3, [r3, #2]
 8001eba:	2b0d      	cmp	r3, #13
 8001ebc:	d916      	bls.n	8001eec <parseCommand+0x80>
			interface->state = app_interface_WAIT_FOR_CMD;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
			if(commandFound(self, interface->cmd)){
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f814 	bl	8001ef8 <commandFound>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <parseCommand+0x80>
				activeInterface = interface;
 8001ed6:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <parseCommand+0x88>)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	6013      	str	r3, [r2, #0]
				sendToInterface(self, activeInterface, interface->cmd);
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <parseCommand+0x88>)
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 fbfe 	bl	80026e8 <sendToInterface>
}
 8001eec:	bf00      	nop
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20007330 	.word	0x20007330

08001ef8 <commandFound>:

static bool commandFound(eal_task_Task *self, char *command){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
	char type = command[TYPE_POS];
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	785b      	ldrb	r3, [r3, #1]
 8001f06:	73fb      	strb	r3, [r7, #15]
	if(type == 'T') return parseTransition(self, command);
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	2b54      	cmp	r3, #84	; 0x54
 8001f0c:	d105      	bne.n	8001f1a <commandFound+0x22>
 8001f0e:	6839      	ldr	r1, [r7, #0]
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f823 	bl	8001f5c <parseTransition>
 8001f16:	4603      	mov	r3, r0
 8001f18:	e01b      	b.n	8001f52 <commandFound+0x5a>
	else if(type == 'F') return parseFootswitch(self, command);
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	2b46      	cmp	r3, #70	; 0x46
 8001f1e:	d105      	bne.n	8001f2c <commandFound+0x34>
 8001f20:	6839      	ldr	r1, [r7, #0]
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f996 	bl	8002254 <parseFootswitch>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	e012      	b.n	8001f52 <commandFound+0x5a>
	else if(type == 'P') return parsePreset(self, command);
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	2b50      	cmp	r3, #80	; 0x50
 8001f30:	d105      	bne.n	8001f3e <commandFound+0x46>
 8001f32:	6839      	ldr	r1, [r7, #0]
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 fa75 	bl	8002424 <parsePreset>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	e009      	b.n	8001f52 <commandFound+0x5a>
	else if(type == 'L') return parseLoadConfig(self, command);
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	2b4c      	cmp	r3, #76	; 0x4c
 8001f42:	d105      	bne.n	8001f50 <commandFound+0x58>
 8001f44:	6839      	ldr	r1, [r7, #0]
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fb54 	bl	80025f4 <parseLoadConfig>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	e000      	b.n	8001f52 <commandFound+0x5a>
	return true;
 8001f50:	2301      	movs	r3, #1
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <parseTransition>:

static bool parseTransition(eal_task_Task *self, char *command){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b098      	sub	sp, #96	; 0x60
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
	char cmdIdx = command[2];
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	789b      	ldrb	r3, [r3, #2]
 8001f6a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	char prNrString[3];
	char trNrString[3];
	prNrString[0] = command[3]; prNrString[1] = command[4];
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	78db      	ldrb	r3, [r3, #3]
 8001f72:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	791b      	ldrb	r3, [r3, #4]
 8001f7a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	trNrString[0] = command[5]; trNrString[1] = command[6];
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	795b      	ldrb	r3, [r3, #5]
 8001f82:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	799b      	ldrb	r3, [r3, #6]
 8001f8a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	long prNr = strtol(prNrString, NULL, 16);
 8001f8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f92:	2210      	movs	r2, #16
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f00a fc80 	bl	800c89c <strtol>
 8001f9c:	6578      	str	r0, [r7, #84]	; 0x54
	long trNr = strtol(trNrString, NULL, 16);
 8001f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa2:	2210      	movs	r2, #16
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f00a fc78 	bl	800c89c <strtol>
 8001fac:	6538      	str	r0, [r7, #80]	; 0x50
	if(cmdIdx == '0'){
 8001fae:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001fb2:	2b30      	cmp	r3, #48	; 0x30
 8001fb4:	d151      	bne.n	800205a <parseTransition+0xfe>
		char chString[3] = "";
 8001fb6:	4ba5      	ldr	r3, [pc, #660]	; (800224c <parseTransition+0x2f0>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001fbe:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	801a      	strh	r2, [r3, #0]
		char startString[3] = "";
 8001fc6:	4ba1      	ldr	r3, [pc, #644]	; (800224c <parseTransition+0x2f0>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001fce:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	801a      	strh	r2, [r3, #0]
		chString[0] = command[7]; chString[1] = command[8];
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	79db      	ldrb	r3, [r3, #7]
 8001fda:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	7a1b      	ldrb	r3, [r3, #8]
 8001fe2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		startString[0] = command[9]; startString[1] = command[10];
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	7a5b      	ldrb	r3, [r3, #9]
 8001fea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	7a9b      	ldrb	r3, [r3, #10]
 8001ff2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		long ch = strtol(chString, NULL, 16);
 8001ff6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ffa:	2210      	movs	r2, #16
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f00a fc4c 	bl	800c89c <strtol>
 8002004:	64f8      	str	r0, [r7, #76]	; 0x4c
		long start = strtol(startString, NULL, 16);
 8002006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200a:	2210      	movs	r2, #16
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f00a fc44 	bl	800c89c <strtol>
 8002014:	64b8      	str	r0, [r7, #72]	; 0x48
		app_model_model.presets[prNr].presetTransitionSettings[trNr].dmxCh = ch;
 8002016:	4b8e      	ldr	r3, [pc, #568]	; (8002250 <parseTransition+0x2f4>)
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201c:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	441a      	add	r2, r3
 8002026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002028:	b299      	uxth	r1, r3
 800202a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800202c:	3302      	adds	r3, #2
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	4413      	add	r3, r2
 8002032:	460a      	mov	r2, r1
 8002034:	801a      	strh	r2, [r3, #0]
		app_model_model.presets[prNr].presetTransitionSettings[trNr].dmxStartVal = start;
 8002036:	4b86      	ldr	r3, [pc, #536]	; (8002250 <parseTransition+0x2f4>)
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203c:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002040:	fb01 f303 	mul.w	r3, r1, r3
 8002044:	441a      	add	r2, r3
 8002046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002048:	b2d9      	uxtb	r1, r3
 800204a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800204c:	3302      	adds	r3, #2
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	4413      	add	r3, r2
 8002052:	3302      	adds	r3, #2
 8002054:	460a      	mov	r2, r1
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	e0f3      	b.n	8002242 <parseTransition+0x2e6>
	}else if(cmdIdx == '1'){
 800205a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800205e:	2b31      	cmp	r3, #49	; 0x31
 8002060:	d150      	bne.n	8002104 <parseTransition+0x1a8>
		char endString[3] = "";
 8002062:	4b7a      	ldr	r3, [pc, #488]	; (800224c <parseTransition+0x2f0>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	f887 3020 	strb.w	r3, [r7, #32]
 800206a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800206e:	2200      	movs	r2, #0
 8002070:	801a      	strh	r2, [r3, #0]
		char timeString[5] = "";
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	2300      	movs	r3, #0
 8002078:	773b      	strb	r3, [r7, #28]
		endString[0] = command[7]; endString[1] = command[8];
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	79db      	ldrb	r3, [r3, #7]
 800207e:	f887 3020 	strb.w	r3, [r7, #32]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	7a1b      	ldrb	r3, [r3, #8]
 8002086:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		timeString[0] = command[9]; timeString[1] = command[10]; timeString[2] = command[11]; timeString[3] = command[12];
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	7a5b      	ldrb	r3, [r3, #9]
 800208e:	763b      	strb	r3, [r7, #24]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	7a9b      	ldrb	r3, [r3, #10]
 8002094:	767b      	strb	r3, [r7, #25]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	7adb      	ldrb	r3, [r3, #11]
 800209a:	76bb      	strb	r3, [r7, #26]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	7b1b      	ldrb	r3, [r3, #12]
 80020a0:	76fb      	strb	r3, [r7, #27]
		long end = strtol(endString, NULL, 16);
 80020a2:	f107 0320 	add.w	r3, r7, #32
 80020a6:	2210      	movs	r2, #16
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f00a fbf6 	bl	800c89c <strtol>
 80020b0:	6478      	str	r0, [r7, #68]	; 0x44
		long time = strtol(timeString, NULL, 16);
 80020b2:	f107 0318 	add.w	r3, r7, #24
 80020b6:	2210      	movs	r2, #16
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f00a fbee 	bl	800c89c <strtol>
 80020c0:	6438      	str	r0, [r7, #64]	; 0x40
		app_model_model.presets[prNr].presetTransitionSettings[trNr].dmxEndVal = end;
 80020c2:	4b63      	ldr	r3, [pc, #396]	; (8002250 <parseTransition+0x2f4>)
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c8:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	441a      	add	r2, r3
 80020d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d4:	b2d9      	uxtb	r1, r3
 80020d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020d8:	3302      	adds	r3, #2
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	4413      	add	r3, r2
 80020de:	3303      	adds	r3, #3
 80020e0:	460a      	mov	r2, r1
 80020e2:	701a      	strb	r2, [r3, #0]
		app_model_model.presets[prNr].presetTransitionSettings[trNr].transTime_ms = time;
 80020e4:	4b5a      	ldr	r3, [pc, #360]	; (8002250 <parseTransition+0x2f4>)
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ea:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	18d1      	adds	r1, r2, r3
 80020f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020f8:	3302      	adds	r3, #2
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	440b      	add	r3, r1
 80020fe:	3304      	adds	r3, #4
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	e09e      	b.n	8002242 <parseTransition+0x2e6>
	}else if(cmdIdx == '2'){
 8002104:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002108:	2b32      	cmp	r3, #50	; 0x32
 800210a:	f040 809a 	bne.w	8002242 <parseTransition+0x2e6>
		char delayString[5] = "";
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	2300      	movs	r3, #0
 8002114:	753b      	strb	r3, [r7, #20]
		char rampString[3] = "";
 8002116:	4b4d      	ldr	r3, [pc, #308]	; (800224c <parseTransition+0x2f0>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	733b      	strb	r3, [r7, #12]
 800211c:	f107 030d 	add.w	r3, r7, #13
 8002120:	2200      	movs	r2, #0
 8002122:	801a      	strh	r2, [r3, #0]
		char activeString;
		delayString[0] = command[7]; delayString[1] = command[8]; delayString[2] = command[9]; delayString[3] = command[10];
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	79db      	ldrb	r3, [r3, #7]
 8002128:	743b      	strb	r3, [r7, #16]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	7a1b      	ldrb	r3, [r3, #8]
 800212e:	747b      	strb	r3, [r7, #17]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	7a5b      	ldrb	r3, [r3, #9]
 8002134:	74bb      	strb	r3, [r7, #18]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	7a9b      	ldrb	r3, [r3, #10]
 800213a:	74fb      	strb	r3, [r7, #19]
		rampString[0] = command[11]; rampString[1] = command[12];
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	7adb      	ldrb	r3, [r3, #11]
 8002140:	733b      	strb	r3, [r7, #12]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	7b1b      	ldrb	r3, [r3, #12]
 8002146:	737b      	strb	r3, [r7, #13]
		activeString = command[13];
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	7b5b      	ldrb	r3, [r3, #13]
 800214c:	72fb      	strb	r3, [r7, #11]
		long delay = strtol(delayString, NULL, 16);
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	2210      	movs	r2, #16
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f00a fba0 	bl	800c89c <strtol>
 800215c:	63f8      	str	r0, [r7, #60]	; 0x3c
		long ramp = strtol(rampString, NULL, 16);
 800215e:	f107 030c 	add.w	r3, r7, #12
 8002162:	2210      	movs	r2, #16
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f00a fb98 	bl	800c89c <strtol>
 800216c:	63b8      	str	r0, [r7, #56]	; 0x38
		long active = strtol(&activeString, NULL, 16);
 800216e:	f107 030b 	add.w	r3, r7, #11
 8002172:	2210      	movs	r2, #16
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f00a fb90 	bl	800c89c <strtol>
 800217c:	6378      	str	r0, [r7, #52]	; 0x34
		app_model_model.presets[prNr].presetTransitionSettings[trNr].transDelay_ms = delay;
 800217e:	4b34      	ldr	r3, [pc, #208]	; (8002250 <parseTransition+0x2f4>)
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002184:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002188:	fb01 f303 	mul.w	r3, r1, r3
 800218c:	18d1      	adds	r1, r2, r3
 800218e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	440b      	add	r3, r1
 8002196:	3328      	adds	r3, #40	; 0x28
 8002198:	601a      	str	r2, [r3, #0]
		app_model_model.presets[prNr].presetTransitionSettings[trNr].transRamp = ramp;
 800219a:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <parseTransition+0x2f4>)
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a0:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	441a      	add	r2, r3
 80021aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ac:	b2d9      	uxtb	r1, r3
 80021ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	4413      	add	r3, r2
 80021b4:	332c      	adds	r3, #44	; 0x2c
 80021b6:	460a      	mov	r2, r1
 80021b8:	701a      	strb	r2, [r3, #0]
		app_model_model.presets[prNr].presetTransitionSettings[trNr].enable = active;
 80021ba:	4b25      	ldr	r3, [pc, #148]	; (8002250 <parseTransition+0x2f4>)
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c0:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	441a      	add	r2, r3
 80021ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bf14      	ite	ne
 80021d0:	2301      	movne	r3, #1
 80021d2:	2300      	moveq	r3, #0
 80021d4:	b2d9      	uxtb	r1, r3
 80021d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	4413      	add	r3, r2
 80021dc:	332d      	adds	r3, #45	; 0x2d
 80021de:	460a      	mov	r2, r1
 80021e0:	701a      	strb	r2, [r3, #0]
		app_model_model.presets[prNr].transitionEnableSize = 0;
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <parseTransition+0x2f4>)
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e8:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
		for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 80021f6:	2300      	movs	r3, #0
 80021f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021fa:	e01c      	b.n	8002236 <parseTransition+0x2da>
			if(app_model_model.presets[prNr].presetTransitionSettings[j].enable) ++app_model_model.presets[prNr].transitionEnableSize;
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <parseTransition+0x2f4>)
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002202:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	441a      	add	r2, r3
 800220c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	4413      	add	r3, r2
 8002212:	332d      	adds	r3, #45	; 0x2d
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00a      	beq.n	8002230 <parseTransition+0x2d4>
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <parseTransition+0x2f4>)
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002220:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	69da      	ldr	r2, [r3, #28]
 800222c:	3201      	adds	r2, #1
 800222e:	61da      	str	r2, [r3, #28]
		for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8002230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002232:	3301      	adds	r3, #1
 8002234:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002238:	2b13      	cmp	r3, #19
 800223a:	dddf      	ble.n	80021fc <parseTransition+0x2a0>
		}
		app_model_model.dirty = true;
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <parseTransition+0x2f4>)
 800223e:	2201      	movs	r2, #1
 8002240:	741a      	strb	r2, [r3, #16]
	}
	return true;
 8002242:	2301      	movs	r3, #1
}
 8002244:	4618      	mov	r0, r3
 8002246:	3760      	adds	r7, #96	; 0x60
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	0800d11c 	.word	0x0800d11c
 8002250:	200010a0 	.word	0x200010a0

08002254 <parseFootswitch>:

static bool parseFootswitch(eal_task_Task *self, char *command){
 8002254:	b580      	push	{r7, lr}
 8002256:	b08e      	sub	sp, #56	; 0x38
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
	char cmdIdx = command[2];
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	789b      	ldrb	r3, [r3, #2]
 8002262:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	char fNrString[3];
	fNrString[0] = command[3]; fNrString[1] = command[4];
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	78db      	ldrb	r3, [r3, #3]
 800226a:	773b      	strb	r3, [r7, #28]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	791b      	ldrb	r3, [r3, #4]
 8002270:	777b      	strb	r3, [r7, #29]
	long fNr = strtol(fNrString, NULL, 16);
 8002272:	f107 031c 	add.w	r3, r7, #28
 8002276:	2210      	movs	r2, #16
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f00a fb0e 	bl	800c89c <strtol>
 8002280:	6338      	str	r0, [r7, #48]	; 0x30
	if(cmdIdx == '0'){
 8002282:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002286:	2b30      	cmp	r3, #48	; 0x30
 8002288:	d166      	bne.n	8002358 <parseFootswitch+0x104>
		char pressedString[3];
		char releasedString[3];
		char holdshortString[3];
		char holdlongString[3];
		pressedString[0] = command[5]; pressedString[1] = command[6];
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	795b      	ldrb	r3, [r3, #5]
 800228e:	763b      	strb	r3, [r7, #24]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	799b      	ldrb	r3, [r3, #6]
 8002294:	767b      	strb	r3, [r7, #25]
		releasedString[0] = command[7]; releasedString[1] = command[8];
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	79db      	ldrb	r3, [r3, #7]
 800229a:	753b      	strb	r3, [r7, #20]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	7a1b      	ldrb	r3, [r3, #8]
 80022a0:	757b      	strb	r3, [r7, #21]
		holdshortString[0] = command[9]; holdshortString[1] = command[10];
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	7a5b      	ldrb	r3, [r3, #9]
 80022a6:	743b      	strb	r3, [r7, #16]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	7a9b      	ldrb	r3, [r3, #10]
 80022ac:	747b      	strb	r3, [r7, #17]
		holdlongString[0] = command[11]; holdlongString[1] = command[12];
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	7adb      	ldrb	r3, [r3, #11]
 80022b2:	733b      	strb	r3, [r7, #12]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	7b1b      	ldrb	r3, [r3, #12]
 80022b8:	737b      	strb	r3, [r7, #13]
		long pressed = strtol(pressedString, NULL, 16);
 80022ba:	f107 0318 	add.w	r3, r7, #24
 80022be:	2210      	movs	r2, #16
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f00a faea 	bl	800c89c <strtol>
 80022c8:	62f8      	str	r0, [r7, #44]	; 0x2c
		long released = strtol(releasedString, NULL, 16);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	2210      	movs	r2, #16
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f00a fae2 	bl	800c89c <strtol>
 80022d8:	62b8      	str	r0, [r7, #40]	; 0x28
		long holdshort = strtol(holdshortString, NULL, 16);
 80022da:	f107 0310 	add.w	r3, r7, #16
 80022de:	2210      	movs	r2, #16
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f00a fada 	bl	800c89c <strtol>
 80022e8:	6278      	str	r0, [r7, #36]	; 0x24
		long holdlong = strtol(holdlongString, NULL, 16);
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	2210      	movs	r2, #16
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f00a fad2 	bl	800c89c <strtol>
 80022f8:	6238      	str	r0, [r7, #32]
		app_model_model.footswitches[fNr].press.presetNr = pressed;
 80022fa:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <parseFootswitch+0x110>)
 80022fc:	68d9      	ldr	r1, [r3, #12]
 80022fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	440b      	add	r3, r1
 800230a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	709a      	strb	r2, [r3, #2]
		app_model_model.footswitches[fNr].release.presetNr = released;
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <parseFootswitch+0x110>)
 8002312:	68d9      	ldr	r1, [r3, #12]
 8002314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	440b      	add	r3, r1
 8002320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	719a      	strb	r2, [r3, #6]
		app_model_model.footswitches[fNr].holdShort.presetNr = holdshort;
 8002326:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <parseFootswitch+0x110>)
 8002328:	68d9      	ldr	r1, [r3, #12]
 800232a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	440b      	add	r3, r1
 8002336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	729a      	strb	r2, [r3, #10]
		app_model_model.footswitches[fNr].holdLong.presetNr = holdlong;
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <parseFootswitch+0x110>)
 800233e:	68d9      	ldr	r1, [r3, #12]
 8002340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	440b      	add	r3, r1
 800234c:	6a3a      	ldr	r2, [r7, #32]
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	739a      	strb	r2, [r3, #14]
		app_model_model.dirty = true;
 8002352:	4b04      	ldr	r3, [pc, #16]	; (8002364 <parseFootswitch+0x110>)
 8002354:	2201      	movs	r2, #1
 8002356:	741a      	strb	r2, [r3, #16]
	}
	return true;
 8002358:	2301      	movs	r3, #1
}
 800235a:	4618      	mov	r0, r3
 800235c:	3738      	adds	r7, #56	; 0x38
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200010a0 	.word	0x200010a0

08002368 <sendFootswitch>:
static bool sendFootswitch(eal_task_Task *self, uint8_t index){
 8002368:	b5b0      	push	{r4, r5, r7, lr}
 800236a:	b08c      	sub	sp, #48	; 0x30
 800236c:	af04      	add	r7, sp, #16
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	70fb      	strb	r3, [r7, #3]
	char cmdString[15] = "";
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	f107 0310 	add.w	r3, r7, #16
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t pressed = app_model_model.footswitches[index].press.presetNr;
 8002386:	4b24      	ldr	r3, [pc, #144]	; (8002418 <sendFootswitch+0xb0>)
 8002388:	68d9      	ldr	r1, [r3, #12]
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	440b      	add	r3, r1
 8002396:	789b      	ldrb	r3, [r3, #2]
 8002398:	77fb      	strb	r3, [r7, #31]
	uint8_t released = app_model_model.footswitches[index].release.presetNr;
 800239a:	4b1f      	ldr	r3, [pc, #124]	; (8002418 <sendFootswitch+0xb0>)
 800239c:	68d9      	ldr	r1, [r3, #12]
 800239e:	78fa      	ldrb	r2, [r7, #3]
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	440b      	add	r3, r1
 80023aa:	799b      	ldrb	r3, [r3, #6]
 80023ac:	77bb      	strb	r3, [r7, #30]
	uint8_t holdshort = app_model_model.footswitches[index].holdShort.presetNr;
 80023ae:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <sendFootswitch+0xb0>)
 80023b0:	68d9      	ldr	r1, [r3, #12]
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	440b      	add	r3, r1
 80023be:	7a9b      	ldrb	r3, [r3, #10]
 80023c0:	777b      	strb	r3, [r7, #29]
	uint8_t holdlong = app_model_model.footswitches[index].holdLong.presetNr;
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <sendFootswitch+0xb0>)
 80023c4:	68d9      	ldr	r1, [r3, #12]
 80023c6:	78fa      	ldrb	r2, [r7, #3]
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4413      	add	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	440b      	add	r3, r1
 80023d2:	7b9b      	ldrb	r3, [r3, #14]
 80023d4:	773b      	strb	r3, [r7, #28]
	snprintf(cmdString, sizeof(cmdString),"#F0%02x%02x%02x%02x%02x0\r", index, pressed, released, holdshort, holdlong);
 80023d6:	78fd      	ldrb	r5, [r7, #3]
 80023d8:	7ffb      	ldrb	r3, [r7, #31]
 80023da:	7fba      	ldrb	r2, [r7, #30]
 80023dc:	7f79      	ldrb	r1, [r7, #29]
 80023de:	7f38      	ldrb	r0, [r7, #28]
 80023e0:	f107 040c 	add.w	r4, r7, #12
 80023e4:	9003      	str	r0, [sp, #12]
 80023e6:	9102      	str	r1, [sp, #8]
 80023e8:	9201      	str	r2, [sp, #4]
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	462b      	mov	r3, r5
 80023ee:	4a0b      	ldr	r2, [pc, #44]	; (800241c <sendFootswitch+0xb4>)
 80023f0:	210f      	movs	r1, #15
 80023f2:	4620      	mov	r0, r4
 80023f4:	f00a f988 	bl	800c708 <sniprintf>
	cmdString[14] = '\r';
 80023f8:	230d      	movs	r3, #13
 80023fa:	76bb      	strb	r3, [r7, #26]
	sendToInterface(self, activeInterface, cmdString);
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <sendFootswitch+0xb8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f107 020c 	add.w	r2, r7, #12
 8002404:	4619      	mov	r1, r3
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f96e 	bl	80026e8 <sendToInterface>
	return true;
 800240c:	2301      	movs	r3, #1
}
 800240e:	4618      	mov	r0, r3
 8002410:	3720      	adds	r7, #32
 8002412:	46bd      	mov	sp, r7
 8002414:	bdb0      	pop	{r4, r5, r7, pc}
 8002416:	bf00      	nop
 8002418:	200010a0 	.word	0x200010a0
 800241c:	0800d120 	.word	0x0800d120
 8002420:	20007330 	.word	0x20007330

08002424 <parsePreset>:

static bool parsePreset(eal_task_Task *self, char *command){
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
	char cmdIdx = command[2];
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	789b      	ldrb	r3, [r3, #2]
 8002432:	75fb      	strb	r3, [r7, #23]
	char prNrString[3];
	prNrString[0] = command[3]; prNrString[1] = command[4];
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	78db      	ldrb	r3, [r3, #3]
 8002438:	733b      	strb	r3, [r7, #12]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	791b      	ldrb	r3, [r3, #4]
 800243e:	737b      	strb	r3, [r7, #13]
	long prNr = strtol(prNrString, NULL, 16);
 8002440:	f107 030c 	add.w	r3, r7, #12
 8002444:	2210      	movs	r2, #16
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f00a fa27 	bl	800c89c <strtol>
 800244e:	6138      	str	r0, [r7, #16]
	if(cmdIdx == '0'){
 8002450:	7dfb      	ldrb	r3, [r7, #23]
 8002452:	2b30      	cmp	r3, #48	; 0x30
 8002454:	d10f      	bne.n	8002476 <parsePreset+0x52>
		strncpy (&app_model_model.presets[prNr].name[0], &command[5], 9);
 8002456:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <parsePreset+0x9c>)
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	4413      	add	r3, r2
 8002466:	4618      	mov	r0, r3
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	3305      	adds	r3, #5
 800246c:	2209      	movs	r2, #9
 800246e:	4619      	mov	r1, r3
 8002470:	f00a f97e 	bl	800c770 <strncpy>
 8002474:	e01f      	b.n	80024b6 <parsePreset+0x92>
	}else if(cmdIdx == '1'){
 8002476:	7dfb      	ldrb	r3, [r7, #23]
 8002478:	2b31      	cmp	r3, #49	; 0x31
 800247a:	d113      	bne.n	80024a4 <parsePreset+0x80>
		strncpy (&app_model_model.presets[prNr].name[9], &command[5], 9);
 800247c:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <parsePreset+0x9c>)
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	f103 0009 	add.w	r0, r3, #9
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	3305      	adds	r3, #5
 8002494:	2209      	movs	r2, #9
 8002496:	4619      	mov	r1, r3
 8002498:	f00a f96a 	bl	800c770 <strncpy>
		app_model_model.dirty = true;
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <parsePreset+0x9c>)
 800249e:	2201      	movs	r2, #1
 80024a0:	741a      	strb	r2, [r3, #16]
 80024a2:	e008      	b.n	80024b6 <parsePreset+0x92>
	}else if(cmdIdx == 'T'){
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
 80024a6:	2b54      	cmp	r3, #84	; 0x54
 80024a8:	d105      	bne.n	80024b6 <parsePreset+0x92>
		sendDmxPreset(self, prNr);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	4619      	mov	r1, r3
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f93d 	bl	8002730 <sendDmxPreset>
	}
	return true;
 80024b6:	2301      	movs	r3, #1
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	200010a0 	.word	0x200010a0

080024c4 <sendPresetName>:
static bool sendPresetName(eal_task_Task *self, uint8_t index){
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	70fb      	strb	r3, [r7, #3]
	char cmdString[15] = {' '};
 80024d0:	f107 0308 	add.w	r3, r7, #8
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	f8c3 200b 	str.w	r2, [r3, #11]
 80024e0:	2320      	movs	r3, #32
 80024e2:	723b      	strb	r3, [r7, #8]
	memset(cmdString,' ', sizeof(cmdString));
 80024e4:	f107 0308 	add.w	r3, r7, #8
 80024e8:	220f      	movs	r2, #15
 80024ea:	2120      	movs	r1, #32
 80024ec:	4618      	mov	r0, r3
 80024ee:	f00a f902 	bl	800c6f6 <memset>
	snprintf(cmdString, 6,"#P0%02x", index);
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	f107 0008 	add.w	r0, r7, #8
 80024f8:	4a3a      	ldr	r2, [pc, #232]	; (80025e4 <sendPresetName+0x120>)
 80024fa:	2106      	movs	r1, #6
 80024fc:	f00a f904 	bl	800c708 <sniprintf>
	cmdString[5] = ' ';
 8002500:	2320      	movs	r3, #32
 8002502:	737b      	strb	r3, [r7, #13]
	uint8_t length = strlen(&app_model_model.presets[index].name[0]);
 8002504:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <sendPresetName+0x124>)
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f7fd fe63 	bl	80001e0 <strlen>
 800251a:	4603      	mov	r3, r0
 800251c:	75fb      	strb	r3, [r7, #23]
	if(length > 9) length = 9;
 800251e:	7dfb      	ldrb	r3, [r7, #23]
 8002520:	2b09      	cmp	r3, #9
 8002522:	d901      	bls.n	8002528 <sendPresetName+0x64>
 8002524:	2309      	movs	r3, #9
 8002526:	75fb      	strb	r3, [r7, #23]
	strncpy(&cmdString[5], &app_model_model.presets[index].name[0], length);
 8002528:	4b2f      	ldr	r3, [pc, #188]	; (80025e8 <sendPresetName+0x124>)
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	78fb      	ldrb	r3, [r7, #3]
 800252e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	4619      	mov	r1, r3
 800253a:	7dfa      	ldrb	r2, [r7, #23]
 800253c:	f107 0308 	add.w	r3, r7, #8
 8002540:	3305      	adds	r3, #5
 8002542:	4618      	mov	r0, r3
 8002544:	f00a f914 	bl	800c770 <strncpy>
	cmdString[14] = '\r';
 8002548:	230d      	movs	r3, #13
 800254a:	75bb      	strb	r3, [r7, #22]
	sendToInterface(self, activeInterface, cmdString);
 800254c:	4b27      	ldr	r3, [pc, #156]	; (80025ec <sendPresetName+0x128>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f107 0208 	add.w	r2, r7, #8
 8002554:	4619      	mov	r1, r3
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f8c6 	bl	80026e8 <sendToInterface>
	memset(cmdString,' ', sizeof(cmdString));
 800255c:	f107 0308 	add.w	r3, r7, #8
 8002560:	220f      	movs	r2, #15
 8002562:	2120      	movs	r1, #32
 8002564:	4618      	mov	r0, r3
 8002566:	f00a f8c6 	bl	800c6f6 <memset>
	snprintf(cmdString, 6,"#P1%02x", index);
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	f107 0008 	add.w	r0, r7, #8
 8002570:	4a1f      	ldr	r2, [pc, #124]	; (80025f0 <sendPresetName+0x12c>)
 8002572:	2106      	movs	r1, #6
 8002574:	f00a f8c8 	bl	800c708 <sniprintf>
	cmdString[5] = ' ';
 8002578:	2320      	movs	r3, #32
 800257a:	737b      	strb	r3, [r7, #13]
	length = strlen(&app_model_model.presets[index].name[9]);
 800257c:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <sendPresetName+0x124>)
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	3309      	adds	r3, #9
 800258e:	4618      	mov	r0, r3
 8002590:	f7fd fe26 	bl	80001e0 <strlen>
 8002594:	4603      	mov	r3, r0
 8002596:	75fb      	strb	r3, [r7, #23]
	if(length > 9) length = 9;
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	2b09      	cmp	r3, #9
 800259c:	d901      	bls.n	80025a2 <sendPresetName+0xde>
 800259e:	2309      	movs	r3, #9
 80025a0:	75fb      	strb	r3, [r7, #23]
	strncpy(&cmdString[5], &app_model_model.presets[index].name[9], length);
 80025a2:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <sendPresetName+0x124>)
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	f103 0109 	add.w	r1, r3, #9
 80025b6:	7dfa      	ldrb	r2, [r7, #23]
 80025b8:	f107 0308 	add.w	r3, r7, #8
 80025bc:	3305      	adds	r3, #5
 80025be:	4618      	mov	r0, r3
 80025c0:	f00a f8d6 	bl	800c770 <strncpy>
	cmdString[14] = '\r';
 80025c4:	230d      	movs	r3, #13
 80025c6:	75bb      	strb	r3, [r7, #22]
	sendToInterface(self, activeInterface, cmdString);
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <sendPresetName+0x128>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f107 0208 	add.w	r2, r7, #8
 80025d0:	4619      	mov	r1, r3
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f888 	bl	80026e8 <sendToInterface>
	return true;
 80025d8:	2301      	movs	r3, #1
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	0800d13c 	.word	0x0800d13c
 80025e8:	200010a0 	.word	0x200010a0
 80025ec:	20007330 	.word	0x20007330
 80025f0:	0800d144 	.word	0x0800d144

080025f4 <parseLoadConfig>:

static bool parseLoadConfig(eal_task_Task *self, char *command){
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
	char cmdIdx = command[2];
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	789b      	ldrb	r3, [r3, #2]
 8002602:	73fb      	strb	r3, [r7, #15]
	if(cmdIdx == '0'){
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	2b30      	cmp	r3, #48	; 0x30
 8002608:	d105      	bne.n	8002616 <parseLoadConfig+0x22>
		uploadCmdCounter = 0;
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <parseLoadConfig+0x30>)
 800260c:	2200      	movs	r2, #0
 800260e:	801a      	strh	r2, [r3, #0]
		uploadState = upload_PRESET_NAME;
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <parseLoadConfig+0x34>)
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
	}
	return true;
 8002616:	2301      	movs	r3, #1
}
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	2000733c 	.word	0x2000733c
 8002628:	2000733a 	.word	0x2000733a

0800262c <uploadConfig>:

static void uploadConfig(eal_task_Task *self){
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	if(uploadState == upload_NONE) return;
 8002634:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <uploadConfig+0xb4>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d04c      	beq.n	80026d6 <uploadConfig+0xaa>
	else if(uploadState == upload_PRESET_NAME){
 800263c:	4b28      	ldr	r3, [pc, #160]	; (80026e0 <uploadConfig+0xb4>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d117      	bne.n	8002674 <uploadConfig+0x48>
		sendPresetName(self, uploadCmdCounter);
 8002644:	4b27      	ldr	r3, [pc, #156]	; (80026e4 <uploadConfig+0xb8>)
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff ff39 	bl	80024c4 <sendPresetName>
		if(++uploadCmdCounter >= app_cfg_NMBR_PRESETS){
 8002652:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <uploadConfig+0xb8>)
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	3301      	adds	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <uploadConfig+0xb8>)
 800265c:	801a      	strh	r2, [r3, #0]
 800265e:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <uploadConfig+0xb8>)
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	2b09      	cmp	r3, #9
 8002664:	d938      	bls.n	80026d8 <uploadConfig+0xac>
			uploadCmdCounter = 0;
 8002666:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <uploadConfig+0xb8>)
 8002668:	2200      	movs	r2, #0
 800266a:	801a      	strh	r2, [r3, #0]
			uploadState = upload_PRESET_TRANSITION;
 800266c:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <uploadConfig+0xb4>)
 800266e:	2202      	movs	r2, #2
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	e031      	b.n	80026d8 <uploadConfig+0xac>
		}
	}else if(uploadState == upload_PRESET_TRANSITION){
 8002674:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <uploadConfig+0xb4>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d110      	bne.n	800269e <uploadConfig+0x72>
		//TODO: Send transition
		if(++uploadCmdCounter >= app_cfg_NMBR_PRESETS*app_cfg_NMBR_TRANSITIONS){
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <uploadConfig+0xb8>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	3301      	adds	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <uploadConfig+0xb8>)
 8002686:	801a      	strh	r2, [r3, #0]
 8002688:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <uploadConfig+0xb8>)
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	2bc7      	cmp	r3, #199	; 0xc7
 800268e:	d923      	bls.n	80026d8 <uploadConfig+0xac>
			uploadCmdCounter = 0;
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <uploadConfig+0xb8>)
 8002692:	2200      	movs	r2, #0
 8002694:	801a      	strh	r2, [r3, #0]
			uploadState = upload_FOOTSWITCH;
 8002696:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <uploadConfig+0xb4>)
 8002698:	2203      	movs	r2, #3
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	e01c      	b.n	80026d8 <uploadConfig+0xac>
		}
	}else if(uploadState == upload_FOOTSWITCH){
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <uploadConfig+0xb4>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d118      	bne.n	80026d8 <uploadConfig+0xac>
		sendFootswitch(self, uploadCmdCounter);
 80026a6:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <uploadConfig+0xb8>)
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	4619      	mov	r1, r3
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff fe5a 	bl	8002368 <sendFootswitch>
		if(++uploadCmdCounter >= app_cfg_NMBR_BTNS-1){
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <uploadConfig+0xb8>)
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <uploadConfig+0xb8>)
 80026be:	801a      	strh	r2, [r3, #0]
 80026c0:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <uploadConfig+0xb8>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d907      	bls.n	80026d8 <uploadConfig+0xac>
			uploadCmdCounter = 0;
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <uploadConfig+0xb8>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	801a      	strh	r2, [r3, #0]
			uploadState = upload_NONE;
 80026ce:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <uploadConfig+0xb4>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e000      	b.n	80026d8 <uploadConfig+0xac>
	if(uploadState == upload_NONE) return;
 80026d6:	bf00      	nop
		}
	}
}
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	2000733a 	.word	0x2000733a
 80026e4:	2000733c 	.word	0x2000733c

080026e8 <sendToInterface>:

/* Helper ----------------------------------------------------------------------*/
static void sendToInterface(eal_task_Task *self, app_interface_CmdInterface *interface, char *data){
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
	if(interface == &usbInterface) {
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4a0a      	ldr	r2, [pc, #40]	; (8002720 <sendToInterface+0x38>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d102      	bne.n	8002702 <sendToInterface+0x1a>
		app_usb_writeStringToBuffer(data);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f925 	bl	800294c <app_usb_writeStringToBuffer>
		//TODO: Write new line
	}
	if(interface == &btInterface) {
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	4a07      	ldr	r2, [pc, #28]	; (8002724 <sendToInterface+0x3c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d106      	bne.n	8002718 <sendToInterface+0x30>
		app_uart_writeStringToBuffer(data, &uart4TxBuf, huart4.Instance);
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <sendToInterface+0x40>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	4906      	ldr	r1, [pc, #24]	; (800272c <sendToInterface+0x44>)
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f9a3 	bl	8002a5e <app_uart_writeStringToBuffer>
		//TODO: Write new line
	}
}
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	2000731c 	.word	0x2000731c
 8002724:	20007308 	.word	0x20007308
 8002728:	20007a50 	.word	0x20007a50
 800272c:	200000dc 	.word	0x200000dc

08002730 <sendDmxPreset>:

static void sendDmxPreset(eal_task_Task *self, uint8_t preset){
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	70fb      	strb	r3, [r7, #3]
	if(self->sendMsg == NULL) return;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d018      	beq.n	8002776 <sendDmxPreset+0x46>
	msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_ACTION(preset), app_cfg_dmx_preset_TRIGGER_ENABLE, 0, 0);
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	b29b      	uxth	r3, r3
 8002748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800274c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002750:	b29b      	uxth	r3, r3
 8002752:	813b      	strh	r3, [r7, #8]
 8002754:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002758:	817b      	strh	r3, [r7, #10]
 800275a:	2350      	movs	r3, #80	; 0x50
 800275c:	733b      	strb	r3, [r7, #12]
 800275e:	2300      	movs	r3, #0
 8002760:	737b      	strb	r3, [r7, #13]
 8002762:	2300      	movs	r3, #0
 8002764:	81fb      	strh	r3, [r7, #14]
	self->sendMsg(self, &newMessage);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f107 0208 	add.w	r2, r7, #8
 800276e:	4611      	mov	r1, r2
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	4798      	blx	r3
 8002774:	e000      	b.n	8002778 <sendDmxPreset+0x48>
	if(self->sendMsg == NULL) return;
 8002776:	bf00      	nop
}
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <UART4_IRQHandler>:

/*IRQs ----------------------------------------------------------------------*/
void UART4_IRQHandler(void){
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
	app_uart_irqHandler(huart4.Instance, &uart4RxBuf, &uart4TxBuf);
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <UART4_IRQHandler+0x18>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a04      	ldr	r2, [pc, #16]	; (800279c <UART4_IRQHandler+0x1c>)
 800278a:	4905      	ldr	r1, [pc, #20]	; (80027a0 <UART4_IRQHandler+0x20>)
 800278c:	4618      	mov	r0, r3
 800278e:	f000 f99f 	bl	8002ad0 <app_uart_irqHandler>
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20007a50 	.word	0x20007a50
 800279c:	200000dc 	.word	0x200000dc
 80027a0:	200000e8 	.word	0x200000e8

080027a4 <app_usb_init>:
*******************************************************************************/
void usb_irqRxHandler(char *pData, uint16_t size);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_usb_init(){
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
	usb_registerRxCallback(usb_irqRxHandler);
 80027a8:	4805      	ldr	r0, [pc, #20]	; (80027c0 <app_usb_init+0x1c>)
 80027aa:	f009 fad5 	bl	800bd58 <usb_registerRxCallback>
	linkStatus = app_usb_LINK_DOWN;
 80027ae:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <app_usb_init+0x20>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
	app_usb_timer = 0;
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <app_usb_init+0x24>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	080029ad 	.word	0x080029ad
 80027c4:	20007358 	.word	0x20007358
 80027c8:	2000735c 	.word	0x2000735c

080027cc <app_usb_rxBufferInit>:

void app_usb_rxBufferInit(char *data, uint16_t size){
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
	app_usb_rxBuf.in = 0;
 80027d8:	4b08      	ldr	r3, [pc, #32]	; (80027fc <app_usb_rxBufferInit+0x30>)
 80027da:	2200      	movs	r2, #0
 80027dc:	801a      	strh	r2, [r3, #0]
	app_usb_rxBuf.out = 0;
 80027de:	4b07      	ldr	r3, [pc, #28]	; (80027fc <app_usb_rxBufferInit+0x30>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	805a      	strh	r2, [r3, #2]
	app_usb_rxBuf.size = size;
 80027e4:	4a05      	ldr	r2, [pc, #20]	; (80027fc <app_usb_rxBufferInit+0x30>)
 80027e6:	887b      	ldrh	r3, [r7, #2]
 80027e8:	8093      	strh	r3, [r2, #4]
	app_usb_rxBuf.data = data;
 80027ea:	4a04      	ldr	r2, [pc, #16]	; (80027fc <app_usb_rxBufferInit+0x30>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6093      	str	r3, [r2, #8]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	2000734c 	.word	0x2000734c

08002800 <app_usb_txBufferInit>:

void app_usb_txBufferInit(char *data, uint16_t size){
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
	app_usb_txBuf.in = 0;
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <app_usb_txBufferInit+0x30>)
 800280e:	2200      	movs	r2, #0
 8002810:	801a      	strh	r2, [r3, #0]
	app_usb_txBuf.out = 0;
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <app_usb_txBufferInit+0x30>)
 8002814:	2200      	movs	r2, #0
 8002816:	805a      	strh	r2, [r3, #2]
	app_usb_txBuf.size = size;
 8002818:	4a05      	ldr	r2, [pc, #20]	; (8002830 <app_usb_txBufferInit+0x30>)
 800281a:	887b      	ldrh	r3, [r7, #2]
 800281c:	8093      	strh	r3, [r2, #4]
	app_usb_txBuf.data = data;
 800281e:	4a04      	ldr	r2, [pc, #16]	; (8002830 <app_usb_txBufferInit+0x30>)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6093      	str	r3, [r2, #8]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	20007340 	.word	0x20007340

08002834 <app_usb_txLoop>:

void app_usb_setLink(usb_app_Link link){
	linkStatus = link;
}
/*Main Loop*/
void app_usb_txLoop(){
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
	char usbString[MAX_USB_TX_SIZE] = {0};	//TODO: Check new line
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
	char usbData;
	int size = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
	if(HAL_GPIO_ReadPin(I_USB_VBUS_GPIO_Port, I_USB_VBUS_Pin)) linkStatus = app_usb_LINK_UP;
 800284a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800284e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002852:	f000 fe25 	bl	80034a0 <HAL_GPIO_ReadPin>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <app_usb_txLoop+0x30>
 800285c:	4b1e      	ldr	r3, [pc, #120]	; (80028d8 <app_usb_txLoop+0xa4>)
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
 8002862:	e002      	b.n	800286a <app_usb_txLoop+0x36>
	else linkStatus = app_usb_LINK_DOWN;
 8002864:	4b1c      	ldr	r3, [pc, #112]	; (80028d8 <app_usb_txLoop+0xa4>)
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
	for(size = 0; size < MAX_USB_TX_SIZE; ++size){
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	e00f      	b.n	8002890 <app_usb_txLoop+0x5c>
		if(app_usb_getCharFromTxBuffer(&usbData) == ringbuffer_OK){
 8002870:	1cfb      	adds	r3, r7, #3
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f858 	bl	8002928 <app_usb_getCharFromTxBuffer>
 8002878:	4603      	mov	r3, r0
 800287a:	2b01      	cmp	r3, #1
 800287c:	d10c      	bne.n	8002898 <app_usb_txLoop+0x64>
			usbString[size] = usbData;
 800287e:	78f9      	ldrb	r1, [r7, #3]
 8002880:	1d3a      	adds	r2, r7, #4
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	4413      	add	r3, r2
 8002886:	460a      	mov	r2, r1
 8002888:	701a      	strb	r2, [r3, #0]
	for(size = 0; size < MAX_USB_TX_SIZE; ++size){
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	3301      	adds	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b0f      	cmp	r3, #15
 8002894:	ddec      	ble.n	8002870 <app_usb_txLoop+0x3c>
 8002896:	e000      	b.n	800289a <app_usb_txLoop+0x66>
		}else break;
 8002898:	bf00      	nop
	}
	if(size > 0) {
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	dd18      	ble.n	80028d2 <app_usb_txLoop+0x9e>
		if(linkStatus == app_usb_LINK_UP){
 80028a0:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <app_usb_txLoop+0xa4>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d114      	bne.n	80028d2 <app_usb_txLoop+0x9e>
			app_usb_timer = APP_USB_TIMEOUT;
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <app_usb_txLoop+0xa8>)
 80028aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028ae:	601a      	str	r2, [r3, #0]
			while(app_usb_timer){
 80028b0:	e009      	b.n	80028c6 <app_usb_txLoop+0x92>
				if(CDC_Transmit_FS((uint8_t*)usbString, size) == USBD_OK) return;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f009 fa26 	bl	800bd0c <CDC_Transmit_FS>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d004      	beq.n	80028d0 <app_usb_txLoop+0x9c>
			while(app_usb_timer){
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <app_usb_txLoop+0xa8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f1      	bne.n	80028b2 <app_usb_txLoop+0x7e>
 80028ce:	e000      	b.n	80028d2 <app_usb_txLoop+0x9e>
				if(CDC_Transmit_FS((uint8_t*)usbString, size) == USBD_OK) return;
 80028d0:	bf00      	nop
			}
		}
	}
}
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20007358 	.word	0x20007358
 80028dc:	2000735c 	.word	0x2000735c

080028e0 <app_usb_1ms>:

void app_usb_1ms(){
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
	if(app_usb_timer > 0) --app_usb_timer;
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <app_usb_1ms+0x20>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	dd04      	ble.n	80028f6 <app_usb_1ms+0x16>
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <app_usb_1ms+0x20>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	4a03      	ldr	r2, [pc, #12]	; (8002900 <app_usb_1ms+0x20>)
 80028f4:	6013      	str	r3, [r2, #0]
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	2000735c 	.word	0x2000735c

08002904 <app_usb_getCharFromRxBuffer>:
uint8_t app_usb_getCharFromRxBuffer(char *data){
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
   uint8_t bufferState = RINGBUFFER_cOut(data, &app_usb_rxBuf);
 800290c:	4905      	ldr	r1, [pc, #20]	; (8002924 <app_usb_getCharFromRxBuffer+0x20>)
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f006 fe54 	bl	80095bc <RINGBUFFER_cOut>
 8002914:	4603      	mov	r3, r0
 8002916:	73fb      	strb	r3, [r7, #15]
   if(bufferState == ringbuffer_NO_BUF);//TODO error handling
   return bufferState;
 8002918:	7bfb      	ldrb	r3, [r7, #15]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	2000734c 	.word	0x2000734c

08002928 <app_usb_getCharFromTxBuffer>:

uint8_t app_usb_getCharFromTxBuffer(char *data){
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
   uint8_t bufferState = RINGBUFFER_cOut(data, &app_usb_txBuf);
 8002930:	4905      	ldr	r1, [pc, #20]	; (8002948 <app_usb_getCharFromTxBuffer+0x20>)
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f006 fe42 	bl	80095bc <RINGBUFFER_cOut>
 8002938:	4603      	mov	r3, r0
 800293a:	73fb      	strb	r3, [r7, #15]
   if(bufferState == ringbuffer_NO_BUF);//TODO error handling
   return bufferState;
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20007340 	.word	0x20007340

0800294c <app_usb_writeStringToBuffer>:
   uint8_t bufferState = RINGBUFFER_cIn(data, &app_usb_txBuf);
   if(bufferState != ringbuffer_OK); 		//TODO: Error Handling
   if(bufferState != ringbuffer_NO_BUF);	//TODO: Error Handling
   return bufferState;
}
uint8_t app_usb_writeStringToBuffer(const char *string){
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	uint16_t size = strlen(string);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7fd fc43 	bl	80001e0 <strlen>
 800295a:	4603      	mov	r3, r0
 800295c:	817b      	strh	r3, [r7, #10]
	uint8_t bufferState = ringbuffer_OK;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
	uint16_t oldIn = app_usb_txBuf.in;
 8002962:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <app_usb_writeStringToBuffer+0x5c>)
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	813b      	strh	r3, [r7, #8]
	for(uint16_t i = 0; i < size; ++i){
 8002968:	2300      	movs	r3, #0
 800296a:	81bb      	strh	r3, [r7, #12]
 800296c:	e013      	b.n	8002996 <app_usb_writeStringToBuffer+0x4a>
		bufferState = RINGBUFFER_cIn(string[i], &app_usb_txBuf);
 800296e:	89bb      	ldrh	r3, [r7, #12]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	490c      	ldr	r1, [pc, #48]	; (80029a8 <app_usb_writeStringToBuffer+0x5c>)
 8002978:	4618      	mov	r0, r3
 800297a:	f006 fde2 	bl	8009542 <RINGBUFFER_cIn>
 800297e:	4603      	mov	r3, r0
 8002980:	73fb      	strb	r3, [r7, #15]
		if(bufferState == ringbuffer_FULL) {
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d103      	bne.n	8002990 <app_usb_writeStringToBuffer+0x44>
			app_usb_txBuf.in = oldIn;                //load old in position
 8002988:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <app_usb_writeStringToBuffer+0x5c>)
 800298a:	893b      	ldrh	r3, [r7, #8]
 800298c:	8013      	strh	r3, [r2, #0]
			break;
 800298e:	e006      	b.n	800299e <app_usb_writeStringToBuffer+0x52>
	for(uint16_t i = 0; i < size; ++i){
 8002990:	89bb      	ldrh	r3, [r7, #12]
 8002992:	3301      	adds	r3, #1
 8002994:	81bb      	strh	r3, [r7, #12]
 8002996:	89ba      	ldrh	r2, [r7, #12]
 8002998:	897b      	ldrh	r3, [r7, #10]
 800299a:	429a      	cmp	r2, r3
 800299c:	d3e7      	bcc.n	800296e <app_usb_writeStringToBuffer+0x22>
		}
		if(bufferState != ringbuffer_NO_BUF); //TODO: Error Handling
	}
	return bufferState;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20007340 	.word	0x20007340

080029ac <usb_irqRxHandler>:


/* IRQ Handler*/
void usb_irqRxHandler(char *pData, uint16_t size){
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
	char buffer_state;
	for(uint16_t x = 0; x < size; x++) buffer_state = RINGBUFFER_cIn(pData[x], &app_usb_rxBuf);
 80029b8:	2300      	movs	r3, #0
 80029ba:	81fb      	strh	r3, [r7, #14]
 80029bc:	e00c      	b.n	80029d8 <usb_irqRxHandler+0x2c>
 80029be:	89fb      	ldrh	r3, [r7, #14]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	4413      	add	r3, r2
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	4908      	ldr	r1, [pc, #32]	; (80029e8 <usb_irqRxHandler+0x3c>)
 80029c8:	4618      	mov	r0, r3
 80029ca:	f006 fdba 	bl	8009542 <RINGBUFFER_cIn>
 80029ce:	4603      	mov	r3, r0
 80029d0:	737b      	strb	r3, [r7, #13]
 80029d2:	89fb      	ldrh	r3, [r7, #14]
 80029d4:	3301      	adds	r3, #1
 80029d6:	81fb      	strh	r3, [r7, #14]
 80029d8:	89fa      	ldrh	r2, [r7, #14]
 80029da:	887b      	ldrh	r3, [r7, #2]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d3ee      	bcc.n	80029be <usb_irqRxHandler+0x12>
	if(buffer_state != ringbuffer_OK); //TODO: Error Handling
}
 80029e0:	bf00      	nop
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	2000734c 	.word	0x2000734c

080029ec <app_uart_bufferInit>:
 */
#include "app_uart.h"
#include "string.h"


void app_uart_bufferInit(stRingBuf *buf, char *data, uint16_t size){
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80fb      	strh	r3, [r7, #6]
	buf->in = 0;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	801a      	strh	r2, [r3, #0]
	buf->out = 0;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	805a      	strh	r2, [r3, #2]
	buf->size = size;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	88fa      	ldrh	r2, [r7, #6]
 8002a0a:	809a      	strh	r2, [r3, #4]
	buf->data = data;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	609a      	str	r2, [r3, #8]
}
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <app_uart_enableReceiveInt>:
void app_uart_enableReceiveInt(USART_TypeDef *uartHandler){
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
	uartHandler->CR1 |= USART_CR1_RXNEIE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f043 0220 	orr.w	r2, r3, #32
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	601a      	str	r2, [r3, #0]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <app_uart_getCharFromBuffer>:
uint8_t app_uart_getCharFromBuffer(char *data, stRingBuf *buf){
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
   uint8_t bufferState = RINGBUFFER_cOut(data, buf);
 8002a48:	6839      	ldr	r1, [r7, #0]
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f006 fdb6 	bl	80095bc <RINGBUFFER_cOut>
 8002a50:	4603      	mov	r3, r0
 8002a52:	73fb      	strb	r3, [r7, #15]
   if(bufferState == ringbuffer_NO_BUF){
	   //TODO error handling
   }
   return bufferState;
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <app_uart_writeStringToBuffer>:
	   //TODO error handling
   }
   if(bufferState != ringbuffer_NO_BUF) uartHandler->CR1 |= USART_CR1_TXEIE;
   return bufferState;
}
uint8_t app_uart_writeStringToBuffer(const char *string, stRingBuf *buf, USART_TypeDef *uartHandler){
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
	uint16_t size = strlen(string);
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f7fd fbb8 	bl	80001e0 <strlen>
 8002a70:	4603      	mov	r3, r0
 8002a72:	827b      	strh	r3, [r7, #18]
	uint8_t bufferState = ringbuffer_OK;
 8002a74:	2301      	movs	r3, #1
 8002a76:	75fb      	strb	r3, [r7, #23]
	uint16_t oldIn = buf->in;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	823b      	strh	r3, [r7, #16]
	for(uint16_t i = 0; i < size; ++i){
 8002a7e:	2300      	movs	r3, #0
 8002a80:	82bb      	strh	r3, [r7, #20]
 8002a82:	e01c      	b.n	8002abe <app_uart_writeStringToBuffer+0x60>
		bufferState = RINGBUFFER_cIn(string[i], buf);
 8002a84:	8abb      	ldrh	r3, [r7, #20]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4413      	add	r3, r2
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	68b9      	ldr	r1, [r7, #8]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f006 fd57 	bl	8009542 <RINGBUFFER_cIn>
 8002a94:	4603      	mov	r3, r0
 8002a96:	75fb      	strb	r3, [r7, #23]
		if(bufferState == ringbuffer_FULL) {
 8002a98:	7dfb      	ldrb	r3, [r7, #23]
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d103      	bne.n	8002aa6 <app_uart_writeStringToBuffer+0x48>
			buf->in = oldIn;                //load old in position
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	8a3a      	ldrh	r2, [r7, #16]
 8002aa2:	801a      	strh	r2, [r3, #0]
			break;
 8002aa4:	e00f      	b.n	8002ac6 <app_uart_writeStringToBuffer+0x68>
		}
		if(bufferState != ringbuffer_NO_BUF) uartHandler->CR1 |= USART_CR1_TXEIE;
 8002aa6:	7dfb      	ldrb	r3, [r7, #23]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <app_uart_writeStringToBuffer+0x5a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < size; ++i){
 8002ab8:	8abb      	ldrh	r3, [r7, #20]
 8002aba:	3301      	adds	r3, #1
 8002abc:	82bb      	strh	r3, [r7, #20]
 8002abe:	8aba      	ldrh	r2, [r7, #20]
 8002ac0:	8a7b      	ldrh	r3, [r7, #18]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d3de      	bcc.n	8002a84 <app_uart_writeStringToBuffer+0x26>
	}
	return bufferState;
 8002ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <app_uart_irqHandler>:


void app_uart_irqHandler(USART_TypeDef *uartHandler, stRingBuf *rxBuf, stRingBuf *txBuf){
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
		volatile uint16_t ISR;
		char bufferState;

		ISR = uartHandler->ISR;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	82bb      	strh	r3, [r7, #20]
		if(ISR & USART_ISR_RXNE){ //Bit 5 = Read Data Register Not Empty in SR
 8002ae4:	8abb      	ldrh	r3, [r7, #20]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <app_uart_irqHandler+0x34>
			bufferState = RINGBUFFER_cIn(uartHandler->RDR, rxBuf);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f006 fd21 	bl	8009542 <RINGBUFFER_cIn>
 8002b00:	4603      	mov	r3, r0
 8002b02:	75fb      	strb	r3, [r7, #23]
			if(bufferState != ringbuffer_OK){
				//TODO Error handling
			}
		}
		if(ISR & USART_ISR_TXE){
 8002b04:	8abb      	ldrh	r3, [r7, #20]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01e      	beq.n	8002b4e <app_uart_irqHandler+0x7e>
			uartHandler->ISR &= ~USART_ISR_TXE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	61da      	str	r2, [r3, #28]
			char data;
			bufferState = RINGBUFFER_cOut(&data, txBuf);
 8002b1c:	f107 0313 	add.w	r3, r7, #19
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f006 fd4a 	bl	80095bc <RINGBUFFER_cOut>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	75fb      	strb	r3, [r7, #23]
			if(bufferState == ringbuffer_EMPTY){
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d106      	bne.n	8002b40 <app_uart_irqHandler+0x70>
				uartHandler->CR1 &= ~USART_CR1_TXEIE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	e006      	b.n	8002b4e <app_uart_irqHandler+0x7e>
			}else if (bufferState == ringbuffer_NO_BUF){
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <app_uart_irqHandler+0x7e>

			}else{
				uartHandler->TDR = data;
 8002b46:	7cfb      	ldrb	r3, [r7, #19]
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	851a      	strh	r2, [r3, #40]	; 0x28
			}
		}
		if(ISR & USART_ISR_ORE){
 8002b4e:	8abb      	ldrh	r3, [r7, #20]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <app_uart_irqHandler+0x96>
			uartHandler->ICR |= USART_ICR_ORECF;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f043 0208 	orr.w	r2, r3, #8
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	621a      	str	r2, [r3, #32]
		}
	}
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <app_main>:
		.sendMsg = sendMessage, .receiveMsg = app_eeprom_receiveMsg
};
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_main(){
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
	msgTask.enable = true;
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <app_main+0x4c>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	701a      	strb	r2, [r3, #0]
	msgTask.init(&msgTask);
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <app_main+0x4c>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	480f      	ldr	r0, [pc, #60]	; (8002bbc <app_main+0x4c>)
 8002b80:	4798      	blx	r3
	while (1){
		msgTask.mainLoop(&msgTask);
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <app_main+0x4c>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	480d      	ldr	r0, [pc, #52]	; (8002bbc <app_main+0x4c>)
 8002b88:	4798      	blx	r3
		btnTask.mainLoop(&btnTask);
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <app_main+0x50>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	480c      	ldr	r0, [pc, #48]	; (8002bc0 <app_main+0x50>)
 8002b90:	4798      	blx	r3
		footcontrolTask.mainLoop(&footcontrolTask);
 8002b92:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <app_main+0x54>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	480b      	ldr	r0, [pc, #44]	; (8002bc4 <app_main+0x54>)
 8002b98:	4798      	blx	r3
		eepromTask.mainLoop(&eepromTask);
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <app_main+0x58>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	480a      	ldr	r0, [pc, #40]	; (8002bc8 <app_main+0x58>)
 8002ba0:	4798      	blx	r3
		dmxTask.mainLoop(&dmxTask);
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <app_main+0x5c>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4809      	ldr	r0, [pc, #36]	; (8002bcc <app_main+0x5c>)
 8002ba8:	4798      	blx	r3
		dmxPresetTask.mainLoop(&dmxPresetTask);
 8002baa:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <app_main+0x60>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	4808      	ldr	r0, [pc, #32]	; (8002bd0 <app_main+0x60>)
 8002bb0:	4798      	blx	r3
		interfaceTask.mainLoop(&interfaceTask);
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <app_main+0x64>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	4807      	ldr	r0, [pc, #28]	; (8002bd4 <app_main+0x64>)
 8002bb8:	4798      	blx	r3
		msgTask.mainLoop(&msgTask);
 8002bba:	e7e2      	b.n	8002b82 <app_main+0x12>
 8002bbc:	200010c4 	.word	0x200010c4
 8002bc0:	2000110c 	.word	0x2000110c
 8002bc4:	20001124 	.word	0x20001124
 8002bc8:	20001154 	.word	0x20001154
 8002bcc:	200010f4 	.word	0x200010f4
 8002bd0:	200010dc 	.word	0x200010dc
 8002bd4:	2000113c 	.word	0x2000113c

08002bd8 <app_1ms>:
	 }
}

void app_1ms(){
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
	static uint16_t timer100ms = 0;
	static uint16_t timer500ms = 0;
	app_usb_1ms();
 8002bdc:	f7ff fe80 	bl	80028e0 <app_usb_1ms>
	dmx_1ms(&dmx1Out);
 8002be0:	4826      	ldr	r0, [pc, #152]	; (8002c7c <app_1ms+0xa4>)
 8002be2:	f006 f801 	bl	8008be8 <dmx_1ms>
	if(dmxTask.timer) dmxTask.timer(&dmxTask, true);
 8002be6:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <app_1ms+0xa8>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d004      	beq.n	8002bf8 <app_1ms+0x20>
 8002bee:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <app_1ms+0xa8>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	4822      	ldr	r0, [pc, #136]	; (8002c80 <app_1ms+0xa8>)
 8002bf6:	4798      	blx	r3
	if(dmxPresetTask.timer) dmxPresetTask.timer(&dmxPresetTask, true);
 8002bf8:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <app_1ms+0xac>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d004      	beq.n	8002c0a <app_1ms+0x32>
 8002c00:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <app_1ms+0xac>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	2101      	movs	r1, #1
 8002c06:	481f      	ldr	r0, [pc, #124]	; (8002c84 <app_1ms+0xac>)
 8002c08:	4798      	blx	r3
	if(btnTask.timer) btnTask.timer(&btnTask, true);
 8002c0a:	4b1f      	ldr	r3, [pc, #124]	; (8002c88 <app_1ms+0xb0>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d004      	beq.n	8002c1c <app_1ms+0x44>
 8002c12:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <app_1ms+0xb0>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	2101      	movs	r1, #1
 8002c18:	481b      	ldr	r0, [pc, #108]	; (8002c88 <app_1ms+0xb0>)
 8002c1a:	4798      	blx	r3
	if(eepromTask.timer) eepromTask.timer(&eepromTask, true);
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <app_1ms+0xb4>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d004      	beq.n	8002c2e <app_1ms+0x56>
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <app_1ms+0xb4>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2101      	movs	r1, #1
 8002c2a:	4818      	ldr	r0, [pc, #96]	; (8002c8c <app_1ms+0xb4>)
 8002c2c:	4798      	blx	r3
	if(interfaceTask.timer) interfaceTask.timer(&interfaceTask, true);
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <app_1ms+0xb8>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d004      	beq.n	8002c40 <app_1ms+0x68>
 8002c36:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <app_1ms+0xb8>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	4814      	ldr	r0, [pc, #80]	; (8002c90 <app_1ms+0xb8>)
 8002c3e:	4798      	blx	r3
	if(++timer100ms >= 100){
 8002c40:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <app_1ms+0xbc>)
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	3301      	adds	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <app_1ms+0xbc>)
 8002c4a:	801a      	strh	r2, [r3, #0]
 8002c4c:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <app_1ms+0xbc>)
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	2b63      	cmp	r3, #99	; 0x63
 8002c52:	d902      	bls.n	8002c5a <app_1ms+0x82>
		timer100ms = 0;
 8002c54:	4b0f      	ldr	r3, [pc, #60]	; (8002c94 <app_1ms+0xbc>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	801a      	strh	r2, [r3, #0]
	}
	if(++timer500ms >= 500){
 8002c5a:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <app_1ms+0xc0>)
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <app_1ms+0xc0>)
 8002c64:	801a      	strh	r2, [r3, #0]
 8002c66:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <app_1ms+0xc0>)
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c6e:	d302      	bcc.n	8002c76 <app_1ms+0x9e>
		timer500ms = 0;
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <app_1ms+0xc0>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	801a      	strh	r2, [r3, #0]
	}

}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000000 	.word	0x20000000
 8002c80:	200010f4 	.word	0x200010f4
 8002c84:	200010dc 	.word	0x200010dc
 8002c88:	2000110c 	.word	0x2000110c
 8002c8c:	20001154 	.word	0x20001154
 8002c90:	2000113c 	.word	0x2000113c
 8002c94:	20007562 	.word	0x20007562
 8002c98:	20007564 	.word	0x20007564

08002c9c <app_process>:
/* Application Task ------------------------------------------------------------*/
static void app_process(eal_task_Task *self){
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
	msg_Message buffer = {0};
 8002ca4:	f107 030c 	add.w	r3, r7, #12
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
	msg_Message *newMessage = msg_getNext(&buffer, &msgBuf);
 8002cae:	f107 030c 	add.w	r3, r7, #12
 8002cb2:	4908      	ldr	r1, [pc, #32]	; (8002cd4 <app_process+0x38>)
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f006 fb95 	bl	80093e4 <msg_getNext>
 8002cba:	6178      	str	r0, [r7, #20]
	if(newMessage != NULL){
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d004      	beq.n	8002ccc <app_process+0x30>
		self->receiveMsg(self, newMessage);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	6979      	ldr	r1, [r7, #20]
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4798      	blx	r3
	}
}
 8002ccc:	bf00      	nop
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	200010b4 	.word	0x200010b4

08002cd8 <app_receiveMsg>:
static void app_receiveMsg(eal_task_Task *self, msg_Message *message){
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
	dmxTask.receiveMsg(&dmxTask, message);
 8002ce2:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <app_receiveMsg+0x50>)
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	6839      	ldr	r1, [r7, #0]
 8002ce8:	480f      	ldr	r0, [pc, #60]	; (8002d28 <app_receiveMsg+0x50>)
 8002cea:	4798      	blx	r3
	dmxPresetTask.receiveMsg(&dmxPresetTask, message);
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <app_receiveMsg+0x54>)
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	6839      	ldr	r1, [r7, #0]
 8002cf2:	480e      	ldr	r0, [pc, #56]	; (8002d2c <app_receiveMsg+0x54>)
 8002cf4:	4798      	blx	r3
	btnTask.receiveMsg(&btnTask, message);
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <app_receiveMsg+0x58>)
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	6839      	ldr	r1, [r7, #0]
 8002cfc:	480c      	ldr	r0, [pc, #48]	; (8002d30 <app_receiveMsg+0x58>)
 8002cfe:	4798      	blx	r3
	eepromTask.receiveMsg(&eepromTask, message);
 8002d00:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <app_receiveMsg+0x5c>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	6839      	ldr	r1, [r7, #0]
 8002d06:	480b      	ldr	r0, [pc, #44]	; (8002d34 <app_receiveMsg+0x5c>)
 8002d08:	4798      	blx	r3
	footcontrolTask.receiveMsg(&footcontrolTask, message);
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <app_receiveMsg+0x60>)
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	6839      	ldr	r1, [r7, #0]
 8002d10:	4809      	ldr	r0, [pc, #36]	; (8002d38 <app_receiveMsg+0x60>)
 8002d12:	4798      	blx	r3
	interfaceTask.receiveMsg(&interfaceTask, message);
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <app_receiveMsg+0x64>)
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	6839      	ldr	r1, [r7, #0]
 8002d1a:	4808      	ldr	r0, [pc, #32]	; (8002d3c <app_receiveMsg+0x64>)
 8002d1c:	4798      	blx	r3
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200010f4 	.word	0x200010f4
 8002d2c:	200010dc 	.word	0x200010dc
 8002d30:	2000110c 	.word	0x2000110c
 8002d34:	20001154 	.word	0x20001154
 8002d38:	20001124 	.word	0x20001124
 8002d3c:	2000113c 	.word	0x2000113c

08002d40 <app_init>:

static void app_init(eal_task_Task *self){
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	eepromTask.enable = true;
 8002d48:	4b22      	ldr	r3, [pc, #136]	; (8002dd4 <app_init+0x94>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
	if(eepromTask.init) eepromTask.init(&eepromTask);
 8002d4e:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <app_init+0x94>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <app_init+0x1e>
 8002d56:	4b1f      	ldr	r3, [pc, #124]	; (8002dd4 <app_init+0x94>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	481e      	ldr	r0, [pc, #120]	; (8002dd4 <app_init+0x94>)
 8002d5c:	4798      	blx	r3
	dmxTask.enable = true;
 8002d5e:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <app_init+0x98>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
	if(dmxTask.init) dmxTask.init(&dmxTask);
 8002d64:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <app_init+0x98>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <app_init+0x34>
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	; (8002dd8 <app_init+0x98>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	4819      	ldr	r0, [pc, #100]	; (8002dd8 <app_init+0x98>)
 8002d72:	4798      	blx	r3
	dmxPresetTask.enable = true;
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <app_init+0x9c>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	701a      	strb	r2, [r3, #0]
	if(dmxPresetTask.init) dmxPresetTask.init(&dmxPresetTask);
 8002d7a:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <app_init+0x9c>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <app_init+0x4a>
 8002d82:	4b16      	ldr	r3, [pc, #88]	; (8002ddc <app_init+0x9c>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	4815      	ldr	r0, [pc, #84]	; (8002ddc <app_init+0x9c>)
 8002d88:	4798      	blx	r3
	btnTask.enable = true;
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <app_init+0xa0>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]
	if(btnTask.init) btnTask.init(&btnTask);
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <app_init+0xa0>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <app_init+0x60>
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <app_init+0xa0>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4810      	ldr	r0, [pc, #64]	; (8002de0 <app_init+0xa0>)
 8002d9e:	4798      	blx	r3
	footcontrolTask.enable = true;
 8002da0:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <app_init+0xa4>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
	if(footcontrolTask.init) footcontrolTask.init(&footcontrolTask);
 8002da6:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <app_init+0xa4>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <app_init+0x76>
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <app_init+0xa4>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	480c      	ldr	r0, [pc, #48]	; (8002de4 <app_init+0xa4>)
 8002db4:	4798      	blx	r3
	interfaceTask.enable = true;
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <app_init+0xa8>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
	if(interfaceTask.init) interfaceTask.init(&interfaceTask);
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <app_init+0xa8>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <app_init+0x8c>
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <app_init+0xa8>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4807      	ldr	r0, [pc, #28]	; (8002de8 <app_init+0xa8>)
 8002dca:	4798      	blx	r3

}
 8002dcc:	bf00      	nop
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20001154 	.word	0x20001154
 8002dd8:	200010f4 	.word	0x200010f4
 8002ddc:	200010dc 	.word	0x200010dc
 8002de0:	2000110c 	.word	0x2000110c
 8002de4:	20001124 	.word	0x20001124
 8002de8:	2000113c 	.word	0x2000113c

08002dec <sendMessage>:

/* Messages --------------------------------------------------------------------*/
static void sendMessage(eal_task_Task *self, msg_Message *message){
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
	uint8_t msgBufState = 1;
 8002df6:	2301      	movs	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
	if(msg_isAction(message))msgBufState = msg_writeAction(message, &msgBuf);
 8002dfa:	6838      	ldr	r0, [r7, #0]
 8002dfc:	f006 fb8f 	bl	800951e <msg_isAction>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d006      	beq.n	8002e14 <sendMessage+0x28>
 8002e06:	490c      	ldr	r1, [pc, #48]	; (8002e38 <sendMessage+0x4c>)
 8002e08:	6838      	ldr	r0, [r7, #0]
 8002e0a:	f006 fad2 	bl	80093b2 <msg_writeAction>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	73fb      	strb	r3, [r7, #15]
 8002e12:	e005      	b.n	8002e20 <sendMessage+0x34>
	else msgBufState = msg_writeEvent(message, &msgBuf);
 8002e14:	4908      	ldr	r1, [pc, #32]	; (8002e38 <sendMessage+0x4c>)
 8002e16:	6838      	ldr	r0, [r7, #0]
 8002e18:	f006 fab4 	bl	8009384 <msg_writeEvent>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	73fb      	strb	r3, [r7, #15]
	if(msgBufState != 1) messageBufferError(msgBufState);
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d003      	beq.n	8002e2e <sendMessage+0x42>
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 f807 	bl	8002e3c <messageBufferError>
}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	200010b4 	.word	0x200010b4

08002e3c <messageBufferError>:
static void messageBufferError(uint8_t state){
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]
//	if(state == NO_BUF) USART3_WriteStringToBuffer("ERROR: MSG NO BUF\r\n", 18);
//	else if(state == FULL) USART3_WriteStringToBuffer("ERROR: MSG BUF OVR\r\n", 19);
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <HAL_TIM_PeriodElapsedCallback>:

/* Callback's ---------------------------------------------------------------------*/


/* IRQs ---------------------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == dmx1Out.txTimer) dmx_irqTxTimerHandler(&dmx1Out);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d102      	bne.n	8002e6e <HAL_TIM_PeriodElapsedCallback+0x1a>
 8002e68:	4803      	ldr	r0, [pc, #12]	; (8002e78 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002e6a:	f005 ff37 	bl	8008cdc <dmx_irqTxTimerHandler>
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000000 	.word	0x20000000

08002e7c <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void){
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  if (__HAL_TIM_GET_FLAG(&htim16, TIM_FLAG_UPDATE) != RESET){
 8002e80:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d104      	bne.n	8002e98 <TIM1_UP_TIM16_IRQHandler+0x1c>
	  __HAL_TIM_CLEAR_IT(&htim16, TIM_IT_UPDATE);
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f06f 0201 	mvn.w	r2, #1
 8002e96:	611a      	str	r2, [r3, #16]
	  //i2c_soft_timer_us(&softI2C2);
  }
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20007998 	.word	0x20007998

08002ea8 <HAL_GPIO_EXTI_Callback>:

bool usbConnected = false;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == I_USB_VBUS_Pin) {
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb8:	d10f      	bne.n	8002eda <HAL_GPIO_EXTI_Callback+0x32>
		if(HAL_GPIO_ReadPin(I_USB_VBUS_GPIO_Port, I_USB_VBUS_Pin)) usbConnected = true;
 8002eba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ec2:	f000 faed 	bl	80034a0 <HAL_GPIO_ReadPin>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_EXTI_Callback+0x2c>
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
		else usbConnected = false;
	}
}
 8002ed2:	e002      	b.n	8002eda <HAL_GPIO_EXTI_Callback+0x32>
		else usbConnected = false;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20007560 	.word	0x20007560

08002ee8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ef2:	2003      	movs	r0, #3
 8002ef4:	f000 f918 	bl	8003128 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ef8:	2000      	movs	r0, #0
 8002efa:	f000 f80d 	bl	8002f18 <HAL_InitTick>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	71fb      	strb	r3, [r7, #7]
 8002f08:	e001      	b.n	8002f0e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f0a:	f008 f9ad 	bl	800b268 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	73fb      	strb	r3, [r7, #15]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <HAL_InitTick+0x40>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0c      	ldr	r2, [pc, #48]	; (8002f5c <HAL_InitTick+0x44>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	099b      	lsrs	r3, r3, #6
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 f92e 	bl	8003192 <HAL_SYSTICK_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <HAL_InitTick+0x2a>
  {
    status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
 8002f40:	e005      	b.n	8002f4e <HAL_InitTick+0x36>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8002f42:	2200      	movs	r2, #0
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4a:	f000 f8f8 	bl	800313e <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	2000127c 	.word	0x2000127c
 8002f5c:	10624dd3 	.word	0x10624dd3

08002f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  uwTick++;
 8002f64:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <HAL_IncTick+0x18>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	4a03      	ldr	r2, [pc, #12]	; (8002f78 <HAL_IncTick+0x18>)
 8002f6c:	6013      	str	r3, [r2, #0]
}
 8002f6e:	bf00      	nop
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	20007798 	.word	0x20007798

08002f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <HAL_GetTick+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20007798 	.word	0x20007798

08002f94 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <NVIC_SetPriorityGrouping+0x44>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fc6:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <NVIC_SetPriorityGrouping+0x44>)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	60d3      	str	r3, [r2, #12]
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <NVIC_GetPriorityGrouping+0x18>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	0a1b      	lsrs	r3, r3, #8
 8002fe6:	f003 0307 	and.w	r3, r3, #7
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003002:	4909      	ldr	r1, [pc, #36]	; (8003028 <NVIC_EnableIRQ+0x30>)
 8003004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	79fa      	ldrb	r2, [r7, #7]
 800300c:	f002 021f 	and.w	r2, r2, #31
 8003010:	2001      	movs	r0, #1
 8003012:	fa00 f202 	lsl.w	r2, r0, r2
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000e100 	.word	0xe000e100

0800302c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303c:	2b00      	cmp	r3, #0
 800303e:	da0b      	bge.n	8003058 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003040:	490d      	ldr	r1, [pc, #52]	; (8003078 <NVIC_SetPriority+0x4c>)
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	3b04      	subs	r3, #4
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	0112      	lsls	r2, r2, #4
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	440b      	add	r3, r1
 8003054:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003056:	e009      	b.n	800306c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003058:	4908      	ldr	r1, [pc, #32]	; (800307c <NVIC_SetPriority+0x50>)
 800305a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	0112      	lsls	r2, r2, #4
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	440b      	add	r3, r1
 8003068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000ed00 	.word	0xe000ed00
 800307c:	e000e100 	.word	0xe000e100

08003080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003080:	b480      	push	{r7}
 8003082:	b089      	sub	sp, #36	; 0x24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f1c3 0307 	rsb	r3, r3, #7
 800309a:	2b04      	cmp	r3, #4
 800309c:	bf28      	it	cs
 800309e:	2304      	movcs	r3, #4
 80030a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d902      	bls.n	80030b0 <NVIC_EncodePriority+0x30>
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3b03      	subs	r3, #3
 80030ae:	e000      	b.n	80030b2 <NVIC_EncodePriority+0x32>
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	2201      	movs	r2, #1
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	1e5a      	subs	r2, r3, #1
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	401a      	ands	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c6:	2101      	movs	r1, #1
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	1e59      	subs	r1, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d4:	4313      	orrs	r3, r2
         );
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3724      	adds	r7, #36	; 0x24
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030f4:	d301      	bcc.n	80030fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030f6:	2301      	movs	r3, #1
 80030f8:	e00f      	b.n	800311a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030fa:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <SysTick_Config+0x40>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3b01      	subs	r3, #1
 8003100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003102:	210f      	movs	r1, #15
 8003104:	f04f 30ff 	mov.w	r0, #4294967295
 8003108:	f7ff ff90 	bl	800302c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <SysTick_Config+0x40>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003112:	4b04      	ldr	r3, [pc, #16]	; (8003124 <SysTick_Config+0x40>)
 8003114:	2207      	movs	r2, #7
 8003116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	e000e010 	.word	0xe000e010

08003128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff ff2f 	bl	8002f94 <NVIC_SetPriorityGrouping>
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b086      	sub	sp, #24
 8003142:	af00      	add	r7, sp, #0
 8003144:	4603      	mov	r3, r0
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003150:	f7ff ff44 	bl	8002fdc <NVIC_GetPriorityGrouping>
 8003154:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	6978      	ldr	r0, [r7, #20]
 800315c:	f7ff ff90 	bl	8003080 <NVIC_EncodePriority>
 8003160:	4602      	mov	r2, r0
 8003162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff5f 	bl	800302c <NVIC_SetPriority>
}
 800316e:	bf00      	nop
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	4603      	mov	r3, r0
 800317e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ff37 	bl	8002ff8 <NVIC_EnableIRQ>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff ffa2 	bl	80030e4 <SysTick_Config>
 80031a0:	4603      	mov	r3, r0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ba:	e154      	b.n	8003466 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	2101      	movs	r1, #1
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	4013      	ands	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8146 	beq.w	8003460 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x38>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b12      	cmp	r3, #18
 80031e2:	d123      	bne.n	800322c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	08da      	lsrs	r2, r3, #3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3208      	adds	r2, #8
 80031ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	220f      	movs	r2, #15
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	08da      	lsrs	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3208      	adds	r2, #8
 8003226:	6939      	ldr	r1, [r7, #16]
 8003228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2203      	movs	r2, #3
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4013      	ands	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0203 	and.w	r2, r3, #3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d00b      	beq.n	8003280 <HAL_GPIO_Init+0xd4>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d007      	beq.n	8003280 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003274:	2b11      	cmp	r3, #17
 8003276:	d003      	beq.n	8003280 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b12      	cmp	r3, #18
 800327e:	d130      	bne.n	80032e2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	2203      	movs	r2, #3
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4013      	ands	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032b6:	2201      	movs	r2, #1
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4013      	ands	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	f003 0201 	and.w	r2, r3, #1
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	2203      	movs	r2, #3
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4013      	ands	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 80a0 	beq.w	8003460 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003320:	4a58      	ldr	r2, [pc, #352]	; (8003484 <HAL_GPIO_Init+0x2d8>)
 8003322:	4b58      	ldr	r3, [pc, #352]	; (8003484 <HAL_GPIO_Init+0x2d8>)
 8003324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	6613      	str	r3, [r2, #96]	; 0x60
 800332c:	4b55      	ldr	r3, [pc, #340]	; (8003484 <HAL_GPIO_Init+0x2d8>)
 800332e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003338:	4a53      	ldr	r2, [pc, #332]	; (8003488 <HAL_GPIO_Init+0x2dc>)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	089b      	lsrs	r3, r3, #2
 800333e:	3302      	adds	r3, #2
 8003340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003344:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	220f      	movs	r2, #15
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4013      	ands	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003362:	d019      	beq.n	8003398 <HAL_GPIO_Init+0x1ec>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a49      	ldr	r2, [pc, #292]	; (800348c <HAL_GPIO_Init+0x2e0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d013      	beq.n	8003394 <HAL_GPIO_Init+0x1e8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a48      	ldr	r2, [pc, #288]	; (8003490 <HAL_GPIO_Init+0x2e4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00d      	beq.n	8003390 <HAL_GPIO_Init+0x1e4>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a47      	ldr	r2, [pc, #284]	; (8003494 <HAL_GPIO_Init+0x2e8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d007      	beq.n	800338c <HAL_GPIO_Init+0x1e0>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a46      	ldr	r2, [pc, #280]	; (8003498 <HAL_GPIO_Init+0x2ec>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d101      	bne.n	8003388 <HAL_GPIO_Init+0x1dc>
 8003384:	2304      	movs	r3, #4
 8003386:	e008      	b.n	800339a <HAL_GPIO_Init+0x1ee>
 8003388:	2307      	movs	r3, #7
 800338a:	e006      	b.n	800339a <HAL_GPIO_Init+0x1ee>
 800338c:	2303      	movs	r3, #3
 800338e:	e004      	b.n	800339a <HAL_GPIO_Init+0x1ee>
 8003390:	2302      	movs	r3, #2
 8003392:	e002      	b.n	800339a <HAL_GPIO_Init+0x1ee>
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <HAL_GPIO_Init+0x1ee>
 8003398:	2300      	movs	r3, #0
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	f002 0203 	and.w	r2, r2, #3
 80033a0:	0092      	lsls	r2, r2, #2
 80033a2:	4093      	lsls	r3, r2
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033aa:	4937      	ldr	r1, [pc, #220]	; (8003488 <HAL_GPIO_Init+0x2dc>)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	089b      	lsrs	r3, r3, #2
 80033b0:	3302      	adds	r3, #2
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033b8:	4b38      	ldr	r3, [pc, #224]	; (800349c <HAL_GPIO_Init+0x2f0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4013      	ands	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033dc:	4a2f      	ldr	r2, [pc, #188]	; (800349c <HAL_GPIO_Init+0x2f0>)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80033e2:	4b2e      	ldr	r3, [pc, #184]	; (800349c <HAL_GPIO_Init+0x2f0>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	43db      	mvns	r3, r3
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4013      	ands	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003406:	4a25      	ldr	r2, [pc, #148]	; (800349c <HAL_GPIO_Init+0x2f0>)
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800340c:	4b23      	ldr	r3, [pc, #140]	; (800349c <HAL_GPIO_Init+0x2f0>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	43db      	mvns	r3, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4013      	ands	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003430:	4a1a      	ldr	r2, [pc, #104]	; (800349c <HAL_GPIO_Init+0x2f0>)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003436:	4b19      	ldr	r3, [pc, #100]	; (800349c <HAL_GPIO_Init+0x2f0>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800345a:	4a10      	ldr	r2, [pc, #64]	; (800349c <HAL_GPIO_Init+0x2f0>)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3301      	adds	r3, #1
 8003464:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	f47f aea3 	bne.w	80031bc <HAL_GPIO_Init+0x10>
  }
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000
 8003488:	40010000 	.word	0x40010000
 800348c:	48000400 	.word	0x48000400
 8003490:	48000800 	.word	0x48000800
 8003494:	48000c00 	.word	0x48000c00
 8003498:	48001000 	.word	0x48001000
 800349c:	40010400 	.word	0x40010400

080034a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	887b      	ldrh	r3, [r7, #2]
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
 80034bc:	e001      	b.n	80034c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	807b      	strh	r3, [r7, #2]
 80034dc:	4613      	mov	r3, r2
 80034de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034e0:	787b      	ldrb	r3, [r7, #1]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034e6:	887a      	ldrh	r2, [r7, #2]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034ec:	e002      	b.n	80034f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034ee:	887a      	ldrh	r2, [r7, #2]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800350a:	4b08      	ldr	r3, [pc, #32]	; (800352c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	4013      	ands	r3, r2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d006      	beq.n	8003524 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003516:	4a05      	ldr	r2, [pc, #20]	; (800352c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fcc2 	bl	8002ea8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40010400 	.word	0x40010400

08003530 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e080      	b.n	8003644 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f007 fcf6 	bl	800af48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2224      	movs	r2, #36	; 0x24
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	6812      	ldr	r2, [r2, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6852      	ldr	r2, [r2, #4]
 800357c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003580:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	6892      	ldr	r2, [r2, #8]
 800358c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003590:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d107      	bne.n	80035aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6892      	ldr	r2, [r2, #8]
 80035a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	e006      	b.n	80035b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6892      	ldr	r2, [r2, #8]
 80035b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d104      	bne.n	80035ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	68d2      	ldr	r2, [r2, #12]
 80035e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6911      	ldr	r1, [r2, #16]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6952      	ldr	r2, [r2, #20]
 80035fa:	4311      	orrs	r1, r2
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6992      	ldr	r2, [r2, #24]
 8003600:	0212      	lsls	r2, r2, #8
 8003602:	430a      	orrs	r2, r1
 8003604:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	69d1      	ldr	r1, [r2, #28]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6a12      	ldr	r2, [r2, #32]
 8003612:	430a      	orrs	r2, r1
 8003614:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	f042 0201 	orr.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	461a      	mov	r2, r3
 8003658:	460b      	mov	r3, r1
 800365a:	817b      	strh	r3, [r7, #10]
 800365c:	4613      	mov	r3, r2
 800365e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b20      	cmp	r3, #32
 800366a:	f040 80da 	bne.w	8003822 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_I2C_Master_Transmit+0x30>
 8003678:	2302      	movs	r3, #2
 800367a:	e0d3      	b.n	8003824 <HAL_I2C_Master_Transmit+0x1d8>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003684:	f7ff fc7a 	bl	8002f7c <HAL_GetTick>
 8003688:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	2319      	movs	r3, #25
 8003690:	2201      	movs	r2, #1
 8003692:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 fbc6 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e0be      	b.n	8003824 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2221      	movs	r2, #33	; 0x21
 80036aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2210      	movs	r2, #16
 80036b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	893a      	ldrh	r2, [r7, #8]
 80036c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2bff      	cmp	r3, #255	; 0xff
 80036d6:	d90e      	bls.n	80036f6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	22ff      	movs	r2, #255	; 0xff
 80036dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	8979      	ldrh	r1, [r7, #10]
 80036e6:	4b51      	ldr	r3, [pc, #324]	; (800382c <HAL_I2C_Master_Transmit+0x1e0>)
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fcbc 	bl	800406c <I2C_TransferConfig>
 80036f4:	e06c      	b.n	80037d0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003704:	b2da      	uxtb	r2, r3
 8003706:	8979      	ldrh	r1, [r7, #10]
 8003708:	4b48      	ldr	r3, [pc, #288]	; (800382c <HAL_I2C_Master_Transmit+0x1e0>)
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fcab 	bl	800406c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003716:	e05b      	b.n	80037d0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	6a39      	ldr	r1, [r7, #32]
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 fbc3 	bl	8003ea8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e07b      	b.n	8003824 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003734:	7812      	ldrb	r2, [r2, #0]
 8003736:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d034      	beq.n	80037d0 <HAL_I2C_Master_Transmit+0x184>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376a:	2b00      	cmp	r3, #0
 800376c:	d130      	bne.n	80037d0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	2200      	movs	r2, #0
 8003776:	2180      	movs	r1, #128	; 0x80
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fb55 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e04d      	b.n	8003824 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	2bff      	cmp	r3, #255	; 0xff
 8003790:	d90e      	bls.n	80037b0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	22ff      	movs	r2, #255	; 0xff
 8003796:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379c:	b2da      	uxtb	r2, r3
 800379e:	8979      	ldrh	r1, [r7, #10]
 80037a0:	2300      	movs	r3, #0
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 fc5f 	bl	800406c <I2C_TransferConfig>
 80037ae:	e00f      	b.n	80037d0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	8979      	ldrh	r1, [r7, #10]
 80037c2:	2300      	movs	r3, #0
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 fc4e 	bl	800406c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d19e      	bne.n	8003718 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	6a39      	ldr	r1, [r7, #32]
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fba2 	bl	8003f28 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e01a      	b.n	8003824 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2220      	movs	r2, #32
 80037f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6859      	ldr	r1, [r3, #4]
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_I2C_Master_Transmit+0x1e4>)
 8003802:	400b      	ands	r3, r1
 8003804:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	e000      	b.n	8003824 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003822:	2302      	movs	r3, #2
  }
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	80002000 	.word	0x80002000
 8003830:	fe00e800 	.word	0xfe00e800

08003834 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	4608      	mov	r0, r1
 800383e:	4611      	mov	r1, r2
 8003840:	461a      	mov	r2, r3
 8003842:	4603      	mov	r3, r0
 8003844:	817b      	strh	r3, [r7, #10]
 8003846:	460b      	mov	r3, r1
 8003848:	813b      	strh	r3, [r7, #8]
 800384a:	4613      	mov	r3, r2
 800384c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b20      	cmp	r3, #32
 8003858:	f040 80f9 	bne.w	8003a4e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <HAL_I2C_Mem_Write+0x34>
 8003862:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003864:	2b00      	cmp	r3, #0
 8003866:	d105      	bne.n	8003874 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800386e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0ed      	b.n	8003a50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_I2C_Mem_Write+0x4e>
 800387e:	2302      	movs	r3, #2
 8003880:	e0e6      	b.n	8003a50 <HAL_I2C_Mem_Write+0x21c>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800388a:	f7ff fb77 	bl	8002f7c <HAL_GetTick>
 800388e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	2319      	movs	r3, #25
 8003896:	2201      	movs	r2, #1
 8003898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 fac3 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0d1      	b.n	8003a50 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2221      	movs	r2, #33	; 0x21
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2240      	movs	r2, #64	; 0x40
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a3a      	ldr	r2, [r7, #32]
 80038c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038d4:	88f8      	ldrh	r0, [r7, #6]
 80038d6:	893a      	ldrh	r2, [r7, #8]
 80038d8:	8979      	ldrh	r1, [r7, #10]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	4603      	mov	r3, r0
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f9d3 	bl	8003c90 <I2C_RequestMemoryWrite>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0a9      	b.n	8003a50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	2bff      	cmp	r3, #255	; 0xff
 8003904:	d90e      	bls.n	8003924 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	22ff      	movs	r2, #255	; 0xff
 800390a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003910:	b2da      	uxtb	r2, r3
 8003912:	8979      	ldrh	r1, [r7, #10]
 8003914:	2300      	movs	r3, #0
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 fba5 	bl	800406c <I2C_TransferConfig>
 8003922:	e00f      	b.n	8003944 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	b2da      	uxtb	r2, r3
 8003934:	8979      	ldrh	r1, [r7, #10]
 8003936:	2300      	movs	r3, #0
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 fb94 	bl	800406c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 faad 	bl	8003ea8 <I2C_WaitOnTXISFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e07b      	b.n	8003a50 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003960:	7812      	ldrb	r2, [r2, #0]
 8003962:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d034      	beq.n	80039fc <HAL_I2C_Mem_Write+0x1c8>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003996:	2b00      	cmp	r3, #0
 8003998:	d130      	bne.n	80039fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a0:	2200      	movs	r2, #0
 80039a2:	2180      	movs	r1, #128	; 0x80
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 fa3f 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e04d      	b.n	8003a50 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2bff      	cmp	r3, #255	; 0xff
 80039bc:	d90e      	bls.n	80039dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	22ff      	movs	r2, #255	; 0xff
 80039c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	8979      	ldrh	r1, [r7, #10]
 80039cc:	2300      	movs	r3, #0
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 fb49 	bl	800406c <I2C_TransferConfig>
 80039da:	e00f      	b.n	80039fc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	8979      	ldrh	r1, [r7, #10]
 80039ee:	2300      	movs	r3, #0
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 fb38 	bl	800406c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d19e      	bne.n	8003944 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fa8c 	bl	8003f28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e01a      	b.n	8003a50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6859      	ldr	r1, [r3, #4]
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <HAL_I2C_Mem_Write+0x224>)
 8003a2e:	400b      	ands	r3, r1
 8003a30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e000      	b.n	8003a50 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a4e:	2302      	movs	r3, #2
  }
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	fe00e800 	.word	0xfe00e800

08003a5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	4608      	mov	r0, r1
 8003a66:	4611      	mov	r1, r2
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	817b      	strh	r3, [r7, #10]
 8003a6e:	460b      	mov	r3, r1
 8003a70:	813b      	strh	r3, [r7, #8]
 8003a72:	4613      	mov	r3, r2
 8003a74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	f040 80fd 	bne.w	8003c7e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <HAL_I2C_Mem_Read+0x34>
 8003a8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d105      	bne.n	8003a9c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0f1      	b.n	8003c80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_I2C_Mem_Read+0x4e>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e0ea      	b.n	8003c80 <HAL_I2C_Mem_Read+0x224>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ab2:	f7ff fa63 	bl	8002f7c <HAL_GetTick>
 8003ab6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	2319      	movs	r3, #25
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f9af 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0d5      	b.n	8003c80 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2222      	movs	r2, #34	; 0x22
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2240      	movs	r2, #64	; 0x40
 8003ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a3a      	ldr	r2, [r7, #32]
 8003aee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003af4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003afc:	88f8      	ldrh	r0, [r7, #6]
 8003afe:	893a      	ldrh	r2, [r7, #8]
 8003b00:	8979      	ldrh	r1, [r7, #10]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	9301      	str	r3, [sp, #4]
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f913 	bl	8003d38 <I2C_RequestMemoryRead>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0ad      	b.n	8003c80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2bff      	cmp	r3, #255	; 0xff
 8003b2c:	d90e      	bls.n	8003b4c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	22ff      	movs	r2, #255	; 0xff
 8003b32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	8979      	ldrh	r1, [r7, #10]
 8003b3c:	4b52      	ldr	r3, [pc, #328]	; (8003c88 <HAL_I2C_Mem_Read+0x22c>)
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 fa91 	bl	800406c <I2C_TransferConfig>
 8003b4a:	e00f      	b.n	8003b6c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	8979      	ldrh	r1, [r7, #10]
 8003b5e:	4b4a      	ldr	r3, [pc, #296]	; (8003c88 <HAL_I2C_Mem_Read+0x22c>)
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 fa80 	bl	800406c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b72:	2200      	movs	r2, #0
 8003b74:	2104      	movs	r1, #4
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f956 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e07c      	b.n	8003c80 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d034      	beq.n	8003c2c <HAL_I2C_Mem_Read+0x1d0>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d130      	bne.n	8003c2c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2180      	movs	r1, #128	; 0x80
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f927 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e04d      	b.n	8003c80 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2bff      	cmp	r3, #255	; 0xff
 8003bec:	d90e      	bls.n	8003c0c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	22ff      	movs	r2, #255	; 0xff
 8003bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	8979      	ldrh	r1, [r7, #10]
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 fa31 	bl	800406c <I2C_TransferConfig>
 8003c0a:	e00f      	b.n	8003c2c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	8979      	ldrh	r1, [r7, #10]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fa20 	bl	800406c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d19a      	bne.n	8003b6c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f974 	bl	8003f28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e01a      	b.n	8003c80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6859      	ldr	r1, [r3, #4]
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_I2C_Mem_Read+0x230>)
 8003c5e:	400b      	ands	r3, r1
 8003c60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e000      	b.n	8003c80 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c7e:	2302      	movs	r3, #2
  }
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	80002400 	.word	0x80002400
 8003c8c:	fe00e800 	.word	0xfe00e800

08003c90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	4608      	mov	r0, r1
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	817b      	strh	r3, [r7, #10]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	813b      	strh	r3, [r7, #8]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003caa:	88fb      	ldrh	r3, [r7, #6]
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	8979      	ldrh	r1, [r7, #10]
 8003cb0:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <I2C_RequestMemoryWrite+0xa4>)
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f9d7 	bl	800406c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	69b9      	ldr	r1, [r7, #24]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f8f0 	bl	8003ea8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e02c      	b.n	8003d2c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d105      	bne.n	8003ce4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	893a      	ldrh	r2, [r7, #8]
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ce2:	e015      	b.n	8003d10 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	893a      	ldrh	r2, [r7, #8]
 8003cea:	0a12      	lsrs	r2, r2, #8
 8003cec:	b292      	uxth	r2, r2
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	69b9      	ldr	r1, [r7, #24]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 f8d6 	bl	8003ea8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e012      	b.n	8003d2c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	893a      	ldrh	r2, [r7, #8]
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2200      	movs	r2, #0
 8003d18:	2180      	movs	r1, #128	; 0x80
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f884 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	80002000 	.word	0x80002000

08003d38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	4608      	mov	r0, r1
 8003d42:	4611      	mov	r1, r2
 8003d44:	461a      	mov	r2, r3
 8003d46:	4603      	mov	r3, r0
 8003d48:	817b      	strh	r3, [r7, #10]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	813b      	strh	r3, [r7, #8]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	8979      	ldrh	r1, [r7, #10]
 8003d58:	4b20      	ldr	r3, [pc, #128]	; (8003ddc <I2C_RequestMemoryRead+0xa4>)
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f984 	bl	800406c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	69b9      	ldr	r1, [r7, #24]
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f89d 	bl	8003ea8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e02c      	b.n	8003dd2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d78:	88fb      	ldrh	r3, [r7, #6]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d105      	bne.n	8003d8a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	893a      	ldrh	r2, [r7, #8]
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28
 8003d88:	e015      	b.n	8003db6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	893a      	ldrh	r2, [r7, #8]
 8003d90:	0a12      	lsrs	r2, r2, #8
 8003d92:	b292      	uxth	r2, r2
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	69b9      	ldr	r1, [r7, #24]
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f883 	bl	8003ea8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e012      	b.n	8003dd2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	893a      	ldrh	r2, [r7, #8]
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2140      	movs	r1, #64	; 0x40
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f831 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	80002000 	.word	0x80002000

08003de0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d103      	bne.n	8003dfe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d007      	beq.n	8003e1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	6992      	ldr	r2, [r2, #24]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	619a      	str	r2, [r3, #24]
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	4613      	mov	r3, r2
 8003e36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e38:	e022      	b.n	8003e80 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d01e      	beq.n	8003e80 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e42:	f7ff f89b 	bl	8002f7c <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	1ad2      	subs	r2, r2, r3
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d802      	bhi.n	8003e58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d113      	bne.n	8003e80 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5c:	f043 0220 	orr.w	r2, r3, #32
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e00f      	b.n	8003ea0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	401a      	ands	r2, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	bf0c      	ite	eq
 8003e90:	2301      	moveq	r3, #1
 8003e92:	2300      	movne	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d0cd      	beq.n	8003e3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003eb4:	e02c      	b.n	8003f10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 f870 	bl	8003fa0 <I2C_IsAcknowledgeFailed>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e02a      	b.n	8003f20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d01e      	beq.n	8003f10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed2:	f7ff f853 	bl	8002f7c <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	1ad2      	subs	r2, r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d802      	bhi.n	8003ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d113      	bne.n	8003f10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eec:	f043 0220 	orr.w	r2, r3, #32
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e007      	b.n	8003f20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d1cb      	bne.n	8003eb6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f34:	e028      	b.n	8003f88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	68b9      	ldr	r1, [r7, #8]
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 f830 	bl	8003fa0 <I2C_IsAcknowledgeFailed>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e026      	b.n	8003f98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f4a:	f7ff f817 	bl	8002f7c <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	1ad2      	subs	r2, r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d802      	bhi.n	8003f60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d113      	bne.n	8003f88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f64:	f043 0220 	orr.w	r2, r3, #32
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e007      	b.n	8003f98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d1cf      	bne.n	8003f36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b10      	cmp	r3, #16
 8003fb8:	d151      	bne.n	800405e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fba:	e022      	b.n	8004002 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d01e      	beq.n	8004002 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc4:	f7fe ffda 	bl	8002f7c <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	1ad2      	subs	r2, r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d802      	bhi.n	8003fda <I2C_IsAcknowledgeFailed+0x3a>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d113      	bne.n	8004002 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	f043 0220 	orr.w	r2, r3, #32
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e02e      	b.n	8004060 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b20      	cmp	r3, #32
 800400e:	d1d5      	bne.n	8003fbc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2210      	movs	r2, #16
 8004016:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2220      	movs	r2, #32
 800401e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f7ff fedd 	bl	8003de0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6859      	ldr	r1, [r3, #4]
 8004030:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <I2C_IsAcknowledgeFailed+0xc8>)
 8004032:	400b      	ands	r3, r1
 8004034:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	f043 0204 	orr.w	r2, r3, #4
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	fe00e800 	.word	0xfe00e800

0800406c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	607b      	str	r3, [r7, #4]
 8004076:	460b      	mov	r3, r1
 8004078:	817b      	strh	r3, [r7, #10]
 800407a:	4613      	mov	r3, r2
 800407c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6859      	ldr	r1, [r3, #4]
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	0d5b      	lsrs	r3, r3, #21
 800408c:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <I2C_TransferConfig+0x54>)
 8004092:	4303      	orrs	r3, r0
 8004094:	43db      	mvns	r3, r3
 8004096:	4019      	ands	r1, r3
 8004098:	897b      	ldrh	r3, [r7, #10]
 800409a:	f3c3 0009 	ubfx	r0, r3, #0, #10
 800409e:	7a7b      	ldrb	r3, [r7, #9]
 80040a0:	041b      	lsls	r3, r3, #16
 80040a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040a6:	4318      	orrs	r0, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4318      	orrs	r0, r3
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	4303      	orrs	r3, r0
 80040b0:	430b      	orrs	r3, r1
 80040b2:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80040b4:	bf00      	nop
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	03ff63ff 	.word	0x03ff63ff

080040c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d138      	bne.n	800414c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e032      	b.n	800414e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2224      	movs	r2, #36	; 0x24
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6812      	ldr	r2, [r2, #0]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	f022 0201 	bic.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004116:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	6811      	ldr	r1, [r2, #0]
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6812      	ldr	r2, [r2, #0]
 8004130:	6812      	ldr	r2, [r2, #0]
 8004132:	f042 0201 	orr.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	e000      	b.n	800414e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800414c:	2302      	movs	r3, #2
  }
}
 800414e:	4618      	mov	r0, r3
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800415a:	b480      	push	{r7}
 800415c:	b085      	sub	sp, #20
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b20      	cmp	r3, #32
 800416e:	d139      	bne.n	80041e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800417a:	2302      	movs	r3, #2
 800417c:	e033      	b.n	80041e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2224      	movs	r2, #36	; 0x24
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	f022 0201 	bic.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	e000      	b.n	80041e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041e4:	2302      	movs	r3, #2
  }
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
	...

080041f4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim: LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr = 0;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_LPTIM_Init+0x16>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e076      	b.n	80042f8 <HAL_LPTIM_Init+0x104>

#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <HAL_LPTIM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f006 ff2e 	bl	800b080 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d103      	bne.n	8004244 <HAL_LPTIM_Init+0x50>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 031e 	bic.w	r3, r3, #30
 8004242:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800424c:	4293      	cmp	r3, r2
 800424e:	d005      	beq.n	800425c <HAL_LPTIM_Init+0x68>
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004256:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800425a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4b28      	ldr	r3, [pc, #160]	; (8004300 <HAL_LPTIM_Init+0x10c>)
 8004260:	4013      	ands	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800426c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004272:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004278:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800427e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d107      	bne.n	800429e <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8004296:	4313      	orrs	r3, r2
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00a      	beq.n	80042c0 <HAL_LPTIM_Init+0xcc>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80042b2:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80042b8:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a0d      	ldr	r2, [pc, #52]	; (8004304 <HAL_LPTIM_Init+0x110>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d108      	bne.n	80042e4 <HAL_LPTIM_Init+0xf0>
    /* Check LPTIM1 Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));

    /* Configure LPTIM1 Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042de:	430a      	orrs	r2, r1
 80042e0:	621a      	str	r2, [r3, #32]
 80042e2:	e004      	b.n	80042ee <HAL_LPTIM_Init+0xfa>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80042ec:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	ff19f1fe 	.word	0xff19f1fe
 8004304:	40007c00 	.word	0x40007c00

08004308 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim: LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b01      	cmp	r3, #1
 800431c:	d10d      	bne.n	800433a <HAL_LPTIM_IRQHandler+0x32>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b01      	cmp	r3, #1
 800432a:	d106      	bne.n	800433a <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2201      	movs	r2, #1
 8004332:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f882 	bl	800443e <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b02      	cmp	r3, #2
 8004346:	d10d      	bne.n	8004364 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b02      	cmp	r3, #2
 8004354:	d106      	bne.n	8004364 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2202      	movs	r2, #2
 800435c:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f877 	bl	8004452 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b04      	cmp	r3, #4
 8004370:	d10d      	bne.n	800438e <HAL_LPTIM_IRQHandler+0x86>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b04      	cmp	r3, #4
 800437e:	d106      	bne.n	800438e <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2204      	movs	r2, #4
 8004386:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f86c 	bl	8004466 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b08      	cmp	r3, #8
 800439a:	d10d      	bne.n	80043b8 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d106      	bne.n	80043b8 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2208      	movs	r2, #8
 80043b0:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f861 	bl	800447a <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b10      	cmp	r3, #16
 80043c4:	d10d      	bne.n	80043e2 <HAL_LPTIM_IRQHandler+0xda>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d106      	bne.n	80043e2 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2210      	movs	r2, #16
 80043da:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f856 	bl	800448e <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d10d      	bne.n	800440c <HAL_LPTIM_IRQHandler+0x104>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b20      	cmp	r3, #32
 80043fc:	d106      	bne.n	800440c <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2220      	movs	r2, #32
 8004404:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f84b 	bl	80044a2 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b40      	cmp	r3, #64	; 0x40
 8004418:	d10d      	bne.n	8004436 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004424:	2b40      	cmp	r3, #64	; 0x40
 8004426:	d106      	bne.n	8004436 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2240      	movs	r2, #64	; 0x40
 800442e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f840 	bl	80044b6 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */      
    }
  }
#endif
}
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044cc:	b08b      	sub	sp, #44	; 0x2c
 80044ce:	af06      	add	r7, sp, #24
 80044d0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0cb      	b.n	8004674 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d106      	bne.n	80044f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f007 fc41 	bl	800bd78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2203      	movs	r2, #3
 80044fa:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f003 f9a6 	bl	8007854 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	603b      	str	r3, [r7, #0]
 800450e:	687e      	ldr	r6, [r7, #4]
 8004510:	466d      	mov	r5, sp
 8004512:	f106 0410 	add.w	r4, r6, #16
 8004516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	602b      	str	r3, [r5, #0]
 800451e:	1d33      	adds	r3, r6, #4
 8004520:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004522:	6838      	ldr	r0, [r7, #0]
 8004524:	f003 f96d 	bl	8007802 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2100      	movs	r1, #0
 800452e:	4618      	mov	r0, r3
 8004530:	f003 f9ad 	bl	800788e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
 8004534:	2300      	movs	r3, #0
 8004536:	73fb      	strb	r3, [r7, #15]
 8004538:	e035      	b.n	80045a6 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	015b      	lsls	r3, r3, #5
 8004540:	4413      	add	r3, r2
 8004542:	3329      	adds	r3, #41	; 0x29
 8004544:	2201      	movs	r2, #1
 8004546:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004548:	7bfb      	ldrb	r3, [r7, #15]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	015b      	lsls	r3, r3, #5
 800454e:	4413      	add	r3, r2
 8004550:	3328      	adds	r3, #40	; 0x28
 8004552:	7bfa      	ldrb	r2, [r7, #15]
 8004554:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	7bfa      	ldrb	r2, [r7, #15]
 800455a:	b291      	uxth	r1, r2
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	015b      	lsls	r3, r3, #5
 8004560:	4413      	add	r3, r2
 8004562:	3336      	adds	r3, #54	; 0x36
 8004564:	460a      	mov	r2, r1
 8004566:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	015b      	lsls	r3, r3, #5
 800456e:	4413      	add	r3, r2
 8004570:	332b      	adds	r3, #43	; 0x2b
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	015b      	lsls	r3, r3, #5
 800457c:	4413      	add	r3, r2
 800457e:	3338      	adds	r3, #56	; 0x38
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	015b      	lsls	r3, r3, #5
 800458a:	4413      	add	r3, r2
 800458c:	333c      	adds	r3, #60	; 0x3c
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	3302      	adds	r3, #2
 8004598:	015b      	lsls	r3, r3, #5
 800459a:	4413      	add	r3, r2
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < 15U; i++)
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	3301      	adds	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	2b0e      	cmp	r3, #14
 80045aa:	d9c6      	bls.n	800453a <HAL_PCD_Init+0x70>
  }

  for (i = 0U; i < 15U; i++)
 80045ac:	2300      	movs	r3, #0
 80045ae:	73fb      	strb	r3, [r7, #15]
 80045b0:	e031      	b.n	8004616 <HAL_PCD_Init+0x14c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	015b      	lsls	r3, r3, #5
 80045b8:	4413      	add	r3, r2
 80045ba:	f203 2329 	addw	r3, r3, #553	; 0x229
 80045be:	2200      	movs	r2, #0
 80045c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	015b      	lsls	r3, r3, #5
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80045ce:	7bfa      	ldrb	r2, [r7, #15]
 80045d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	015b      	lsls	r3, r3, #5
 80045d8:	4413      	add	r3, r2
 80045da:	f203 232b 	addw	r3, r3, #555	; 0x22b
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	015b      	lsls	r3, r3, #5
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	015b      	lsls	r3, r3, #5
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	3312      	adds	r3, #18
 8004608:	015b      	lsls	r3, r3, #5
 800460a:	4413      	add	r3, r2
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < 15U; i++)
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	3301      	adds	r3, #1
 8004614:	73fb      	strb	r3, [r7, #15]
 8004616:	7bfb      	ldrb	r3, [r7, #15]
 8004618:	2b0e      	cmp	r3, #14
 800461a:	d9ca      	bls.n	80045b2 <HAL_PCD_Init+0xe8>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	603b      	str	r3, [r7, #0]
 8004622:	687e      	ldr	r6, [r7, #4]
 8004624:	466d      	mov	r5, sp
 8004626:	f106 0410 	add.w	r4, r6, #16
 800462a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800462c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	602b      	str	r3, [r5, #0]
 8004632:	1d33      	adds	r3, r6, #4
 8004634:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004636:	6838      	ldr	r0, [r7, #0]
 8004638:	f003 f936 	bl	80078a8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d102      	bne.n	800465a <HAL_PCD_Init+0x190>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fe5e 	bl	8005316 <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d102      	bne.n	8004668 <HAL_PCD_Init+0x19e>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fe31 	bl	80052ca <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f004 f966 	bl	800893e <USB_DevDisconnect>

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800467c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_PCD_Start+0x16>
 800468e:	2302      	movs	r3, #2
 8004690:	e012      	b.n	80046b8 <HAL_PCD_Start+0x3c>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_DevConnect(hpcd->Instance);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f004 f936 	bl	8008910 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f003 f8bb 	bl	8007824 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f004 f94b 	bl	8008968 <USB_ReadInterrupts>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046dc:	d102      	bne.n	80046e4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fb40 	bl	8004d64 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f004 f93d 	bl	8008968 <USB_ReadInterrupts>
 80046ee:	4603      	mov	r3, r0
 80046f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f8:	d112      	bne.n	8004720 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004706:	b292      	uxth	r2, r2
 8004708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470c:	b292      	uxth	r2, r2
 800470e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f007 fbb7 	bl	800be86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004718:	2100      	movs	r1, #0
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f929 	bl	8004972 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f004 f91f 	bl	8008968 <USB_ReadInterrupts>
 800472a:	4603      	mov	r3, r0
 800472c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004734:	d10b      	bne.n	800474e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004742:	b292      	uxth	r2, r2
 8004744:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004748:	b292      	uxth	r2, r2
 800474a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f004 f908 	bl	8008968 <USB_ReadInterrupts>
 8004758:	4603      	mov	r3, r0
 800475a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800475e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004762:	d10b      	bne.n	800477c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6812      	ldr	r2, [r2, #0]
 800476c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004770:	b292      	uxth	r2, r2
 8004772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004776:	b292      	uxth	r2, r2
 8004778:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4618      	mov	r0, r3
 8004782:	f004 f8f1 	bl	8008968 <USB_ReadInterrupts>
 8004786:	4603      	mov	r3, r0
 8004788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800478c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004790:	d133      	bne.n	80047fa <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 800479e:	b292      	uxth	r2, r2
 80047a0:	f022 0204 	bic.w	r2, r2, #4
 80047a4:	b292      	uxth	r2, r2
 80047a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6812      	ldr	r2, [r2, #0]
 80047b2:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80047b6:	b292      	uxth	r2, r2
 80047b8:	f022 0208 	bic.w	r2, r2, #8
 80047bc:	b292      	uxth	r2, r2
 80047be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d107      	bne.n	80047dc <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80047d4:	2100      	movs	r1, #0
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f007 fe08 	bl	800c3ec <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f007 fb8f 	bl	800bf00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6812      	ldr	r2, [r2, #0]
 80047ea:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80047ee:	b292      	uxth	r2, r2
 80047f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047f4:	b292      	uxth	r2, r2
 80047f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f004 f8b2 	bl	8008968 <USB_ReadInterrupts>
 8004804:	4603      	mov	r3, r0
 8004806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800480a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800480e:	d131      	bne.n	8004874 <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 800481c:	b292      	uxth	r2, r2
 800481e:	f042 0208 	orr.w	r2, r2, #8
 8004822:	b292      	uxth	r2, r2
 8004824:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004834:	b292      	uxth	r2, r2
 8004836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800483a:	b292      	uxth	r2, r2
 800483c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 800484c:	b292      	uxth	r2, r2
 800484e:	f042 0204 	orr.w	r2, r2, #4
 8004852:	b292      	uxth	r2, r2
 8004854:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f004 f883 	bl	8008968 <USB_ReadInterrupts>
 8004862:	4603      	mov	r3, r0
 8004864:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486c:	d002      	beq.n	8004874 <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f007 fb2c 	bl	800becc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f004 f875 	bl	8008968 <USB_ReadInterrupts>
 800487e:	4603      	mov	r3, r0
 8004880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004884:	2b80      	cmp	r3, #128	; 0x80
 8004886:	d13f      	bne.n	8004908 <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004894:	b292      	uxth	r2, r2
 8004896:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800489a:	b292      	uxth	r2, r2
 800489c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d12b      	bne.n	8004902 <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80048b6:	b292      	uxth	r2, r2
 80048b8:	f042 0204 	orr.w	r2, r2, #4
 80048bc:	b292      	uxth	r2, r2
 80048be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6812      	ldr	r2, [r2, #0]
 80048ca:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80048ce:	b292      	uxth	r2, r2
 80048d0:	f042 0208 	orr.w	r2, r2, #8
 80048d4:	b292      	uxth	r2, r2
 80048d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	089b      	lsrs	r3, r3, #2
 80048ee:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80048f8:	2101      	movs	r1, #1
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f007 fd76 	bl	800c3ec <HAL_PCDEx_LPM_Callback>
 8004900:	e002      	b.n	8004908 <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f007 fae2 	bl	800becc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f004 f82b 	bl	8008968 <USB_ReadInterrupts>
 8004912:	4603      	mov	r3, r0
 8004914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800491c:	d10e      	bne.n	800493c <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6812      	ldr	r2, [r2, #0]
 8004926:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800492a:	b292      	uxth	r2, r2
 800492c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004930:	b292      	uxth	r2, r2
 8004932:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f007 fa97 	bl	800be6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f004 f811 	bl	8008968 <USB_ReadInterrupts>
 8004946:	4603      	mov	r3, r0
 8004948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004950:	d10b      	bne.n	800496a <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6812      	ldr	r2, [r2, #0]
 800495a:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800495e:	b292      	uxth	r2, r2
 8004960:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004964:	b292      	uxth	r2, r2
 8004966:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b082      	sub	sp, #8
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	460b      	mov	r3, r1
 800497c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_PCD_SetAddress+0x1a>
 8004988:	2302      	movs	r3, #2
 800498a:	e013      	b.n	80049b4 <HAL_PCD_SetAddress+0x42>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	78fa      	ldrb	r2, [r7, #3]
 8004998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	78fa      	ldrb	r2, [r7, #3]
 80049a2:	4611      	mov	r1, r2
 80049a4:	4618      	mov	r0, r3
 80049a6:	f003 ff9f 	bl	80088e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	4608      	mov	r0, r1
 80049c6:	4611      	mov	r1, r2
 80049c8:	461a      	mov	r2, r3
 80049ca:	4603      	mov	r3, r0
 80049cc:	70fb      	strb	r3, [r7, #3]
 80049ce:	460b      	mov	r3, r1
 80049d0:	803b      	strh	r3, [r7, #0]
 80049d2:	4613      	mov	r3, r2
 80049d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	da0b      	bge.n	80049fa <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80049e2:	78fb      	ldrb	r3, [r7, #3]
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	015b      	lsls	r3, r3, #5
 80049ea:	3328      	adds	r3, #40	; 0x28
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	4413      	add	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2201      	movs	r2, #1
 80049f6:	705a      	strb	r2, [r3, #1]
 80049f8:	e00b      	b.n	8004a12 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	015b      	lsls	r3, r3, #5
 8004a02:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	4413      	add	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & 0xFU;
 8004a12:	78fb      	ldrb	r3, [r7, #3]
 8004a14:	f003 030f 	and.w	r3, r3, #15
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a1e:	883a      	ldrh	r2, [r7, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	78ba      	ldrb	r2, [r7, #2]
 8004a28:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	785b      	ldrb	r3, [r3, #1]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d004      	beq.n	8004a3c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a3c:	78bb      	ldrb	r3, [r7, #2]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d102      	bne.n	8004a48 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d101      	bne.n	8004a56 <HAL_PCD_EP_Open+0x9a>
 8004a52:	2302      	movs	r3, #2
 8004a54:	e00e      	b.n	8004a74 <HAL_PCD_EP_Open+0xb8>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68f9      	ldr	r1, [r7, #12]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f002 ff43 	bl	80078f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return ret;
 8004a72:	7afb      	ldrb	r3, [r7, #11]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	da0b      	bge.n	8004aa8 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	015b      	lsls	r3, r3, #5
 8004a98:	3328      	adds	r3, #40	; 0x28
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	705a      	strb	r2, [r3, #1]
 8004aa6:	e00b      	b.n	8004ac0 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	015b      	lsls	r3, r3, #5
 8004ab0:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & 0xFU;
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_PCD_EP_Close+0x5e>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e00e      	b.n	8004af8 <HAL_PCD_EP_Close+0x7c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68f9      	ldr	r1, [r7, #12]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f003 f9e3 	bl	8007eb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8004b10:	7afb      	ldrb	r3, [r7, #11]
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	015b      	lsls	r3, r3, #5
 8004b18:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2200      	movs	r2, #0
 8004b32:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2200      	movs	r2, #0
 8004b38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0xFU;
 8004b3a:	7afb      	ldrb	r3, [r7, #11]
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0xFU) == 0U)
 8004b46:	7afb      	ldrb	r3, [r7, #11]
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d106      	bne.n	8004b5e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6979      	ldr	r1, [r7, #20]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f003 fb42 	bl	80081e0 <USB_EPStartXfer>
 8004b5c:	e005      	b.n	8004b6a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6979      	ldr	r1, [r7, #20]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f003 fb3b 	bl	80081e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  return (uint16_t)hpcd->OUT_ep[ep_addr & 0xFU].xfer_count;
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	3312      	adds	r3, #18
 8004b8a:	015b      	lsls	r3, r3, #5
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3304      	adds	r3, #4
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	460b      	mov	r3, r1
 8004bae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004bb0:	7afb      	ldrb	r3, [r7, #11]
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	015b      	lsls	r3, r3, #5
 8004bb8:	3328      	adds	r3, #40	; 0x28
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0xFU;
 8004bd8:	7afb      	ldrb	r3, [r7, #11]
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0xFU) == 0U)
 8004be4:	7afb      	ldrb	r3, [r7, #11]
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d106      	bne.n	8004bfc <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6979      	ldr	r1, [r7, #20]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f003 faf3 	bl	80081e0 <USB_EPStartXfer>
 8004bfa:	e005      	b.n	8004c08 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6979      	ldr	r1, [r7, #20]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f003 faec 	bl	80081e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	f003 020f 	and.w	r2, r3, #15
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d901      	bls.n	8004c30 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e046      	b.n	8004cbe <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	da0b      	bge.n	8004c50 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	015b      	lsls	r3, r3, #5
 8004c40:	3328      	adds	r3, #40	; 0x28
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	4413      	add	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	705a      	strb	r2, [r3, #1]
 8004c4e:	e009      	b.n	8004c64 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	015b      	lsls	r3, r3, #5
 8004c54:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8004c6a:	78fb      	ldrb	r3, [r7, #3]
 8004c6c:	f003 030f 	and.w	r3, r3, #15
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_PCD_EP_SetStall+0x72>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e01c      	b.n	8004cbe <HAL_PCD_EP_SetStall+0xac>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68f9      	ldr	r1, [r7, #12]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f003 fd58 	bl	8008748 <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 8004c98:	78fb      	ldrb	r3, [r7, #3]
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d108      	bne.n	8004cb4 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8004cac:	4619      	mov	r1, r3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	f003 fe6a 	bl	8008988 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004cd2:	78fb      	ldrb	r3, [r7, #3]
 8004cd4:	f003 020f 	and.w	r2, r3, #15
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d901      	bls.n	8004ce4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e03a      	b.n	8004d5a <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ce4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	da0b      	bge.n	8004d04 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	015b      	lsls	r3, r3, #5
 8004cf4:	3328      	adds	r3, #40	; 0x28
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	705a      	strb	r2, [r3, #1]
 8004d02:	e00b      	b.n	8004d1c <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	015b      	lsls	r3, r3, #5
 8004d0c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	4413      	add	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	f003 030f 	and.w	r3, r3, #15
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_PCD_EP_ClrStall+0x76>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e00e      	b.n	8004d5a <HAL_PCD_EP_ClrStall+0x94>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68f9      	ldr	r1, [r7, #12]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f003 fd3e 	bl	80087cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004d64:	b590      	push	{r4, r7, lr}
 8004d66:	b089      	sub	sp, #36	; 0x24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d6c:	e25e      	b.n	800522c <PCD_EP_ISR_Handler+0x4c8>
  {
    wIstr = hpcd->Instance->ISTR;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d76:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004d78:	8afb      	ldrh	r3, [r7, #22]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	f003 030f 	and.w	r3, r3, #15
 8004d80:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8004d82:	7d7b      	ldrb	r3, [r7, #21]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f040 812c 	bne.w	8004fe2 <PCD_EP_ISR_Handler+0x27e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004d8a:	8afb      	ldrh	r3, [r7, #22]
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d14b      	bne.n	8004e2c <PCD_EP_ISR_Handler+0xc8>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da4:	b29c      	uxth	r4, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4622      	mov	r2, r4
 8004dac:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3328      	adds	r3, #40	; 0x28
 8004db2:	613b      	str	r3, [r7, #16]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	4413      	add	r3, r2
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6812      	ldr	r2, [r2, #0]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	695a      	ldr	r2, [r3, #20]
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	441a      	add	r2, r3
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004dea:	2100      	movs	r1, #0
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f007 f825 	bl	800be3c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 8216 	beq.w	800522c <PCD_EP_ISR_Handler+0x4c8>
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f040 8211 	bne.w	800522c <PCD_EP_ISR_Handler+0x4c8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	b292      	uxth	r2, r2
 8004e1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e2a:	e1ff      	b.n	800522c <PCD_EP_ISR_Handler+0x4c8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004e32:	613b      	str	r3, [r7, #16]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	81fb      	strh	r3, [r7, #14]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004e3c:	89fb      	ldrh	r3, [r7, #14]
 8004e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d02f      	beq.n	8004ea6 <PCD_EP_ISR_Handler+0x142>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	461a      	mov	r2, r3
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	4413      	add	r3, r2
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f503 6186 	add.w	r1, r3, #1072	; 0x430
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	88da      	ldrh	r2, [r3, #6]
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	f003 fdce 	bl	8008a22 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e92:	4013      	ands	r3, r2
 8004e94:	b29c      	uxth	r4, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4622      	mov	r2, r4
 8004e9c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f006 ffa2 	bl	800bde8 <HAL_PCD_SetupStageCallback>
 8004ea4:	e1c2      	b.n	800522c <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004ea6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f280 81be 	bge.w	800522c <PCD_EP_ISR_Handler+0x4c8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	b29c      	uxth	r4, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4622      	mov	r2, r4
 8004ec6:	801a      	strh	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	4413      	add	r3, r2
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 0U)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d011      	beq.n	8004f1c <PCD_EP_ISR_Handler+0x1b8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	6959      	ldr	r1, [r3, #20]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	88da      	ldrh	r2, [r3, #6]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f003 fd8a 	bl	8008a22 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	441a      	add	r2, r3
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	615a      	str	r2, [r3, #20]

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f006 ff74 	bl	800be0c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	461c      	mov	r4, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	441c      	add	r4, r3
 8004f36:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8004f3a:	60bb      	str	r3, [r7, #8]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d111      	bne.n	8004f68 <PCD_EP_ISR_Handler+0x204>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	881a      	ldrh	r2, [r3, #0]
 8004f48:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	801a      	strh	r2, [r3, #0]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	801a      	strh	r2, [r3, #0]
 8004f66:	e026      	b.n	8004fb6 <PCD_EP_ISR_Handler+0x252>
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	2b3d      	cmp	r3, #61	; 0x3d
 8004f6e:	d813      	bhi.n	8004f98 <PCD_EP_ISR_Handler+0x234>
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	085b      	lsrs	r3, r3, #1
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <PCD_EP_ISR_Handler+0x226>
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	3301      	adds	r3, #1
 8004f88:	61bb      	str	r3, [r7, #24]
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	029b      	lsls	r3, r3, #10
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	801a      	strh	r2, [r3, #0]
 8004f96:	e00e      	b.n	8004fb6 <PCD_EP_ISR_Handler+0x252>
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	095b      	lsrs	r3, r3, #5
 8004f9e:	61bb      	str	r3, [r7, #24]
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	029b      	lsls	r3, r3, #10
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc6:	b29c      	uxth	r4, r3
 8004fc8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004fcc:	b29c      	uxth	r4, r3
 8004fce:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004fd2:	b29c      	uxth	r4, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	4b9b      	ldr	r3, [pc, #620]	; (8005248 <PCD_EP_ISR_Handler+0x4e4>)
 8004fda:	4323      	orrs	r3, r4
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	8013      	strh	r3, [r2, #0]
 8004fe0:	e124      	b.n	800522c <PCD_EP_ISR_Handler+0x4c8>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	7d7b      	ldrb	r3, [r7, #21]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	81fb      	strh	r3, [r7, #14]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004ff2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f280 80c9 	bge.w	800518e <PCD_EP_ISR_Handler+0x42a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	7d7b      	ldrb	r3, [r7, #21]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	b29a      	uxth	r2, r3
 800500c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005010:	4013      	ands	r3, r2
 8005012:	b29c      	uxth	r4, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	461a      	mov	r2, r3
 800501a:	7d7b      	ldrb	r3, [r7, #21]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	4622      	mov	r2, r4
 8005022:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005024:	7d7b      	ldrb	r3, [r7, #21]
 8005026:	015b      	lsls	r3, r3, #5
 8005028:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	4413      	add	r3, r2
 8005030:	613b      	str	r3, [r7, #16]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	7b1b      	ldrb	r3, [r3, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d11f      	bne.n	800507a <PCD_EP_ISR_Handler+0x316>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005042:	b29b      	uxth	r3, r3
 8005044:	461a      	mov	r2, r3
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	4413      	add	r3, r2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	4413      	add	r3, r2
 8005054:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800505e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8005060:	8bfb      	ldrh	r3, [r7, #30]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d06e      	beq.n	8005144 <PCD_EP_ISR_Handler+0x3e0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	6959      	ldr	r1, [r3, #20]
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	88da      	ldrh	r2, [r3, #6]
 8005072:	8bfb      	ldrh	r3, [r7, #30]
 8005074:	f003 fcd5 	bl	8008a22 <USB_ReadPMA>
 8005078:	e064      	b.n	8005144 <PCD_EP_ISR_Handler+0x3e0>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01f      	beq.n	80050d4 <PCD_EP_ISR_Handler+0x370>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800509c:	b29b      	uxth	r3, r3
 800509e:	461a      	mov	r2, r3
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	4413      	add	r3, r2
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6812      	ldr	r2, [r2, #0]
 80050ac:	4413      	add	r3, r2
 80050ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050b8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80050ba:	8bfb      	ldrh	r3, [r7, #30]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d028      	beq.n	8005112 <PCD_EP_ISR_Handler+0x3ae>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	6959      	ldr	r1, [r3, #20]
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	891a      	ldrh	r2, [r3, #8]
 80050cc:	8bfb      	ldrh	r3, [r7, #30]
 80050ce:	f003 fca8 	bl	8008a22 <USB_ReadPMA>
 80050d2:	e01e      	b.n	8005112 <PCD_EP_ISR_Handler+0x3ae>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050dc:	b29b      	uxth	r3, r3
 80050de:	461a      	mov	r2, r3
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	4413      	add	r3, r2
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	4413      	add	r3, r2
 80050ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050f8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80050fa:	8bfb      	ldrh	r3, [r7, #30]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <PCD_EP_ISR_Handler+0x3ae>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6818      	ldr	r0, [r3, #0]
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	6959      	ldr	r1, [r3, #20]
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	895a      	ldrh	r2, [r3, #10]
 800510c:	8bfb      	ldrh	r3, [r7, #30]
 800510e:	f003 fc88 	bl	8008a22 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	b29b      	uxth	r3, r3
 8005124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512c:	b29c      	uxth	r4, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	441a      	add	r2, r3
 800513c:	4b43      	ldr	r3, [pc, #268]	; (800524c <PCD_EP_ISR_Handler+0x4e8>)
 800513e:	4323      	orrs	r3, r4
 8005140:	b29b      	uxth	r3, r3
 8005142:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	69da      	ldr	r2, [r3, #28]
 8005148:	8bfb      	ldrh	r3, [r7, #30]
 800514a:	441a      	add	r2, r3
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	695a      	ldr	r2, [r3, #20]
 8005154:	8bfb      	ldrh	r3, [r7, #30]
 8005156:	441a      	add	r2, r3
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d004      	beq.n	800516e <PCD_EP_ISR_Handler+0x40a>
 8005164:	8bfa      	ldrh	r2, [r7, #30]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	429a      	cmp	r2, r3
 800516c:	d206      	bcs.n	800517c <PCD_EP_ISR_Handler+0x418>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	4619      	mov	r1, r3
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f006 fe49 	bl	800be0c <HAL_PCD_DataOutStageCallback>
 800517a:	e008      	b.n	800518e <PCD_EP_ISR_Handler+0x42a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	7819      	ldrb	r1, [r3, #0]
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	695a      	ldr	r2, [r3, #20]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff fcb9 	bl	8004b00 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800518e:	89fb      	ldrh	r3, [r7, #14]
 8005190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005194:	2b00      	cmp	r3, #0
 8005196:	d049      	beq.n	800522c <PCD_EP_ISR_Handler+0x4c8>
      {
        ep = &hpcd->IN_ep[epindex];
 8005198:	7d7b      	ldrb	r3, [r7, #21]
 800519a:	015b      	lsls	r3, r3, #5
 800519c:	3328      	adds	r3, #40	; 0x28
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	4413      	add	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	7d7b      	ldrb	r3, [r7, #21]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80051b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051bc:	b29c      	uxth	r4, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	7d7b      	ldrb	r3, [r7, #21]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	4622      	mov	r2, r4
 80051cc:	801a      	strh	r2, [r3, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	461a      	mov	r2, r3
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	4413      	add	r3, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	4413      	add	r3, r2
 80051e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	695a      	ldr	r2, [r3, #20]
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	441a      	add	r2, r3
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d106      	bne.n	800521a <PCD_EP_ISR_Handler+0x4b6>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	4619      	mov	r1, r3
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f006 fe12 	bl	800be3c <HAL_PCD_DataInStageCallback>
 8005218:	e008      	b.n	800522c <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	7819      	ldrb	r1, [r3, #0]
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	695a      	ldr	r2, [r3, #20]
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7ff fcba 	bl	8004ba0 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005234:	b29b      	uxth	r3, r3
 8005236:	b21b      	sxth	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	f6ff ad98 	blt.w	8004d6e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3724      	adds	r7, #36	; 0x24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd90      	pop	{r4, r7, pc}
 8005248:	ffff8080 	.word	0xffff8080
 800524c:	ffff80c0 	.word	0xffff80c0

08005250 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	607b      	str	r3, [r7, #4]
 800525a:	460b      	mov	r3, r1
 800525c:	817b      	strh	r3, [r7, #10]
 800525e:	4613      	mov	r3, r2
 8005260:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005262:	897b      	ldrh	r3, [r7, #10]
 8005264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005268:	b29b      	uxth	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d008      	beq.n	8005280 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800526e:	897b      	ldrh	r3, [r7, #10]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	015b      	lsls	r3, r3, #5
 8005276:	3328      	adds	r3, #40	; 0x28
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4413      	add	r3, r2
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	e006      	b.n	800528e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005280:	897b      	ldrh	r3, [r7, #10]
 8005282:	015b      	lsls	r3, r3, #5
 8005284:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800528e:	893b      	ldrh	r3, [r7, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d107      	bne.n	80052a4 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	2200      	movs	r2, #0
 8005298:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	b29a      	uxth	r2, r3
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	80da      	strh	r2, [r3, #6]
 80052a2:	e00b      	b.n	80052bc <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2201      	movs	r2, #1
 80052a8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	0c1b      	lsrs	r3, r3, #16
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c

  USBx->BCDR |= (USB_BCDR_BCDEN);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f043 0301 	orr.w	r3, r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	f043 0302 	orr.w	r3, r3, #2
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005316:	b480      	push	{r7}
 8005318:	b085      	sub	sp, #20
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
  hpcd->LPM_State = LPM_L0;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800533a:	b29b      	uxth	r3, r3
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800534e:	b29b      	uxth	r3, r3
 8005350:	f043 0302 	orr.w	r3, r3, #2
 8005354:	b29a      	uxth	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005370:	4b04      	ldr	r3, [pc, #16]	; (8005384 <HAL_PWREx_GetVoltageRange+0x18>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005378:	4618      	mov	r0, r3
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40007000 	.word	0x40007000

08005388 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005396:	d130      	bne.n	80053fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005398:	4b23      	ldr	r3, [pc, #140]	; (8005428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053a4:	d038      	beq.n	8005418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053a6:	4a20      	ldr	r2, [pc, #128]	; (8005428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053a8:	4b1f      	ldr	r3, [pc, #124]	; (8005428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053b6:	4b1d      	ldr	r3, [pc, #116]	; (800542c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2232      	movs	r2, #50	; 0x32
 80053bc:	fb02 f303 	mul.w	r3, r2, r3
 80053c0:	4a1b      	ldr	r2, [pc, #108]	; (8005430 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80053c2:	fba2 2303 	umull	r2, r3, r2, r3
 80053c6:	0c9b      	lsrs	r3, r3, #18
 80053c8:	3301      	adds	r3, #1
 80053ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053cc:	e002      	b.n	80053d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3b01      	subs	r3, #1
 80053d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053d4:	4b14      	ldr	r3, [pc, #80]	; (8005428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e0:	d102      	bne.n	80053e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1f2      	bne.n	80053ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053e8:	4b0f      	ldr	r3, [pc, #60]	; (8005428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f4:	d110      	bne.n	8005418 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e00f      	b.n	800541a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80053fa:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005406:	d007      	beq.n	8005418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005408:	4a07      	ldr	r2, [pc, #28]	; (8005428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800540a:	4b07      	ldr	r3, [pc, #28]	; (8005428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005416:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40007000 	.word	0x40007000
 800542c:	2000127c 	.word	0x2000127c
 8005430:	431bde83 	.word	0x431bde83

08005434 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005438:	4a05      	ldr	r2, [pc, #20]	; (8005450 <HAL_PWREx_EnableVddUSB+0x1c>)
 800543a:	4b05      	ldr	r3, [pc, #20]	; (8005450 <HAL_PWREx_EnableVddUSB+0x1c>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005442:	6053      	str	r3, [r2, #4]
}
 8005444:	bf00      	nop
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40007000 	.word	0x40007000

08005454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_oscsource;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e395      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005466:	4ba3      	ldr	r3, [pc, #652]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
 800546e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005470:	4ba0      	ldr	r3, [pc, #640]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f003 0303 	and.w	r3, r3, #3
 8005478:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0310 	and.w	r3, r3, #16
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 80df 	beq.w	8005646 <HAL_RCC_OscConfig+0x1f2>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d007      	beq.n	800549e <HAL_RCC_OscConfig+0x4a>
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b0c      	cmp	r3, #12
 8005492:	f040 8086 	bne.w	80055a2 <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2b01      	cmp	r3, #1
 800549a:	f040 8082 	bne.w	80055a2 <HAL_RCC_OscConfig+0x14e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800549e:	4b95      	ldr	r3, [pc, #596]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d005      	beq.n	80054b6 <HAL_RCC_OscConfig+0x62>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e36d      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1a      	ldr	r2, [r3, #32]
 80054ba:	4b8e      	ldr	r3, [pc, #568]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d004      	beq.n	80054d0 <HAL_RCC_OscConfig+0x7c>
 80054c6:	4b8b      	ldr	r3, [pc, #556]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054ce:	e005      	b.n	80054dc <HAL_RCC_OscConfig+0x88>
 80054d0:	4b88      	ldr	r3, [pc, #544]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80054d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054d6:	091b      	lsrs	r3, r3, #4
 80054d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054dc:	429a      	cmp	r2, r3
 80054de:	d923      	bls.n	8005528 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fd0d 	bl	8005f04 <RCC_SetFlashLatencyFromMSIRange>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e34e      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054f4:	4a7f      	ldr	r2, [pc, #508]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80054f6:	4b7f      	ldr	r3, [pc, #508]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f043 0308 	orr.w	r3, r3, #8
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	497c      	ldr	r1, [pc, #496]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 8005502:	4b7c      	ldr	r3, [pc, #496]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	4313      	orrs	r3, r2
 8005510:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005512:	4978      	ldr	r1, [pc, #480]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 8005514:	4b77      	ldr	r3, [pc, #476]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	021b      	lsls	r3, r3, #8
 8005522:	4313      	orrs	r3, r2
 8005524:	604b      	str	r3, [r1, #4]
 8005526:	e022      	b.n	800556e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005528:	4a72      	ldr	r2, [pc, #456]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 800552a:	4b72      	ldr	r3, [pc, #456]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f043 0308 	orr.w	r3, r3, #8
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	496f      	ldr	r1, [pc, #444]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 8005536:	4b6f      	ldr	r3, [pc, #444]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	4313      	orrs	r3, r2
 8005544:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005546:	496b      	ldr	r1, [pc, #428]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 8005548:	4b6a      	ldr	r3, [pc, #424]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	4313      	orrs	r3, r2
 8005558:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fcd0 	bl	8005f04 <RCC_SetFlashLatencyFromMSIRange>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e311      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800556e:	f000 fbf5 	bl	8005d5c <HAL_RCC_GetSysClockFreq>
 8005572:	4601      	mov	r1, r0
 8005574:	4b5f      	ldr	r3, [pc, #380]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	091b      	lsrs	r3, r3, #4
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	4a5e      	ldr	r2, [pc, #376]	; (80056f8 <HAL_RCC_OscConfig+0x2a4>)
 8005580:	5cd3      	ldrb	r3, [r2, r3]
 8005582:	f003 031f 	and.w	r3, r3, #31
 8005586:	fa21 f303 	lsr.w	r3, r1, r3
 800558a:	4a5c      	ldr	r2, [pc, #368]	; (80056fc <HAL_RCC_OscConfig+0x2a8>)
 800558c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800558e:	2000      	movs	r0, #0
 8005590:	f7fd fcc2 	bl	8002f18 <HAL_InitTick>
 8005594:	4603      	mov	r3, r0
 8005596:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d052      	beq.n	8005644 <HAL_RCC_OscConfig+0x1f0>
        {
          return status;
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	e2f7      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d032      	beq.n	8005610 <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80055aa:	4a52      	ldr	r2, [pc, #328]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80055ac:	4b51      	ldr	r3, [pc, #324]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f043 0301 	orr.w	r3, r3, #1
 80055b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055b6:	f7fd fce1 	bl	8002f7c <HAL_GetTick>
 80055ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055bc:	e008      	b.n	80055d0 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055be:	f7fd fcdd 	bl	8002f7c <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e2e0      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055d0:	4b48      	ldr	r3, [pc, #288]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0f0      	beq.n	80055be <HAL_RCC_OscConfig+0x16a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055dc:	4a45      	ldr	r2, [pc, #276]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80055de:	4b45      	ldr	r3, [pc, #276]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f043 0308 	orr.w	r3, r3, #8
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	4942      	ldr	r1, [pc, #264]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80055ea:	4b42      	ldr	r3, [pc, #264]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055fa:	493e      	ldr	r1, [pc, #248]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80055fc:	4b3d      	ldr	r3, [pc, #244]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	021b      	lsls	r3, r3, #8
 800560a:	4313      	orrs	r3, r2
 800560c:	604b      	str	r3, [r1, #4]
 800560e:	e01a      	b.n	8005646 <HAL_RCC_OscConfig+0x1f2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005610:	4a38      	ldr	r2, [pc, #224]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 8005612:	4b38      	ldr	r3, [pc, #224]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f023 0301 	bic.w	r3, r3, #1
 800561a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800561c:	f7fd fcae 	bl	8002f7c <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005624:	f7fd fcaa 	bl	8002f7c <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e2ad      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005636:	4b2f      	ldr	r3, [pc, #188]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f0      	bne.n	8005624 <HAL_RCC_OscConfig+0x1d0>
 8005642:	e000      	b.n	8005646 <HAL_RCC_OscConfig+0x1f2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005644:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d072      	beq.n	8005738 <HAL_RCC_OscConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	2b08      	cmp	r3, #8
 8005656:	d005      	beq.n	8005664 <HAL_RCC_OscConfig+0x210>
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	2b0c      	cmp	r3, #12
 800565c:	d10e      	bne.n	800567c <HAL_RCC_OscConfig+0x228>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2b03      	cmp	r3, #3
 8005662:	d10b      	bne.n	800567c <HAL_RCC_OscConfig+0x228>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005664:	4b23      	ldr	r3, [pc, #140]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d062      	beq.n	8005736 <HAL_RCC_OscConfig+0x2e2>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d15e      	bne.n	8005736 <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e28a      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005684:	d106      	bne.n	8005694 <HAL_RCC_OscConfig+0x240>
 8005686:	4a1b      	ldr	r2, [pc, #108]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 8005688:	4b1a      	ldr	r3, [pc, #104]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	e01d      	b.n	80056d0 <HAL_RCC_OscConfig+0x27c>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800569c:	d10c      	bne.n	80056b8 <HAL_RCC_OscConfig+0x264>
 800569e:	4a15      	ldr	r2, [pc, #84]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80056a0:	4b14      	ldr	r3, [pc, #80]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	4a12      	ldr	r2, [pc, #72]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80056ac:	4b11      	ldr	r3, [pc, #68]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	e00b      	b.n	80056d0 <HAL_RCC_OscConfig+0x27c>
 80056b8:	4a0e      	ldr	r2, [pc, #56]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80056ba:	4b0e      	ldr	r3, [pc, #56]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	4a0b      	ldr	r2, [pc, #44]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80056c6:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <HAL_RCC_OscConfig+0x2a0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d01a      	beq.n	800570e <HAL_RCC_OscConfig+0x2ba>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d8:	f7fd fc50 	bl	8002f7c <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056de:	e00f      	b.n	8005700 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056e0:	f7fd fc4c 	bl	8002f7c <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b64      	cmp	r3, #100	; 0x64
 80056ec:	d908      	bls.n	8005700 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e24f      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
 80056f2:	bf00      	nop
 80056f4:	40021000 	.word	0x40021000
 80056f8:	0800d1a4 	.word	0x0800d1a4
 80056fc:	2000127c 	.word	0x2000127c
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005700:	4bae      	ldr	r3, [pc, #696]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0e9      	beq.n	80056e0 <HAL_RCC_OscConfig+0x28c>
 800570c:	e014      	b.n	8005738 <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570e:	f7fd fc35 	bl	8002f7c <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005714:	e008      	b.n	8005728 <HAL_RCC_OscConfig+0x2d4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005716:	f7fd fc31 	bl	8002f7c <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b64      	cmp	r3, #100	; 0x64
 8005722:	d901      	bls.n	8005728 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e234      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005728:	4ba4      	ldr	r3, [pc, #656]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1f0      	bne.n	8005716 <HAL_RCC_OscConfig+0x2c2>
 8005734:	e000      	b.n	8005738 <HAL_RCC_OscConfig+0x2e4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005736:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d060      	beq.n	8005806 <HAL_RCC_OscConfig+0x3b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	2b04      	cmp	r3, #4
 8005748:	d005      	beq.n	8005756 <HAL_RCC_OscConfig+0x302>
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b0c      	cmp	r3, #12
 800574e:	d119      	bne.n	8005784 <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2b02      	cmp	r3, #2
 8005754:	d116      	bne.n	8005784 <HAL_RCC_OscConfig+0x330>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005756:	4b99      	ldr	r3, [pc, #612]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <HAL_RCC_OscConfig+0x31a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e211      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800576e:	4993      	ldr	r1, [pc, #588]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 8005770:	4b92      	ldr	r3, [pc, #584]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	061b      	lsls	r3, r3, #24
 800577e:	4313      	orrs	r3, r2
 8005780:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005782:	e040      	b.n	8005806 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d023      	beq.n	80057d4 <HAL_RCC_OscConfig+0x380>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800578c:	4a8b      	ldr	r2, [pc, #556]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 800578e:	4b8b      	ldr	r3, [pc, #556]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005798:	f7fd fbf0 	bl	8002f7c <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a0:	f7fd fbec 	bl	8002f7c <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e1ef      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057b2:	4b82      	ldr	r3, [pc, #520]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0f0      	beq.n	80057a0 <HAL_RCC_OscConfig+0x34c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057be:	497f      	ldr	r1, [pc, #508]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 80057c0:	4b7e      	ldr	r3, [pc, #504]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	061b      	lsls	r3, r3, #24
 80057ce:	4313      	orrs	r3, r2
 80057d0:	604b      	str	r3, [r1, #4]
 80057d2:	e018      	b.n	8005806 <HAL_RCC_OscConfig+0x3b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057d4:	4a79      	ldr	r2, [pc, #484]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 80057d6:	4b79      	ldr	r3, [pc, #484]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e0:	f7fd fbcc 	bl	8002f7c <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057e8:	f7fd fbc8 	bl	8002f7c <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e1cb      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057fa:	4b70      	ldr	r3, [pc, #448]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1f0      	bne.n	80057e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	2b00      	cmp	r3, #0
 8005810:	d03c      	beq.n	800588c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d01c      	beq.n	8005854 <HAL_RCC_OscConfig+0x400>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800581a:	4a68      	ldr	r2, [pc, #416]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 800581c:	4b67      	ldr	r3, [pc, #412]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 800581e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005822:	f043 0301 	orr.w	r3, r3, #1
 8005826:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800582a:	f7fd fba7 	bl	8002f7c <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005830:	e008      	b.n	8005844 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005832:	f7fd fba3 	bl	8002f7c <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e1a6      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005844:	4b5d      	ldr	r3, [pc, #372]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 8005846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0ef      	beq.n	8005832 <HAL_RCC_OscConfig+0x3de>
 8005852:	e01b      	b.n	800588c <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005854:	4a59      	ldr	r2, [pc, #356]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 8005856:	4b59      	ldr	r3, [pc, #356]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 8005858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005864:	f7fd fb8a 	bl	8002f7c <HAL_GetTick>
 8005868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800586c:	f7fd fb86 	bl	8002f7c <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b02      	cmp	r3, #2
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e189      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800587e:	4b4f      	ldr	r3, [pc, #316]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 8005880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1ef      	bne.n	800586c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 80a5 	beq.w	80059e4 <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 800589a:	2300      	movs	r3, #0
 800589c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800589e:	4b47      	ldr	r3, [pc, #284]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 80058a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10d      	bne.n	80058c6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058aa:	4a44      	ldr	r2, [pc, #272]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 80058ac:	4b43      	ldr	r3, [pc, #268]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 80058ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058b4:	6593      	str	r3, [r2, #88]	; 0x58
 80058b6:	4b41      	ldr	r3, [pc, #260]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 80058b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058be:	60bb      	str	r3, [r7, #8]
 80058c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058c2:	2301      	movs	r3, #1
 80058c4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058c6:	4b3e      	ldr	r3, [pc, #248]	; (80059c0 <HAL_RCC_OscConfig+0x56c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d118      	bne.n	8005904 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058d2:	4a3b      	ldr	r2, [pc, #236]	; (80059c0 <HAL_RCC_OscConfig+0x56c>)
 80058d4:	4b3a      	ldr	r3, [pc, #232]	; (80059c0 <HAL_RCC_OscConfig+0x56c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058de:	f7fd fb4d 	bl	8002f7c <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e6:	f7fd fb49 	bl	8002f7c <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e14c      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058f8:	4b31      	ldr	r3, [pc, #196]	; (80059c0 <HAL_RCC_OscConfig+0x56c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0f0      	beq.n	80058e6 <HAL_RCC_OscConfig+0x492>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d108      	bne.n	800591e <HAL_RCC_OscConfig+0x4ca>
 800590c:	4a2b      	ldr	r2, [pc, #172]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 800590e:	4b2b      	ldr	r3, [pc, #172]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 8005910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005914:	f043 0301 	orr.w	r3, r3, #1
 8005918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800591c:	e024      	b.n	8005968 <HAL_RCC_OscConfig+0x514>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2b05      	cmp	r3, #5
 8005924:	d110      	bne.n	8005948 <HAL_RCC_OscConfig+0x4f4>
 8005926:	4a25      	ldr	r2, [pc, #148]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 8005928:	4b24      	ldr	r3, [pc, #144]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592e:	f043 0304 	orr.w	r3, r3, #4
 8005932:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005936:	4a21      	ldr	r2, [pc, #132]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 8005938:	4b20      	ldr	r3, [pc, #128]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 800593a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593e:	f043 0301 	orr.w	r3, r3, #1
 8005942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005946:	e00f      	b.n	8005968 <HAL_RCC_OscConfig+0x514>
 8005948:	4a1c      	ldr	r2, [pc, #112]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 800594a:	4b1c      	ldr	r3, [pc, #112]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 800594c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005950:	f023 0301 	bic.w	r3, r3, #1
 8005954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005958:	4a18      	ldr	r2, [pc, #96]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 800595a:	4b18      	ldr	r3, [pc, #96]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 800595c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005960:	f023 0304 	bic.w	r3, r3, #4
 8005964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d016      	beq.n	800599e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005970:	f7fd fb04 	bl	8002f7c <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005976:	e00a      	b.n	800598e <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005978:	f7fd fb00 	bl	8002f7c <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	f241 3288 	movw	r2, #5000	; 0x1388
 8005986:	4293      	cmp	r3, r2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e101      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800598e:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <HAL_RCC_OscConfig+0x568>)
 8005990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0ed      	beq.n	8005978 <HAL_RCC_OscConfig+0x524>
 800599c:	e019      	b.n	80059d2 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800599e:	f7fd faed 	bl	8002f7c <HAL_GetTick>
 80059a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059a4:	e00e      	b.n	80059c4 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059a6:	f7fd fae9 	bl	8002f7c <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d905      	bls.n	80059c4 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e0ea      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
 80059bc:	40021000 	.word	0x40021000
 80059c0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059c4:	4b75      	ldr	r3, [pc, #468]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 80059c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1e9      	bne.n	80059a6 <HAL_RCC_OscConfig+0x552>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059d2:	7ffb      	ldrb	r3, [r7, #31]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d105      	bne.n	80059e4 <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059d8:	4a70      	ldr	r2, [pc, #448]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 80059da:	4b70      	ldr	r3, [pc, #448]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 80059dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0320 	and.w	r3, r3, #32
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d03c      	beq.n	8005a6a <HAL_RCC_OscConfig+0x616>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01c      	beq.n	8005a32 <HAL_RCC_OscConfig+0x5de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059f8:	4a68      	ldr	r2, [pc, #416]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 80059fa:	4b68      	ldr	r3, [pc, #416]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 80059fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a00:	f043 0301 	orr.w	r3, r3, #1
 8005a04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a08:	f7fd fab8 	bl	8002f7c <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x5ce>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a10:	f7fd fab4 	bl	8002f7c <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e0b7      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a22:	4b5e      	ldr	r3, [pc, #376]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0ef      	beq.n	8005a10 <HAL_RCC_OscConfig+0x5bc>
 8005a30:	e01b      	b.n	8005a6a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a32:	4a5a      	ldr	r2, [pc, #360]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005a34:	4b59      	ldr	r3, [pc, #356]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a3a:	f023 0301 	bic.w	r3, r3, #1
 8005a3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a42:	f7fd fa9b 	bl	8002f7c <HAL_GetTick>
 8005a46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a48:	e008      	b.n	8005a5c <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a4a:	f7fd fa97 	bl	8002f7c <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e09a      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a5c:	4b4f      	ldr	r3, [pc, #316]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005a5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1ef      	bne.n	8005a4a <HAL_RCC_OscConfig+0x5f6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 808e 	beq.w	8005b90 <HAL_RCC_OscConfig+0x73c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	2b0c      	cmp	r3, #12
 8005a78:	f000 8088 	beq.w	8005b8c <HAL_RCC_OscConfig+0x738>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d155      	bne.n	8005b30 <HAL_RCC_OscConfig+0x6dc>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a84:	4a45      	ldr	r2, [pc, #276]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005a86:	4b45      	ldr	r3, [pc, #276]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a90:	f7fd fa74 	bl	8002f7c <HAL_GetTick>
 8005a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a96:	e008      	b.n	8005aaa <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a98:	f7fd fa70 	bl	8002f7c <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e073      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aaa:	4b3c      	ldr	r3, [pc, #240]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1f0      	bne.n	8005a98 <HAL_RCC_OscConfig+0x644>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ab6:	4939      	ldr	r1, [pc, #228]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abc:	3b01      	subs	r3, #1
 8005abe:	011a      	lsls	r2, r3, #4
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad2:	085b      	lsrs	r3, r3, #1
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	055b      	lsls	r3, r3, #21
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	085b      	lsrs	r3, r3, #1
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	065b      	lsls	r3, r3, #25
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	06db      	lsls	r3, r3, #27
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005af0:	4a2a      	ldr	r2, [pc, #168]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005af2:	4b2a      	ldr	r3, [pc, #168]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005afa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005afc:	4a27      	ldr	r2, [pc, #156]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005afe:	4b27      	ldr	r3, [pc, #156]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b08:	f7fd fa38 	bl	8002f7c <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x6ce>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b10:	f7fd fa34 	bl	8002f7c <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x6ce>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e037      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b22:	4b1e      	ldr	r3, [pc, #120]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0f0      	beq.n	8005b10 <HAL_RCC_OscConfig+0x6bc>
 8005b2e:	e02f      	b.n	8005b90 <HAL_RCC_OscConfig+0x73c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b30:	4a1a      	ldr	r2, [pc, #104]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005b32:	4b1a      	ldr	r3, [pc, #104]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b3a:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b3c:	4b17      	ldr	r3, [pc, #92]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d105      	bne.n	8005b54 <HAL_RCC_OscConfig+0x700>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005b48:	4a14      	ldr	r2, [pc, #80]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005b4a:	4b14      	ldr	r3, [pc, #80]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f023 0303 	bic.w	r3, r3, #3
 8005b52:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005b54:	4a11      	ldr	r2, [pc, #68]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005b56:	4b11      	ldr	r3, [pc, #68]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b62:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b64:	f7fd fa0a 	bl	8002f7c <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x72a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b6c:	f7fd fa06 	bl	8002f7c <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x72a>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e009      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b7e:	4b07      	ldr	r3, [pc, #28]	; (8005b9c <HAL_RCC_OscConfig+0x748>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1f0      	bne.n	8005b6c <HAL_RCC_OscConfig+0x718>
 8005b8a:	e001      	b.n	8005b90 <HAL_RCC_OscConfig+0x73c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e000      	b.n	8005b92 <HAL_RCC_OscConfig+0x73e>
    }
  }
  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3720      	adds	r7, #32
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40021000 	.word	0x40021000

08005ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e0c6      	b.n	8005d42 <HAL_RCC_ClockConfig+0x1a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bb4:	4b65      	ldr	r3, [pc, #404]	; (8005d4c <HAL_RCC_ClockConfig+0x1ac>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0207 	and.w	r2, r3, #7
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d210      	bcs.n	8005be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc2:	4962      	ldr	r1, [pc, #392]	; (8005d4c <HAL_RCC_ClockConfig+0x1ac>)
 8005bc4:	4b61      	ldr	r3, [pc, #388]	; (8005d4c <HAL_RCC_ClockConfig+0x1ac>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f023 0207 	bic.w	r2, r3, #7
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd2:	4b5e      	ldr	r3, [pc, #376]	; (8005d4c <HAL_RCC_ClockConfig+0x1ac>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0207 	and.w	r2, r3, #7
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d001      	beq.n	8005be4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e0ae      	b.n	8005d42 <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d04c      	beq.n	8005c8a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	2b03      	cmp	r3, #3
 8005bf6:	d107      	bne.n	8005c08 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bf8:	4b55      	ldr	r3, [pc, #340]	; (8005d50 <HAL_RCC_ClockConfig+0x1b0>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d121      	bne.n	8005c48 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e09c      	b.n	8005d42 <HAL_RCC_ClockConfig+0x1a2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d107      	bne.n	8005c20 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c10:	4b4f      	ldr	r3, [pc, #316]	; (8005d50 <HAL_RCC_ClockConfig+0x1b0>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d115      	bne.n	8005c48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e090      	b.n	8005d42 <HAL_RCC_ClockConfig+0x1a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d107      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c28:	4b49      	ldr	r3, [pc, #292]	; (8005d50 <HAL_RCC_ClockConfig+0x1b0>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d109      	bne.n	8005c48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e084      	b.n	8005d42 <HAL_RCC_ClockConfig+0x1a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c38:	4b45      	ldr	r3, [pc, #276]	; (8005d50 <HAL_RCC_ClockConfig+0x1b0>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e07c      	b.n	8005d42 <HAL_RCC_ClockConfig+0x1a2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c48:	4941      	ldr	r1, [pc, #260]	; (8005d50 <HAL_RCC_ClockConfig+0x1b0>)
 8005c4a:	4b41      	ldr	r3, [pc, #260]	; (8005d50 <HAL_RCC_ClockConfig+0x1b0>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f023 0203 	bic.w	r2, r3, #3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c5a:	f7fd f98f 	bl	8002f7c <HAL_GetTick>
 8005c5e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c60:	e00a      	b.n	8005c78 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c62:	f7fd f98b 	bl	8002f7c <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e064      	b.n	8005d42 <HAL_RCC_ClockConfig+0x1a2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c78:	4b35      	ldr	r3, [pc, #212]	; (8005d50 <HAL_RCC_ClockConfig+0x1b0>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f003 020c 	and.w	r2, r3, #12
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d1eb      	bne.n	8005c62 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d008      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c96:	492e      	ldr	r1, [pc, #184]	; (8005d50 <HAL_RCC_ClockConfig+0x1b0>)
 8005c98:	4b2d      	ldr	r3, [pc, #180]	; (8005d50 <HAL_RCC_ClockConfig+0x1b0>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ca8:	4b28      	ldr	r3, [pc, #160]	; (8005d4c <HAL_RCC_ClockConfig+0x1ac>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0207 	and.w	r2, r3, #7
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d910      	bls.n	8005cd8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cb6:	4925      	ldr	r1, [pc, #148]	; (8005d4c <HAL_RCC_ClockConfig+0x1ac>)
 8005cb8:	4b24      	ldr	r3, [pc, #144]	; (8005d4c <HAL_RCC_ClockConfig+0x1ac>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f023 0207 	bic.w	r2, r3, #7
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc6:	4b21      	ldr	r3, [pc, #132]	; (8005d4c <HAL_RCC_ClockConfig+0x1ac>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0207 	and.w	r2, r3, #7
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d001      	beq.n	8005cd8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e034      	b.n	8005d42 <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d008      	beq.n	8005cf6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ce4:	491a      	ldr	r1, [pc, #104]	; (8005d50 <HAL_RCC_ClockConfig+0x1b0>)
 8005ce6:	4b1a      	ldr	r3, [pc, #104]	; (8005d50 <HAL_RCC_ClockConfig+0x1b0>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0308 	and.w	r3, r3, #8
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d009      	beq.n	8005d16 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d02:	4913      	ldr	r1, [pc, #76]	; (8005d50 <HAL_RCC_ClockConfig+0x1b0>)
 8005d04:	4b12      	ldr	r3, [pc, #72]	; (8005d50 <HAL_RCC_ClockConfig+0x1b0>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	4313      	orrs	r3, r2
 8005d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d16:	f000 f821 	bl	8005d5c <HAL_RCC_GetSysClockFreq>
 8005d1a:	4601      	mov	r1, r0
 8005d1c:	4b0c      	ldr	r3, [pc, #48]	; (8005d50 <HAL_RCC_ClockConfig+0x1b0>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	091b      	lsrs	r3, r3, #4
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	4a0b      	ldr	r2, [pc, #44]	; (8005d54 <HAL_RCC_ClockConfig+0x1b4>)
 8005d28:	5cd3      	ldrb	r3, [r2, r3]
 8005d2a:	f003 031f 	and.w	r3, r3, #31
 8005d2e:	fa21 f303 	lsr.w	r3, r1, r3
 8005d32:	4a09      	ldr	r2, [pc, #36]	; (8005d58 <HAL_RCC_ClockConfig+0x1b8>)
 8005d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8005d36:	2000      	movs	r0, #0
 8005d38:	f7fd f8ee 	bl	8002f18 <HAL_InitTick>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005d40:	7afb      	ldrb	r3, [r7, #11]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	40022000 	.word	0x40022000
 8005d50:	40021000 	.word	0x40021000
 8005d54:	0800d1a4 	.word	0x0800d1a4
 8005d58:	2000127c 	.word	0x2000127c

08005d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b089      	sub	sp, #36	; 0x24
 8005d60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	61fb      	str	r3, [r7, #28]
 8005d66:	2300      	movs	r3, #0
 8005d68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d6a:	4b46      	ldr	r3, [pc, #280]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x128>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f003 030c 	and.w	r3, r3, #12
 8005d72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d74:	4b43      	ldr	r3, [pc, #268]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x128>)
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d005      	beq.n	8005d90 <HAL_RCC_GetSysClockFreq+0x34>
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	2b0c      	cmp	r3, #12
 8005d88:	d121      	bne.n	8005dce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d11e      	bne.n	8005dce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005d90:	4b3c      	ldr	r3, [pc, #240]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x128>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0308 	and.w	r3, r3, #8
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d107      	bne.n	8005dac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005d9c:	4b39      	ldr	r3, [pc, #228]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x128>)
 8005d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005da2:	0a1b      	lsrs	r3, r3, #8
 8005da4:	f003 030f 	and.w	r3, r3, #15
 8005da8:	61fb      	str	r3, [r7, #28]
 8005daa:	e005      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005dac:	4b35      	ldr	r3, [pc, #212]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x128>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	091b      	lsrs	r3, r3, #4
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005db8:	4a33      	ldr	r2, [pc, #204]	; (8005e88 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10d      	bne.n	8005de4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005dcc:	e00a      	b.n	8005de4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	d102      	bne.n	8005dda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005dd4:	4b2d      	ldr	r3, [pc, #180]	; (8005e8c <HAL_RCC_GetSysClockFreq+0x130>)
 8005dd6:	61bb      	str	r3, [r7, #24]
 8005dd8:	e004      	b.n	8005de4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d101      	bne.n	8005de4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005de0:	4b2b      	ldr	r3, [pc, #172]	; (8005e90 <HAL_RCC_GetSysClockFreq+0x134>)
 8005de2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2b0c      	cmp	r3, #12
 8005de8:	d145      	bne.n	8005e76 <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dea:	4b26      	ldr	r3, [pc, #152]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x128>)
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005df4:	4b23      	ldr	r3, [pc, #140]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x128>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	091b      	lsrs	r3, r3, #4
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	3301      	adds	r3, #1
 8005e00:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d002      	beq.n	8005e0e <HAL_RCC_GetSysClockFreq+0xb2>
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d00d      	beq.n	8005e28 <HAL_RCC_GetSysClockFreq+0xcc>
 8005e0c:	e019      	b.n	8005e42 <HAL_RCC_GetSysClockFreq+0xe6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e0e:	4a1f      	ldr	r2, [pc, #124]	; (8005e8c <HAL_RCC_GetSysClockFreq+0x130>)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e16:	4a1b      	ldr	r2, [pc, #108]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x128>)
 8005e18:	68d2      	ldr	r2, [r2, #12]
 8005e1a:	0a12      	lsrs	r2, r2, #8
 8005e1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e20:	fb02 f303 	mul.w	r3, r2, r3
 8005e24:	617b      	str	r3, [r7, #20]
      break;
 8005e26:	e019      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e28:	4a19      	ldr	r2, [pc, #100]	; (8005e90 <HAL_RCC_GetSysClockFreq+0x134>)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e30:	4a14      	ldr	r2, [pc, #80]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x128>)
 8005e32:	68d2      	ldr	r2, [r2, #12]
 8005e34:	0a12      	lsrs	r2, r2, #8
 8005e36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e3a:	fb02 f303 	mul.w	r3, r2, r3
 8005e3e:	617b      	str	r3, [r7, #20]
      break;
 8005e40:	e00c      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e42:	69fa      	ldr	r2, [r7, #28]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4a:	4a0e      	ldr	r2, [pc, #56]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x128>)
 8005e4c:	68d2      	ldr	r2, [r2, #12]
 8005e4e:	0a12      	lsrs	r2, r2, #8
 8005e50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e54:	fb02 f303 	mul.w	r3, r2, r3
 8005e58:	617b      	str	r3, [r7, #20]
      break;
 8005e5a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e5c:	4b09      	ldr	r3, [pc, #36]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x128>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	0e5b      	lsrs	r3, r3, #25
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	3301      	adds	r3, #1
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco/pllr;
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e74:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005e76:	69bb      	ldr	r3, [r7, #24]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3724      	adds	r7, #36	; 0x24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	40021000 	.word	0x40021000
 8005e88:	0800d1bc 	.word	0x0800d1bc
 8005e8c:	00f42400 	.word	0x00f42400
 8005e90:	007a1200 	.word	0x007a1200

08005e94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e98:	4b03      	ldr	r3, [pc, #12]	; (8005ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	2000127c 	.word	0x2000127c

08005eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005eb0:	f7ff fff0 	bl	8005e94 <HAL_RCC_GetHCLKFreq>
 8005eb4:	4601      	mov	r1, r0
 8005eb6:	4b06      	ldr	r3, [pc, #24]	; (8005ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	0a1b      	lsrs	r3, r3, #8
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	4a04      	ldr	r2, [pc, #16]	; (8005ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ec2:	5cd3      	ldrb	r3, [r2, r3]
 8005ec4:	f003 031f 	and.w	r3, r3, #31
 8005ec8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	0800d1b4 	.word	0x0800d1b4

08005ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005edc:	f7ff ffda 	bl	8005e94 <HAL_RCC_GetHCLKFreq>
 8005ee0:	4601      	mov	r1, r0
 8005ee2:	4b06      	ldr	r3, [pc, #24]	; (8005efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	0adb      	lsrs	r3, r3, #11
 8005ee8:	f003 0307 	and.w	r3, r3, #7
 8005eec:	4a04      	ldr	r2, [pc, #16]	; (8005f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005eee:	5cd3      	ldrb	r3, [r2, r3]
 8005ef0:	f003 031f 	and.w	r3, r3, #31
 8005ef4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	40021000 	.word	0x40021000
 8005f00:	0800d1b4 	.word	0x0800d1b4

08005f04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f10:	4b2a      	ldr	r3, [pc, #168]	; (8005fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f1c:	f7ff fa26 	bl	800536c <HAL_PWREx_GetVoltageRange>
 8005f20:	6178      	str	r0, [r7, #20]
 8005f22:	e014      	b.n	8005f4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f24:	4a25      	ldr	r2, [pc, #148]	; (8005fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f26:	4b25      	ldr	r3, [pc, #148]	; (8005fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f2e:	6593      	str	r3, [r2, #88]	; 0x58
 8005f30:	4b22      	ldr	r3, [pc, #136]	; (8005fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f3c:	f7ff fa16 	bl	800536c <HAL_PWREx_GetVoltageRange>
 8005f40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f42:	4a1e      	ldr	r2, [pc, #120]	; (8005fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f44:	4b1d      	ldr	r3, [pc, #116]	; (8005fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f54:	d10b      	bne.n	8005f6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b80      	cmp	r3, #128	; 0x80
 8005f5a:	d919      	bls.n	8005f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2ba0      	cmp	r3, #160	; 0xa0
 8005f60:	d902      	bls.n	8005f68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f62:	2302      	movs	r3, #2
 8005f64:	613b      	str	r3, [r7, #16]
 8005f66:	e013      	b.n	8005f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f68:	2301      	movs	r3, #1
 8005f6a:	613b      	str	r3, [r7, #16]
 8005f6c:	e010      	b.n	8005f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b80      	cmp	r3, #128	; 0x80
 8005f72:	d902      	bls.n	8005f7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005f74:	2303      	movs	r3, #3
 8005f76:	613b      	str	r3, [r7, #16]
 8005f78:	e00a      	b.n	8005f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2b80      	cmp	r3, #128	; 0x80
 8005f7e:	d102      	bne.n	8005f86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f80:	2302      	movs	r3, #2
 8005f82:	613b      	str	r3, [r7, #16]
 8005f84:	e004      	b.n	8005f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b70      	cmp	r3, #112	; 0x70
 8005f8a:	d101      	bne.n	8005f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f90:	490b      	ldr	r1, [pc, #44]	; (8005fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f92:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f023 0207 	bic.w	r2, r3, #7
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005fa0:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0207 	and.w	r2, r3, #7
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d001      	beq.n	8005fb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e000      	b.n	8005fb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	40021000 	.word	0x40021000
 8005fc0:	40022000 	.word	0x40022000

08005fc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fcc:	2300      	movs	r3, #0
 8005fce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d02f      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005fe8:	d005      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005fea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005fee:	d015      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d007      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005ff4:	e00f      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005ff6:	4a5d      	ldr	r2, [pc, #372]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005ff8:	4b5c      	ldr	r3, [pc, #368]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006000:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006002:	e00c      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3304      	adds	r3, #4
 8006008:	2100      	movs	r1, #0
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fa44 	bl	8006498 <RCCEx_PLLSAI1_Config>
 8006010:	4603      	mov	r3, r0
 8006012:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006014:	e003      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	74fb      	strb	r3, [r7, #19]
      break;
 800601a:	e000      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 800601c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800601e:	7cfb      	ldrb	r3, [r7, #19]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10b      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006024:	4951      	ldr	r1, [pc, #324]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006026:	4b51      	ldr	r3, [pc, #324]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006034:	4313      	orrs	r3, r2
 8006036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800603a:	e001      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603c:	7cfb      	ldrb	r3, [r7, #19]
 800603e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 809e 	beq.w	800618a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800604e:	2300      	movs	r3, #0
 8006050:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006052:	4b46      	ldr	r3, [pc, #280]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8006062:	2300      	movs	r3, #0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00d      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006068:	4a40      	ldr	r2, [pc, #256]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800606a:	4b40      	ldr	r3, [pc, #256]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800606c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006072:	6593      	str	r3, [r2, #88]	; 0x58
 8006074:	4b3d      	ldr	r3, [pc, #244]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800607c:	60bb      	str	r3, [r7, #8]
 800607e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006080:	2301      	movs	r3, #1
 8006082:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006084:	4a3a      	ldr	r2, [pc, #232]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006086:	4b3a      	ldr	r3, [pc, #232]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800608e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006090:	f7fc ff74 	bl	8002f7c <HAL_GetTick>
 8006094:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006096:	e009      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006098:	f7fc ff70 	bl	8002f7c <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d902      	bls.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	74fb      	strb	r3, [r7, #19]
        break;
 80060aa:	e005      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060ac:	4b30      	ldr	r3, [pc, #192]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0ef      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80060b8:	7cfb      	ldrb	r3, [r7, #19]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d15a      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060be:	4b2b      	ldr	r3, [pc, #172]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80060c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01e      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d019      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060da:	4b24      	ldr	r3, [pc, #144]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80060dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060e6:	4a21      	ldr	r2, [pc, #132]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80060e8:	4b20      	ldr	r3, [pc, #128]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80060ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060f6:	4a1d      	ldr	r2, [pc, #116]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80060f8:	4b1c      	ldr	r3, [pc, #112]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80060fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006106:	4a19      	ldr	r2, [pc, #100]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	d016      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006118:	f7fc ff30 	bl	8002f7c <HAL_GetTick>
 800611c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800611e:	e00b      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006120:	f7fc ff2c 	bl	8002f7c <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	f241 3288 	movw	r2, #5000	; 0x1388
 800612e:	4293      	cmp	r3, r2
 8006130:	d902      	bls.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	74fb      	strb	r3, [r7, #19]
            break;
 8006136:	e006      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006138:	4b0c      	ldr	r3, [pc, #48]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800613a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0ec      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8006146:	7cfb      	ldrb	r3, [r7, #19]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10b      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800614c:	4907      	ldr	r1, [pc, #28]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800614e:	4b07      	ldr	r3, [pc, #28]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006154:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006162:	e009      	b.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006164:	7cfb      	ldrb	r3, [r7, #19]
 8006166:	74bb      	strb	r3, [r7, #18]
 8006168:	e006      	b.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800616a:	bf00      	nop
 800616c:	40021000 	.word	0x40021000
 8006170:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006174:	7cfb      	ldrb	r3, [r7, #19]
 8006176:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006178:	7c7b      	ldrb	r3, [r7, #17]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d105      	bne.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800617e:	4a9e      	ldr	r2, [pc, #632]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006180:	4b9d      	ldr	r3, [pc, #628]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006188:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006196:	4998      	ldr	r1, [pc, #608]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006198:	4b97      	ldr	r3, [pc, #604]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800619a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619e:	f023 0203 	bic.w	r2, r3, #3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061b8:	498f      	ldr	r1, [pc, #572]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80061ba:	4b8f      	ldr	r3, [pc, #572]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80061bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c0:	f023 020c 	bic.w	r2, r3, #12
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0304 	and.w	r3, r3, #4
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061da:	4987      	ldr	r1, [pc, #540]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80061dc:	4b86      	ldr	r3, [pc, #536]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80061de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0308 	and.w	r3, r3, #8
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00a      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061fc:	497e      	ldr	r1, [pc, #504]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80061fe:	4b7e      	ldr	r3, [pc, #504]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006204:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620c:	4313      	orrs	r3, r2
 800620e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0320 	and.w	r3, r3, #32
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800621e:	4976      	ldr	r1, [pc, #472]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006220:	4b75      	ldr	r3, [pc, #468]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006226:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622e:	4313      	orrs	r3, r2
 8006230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00a      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006240:	496d      	ldr	r1, [pc, #436]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006242:	4b6d      	ldr	r3, [pc, #436]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006248:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006250:	4313      	orrs	r3, r2
 8006252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006262:	4965      	ldr	r1, [pc, #404]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006264:	4b64      	ldr	r3, [pc, #400]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800626a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006272:	4313      	orrs	r3, r2
 8006274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00a      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006284:	495c      	ldr	r1, [pc, #368]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006286:	4b5c      	ldr	r3, [pc, #368]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006294:	4313      	orrs	r3, r2
 8006296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062a6:	4954      	ldr	r1, [pc, #336]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80062a8:	4b53      	ldr	r3, [pc, #332]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80062aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00a      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062c8:	494b      	ldr	r1, [pc, #300]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80062ca:	4b4b      	ldr	r3, [pc, #300]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80062cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d8:	4313      	orrs	r3, r2
 80062da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062ea:	4943      	ldr	r1, [pc, #268]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80062ec:	4b42      	ldr	r3, [pc, #264]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80062ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062f2:	f023 0203 	bic.w	r2, r3, #3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	4313      	orrs	r3, r2
 80062fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d028      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800630c:	493a      	ldr	r1, [pc, #232]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800630e:	4b3a      	ldr	r3, [pc, #232]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006314:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800631c:	4313      	orrs	r3, r2
 800631e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006326:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800632a:	d106      	bne.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800632c:	4a32      	ldr	r2, [pc, #200]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800632e:	4b32      	ldr	r3, [pc, #200]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006336:	60d3      	str	r3, [r2, #12]
 8006338:	e011      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800633e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006342:	d10c      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3304      	adds	r3, #4
 8006348:	2101      	movs	r1, #1
 800634a:	4618      	mov	r0, r3
 800634c:	f000 f8a4 	bl	8006498 <RCCEx_PLLSAI1_Config>
 8006350:	4603      	mov	r3, r0
 8006352:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006354:	7cfb      	ldrb	r3, [r7, #19]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 800635a:	7cfb      	ldrb	r3, [r7, #19]
 800635c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d028      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800636a:	4923      	ldr	r1, [pc, #140]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800636c:	4b22      	ldr	r3, [pc, #136]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800636e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006372:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006384:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006388:	d106      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800638a:	4a1b      	ldr	r2, [pc, #108]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800638c:	4b1a      	ldr	r3, [pc, #104]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006394:	60d3      	str	r3, [r2, #12]
 8006396:	e011      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063a0:	d10c      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	3304      	adds	r3, #4
 80063a6:	2101      	movs	r1, #1
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 f875 	bl	8006498 <RCCEx_PLLSAI1_Config>
 80063ae:	4603      	mov	r3, r0
 80063b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063b2:	7cfb      	ldrb	r3, [r7, #19]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 80063b8:	7cfb      	ldrb	r3, [r7, #19]
 80063ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d02b      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063c8:	490b      	ldr	r1, [pc, #44]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80063ca:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80063cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d8:	4313      	orrs	r3, r2
 80063da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063e6:	d109      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063e8:	4a03      	ldr	r2, [pc, #12]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80063ea:	4b03      	ldr	r3, [pc, #12]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063f2:	60d3      	str	r3, [r2, #12]
 80063f4:	e014      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 80063f6:	bf00      	nop
 80063f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006400:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006404:	d10c      	bne.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3304      	adds	r3, #4
 800640a:	2101      	movs	r1, #1
 800640c:	4618      	mov	r0, r3
 800640e:	f000 f843 	bl	8006498 <RCCEx_PLLSAI1_Config>
 8006412:	4603      	mov	r3, r0
 8006414:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006416:	7cfb      	ldrb	r3, [r7, #19]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 800641c:	7cfb      	ldrb	r3, [r7, #19]
 800641e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d01c      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800642c:	4919      	ldr	r1, [pc, #100]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800642e:	4b19      	ldr	r3, [pc, #100]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8006430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006434:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800643c:	4313      	orrs	r3, r2
 800643e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800644a:	d10c      	bne.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3304      	adds	r3, #4
 8006450:	2102      	movs	r1, #2
 8006452:	4618      	mov	r0, r3
 8006454:	f000 f820 	bl	8006498 <RCCEx_PLLSAI1_Config>
 8006458:	4603      	mov	r3, r0
 800645a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800645c:	7cfb      	ldrb	r3, [r7, #19]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 8006462:	7cfb      	ldrb	r3, [r7, #19]
 8006464:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00a      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006472:	4908      	ldr	r1, [pc, #32]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8006474:	4b07      	ldr	r3, [pc, #28]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8006476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800647a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006482:	4313      	orrs	r3, r2
 8006484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006488:	7cbb      	ldrb	r3, [r7, #18]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	40021000 	.word	0x40021000

08006498 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064a6:	4b73      	ldr	r3, [pc, #460]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d018      	beq.n	80064e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80064b2:	4b70      	ldr	r3, [pc, #448]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f003 0203 	and.w	r2, r3, #3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d10d      	bne.n	80064de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
       ||
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d009      	beq.n	80064de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80064ca:	4b6a      	ldr	r3, [pc, #424]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	091b      	lsrs	r3, r3, #4
 80064d0:	f003 0307 	and.w	r3, r3, #7
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
       ||
 80064da:	429a      	cmp	r2, r3
 80064dc:	d044      	beq.n	8006568 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	73fb      	strb	r3, [r7, #15]
 80064e2:	e041      	b.n	8006568 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d00c      	beq.n	8006506 <RCCEx_PLLSAI1_Config+0x6e>
 80064ec:	2b03      	cmp	r3, #3
 80064ee:	d013      	beq.n	8006518 <RCCEx_PLLSAI1_Config+0x80>
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d120      	bne.n	8006536 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064f4:	4b5f      	ldr	r3, [pc, #380]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d11d      	bne.n	800653c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006504:	e01a      	b.n	800653c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006506:	4b5b      	ldr	r3, [pc, #364]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800650e:	2b00      	cmp	r3, #0
 8006510:	d116      	bne.n	8006540 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006516:	e013      	b.n	8006540 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006518:	4b56      	ldr	r3, [pc, #344]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10f      	bne.n	8006544 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006524:	4b53      	ldr	r3, [pc, #332]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d109      	bne.n	8006544 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006534:	e006      	b.n	8006544 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	73fb      	strb	r3, [r7, #15]
      break;
 800653a:	e004      	b.n	8006546 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800653c:	bf00      	nop
 800653e:	e002      	b.n	8006546 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006540:	bf00      	nop
 8006542:	e000      	b.n	8006546 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006544:	bf00      	nop
    }

    if(status == HAL_OK)
 8006546:	7bfb      	ldrb	r3, [r7, #15]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10d      	bne.n	8006568 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800654c:	4849      	ldr	r0, [pc, #292]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 800654e:	4b49      	ldr	r3, [pc, #292]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6819      	ldr	r1, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	3b01      	subs	r3, #1
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	430b      	orrs	r3, r1
 8006564:	4313      	orrs	r3, r2
 8006566:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d17c      	bne.n	8006668 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800656e:	4a41      	ldr	r2, [pc, #260]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006570:	4b40      	ldr	r3, [pc, #256]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800657a:	f7fc fcff 	bl	8002f7c <HAL_GetTick>
 800657e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006580:	e009      	b.n	8006596 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006582:	f7fc fcfb 	bl	8002f7c <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	2b02      	cmp	r3, #2
 800658e:	d902      	bls.n	8006596 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	73fb      	strb	r3, [r7, #15]
        break;
 8006594:	e005      	b.n	80065a2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006596:	4b37      	ldr	r3, [pc, #220]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1ef      	bne.n	8006582 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80065a2:	7bfb      	ldrb	r3, [r7, #15]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d15f      	bne.n	8006668 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d110      	bne.n	80065d0 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065ae:	4831      	ldr	r0, [pc, #196]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065b0:	4b30      	ldr	r3, [pc, #192]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80065b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6892      	ldr	r2, [r2, #8]
 80065c0:	0211      	lsls	r1, r2, #8
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	68d2      	ldr	r2, [r2, #12]
 80065c6:	06d2      	lsls	r2, r2, #27
 80065c8:	430a      	orrs	r2, r1
 80065ca:	4313      	orrs	r3, r2
 80065cc:	6103      	str	r3, [r0, #16]
 80065ce:	e027      	b.n	8006620 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d112      	bne.n	80065fc <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065d6:	4827      	ldr	r0, [pc, #156]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065d8:	4b26      	ldr	r3, [pc, #152]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80065e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6892      	ldr	r2, [r2, #8]
 80065e8:	0211      	lsls	r1, r2, #8
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6912      	ldr	r2, [r2, #16]
 80065ee:	0852      	lsrs	r2, r2, #1
 80065f0:	3a01      	subs	r2, #1
 80065f2:	0552      	lsls	r2, r2, #21
 80065f4:	430a      	orrs	r2, r1
 80065f6:	4313      	orrs	r3, r2
 80065f8:	6103      	str	r3, [r0, #16]
 80065fa:	e011      	b.n	8006620 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065fc:	481d      	ldr	r0, [pc, #116]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065fe:	4b1d      	ldr	r3, [pc, #116]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006606:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6892      	ldr	r2, [r2, #8]
 800660e:	0211      	lsls	r1, r2, #8
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6952      	ldr	r2, [r2, #20]
 8006614:	0852      	lsrs	r2, r2, #1
 8006616:	3a01      	subs	r2, #1
 8006618:	0652      	lsls	r2, r2, #25
 800661a:	430a      	orrs	r2, r1
 800661c:	4313      	orrs	r3, r2
 800661e:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006620:	4a14      	ldr	r2, [pc, #80]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006622:	4b14      	ldr	r3, [pc, #80]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800662a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800662c:	f7fc fca6 	bl	8002f7c <HAL_GetTick>
 8006630:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006632:	e009      	b.n	8006648 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006634:	f7fc fca2 	bl	8002f7c <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d902      	bls.n	8006648 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	73fb      	strb	r3, [r7, #15]
          break;
 8006646:	e005      	b.n	8006654 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006648:	4b0a      	ldr	r3, [pc, #40]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d0ef      	beq.n	8006634 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d106      	bne.n	8006668 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800665a:	4906      	ldr	r1, [pc, #24]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 800665c:	4b05      	ldr	r3, [pc, #20]	; (8006674 <RCCEx_PLLSAI1_Config+0x1dc>)
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	4313      	orrs	r3, r2
 8006666:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006668:	7bfb      	ldrb	r3, [r7, #15]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	40021000 	.word	0x40021000

08006678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e01d      	b.n	80066c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d106      	bne.n	80066a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f005 f870 	bl	800b784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4619      	mov	r1, r3
 80066b6:	4610      	mov	r0, r2
 80066b8:	f000 fa18 	bl	8006aec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b082      	sub	sp, #8
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e01d      	b.n	800671c <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d106      	bne.n	80066fa <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f004 ffc3 	bl	800b680 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2202      	movs	r2, #2
 80066fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	3304      	adds	r3, #4
 800670a:	4619      	mov	r1, r3
 800670c:	4610      	mov	r0, r2
 800670e:	f000 f9ed 	bl	8006aec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b02      	cmp	r3, #2
 8006738:	d122      	bne.n	8006780 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b02      	cmp	r3, #2
 8006746:	d11b      	bne.n	8006780 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f06f 0202 	mvn.w	r2, #2
 8006750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f9a1 	bl	8006aae <HAL_TIM_IC_CaptureCallback>
 800676c:	e005      	b.n	800677a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f993 	bl	8006a9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f9a4 	bl	8006ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f003 0304 	and.w	r3, r3, #4
 800678a:	2b04      	cmp	r3, #4
 800678c:	d122      	bne.n	80067d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	2b04      	cmp	r3, #4
 800679a:	d11b      	bne.n	80067d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f06f 0204 	mvn.w	r2, #4
 80067a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2202      	movs	r2, #2
 80067aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f977 	bl	8006aae <HAL_TIM_IC_CaptureCallback>
 80067c0:	e005      	b.n	80067ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f969 	bl	8006a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f97a 	bl	8006ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f003 0308 	and.w	r3, r3, #8
 80067de:	2b08      	cmp	r3, #8
 80067e0:	d122      	bne.n	8006828 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f003 0308 	and.w	r3, r3, #8
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d11b      	bne.n	8006828 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f06f 0208 	mvn.w	r2, #8
 80067f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2204      	movs	r2, #4
 80067fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f94d 	bl	8006aae <HAL_TIM_IC_CaptureCallback>
 8006814:	e005      	b.n	8006822 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f93f 	bl	8006a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 f950 	bl	8006ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f003 0310 	and.w	r3, r3, #16
 8006832:	2b10      	cmp	r3, #16
 8006834:	d122      	bne.n	800687c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f003 0310 	and.w	r3, r3, #16
 8006840:	2b10      	cmp	r3, #16
 8006842:	d11b      	bne.n	800687c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f06f 0210 	mvn.w	r2, #16
 800684c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2208      	movs	r2, #8
 8006852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f923 	bl	8006aae <HAL_TIM_IC_CaptureCallback>
 8006868:	e005      	b.n	8006876 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f915 	bl	8006a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f926 	bl	8006ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b01      	cmp	r3, #1
 8006888:	d10e      	bne.n	80068a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b01      	cmp	r3, #1
 8006896:	d107      	bne.n	80068a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f06f 0201 	mvn.w	r2, #1
 80068a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fc fad6 	bl	8002e54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b2:	2b80      	cmp	r3, #128	; 0x80
 80068b4:	d10e      	bne.n	80068d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c0:	2b80      	cmp	r3, #128	; 0x80
 80068c2:	d107      	bne.n	80068d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 faec 	bl	8006eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e2:	d10e      	bne.n	8006902 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ee:	2b80      	cmp	r3, #128	; 0x80
 80068f0:	d107      	bne.n	8006902 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80068fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fadf 	bl	8006ec0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690c:	2b40      	cmp	r3, #64	; 0x40
 800690e:	d10e      	bne.n	800692e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691a:	2b40      	cmp	r3, #64	; 0x40
 800691c:	d107      	bne.n	800692e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f8d4 	bl	8006ad6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	f003 0320 	and.w	r3, r3, #32
 8006938:	2b20      	cmp	r3, #32
 800693a:	d10e      	bne.n	800695a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b20      	cmp	r3, #32
 8006948:	d107      	bne.n	800695a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f06f 0220 	mvn.w	r2, #32
 8006952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fa9f 	bl	8006e98 <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800695a:	bf00      	nop
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_TIM_IC_ConfigChannel+0x1a>
 8006978:	2302      	movs	r3, #2
 800697a:	e08a      	b.n	8006a92 <HAL_TIM_IC_ConfigChannel+0x130>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d11b      	bne.n	80069ca <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	6819      	ldr	r1, [r3, #0]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f000 f911 	bl	8006bc8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	6812      	ldr	r2, [r2, #0]
 80069ae:	6992      	ldr	r2, [r2, #24]
 80069b0:	f022 020c 	bic.w	r2, r2, #12
 80069b4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	6812      	ldr	r2, [r2, #0]
 80069be:	6991      	ldr	r1, [r2, #24]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	6892      	ldr	r2, [r2, #8]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	619a      	str	r2, [r3, #24]
 80069c8:	e05a      	b.n	8006a80 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d11c      	bne.n	8006a0a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6818      	ldr	r0, [r3, #0]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	6819      	ldr	r1, [r3, #0]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f000 f94e 	bl	8006c80 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	6812      	ldr	r2, [r2, #0]
 80069ec:	6992      	ldr	r2, [r2, #24]
 80069ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80069f2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	6812      	ldr	r2, [r2, #0]
 80069fc:	6991      	ldr	r1, [r2, #24]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	6892      	ldr	r2, [r2, #8]
 8006a02:	0212      	lsls	r2, r2, #8
 8006a04:	430a      	orrs	r2, r1
 8006a06:	619a      	str	r2, [r3, #24]
 8006a08:	e03a      	b.n	8006a80 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d11b      	bne.n	8006a48 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6818      	ldr	r0, [r3, #0]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	6819      	ldr	r1, [r3, #0]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f000 f96b 	bl	8006cfa <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	6812      	ldr	r2, [r2, #0]
 8006a2c:	69d2      	ldr	r2, [r2, #28]
 8006a2e:	f022 020c 	bic.w	r2, r2, #12
 8006a32:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	6812      	ldr	r2, [r2, #0]
 8006a3c:	69d1      	ldr	r1, [r2, #28]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	6892      	ldr	r2, [r2, #8]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	61da      	str	r2, [r3, #28]
 8006a46:	e01b      	b.n	8006a80 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6818      	ldr	r0, [r3, #0]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	6819      	ldr	r1, [r3, #0]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f000 f98b 	bl	8006d72 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	6812      	ldr	r2, [r2, #0]
 8006a64:	69d2      	ldr	r2, [r2, #28]
 8006a66:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a6a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	6812      	ldr	r2, [r2, #0]
 8006a74:	69d1      	ldr	r1, [r2, #28]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	6892      	ldr	r2, [r2, #8]
 8006a7a:	0212      	lsls	r2, r2, #8
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006aa2:	bf00      	nop
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b083      	sub	sp, #12
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ab6:	bf00      	nop
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b083      	sub	sp, #12
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ade:	bf00      	nop
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
	...

08006aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a2e      	ldr	r2, [pc, #184]	; (8006bb8 <TIM_Base_SetConfig+0xcc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d007      	beq.n	8006b14 <TIM_Base_SetConfig+0x28>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0a:	d003      	beq.n	8006b14 <TIM_Base_SetConfig+0x28>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a2b      	ldr	r2, [pc, #172]	; (8006bbc <TIM_Base_SetConfig+0xd0>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d108      	bne.n	8006b26 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a23      	ldr	r2, [pc, #140]	; (8006bb8 <TIM_Base_SetConfig+0xcc>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d00f      	beq.n	8006b4e <TIM_Base_SetConfig+0x62>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b34:	d00b      	beq.n	8006b4e <TIM_Base_SetConfig+0x62>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a20      	ldr	r2, [pc, #128]	; (8006bbc <TIM_Base_SetConfig+0xd0>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d007      	beq.n	8006b4e <TIM_Base_SetConfig+0x62>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a1f      	ldr	r2, [pc, #124]	; (8006bc0 <TIM_Base_SetConfig+0xd4>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d003      	beq.n	8006b4e <TIM_Base_SetConfig+0x62>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a1e      	ldr	r2, [pc, #120]	; (8006bc4 <TIM_Base_SetConfig+0xd8>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d108      	bne.n	8006b60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a0c      	ldr	r2, [pc, #48]	; (8006bb8 <TIM_Base_SetConfig+0xcc>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d007      	beq.n	8006b9c <TIM_Base_SetConfig+0xb0>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a0c      	ldr	r2, [pc, #48]	; (8006bc0 <TIM_Base_SetConfig+0xd4>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d003      	beq.n	8006b9c <TIM_Base_SetConfig+0xb0>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a0b      	ldr	r2, [pc, #44]	; (8006bc4 <TIM_Base_SetConfig+0xd8>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d103      	bne.n	8006ba4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	615a      	str	r2, [r3, #20]
}
 8006baa:	bf00      	nop
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	40012c00 	.word	0x40012c00
 8006bbc:	40000400 	.word	0x40000400
 8006bc0:	40014000 	.word	0x40014000
 8006bc4:	40014400 	.word	0x40014400

08006bc8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f023 0201 	bic.w	r2, r3, #1
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4a20      	ldr	r2, [pc, #128]	; (8006c74 <TIM_TI1_SetConfig+0xac>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d00b      	beq.n	8006c0e <TIM_TI1_SetConfig+0x46>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bfc:	d007      	beq.n	8006c0e <TIM_TI1_SetConfig+0x46>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4a1d      	ldr	r2, [pc, #116]	; (8006c78 <TIM_TI1_SetConfig+0xb0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d003      	beq.n	8006c0e <TIM_TI1_SetConfig+0x46>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4a1c      	ldr	r2, [pc, #112]	; (8006c7c <TIM_TI1_SetConfig+0xb4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d101      	bne.n	8006c12 <TIM_TI1_SetConfig+0x4a>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e000      	b.n	8006c14 <TIM_TI1_SetConfig+0x4c>
 8006c12:	2300      	movs	r3, #0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d008      	beq.n	8006c2a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f023 0303 	bic.w	r3, r3, #3
 8006c1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	617b      	str	r3, [r7, #20]
 8006c28:	e003      	b.n	8006c32 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f043 0301 	orr.w	r3, r3, #1
 8006c30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	011b      	lsls	r3, r3, #4
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f023 030a 	bic.w	r3, r3, #10
 8006c4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f003 030a 	and.w	r3, r3, #10
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	621a      	str	r2, [r3, #32]
}
 8006c66:	bf00      	nop
 8006c68:	371c      	adds	r7, #28
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	40012c00 	.word	0x40012c00
 8006c78:	40000400 	.word	0x40000400
 8006c7c:	40014000 	.word	0x40014000

08006c80 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
 8006c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	f023 0210 	bic.w	r2, r3, #16
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	021b      	lsls	r3, r3, #8
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	031b      	lsls	r3, r3, #12
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cd2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	011b      	lsls	r3, r3, #4
 8006cd8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	621a      	str	r2, [r3, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b087      	sub	sp, #28
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	60f8      	str	r0, [r7, #12]
 8006d02:	60b9      	str	r1, [r7, #8]
 8006d04:	607a      	str	r2, [r7, #4]
 8006d06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f023 0303 	bic.w	r3, r3, #3
 8006d26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d36:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	011b      	lsls	r3, r3, #4
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006d4a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	021b      	lsls	r3, r3, #8
 8006d50:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	621a      	str	r2, [r3, #32]
}
 8006d66:	bf00      	nop
 8006d68:	371c      	adds	r7, #28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b087      	sub	sp, #28
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	607a      	str	r2, [r7, #4]
 8006d7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d9e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006db0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	031b      	lsls	r3, r3, #12
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006dc4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	031b      	lsls	r3, r3, #12
 8006dca:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	621a      	str	r2, [r3, #32]
}
 8006de0:	bf00      	nop
 8006de2:	371c      	adds	r7, #28
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d101      	bne.n	8006e04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e00:	2302      	movs	r3, #2
 8006e02:	e040      	b.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a1a      	ldr	r2, [pc, #104]	; (8006e94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d108      	bne.n	8006e40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e58:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	40012c00 	.word	0x40012c00

08006e98 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e043      	b.n	8006f6e <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f004 fd88 	bl	800ba10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2224      	movs	r2, #36	; 0x24
 8006f04:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	6812      	ldr	r2, [r2, #0]
 8006f10:	6812      	ldr	r2, [r2, #0]
 8006f12:	f022 0201 	bic.w	r2, r2, #1
 8006f16:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f82d 	bl	8006f78 <UART_SetConfig>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e022      	b.n	8006f6e <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fb31 	bl	8007598 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6812      	ldr	r2, [r2, #0]
 8006f3e:	6852      	ldr	r2, [r2, #4]
 8006f40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6812      	ldr	r2, [r2, #0]
 8006f4e:	6892      	ldr	r2, [r2, #8]
 8006f50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f54:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	6812      	ldr	r2, [r2, #0]
 8006f5e:	6812      	ldr	r2, [r2, #0]
 8006f60:	f042 0201 	orr.w	r2, r2, #1
 8006f64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fbb8 	bl	80076dc <UART_CheckIdleState>
 8006f6c:	4603      	mov	r3, r0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006f7c:	b088      	sub	sp, #32
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006f86:	2310      	movs	r3, #16
 8006f88:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6819      	ldr	r1, [r3, #0]
 8006fbc:	4bad      	ldr	r3, [pc, #692]	; (8007274 <UART_SetConfig+0x2fc>)
 8006fbe:	400b      	ands	r3, r1
 8006fc0:	69f9      	ldr	r1, [r7, #28]
 8006fc2:	430b      	orrs	r3, r1
 8006fc4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	6812      	ldr	r2, [r2, #0]
 8006fce:	6852      	ldr	r2, [r2, #4]
 8006fd0:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	68d2      	ldr	r2, [r2, #12]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4aa4      	ldr	r2, [pc, #656]	; (8007278 <UART_SetConfig+0x300>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d004      	beq.n	8006ff6 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a1b      	ldr	r3, [r3, #32]
 8006ff0:	69fa      	ldr	r2, [r7, #28]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	6812      	ldr	r2, [r2, #0]
 8006ffe:	6892      	ldr	r2, [r2, #8]
 8007000:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	430a      	orrs	r2, r1
 8007008:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a9b      	ldr	r2, [pc, #620]	; (800727c <UART_SetConfig+0x304>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d121      	bne.n	8007058 <UART_SetConfig+0xe0>
 8007014:	4b9a      	ldr	r3, [pc, #616]	; (8007280 <UART_SetConfig+0x308>)
 8007016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800701a:	f003 0303 	and.w	r3, r3, #3
 800701e:	2b03      	cmp	r3, #3
 8007020:	d816      	bhi.n	8007050 <UART_SetConfig+0xd8>
 8007022:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <UART_SetConfig+0xb0>)
 8007024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007028:	08007039 	.word	0x08007039
 800702c:	08007045 	.word	0x08007045
 8007030:	0800703f 	.word	0x0800703f
 8007034:	0800704b 	.word	0x0800704b
 8007038:	2301      	movs	r3, #1
 800703a:	76fb      	strb	r3, [r7, #27]
 800703c:	e0ba      	b.n	80071b4 <UART_SetConfig+0x23c>
 800703e:	2302      	movs	r3, #2
 8007040:	76fb      	strb	r3, [r7, #27]
 8007042:	e0b7      	b.n	80071b4 <UART_SetConfig+0x23c>
 8007044:	2304      	movs	r3, #4
 8007046:	76fb      	strb	r3, [r7, #27]
 8007048:	e0b4      	b.n	80071b4 <UART_SetConfig+0x23c>
 800704a:	2308      	movs	r3, #8
 800704c:	76fb      	strb	r3, [r7, #27]
 800704e:	e0b1      	b.n	80071b4 <UART_SetConfig+0x23c>
 8007050:	2310      	movs	r3, #16
 8007052:	76fb      	strb	r3, [r7, #27]
 8007054:	bf00      	nop
 8007056:	e0ad      	b.n	80071b4 <UART_SetConfig+0x23c>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a89      	ldr	r2, [pc, #548]	; (8007284 <UART_SetConfig+0x30c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d134      	bne.n	80070cc <UART_SetConfig+0x154>
 8007062:	4b87      	ldr	r3, [pc, #540]	; (8007280 <UART_SetConfig+0x308>)
 8007064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007068:	f003 030c 	and.w	r3, r3, #12
 800706c:	2b0c      	cmp	r3, #12
 800706e:	d829      	bhi.n	80070c4 <UART_SetConfig+0x14c>
 8007070:	a201      	add	r2, pc, #4	; (adr r2, 8007078 <UART_SetConfig+0x100>)
 8007072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007076:	bf00      	nop
 8007078:	080070ad 	.word	0x080070ad
 800707c:	080070c5 	.word	0x080070c5
 8007080:	080070c5 	.word	0x080070c5
 8007084:	080070c5 	.word	0x080070c5
 8007088:	080070b9 	.word	0x080070b9
 800708c:	080070c5 	.word	0x080070c5
 8007090:	080070c5 	.word	0x080070c5
 8007094:	080070c5 	.word	0x080070c5
 8007098:	080070b3 	.word	0x080070b3
 800709c:	080070c5 	.word	0x080070c5
 80070a0:	080070c5 	.word	0x080070c5
 80070a4:	080070c5 	.word	0x080070c5
 80070a8:	080070bf 	.word	0x080070bf
 80070ac:	2300      	movs	r3, #0
 80070ae:	76fb      	strb	r3, [r7, #27]
 80070b0:	e080      	b.n	80071b4 <UART_SetConfig+0x23c>
 80070b2:	2302      	movs	r3, #2
 80070b4:	76fb      	strb	r3, [r7, #27]
 80070b6:	e07d      	b.n	80071b4 <UART_SetConfig+0x23c>
 80070b8:	2304      	movs	r3, #4
 80070ba:	76fb      	strb	r3, [r7, #27]
 80070bc:	e07a      	b.n	80071b4 <UART_SetConfig+0x23c>
 80070be:	2308      	movs	r3, #8
 80070c0:	76fb      	strb	r3, [r7, #27]
 80070c2:	e077      	b.n	80071b4 <UART_SetConfig+0x23c>
 80070c4:	2310      	movs	r3, #16
 80070c6:	76fb      	strb	r3, [r7, #27]
 80070c8:	bf00      	nop
 80070ca:	e073      	b.n	80071b4 <UART_SetConfig+0x23c>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a6d      	ldr	r2, [pc, #436]	; (8007288 <UART_SetConfig+0x310>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d120      	bne.n	8007118 <UART_SetConfig+0x1a0>
 80070d6:	4b6a      	ldr	r3, [pc, #424]	; (8007280 <UART_SetConfig+0x308>)
 80070d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80070e0:	2b10      	cmp	r3, #16
 80070e2:	d00f      	beq.n	8007104 <UART_SetConfig+0x18c>
 80070e4:	2b10      	cmp	r3, #16
 80070e6:	d802      	bhi.n	80070ee <UART_SetConfig+0x176>
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d005      	beq.n	80070f8 <UART_SetConfig+0x180>
 80070ec:	e010      	b.n	8007110 <UART_SetConfig+0x198>
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	d005      	beq.n	80070fe <UART_SetConfig+0x186>
 80070f2:	2b30      	cmp	r3, #48	; 0x30
 80070f4:	d009      	beq.n	800710a <UART_SetConfig+0x192>
 80070f6:	e00b      	b.n	8007110 <UART_SetConfig+0x198>
 80070f8:	2300      	movs	r3, #0
 80070fa:	76fb      	strb	r3, [r7, #27]
 80070fc:	e05a      	b.n	80071b4 <UART_SetConfig+0x23c>
 80070fe:	2302      	movs	r3, #2
 8007100:	76fb      	strb	r3, [r7, #27]
 8007102:	e057      	b.n	80071b4 <UART_SetConfig+0x23c>
 8007104:	2304      	movs	r3, #4
 8007106:	76fb      	strb	r3, [r7, #27]
 8007108:	e054      	b.n	80071b4 <UART_SetConfig+0x23c>
 800710a:	2308      	movs	r3, #8
 800710c:	76fb      	strb	r3, [r7, #27]
 800710e:	e051      	b.n	80071b4 <UART_SetConfig+0x23c>
 8007110:	2310      	movs	r3, #16
 8007112:	76fb      	strb	r3, [r7, #27]
 8007114:	bf00      	nop
 8007116:	e04d      	b.n	80071b4 <UART_SetConfig+0x23c>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a5b      	ldr	r2, [pc, #364]	; (800728c <UART_SetConfig+0x314>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d120      	bne.n	8007164 <UART_SetConfig+0x1ec>
 8007122:	4b57      	ldr	r3, [pc, #348]	; (8007280 <UART_SetConfig+0x308>)
 8007124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007128:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800712c:	2b40      	cmp	r3, #64	; 0x40
 800712e:	d00f      	beq.n	8007150 <UART_SetConfig+0x1d8>
 8007130:	2b40      	cmp	r3, #64	; 0x40
 8007132:	d802      	bhi.n	800713a <UART_SetConfig+0x1c2>
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <UART_SetConfig+0x1cc>
 8007138:	e010      	b.n	800715c <UART_SetConfig+0x1e4>
 800713a:	2b80      	cmp	r3, #128	; 0x80
 800713c:	d005      	beq.n	800714a <UART_SetConfig+0x1d2>
 800713e:	2bc0      	cmp	r3, #192	; 0xc0
 8007140:	d009      	beq.n	8007156 <UART_SetConfig+0x1de>
 8007142:	e00b      	b.n	800715c <UART_SetConfig+0x1e4>
 8007144:	2300      	movs	r3, #0
 8007146:	76fb      	strb	r3, [r7, #27]
 8007148:	e034      	b.n	80071b4 <UART_SetConfig+0x23c>
 800714a:	2302      	movs	r3, #2
 800714c:	76fb      	strb	r3, [r7, #27]
 800714e:	e031      	b.n	80071b4 <UART_SetConfig+0x23c>
 8007150:	2304      	movs	r3, #4
 8007152:	76fb      	strb	r3, [r7, #27]
 8007154:	e02e      	b.n	80071b4 <UART_SetConfig+0x23c>
 8007156:	2308      	movs	r3, #8
 8007158:	76fb      	strb	r3, [r7, #27]
 800715a:	e02b      	b.n	80071b4 <UART_SetConfig+0x23c>
 800715c:	2310      	movs	r3, #16
 800715e:	76fb      	strb	r3, [r7, #27]
 8007160:	bf00      	nop
 8007162:	e027      	b.n	80071b4 <UART_SetConfig+0x23c>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a43      	ldr	r2, [pc, #268]	; (8007278 <UART_SetConfig+0x300>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d123      	bne.n	80071b6 <UART_SetConfig+0x23e>
 800716e:	4b44      	ldr	r3, [pc, #272]	; (8007280 <UART_SetConfig+0x308>)
 8007170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007174:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800717c:	d012      	beq.n	80071a4 <UART_SetConfig+0x22c>
 800717e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007182:	d802      	bhi.n	800718a <UART_SetConfig+0x212>
 8007184:	2b00      	cmp	r3, #0
 8007186:	d007      	beq.n	8007198 <UART_SetConfig+0x220>
 8007188:	e012      	b.n	80071b0 <UART_SetConfig+0x238>
 800718a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800718e:	d006      	beq.n	800719e <UART_SetConfig+0x226>
 8007190:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007194:	d009      	beq.n	80071aa <UART_SetConfig+0x232>
 8007196:	e00b      	b.n	80071b0 <UART_SetConfig+0x238>
 8007198:	2300      	movs	r3, #0
 800719a:	76fb      	strb	r3, [r7, #27]
 800719c:	e00a      	b.n	80071b4 <UART_SetConfig+0x23c>
 800719e:	2302      	movs	r3, #2
 80071a0:	76fb      	strb	r3, [r7, #27]
 80071a2:	e007      	b.n	80071b4 <UART_SetConfig+0x23c>
 80071a4:	2304      	movs	r3, #4
 80071a6:	76fb      	strb	r3, [r7, #27]
 80071a8:	e004      	b.n	80071b4 <UART_SetConfig+0x23c>
 80071aa:	2308      	movs	r3, #8
 80071ac:	76fb      	strb	r3, [r7, #27]
 80071ae:	e001      	b.n	80071b4 <UART_SetConfig+0x23c>
 80071b0:	2310      	movs	r3, #16
 80071b2:	76fb      	strb	r3, [r7, #27]
 80071b4:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a2f      	ldr	r2, [pc, #188]	; (8007278 <UART_SetConfig+0x300>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	f040 80ea 	bne.w	8007396 <UART_SetConfig+0x41e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071c2:	7efb      	ldrb	r3, [r7, #27]
 80071c4:	2b08      	cmp	r3, #8
 80071c6:	d824      	bhi.n	8007212 <UART_SetConfig+0x29a>
 80071c8:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <UART_SetConfig+0x258>)
 80071ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ce:	bf00      	nop
 80071d0:	080071f5 	.word	0x080071f5
 80071d4:	08007213 	.word	0x08007213
 80071d8:	080071fd 	.word	0x080071fd
 80071dc:	08007213 	.word	0x08007213
 80071e0:	08007203 	.word	0x08007203
 80071e4:	08007213 	.word	0x08007213
 80071e8:	08007213 	.word	0x08007213
 80071ec:	08007213 	.word	0x08007213
 80071f0:	0800720b 	.word	0x0800720b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80071f4:	f7fe fe5a 	bl	8005eac <HAL_RCC_GetPCLK1Freq>
 80071f8:	60f8      	str	r0, [r7, #12]
#endif
        break;
 80071fa:	e00d      	b.n	8007218 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80071fc:	4b24      	ldr	r3, [pc, #144]	; (8007290 <UART_SetConfig+0x318>)
 80071fe:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8007200:	e00a      	b.n	8007218 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007202:	f7fe fdab 	bl	8005d5c <HAL_RCC_GetSysClockFreq>
 8007206:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8007208:	e006      	b.n	8007218 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800720a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800720e:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8007210:	e002      	b.n	8007218 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	74fb      	strb	r3, [r7, #19]
        break;
 8007216:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 81ad 	beq.w	800757a <UART_SetConfig+0x602>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	4613      	mov	r3, r2
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	441a      	add	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	429a      	cmp	r2, r3
 800722e:	d805      	bhi.n	800723c <UART_SetConfig+0x2c4>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	429a      	cmp	r2, r3
 800723a:	d202      	bcs.n	8007242 <UART_SetConfig+0x2ca>
      {
        ret = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	74fb      	strb	r3, [r7, #19]
 8007240:	e19b      	b.n	800757a <UART_SetConfig+0x602>
      }
      else
      {
        switch (clocksource)
 8007242:	7efb      	ldrb	r3, [r7, #27]
 8007244:	2b08      	cmp	r3, #8
 8007246:	f200 8093 	bhi.w	8007370 <UART_SetConfig+0x3f8>
 800724a:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <UART_SetConfig+0x2d8>)
 800724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007250:	08007295 	.word	0x08007295
 8007254:	08007371 	.word	0x08007371
 8007258:	080072d5 	.word	0x080072d5
 800725c:	08007371 	.word	0x08007371
 8007260:	08007309 	.word	0x08007309
 8007264:	08007371 	.word	0x08007371
 8007268:	08007371 	.word	0x08007371
 800726c:	08007371 	.word	0x08007371
 8007270:	08007347 	.word	0x08007347
 8007274:	efff69f3 	.word	0xefff69f3
 8007278:	40008000 	.word	0x40008000
 800727c:	40013800 	.word	0x40013800
 8007280:	40021000 	.word	0x40021000
 8007284:	40004400 	.word	0x40004400
 8007288:	40004800 	.word	0x40004800
 800728c:	40004c00 	.word	0x40004c00
 8007290:	00f42400 	.word	0x00f42400
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007294:	f7fe fe0a 	bl	8005eac <HAL_RCC_GetPCLK1Freq>
 8007298:	4603      	mov	r3, r0
 800729a:	f04f 0400 	mov.w	r4, #0
 800729e:	ea4f 2904 	mov.w	r9, r4, lsl #8
 80072a2:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 80072a6:	ea4f 2803 	mov.w	r8, r3, lsl #8
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	085b      	lsrs	r3, r3, #1
 80072b0:	f04f 0400 	mov.w	r4, #0
 80072b4:	eb18 0003 	adds.w	r0, r8, r3
 80072b8:	eb49 0104 	adc.w	r1, r9, r4
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f04f 0400 	mov.w	r4, #0
 80072c4:	461a      	mov	r2, r3
 80072c6:	4623      	mov	r3, r4
 80072c8:	f7f8 ffe2 	bl	8000290 <__aeabi_uldivmod>
 80072cc:	4603      	mov	r3, r0
 80072ce:	460c      	mov	r4, r1
 80072d0:	617b      	str	r3, [r7, #20]
#endif
            break;
 80072d2:	e050      	b.n	8007376 <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	085b      	lsrs	r3, r3, #1
 80072da:	f04f 0400 	mov.w	r4, #0
 80072de:	49ad      	ldr	r1, [pc, #692]	; (8007594 <UART_SetConfig+0x61c>)
 80072e0:	f04f 0200 	mov.w	r2, #0
 80072e4:	eb13 0801 	adds.w	r8, r3, r1
 80072e8:	eb44 0902 	adc.w	r9, r4, r2
 80072ec:	4640      	mov	r0, r8
 80072ee:	4649      	mov	r1, r9
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f04f 0400 	mov.w	r4, #0
 80072f8:	461a      	mov	r2, r3
 80072fa:	4623      	mov	r3, r4
 80072fc:	f7f8 ffc8 	bl	8000290 <__aeabi_uldivmod>
 8007300:	4603      	mov	r3, r0
 8007302:	460c      	mov	r4, r1
 8007304:	617b      	str	r3, [r7, #20]
#endif
            break;
 8007306:	e036      	b.n	8007376 <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007308:	f7fe fd28 	bl	8005d5c <HAL_RCC_GetSysClockFreq>
 800730c:	4603      	mov	r3, r0
 800730e:	461a      	mov	r2, r3
 8007310:	f04f 0300 	mov.w	r3, #0
 8007314:	021d      	lsls	r5, r3, #8
 8007316:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 800731a:	0214      	lsls	r4, r2, #8
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	085b      	lsrs	r3, r3, #1
 8007322:	461a      	mov	r2, r3
 8007324:	f04f 0300 	mov.w	r3, #0
 8007328:	18a0      	adds	r0, r4, r2
 800732a:	eb45 0103 	adc.w	r1, r5, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f04f 0400 	mov.w	r4, #0
 8007336:	461a      	mov	r2, r3
 8007338:	4623      	mov	r3, r4
 800733a:	f7f8 ffa9 	bl	8000290 <__aeabi_uldivmod>
 800733e:	4603      	mov	r3, r0
 8007340:	460c      	mov	r4, r1
 8007342:	617b      	str	r3, [r7, #20]
#endif
            break;
 8007344:	e017      	b.n	8007376 <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	085b      	lsrs	r3, r3, #1
 800734c:	f04f 0400 	mov.w	r4, #0
 8007350:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8007354:	f144 0100 	adc.w	r1, r4, #0
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f04f 0400 	mov.w	r4, #0
 8007360:	461a      	mov	r2, r3
 8007362:	4623      	mov	r3, r4
 8007364:	f7f8 ff94 	bl	8000290 <__aeabi_uldivmod>
 8007368:	4603      	mov	r3, r0
 800736a:	460c      	mov	r4, r1
 800736c:	617b      	str	r3, [r7, #20]
#endif
            break;
 800736e:	e002      	b.n	8007376 <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	74fb      	strb	r3, [r7, #19]
            break;
 8007374:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800737c:	d308      	bcc.n	8007390 <UART_SetConfig+0x418>
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007384:	d204      	bcs.n	8007390 <UART_SetConfig+0x418>
        {
          huart->Instance->BRR = usartdiv;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	60da      	str	r2, [r3, #12]
 800738e:	e0f4      	b.n	800757a <UART_SetConfig+0x602>
        }
        else
        {
          ret = HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	74fb      	strb	r3, [r7, #19]
 8007394:	e0f1      	b.n	800757a <UART_SetConfig+0x602>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800739e:	d17e      	bne.n	800749e <UART_SetConfig+0x526>
  {
    switch (clocksource)
 80073a0:	7efb      	ldrb	r3, [r7, #27]
 80073a2:	2b08      	cmp	r3, #8
 80073a4:	d85b      	bhi.n	800745e <UART_SetConfig+0x4e6>
 80073a6:	a201      	add	r2, pc, #4	; (adr r2, 80073ac <UART_SetConfig+0x434>)
 80073a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ac:	080073d1 	.word	0x080073d1
 80073b0:	080073ef 	.word	0x080073ef
 80073b4:	0800740d 	.word	0x0800740d
 80073b8:	0800745f 	.word	0x0800745f
 80073bc:	08007429 	.word	0x08007429
 80073c0:	0800745f 	.word	0x0800745f
 80073c4:	0800745f 	.word	0x0800745f
 80073c8:	0800745f 	.word	0x0800745f
 80073cc:	08007447 	.word	0x08007447
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80073d0:	f7fe fd6c 	bl	8005eac <HAL_RCC_GetPCLK1Freq>
 80073d4:	4603      	mov	r3, r0
 80073d6:	005a      	lsls	r2, r3, #1
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	085b      	lsrs	r3, r3, #1
 80073de:	441a      	add	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	617b      	str	r3, [r7, #20]
#endif
        break;
 80073ec:	e03a      	b.n	8007464 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80073ee:	f7fe fd73 	bl	8005ed8 <HAL_RCC_GetPCLK2Freq>
 80073f2:	4603      	mov	r3, r0
 80073f4:	005a      	lsls	r2, r3, #1
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	085b      	lsrs	r3, r3, #1
 80073fc:	441a      	add	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	fbb2 f3f3 	udiv	r3, r2, r3
 8007406:	b29b      	uxth	r3, r3
 8007408:	617b      	str	r3, [r7, #20]
#endif
        break;
 800740a:	e02b      	b.n	8007464 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	085b      	lsrs	r3, r3, #1
 8007412:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007416:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	6852      	ldr	r2, [r2, #4]
 800741e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007422:	b29b      	uxth	r3, r3
 8007424:	617b      	str	r3, [r7, #20]
#endif
        break;
 8007426:	e01d      	b.n	8007464 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007428:	f7fe fc98 	bl	8005d5c <HAL_RCC_GetSysClockFreq>
 800742c:	4603      	mov	r3, r0
 800742e:	005a      	lsls	r2, r3, #1
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	085b      	lsrs	r3, r3, #1
 8007436:	441a      	add	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007440:	b29b      	uxth	r3, r3
 8007442:	617b      	str	r3, [r7, #20]
#endif
        break;
 8007444:	e00e      	b.n	8007464 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	085b      	lsrs	r3, r3, #1
 800744c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	fbb2 f3f3 	udiv	r3, r2, r3
 8007458:	b29b      	uxth	r3, r3
 800745a:	617b      	str	r3, [r7, #20]
#endif
        break;
 800745c:	e002      	b.n	8007464 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	74fb      	strb	r3, [r7, #19]
        break;
 8007462:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	2b0f      	cmp	r3, #15
 8007468:	d916      	bls.n	8007498 <UART_SetConfig+0x520>
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007470:	d212      	bcs.n	8007498 <UART_SetConfig+0x520>
    {
      brrtemp = usartdiv & 0xFFF0U;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	b29b      	uxth	r3, r3
 8007476:	f023 030f 	bic.w	r3, r3, #15
 800747a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	085b      	lsrs	r3, r3, #1
 8007480:	b29b      	uxth	r3, r3
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	b29a      	uxth	r2, r3
 8007488:	897b      	ldrh	r3, [r7, #10]
 800748a:	4313      	orrs	r3, r2
 800748c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	897a      	ldrh	r2, [r7, #10]
 8007494:	60da      	str	r2, [r3, #12]
 8007496:	e070      	b.n	800757a <UART_SetConfig+0x602>
    }
    else
    {
      ret = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	74fb      	strb	r3, [r7, #19]
 800749c:	e06d      	b.n	800757a <UART_SetConfig+0x602>
    }
  }
  else
  {
    switch (clocksource)
 800749e:	7efb      	ldrb	r3, [r7, #27]
 80074a0:	2b08      	cmp	r3, #8
 80074a2:	d859      	bhi.n	8007558 <UART_SetConfig+0x5e0>
 80074a4:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <UART_SetConfig+0x534>)
 80074a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074aa:	bf00      	nop
 80074ac:	080074d1 	.word	0x080074d1
 80074b0:	080074ed 	.word	0x080074ed
 80074b4:	08007509 	.word	0x08007509
 80074b8:	08007559 	.word	0x08007559
 80074bc:	08007525 	.word	0x08007525
 80074c0:	08007559 	.word	0x08007559
 80074c4:	08007559 	.word	0x08007559
 80074c8:	08007559 	.word	0x08007559
 80074cc:	08007541 	.word	0x08007541
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80074d0:	f7fe fcec 	bl	8005eac <HAL_RCC_GetPCLK1Freq>
 80074d4:	4602      	mov	r2, r0
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	085b      	lsrs	r3, r3, #1
 80074dc:	441a      	add	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	617b      	str	r3, [r7, #20]
#endif
        break;
 80074ea:	e038      	b.n	800755e <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80074ec:	f7fe fcf4 	bl	8005ed8 <HAL_RCC_GetPCLK2Freq>
 80074f0:	4602      	mov	r2, r0
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	085b      	lsrs	r3, r3, #1
 80074f8:	441a      	add	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007502:	b29b      	uxth	r3, r3
 8007504:	617b      	str	r3, [r7, #20]
#endif
        break;
 8007506:	e02a      	b.n	800755e <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	085b      	lsrs	r3, r3, #1
 800750e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007512:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	6852      	ldr	r2, [r2, #4]
 800751a:	fbb3 f3f2 	udiv	r3, r3, r2
 800751e:	b29b      	uxth	r3, r3
 8007520:	617b      	str	r3, [r7, #20]
#endif
        break;
 8007522:	e01c      	b.n	800755e <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007524:	f7fe fc1a 	bl	8005d5c <HAL_RCC_GetSysClockFreq>
 8007528:	4602      	mov	r2, r0
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	085b      	lsrs	r3, r3, #1
 8007530:	441a      	add	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	fbb2 f3f3 	udiv	r3, r2, r3
 800753a:	b29b      	uxth	r3, r3
 800753c:	617b      	str	r3, [r7, #20]
#endif
        break;
 800753e:	e00e      	b.n	800755e <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	085b      	lsrs	r3, r3, #1
 8007546:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007552:	b29b      	uxth	r3, r3
 8007554:	617b      	str	r3, [r7, #20]
#endif
        break;
 8007556:	e002      	b.n	800755e <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	74fb      	strb	r3, [r7, #19]
        break;
 800755c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2b0f      	cmp	r3, #15
 8007562:	d908      	bls.n	8007576 <UART_SetConfig+0x5fe>
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800756a:	d204      	bcs.n	8007576 <UART_SetConfig+0x5fe>
    {
      huart->Instance->BRR = usartdiv;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	60da      	str	r2, [r3, #12]
 8007574:	e001      	b.n	800757a <UART_SetConfig+0x602>
    }
    else
    {
      ret = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007586:	7cfb      	ldrb	r3, [r7, #19]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3720      	adds	r7, #32
 800758c:	46bd      	mov	sp, r7
 800758e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007592:	bf00      	nop
 8007594:	f4240000 	.word	0xf4240000

08007598 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00a      	beq.n	80075c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6812      	ldr	r2, [r2, #0]
 80075b4:	6852      	ldr	r2, [r2, #4]
 80075b6:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80075be:	430a      	orrs	r2, r1
 80075c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	6812      	ldr	r2, [r2, #0]
 80075d6:	6852      	ldr	r2, [r2, #4]
 80075d8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80075e0:	430a      	orrs	r2, r1
 80075e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e8:	f003 0304 	and.w	r3, r3, #4
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00a      	beq.n	8007606 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	6812      	ldr	r2, [r2, #0]
 80075f8:	6852      	ldr	r2, [r2, #4]
 80075fa:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007602:	430a      	orrs	r2, r1
 8007604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760a:	f003 0308 	and.w	r3, r3, #8
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00a      	beq.n	8007628 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	6812      	ldr	r2, [r2, #0]
 800761a:	6852      	ldr	r2, [r2, #4]
 800761c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007624:	430a      	orrs	r2, r1
 8007626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	f003 0310 	and.w	r3, r3, #16
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00a      	beq.n	800764a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6812      	ldr	r2, [r2, #0]
 800763c:	6892      	ldr	r2, [r2, #8]
 800763e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007646:	430a      	orrs	r2, r1
 8007648:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764e:	f003 0320 	and.w	r3, r3, #32
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00a      	beq.n	800766c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	6812      	ldr	r2, [r2, #0]
 800765e:	6892      	ldr	r2, [r2, #8]
 8007660:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007668:	430a      	orrs	r2, r1
 800766a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007674:	2b00      	cmp	r3, #0
 8007676:	d01a      	beq.n	80076ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	6812      	ldr	r2, [r2, #0]
 8007680:	6852      	ldr	r2, [r2, #4]
 8007682:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800768a:	430a      	orrs	r2, r1
 800768c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007696:	d10a      	bne.n	80076ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	6812      	ldr	r2, [r2, #0]
 80076a0:	6852      	ldr	r2, [r2, #4]
 80076a2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80076aa:	430a      	orrs	r2, r1
 80076ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00a      	beq.n	80076d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	6812      	ldr	r2, [r2, #0]
 80076c2:	6852      	ldr	r2, [r2, #4]
 80076c4:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80076cc:	430a      	orrs	r2, r1
 80076ce:	605a      	str	r2, [r3, #4]
  }
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80076ee:	f7fb fc45 	bl	8002f7c <HAL_GetTick>
 80076f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0308 	and.w	r3, r3, #8
 80076fe:	2b08      	cmp	r3, #8
 8007700:	d10e      	bne.n	8007720 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007702:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f82c 	bl	800776e <UART_WaitOnFlagUntilTimeout>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e022      	b.n	8007766 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0304 	and.w	r3, r3, #4
 800772a:	2b04      	cmp	r3, #4
 800772c:	d10e      	bne.n	800774c <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800772e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f816 	bl	800776e <UART_WaitOnFlagUntilTimeout>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e00c      	b.n	8007766 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2220      	movs	r2, #32
 8007750:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2220      	movs	r2, #32
 8007758:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b084      	sub	sp, #16
 8007772:	af00      	add	r7, sp, #0
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	603b      	str	r3, [r7, #0]
 800777a:	4613      	mov	r3, r2
 800777c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800777e:	e02c      	b.n	80077da <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007786:	d028      	beq.n	80077da <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d007      	beq.n	800779e <UART_WaitOnFlagUntilTimeout+0x30>
 800778e:	f7fb fbf5 	bl	8002f7c <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	1ad2      	subs	r2, r2, r3
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	429a      	cmp	r2, r3
 800779c:	d91d      	bls.n	80077da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	6812      	ldr	r2, [r2, #0]
 80077a6:	6812      	ldr	r2, [r2, #0]
 80077a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80077ac:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	6812      	ldr	r2, [r2, #0]
 80077b6:	6892      	ldr	r2, [r2, #8]
 80077b8:	f022 0201 	bic.w	r2, r2, #1
 80077bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2220      	movs	r2, #32
 80077c2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2220      	movs	r2, #32
 80077ca:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e00f      	b.n	80077fa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69da      	ldr	r2, [r3, #28]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	401a      	ands	r2, r3
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	bf0c      	ite	eq
 80077ea:	2301      	moveq	r3, #1
 80077ec:	2300      	movne	r3, #0
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	461a      	mov	r2, r3
 80077f2:	79fb      	ldrb	r3, [r7, #7]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d0c3      	beq.n	8007780 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007802:	b084      	sub	sp, #16
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	f107 0014 	add.w	r0, r7, #20
 8007810:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	b004      	add	sp, #16
 8007822:	4770      	bx	lr

08007824 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800782c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007830:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007838:	b29a      	uxth	r2, r3
 800783a:	89fb      	ldrh	r3, [r7, #14]
 800783c:	4313      	orrs	r3, r2
 800783e:	b29a      	uxth	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800785c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007860:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007868:	b29b      	uxth	r3, r3
 800786a:	b21a      	sxth	r2, r3
 800786c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007870:	43db      	mvns	r3, r3
 8007872:	b21b      	sxth	r3, r3
 8007874:	4013      	ands	r3, r2
 8007876:	b21b      	sxth	r3, r3
 8007878:	b29a      	uxth	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	460b      	mov	r3, r1
 8007898:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80078a8:	b084      	sub	sp, #16
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	f107 0014 	add.w	r0, r7, #20
 80078b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7ff ffa2 	bl	8007824 <USB_EnableGlobalInt>

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078ec:	b004      	add	sp, #16
 80078ee:	4770      	bx	lr

080078f0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078f0:	b490      	push	{r4, r7}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	881b      	ldrh	r3, [r3, #0]
 800790a:	b29b      	uxth	r3, r3
 800790c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007914:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	78db      	ldrb	r3, [r3, #3]
 800791a:	2b03      	cmp	r3, #3
 800791c:	d819      	bhi.n	8007952 <USB_ActivateEndpoint+0x62>
 800791e:	a201      	add	r2, pc, #4	; (adr r2, 8007924 <USB_ActivateEndpoint+0x34>)
 8007920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007924:	08007935 	.word	0x08007935
 8007928:	08007949 	.word	0x08007949
 800792c:	08007959 	.word	0x08007959
 8007930:	0800793f 	.word	0x0800793f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007934:	8abb      	ldrh	r3, [r7, #20]
 8007936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800793a:	82bb      	strh	r3, [r7, #20]
      break;
 800793c:	e00d      	b.n	800795a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800793e:	8abb      	ldrh	r3, [r7, #20]
 8007940:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007944:	82bb      	strh	r3, [r7, #20]
      break;
 8007946:	e008      	b.n	800795a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007948:	8abb      	ldrh	r3, [r7, #20]
 800794a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800794e:	82bb      	strh	r3, [r7, #20]
      break;
 8007950:	e003      	b.n	800795a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	75fb      	strb	r3, [r7, #23]
      break;
 8007956:	e000      	b.n	800795a <USB_ActivateEndpoint+0x6a>
      break;
 8007958:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal);
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	8aba      	ldrh	r2, [r7, #20]
 8007966:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	b29b      	uxth	r3, r3
 8007976:	b21b      	sxth	r3, r3
 8007978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800797c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007980:	b21a      	sxth	r2, r3
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	b21b      	sxth	r3, r3
 8007988:	4313      	orrs	r3, r2
 800798a:	b21b      	sxth	r3, r3
 800798c:	b29c      	uxth	r4, r3
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	441a      	add	r2, r3
 8007998:	4b87      	ldr	r3, [pc, #540]	; (8007bb8 <USB_ActivateEndpoint+0x2c8>)
 800799a:	4323      	orrs	r3, r4
 800799c:	b29b      	uxth	r3, r3
 800799e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	7b1b      	ldrb	r3, [r3, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f040 810d 	bne.w	8007bc4 <USB_ActivateEndpoint+0x2d4>
  {
    if (ep->is_in != 0U)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	785b      	ldrb	r3, [r3, #1]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d067      	beq.n	8007a82 <USB_ActivateEndpoint+0x192>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80079b2:	687c      	ldr	r4, [r7, #4]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	441c      	add	r4, r3
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	00db      	lsls	r3, r3, #3
 80079c4:	4423      	add	r3, r4
 80079c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079ca:	461c      	mov	r4, r3
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	88db      	ldrh	r3, [r3, #6]
 80079d0:	085b      	lsrs	r3, r3, #1
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	005b      	lsls	r3, r3, #1
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	b29c      	uxth	r4, r3
 80079e8:	4623      	mov	r3, r4
 80079ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d014      	beq.n	8007a1c <USB_ActivateEndpoint+0x12c>
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a08:	b29c      	uxth	r4, r3
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	441a      	add	r2, r3
 8007a14:	4b69      	ldr	r3, [pc, #420]	; (8007bbc <USB_ActivateEndpoint+0x2cc>)
 8007a16:	4323      	orrs	r3, r4
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	78db      	ldrb	r3, [r3, #3]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d018      	beq.n	8007a56 <USB_ActivateEndpoint+0x166>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a3a:	b29c      	uxth	r4, r3
 8007a3c:	f084 0320 	eor.w	r3, r4, #32
 8007a40:	b29c      	uxth	r4, r3
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	441a      	add	r2, r3
 8007a4c:	4b5a      	ldr	r3, [pc, #360]	; (8007bb8 <USB_ActivateEndpoint+0x2c8>)
 8007a4e:	4323      	orrs	r3, r4
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	8013      	strh	r3, [r2, #0]
 8007a54:	e226      	b.n	8007ea4 <USB_ActivateEndpoint+0x5b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a6c:	b29c      	uxth	r4, r3
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	441a      	add	r2, r3
 8007a78:	4b4f      	ldr	r3, [pc, #316]	; (8007bb8 <USB_ActivateEndpoint+0x2c8>)
 8007a7a:	4323      	orrs	r3, r4
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	8013      	strh	r3, [r2, #0]
 8007a80:	e210      	b.n	8007ea4 <USB_ActivateEndpoint+0x5b4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007a82:	687c      	ldr	r4, [r7, #4]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	441c      	add	r4, r3
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	4423      	add	r3, r4
 8007a96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a9a:	461c      	mov	r4, r3
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	88db      	ldrh	r3, [r3, #6]
 8007aa0:	085b      	lsrs	r3, r3, #1
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	005b      	lsls	r3, r3, #1
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007aaa:	687c      	ldr	r4, [r7, #4]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	441c      	add	r4, r3
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	00db      	lsls	r3, r3, #3
 8007abc:	4423      	add	r3, r4
 8007abe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d111      	bne.n	8007af0 <USB_ActivateEndpoint+0x200>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	881a      	ldrh	r2, [r3, #0]
 8007ad0:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	801a      	strh	r2, [r3, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	801a      	strh	r2, [r3, #0]
 8007aee:	e026      	b.n	8007b3e <USB_ActivateEndpoint+0x24e>
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	2b3d      	cmp	r3, #61	; 0x3d
 8007af6:	d813      	bhi.n	8007b20 <USB_ActivateEndpoint+0x230>
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	085b      	lsrs	r3, r3, #1
 8007afe:	613b      	str	r3, [r7, #16]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d002      	beq.n	8007b12 <USB_ActivateEndpoint+0x222>
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	613b      	str	r3, [r7, #16]
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	029b      	lsls	r3, r3, #10
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	801a      	strh	r2, [r3, #0]
 8007b1e:	e00e      	b.n	8007b3e <USB_ActivateEndpoint+0x24e>
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	095b      	lsrs	r3, r3, #5
 8007b26:	613b      	str	r3, [r7, #16]
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	029b      	lsls	r3, r3, #10
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	881b      	ldrh	r3, [r3, #0]
 8007b4a:	b29c      	uxth	r4, r3
 8007b4c:	4623      	mov	r3, r4
 8007b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d014      	beq.n	8007b80 <USB_ActivateEndpoint+0x290>
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6c:	b29c      	uxth	r4, r3
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	441a      	add	r2, r3
 8007b78:	4b11      	ldr	r3, [pc, #68]	; (8007bc0 <USB_ActivateEndpoint+0x2d0>)
 8007b7a:	4323      	orrs	r3, r4
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b96:	b29c      	uxth	r4, r3
 8007b98:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007b9c:	b29c      	uxth	r4, r3
 8007b9e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007ba2:	b29c      	uxth	r4, r3
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	441a      	add	r2, r3
 8007bae:	4b02      	ldr	r3, [pc, #8]	; (8007bb8 <USB_ActivateEndpoint+0x2c8>)
 8007bb0:	4323      	orrs	r3, r4
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	8013      	strh	r3, [r2, #0]
 8007bb6:	e175      	b.n	8007ea4 <USB_ActivateEndpoint+0x5b4>
 8007bb8:	ffff8080 	.word	0xffff8080
 8007bbc:	ffff80c0 	.word	0xffff80c0
 8007bc0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4413      	add	r3, r2
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bda:	b29c      	uxth	r4, r3
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	441a      	add	r2, r3
 8007be6:	4b96      	ldr	r3, [pc, #600]	; (8007e40 <USB_ActivateEndpoint+0x550>)
 8007be8:	4323      	orrs	r3, r4
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007bee:	687c      	ldr	r4, [r7, #4]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	441c      	add	r4, r3
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	4423      	add	r3, r4
 8007c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c06:	461c      	mov	r4, r3
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	891b      	ldrh	r3, [r3, #8]
 8007c0c:	085b      	lsrs	r3, r3, #1
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	005b      	lsls	r3, r3, #1
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	8023      	strh	r3, [r4, #0]
 8007c16:	687c      	ldr	r4, [r7, #4]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	441c      	add	r4, r3
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	00db      	lsls	r3, r3, #3
 8007c28:	4423      	add	r3, r4
 8007c2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c2e:	461c      	mov	r4, r3
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	895b      	ldrh	r3, [r3, #10]
 8007c34:	085b      	lsrs	r3, r3, #1
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	785b      	ldrb	r3, [r3, #1]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f040 8088 	bne.w	8007d58 <USB_ActivateEndpoint+0x468>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	b29c      	uxth	r4, r3
 8007c56:	4623      	mov	r3, r4
 8007c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d014      	beq.n	8007c8a <USB_ActivateEndpoint+0x39a>
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	881b      	ldrh	r3, [r3, #0]
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c76:	b29c      	uxth	r4, r3
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	441a      	add	r2, r3
 8007c82:	4b70      	ldr	r3, [pc, #448]	; (8007e44 <USB_ActivateEndpoint+0x554>)
 8007c84:	4323      	orrs	r3, r4
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	b29c      	uxth	r4, r3
 8007c98:	4623      	mov	r3, r4
 8007c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d014      	beq.n	8007ccc <USB_ActivateEndpoint+0x3dc>
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	881b      	ldrh	r3, [r3, #0]
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cb8:	b29c      	uxth	r4, r3
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	441a      	add	r2, r3
 8007cc4:	4b60      	ldr	r3, [pc, #384]	; (8007e48 <USB_ActivateEndpoint+0x558>)
 8007cc6:	4323      	orrs	r3, r4
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce2:	b29c      	uxth	r4, r3
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	441a      	add	r2, r3
 8007cee:	4b56      	ldr	r3, [pc, #344]	; (8007e48 <USB_ActivateEndpoint+0x558>)
 8007cf0:	4323      	orrs	r3, r4
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	881b      	ldrh	r3, [r3, #0]
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0c:	b29c      	uxth	r4, r3
 8007d0e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007d12:	b29c      	uxth	r4, r3
 8007d14:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007d18:	b29c      	uxth	r4, r3
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	441a      	add	r2, r3
 8007d24:	4b49      	ldr	r3, [pc, #292]	; (8007e4c <USB_ActivateEndpoint+0x55c>)
 8007d26:	4323      	orrs	r3, r4
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	881b      	ldrh	r3, [r3, #0]
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d42:	b29c      	uxth	r4, r3
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	441a      	add	r2, r3
 8007d4e:	4b3f      	ldr	r3, [pc, #252]	; (8007e4c <USB_ActivateEndpoint+0x55c>)
 8007d50:	4323      	orrs	r3, r4
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	8013      	strh	r3, [r2, #0]
 8007d56:	e0a5      	b.n	8007ea4 <USB_ActivateEndpoint+0x5b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	b29c      	uxth	r4, r3
 8007d66:	4623      	mov	r3, r4
 8007d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d014      	beq.n	8007d9a <USB_ActivateEndpoint+0x4aa>
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d86:	b29c      	uxth	r4, r3
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	441a      	add	r2, r3
 8007d92:	4b2c      	ldr	r3, [pc, #176]	; (8007e44 <USB_ActivateEndpoint+0x554>)
 8007d94:	4323      	orrs	r3, r4
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	b29c      	uxth	r4, r3
 8007da8:	4623      	mov	r3, r4
 8007daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d014      	beq.n	8007ddc <USB_ActivateEndpoint+0x4ec>
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc8:	b29c      	uxth	r4, r3
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	441a      	add	r2, r3
 8007dd4:	4b1c      	ldr	r3, [pc, #112]	; (8007e48 <USB_ActivateEndpoint+0x558>)
 8007dd6:	4323      	orrs	r3, r4
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	881b      	ldrh	r3, [r3, #0]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007df2:	b29c      	uxth	r4, r3
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	441a      	add	r2, r3
 8007dfe:	4b11      	ldr	r3, [pc, #68]	; (8007e44 <USB_ActivateEndpoint+0x554>)
 8007e00:	4323      	orrs	r3, r4
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	78db      	ldrb	r3, [r3, #3]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d020      	beq.n	8007e50 <USB_ActivateEndpoint+0x560>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e24:	b29c      	uxth	r4, r3
 8007e26:	f084 0320 	eor.w	r3, r4, #32
 8007e2a:	b29c      	uxth	r4, r3
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	441a      	add	r2, r3
 8007e36:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <USB_ActivateEndpoint+0x55c>)
 8007e38:	4323      	orrs	r3, r4
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	8013      	strh	r3, [r2, #0]
 8007e3e:	e01c      	b.n	8007e7a <USB_ActivateEndpoint+0x58a>
 8007e40:	ffff8180 	.word	0xffff8180
 8007e44:	ffffc080 	.word	0xffffc080
 8007e48:	ffff80c0 	.word	0xffff80c0
 8007e4c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e66:	b29c      	uxth	r4, r3
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	441a      	add	r2, r3
 8007e72:	4b0f      	ldr	r3, [pc, #60]	; (8007eb0 <USB_ActivateEndpoint+0x5c0>)
 8007e74:	4323      	orrs	r3, r4
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4413      	add	r3, r2
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e90:	b29c      	uxth	r4, r3
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	441a      	add	r2, r3
 8007e9c:	4b04      	ldr	r3, [pc, #16]	; (8007eb0 <USB_ActivateEndpoint+0x5c0>)
 8007e9e:	4323      	orrs	r3, r4
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bc90      	pop	{r4, r7}
 8007eae:	4770      	bx	lr
 8007eb0:	ffff8080 	.word	0xffff8080

08007eb4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007eb4:	b490      	push	{r4, r7}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	7b1b      	ldrb	r3, [r3, #12]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d171      	bne.n	8007faa <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	785b      	ldrb	r3, [r3, #1]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d036      	beq.n	8007f3c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	b29c      	uxth	r4, r3
 8007edc:	4623      	mov	r3, r4
 8007ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d014      	beq.n	8007f10 <USB_DeactivateEndpoint+0x5c>
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efc:	b29c      	uxth	r4, r3
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	441a      	add	r2, r3
 8007f08:	4b6b      	ldr	r3, [pc, #428]	; (80080b8 <USB_DeactivateEndpoint+0x204>)
 8007f0a:	4323      	orrs	r3, r4
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f26:	b29c      	uxth	r4, r3
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	441a      	add	r2, r3
 8007f32:	4b62      	ldr	r3, [pc, #392]	; (80080bc <USB_DeactivateEndpoint+0x208>)
 8007f34:	4323      	orrs	r3, r4
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	8013      	strh	r3, [r2, #0]
 8007f3a:	e144      	b.n	80081c6 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	b29c      	uxth	r4, r3
 8007f4a:	4623      	mov	r3, r4
 8007f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d014      	beq.n	8007f7e <USB_DeactivateEndpoint+0xca>
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f6a:	b29c      	uxth	r4, r3
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	441a      	add	r2, r3
 8007f76:	4b52      	ldr	r3, [pc, #328]	; (80080c0 <USB_DeactivateEndpoint+0x20c>)
 8007f78:	4323      	orrs	r3, r4
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f94:	b29c      	uxth	r4, r3
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	441a      	add	r2, r3
 8007fa0:	4b46      	ldr	r3, [pc, #280]	; (80080bc <USB_DeactivateEndpoint+0x208>)
 8007fa2:	4323      	orrs	r3, r4
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	8013      	strh	r3, [r2, #0]
 8007fa8:	e10d      	b.n	80081c6 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	785b      	ldrb	r3, [r3, #1]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f040 8088 	bne.w	80080c4 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4413      	add	r3, r2
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	b29c      	uxth	r4, r3
 8007fc2:	4623      	mov	r3, r4
 8007fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d014      	beq.n	8007ff6 <USB_DeactivateEndpoint+0x142>
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	881b      	ldrh	r3, [r3, #0]
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fe2:	b29c      	uxth	r4, r3
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	441a      	add	r2, r3
 8007fee:	4b34      	ldr	r3, [pc, #208]	; (80080c0 <USB_DeactivateEndpoint+0x20c>)
 8007ff0:	4323      	orrs	r3, r4
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	b29c      	uxth	r4, r3
 8008004:	4623      	mov	r3, r4
 8008006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800a:	2b00      	cmp	r3, #0
 800800c:	d014      	beq.n	8008038 <USB_DeactivateEndpoint+0x184>
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	b29b      	uxth	r3, r3
 800801c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008024:	b29c      	uxth	r4, r3
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	441a      	add	r2, r3
 8008030:	4b21      	ldr	r3, [pc, #132]	; (80080b8 <USB_DeactivateEndpoint+0x204>)
 8008032:	4323      	orrs	r3, r4
 8008034:	b29b      	uxth	r3, r3
 8008036:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	881b      	ldrh	r3, [r3, #0]
 8008044:	b29b      	uxth	r3, r3
 8008046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800804a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800804e:	b29c      	uxth	r4, r3
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	441a      	add	r2, r3
 800805a:	4b17      	ldr	r3, [pc, #92]	; (80080b8 <USB_DeactivateEndpoint+0x204>)
 800805c:	4323      	orrs	r3, r4
 800805e:	b29b      	uxth	r3, r3
 8008060:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008078:	b29c      	uxth	r4, r3
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	441a      	add	r2, r3
 8008084:	4b0d      	ldr	r3, [pc, #52]	; (80080bc <USB_DeactivateEndpoint+0x208>)
 8008086:	4323      	orrs	r3, r4
 8008088:	b29b      	uxth	r3, r3
 800808a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	881b      	ldrh	r3, [r3, #0]
 8008098:	b29b      	uxth	r3, r3
 800809a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800809e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080a2:	b29c      	uxth	r4, r3
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	441a      	add	r2, r3
 80080ae:	4b03      	ldr	r3, [pc, #12]	; (80080bc <USB_DeactivateEndpoint+0x208>)
 80080b0:	4323      	orrs	r3, r4
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	8013      	strh	r3, [r2, #0]
 80080b6:	e086      	b.n	80081c6 <USB_DeactivateEndpoint+0x312>
 80080b8:	ffff80c0 	.word	0xffff80c0
 80080bc:	ffff8080 	.word	0xffff8080
 80080c0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	881b      	ldrh	r3, [r3, #0]
 80080d0:	b29c      	uxth	r4, r3
 80080d2:	4623      	mov	r3, r4
 80080d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d014      	beq.n	8008106 <USB_DeactivateEndpoint+0x252>
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	881b      	ldrh	r3, [r3, #0]
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f2:	b29c      	uxth	r4, r3
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	441a      	add	r2, r3
 80080fe:	4b35      	ldr	r3, [pc, #212]	; (80081d4 <USB_DeactivateEndpoint+0x320>)
 8008100:	4323      	orrs	r3, r4
 8008102:	b29b      	uxth	r3, r3
 8008104:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	b29c      	uxth	r4, r3
 8008114:	4623      	mov	r3, r4
 8008116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800811a:	2b00      	cmp	r3, #0
 800811c:	d014      	beq.n	8008148 <USB_DeactivateEndpoint+0x294>
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008134:	b29c      	uxth	r4, r3
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	441a      	add	r2, r3
 8008140:	4b25      	ldr	r3, [pc, #148]	; (80081d8 <USB_DeactivateEndpoint+0x324>)
 8008142:	4323      	orrs	r3, r4
 8008144:	b29b      	uxth	r3, r3
 8008146:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	b29b      	uxth	r3, r3
 8008156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800815a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800815e:	b29c      	uxth	r4, r3
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	441a      	add	r2, r3
 800816a:	4b1a      	ldr	r3, [pc, #104]	; (80081d4 <USB_DeactivateEndpoint+0x320>)
 800816c:	4323      	orrs	r3, r4
 800816e:	b29b      	uxth	r3, r3
 8008170:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	b29b      	uxth	r3, r3
 8008180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008188:	b29c      	uxth	r4, r3
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	441a      	add	r2, r3
 8008194:	4b11      	ldr	r3, [pc, #68]	; (80081dc <USB_DeactivateEndpoint+0x328>)
 8008196:	4323      	orrs	r3, r4
 8008198:	b29b      	uxth	r3, r3
 800819a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b2:	b29c      	uxth	r4, r3
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	441a      	add	r2, r3
 80081be:	4b07      	ldr	r3, [pc, #28]	; (80081dc <USB_DeactivateEndpoint+0x328>)
 80081c0:	4323      	orrs	r3, r4
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bc90      	pop	{r4, r7}
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	ffffc080 	.word	0xffffc080
 80081d8:	ffff80c0 	.word	0xffff80c0
 80081dc:	ffff8080 	.word	0xffff8080

080081e0 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081e0:	b590      	push	{r4, r7, lr}
 80081e2:	b095      	sub	sp, #84	; 0x54
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len = ep->xfer_len;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	785b      	ldrb	r3, [r3, #1]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	f040 815f 	bne.w	80084b8 <USB_EPStartXfer+0x2d8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	699a      	ldr	r2, [r3, #24]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	429a      	cmp	r2, r3
 8008204:	d909      	bls.n	800821a <USB_EPStartXfer+0x3a>
    {
      len = ep->maxpacket;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	699a      	ldr	r2, [r3, #24]
 8008210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008212:	1ad2      	subs	r2, r2, r3
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	619a      	str	r2, [r3, #24]
 8008218:	e005      	b.n	8008226 <USB_EPStartXfer+0x46>
    }
    else
    {
      len = ep->xfer_len;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	2200      	movs	r2, #0
 8008224:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	7b1b      	ldrb	r3, [r3, #12]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d11a      	bne.n	8008264 <USB_EPStartXfer+0x84>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	6959      	ldr	r1, [r3, #20]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	88da      	ldrh	r2, [r3, #6]
 8008236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008238:	b29b      	uxth	r3, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fbb0 	bl	80089a0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008240:	687c      	ldr	r4, [r7, #4]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008248:	b29b      	uxth	r3, r3
 800824a:	441c      	add	r4, r3
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	00db      	lsls	r3, r3, #3
 8008252:	4423      	add	r3, r4
 8008254:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008258:	633b      	str	r3, [r7, #48]	; 0x30
 800825a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800825c:	b29a      	uxth	r2, r3
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	801a      	strh	r2, [r3, #0]
 8008262:	e10d      	b.n	8008480 <USB_EPStartXfer+0x2a0>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	b29b      	uxth	r3, r3
 8008272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008276:	2b00      	cmp	r3, #0
 8008278:	d063      	beq.n	8008342 <USB_EPStartXfer+0x162>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800827a:	687c      	ldr	r4, [r7, #4]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	785b      	ldrb	r3, [r3, #1]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d145      	bne.n	8008310 <USB_EPStartXfer+0x130>
 8008284:	687c      	ldr	r4, [r7, #4]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800828c:	b29b      	uxth	r3, r3
 800828e:	441c      	add	r4, r3
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	00db      	lsls	r3, r3, #3
 8008296:	4423      	add	r3, r4
 8008298:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800829c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800829e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d111      	bne.n	80082c8 <USB_EPStartXfer+0xe8>
 80082a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a6:	881a      	ldrh	r2, [r3, #0]
 80082a8:	f243 33ff 	movw	r3, #13311	; 0x33ff
 80082ac:	4013      	ands	r3, r2
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b2:	801a      	strh	r2, [r3, #0]
 80082b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b6:	881b      	ldrh	r3, [r3, #0]
 80082b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	801a      	strh	r2, [r3, #0]
 80082c6:	e037      	b.n	8008338 <USB_EPStartXfer+0x158>
 80082c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ca:	2b3d      	cmp	r3, #61	; 0x3d
 80082cc:	d811      	bhi.n	80082f2 <USB_EPStartXfer+0x112>
 80082ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082d0:	085b      	lsrs	r3, r3, #1
 80082d2:	647b      	str	r3, [r7, #68]	; 0x44
 80082d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d002      	beq.n	80082e4 <USB_EPStartXfer+0x104>
 80082de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082e0:	3301      	adds	r3, #1
 80082e2:	647b      	str	r3, [r7, #68]	; 0x44
 80082e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	029b      	lsls	r3, r3, #10
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ee:	801a      	strh	r2, [r3, #0]
 80082f0:	e022      	b.n	8008338 <USB_EPStartXfer+0x158>
 80082f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082f4:	095b      	lsrs	r3, r3, #5
 80082f6:	647b      	str	r3, [r7, #68]	; 0x44
 80082f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	029b      	lsls	r3, r3, #10
 80082fe:	b29b      	uxth	r3, r3
 8008300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008308:	b29a      	uxth	r2, r3
 800830a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830c:	801a      	strh	r2, [r3, #0]
 800830e:	e013      	b.n	8008338 <USB_EPStartXfer+0x158>
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	785b      	ldrb	r3, [r3, #1]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d10f      	bne.n	8008338 <USB_EPStartXfer+0x158>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800831e:	b29b      	uxth	r3, r3
 8008320:	441c      	add	r4, r3
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	00db      	lsls	r3, r3, #3
 8008328:	4423      	add	r3, r4
 800832a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800832e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008332:	b29a      	uxth	r2, r3
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	895b      	ldrh	r3, [r3, #10]
 800833c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008340:	e062      	b.n	8008408 <USB_EPStartXfer+0x228>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	785b      	ldrb	r3, [r3, #1]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d145      	bne.n	80083d6 <USB_EPStartXfer+0x1f6>
 800834a:	687c      	ldr	r4, [r7, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008352:	b29b      	uxth	r3, r3
 8008354:	441c      	add	r4, r3
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	4423      	add	r3, r4
 800835e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008362:	627b      	str	r3, [r7, #36]	; 0x24
 8008364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008366:	2b00      	cmp	r3, #0
 8008368:	d111      	bne.n	800838e <USB_EPStartXfer+0x1ae>
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	881a      	ldrh	r2, [r3, #0]
 800836e:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8008372:	4013      	ands	r3, r2
 8008374:	b29a      	uxth	r2, r3
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008378:	801a      	strh	r2, [r3, #0]
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008386:	b29a      	uxth	r2, r3
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	801a      	strh	r2, [r3, #0]
 800838c:	e038      	b.n	8008400 <USB_EPStartXfer+0x220>
 800838e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008390:	2b3d      	cmp	r3, #61	; 0x3d
 8008392:	d811      	bhi.n	80083b8 <USB_EPStartXfer+0x1d8>
 8008394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008396:	085b      	lsrs	r3, r3, #1
 8008398:	643b      	str	r3, [r7, #64]	; 0x40
 800839a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800839c:	f003 0301 	and.w	r3, r3, #1
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d002      	beq.n	80083aa <USB_EPStartXfer+0x1ca>
 80083a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083a6:	3301      	adds	r3, #1
 80083a8:	643b      	str	r3, [r7, #64]	; 0x40
 80083aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	029b      	lsls	r3, r3, #10
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	801a      	strh	r2, [r3, #0]
 80083b6:	e023      	b.n	8008400 <USB_EPStartXfer+0x220>
 80083b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083ba:	095b      	lsrs	r3, r3, #5
 80083bc:	643b      	str	r3, [r7, #64]	; 0x40
 80083be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	029b      	lsls	r3, r3, #10
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	801a      	strh	r2, [r3, #0]
 80083d4:	e014      	b.n	8008400 <USB_EPStartXfer+0x220>
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	785b      	ldrb	r3, [r3, #1]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d110      	bne.n	8008400 <USB_EPStartXfer+0x220>
 80083de:	687c      	ldr	r4, [r7, #4]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	441c      	add	r4, r3
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	4423      	add	r3, r4
 80083f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083f6:	623b      	str	r3, [r7, #32]
 80083f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	891b      	ldrh	r3, [r3, #8]
 8008404:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	6959      	ldr	r1, [r3, #20]
 800840c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800840e:	b29b      	uxth	r3, r3
 8008410:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fac3 	bl	80089a0 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	785b      	ldrb	r3, [r3, #1]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d115      	bne.n	800844e <USB_EPStartXfer+0x26e>
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	b29b      	uxth	r3, r3
 8008430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008438:	b29c      	uxth	r4, r3
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	441a      	add	r2, r3
 8008444:	4b9a      	ldr	r3, [pc, #616]	; (80086b0 <USB_EPStartXfer+0x4d0>)
 8008446:	4323      	orrs	r3, r4
 8008448:	b29b      	uxth	r3, r3
 800844a:	8013      	strh	r3, [r2, #0]
 800844c:	e018      	b.n	8008480 <USB_EPStartXfer+0x2a0>
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	785b      	ldrb	r3, [r3, #1]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d114      	bne.n	8008480 <USB_EPStartXfer+0x2a0>
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	b29b      	uxth	r3, r3
 8008464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800846c:	b29c      	uxth	r4, r3
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	441a      	add	r2, r3
 8008478:	4b8e      	ldr	r3, [pc, #568]	; (80086b4 <USB_EPStartXfer+0x4d4>)
 800847a:	4323      	orrs	r3, r4
 800847c:	b29b      	uxth	r3, r3
 800847e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4413      	add	r3, r2
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	b29b      	uxth	r3, r3
 800848e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008496:	b29c      	uxth	r4, r3
 8008498:	f084 0310 	eor.w	r3, r4, #16
 800849c:	b29c      	uxth	r4, r3
 800849e:	f084 0320 	eor.w	r3, r4, #32
 80084a2:	b29c      	uxth	r4, r3
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	441a      	add	r2, r3
 80084ae:	4b82      	ldr	r3, [pc, #520]	; (80086b8 <USB_EPStartXfer+0x4d8>)
 80084b0:	4323      	orrs	r3, r4
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	8013      	strh	r3, [r2, #0]
 80084b6:	e13f      	b.n	8008738 <USB_EPStartXfer+0x558>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	699a      	ldr	r2, [r3, #24]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d909      	bls.n	80084d8 <USB_EPStartXfer+0x2f8>
    {
      len = ep->maxpacket;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	699a      	ldr	r2, [r3, #24]
 80084ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084d0:	1ad2      	subs	r2, r2, r3
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	619a      	str	r2, [r3, #24]
 80084d6:	e005      	b.n	80084e4 <USB_EPStartXfer+0x304>
    }
    else
    {
      len = ep->xfer_len;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	2200      	movs	r2, #0
 80084e2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	7b1b      	ldrb	r3, [r3, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d145      	bne.n	8008578 <USB_EPStartXfer+0x398>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80084ec:	687c      	ldr	r4, [r7, #4]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	441c      	add	r4, r3
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	00db      	lsls	r3, r3, #3
 80084fe:	4423      	add	r3, r4
 8008500:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008504:	61fb      	str	r3, [r7, #28]
 8008506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008508:	2b00      	cmp	r3, #0
 800850a:	d111      	bne.n	8008530 <USB_EPStartXfer+0x350>
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	881a      	ldrh	r2, [r3, #0]
 8008510:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8008514:	4013      	ands	r3, r2
 8008516:	b29a      	uxth	r2, r3
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	801a      	strh	r2, [r3, #0]
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	881b      	ldrh	r3, [r3, #0]
 8008520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008528:	b29a      	uxth	r2, r3
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	801a      	strh	r2, [r3, #0]
 800852e:	e0e8      	b.n	8008702 <USB_EPStartXfer+0x522>
 8008530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008532:	2b3d      	cmp	r3, #61	; 0x3d
 8008534:	d811      	bhi.n	800855a <USB_EPStartXfer+0x37a>
 8008536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008538:	085b      	lsrs	r3, r3, #1
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800853c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	d002      	beq.n	800854c <USB_EPStartXfer+0x36c>
 8008546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008548:	3301      	adds	r3, #1
 800854a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800854c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800854e:	b29b      	uxth	r3, r3
 8008550:	029b      	lsls	r3, r3, #10
 8008552:	b29a      	uxth	r2, r3
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	801a      	strh	r2, [r3, #0]
 8008558:	e0d3      	b.n	8008702 <USB_EPStartXfer+0x522>
 800855a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800855c:	095b      	lsrs	r3, r3, #5
 800855e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008562:	b29b      	uxth	r3, r3
 8008564:	029b      	lsls	r3, r3, #10
 8008566:	b29b      	uxth	r3, r3
 8008568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800856c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008570:	b29a      	uxth	r2, r3
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	801a      	strh	r2, [r3, #0]
 8008576:	e0c4      	b.n	8008702 <USB_EPStartXfer+0x522>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	785b      	ldrb	r3, [r3, #1]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d145      	bne.n	800860c <USB_EPStartXfer+0x42c>
 8008580:	687c      	ldr	r4, [r7, #4]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008588:	b29b      	uxth	r3, r3
 800858a:	441c      	add	r4, r3
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	00db      	lsls	r3, r3, #3
 8008592:	4423      	add	r3, r4
 8008594:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008598:	61bb      	str	r3, [r7, #24]
 800859a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800859c:	2b00      	cmp	r3, #0
 800859e:	d111      	bne.n	80085c4 <USB_EPStartXfer+0x3e4>
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	881a      	ldrh	r2, [r3, #0]
 80085a4:	f243 33ff 	movw	r3, #13311	; 0x33ff
 80085a8:	4013      	ands	r3, r2
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	801a      	strh	r2, [r3, #0]
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085bc:	b29a      	uxth	r2, r3
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	801a      	strh	r2, [r3, #0]
 80085c2:	e038      	b.n	8008636 <USB_EPStartXfer+0x456>
 80085c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085c6:	2b3d      	cmp	r3, #61	; 0x3d
 80085c8:	d811      	bhi.n	80085ee <USB_EPStartXfer+0x40e>
 80085ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085cc:	085b      	lsrs	r3, r3, #1
 80085ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80085d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d002      	beq.n	80085e0 <USB_EPStartXfer+0x400>
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	3301      	adds	r3, #1
 80085de:	63bb      	str	r3, [r7, #56]	; 0x38
 80085e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	029b      	lsls	r3, r3, #10
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	801a      	strh	r2, [r3, #0]
 80085ec:	e023      	b.n	8008636 <USB_EPStartXfer+0x456>
 80085ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085f0:	095b      	lsrs	r3, r3, #5
 80085f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80085f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	029b      	lsls	r3, r3, #10
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008604:	b29a      	uxth	r2, r3
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	801a      	strh	r2, [r3, #0]
 800860a:	e014      	b.n	8008636 <USB_EPStartXfer+0x456>
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	785b      	ldrb	r3, [r3, #1]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d110      	bne.n	8008636 <USB_EPStartXfer+0x456>
 8008614:	687c      	ldr	r4, [r7, #4]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800861c:	b29b      	uxth	r3, r3
 800861e:	441c      	add	r4, r3
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	00db      	lsls	r3, r3, #3
 8008626:	4423      	add	r3, r4
 8008628:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800862c:	617b      	str	r3, [r7, #20]
 800862e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008630:	b29a      	uxth	r2, r3
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	801a      	strh	r2, [r3, #0]
 8008636:	687c      	ldr	r4, [r7, #4]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	785b      	ldrb	r3, [r3, #1]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d14c      	bne.n	80086da <USB_EPStartXfer+0x4fa>
 8008640:	687c      	ldr	r4, [r7, #4]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008648:	b29b      	uxth	r3, r3
 800864a:	441c      	add	r4, r3
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	4423      	add	r3, r4
 8008654:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008658:	613b      	str	r3, [r7, #16]
 800865a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800865c:	2b00      	cmp	r3, #0
 800865e:	d111      	bne.n	8008684 <USB_EPStartXfer+0x4a4>
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	881a      	ldrh	r2, [r3, #0]
 8008664:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8008668:	4013      	ands	r3, r2
 800866a:	b29a      	uxth	r2, r3
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	801a      	strh	r2, [r3, #0]
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800867c:	b29a      	uxth	r2, r3
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	801a      	strh	r2, [r3, #0]
 8008682:	e03e      	b.n	8008702 <USB_EPStartXfer+0x522>
 8008684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008686:	2b3d      	cmp	r3, #61	; 0x3d
 8008688:	d818      	bhi.n	80086bc <USB_EPStartXfer+0x4dc>
 800868a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800868c:	085b      	lsrs	r3, r3, #1
 800868e:	637b      	str	r3, [r7, #52]	; 0x34
 8008690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	d002      	beq.n	80086a0 <USB_EPStartXfer+0x4c0>
 800869a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869c:	3301      	adds	r3, #1
 800869e:	637b      	str	r3, [r7, #52]	; 0x34
 80086a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	029b      	lsls	r3, r3, #10
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	801a      	strh	r2, [r3, #0]
 80086ac:	e029      	b.n	8008702 <USB_EPStartXfer+0x522>
 80086ae:	bf00      	nop
 80086b0:	ffff80c0 	.word	0xffff80c0
 80086b4:	ffffc080 	.word	0xffffc080
 80086b8:	ffff8080 	.word	0xffff8080
 80086bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086be:	095b      	lsrs	r3, r3, #5
 80086c0:	637b      	str	r3, [r7, #52]	; 0x34
 80086c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	029b      	lsls	r3, r3, #10
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	801a      	strh	r2, [r3, #0]
 80086d8:	e013      	b.n	8008702 <USB_EPStartXfer+0x522>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	785b      	ldrb	r3, [r3, #1]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d10f      	bne.n	8008702 <USB_EPStartXfer+0x522>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	441c      	add	r4, r3
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	00db      	lsls	r3, r3, #3
 80086f2:	4423      	add	r3, r4
 80086f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80086f8:	60fb      	str	r3, [r7, #12]
 80086fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	881b      	ldrh	r3, [r3, #0]
 800870e:	b29b      	uxth	r3, r3
 8008710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008718:	b29c      	uxth	r4, r3
 800871a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800871e:	b29c      	uxth	r4, r3
 8008720:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008724:	b29c      	uxth	r4, r3
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	441a      	add	r2, r3
 8008730:	4b04      	ldr	r3, [pc, #16]	; (8008744 <USB_EPStartXfer+0x564>)
 8008732:	4323      	orrs	r3, r4
 8008734:	b29b      	uxth	r3, r3
 8008736:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3754      	adds	r7, #84	; 0x54
 800873e:	46bd      	mov	sp, r7
 8008740:	bd90      	pop	{r4, r7, pc}
 8008742:	bf00      	nop
 8008744:	ffff8080 	.word	0xffff8080

08008748 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008748:	b490      	push	{r4, r7}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	785b      	ldrb	r3, [r3, #1]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d018      	beq.n	800878c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	881b      	ldrh	r3, [r3, #0]
 8008766:	b29b      	uxth	r3, r3
 8008768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800876c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008770:	b29c      	uxth	r4, r3
 8008772:	f084 0310 	eor.w	r3, r4, #16
 8008776:	b29c      	uxth	r4, r3
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	441a      	add	r2, r3
 8008782:	4b11      	ldr	r3, [pc, #68]	; (80087c8 <USB_EPSetStall+0x80>)
 8008784:	4323      	orrs	r3, r4
 8008786:	b29b      	uxth	r3, r3
 8008788:	8013      	strh	r3, [r2, #0]
 800878a:	e017      	b.n	80087bc <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	b29b      	uxth	r3, r3
 800879a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800879e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a2:	b29c      	uxth	r4, r3
 80087a4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80087a8:	b29c      	uxth	r4, r3
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	441a      	add	r2, r3
 80087b4:	4b04      	ldr	r3, [pc, #16]	; (80087c8 <USB_EPSetStall+0x80>)
 80087b6:	4323      	orrs	r3, r4
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bc90      	pop	{r4, r7}
 80087c6:	4770      	bx	lr
 80087c8:	ffff8080 	.word	0xffff8080

080087cc <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087cc:	b490      	push	{r4, r7}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	785b      	ldrb	r3, [r3, #1]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d03c      	beq.n	8008858 <USB_EPClearStall+0x8c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	b29c      	uxth	r4, r3
 80087ec:	4623      	mov	r3, r4
 80087ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d014      	beq.n	8008820 <USB_EPClearStall+0x54>
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	b29b      	uxth	r3, r3
 8008804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800880c:	b29c      	uxth	r4, r3
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	441a      	add	r2, r3
 8008818:	4b30      	ldr	r3, [pc, #192]	; (80088dc <USB_EPClearStall+0x110>)
 800881a:	4323      	orrs	r3, r4
 800881c:	b29b      	uxth	r3, r3
 800881e:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4413      	add	r3, r2
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	b29b      	uxth	r3, r3
 800882e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008836:	b29c      	uxth	r4, r3
 8008838:	f084 0310 	eor.w	r3, r4, #16
 800883c:	b29c      	uxth	r4, r3
 800883e:	f084 0320 	eor.w	r3, r4, #32
 8008842:	b29c      	uxth	r4, r3
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	441a      	add	r2, r3
 800884e:	4b24      	ldr	r3, [pc, #144]	; (80088e0 <USB_EPClearStall+0x114>)
 8008850:	4323      	orrs	r3, r4
 8008852:	b29b      	uxth	r3, r3
 8008854:	8013      	strh	r3, [r2, #0]
 8008856:	e03b      	b.n	80088d0 <USB_EPClearStall+0x104>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	881b      	ldrh	r3, [r3, #0]
 8008864:	b29c      	uxth	r4, r3
 8008866:	4623      	mov	r3, r4
 8008868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d014      	beq.n	800889a <USB_EPClearStall+0xce>
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	b29b      	uxth	r3, r3
 800887e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008886:	b29c      	uxth	r4, r3
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	441a      	add	r2, r3
 8008892:	4b14      	ldr	r3, [pc, #80]	; (80088e4 <USB_EPClearStall+0x118>)
 8008894:	4323      	orrs	r3, r4
 8008896:	b29b      	uxth	r3, r3
 8008898:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	881b      	ldrh	r3, [r3, #0]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b0:	b29c      	uxth	r4, r3
 80088b2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80088b6:	b29c      	uxth	r4, r3
 80088b8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80088bc:	b29c      	uxth	r4, r3
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	441a      	add	r2, r3
 80088c8:	4b05      	ldr	r3, [pc, #20]	; (80088e0 <USB_EPClearStall+0x114>)
 80088ca:	4323      	orrs	r3, r4
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bc90      	pop	{r4, r7}
 80088da:	4770      	bx	lr
 80088dc:	ffff80c0 	.word	0xffff80c0
 80088e0:	ffff8080 	.word	0xffff8080
 80088e4:	ffffc080 	.word	0xffffc080

080088e8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80088f4:	78fb      	ldrb	r3, [r7, #3]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d103      	bne.n	8008902 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2280      	movs	r2, #128	; 0x80
 80088fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800891e:	b29b      	uxth	r3, r3
 8008920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008928:	b29a      	uxth	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800894c:	b29b      	uxth	r3, r3
 800894e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008952:	b29a      	uxth	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008976:	b29b      	uxth	r3, r3
 8008978:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800897a:	68fb      	ldr	r3, [r7, #12]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b08d      	sub	sp, #52	; 0x34
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	4611      	mov	r1, r2
 80089ac:	461a      	mov	r2, r3
 80089ae:	460b      	mov	r3, r1
 80089b0:	80fb      	strh	r3, [r7, #6]
 80089b2:	4613      	mov	r3, r2
 80089b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80089b6:	88bb      	ldrh	r3, [r7, #4]
 80089b8:	3301      	adds	r3, #1
 80089ba:	085b      	lsrs	r3, r3, #1
 80089bc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80089c6:	88fa      	ldrh	r2, [r7, #6]
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	4413      	add	r3, r2
 80089cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089d0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80089d2:	6a3b      	ldr	r3, [r7, #32]
 80089d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089d6:	e01b      	b.n	8008a10 <USB_WritePMA+0x70>
  {
    temp1 = (uint16_t) * pBuf;
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	3301      	adds	r3, #1
 80089e2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	021b      	lsls	r3, r3, #8
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	461a      	mov	r2, r3
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80089fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a00:	3302      	adds	r3, #2
 8008a02:	62bb      	str	r3, [r7, #40]	; 0x28

    if (PMA_ACCESS > 1U)
    {
      pdwVal++;
    }
    pBuf++;
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	3301      	adds	r3, #1
 8008a08:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1e0      	bne.n	80089d8 <USB_WritePMA+0x38>
  }
}
 8008a16:	bf00      	nop
 8008a18:	3734      	adds	r7, #52	; 0x34
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a22:	b480      	push	{r7}
 8008a24:	b08b      	sub	sp, #44	; 0x2c
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	461a      	mov	r2, r3
 8008a30:	460b      	mov	r3, r1
 8008a32:	80fb      	strh	r3, [r7, #6]
 8008a34:	4613      	mov	r3, r2
 8008a36:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008a38:	88bb      	ldrh	r3, [r7, #4]
 8008a3a:	085b      	lsrs	r3, r3, #1
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a48:	88fa      	ldrh	r2, [r7, #6]
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a52:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	627b      	str	r3, [r7, #36]	; 0x24
 8008a58:	e017      	b.n	8008a8a <USB_ReadPMA+0x68>
  {
    temp = *pdwVal;
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	3302      	adds	r3, #2
 8008a64:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	3301      	adds	r3, #1
 8008a72:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	0a1b      	lsrs	r3, r3, #8
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	3301      	adds	r3, #1
 8008a82:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	3b01      	subs	r3, #1
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e4      	bne.n	8008a5a <USB_ReadPMA+0x38>
    {
      pdwVal++;
    }
  }

  if ((wNBytes % 2U) != 0U)
 8008a90:	88bb      	ldrh	r3, [r7, #4]
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00c      	beq.n	8008ab6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	881b      	ldrh	r3, [r3, #0]
 8008aa0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	3302      	adds	r3, #2
 8008aa6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	b2da      	uxtb	r2, r3
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	61fb      	str	r3, [r7, #28]
  }
}
 8008ab6:	bf00      	nop
 8008ab8:	372c      	adds	r7, #44	; 0x2c
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <dmx_registerCallback>:
* Variable Declarations
*******************************************************************************/
/******************************************************************************
* Function Definitions
*******************************************************************************/
void dmx_registerCallback(dmx_cfg_Instance *dmx, dmx_cfg_callback callback){
 8008ac2:	b480      	push	{r7}
 8008ac4:	b083      	sub	sp, #12
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	6039      	str	r1, [r7, #0]
	dmx->callback = callback;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	655a      	str	r2, [r3, #84]	; 0x54
}
 8008ad2:	bf00      	nop
 8008ad4:	370c      	adds	r7, #12
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
	...

08008ae0 <dmx_init>:

void dmx_init(dmx_cfg_Instance *dmx){
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
	if(dmx->type == dmx_cfg_TYPE_TRANSMITTER){
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d126      	bne.n	8008b3e <dmx_init+0x5e>
		gpio_ConfigureToFloating(dmx->txBreakPort, dmx->txBreakPin);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	891b      	ldrh	r3, [r3, #8]
 8008af8:	4619      	mov	r1, r3
 8008afa:	4610      	mov	r0, r2
 8008afc:	f002 f9a0 	bl	800ae40 <gpio_ConfigureToFloating>
		dmx->txState = dmx_cfg_TX_STATE_NONE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	705a      	strb	r2, [r3, #1]
		dmx->txBreakToBreakCnt = 0;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	621a      	str	r2, [r3, #32]
		dmx->txBreakToBreakTime_ms = dmx->txBreakToBreakTime_ms + (dmx->txBreakTime_us + dmx->txMarkAfterBreakTime_us + dmx->txMarkBetweenTime_us*dmx->universeSize)/1000;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	69da      	ldr	r2, [r3, #28]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6919      	ldr	r1, [r3, #16]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	695b      	ldr	r3, [r3, #20]
 8008b18:	4419      	add	r1, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
 8008b24:	fb00 f303 	mul.w	r3, r0, r3
 8008b28:	440b      	add	r3, r1
 8008b2a:	4911      	ldr	r1, [pc, #68]	; (8008b70 <dmx_init+0x90>)
 8008b2c:	fb81 0103 	smull	r0, r1, r1, r3
 8008b30:	1189      	asrs	r1, r1, #6
 8008b32:	17db      	asrs	r3, r3, #31
 8008b34:	1acb      	subs	r3, r1, r3
 8008b36:	441a      	add	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	61da      	str	r2, [r3, #28]
 8008b3c:	e010      	b.n	8008b60 <dmx_init+0x80>
	}else if(dmx->type == dmx_cfg_TYPE_RECEIVER){
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d10c      	bne.n	8008b60 <dmx_init+0x80>
		dmx->rxState = dmx_cfg_RX_STATE_NONE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		dmx->rxFallingTime = 0;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	631a      	str	r2, [r3, #48]	; 0x30
		dmx->rxRisingTime = 0;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	635a      	str	r2, [r3, #52]	; 0x34
		dmx->rxTimerUpdateCnt = 0;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	641a      	str	r2, [r3, #64]	; 0x40
	}
	dmx->universeCnt = 0;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8008b68:	bf00      	nop
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	10624dd3 	.word	0x10624dd3

08008b74 <dmx_loop>:

void dmx_loop(dmx_cfg_Instance *dmx){
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
	if(dmx->type == dmx_cfg_TYPE_TRANSMITTER){
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10e      	bne.n	8008ba2 <dmx_loop+0x2e>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	785b      	ldrb	r3, [r3, #1]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d029      	beq.n	8008be0 <dmx_loop+0x6c>
		if(dmx->txBreakToBreakCnt == 0){
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d106      	bne.n	8008ba2 <dmx_loop+0x2e>
			dmx_sendStart(dmx);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f83a 	bl	8008c0e <dmx_sendStart>
			dmx->txBreakToBreakCnt = dmx->txBreakToBreakTime_ms;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	69da      	ldr	r2, [r3, #28]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	621a      	str	r2, [r3, #32]
		}
	}else if(dmx->type == dmx_cfg_TYPE_RECEIVER){
	}
	/*Loop flags*/
	if(dmx->universeComplete){
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d01a      	beq.n	8008be2 <dmx_loop+0x6e>
		dmx->universeComplete = false;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
		if(dmx->type == dmx_cfg_TYPE_TRANSMITTER) dmx->callbackType = dmx_cfg_CALL_TX_COMPLETE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d104      	bne.n	8008bc6 <dmx_loop+0x52>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8008bc4:	e003      	b.n	8008bce <dmx_loop+0x5a>
		else dmx->callbackType = dmx_cfg_CALL_RX_COMPLETE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		if(dmx->callback) dmx->callback(dmx);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d005      	beq.n	8008be2 <dmx_loop+0x6e>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	4798      	blx	r3
 8008bde:	e000      	b.n	8008be2 <dmx_loop+0x6e>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8008be0:	bf00      	nop
	}
}
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <dmx_1ms>:

void dmx_1ms(dmx_cfg_Instance *dmx){
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
	if(dmx->txBreakToBreakCnt > 0) --dmx->txBreakToBreakCnt;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a1b      	ldr	r3, [r3, #32]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	dd04      	ble.n	8008c02 <dmx_1ms+0x1a>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a1b      	ldr	r3, [r3, #32]
 8008bfc:	1e5a      	subs	r2, r3, #1
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	621a      	str	r2, [r3, #32]
}
 8008c02:	bf00      	nop
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <dmx_sendStart>:

void dmx_sendStart(dmx_cfg_Instance *dmx){
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b082      	sub	sp, #8
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d130      	bne.n	8008c80 <dmx_sendStart+0x72>
	if(dmx->universe == NULL) return;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d02e      	beq.n	8008c84 <dmx_sendStart+0x76>
	if(dmx->txBreakToBreakTime_ms < dmx_cfg_MIN_BREAK_TO_BREAK_TIME_MS) dmx->txBreakToBreakTime_ms = dmx_cfg_MIN_BREAK_TO_BREAK_TIME_MS;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	2b18      	cmp	r3, #24
 8008c2c:	dc02      	bgt.n	8008c34 <dmx_sendStart+0x26>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2219      	movs	r2, #25
 8008c32:	61da      	str	r2, [r3, #28]
	if(dmx->txBreakTime_us < dmx_cfg_MIN_BREAK_TIME_US) dmx->txBreakTime_us = dmx_cfg_MIN_BREAK_TIME_US;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	2b5f      	cmp	r3, #95	; 0x5f
 8008c3a:	dc02      	bgt.n	8008c42 <dmx_sendStart+0x34>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2260      	movs	r2, #96	; 0x60
 8008c40:	611a      	str	r2, [r3, #16]
	if(dmx->txMarkAfterBreakTime_us < dmx_cfg_MIN_MARK_AFTER_BREAK_TIME_US) dmx->txMarkAfterBreakTime_us = dmx_cfg_MIN_MARK_AFTER_BREAK_TIME_US;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	2b0b      	cmp	r3, #11
 8008c48:	dc02      	bgt.n	8008c50 <dmx_sendStart+0x42>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	220c      	movs	r2, #12
 8008c4e:	615a      	str	r2, [r3, #20]
	dmx->universeComplete = false;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	dmx->txState = dmx_cfg_TX_STATE_SEND_BREAK;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	705a      	strb	r2, [r3, #1]
	tim_setNewTimeAndStart(dmx->txTimer, dmx->txBreakTime_us);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68da      	ldr	r2, [r3, #12]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	4619      	mov	r1, r3
 8008c68:	4610      	mov	r0, r2
 8008c6a:	f002 fde9 	bl	800b840 <tim_setNewTimeAndStart>
	gpio_ConfigureToPushPull(dmx->txBreakPort, dmx->txBreakPin);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	891b      	ldrh	r3, [r3, #8]
 8008c76:	4619      	mov	r1, r3
 8008c78:	4610      	mov	r0, r2
 8008c7a:	f002 f8ff 	bl	800ae7c <gpio_ConfigureToPushPull>
 8008c7e:	e002      	b.n	8008c86 <dmx_sendStart+0x78>
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 8008c80:	bf00      	nop
 8008c82:	e000      	b.n	8008c86 <dmx_sendStart+0x78>
	if(dmx->universe == NULL) return;
 8008c84:	bf00      	nop
}
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <dmx_txStart>:
	else if(timeIdx == dmx_cfg_TIME_MARK_AFTER_BREAK) dmx->txMarkAfterBreakTime_us = time_us;
	else if(timeIdx == dmx_cfg_TIME_MARK_BETWEEN) dmx->txMarkBetweenTime_us = time_us;
	else if(timeIdx == dmx_cfg_TIME_BREAK_TO_BREAK) dmx->txBreakToBreakTime_ms = (time_us + dmx->txBreakTime_us + dmx->txMarkAfterBreakTime_us + dmx->txMarkBetweenTime_us*dmx->universeSize)/1000;
}

void dmx_txStart(dmx_cfg_Instance *dmx){
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d103      	bne.n	8008ca4 <dmx_txStart+0x18>
	dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	705a      	strb	r2, [r3, #1]
 8008ca2:	e000      	b.n	8008ca6 <dmx_txStart+0x1a>
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 8008ca4:	bf00      	nop
}
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <dmx_rxStart>:
void dmx_txStop(dmx_cfg_Instance *dmx){
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
	dmx->txState = dmx_cfg_TX_STATE_NONE;
}

void dmx_rxStart(dmx_cfg_Instance *dmx){
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_RECEIVER) return;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d109      	bne.n	8008cd4 <dmx_rxStart+0x24>
	app_uart_enableReceiveInt(dmx->uart);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7f9 feaa 	bl	8002a1e <app_uart_enableReceiveInt>
	dmx->rxState = dmx_cfg_RX_STATE_WAIT_FOR_BREAK;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008cd2:	e000      	b.n	8008cd6 <dmx_rxStart+0x26>
	if(dmx->type != dmx_cfg_TYPE_RECEIVER) return;
 8008cd4:	bf00      	nop
}
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <dmx_irqTxTimerHandler>:
void dmx_incrementRxUpdateCnt(dmx_cfg_Instance *dmx){
	++dmx->rxTimerUpdateCnt;
}

/*Transmit IRQs*/
void dmx_irqTxTimerHandler(dmx_cfg_Instance *dmx){
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
	if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	785b      	ldrb	r3, [r3, #1]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d05c      	beq.n	8008da6 <dmx_irqTxTimerHandler+0xca>
	if(dmx->txState == dmx_cfg_TX_STATE_SEND_BREAK){
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	785b      	ldrb	r3, [r3, #1]
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d113      	bne.n	8008d1c <dmx_irqTxTimerHandler+0x40>
		gpio_ConfigureToFloating(dmx->txBreakPort, dmx->txBreakPin);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	891b      	ldrh	r3, [r3, #8]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	4610      	mov	r0, r2
 8008d00:	f002 f89e 	bl	800ae40 <gpio_ConfigureToFloating>
		tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkAfterBreakTime_us);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	68da      	ldr	r2, [r3, #12]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	4610      	mov	r0, r2
 8008d10:	f002 fd96 	bl	800b840 <tim_setNewTimeAndStart>
		dmx->txState = dmx_cfg_TX_STATE_SEND_MARK;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2203      	movs	r2, #3
 8008d18:	705a      	strb	r2, [r3, #1]
 8008d1a:	e045      	b.n	8008da8 <dmx_irqTxTimerHandler+0xcc>
	}else if(dmx->txState == dmx_cfg_TX_STATE_SEND_MARK){
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	785b      	ldrb	r3, [r3, #1]
 8008d20:	2b03      	cmp	r3, #3
 8008d22:	d133      	bne.n	8008d8c <dmx_irqTxTimerHandler+0xb0>
		dmx->universeCnt = 0;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		dmx->uart->CR1 &= ~USART_CR1_TXEIE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008d34:	6812      	ldr	r2, [r2, #0]
 8008d36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d3a:	601a      	str	r2, [r3, #0]
		dmx->uart->TDR = dmx->universeStartCode;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8008d46:	b292      	uxth	r2, r2
 8008d48:	851a      	strh	r2, [r3, #40]	; 0x28
		if(dmx->txMarkBetweenTime_us == 0) {
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d110      	bne.n	8008d74 <dmx_irqTxTimerHandler+0x98>
			dmx->uart->CR1 |= USART_CR1_TXEIE;		//start with transmission --> enable transmitbuffer empty interrupt
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008d5a:	6812      	ldr	r2, [r2, #0]
 8008d5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008d60:	601a      	str	r2, [r3, #0]
			tim_stop(dmx->txTimer);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f002 fda2 	bl	800b8b0 <tim_stop>
			dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;	//The whole universe can be transmitted as fast as possible
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	705a      	strb	r2, [r3, #1]
 8008d72:	e019      	b.n	8008da8 <dmx_irqTxTimerHandler+0xcc>
		}
		else{
			tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkBetweenTime_us);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68da      	ldr	r2, [r3, #12]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4610      	mov	r0, r2
 8008d80:	f002 fd5e 	bl	800b840 <tim_setNewTimeAndStart>
			dmx->txState = dmx_cfg_TX_STATE_SEND_UNIVERSE;	//The universe can be transmitted with defined delay between all data bytes
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2205      	movs	r2, #5
 8008d88:	705a      	strb	r2, [r3, #1]
 8008d8a:	e00d      	b.n	8008da8 <dmx_irqTxTimerHandler+0xcc>
		}
	}else if(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE){
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	785b      	ldrb	r3, [r3, #1]
 8008d90:	2b05      	cmp	r3, #5
 8008d92:	d109      	bne.n	8008da8 <dmx_irqTxTimerHandler+0xcc>
		dmx->uart->CR1 |= USART_CR1_TXEIE;		//start with transmission --> enable transmitbuffer empty interrupt
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008d9c:	6812      	ldr	r2, [r2, #0]
 8008d9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	e000      	b.n	8008da8 <dmx_irqTxTimerHandler+0xcc>
	if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8008da6:	bf00      	nop
	}
}
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <dmx_irqTxInterfaceHandler>:

void dmx_irqTxInterfaceHandler(dmx_cfg_Instance *dmx){
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b082      	sub	sp, #8
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
	if (dmx->uart->ISR & USART_ISR_TXE){				//transmit dmx values
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dba:	69db      	ldr	r3, [r3, #28]
 8008dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d066      	beq.n	8008e92 <dmx_irqTxInterfaceHandler+0xe4>
		dmx->uart->ISR &= ~USART_ISR_TXE; //Kill transmit-buffer empty flag
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008dcc:	69d2      	ldr	r2, [r2, #28]
 8008dce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dd2:	61da      	str	r2, [r3, #28]
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	785b      	ldrb	r3, [r3, #1]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d059      	beq.n	8008e90 <dmx_irqTxInterfaceHandler+0xe2>
		if((dmx->txState == dmx_cfg_TX_STATE_WAIT_FOR_BREAK)||(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE)){
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	785b      	ldrb	r3, [r3, #1]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d003      	beq.n	8008dec <dmx_irqTxInterfaceHandler+0x3e>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	785b      	ldrb	r3, [r3, #1]
 8008de8:	2b05      	cmp	r3, #5
 8008dea:	d152      	bne.n	8008e92 <dmx_irqTxInterfaceHandler+0xe4>
			if(dmx->universeCnt < dmx->universeSize){
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d230      	bcs.n	8008e5e <dmx_irqTxInterfaceHandler+0xb0>
				dmx->uart->CR1 &= ~USART_CR1_TXEIE;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008e04:	6812      	ldr	r2, [r2, #0]
 8008e06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e0a:	601a      	str	r2, [r3, #0]
				dmx->uart->TDR = dmx->universe[dmx->universeCnt];
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008e14:	6879      	ldr	r1, [r7, #4]
 8008e16:	f8b1 1050 	ldrh.w	r1, [r1, #80]	; 0x50
 8008e1a:	440a      	add	r2, r1
 8008e1c:	7812      	ldrb	r2, [r2, #0]
 8008e1e:	b292      	uxth	r2, r2
 8008e20:	851a      	strh	r2, [r3, #40]	; 0x28
				dmx->universeCnt++;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e28:	3301      	adds	r3, #1
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				if(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE) tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkBetweenTime_us);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	785b      	ldrb	r3, [r3, #1]
 8008e36:	2b05      	cmp	r3, #5
 8008e38:	d108      	bne.n	8008e4c <dmx_irqTxInterfaceHandler+0x9e>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68da      	ldr	r2, [r3, #12]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	4619      	mov	r1, r3
 8008e44:	4610      	mov	r0, r2
 8008e46:	f002 fcfb 	bl	800b840 <tim_setNewTimeAndStart>
 8008e4a:	e022      	b.n	8008e92 <dmx_irqTxInterfaceHandler+0xe4>
				else dmx->uart->CR1 |= USART_CR1_TXEIE;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008e54:	6812      	ldr	r2, [r2, #0]
 8008e56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	e019      	b.n	8008e92 <dmx_irqTxInterfaceHandler+0xe4>
			}else{
				dmx->universeCnt = 0;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				dmx->uart->CR1 &= ~USART_CR1_TXEIE;	//disable transmit-buffer empty interrupt
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008e6e:	6812      	ldr	r2, [r2, #0]
 8008e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e74:	601a      	str	r2, [r3, #0]
				dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	705a      	strb	r2, [r3, #1]
				tim_stop(dmx->txTimer);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f002 fd15 	bl	800b8b0 <tim_stop>
				dmx->universeComplete = true;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008e8e:	e000      	b.n	8008e92 <dmx_irqTxInterfaceHandler+0xe4>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8008e90:	bf00      	nop
			}
		}

	}
}
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <dmx_irqRxInterfaceHandler>:
/*Receive IRQs*/
void dmx_irqRxTimerHandler(dmx_cfg_Instance *dmx){
//TODO: Add measurement of break
}

void dmx_irqRxInterfaceHandler(dmx_cfg_Instance *dmx){
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
	uint32_t sr = dmx->uart->ISR;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea4:	69db      	ldr	r3, [r3, #28]
 8008ea6:	60fb      	str	r3, [r7, #12]
	if (sr & USART_ISR_RXNE){
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f003 0320 	and.w	r3, r3, #32
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d065      	beq.n	8008f7e <dmx_irqRxInterfaceHandler+0xe6>
		if(sr & USART_ISR_ORE) dmx->uart->ICR |= USART_ICR_ORECF; /*Kill overrun error*/
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f003 0308 	and.w	r3, r3, #8
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d007      	beq.n	8008ecc <dmx_irqRxInterfaceHandler+0x34>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008ec4:	6a12      	ldr	r2, [r2, #32]
 8008ec6:	f042 0208 	orr.w	r2, r2, #8
 8008eca:	621a      	str	r2, [r3, #32]
		uint8_t  dmxByte = (uint8_t)dmx->uart->RDR;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ed0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	72fb      	strb	r3, [r7, #11]
		if(dmx->rxState == dmx_cfg_RX_STATE_NONE) return;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d04d      	beq.n	8008f7c <dmx_irqRxInterfaceHandler+0xe4>
		if(sr & USART_ISR_FE){	/*Frame error*/
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f003 0302 	and.w	r3, r3, #2
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d014      	beq.n	8008f14 <dmx_irqRxInterfaceHandler+0x7c>
			dmx->uart->ICR |= USART_ICR_FECF; /*Kill frame error*/
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008ef2:	6a12      	ldr	r2, [r2, #32]
 8008ef4:	f042 0202 	orr.w	r2, r2, #2
 8008ef8:	621a      	str	r2, [r3, #32]
			dmx->universeCnt = 0;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			dmx->rxState = dmx_cfg_RX_STATE_RECEIVE_START_CODE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2203      	movs	r2, #3
 8008f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			dmx->universeComplete = false;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008f12:	e034      	b.n	8008f7e <dmx_irqRxInterfaceHandler+0xe6>
		}else if(dmx->rxState == dmx_cfg_RX_STATE_RECEIVE_START_CODE){
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008f1a:	2b03      	cmp	r3, #3
 8008f1c:	d108      	bne.n	8008f30 <dmx_irqRxInterfaceHandler+0x98>
			dmx->rxState = dmx_cfg_RX_STATE_RECEIVE_UNIVERSE;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2204      	movs	r2, #4
 8008f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			dmx->universeStartCode = dmxByte;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	7afa      	ldrb	r2, [r7, #11]
 8008f2a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8008f2e:	e026      	b.n	8008f7e <dmx_irqRxInterfaceHandler+0xe6>
		}else if(dmx->rxState == dmx_cfg_RX_STATE_RECEIVE_UNIVERSE){
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008f36:	2b04      	cmp	r3, #4
 8008f38:	d121      	bne.n	8008f7e <dmx_irqRxInterfaceHandler+0xe6>
			dmx->universe[dmx->universeCnt] = dmxByte;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8008f44:	4413      	add	r3, r2
 8008f46:	7afa      	ldrb	r2, [r7, #11]
 8008f48:	701a      	strb	r2, [r3, #0]
			dmx->universeCnt++;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f50:	3301      	adds	r3, #1
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			if(dmx->universeCnt >= dmx->universeSize){
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d309      	bcc.n	8008f7e <dmx_irqRxInterfaceHandler+0xe6>
				dmx->universeComplete = true;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
				dmx->rxState = dmx_cfg_RX_STATE_WAIT_FOR_BREAK;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008f7a:	e000      	b.n	8008f7e <dmx_irqRxInterfaceHandler+0xe6>
		if(dmx->rxState == dmx_cfg_RX_STATE_NONE) return;
 8008f7c:	bf00      	nop
			}
		}
	}
}
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <eeprom_registerCallback>:
static inline void readData(eeprom_cfg_Config *config, uint8_t *data, uint16_t dataSize);
static inline void callbackError(uint8_t type);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void eeprom_registerCallback(eeprom_cfg_Config *config, eeprom_cfg_callback callback){
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
	config->callback = callback;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	683a      	ldr	r2, [r7, #0]
 8008f96:	60da      	str	r2, [r3, #12]
}
 8008f98:	bf00      	nop
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <eeprom_init>:
void eeprom_init(eeprom_cfg_Config *config){
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
	if(config->callback != NULL){
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d004      	beq.n	8008fbe <eeprom_init+0x1a>
		config->maxAddress = config->memorySize >> 3; /*Convert Bit to Byte*/
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	08da      	lsrs	r2, r3, #3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	611a      	str	r2, [r3, #16]
	}
}
 8008fbe:	bf00      	nop
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <eeprom_write>:

void eeprom_write(eeprom_cfg_Config *config, uint16_t startAddr, uint8_t *data, uint16_t dataSize){
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b084      	sub	sp, #16
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	60f8      	str	r0, [r7, #12]
 8008fd2:	607a      	str	r2, [r7, #4]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	817b      	strh	r3, [r7, #10]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	813b      	strh	r3, [r7, #8]
	if(writeValidation(config, startAddr, data, dataSize) == OK){
 8008fde:	893b      	ldrh	r3, [r7, #8]
 8008fe0:	8979      	ldrh	r1, [r7, #10]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f000 f89d 	bl	8009124 <writeValidation>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d10a      	bne.n	8009006 <eeprom_write+0x3c>
		writeStartAddr(config, startAddr);
 8008ff0:	897b      	ldrh	r3, [r7, #10]
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f000 f84a 	bl	800908e <writeStartAddr>
		writeData(config, data, dataSize);
 8008ffa:	893b      	ldrh	r3, [r7, #8]
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	6879      	ldr	r1, [r7, #4]
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f000 f853 	bl	80090ac <writeData>
	}
}
 8009006:	bf00      	nop
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <eeprom_read>:

void eeprom_read(eeprom_cfg_Config *config, uint16_t startAddr, uint8_t *data, uint16_t dataSize){
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	60f8      	str	r0, [r7, #12]
 8009016:	607a      	str	r2, [r7, #4]
 8009018:	461a      	mov	r2, r3
 800901a:	460b      	mov	r3, r1
 800901c:	817b      	strh	r3, [r7, #10]
 800901e:	4613      	mov	r3, r2
 8009020:	813b      	strh	r3, [r7, #8]
	if(readValidation(config, startAddr, data, dataSize) == OK){
 8009022:	893b      	ldrh	r3, [r7, #8]
 8009024:	8979      	ldrh	r1, [r7, #10]
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f000 f8a8 	bl	800917e <readValidation>
 800902e:	4603      	mov	r3, r0
 8009030:	2b01      	cmp	r3, #1
 8009032:	d10a      	bne.n	800904a <eeprom_read+0x3c>
		writeStartAddr(config, startAddr);
 8009034:	897b      	ldrh	r3, [r7, #10]
 8009036:	4619      	mov	r1, r3
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f000 f828 	bl	800908e <writeStartAddr>
		readData(config, data, dataSize);
 800903e:	893b      	ldrh	r3, [r7, #8]
 8009040:	461a      	mov	r2, r3
 8009042:	6879      	ldr	r1, [r7, #4]
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f000 f84f 	bl	80090e8 <readData>
	}
}
 800904a:	bf00      	nop
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <eeprom_isFree>:

bool eeprom_isFree(eeprom_cfg_Config *config){
 8009052:	b580      	push	{r7, lr}
 8009054:	b084      	sub	sp, #16
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
	config->dataSize = 0;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	615a      	str	r2, [r3, #20]
	uint8_t dummyData = 0xFF;
 8009060:	23ff      	movs	r3, #255	; 0xff
 8009062:	73fb      	strb	r3, [r7, #15]
	config->txBuffer = &dummyData;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f107 020f 	add.w	r2, r7, #15
 800906a:	61da      	str	r2, [r3, #28]
	config->callbackType = EEPROM_CFG_CALL_CHECK_TX_STATE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2204      	movs	r2, #4
 8009070:	729a      	strb	r2, [r3, #10]
	if(config->callback(config) != OK) return false;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	4798      	blx	r3
 800907a:	4603      	mov	r3, r0
 800907c:	2b01      	cmp	r3, #1
 800907e:	d001      	beq.n	8009084 <eeprom_isFree+0x32>
 8009080:	2300      	movs	r3, #0
 8009082:	e000      	b.n	8009086 <eeprom_isFree+0x34>
	else return true;
 8009084:	2301      	movs	r3, #1
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <writeStartAddr>:


static inline void writeStartAddr(eeprom_cfg_Config *config, uint16_t startAddr){
 800908e:	b480      	push	{r7}
 8009090:	b083      	sub	sp, #12
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
 8009096:	460b      	mov	r3, r1
 8009098:	807b      	strh	r3, [r7, #2]
	config->memAddr = startAddr;
 800909a:	887a      	ldrh	r2, [r7, #2]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	619a      	str	r2, [r3, #24]
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <writeData>:

static inline void writeData(eeprom_cfg_Config *config, uint8_t *data, uint16_t dataSize){
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	4613      	mov	r3, r2
 80090b8:	80fb      	strh	r3, [r7, #6]
	config->dataSize = dataSize;
 80090ba:	88fa      	ldrh	r2, [r7, #6]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	615a      	str	r2, [r3, #20]
	config->txBuffer = data;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	61da      	str	r2, [r3, #28]
	config->callbackType = EEPROM_CFG_CALL_TX_START;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	729a      	strb	r2, [r3, #10]
	if(config->callback(config) != OK) callbackError(EEPROM_CFG_CALL_TX_ERROR);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	4798      	blx	r3
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d002      	beq.n	80090e0 <writeData+0x34>
 80090da:	2002      	movs	r0, #2
 80090dc:	f000 f875 	bl	80091ca <callbackError>
}
 80090e0:	bf00      	nop
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <readData>:

static inline void readData(eeprom_cfg_Config *config, uint8_t *data, uint16_t dataSize){
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	4613      	mov	r3, r2
 80090f4:	80fb      	strh	r3, [r7, #6]
	config->dataSize = dataSize;
 80090f6:	88fa      	ldrh	r2, [r7, #6]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	615a      	str	r2, [r3, #20]
	config->rxBuffer = data;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	621a      	str	r2, [r3, #32]
	config->callbackType = EEPROM_CFG_CALL_RX_START;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2201      	movs	r2, #1
 8009106:	729a      	strb	r2, [r3, #10]
	if(config->callback(config) != OK) callbackError(EEPROM_CFG_CALL_RX_ERROR);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	4798      	blx	r3
 8009110:	4603      	mov	r3, r0
 8009112:	2b01      	cmp	r3, #1
 8009114:	d002      	beq.n	800911c <readData+0x34>
 8009116:	2003      	movs	r0, #3
 8009118:	f000 f857 	bl	80091ca <callbackError>
}
 800911c:	bf00      	nop
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <writeValidation>:

static inline uint8_t writeValidation(eeprom_cfg_Config *config, uint16_t startAddr, uint8_t *data, uint16_t dataSize){
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	607a      	str	r2, [r7, #4]
 800912e:	461a      	mov	r2, r3
 8009130:	460b      	mov	r3, r1
 8009132:	817b      	strh	r3, [r7, #10]
 8009134:	4613      	mov	r3, r2
 8009136:	813b      	strh	r3, [r7, #8]
	if(config->callback == NULL) return NOK;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <writeValidation+0x20>
 8009140:	2300      	movs	r3, #0
 8009142:	e016      	b.n	8009172 <writeValidation+0x4e>
	if(data == NULL) return NOK;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d101      	bne.n	800914e <writeValidation+0x2a>
 800914a:	2300      	movs	r3, #0
 800914c:	e011      	b.n	8009172 <writeValidation+0x4e>
	if((startAddr + dataSize) > config->maxAddress) return NOK;
 800914e:	897a      	ldrh	r2, [r7, #10]
 8009150:	893b      	ldrh	r3, [r7, #8]
 8009152:	4413      	add	r3, r2
 8009154:	461a      	mov	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	429a      	cmp	r2, r3
 800915c:	d901      	bls.n	8009162 <writeValidation+0x3e>
 800915e:	2300      	movs	r3, #0
 8009160:	e007      	b.n	8009172 <writeValidation+0x4e>
	if(dataSize > config->pageBufferSize) return NOK;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	891b      	ldrh	r3, [r3, #8]
 8009166:	893a      	ldrh	r2, [r7, #8]
 8009168:	429a      	cmp	r2, r3
 800916a:	d901      	bls.n	8009170 <writeValidation+0x4c>
 800916c:	2300      	movs	r3, #0
 800916e:	e000      	b.n	8009172 <writeValidation+0x4e>
	else return OK;
 8009170:	2301      	movs	r3, #1
}
 8009172:	4618      	mov	r0, r3
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <readValidation>:
static inline uint8_t readValidation(eeprom_cfg_Config *config, uint16_t startAddr, uint8_t *data, uint16_t dataSize){
 800917e:	b480      	push	{r7}
 8009180:	b085      	sub	sp, #20
 8009182:	af00      	add	r7, sp, #0
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	607a      	str	r2, [r7, #4]
 8009188:	461a      	mov	r2, r3
 800918a:	460b      	mov	r3, r1
 800918c:	817b      	strh	r3, [r7, #10]
 800918e:	4613      	mov	r3, r2
 8009190:	813b      	strh	r3, [r7, #8]
	if(config->callback == NULL) return NOK;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d101      	bne.n	800919e <readValidation+0x20>
 800919a:	2300      	movs	r3, #0
 800919c:	e00f      	b.n	80091be <readValidation+0x40>
	if(data == NULL) return NOK;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d101      	bne.n	80091a8 <readValidation+0x2a>
 80091a4:	2300      	movs	r3, #0
 80091a6:	e00a      	b.n	80091be <readValidation+0x40>
	if((startAddr + dataSize) > config->maxAddress) return NOK;
 80091a8:	897a      	ldrh	r2, [r7, #10]
 80091aa:	893b      	ldrh	r3, [r7, #8]
 80091ac:	4413      	add	r3, r2
 80091ae:	461a      	mov	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d901      	bls.n	80091bc <readValidation+0x3e>
 80091b8:	2300      	movs	r3, #0
 80091ba:	e000      	b.n	80091be <readValidation+0x40>
	else return OK;
 80091bc:	2301      	movs	r3, #1
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3714      	adds	r7, #20
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <callbackError>:

static inline void callbackError(uint8_t type){
 80091ca:	b480      	push	{r7}
 80091cc:	b083      	sub	sp, #12
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	4603      	mov	r3, r0
 80091d2:	71fb      	strb	r3, [r7, #7]
	//TODO: Do something with the error
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <isSimilarToLast>:
	message->origin = 0;
	message->value = 0;
	message->ctx = 0;
}

static inline uint8_t isSimilarToLast(msg_Message *message, msg_Buffer *buf){
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
	char type;
	uint16_t idx;
	if(RINGBUFFER_isEmpty(&buf->buffer)) return 0;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 fa16 	bl	800961e <RINGBUFFER_isEmpty>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <isSimilarToLast+0x1c>
 80091f8:	2300      	movs	r3, #0
 80091fa:	e039      	b.n	8009270 <isSimilarToLast+0x90>
	uint16_t lastTmp = buf->lastMsg;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	899b      	ldrh	r3, [r3, #12]
 8009200:	81fb      	strh	r3, [r7, #14]
	type = buf->buffer.data[lastTmp];
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	689a      	ldr	r2, [r3, #8]
 8009206:	89fb      	ldrh	r3, [r7, #14]
 8009208:	4413      	add	r3, r2
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	737b      	strb	r3, [r7, #13]
	if(++lastTmp >= buf->buffer.size) lastTmp = 0;
 800920e:	89fb      	ldrh	r3, [r7, #14]
 8009210:	3301      	adds	r3, #1
 8009212:	81fb      	strh	r3, [r7, #14]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	889b      	ldrh	r3, [r3, #4]
 8009218:	89fa      	ldrh	r2, [r7, #14]
 800921a:	429a      	cmp	r2, r3
 800921c:	d301      	bcc.n	8009222 <isSimilarToLast+0x42>
 800921e:	2300      	movs	r3, #0
 8009220:	81fb      	strh	r3, [r7, #14]
	idx = (buf->buffer.data[lastTmp] << 8) & 0xFF00;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	689a      	ldr	r2, [r3, #8]
 8009226:	89fb      	ldrh	r3, [r7, #14]
 8009228:	4413      	add	r3, r2
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	021b      	lsls	r3, r3, #8
 800922e:	817b      	strh	r3, [r7, #10]
	if(++lastTmp >= buf->buffer.size) lastTmp = 0;
 8009230:	89fb      	ldrh	r3, [r7, #14]
 8009232:	3301      	adds	r3, #1
 8009234:	81fb      	strh	r3, [r7, #14]
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	889b      	ldrh	r3, [r3, #4]
 800923a:	89fa      	ldrh	r2, [r7, #14]
 800923c:	429a      	cmp	r2, r3
 800923e:	d301      	bcc.n	8009244 <isSimilarToLast+0x64>
 8009240:	2300      	movs	r3, #0
 8009242:	81fb      	strh	r3, [r7, #14]
	idx |= (buf->buffer.data[lastTmp] << 0) & 0xFF;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	689a      	ldr	r2, [r3, #8]
 8009248:	89fb      	ldrh	r3, [r7, #14]
 800924a:	4413      	add	r3, r2
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	b29a      	uxth	r2, r3
 8009250:	897b      	ldrh	r3, [r7, #10]
 8009252:	4313      	orrs	r3, r2
 8009254:	817b      	strh	r3, [r7, #10]
	if((type == message->type) && (idx == message->index)) return 1;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	791b      	ldrb	r3, [r3, #4]
 800925a:	7b7a      	ldrb	r2, [r7, #13]
 800925c:	429a      	cmp	r2, r3
 800925e:	d106      	bne.n	800926e <isSimilarToLast+0x8e>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	881b      	ldrh	r3, [r3, #0]
 8009264:	897a      	ldrh	r2, [r7, #10]
 8009266:	429a      	cmp	r2, r3
 8009268:	d101      	bne.n	800926e <isSimilarToLast+0x8e>
 800926a:	2301      	movs	r3, #1
 800926c:	e000      	b.n	8009270 <isSimilarToLast+0x90>
	else return 0;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <writeMsg>:

static inline uint8_t writeMsg(msg_Message *message, msg_Buffer *buf){
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
	uint8_t bufferState =  ringbuffer_NO_BUF;
 8009282:	2300      	movs	r3, #0
 8009284:	73fb      	strb	r3, [r7, #15]
	uint8_t isSimilarActive = 0;
 8009286:	2300      	movs	r3, #0
 8009288:	73bb      	strb	r3, [r7, #14]
	uint16_t nextMsgTmp = buf->buffer.in;
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	881b      	ldrh	r3, [r3, #0]
 800928e:	81bb      	strh	r3, [r7, #12]
	if(message != NULL){
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d064      	beq.n	8009360 <writeMsg+0xe8>
		if(isSimilarToLast(message, buf)){
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7ff ffa1 	bl	80091e0 <isSimilarToLast>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d005      	beq.n	80092b0 <writeMsg+0x38>
			buf->buffer.in = buf->lastMsg;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	899a      	ldrh	r2, [r3, #12]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	801a      	strh	r2, [r3, #0]
			isSimilarActive = 1;
 80092ac:	2301      	movs	r3, #1
 80092ae:	73bb      	strb	r3, [r7, #14]
		}
		bufferState = RINGBUFFER_cIn(message->type, &buf->buffer);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	791b      	ldrb	r3, [r3, #4]
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	4611      	mov	r1, r2
 80092b8:	4618      	mov	r0, r3
 80092ba:	f000 f942 	bl	8009542 <RINGBUFFER_cIn>
 80092be:	4603      	mov	r3, r0
 80092c0:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->index >> 8), &buf->buffer);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	881b      	ldrh	r3, [r3, #0]
 80092c6:	0a1b      	lsrs	r3, r3, #8
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	4611      	mov	r1, r2
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 f936 	bl	8009542 <RINGBUFFER_cIn>
 80092d6:	4603      	mov	r3, r0
 80092d8:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->index), &buf->buffer);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	4611      	mov	r1, r2
 80092e4:	4618      	mov	r0, r3
 80092e6:	f000 f92c 	bl	8009542 <RINGBUFFER_cIn>
 80092ea:	4603      	mov	r3, r0
 80092ec:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->value >> 8), &buf->buffer);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80092f4:	121b      	asrs	r3, r3, #8
 80092f6:	b21b      	sxth	r3, r3
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	4611      	mov	r1, r2
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 f91f 	bl	8009542 <RINGBUFFER_cIn>
 8009304:	4603      	mov	r3, r0
 8009306:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->value), &buf->buffer);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800930e:	b2db      	uxtb	r3, r3
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	4611      	mov	r1, r2
 8009314:	4618      	mov	r0, r3
 8009316:	f000 f914 	bl	8009542 <RINGBUFFER_cIn>
 800931a:	4603      	mov	r3, r0
 800931c:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->ctx >> 8), &buf->buffer);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009324:	121b      	asrs	r3, r3, #8
 8009326:	b21b      	sxth	r3, r3
 8009328:	b2db      	uxtb	r3, r3
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	4611      	mov	r1, r2
 800932e:	4618      	mov	r0, r3
 8009330:	f000 f907 	bl	8009542 <RINGBUFFER_cIn>
 8009334:	4603      	mov	r3, r0
 8009336:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->ctx), &buf->buffer);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800933e:	b2db      	uxtb	r3, r3
 8009340:	683a      	ldr	r2, [r7, #0]
 8009342:	4611      	mov	r1, r2
 8009344:	4618      	mov	r0, r3
 8009346:	f000 f8fc 	bl	8009542 <RINGBUFFER_cIn>
 800934a:	4603      	mov	r3, r0
 800934c:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn(message->origin, &buf->buffer);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	795b      	ldrb	r3, [r3, #5]
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	4611      	mov	r1, r2
 8009356:	4618      	mov	r0, r3
 8009358:	f000 f8f3 	bl	8009542 <RINGBUFFER_cIn>
 800935c:	4603      	mov	r3, r0
 800935e:	73fb      	strb	r3, [r7, #15]
	}
	if(bufferState ==  ringbuffer_FULL) buf->buffer.in = nextMsgTmp;
 8009360:	7bfb      	ldrb	r3, [r7, #15]
 8009362:	2b03      	cmp	r3, #3
 8009364:	d103      	bne.n	800936e <writeMsg+0xf6>
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	89ba      	ldrh	r2, [r7, #12]
 800936a:	801a      	strh	r2, [r3, #0]
 800936c:	e005      	b.n	800937a <writeMsg+0x102>
	else if(!isSimilarActive) buf->lastMsg = nextMsgTmp;
 800936e:	7bbb      	ldrb	r3, [r7, #14]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d102      	bne.n	800937a <writeMsg+0x102>
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	89ba      	ldrh	r2, [r7, #12]
 8009378:	819a      	strh	r2, [r3, #12]
	return bufferState;
 800937a:	7bfb      	ldrb	r3, [r7, #15]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <msg_writeEvent>:
	msgBuffer.out = 0;
	msgBuffer.size = size;
	msgBuffer.data = pData;
}

uint8_t msg_writeEvent(msg_Message *message, msg_Buffer *buf){
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
	message->index = CAST_MSG_TO_EVENT(message->index);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	881b      	ldrh	r3, [r3, #0]
 8009392:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009396:	b29a      	uxth	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	801a      	strh	r2, [r3, #0]
	uint8_t bufferState = writeMsg(message, buf);
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7ff ff6a 	bl	8009278 <writeMsg>
 80093a4:	4603      	mov	r3, r0
 80093a6:	73fb      	strb	r3, [r7, #15]
	return bufferState;
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <msg_writeAction>:

uint8_t msg_writeAction(msg_Message *message, msg_Buffer *buf){
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b084      	sub	sp, #16
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	6039      	str	r1, [r7, #0]
	message->index = CAST_MSG_TO_ACTION(message->index);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	881b      	ldrh	r3, [r3, #0]
 80093c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	801a      	strh	r2, [r3, #0]
	uint8_t bufferState = writeMsg(message, buf);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f7ff ff51 	bl	8009278 <writeMsg>
 80093d6:	4603      	mov	r3, r0
 80093d8:	73fb      	strb	r3, [r7, #15]
	return bufferState;
 80093da:	7bfb      	ldrb	r3, [r7, #15]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <msg_getNext>:

msg_Message *msg_getNext(msg_Message *message, msg_Buffer *buf){
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
	uint8_t bufferState =  ringbuffer_OK;
 80093ee:	2301      	movs	r3, #1
 80093f0:	73fb      	strb	r3, [r7, #15]
	char tmp = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	73bb      	strb	r3, [r7, #14]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	f107 030e 	add.w	r3, r7, #14
 80093fc:	4611      	mov	r1, r2
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 f8dc 	bl	80095bc <RINGBUFFER_cOut>
 8009404:	4603      	mov	r3, r0
 8009406:	73fb      	strb	r3, [r7, #15]
	message->type = tmp;
 8009408:	7bba      	ldrb	r2, [r7, #14]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	711a      	strb	r2, [r3, #4]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	f107 030e 	add.w	r3, r7, #14
 8009414:	4611      	mov	r1, r2
 8009416:	4618      	mov	r0, r3
 8009418:	f000 f8d0 	bl	80095bc <RINGBUFFER_cOut>
 800941c:	4603      	mov	r3, r0
 800941e:	73fb      	strb	r3, [r7, #15]
	message->index |= (uint16_t)((tmp & 0xFF) << 8);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	881a      	ldrh	r2, [r3, #0]
 8009424:	7bbb      	ldrb	r3, [r7, #14]
 8009426:	b29b      	uxth	r3, r3
 8009428:	021b      	lsls	r3, r3, #8
 800942a:	b29b      	uxth	r3, r3
 800942c:	4313      	orrs	r3, r2
 800942e:	b29a      	uxth	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	801a      	strh	r2, [r3, #0]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8009434:	683a      	ldr	r2, [r7, #0]
 8009436:	f107 030e 	add.w	r3, r7, #14
 800943a:	4611      	mov	r1, r2
 800943c:	4618      	mov	r0, r3
 800943e:	f000 f8bd 	bl	80095bc <RINGBUFFER_cOut>
 8009442:	4603      	mov	r3, r0
 8009444:	73fb      	strb	r3, [r7, #15]
	message->index |= (uint16_t)(tmp & 0xFF);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	881a      	ldrh	r2, [r3, #0]
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	b29b      	uxth	r3, r3
 800944e:	4313      	orrs	r3, r2
 8009450:	b29a      	uxth	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	801a      	strh	r2, [r3, #0]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	f107 030e 	add.w	r3, r7, #14
 800945c:	4611      	mov	r1, r2
 800945e:	4618      	mov	r0, r3
 8009460:	f000 f8ac 	bl	80095bc <RINGBUFFER_cOut>
 8009464:	4603      	mov	r3, r0
 8009466:	73fb      	strb	r3, [r7, #15]
	message->value |= (uint16_t)((tmp & 0xFF) << 8);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800946e:	7bbb      	ldrb	r3, [r7, #14]
 8009470:	b29b      	uxth	r3, r3
 8009472:	021b      	lsls	r3, r3, #8
 8009474:	b29b      	uxth	r3, r3
 8009476:	b21b      	sxth	r3, r3
 8009478:	4313      	orrs	r3, r2
 800947a:	b21a      	sxth	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	805a      	strh	r2, [r3, #2]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8009480:	683a      	ldr	r2, [r7, #0]
 8009482:	f107 030e 	add.w	r3, r7, #14
 8009486:	4611      	mov	r1, r2
 8009488:	4618      	mov	r0, r3
 800948a:	f000 f897 	bl	80095bc <RINGBUFFER_cOut>
 800948e:	4603      	mov	r3, r0
 8009490:	73fb      	strb	r3, [r7, #15]
	message->value |= (uint16_t)(tmp & 0xFF);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009498:	7bbb      	ldrb	r3, [r7, #14]
 800949a:	b21b      	sxth	r3, r3
 800949c:	4313      	orrs	r3, r2
 800949e:	b21a      	sxth	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	805a      	strh	r2, [r3, #2]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	f107 030e 	add.w	r3, r7, #14
 80094aa:	4611      	mov	r1, r2
 80094ac:	4618      	mov	r0, r3
 80094ae:	f000 f885 	bl	80095bc <RINGBUFFER_cOut>
 80094b2:	4603      	mov	r3, r0
 80094b4:	73fb      	strb	r3, [r7, #15]
	message->ctx |= (uint16_t)((tmp & 0xFF) << 8);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80094bc:	7bbb      	ldrb	r3, [r7, #14]
 80094be:	b29b      	uxth	r3, r3
 80094c0:	021b      	lsls	r3, r3, #8
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	b21b      	sxth	r3, r3
 80094c6:	4313      	orrs	r3, r2
 80094c8:	b21a      	sxth	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	80da      	strh	r2, [r3, #6]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	f107 030e 	add.w	r3, r7, #14
 80094d4:	4611      	mov	r1, r2
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 f870 	bl	80095bc <RINGBUFFER_cOut>
 80094dc:	4603      	mov	r3, r0
 80094de:	73fb      	strb	r3, [r7, #15]
	message->ctx |= (uint16_t)(tmp & 0xFF);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	b21b      	sxth	r3, r3
 80094ea:	4313      	orrs	r3, r2
 80094ec:	b21a      	sxth	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	80da      	strh	r2, [r3, #6]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	f107 030e 	add.w	r3, r7, #14
 80094f8:	4611      	mov	r1, r2
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 f85e 	bl	80095bc <RINGBUFFER_cOut>
 8009500:	4603      	mov	r3, r0
 8009502:	73fb      	strb	r3, [r7, #15]
	message->origin = tmp;
 8009504:	7bba      	ldrb	r2, [r7, #14]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	715a      	strb	r2, [r3, #5]
	if(bufferState ==  ringbuffer_OK)return message;
 800950a:	7bfb      	ldrb	r3, [r7, #15]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d101      	bne.n	8009514 <msg_getNext+0x130>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	e000      	b.n	8009516 <msg_getNext+0x132>
	else return NULL;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <msg_isAction>:

uint8_t msg_isAction(msg_Message *message){
 800951e:	b480      	push	{r7}
 8009520:	b083      	sub	sp, #12
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
	if((message->index & ACTION_MSK) == ACTION_MSK) return TRUE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	881b      	ldrh	r3, [r3, #0]
 800952a:	b21b      	sxth	r3, r3
 800952c:	2b00      	cmp	r3, #0
 800952e:	da01      	bge.n	8009534 <msg_isAction+0x16>
 8009530:	2301      	movs	r3, #1
 8009532:	e000      	b.n	8009536 <msg_isAction+0x18>
	else return FALSE;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <RINGBUFFER_cIn>:
 *  Created on: 15.01.2018
 *      Author: sawadee
 */
#include "ringbuffer.h"

uint8_t RINGBUFFER_cIn(char data, stRingBuf *pBuf){
 8009542:	b480      	push	{r7}
 8009544:	b083      	sub	sp, #12
 8009546:	af00      	add	r7, sp, #0
 8009548:	4603      	mov	r3, r0
 800954a:	6039      	str	r1, [r7, #0]
 800954c:	71fb      	strb	r3, [r7, #7]
	if(pBuf->data != NULL){
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d02b      	beq.n	80095ae <RINGBUFFER_cIn+0x6c>
		if ( ( pBuf->in + 1 == pBuf->out ) || ( pBuf->out == 0 && pBuf->in + 1 == pBuf->size ) ) return ringbuffer_FULL;
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	3301      	adds	r3, #1
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	8852      	ldrh	r2, [r2, #2]
 8009560:	4293      	cmp	r3, r2
 8009562:	d00a      	beq.n	800957a <RINGBUFFER_cIn+0x38>
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	885b      	ldrh	r3, [r3, #2]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d108      	bne.n	800957e <RINGBUFFER_cIn+0x3c>
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	3301      	adds	r3, #1
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	8892      	ldrh	r2, [r2, #4]
 8009576:	4293      	cmp	r3, r2
 8009578:	d101      	bne.n	800957e <RINGBUFFER_cIn+0x3c>
 800957a:	2303      	movs	r3, #3
 800957c:	e018      	b.n	80095b0 <RINGBUFFER_cIn+0x6e>
		pBuf->data[pBuf->in] = data;
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	8812      	ldrh	r2, [r2, #0]
 8009586:	4413      	add	r3, r2
 8009588:	79fa      	ldrb	r2, [r7, #7]
 800958a:	701a      	strb	r2, [r3, #0]
		pBuf->in++;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	881b      	ldrh	r3, [r3, #0]
 8009590:	3301      	adds	r3, #1
 8009592:	b29a      	uxth	r2, r3
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	801a      	strh	r2, [r3, #0]
		if (pBuf->in >= pBuf->size) pBuf->in = 0;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	881a      	ldrh	r2, [r3, #0]
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	889b      	ldrh	r3, [r3, #4]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d302      	bcc.n	80095aa <RINGBUFFER_cIn+0x68>
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	2200      	movs	r2, #0
 80095a8:	801a      	strh	r2, [r3, #0]
		return ringbuffer_OK;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e000      	b.n	80095b0 <RINGBUFFER_cIn+0x6e>
	}else return ringbuffer_NO_BUF;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <RINGBUFFER_cOut>:
uint8_t RINGBUFFER_cOut(char *pData, stRingBuf *pBuf){
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
	if(pBuf->data != NULL){
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d020      	beq.n	8009610 <RINGBUFFER_cOut+0x54>
		if (pBuf->out == pBuf->in) return ringbuffer_EMPTY;
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	885a      	ldrh	r2, [r3, #2]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	881b      	ldrh	r3, [r3, #0]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d101      	bne.n	80095de <RINGBUFFER_cOut+0x22>
 80095da:	2302      	movs	r3, #2
 80095dc:	e019      	b.n	8009612 <RINGBUFFER_cOut+0x56>
		*pData = pBuf->data[pBuf->out];
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	8852      	ldrh	r2, [r2, #2]
 80095e6:	4413      	add	r3, r2
 80095e8:	781a      	ldrb	r2, [r3, #0]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	701a      	strb	r2, [r3, #0]
		pBuf->out++;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	885b      	ldrh	r3, [r3, #2]
 80095f2:	3301      	adds	r3, #1
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	805a      	strh	r2, [r3, #2]
		if (pBuf->out >= pBuf->size)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	885a      	ldrh	r2, [r3, #2]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	889b      	ldrh	r3, [r3, #4]
 8009602:	429a      	cmp	r2, r3
 8009604:	d302      	bcc.n	800960c <RINGBUFFER_cOut+0x50>
		  pBuf->out = 0;
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2200      	movs	r2, #0
 800960a:	805a      	strh	r2, [r3, #2]
		return ringbuffer_OK;
 800960c:	2301      	movs	r3, #1
 800960e:	e000      	b.n	8009612 <RINGBUFFER_cOut+0x56>
	}else return ringbuffer_NO_BUF;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <RINGBUFFER_isEmpty>:

uint8_t RINGBUFFER_isEmpty(stRingBuf *pBuf){
 800961e:	b480      	push	{r7}
 8009620:	b083      	sub	sp, #12
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
	if(pBuf->out == pBuf->in) return 1;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	885a      	ldrh	r2, [r3, #2]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	881b      	ldrh	r3, [r3, #0]
 800962e:	429a      	cmp	r2, r3
 8009630:	d101      	bne.n	8009636 <RINGBUFFER_isEmpty+0x18>
 8009632:	2301      	movs	r3, #1
 8009634:	e000      	b.n	8009638 <RINGBUFFER_isEmpty+0x1a>
	else return 0;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	460b      	mov	r3, r1
 800964e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009650:	2300      	movs	r3, #0
 8009652:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	7c1b      	ldrb	r3, [r3, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d115      	bne.n	8009688 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800965c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009660:	2202      	movs	r2, #2
 8009662:	2181      	movs	r1, #129	; 0x81
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f002 fcfd 	bl	800c064 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2201      	movs	r2, #1
 800966e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009674:	2202      	movs	r2, #2
 8009676:	2101      	movs	r1, #1
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f002 fcf3 	bl	800c064 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8009686:	e012      	b.n	80096ae <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009688:	2340      	movs	r3, #64	; 0x40
 800968a:	2202      	movs	r2, #2
 800968c:	2181      	movs	r1, #129	; 0x81
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f002 fce8 	bl	800c064 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800969a:	2340      	movs	r3, #64	; 0x40
 800969c:	2202      	movs	r2, #2
 800969e:	2101      	movs	r1, #1
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f002 fcdf 	bl	800c064 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80096ae:	2308      	movs	r3, #8
 80096b0:	2203      	movs	r2, #3
 80096b2:	2182      	movs	r1, #130	; 0x82
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f002 fcd5 	bl	800c064 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2201      	movs	r2, #1
 80096be:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80096c0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80096c4:	f002 fec8 	bl	800c458 <USBD_static_malloc>
 80096c8:	4602      	mov	r2, r0
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d102      	bne.n	80096e0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80096da:	2301      	movs	r3, #1
 80096dc:	73fb      	strb	r3, [r7, #15]
 80096de:	e026      	b.n	800972e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80096e6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	7c1b      	ldrb	r3, [r3, #16]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d109      	bne.n	800971e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009714:	2101      	movs	r1, #1
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f002 fe1a 	bl	800c350 <USBD_LL_PrepareReceive>
 800971c:	e007      	b.n	800972e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009724:	2340      	movs	r3, #64	; 0x40
 8009726:	2101      	movs	r1, #1
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f002 fe11 	bl	800c350 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800972e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009730:	4618      	mov	r0, r3
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	460b      	mov	r3, r1
 8009742:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009744:	2300      	movs	r3, #0
 8009746:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009748:	2181      	movs	r1, #129	; 0x81
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f002 fcc8 	bl	800c0e0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009756:	2101      	movs	r1, #1
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f002 fcc1 	bl	800c0e0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009766:	2182      	movs	r1, #130	; 0x82
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f002 fcb9 	bl	800c0e0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00e      	beq.n	800979c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800978e:	4618      	mov	r0, r3
 8009790:	f002 fe70 	bl	800c474 <USBD_static_free>
    pdev->pClassData = NULL;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800979c:	7bfb      	ldrb	r3, [r7, #15]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b086      	sub	sp, #24
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80097b6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80097b8:	2300      	movs	r3, #0
 80097ba:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80097bc:	2300      	movs	r3, #0
 80097be:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d039      	beq.n	8009844 <USBD_CDC_Setup+0x9e>
 80097d0:	2b20      	cmp	r3, #32
 80097d2:	d17c      	bne.n	80098ce <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	88db      	ldrh	r3, [r3, #6]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d029      	beq.n	8009830 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	b25b      	sxtb	r3, r3
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	da11      	bge.n	800980a <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80097f2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80097f4:	683a      	ldr	r2, [r7, #0]
 80097f6:	88d2      	ldrh	r2, [r2, #6]
 80097f8:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80097fa:	6939      	ldr	r1, [r7, #16]
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	88db      	ldrh	r3, [r3, #6]
 8009800:	461a      	mov	r2, r3
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f001 f9a2 	bl	800ab4c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8009808:	e068      	b.n	80098dc <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	785a      	ldrb	r2, [r3, #1]
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	88db      	ldrh	r3, [r3, #6]
 8009818:	b2da      	uxtb	r2, r3
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009820:	6939      	ldr	r1, [r7, #16]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	88db      	ldrh	r3, [r3, #6]
 8009826:	461a      	mov	r2, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f001 f9bd 	bl	800aba8 <USBD_CtlPrepareRx>
    break;
 800982e:	e055      	b.n	80098dc <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	7850      	ldrb	r0, [r2, #1]
 800983c:	2200      	movs	r2, #0
 800983e:	6839      	ldr	r1, [r7, #0]
 8009840:	4798      	blx	r3
    break;
 8009842:	e04b      	b.n	80098dc <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	785b      	ldrb	r3, [r3, #1]
 8009848:	2b0a      	cmp	r3, #10
 800984a:	d017      	beq.n	800987c <USBD_CDC_Setup+0xd6>
 800984c:	2b0b      	cmp	r3, #11
 800984e:	d029      	beq.n	80098a4 <USBD_CDC_Setup+0xfe>
 8009850:	2b00      	cmp	r3, #0
 8009852:	d133      	bne.n	80098bc <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800985a:	2b03      	cmp	r3, #3
 800985c:	d107      	bne.n	800986e <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800985e:	f107 030c 	add.w	r3, r7, #12
 8009862:	2202      	movs	r2, #2
 8009864:	4619      	mov	r1, r3
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f001 f970 	bl	800ab4c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800986c:	e02e      	b.n	80098cc <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800986e:	6839      	ldr	r1, [r7, #0]
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f001 f900 	bl	800aa76 <USBD_CtlError>
			  ret = USBD_FAIL;
 8009876:	2302      	movs	r3, #2
 8009878:	75fb      	strb	r3, [r7, #23]
      break;
 800987a:	e027      	b.n	80098cc <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009882:	2b03      	cmp	r3, #3
 8009884:	d107      	bne.n	8009896 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8009886:	f107 030f 	add.w	r3, r7, #15
 800988a:	2201      	movs	r2, #1
 800988c:	4619      	mov	r1, r3
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f001 f95c 	bl	800ab4c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8009894:	e01a      	b.n	80098cc <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f001 f8ec 	bl	800aa76 <USBD_CtlError>
			  ret = USBD_FAIL;
 800989e:	2302      	movs	r3, #2
 80098a0:	75fb      	strb	r3, [r7, #23]
      break;
 80098a2:	e013      	b.n	80098cc <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80098aa:	2b03      	cmp	r3, #3
 80098ac:	d00d      	beq.n	80098ca <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f001 f8e0 	bl	800aa76 <USBD_CtlError>
			  ret = USBD_FAIL;
 80098b6:	2302      	movs	r3, #2
 80098b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80098ba:	e006      	b.n	80098ca <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f001 f8d9 	bl	800aa76 <USBD_CtlError>
      ret = USBD_FAIL;
 80098c4:	2302      	movs	r3, #2
 80098c6:	75fb      	strb	r3, [r7, #23]
      break;
 80098c8:	e000      	b.n	80098cc <USBD_CDC_Setup+0x126>
      break;
 80098ca:	bf00      	nop
    }
    break;
 80098cc:	e006      	b.n	80098dc <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80098ce:	6839      	ldr	r1, [r7, #0]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f001 f8d0 	bl	800aa76 <USBD_CtlError>
    ret = USBD_FAIL;
 80098d6:	2302      	movs	r3, #2
 80098d8:	75fb      	strb	r3, [r7, #23]
    break;
 80098da:	bf00      	nop
  }

  return ret;
 80098dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3718      	adds	r7, #24
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b084      	sub	sp, #16
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	460b      	mov	r3, r1
 80098f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80098f8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009900:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009908:	2b00      	cmp	r3, #0
 800990a:	d037      	beq.n	800997c <USBD_CDC_DataIn+0x96>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800990c:	78fa      	ldrb	r2, [r7, #3]
 800990e:	6879      	ldr	r1, [r7, #4]
 8009910:	4613      	mov	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	440b      	add	r3, r1
 800991a:	331c      	adds	r3, #28
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d026      	beq.n	8009970 <USBD_CDC_DataIn+0x8a>
 8009922:	78fa      	ldrb	r2, [r7, #3]
 8009924:	6879      	ldr	r1, [r7, #4]
 8009926:	4613      	mov	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	4413      	add	r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	440b      	add	r3, r1
 8009930:	331c      	adds	r3, #28
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	78fa      	ldrb	r2, [r7, #3]
 8009936:	68b9      	ldr	r1, [r7, #8]
 8009938:	0152      	lsls	r2, r2, #5
 800993a:	440a      	add	r2, r1
 800993c:	3238      	adds	r2, #56	; 0x38
 800993e:	6812      	ldr	r2, [r2, #0]
 8009940:	fbb3 f1f2 	udiv	r1, r3, r2
 8009944:	fb02 f201 	mul.w	r2, r2, r1
 8009948:	1a9b      	subs	r3, r3, r2
 800994a:	2b00      	cmp	r3, #0
 800994c:	d110      	bne.n	8009970 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800994e:	78fa      	ldrb	r2, [r7, #3]
 8009950:	6879      	ldr	r1, [r7, #4]
 8009952:	4613      	mov	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	440b      	add	r3, r1
 800995c:	331c      	adds	r3, #28
 800995e:	2200      	movs	r2, #0
 8009960:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8009962:	78f9      	ldrb	r1, [r7, #3]
 8009964:	2300      	movs	r3, #0
 8009966:	2200      	movs	r2, #0
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f002 fcb7 	bl	800c2dc <USBD_LL_Transmit>
 800996e:	e003      	b.n	8009978 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	e000      	b.n	800997e <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 800997c:	2302      	movs	r3, #2
  }
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b084      	sub	sp, #16
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	460b      	mov	r3, r1
 8009990:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009998:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800999a:	78fb      	ldrb	r3, [r7, #3]
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f002 fd10 	bl	800c3c4 <USBD_LL_GetRxDataSize>
 80099a4:	4602      	mov	r2, r0
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00d      	beq.n	80099d2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80099ca:	4611      	mov	r1, r2
 80099cc:	4798      	blx	r3

    return USBD_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	e000      	b.n	80099d4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80099d2:	2302      	movs	r3, #2
  }
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80099ea:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d015      	beq.n	8009a22 <USBD_CDC_EP0_RxReady+0x46>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80099fc:	2bff      	cmp	r3, #255	; 0xff
 80099fe:	d010      	beq.n	8009a22 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009a0e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009a16:	b292      	uxth	r2, r2
 8009a18:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	22ff      	movs	r2, #255	; 0xff
 8009a1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2243      	movs	r2, #67	; 0x43
 8009a38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009a3a:	4b03      	ldr	r3, [pc, #12]	; (8009a48 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr
 8009a48:	200011f4 	.word	0x200011f4

08009a4c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2243      	movs	r2, #67	; 0x43
 8009a58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009a5a:	4b03      	ldr	r3, [pc, #12]	; (8009a68 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	200011b0 	.word	0x200011b0

08009a6c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2243      	movs	r2, #67	; 0x43
 8009a78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009a7a:	4b03      	ldr	r3, [pc, #12]	; (8009a88 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr
 8009a88:	20001238 	.word	0x20001238

08009a8c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	220a      	movs	r2, #10
 8009a98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009a9a:	4b03      	ldr	r3, [pc, #12]	; (8009aa8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	2000116c 	.word	0x2000116c

08009aac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d005      	beq.n	8009acc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	683a      	ldr	r2, [r7, #0]
 8009ac4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8009ada:	b480      	push	{r7}
 8009adc:	b087      	sub	sp, #28
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	60f8      	str	r0, [r7, #12]
 8009ae2:	60b9      	str	r1, [r7, #8]
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009aee:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	68ba      	ldr	r2, [r7, #8]
 8009af4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009af8:	88fa      	ldrh	r2, [r7, #6]
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	371c      	adds	r7, #28
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr

08009b0e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8009b0e:	b480      	push	{r7}
 8009b10:	b085      	sub	sp, #20
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
 8009b16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009b1e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3714      	adds	r7, #20
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b084      	sub	sp, #16
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009b44:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d01c      	beq.n	8009b8a <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d115      	bne.n	8009b86 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	2181      	movs	r1, #129	; 0x81
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f002 fbad 	bl	800c2dc <USBD_LL_Transmit>

      return USBD_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	e002      	b.n	8009b8c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e000      	b.n	8009b8c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009b8a:	2302      	movs	r3, #2
  }
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009ba2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d017      	beq.n	8009bde <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	7c1b      	ldrb	r3, [r3, #16]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d109      	bne.n	8009bca <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f002 fbc4 	bl	800c350 <USBD_LL_PrepareReceive>
 8009bc8:	e007      	b.n	8009bda <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009bd0:	2340      	movs	r3, #64	; 0x40
 8009bd2:	2101      	movs	r1, #1
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f002 fbbb 	bl	800c350 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	e000      	b.n	8009be0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009bde:	2302      	movs	r3, #2
  }
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	e01a      	b.n	8009c36 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d003      	beq.n	8009c12 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d003      	beq.n	8009c20 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	79fa      	ldrb	r2, [r7, #7]
 8009c2c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f002 f982 	bl	800bf38 <USBD_LL_Init>

  return USBD_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b085      	sub	sp, #20
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d006      	beq.n	8009c60 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	73fb      	strb	r3, [r7, #15]
 8009c5e:	e001      	b.n	8009c64 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009c60:	2302      	movs	r3, #2
 8009c62:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3714      	adds	r7, #20
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr

08009c72 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b082      	sub	sp, #8
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f002 f9c0 	bl	800c000 <USBD_LL_Start>

  return USBD_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8009c8a:	b480      	push	{r7}
 8009c8c:	b083      	sub	sp, #12
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8009cac:	2302      	movs	r3, #2
 8009cae:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00c      	beq.n	8009cd4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	78fa      	ldrb	r2, [r7, #3]
 8009cc4:	4611      	mov	r1, r2
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	4798      	blx	r3
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d101      	bne.n	8009cd4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b082      	sub	sp, #8
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	78fa      	ldrb	r2, [r7, #3]
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	4798      	blx	r3
  return USBD_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 fe70 	bl	800a9fc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8009d38:	f003 031f 	and.w	r3, r3, #31
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d00c      	beq.n	8009d5a <USBD_LL_SetupStage+0x56>
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d302      	bcc.n	8009d4a <USBD_LL_SetupStage+0x46>
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	d010      	beq.n	8009d6a <USBD_LL_SetupStage+0x66>
 8009d48:	e017      	b.n	8009d7a <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009d50:	4619      	mov	r1, r3
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f9c4 	bl	800a0e0 <USBD_StdDevReq>
    break;
 8009d58:	e01a      	b.n	8009d90 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fa26 	bl	800a1b4 <USBD_StdItfReq>
    break;
 8009d68:	e012      	b.n	8009d90 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009d70:	4619      	mov	r1, r3
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fa64 	bl	800a240 <USBD_StdEPReq>
    break;
 8009d78:	e00a      	b.n	8009d90 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8009d80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	4619      	mov	r1, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f002 f9df 	bl	800c14c <USBD_LL_StallEP>
    break;
 8009d8e:	bf00      	nop
  }

  return USBD_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b086      	sub	sp, #24
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	60f8      	str	r0, [r7, #12]
 8009da2:	460b      	mov	r3, r1
 8009da4:	607a      	str	r2, [r7, #4]
 8009da6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8009da8:	7afb      	ldrb	r3, [r7, #11]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d147      	bne.n	8009e3e <USBD_LL_DataOutStage+0xa4>
  {
    pep = &pdev->ep_out[0];
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009db4:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009dbc:	2b03      	cmp	r3, #3
 8009dbe:	d134      	bne.n	8009e2a <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	68da      	ldr	r2, [r3, #12]
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d919      	bls.n	8009e00 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	68da      	ldr	r2, [r3, #12]
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	1ad2      	subs	r2, r2, r3
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	68da      	ldr	r2, [r3, #12]
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d203      	bcs.n	8009dee <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	e002      	b.n	8009df4 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	461a      	mov	r2, r3
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 fef3 	bl	800abe4 <USBD_CtlContinueRx>
 8009dfe:	e034      	b.n	8009e6a <USBD_LL_DataOutStage+0xd0>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00a      	beq.n	8009e22 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	d105      	bne.n	8009e22 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f000 fef0 	bl	800ac08 <USBD_CtlSendStatus>
 8009e28:	e01f      	b.n	8009e6a <USBD_LL_DataOutStage+0xd0>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009e30:	2b05      	cmp	r3, #5
 8009e32:	d11a      	bne.n	8009e6a <USBD_LL_DataOutStage+0xd0>
      {
        USBD_LL_StallEP(pdev, 0U);
 8009e34:	2100      	movs	r1, #0
 8009e36:	68f8      	ldr	r0, [r7, #12]
 8009e38:	f002 f988 	bl	800c14c <USBD_LL_StallEP>
 8009e3c:	e015      	b.n	8009e6a <USBD_LL_DataOutStage+0xd0>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009e44:	699b      	ldr	r3, [r3, #24]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00d      	beq.n	8009e66 <USBD_LL_DataOutStage+0xcc>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8009e50:	2b03      	cmp	r3, #3
 8009e52:	d108      	bne.n	8009e66 <USBD_LL_DataOutStage+0xcc>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009e5a:	699b      	ldr	r3, [r3, #24]
 8009e5c:	7afa      	ldrb	r2, [r7, #11]
 8009e5e:	4611      	mov	r1, r2
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	4798      	blx	r3
 8009e64:	e001      	b.n	8009e6a <USBD_LL_DataOutStage+0xd0>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009e66:	2302      	movs	r3, #2
 8009e68:	e000      	b.n	8009e6c <USBD_LL_DataOutStage+0xd2>
  }

  return USBD_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3718      	adds	r7, #24
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	607a      	str	r2, [r7, #4]
 8009e80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8009e82:	7afb      	ldrb	r3, [r7, #11]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d17f      	bne.n	8009f88 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	3314      	adds	r3, #20
 8009e8c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d15c      	bne.n	8009f52 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	68da      	ldr	r2, [r3, #12]
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d915      	bls.n	8009ed0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	68da      	ldr	r2, [r3, #12]
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	1ad2      	subs	r2, r2, r3
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	461a      	mov	r2, r3
 8009eba:	6879      	ldr	r1, [r7, #4]
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	f000 fe61 	bl	800ab84 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f002 fa41 	bl	800c350 <USBD_LL_PrepareReceive>
 8009ece:	e04e      	b.n	8009f6e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	697a      	ldr	r2, [r7, #20]
 8009ed6:	6912      	ldr	r2, [r2, #16]
 8009ed8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009edc:	fb02 f201 	mul.w	r2, r2, r1
 8009ee0:	1a9b      	subs	r3, r3, r2
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d11c      	bne.n	8009f20 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	689a      	ldr	r2, [r3, #8]
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d316      	bcc.n	8009f20 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	689a      	ldr	r2, [r3, #8]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d20f      	bcs.n	8009f20 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009f00:	2200      	movs	r2, #0
 8009f02:	2100      	movs	r1, #0
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f000 fe3d 	bl	800ab84 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009f12:	2300      	movs	r3, #0
 8009f14:	2200      	movs	r2, #0
 8009f16:	2100      	movs	r1, #0
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f002 fa19 	bl	800c350 <USBD_LL_PrepareReceive>
 8009f1e:	e026      	b.n	8009f6e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d00a      	beq.n	8009f42 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8009f32:	2b03      	cmp	r3, #3
 8009f34:	d105      	bne.n	8009f42 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009f42:	2180      	movs	r1, #128	; 0x80
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f002 f901 	bl	800c14c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f000 fe6f 	bl	800ac2e <USBD_CtlReceiveStatus>
 8009f50:	e00d      	b.n	8009f6e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009f58:	2b04      	cmp	r3, #4
 8009f5a:	d004      	beq.n	8009f66 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d103      	bne.n	8009f6e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009f66:	2180      	movs	r1, #128	; 0x80
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f002 f8ef 	bl	800c14c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d11d      	bne.n	8009fb4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f7ff fe86 	bl	8009c8a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8009f86:	e015      	b.n	8009fb4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009f8e:	695b      	ldr	r3, [r3, #20]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00d      	beq.n	8009fb0 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8009f9a:	2b03      	cmp	r3, #3
 8009f9c:	d108      	bne.n	8009fb0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009fa4:	695b      	ldr	r3, [r3, #20]
 8009fa6:	7afa      	ldrb	r2, [r7, #11]
 8009fa8:	4611      	mov	r1, r2
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	4798      	blx	r3
 8009fae:	e001      	b.n	8009fb4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	e000      	b.n	8009fb6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3718      	adds	r7, #24
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b082      	sub	sp, #8
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fc6:	2340      	movs	r3, #64	; 0x40
 8009fc8:	2200      	movs	r2, #0
 8009fca:	2100      	movs	r1, #0
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f002 f849 	bl	800c064 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2240      	movs	r2, #64	; 0x40
 8009fde:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fe2:	2340      	movs	r3, #64	; 0x40
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	2180      	movs	r1, #128	; 0x80
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f002 f83b 	bl	800c064 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2240      	movs	r2, #64	; 0x40
 8009ff8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d009      	beq.n	800a036 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	6852      	ldr	r2, [r2, #4]
 800a02e:	b2d2      	uxtb	r2, r2
 800a030:	4611      	mov	r1, r2
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	4798      	blx	r3
  }

  return USBD_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	78fa      	ldrb	r2, [r7, #3]
 800a050:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2204      	movs	r2, #4
 800a078:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b083      	sub	sp, #12
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a0ba:	2b03      	cmp	r3, #3
 800a0bc:	d10b      	bne.n	800a0d6 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a0c4:	69db      	ldr	r3, [r3, #28]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d005      	beq.n	800a0d6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a0d0:	69db      	ldr	r3, [r3, #28]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0f6:	2b20      	cmp	r3, #32
 800a0f8:	d004      	beq.n	800a104 <USBD_StdDevReq+0x24>
 800a0fa:	2b40      	cmp	r3, #64	; 0x40
 800a0fc:	d002      	beq.n	800a104 <USBD_StdDevReq+0x24>
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d008      	beq.n	800a114 <USBD_StdDevReq+0x34>
 800a102:	e04c      	b.n	800a19e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	6839      	ldr	r1, [r7, #0]
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	4798      	blx	r3
    break;
 800a112:	e049      	b.n	800a1a8 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	785b      	ldrb	r3, [r3, #1]
 800a118:	2b09      	cmp	r3, #9
 800a11a:	d83a      	bhi.n	800a192 <USBD_StdDevReq+0xb2>
 800a11c:	a201      	add	r2, pc, #4	; (adr r2, 800a124 <USBD_StdDevReq+0x44>)
 800a11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a122:	bf00      	nop
 800a124:	0800a175 	.word	0x0800a175
 800a128:	0800a189 	.word	0x0800a189
 800a12c:	0800a193 	.word	0x0800a193
 800a130:	0800a17f 	.word	0x0800a17f
 800a134:	0800a193 	.word	0x0800a193
 800a138:	0800a157 	.word	0x0800a157
 800a13c:	0800a14d 	.word	0x0800a14d
 800a140:	0800a193 	.word	0x0800a193
 800a144:	0800a16b 	.word	0x0800a16b
 800a148:	0800a161 	.word	0x0800a161
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800a14c:	6839      	ldr	r1, [r7, #0]
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f9d2 	bl	800a4f8 <USBD_GetDescriptor>
      break;
 800a154:	e022      	b.n	800a19c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800a156:	6839      	ldr	r1, [r7, #0]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fae3 	bl	800a724 <USBD_SetAddress>
      break;
 800a15e:	e01d      	b.n	800a19c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fb20 	bl	800a7a8 <USBD_SetConfig>
      break;
 800a168:	e018      	b.n	800a19c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800a16a:	6839      	ldr	r1, [r7, #0]
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 fba9 	bl	800a8c4 <USBD_GetConfig>
      break;
 800a172:	e013      	b.n	800a19c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fbd8 	bl	800a92c <USBD_GetStatus>
      break;
 800a17c:	e00e      	b.n	800a19c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800a17e:	6839      	ldr	r1, [r7, #0]
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 fc06 	bl	800a992 <USBD_SetFeature>
      break;
 800a186:	e009      	b.n	800a19c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800a188:	6839      	ldr	r1, [r7, #0]
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 fc15 	bl	800a9ba <USBD_ClrFeature>
      break;
 800a190:	e004      	b.n	800a19c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800a192:	6839      	ldr	r1, [r7, #0]
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 fc6e 	bl	800aa76 <USBD_CtlError>
      break;
 800a19a:	bf00      	nop
    }
    break;
 800a19c:	e004      	b.n	800a1a8 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 fc68 	bl	800aa76 <USBD_CtlError>
    break;
 800a1a6:	bf00      	nop
  }

  return ret;
 800a1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop

0800a1b4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1ca:	2b20      	cmp	r3, #32
 800a1cc:	d003      	beq.n	800a1d6 <USBD_StdItfReq+0x22>
 800a1ce:	2b40      	cmp	r3, #64	; 0x40
 800a1d0:	d001      	beq.n	800a1d6 <USBD_StdItfReq+0x22>
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d12a      	bne.n	800a22c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d81d      	bhi.n	800a21e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	889b      	ldrh	r3, [r3, #4]
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d813      	bhi.n	800a214 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	6839      	ldr	r1, [r7, #0]
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	4798      	blx	r3
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	88db      	ldrh	r3, [r3, #6]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d110      	bne.n	800a228 <USBD_StdItfReq+0x74>
 800a206:	7bfb      	ldrb	r3, [r7, #15]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10d      	bne.n	800a228 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fcfb 	bl	800ac08 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a212:	e009      	b.n	800a228 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800a214:	6839      	ldr	r1, [r7, #0]
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 fc2d 	bl	800aa76 <USBD_CtlError>
      break;
 800a21c:	e004      	b.n	800a228 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800a21e:	6839      	ldr	r1, [r7, #0]
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 fc28 	bl	800aa76 <USBD_CtlError>
      break;
 800a226:	e000      	b.n	800a22a <USBD_StdItfReq+0x76>
      break;
 800a228:	bf00      	nop
    }
    break;
 800a22a:	e004      	b.n	800a236 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800a22c:	6839      	ldr	r1, [r7, #0]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 fc21 	bl	800aa76 <USBD_CtlError>
    break;
 800a234:	bf00      	nop
  }

  return USBD_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	889b      	ldrh	r3, [r3, #4]
 800a252:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a25c:	2b20      	cmp	r3, #32
 800a25e:	d004      	beq.n	800a26a <USBD_StdEPReq+0x2a>
 800a260:	2b40      	cmp	r3, #64	; 0x40
 800a262:	d002      	beq.n	800a26a <USBD_StdEPReq+0x2a>
 800a264:	2b00      	cmp	r3, #0
 800a266:	d008      	beq.n	800a27a <USBD_StdEPReq+0x3a>
 800a268:	e13b      	b.n	800a4e2 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	6839      	ldr	r1, [r7, #0]
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	4798      	blx	r3
    break;
 800a278:	e138      	b.n	800a4ec <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a282:	2b20      	cmp	r3, #32
 800a284:	d10a      	bne.n	800a29c <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	6839      	ldr	r1, [r7, #0]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	4798      	blx	r3
 800a294:	4603      	mov	r3, r0
 800a296:	73fb      	strb	r3, [r7, #15]

      return ret;
 800a298:	7bfb      	ldrb	r3, [r7, #15]
 800a29a:	e128      	b.n	800a4ee <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	785b      	ldrb	r3, [r3, #1]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d03e      	beq.n	800a322 <USBD_StdEPReq+0xe2>
 800a2a4:	2b03      	cmp	r3, #3
 800a2a6:	d002      	beq.n	800a2ae <USBD_StdEPReq+0x6e>
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d070      	beq.n	800a38e <USBD_StdEPReq+0x14e>
 800a2ac:	e113      	b.n	800a4d6 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a2b4:	2b02      	cmp	r3, #2
 800a2b6:	d002      	beq.n	800a2be <USBD_StdEPReq+0x7e>
 800a2b8:	2b03      	cmp	r3, #3
 800a2ba:	d015      	beq.n	800a2e8 <USBD_StdEPReq+0xa8>
 800a2bc:	e02b      	b.n	800a316 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2be:	7bbb      	ldrb	r3, [r7, #14]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00c      	beq.n	800a2de <USBD_StdEPReq+0x9e>
 800a2c4:	7bbb      	ldrb	r3, [r7, #14]
 800a2c6:	2b80      	cmp	r3, #128	; 0x80
 800a2c8:	d009      	beq.n	800a2de <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800a2ca:	7bbb      	ldrb	r3, [r7, #14]
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f001 ff3c 	bl	800c14c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800a2d4:	2180      	movs	r1, #128	; 0x80
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f001 ff38 	bl	800c14c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a2dc:	e020      	b.n	800a320 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800a2de:	6839      	ldr	r1, [r7, #0]
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fbc8 	bl	800aa76 <USBD_CtlError>
        break;
 800a2e6:	e01b      	b.n	800a320 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	885b      	ldrh	r3, [r3, #2]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d10e      	bne.n	800a30e <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a2f0:	7bbb      	ldrb	r3, [r7, #14]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00b      	beq.n	800a30e <USBD_StdEPReq+0xce>
 800a2f6:	7bbb      	ldrb	r3, [r7, #14]
 800a2f8:	2b80      	cmp	r3, #128	; 0x80
 800a2fa:	d008      	beq.n	800a30e <USBD_StdEPReq+0xce>
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	88db      	ldrh	r3, [r3, #6]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d104      	bne.n	800a30e <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800a304:	7bbb      	ldrb	r3, [r7, #14]
 800a306:	4619      	mov	r1, r3
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f001 ff1f 	bl	800c14c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 fc7a 	bl	800ac08 <USBD_CtlSendStatus>

        break;
 800a314:	e004      	b.n	800a320 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800a316:	6839      	ldr	r1, [r7, #0]
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 fbac 	bl	800aa76 <USBD_CtlError>
        break;
 800a31e:	bf00      	nop
      }
      break;
 800a320:	e0de      	b.n	800a4e0 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d002      	beq.n	800a332 <USBD_StdEPReq+0xf2>
 800a32c:	2b03      	cmp	r3, #3
 800a32e:	d015      	beq.n	800a35c <USBD_StdEPReq+0x11c>
 800a330:	e026      	b.n	800a380 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a332:	7bbb      	ldrb	r3, [r7, #14]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00c      	beq.n	800a352 <USBD_StdEPReq+0x112>
 800a338:	7bbb      	ldrb	r3, [r7, #14]
 800a33a:	2b80      	cmp	r3, #128	; 0x80
 800a33c:	d009      	beq.n	800a352 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800a33e:	7bbb      	ldrb	r3, [r7, #14]
 800a340:	4619      	mov	r1, r3
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f001 ff02 	bl	800c14c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800a348:	2180      	movs	r1, #128	; 0x80
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f001 fefe 	bl	800c14c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a350:	e01c      	b.n	800a38c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800a352:	6839      	ldr	r1, [r7, #0]
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 fb8e 	bl	800aa76 <USBD_CtlError>
        break;
 800a35a:	e017      	b.n	800a38c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	885b      	ldrh	r3, [r3, #2]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d112      	bne.n	800a38a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a364:	7bbb      	ldrb	r3, [r7, #14]
 800a366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d004      	beq.n	800a378 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800a36e:	7bbb      	ldrb	r3, [r7, #14]
 800a370:	4619      	mov	r1, r3
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f001 ff20 	bl	800c1b8 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 fc45 	bl	800ac08 <USBD_CtlSendStatus>
        }
        break;
 800a37e:	e004      	b.n	800a38a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fb77 	bl	800aa76 <USBD_CtlError>
        break;
 800a388:	e000      	b.n	800a38c <USBD_StdEPReq+0x14c>
        break;
 800a38a:	bf00      	nop
      }
      break;
 800a38c:	e0a8      	b.n	800a4e0 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a394:	2b02      	cmp	r3, #2
 800a396:	d002      	beq.n	800a39e <USBD_StdEPReq+0x15e>
 800a398:	2b03      	cmp	r3, #3
 800a39a:	d031      	beq.n	800a400 <USBD_StdEPReq+0x1c0>
 800a39c:	e095      	b.n	800a4ca <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a39e:	7bbb      	ldrb	r3, [r7, #14]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d007      	beq.n	800a3b4 <USBD_StdEPReq+0x174>
 800a3a4:	7bbb      	ldrb	r3, [r7, #14]
 800a3a6:	2b80      	cmp	r3, #128	; 0x80
 800a3a8:	d004      	beq.n	800a3b4 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fb62 	bl	800aa76 <USBD_CtlError>
          break;
 800a3b2:	e08f      	b.n	800a4d4 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a3b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	da0b      	bge.n	800a3d4 <USBD_StdEPReq+0x194>
 800a3bc:	7bbb      	ldrb	r3, [r7, #14]
 800a3be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	4413      	add	r3, r2
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	3310      	adds	r3, #16
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	3304      	adds	r3, #4
 800a3d2:	e00a      	b.n	800a3ea <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800a3d4:	7bbb      	ldrb	r3, [r7, #14]
 800a3d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a3da:	4613      	mov	r3, r2
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	4413      	add	r3, r2
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	2202      	movs	r2, #2
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fba7 	bl	800ab4c <USBD_CtlSendData>
          break;
 800a3fe:	e069      	b.n	800a4d4 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800a400:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a404:	2b00      	cmp	r3, #0
 800a406:	da11      	bge.n	800a42c <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a408:	7bbb      	ldrb	r3, [r7, #14]
 800a40a:	f003 020f 	and.w	r2, r3, #15
 800a40e:	6879      	ldr	r1, [r7, #4]
 800a410:	4613      	mov	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4413      	add	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	440b      	add	r3, r1
 800a41a:	3318      	adds	r3, #24
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d117      	bne.n	800a452 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800a422:	6839      	ldr	r1, [r7, #0]
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 fb26 	bl	800aa76 <USBD_CtlError>
            break;
 800a42a:	e053      	b.n	800a4d4 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a42c:	7bbb      	ldrb	r3, [r7, #14]
 800a42e:	f003 020f 	and.w	r2, r3, #15
 800a432:	6879      	ldr	r1, [r7, #4]
 800a434:	4613      	mov	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4413      	add	r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	440b      	add	r3, r1
 800a43e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d104      	bne.n	800a452 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800a448:	6839      	ldr	r1, [r7, #0]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 fb13 	bl	800aa76 <USBD_CtlError>
            break;
 800a450:	e040      	b.n	800a4d4 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a452:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a456:	2b00      	cmp	r3, #0
 800a458:	da0b      	bge.n	800a472 <USBD_StdEPReq+0x232>
 800a45a:	7bbb      	ldrb	r3, [r7, #14]
 800a45c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a460:	4613      	mov	r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	4413      	add	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	3310      	adds	r3, #16
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	4413      	add	r3, r2
 800a46e:	3304      	adds	r3, #4
 800a470:	e00a      	b.n	800a488 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800a472:	7bbb      	ldrb	r3, [r7, #14]
 800a474:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a478:	4613      	mov	r3, r2
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	4413      	add	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	4413      	add	r3, r2
 800a488:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a48a:	7bbb      	ldrb	r3, [r7, #14]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d002      	beq.n	800a496 <USBD_StdEPReq+0x256>
 800a490:	7bbb      	ldrb	r3, [r7, #14]
 800a492:	2b80      	cmp	r3, #128	; 0x80
 800a494:	d103      	bne.n	800a49e <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	2200      	movs	r2, #0
 800a49a:	601a      	str	r2, [r3, #0]
 800a49c:	e00e      	b.n	800a4bc <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800a49e:	7bbb      	ldrb	r3, [r7, #14]
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f001 febe 	bl	800c224 <USBD_LL_IsStallEP>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d003      	beq.n	800a4b6 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	e002      	b.n	800a4bc <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	2202      	movs	r2, #2
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fb42 	bl	800ab4c <USBD_CtlSendData>
          break;
 800a4c8:	e004      	b.n	800a4d4 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800a4ca:	6839      	ldr	r1, [r7, #0]
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 fad2 	bl	800aa76 <USBD_CtlError>
        break;
 800a4d2:	bf00      	nop
      }
      break;
 800a4d4:	e004      	b.n	800a4e0 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800a4d6:	6839      	ldr	r1, [r7, #0]
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 facc 	bl	800aa76 <USBD_CtlError>
      break;
 800a4de:	bf00      	nop
    }
    break;
 800a4e0:	e004      	b.n	800a4ec <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fac6 	bl	800aa76 <USBD_CtlError>
    break;
 800a4ea:	bf00      	nop
  }

  return ret;
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
	...

0800a4f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	885b      	ldrh	r3, [r3, #2]
 800a506:	0a1b      	lsrs	r3, r3, #8
 800a508:	b29b      	uxth	r3, r3
 800a50a:	3b01      	subs	r3, #1
 800a50c:	2b0e      	cmp	r3, #14
 800a50e:	f200 80e5 	bhi.w	800a6dc <USBD_GetDescriptor+0x1e4>
 800a512:	a201      	add	r2, pc, #4	; (adr r2, 800a518 <USBD_GetDescriptor+0x20>)
 800a514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a518:	0800a56d 	.word	0x0800a56d
 800a51c:	0800a585 	.word	0x0800a585
 800a520:	0800a5c5 	.word	0x0800a5c5
 800a524:	0800a6dd 	.word	0x0800a6dd
 800a528:	0800a6dd 	.word	0x0800a6dd
 800a52c:	0800a689 	.word	0x0800a689
 800a530:	0800a6af 	.word	0x0800a6af
 800a534:	0800a6dd 	.word	0x0800a6dd
 800a538:	0800a6dd 	.word	0x0800a6dd
 800a53c:	0800a6dd 	.word	0x0800a6dd
 800a540:	0800a6dd 	.word	0x0800a6dd
 800a544:	0800a6dd 	.word	0x0800a6dd
 800a548:	0800a6dd 	.word	0x0800a6dd
 800a54c:	0800a6dd 	.word	0x0800a6dd
 800a550:	0800a555 	.word	0x0800a555
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a55a:	69db      	ldr	r3, [r3, #28]
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	7c12      	ldrb	r2, [r2, #16]
 800a560:	f107 010a 	add.w	r1, r7, #10
 800a564:	4610      	mov	r0, r2
 800a566:	4798      	blx	r3
 800a568:	60f8      	str	r0, [r7, #12]
    break;
 800a56a:	e0bc      	b.n	800a6e6 <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	7c12      	ldrb	r2, [r2, #16]
 800a578:	f107 010a 	add.w	r1, r7, #10
 800a57c:	4610      	mov	r0, r2
 800a57e:	4798      	blx	r3
 800a580:	60f8      	str	r0, [r7, #12]
    break;
 800a582:	e0b0      	b.n	800a6e6 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	7c1b      	ldrb	r3, [r3, #16]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10d      	bne.n	800a5a8 <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a594:	f107 020a 	add.w	r2, r7, #10
 800a598:	4610      	mov	r0, r2
 800a59a:	4798      	blx	r3
 800a59c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	2202      	movs	r2, #2
 800a5a4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800a5a6:	e09e      	b.n	800a6e6 <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b0:	f107 020a 	add.w	r2, r7, #10
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	4798      	blx	r3
 800a5b8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	2202      	movs	r2, #2
 800a5c0:	701a      	strb	r2, [r3, #0]
    break;
 800a5c2:	e090      	b.n	800a6e6 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	885b      	ldrh	r3, [r3, #2]
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b05      	cmp	r3, #5
 800a5cc:	d856      	bhi.n	800a67c <USBD_GetDescriptor+0x184>
 800a5ce:	a201      	add	r2, pc, #4	; (adr r2, 800a5d4 <USBD_GetDescriptor+0xdc>)
 800a5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d4:	0800a5ed 	.word	0x0800a5ed
 800a5d8:	0800a605 	.word	0x0800a605
 800a5dc:	0800a61d 	.word	0x0800a61d
 800a5e0:	0800a635 	.word	0x0800a635
 800a5e4:	0800a64d 	.word	0x0800a64d
 800a5e8:	0800a665 	.word	0x0800a665
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	7c12      	ldrb	r2, [r2, #16]
 800a5f8:	f107 010a 	add.w	r1, r7, #10
 800a5fc:	4610      	mov	r0, r2
 800a5fe:	4798      	blx	r3
 800a600:	60f8      	str	r0, [r7, #12]
      break;
 800a602:	e040      	b.n	800a686 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	7c12      	ldrb	r2, [r2, #16]
 800a610:	f107 010a 	add.w	r1, r7, #10
 800a614:	4610      	mov	r0, r2
 800a616:	4798      	blx	r3
 800a618:	60f8      	str	r0, [r7, #12]
      break;
 800a61a:	e034      	b.n	800a686 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	7c12      	ldrb	r2, [r2, #16]
 800a628:	f107 010a 	add.w	r1, r7, #10
 800a62c:	4610      	mov	r0, r2
 800a62e:	4798      	blx	r3
 800a630:	60f8      	str	r0, [r7, #12]
      break;
 800a632:	e028      	b.n	800a686 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	7c12      	ldrb	r2, [r2, #16]
 800a640:	f107 010a 	add.w	r1, r7, #10
 800a644:	4610      	mov	r0, r2
 800a646:	4798      	blx	r3
 800a648:	60f8      	str	r0, [r7, #12]
      break;
 800a64a:	e01c      	b.n	800a686 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a652:	695b      	ldr	r3, [r3, #20]
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	7c12      	ldrb	r2, [r2, #16]
 800a658:	f107 010a 	add.w	r1, r7, #10
 800a65c:	4610      	mov	r0, r2
 800a65e:	4798      	blx	r3
 800a660:	60f8      	str	r0, [r7, #12]
      break;
 800a662:	e010      	b.n	800a686 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a66a:	699b      	ldr	r3, [r3, #24]
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	7c12      	ldrb	r2, [r2, #16]
 800a670:	f107 010a 	add.w	r1, r7, #10
 800a674:	4610      	mov	r0, r2
 800a676:	4798      	blx	r3
 800a678:	60f8      	str	r0, [r7, #12]
      break;
 800a67a:	e004      	b.n	800a686 <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800a67c:	6839      	ldr	r1, [r7, #0]
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f9f9 	bl	800aa76 <USBD_CtlError>
      return;
 800a684:	e04b      	b.n	800a71e <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 800a686:	e02e      	b.n	800a6e6 <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	7c1b      	ldrb	r3, [r3, #16]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d109      	bne.n	800a6a4 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a698:	f107 020a 	add.w	r2, r7, #10
 800a69c:	4610      	mov	r0, r2
 800a69e:	4798      	blx	r3
 800a6a0:	60f8      	str	r0, [r7, #12]
      break;
 800a6a2:	e020      	b.n	800a6e6 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800a6a4:	6839      	ldr	r1, [r7, #0]
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f9e5 	bl	800aa76 <USBD_CtlError>
      return;
 800a6ac:	e037      	b.n	800a71e <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	7c1b      	ldrb	r3, [r3, #16]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d10d      	bne.n	800a6d2 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6be:	f107 020a 	add.w	r2, r7, #10
 800a6c2:	4610      	mov	r0, r2
 800a6c4:	4798      	blx	r3
 800a6c6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	2207      	movs	r2, #7
 800a6ce:	701a      	strb	r2, [r3, #0]
      break;
 800a6d0:	e009      	b.n	800a6e6 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800a6d2:	6839      	ldr	r1, [r7, #0]
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 f9ce 	bl	800aa76 <USBD_CtlError>
      return;
 800a6da:	e020      	b.n	800a71e <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 800a6dc:	6839      	ldr	r1, [r7, #0]
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f9c9 	bl	800aa76 <USBD_CtlError>
    return;
 800a6e4:	e01b      	b.n	800a71e <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 800a6e6:	897b      	ldrh	r3, [r7, #10]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d011      	beq.n	800a710 <USBD_GetDescriptor+0x218>
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	88db      	ldrh	r3, [r3, #6]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00d      	beq.n	800a710 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	88da      	ldrh	r2, [r3, #6]
 800a6f8:	897b      	ldrh	r3, [r7, #10]
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	bf28      	it	cs
 800a6fe:	4613      	movcs	r3, r2
 800a700:	b29b      	uxth	r3, r3
 800a702:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800a704:	897b      	ldrh	r3, [r7, #10]
 800a706:	461a      	mov	r2, r3
 800a708:	68f9      	ldr	r1, [r7, #12]
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 fa1e 	bl	800ab4c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	88db      	ldrh	r3, [r3, #6]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d102      	bne.n	800a71e <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fa75 	bl	800ac08 <USBD_CtlSendStatus>
  }
}
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	889b      	ldrh	r3, [r3, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d130      	bne.n	800a798 <USBD_SetAddress+0x74>
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	88db      	ldrh	r3, [r3, #6]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d12c      	bne.n	800a798 <USBD_SetAddress+0x74>
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	885b      	ldrh	r3, [r3, #2]
 800a742:	2b7f      	cmp	r3, #127	; 0x7f
 800a744:	d828      	bhi.n	800a798 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	885b      	ldrh	r3, [r3, #2]
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a750:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a758:	2b03      	cmp	r3, #3
 800a75a:	d104      	bne.n	800a766 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800a75c:	6839      	ldr	r1, [r7, #0]
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f989 	bl	800aa76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a764:	e01c      	b.n	800a7a0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	7bfa      	ldrb	r2, [r7, #15]
 800a76a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a76e:	7bfb      	ldrb	r3, [r7, #15]
 800a770:	4619      	mov	r1, r3
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f001 fd7c 	bl	800c270 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 fa45 	bl	800ac08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a77e:	7bfb      	ldrb	r3, [r7, #15]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d004      	beq.n	800a78e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2202      	movs	r2, #2
 800a788:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a78c:	e008      	b.n	800a7a0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2201      	movs	r2, #1
 800a792:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a796:	e003      	b.n	800a7a0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a798:	6839      	ldr	r1, [r7, #0]
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 f96b 	bl	800aa76 <USBD_CtlError>
  }
}
 800a7a0:	bf00      	nop
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	885b      	ldrh	r3, [r3, #2]
 800a7b6:	b2da      	uxtb	r2, r3
 800a7b8:	4b41      	ldr	r3, [pc, #260]	; (800a8c0 <USBD_SetConfig+0x118>)
 800a7ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a7bc:	4b40      	ldr	r3, [pc, #256]	; (800a8c0 <USBD_SetConfig+0x118>)
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d904      	bls.n	800a7ce <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 f955 	bl	800aa76 <USBD_CtlError>
 800a7cc:	e075      	b.n	800a8ba <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a7d4:	2b02      	cmp	r3, #2
 800a7d6:	d002      	beq.n	800a7de <USBD_SetConfig+0x36>
 800a7d8:	2b03      	cmp	r3, #3
 800a7da:	d023      	beq.n	800a824 <USBD_SetConfig+0x7c>
 800a7dc:	e062      	b.n	800a8a4 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800a7de:	4b38      	ldr	r3, [pc, #224]	; (800a8c0 <USBD_SetConfig+0x118>)
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d01a      	beq.n	800a81c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800a7e6:	4b36      	ldr	r3, [pc, #216]	; (800a8c0 <USBD_SetConfig+0x118>)
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2203      	movs	r2, #3
 800a7f4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a7f8:	4b31      	ldr	r3, [pc, #196]	; (800a8c0 <USBD_SetConfig+0x118>)
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f7ff fa4e 	bl	8009ca0 <USBD_SetClassConfig>
 800a804:	4603      	mov	r3, r0
 800a806:	2b02      	cmp	r3, #2
 800a808:	d104      	bne.n	800a814 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800a80a:	6839      	ldr	r1, [r7, #0]
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 f932 	bl	800aa76 <USBD_CtlError>
          return;
 800a812:	e052      	b.n	800a8ba <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 f9f7 	bl	800ac08 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800a81a:	e04e      	b.n	800a8ba <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 f9f3 	bl	800ac08 <USBD_CtlSendStatus>
      break;
 800a822:	e04a      	b.n	800a8ba <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a824:	4b26      	ldr	r3, [pc, #152]	; (800a8c0 <USBD_SetConfig+0x118>)
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d112      	bne.n	800a852 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2202      	movs	r2, #2
 800a830:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800a834:	4b22      	ldr	r3, [pc, #136]	; (800a8c0 <USBD_SetConfig+0x118>)
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	461a      	mov	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800a83e:	4b20      	ldr	r3, [pc, #128]	; (800a8c0 <USBD_SetConfig+0x118>)
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f7ff fa4a 	bl	8009cde <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f9dc 	bl	800ac08 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800a850:	e033      	b.n	800a8ba <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800a852:	4b1b      	ldr	r3, [pc, #108]	; (800a8c0 <USBD_SetConfig+0x118>)
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	461a      	mov	r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d01d      	beq.n	800a89c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	b2db      	uxtb	r3, r3
 800a866:	4619      	mov	r1, r3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f7ff fa38 	bl	8009cde <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a86e:	4b14      	ldr	r3, [pc, #80]	; (800a8c0 <USBD_SetConfig+0x118>)
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a878:	4b11      	ldr	r3, [pc, #68]	; (800a8c0 <USBD_SetConfig+0x118>)
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	4619      	mov	r1, r3
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7ff fa0e 	bl	8009ca0 <USBD_SetClassConfig>
 800a884:	4603      	mov	r3, r0
 800a886:	2b02      	cmp	r3, #2
 800a888:	d104      	bne.n	800a894 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800a88a:	6839      	ldr	r1, [r7, #0]
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 f8f2 	bl	800aa76 <USBD_CtlError>
          return;
 800a892:	e012      	b.n	800a8ba <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f9b7 	bl	800ac08 <USBD_CtlSendStatus>
      break;
 800a89a:	e00e      	b.n	800a8ba <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 f9b3 	bl	800ac08 <USBD_CtlSendStatus>
      break;
 800a8a2:	e00a      	b.n	800a8ba <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800a8a4:	6839      	ldr	r1, [r7, #0]
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 f8e5 	bl	800aa76 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800a8ac:	4b04      	ldr	r3, [pc, #16]	; (800a8c0 <USBD_SetConfig+0x118>)
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f7ff fa13 	bl	8009cde <USBD_ClrClassConfig>
      break;
 800a8b8:	bf00      	nop
    }
  }
}
 800a8ba:	3708      	adds	r7, #8
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	20007566 	.word	0x20007566

0800a8c4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	88db      	ldrh	r3, [r3, #6]
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d004      	beq.n	800a8e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800a8d6:	6839      	ldr	r1, [r7, #0]
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 f8cc 	bl	800aa76 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800a8de:	e021      	b.n	800a924 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	db17      	blt.n	800a91a <USBD_GetConfig+0x56>
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	dd02      	ble.n	800a8f4 <USBD_GetConfig+0x30>
 800a8ee:	2b03      	cmp	r3, #3
 800a8f0:	d00b      	beq.n	800a90a <USBD_GetConfig+0x46>
 800a8f2:	e012      	b.n	800a91a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	3308      	adds	r3, #8
 800a8fe:	2201      	movs	r2, #1
 800a900:	4619      	mov	r1, r3
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 f922 	bl	800ab4c <USBD_CtlSendData>
      break;
 800a908:	e00c      	b.n	800a924 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	3304      	adds	r3, #4
 800a90e:	2201      	movs	r2, #1
 800a910:	4619      	mov	r1, r3
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 f91a 	bl	800ab4c <USBD_CtlSendData>
      break;
 800a918:	e004      	b.n	800a924 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800a91a:	6839      	ldr	r1, [r7, #0]
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 f8aa 	bl	800aa76 <USBD_CtlError>
      break;
 800a922:	bf00      	nop
}
 800a924:	bf00      	nop
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a93c:	3b01      	subs	r3, #1
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d81e      	bhi.n	800a980 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	88db      	ldrh	r3, [r3, #6]
 800a946:	2b02      	cmp	r3, #2
 800a948:	d004      	beq.n	800a954 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800a94a:	6839      	ldr	r1, [r7, #0]
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 f892 	bl	800aa76 <USBD_CtlError>
      break;
 800a952:	e01a      	b.n	800a98a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800a960:	2b00      	cmp	r3, #0
 800a962:	d005      	beq.n	800a970 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	f043 0202 	orr.w	r2, r3, #2
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	330c      	adds	r3, #12
 800a974:	2202      	movs	r2, #2
 800a976:	4619      	mov	r1, r3
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f8e7 	bl	800ab4c <USBD_CtlSendData>
    break;
 800a97e:	e004      	b.n	800a98a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800a980:	6839      	ldr	r1, [r7, #0]
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f877 	bl	800aa76 <USBD_CtlError>
    break;
 800a988:	bf00      	nop
  }
}
 800a98a:	bf00      	nop
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b082      	sub	sp, #8
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	885b      	ldrh	r3, [r3, #2]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d106      	bne.n	800a9b2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 f92b 	bl	800ac08 <USBD_CtlSendStatus>
  }

}
 800a9b2:	bf00      	nop
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b082      	sub	sp, #8
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d80b      	bhi.n	800a9e8 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	885b      	ldrh	r3, [r3, #2]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d10c      	bne.n	800a9f2 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 f911 	bl	800ac08 <USBD_CtlSendStatus>
    }
    break;
 800a9e6:	e004      	b.n	800a9f2 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800a9e8:	6839      	ldr	r1, [r7, #0]
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 f843 	bl	800aa76 <USBD_CtlError>
    break;
 800a9f0:	e000      	b.n	800a9f4 <USBD_ClrFeature+0x3a>
    break;
 800a9f2:	bf00      	nop
  }
}
 800a9f4:	bf00      	nop
 800a9f6:	3708      	adds	r7, #8
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	781a      	ldrb	r2, [r3, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	785a      	ldrb	r2, [r3, #1]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	3302      	adds	r3, #2
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	3303      	adds	r3, #3
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	021b      	lsls	r3, r3, #8
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	4413      	add	r3, r2
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	3304      	adds	r3, #4
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	3305      	adds	r3, #5
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	021b      	lsls	r3, r3, #8
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	4413      	add	r3, r2
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	3306      	adds	r3, #6
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	b29a      	uxth	r2, r3
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	3307      	adds	r3, #7
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	021b      	lsls	r3, r3, #8
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	4413      	add	r3, r2
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	80da      	strh	r2, [r3, #6]

}
 800aa6a:	bf00      	nop
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr

0800aa76 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b082      	sub	sp, #8
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800aa80:	2180      	movs	r1, #128	; 0x80
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f001 fb62 	bl	800c14c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800aa88:	2100      	movs	r1, #0
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f001 fb5e 	bl	800c14c <USBD_LL_StallEP>
}
 800aa90:	bf00      	nop
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b086      	sub	sp, #24
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d032      	beq.n	800ab14 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f000 f834 	bl	800ab1c <USBD_GetLen>
 800aab4:	4603      	mov	r3, r0
 800aab6:	3301      	adds	r3, #1
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	005b      	lsls	r3, r3, #1
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800aac2:	7dfb      	ldrb	r3, [r7, #23]
 800aac4:	1c5a      	adds	r2, r3, #1
 800aac6:	75fa      	strb	r2, [r7, #23]
 800aac8:	461a      	mov	r2, r3
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	4413      	add	r3, r2
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	7812      	ldrb	r2, [r2, #0]
 800aad2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800aad4:	7dfb      	ldrb	r3, [r7, #23]
 800aad6:	1c5a      	adds	r2, r3, #1
 800aad8:	75fa      	strb	r2, [r7, #23]
 800aada:	461a      	mov	r2, r3
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	4413      	add	r3, r2
 800aae0:	2203      	movs	r2, #3
 800aae2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800aae4:	e012      	b.n	800ab0c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800aae6:	7dfb      	ldrb	r3, [r7, #23]
 800aae8:	1c5a      	adds	r2, r3, #1
 800aaea:	75fa      	strb	r2, [r7, #23]
 800aaec:	461a      	mov	r2, r3
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	441a      	add	r2, r3
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	1c59      	adds	r1, r3, #1
 800aaf6:	60f9      	str	r1, [r7, #12]
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800aafc:	7dfb      	ldrb	r3, [r7, #23]
 800aafe:	1c5a      	adds	r2, r3, #1
 800ab00:	75fa      	strb	r2, [r7, #23]
 800ab02:	461a      	mov	r2, r3
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	4413      	add	r3, r2
 800ab08:	2200      	movs	r2, #0
 800ab0a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1e8      	bne.n	800aae6 <USBD_GetString+0x4e>
    }
  }
}
 800ab14:	bf00      	nop
 800ab16:	3718      	adds	r7, #24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b085      	sub	sp, #20
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800ab24:	2300      	movs	r3, #0
 800ab26:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800ab28:	e005      	b.n	800ab36 <USBD_GetLen+0x1a>
    {
        len++;
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	73fb      	strb	r3, [r7, #15]
        buf++;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	3301      	adds	r3, #1
 800ab34:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1f5      	bne.n	800ab2a <USBD_GetLen+0xe>
    }

    return len;
 800ab3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3714      	adds	r7, #20
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	4613      	mov	r3, r2
 800ab58:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2202      	movs	r2, #2
 800ab5e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800ab62:	88fa      	ldrh	r2, [r7, #6]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ab68:	88fa      	ldrh	r2, [r7, #6]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800ab6e:	88fb      	ldrh	r3, [r7, #6]
 800ab70:	68ba      	ldr	r2, [r7, #8]
 800ab72:	2100      	movs	r1, #0
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f001 fbb1 	bl	800c2dc <USBD_LL_Transmit>

  return USBD_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	4613      	mov	r3, r2
 800ab90:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800ab92:	88fb      	ldrh	r3, [r7, #6]
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	2100      	movs	r1, #0
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f001 fb9f 	bl	800c2dc <USBD_LL_Transmit>

  return USBD_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3710      	adds	r7, #16
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	4613      	mov	r3, r2
 800abb4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2203      	movs	r2, #3
 800abba:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800abbe:	88fa      	ldrh	r2, [r7, #6]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800abc6:	88fa      	ldrh	r2, [r7, #6]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800abce:	88fb      	ldrh	r3, [r7, #6]
 800abd0:	68ba      	ldr	r2, [r7, #8]
 800abd2:	2100      	movs	r1, #0
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f001 fbbb 	bl	800c350 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	4613      	mov	r3, r2
 800abf0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800abf2:	88fb      	ldrh	r3, [r7, #6]
 800abf4:	68ba      	ldr	r2, [r7, #8]
 800abf6:	2100      	movs	r1, #0
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f001 fba9 	bl	800c350 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2204      	movs	r2, #4
 800ac14:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ac18:	2300      	movs	r3, #0
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f001 fb5c 	bl	800c2dc <USBD_LL_Transmit>

  return USBD_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3708      	adds	r7, #8
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b082      	sub	sp, #8
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2205      	movs	r2, #5
 800ac3a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800ac3e:	2300      	movs	r3, #0
 800ac40:	2200      	movs	r2, #0
 800ac42:	2100      	movs	r1, #0
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f001 fb83 	bl	800c350 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b08a      	sub	sp, #40	; 0x28
 800ac58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac5a:	f107 0314 	add.w	r3, r7, #20
 800ac5e:	2200      	movs	r2, #0
 800ac60:	601a      	str	r2, [r3, #0]
 800ac62:	605a      	str	r2, [r3, #4]
 800ac64:	609a      	str	r2, [r3, #8]
 800ac66:	60da      	str	r2, [r3, #12]
 800ac68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ac6a:	4a70      	ldr	r2, [pc, #448]	; (800ae2c <MX_GPIO_Init+0x1d8>)
 800ac6c:	4b6f      	ldr	r3, [pc, #444]	; (800ae2c <MX_GPIO_Init+0x1d8>)
 800ac6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac74:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac76:	4b6d      	ldr	r3, [pc, #436]	; (800ae2c <MX_GPIO_Init+0x1d8>)
 800ac78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac7e:	613b      	str	r3, [r7, #16]
 800ac80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ac82:	4a6a      	ldr	r2, [pc, #424]	; (800ae2c <MX_GPIO_Init+0x1d8>)
 800ac84:	4b69      	ldr	r3, [pc, #420]	; (800ae2c <MX_GPIO_Init+0x1d8>)
 800ac86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac88:	f043 0304 	orr.w	r3, r3, #4
 800ac8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac8e:	4b67      	ldr	r3, [pc, #412]	; (800ae2c <MX_GPIO_Init+0x1d8>)
 800ac90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac92:	f003 0304 	and.w	r3, r3, #4
 800ac96:	60fb      	str	r3, [r7, #12]
 800ac98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac9a:	4a64      	ldr	r2, [pc, #400]	; (800ae2c <MX_GPIO_Init+0x1d8>)
 800ac9c:	4b63      	ldr	r3, [pc, #396]	; (800ae2c <MX_GPIO_Init+0x1d8>)
 800ac9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aca0:	f043 0301 	orr.w	r3, r3, #1
 800aca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aca6:	4b61      	ldr	r3, [pc, #388]	; (800ae2c <MX_GPIO_Init+0x1d8>)
 800aca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acaa:	f003 0301 	and.w	r3, r3, #1
 800acae:	60bb      	str	r3, [r7, #8]
 800acb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800acb2:	4a5e      	ldr	r2, [pc, #376]	; (800ae2c <MX_GPIO_Init+0x1d8>)
 800acb4:	4b5d      	ldr	r3, [pc, #372]	; (800ae2c <MX_GPIO_Init+0x1d8>)
 800acb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acb8:	f043 0302 	orr.w	r3, r3, #2
 800acbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800acbe:	4b5b      	ldr	r3, [pc, #364]	; (800ae2c <MX_GPIO_Init+0x1d8>)
 800acc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acc2:	f003 0302 	and.w	r3, r3, #2
 800acc6:	607b      	str	r3, [r7, #4]
 800acc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800acca:	4a58      	ldr	r2, [pc, #352]	; (800ae2c <MX_GPIO_Init+0x1d8>)
 800accc:	4b57      	ldr	r3, [pc, #348]	; (800ae2c <MX_GPIO_Init+0x1d8>)
 800acce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acd0:	f043 0308 	orr.w	r3, r3, #8
 800acd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800acd6:	4b55      	ldr	r3, [pc, #340]	; (800ae2c <MX_GPIO_Init+0x1d8>)
 800acd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acda:	f003 0308 	and.w	r3, r3, #8
 800acde:	603b      	str	r3, [r7, #0]
 800ace0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, O_USART2_DIR_Pin|O_USART1_DIR_Pin, GPIO_PIN_RESET);
 800ace2:	2200      	movs	r2, #0
 800ace4:	f241 0104 	movw	r1, #4100	; 0x1004
 800ace8:	4851      	ldr	r0, [pc, #324]	; (800ae30 <MX_GPIO_Init+0x1dc>)
 800acea:	f7f8 fbf1 	bl	80034d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O_BT_PWR_GPIO_Port, O_BT_PWR_Pin, GPIO_PIN_SET);
 800acee:	2201      	movs	r2, #1
 800acf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800acf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800acf8:	f7f8 fbea 	bl	80034d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = O_USART2_DIR_Pin|O_USART1_DIR_Pin;
 800acfc:	f241 0304 	movw	r3, #4100	; 0x1004
 800ad00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ad02:	2301      	movs	r3, #1
 800ad04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad06:	2300      	movs	r3, #0
 800ad08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ad0e:	f107 0314 	add.w	r3, r7, #20
 800ad12:	4619      	mov	r1, r3
 800ad14:	4846      	ldr	r0, [pc, #280]	; (800ae30 <MX_GPIO_Init+0x1dc>)
 800ad16:	f7f8 fa49 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_USART2_BREAK_Pin;
 800ad1a:	2308      	movs	r3, #8
 800ad1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad22:	2300      	movs	r3, #0
 800ad24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(O_USART2_BREAK_GPIO_Port, &GPIO_InitStruct);
 800ad26:	f107 0314 	add.w	r3, r7, #20
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	4840      	ldr	r0, [pc, #256]	; (800ae30 <MX_GPIO_Init+0x1dc>)
 800ad2e:	f7f8 fa3d 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = I_GPIO1_Pin|I_GPIO2_Pin|I_GPIO3_Pin|I_GPIO4_Pin;
 800ad32:	23f0      	movs	r3, #240	; 0xf0
 800ad34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad36:	2300      	movs	r3, #0
 800ad38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad3e:	f107 0314 	add.w	r3, r7, #20
 800ad42:	4619      	mov	r1, r3
 800ad44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad48:	f7f8 fa30 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_USB_VBUS_Pin;
 800ad4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800ad52:	4b38      	ldr	r3, [pc, #224]	; (800ae34 <MX_GPIO_Init+0x1e0>)
 800ad54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad56:	2300      	movs	r3, #0
 800ad58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I_USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ad5a:	f107 0314 	add.w	r3, r7, #20
 800ad5e:	4619      	mov	r1, r3
 800ad60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad64:	f7f8 fa22 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_SW2_Pin;
 800ad68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ad72:	2301      	movs	r3, #1
 800ad74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I_SW2_GPIO_Port, &GPIO_InitStruct);
 800ad76:	f107 0314 	add.w	r3, r7, #20
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad80:	f7f8 fa14 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_BT_PWR_Pin;
 800ad84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad92:	2300      	movs	r3, #0
 800ad94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(O_BT_PWR_GPIO_Port, &GPIO_InitStruct);
 800ad96:	f107 0314 	add.w	r3, r7, #20
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ada0:	f7f8 fa04 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_USART1_BREAK_Pin;
 800ada4:	2304      	movs	r3, #4
 800ada6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ada8:	2300      	movs	r3, #0
 800adaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adac:	2300      	movs	r3, #0
 800adae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(O_USART1_BREAK_GPIO_Port, &GPIO_InitStruct);
 800adb0:	f107 0314 	add.w	r3, r7, #20
 800adb4:	4619      	mov	r1, r3
 800adb6:	4820      	ldr	r0, [pc, #128]	; (800ae38 <MX_GPIO_Init+0x1e4>)
 800adb8:	f7f8 f9f8 	bl	80031ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = O_PWM_LED3_Pin;
 800adbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800adc2:	2301      	movs	r3, #1
 800adc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adc6:	2300      	movs	r3, #0
 800adc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800adca:	2300      	movs	r3, #0
 800adcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(O_PWM_LED3_GPIO_Port, &GPIO_InitStruct);
 800adce:	f107 0314 	add.w	r3, r7, #20
 800add2:	4619      	mov	r1, r3
 800add4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800add8:	f7f8 f9e8 	bl	80031ac <HAL_GPIO_Init>
  HAL_GPIO_WritePin(O_PWM_LED3_GPIO_Port, O_PWM_LED3_Pin, GPIO_PIN_SET);
 800addc:	2201      	movs	r2, #1
 800adde:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ade2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ade6:	f7f8 fb73 	bl	80034d0 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = O_PWM_LED2_Pin|O_PWM_LED1_Pin;
 800adea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800adee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800adf0:	2301      	movs	r3, #1
 800adf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adf4:	2300      	movs	r3, #0
 800adf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800adf8:	2300      	movs	r3, #0
 800adfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800adfc:	f107 0314 	add.w	r3, r7, #20
 800ae00:	4619      	mov	r1, r3
 800ae02:	480e      	ldr	r0, [pc, #56]	; (800ae3c <MX_GPIO_Init+0x1e8>)
 800ae04:	f7f8 f9d2 	bl	80031ac <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, O_PWM_LED2_Pin|O_PWM_LED1_Pin, GPIO_PIN_SET);
 800ae08:	2201      	movs	r2, #1
 800ae0a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800ae0e:	480b      	ldr	r0, [pc, #44]	; (800ae3c <MX_GPIO_Init+0x1e8>)
 800ae10:	f7f8 fb5e 	bl	80034d0 <HAL_GPIO_WritePin>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800ae14:	2200      	movs	r2, #0
 800ae16:	2101      	movs	r1, #1
 800ae18:	2017      	movs	r0, #23
 800ae1a:	f7f8 f990 	bl	800313e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800ae1e:	2017      	movs	r0, #23
 800ae20:	f7f8 f9a9 	bl	8003176 <HAL_NVIC_EnableIRQ>

}
 800ae24:	bf00      	nop
 800ae26:	3728      	adds	r7, #40	; 0x28
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	40021000 	.word	0x40021000
 800ae30:	48000800 	.word	0x48000800
 800ae34:	10310000 	.word	0x10310000
 800ae38:	48000c00 	.word	0x48000c00
 800ae3c:	48000400 	.word	0x48000400

0800ae40 <gpio_ConfigureToFloating>:

/* USER CODE BEGIN 2 */
void gpio_ConfigureToFloating(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b088      	sub	sp, #32
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae4c:	f107 030c 	add.w	r3, r7, #12
 800ae50:	2200      	movs	r2, #0
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	605a      	str	r2, [r3, #4]
 800ae56:	609a      	str	r2, [r3, #8]
 800ae58:	60da      	str	r2, [r3, #12]
 800ae5a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800ae5c:	887b      	ldrh	r3, [r7, #2]
 800ae5e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ae60:	2300      	movs	r3, #0
 800ae62:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae64:	2300      	movs	r3, #0
 800ae66:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800ae68:	f107 030c 	add.w	r3, r7, #12
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7f8 f99c 	bl	80031ac <HAL_GPIO_Init>
}
 800ae74:	bf00      	nop
 800ae76:	3720      	adds	r7, #32
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <gpio_ConfigureToPushPull>:
void gpio_ConfigureToPushPull(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b088      	sub	sp, #32
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	460b      	mov	r3, r1
 800ae86:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae88:	f107 030c 	add.w	r3, r7, #12
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	601a      	str	r2, [r3, #0]
 800ae90:	605a      	str	r2, [r3, #4]
 800ae92:	609a      	str	r2, [r3, #8]
 800ae94:	60da      	str	r2, [r3, #12]
 800ae96:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800ae98:	887b      	ldrh	r3, [r7, #2]
 800ae9a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aea0:	2300      	movs	r3, #0
 800aea2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aea4:	2303      	movs	r3, #3
 800aea6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800aea8:	f107 030c 	add.w	r3, r7, #12
 800aeac:	4619      	mov	r1, r3
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f7f8 f97c 	bl	80031ac <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800aeb4:	887b      	ldrh	r3, [r7, #2]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	4619      	mov	r1, r3
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f7f8 fb08 	bl	80034d0 <HAL_GPIO_WritePin>
}
 800aec0:	bf00      	nop
 800aec2:	3720      	adds	r7, #32
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800aecc:	4b1b      	ldr	r3, [pc, #108]	; (800af3c <MX_I2C2_Init+0x74>)
 800aece:	4a1c      	ldr	r2, [pc, #112]	; (800af40 <MX_I2C2_Init+0x78>)
 800aed0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800aed2:	4b1a      	ldr	r3, [pc, #104]	; (800af3c <MX_I2C2_Init+0x74>)
 800aed4:	4a1b      	ldr	r2, [pc, #108]	; (800af44 <MX_I2C2_Init+0x7c>)
 800aed6:	605a      	str	r2, [r3, #4]
//  hi2c2.Init.Timing = 0x00702991;
  hi2c2.Init.OwnAddress1 = 0;
 800aed8:	4b18      	ldr	r3, [pc, #96]	; (800af3c <MX_I2C2_Init+0x74>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800aede:	4b17      	ldr	r3, [pc, #92]	; (800af3c <MX_I2C2_Init+0x74>)
 800aee0:	2201      	movs	r2, #1
 800aee2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800aee4:	4b15      	ldr	r3, [pc, #84]	; (800af3c <MX_I2C2_Init+0x74>)
 800aee6:	2200      	movs	r2, #0
 800aee8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800aeea:	4b14      	ldr	r3, [pc, #80]	; (800af3c <MX_I2C2_Init+0x74>)
 800aeec:	2200      	movs	r2, #0
 800aeee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800aef0:	4b12      	ldr	r3, [pc, #72]	; (800af3c <MX_I2C2_Init+0x74>)
 800aef2:	2200      	movs	r2, #0
 800aef4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800aef6:	4b11      	ldr	r3, [pc, #68]	; (800af3c <MX_I2C2_Init+0x74>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800aefc:	4b0f      	ldr	r3, [pc, #60]	; (800af3c <MX_I2C2_Init+0x74>)
 800aefe:	2200      	movs	r2, #0
 800af00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800af02:	480e      	ldr	r0, [pc, #56]	; (800af3c <MX_I2C2_Init+0x74>)
 800af04:	f7f8 fb14 	bl	8003530 <HAL_I2C_Init>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d001      	beq.n	800af12 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800af0e:	f000 f9a3 	bl	800b258 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800af12:	2100      	movs	r1, #0
 800af14:	4809      	ldr	r0, [pc, #36]	; (800af3c <MX_I2C2_Init+0x74>)
 800af16:	f7f9 f8d5 	bl	80040c4 <HAL_I2CEx_ConfigAnalogFilter>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d001      	beq.n	800af24 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800af20:	f000 f99a 	bl	800b258 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800af24:	2100      	movs	r1, #0
 800af26:	4805      	ldr	r0, [pc, #20]	; (800af3c <MX_I2C2_Init+0x74>)
 800af28:	f7f9 f917 	bl	800415a <HAL_I2CEx_ConfigDigitalFilter>
 800af2c:	4603      	mov	r3, r0
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d001      	beq.n	800af36 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800af32:	f000 f991 	bl	800b258 <Error_Handler>
  }

}
 800af36:	bf00      	nop
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	2000779c 	.word	0x2000779c
 800af40:	40005800 	.word	0x40005800
 800af44:	10909cec 	.word	0x10909cec

0800af48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b08a      	sub	sp, #40	; 0x28
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af50:	f107 0314 	add.w	r3, r7, #20
 800af54:	2200      	movs	r2, #0
 800af56:	601a      	str	r2, [r3, #0]
 800af58:	605a      	str	r2, [r3, #4]
 800af5a:	609a      	str	r2, [r3, #8]
 800af5c:	60da      	str	r2, [r3, #12]
 800af5e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a17      	ldr	r2, [pc, #92]	; (800afc4 <HAL_I2C_MspInit+0x7c>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d128      	bne.n	800afbc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af6a:	4a17      	ldr	r2, [pc, #92]	; (800afc8 <HAL_I2C_MspInit+0x80>)
 800af6c:	4b16      	ldr	r3, [pc, #88]	; (800afc8 <HAL_I2C_MspInit+0x80>)
 800af6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af70:	f043 0302 	orr.w	r3, r3, #2
 800af74:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af76:	4b14      	ldr	r3, [pc, #80]	; (800afc8 <HAL_I2C_MspInit+0x80>)
 800af78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af7a:	f003 0302 	and.w	r3, r3, #2
 800af7e:	613b      	str	r3, [r7, #16]
 800af80:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800af82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800af86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800af88:	2312      	movs	r3, #18
 800af8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800af8c:	2301      	movs	r3, #1
 800af8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af90:	2303      	movs	r3, #3
 800af92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800af94:	2304      	movs	r3, #4
 800af96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af98:	f107 0314 	add.w	r3, r7, #20
 800af9c:	4619      	mov	r1, r3
 800af9e:	480b      	ldr	r0, [pc, #44]	; (800afcc <HAL_I2C_MspInit+0x84>)
 800afa0:	f7f8 f904 	bl	80031ac <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800afa4:	4a08      	ldr	r2, [pc, #32]	; (800afc8 <HAL_I2C_MspInit+0x80>)
 800afa6:	4b08      	ldr	r3, [pc, #32]	; (800afc8 <HAL_I2C_MspInit+0x80>)
 800afa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afaa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800afae:	6593      	str	r3, [r2, #88]	; 0x58
 800afb0:	4b05      	ldr	r3, [pc, #20]	; (800afc8 <HAL_I2C_MspInit+0x80>)
 800afb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afb8:	60fb      	str	r3, [r7, #12]
 800afba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800afbc:	bf00      	nop
 800afbe:	3728      	adds	r7, #40	; 0x28
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	40005800 	.word	0x40005800
 800afc8:	40021000 	.word	0x40021000
 800afcc:	48000400 	.word	0x48000400

0800afd0 <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim1;
LPTIM_HandleTypeDef hlptim2;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	af00      	add	r7, sp, #0

  hlptim1.Instance = LPTIM1;
 800afd4:	4b12      	ldr	r3, [pc, #72]	; (800b020 <MX_LPTIM1_Init+0x50>)
 800afd6:	4a13      	ldr	r2, [pc, #76]	; (800b024 <MX_LPTIM1_Init+0x54>)
 800afd8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800afda:	4b11      	ldr	r3, [pc, #68]	; (800b020 <MX_LPTIM1_Init+0x50>)
 800afdc:	2200      	movs	r2, #0
 800afde:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800afe0:	4b0f      	ldr	r3, [pc, #60]	; (800b020 <MX_LPTIM1_Init+0x50>)
 800afe2:	2200      	movs	r2, #0
 800afe4:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800afe6:	4b0e      	ldr	r3, [pc, #56]	; (800b020 <MX_LPTIM1_Init+0x50>)
 800afe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afec:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800afee:	4b0c      	ldr	r3, [pc, #48]	; (800b020 <MX_LPTIM1_Init+0x50>)
 800aff0:	2200      	movs	r2, #0
 800aff2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800aff4:	4b0a      	ldr	r3, [pc, #40]	; (800b020 <MX_LPTIM1_Init+0x50>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800affa:	4b09      	ldr	r3, [pc, #36]	; (800b020 <MX_LPTIM1_Init+0x50>)
 800affc:	2200      	movs	r2, #0
 800affe:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800b000:	4b07      	ldr	r3, [pc, #28]	; (800b020 <MX_LPTIM1_Init+0x50>)
 800b002:	2200      	movs	r2, #0
 800b004:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800b006:	4b06      	ldr	r3, [pc, #24]	; (800b020 <MX_LPTIM1_Init+0x50>)
 800b008:	2200      	movs	r2, #0
 800b00a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800b00c:	4804      	ldr	r0, [pc, #16]	; (800b020 <MX_LPTIM1_Init+0x50>)
 800b00e:	f7f9 f8f1 	bl	80041f4 <HAL_LPTIM_Init>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d001      	beq.n	800b01c <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 800b018:	f000 f91e 	bl	800b258 <Error_Handler>
  }

}
 800b01c:	bf00      	nop
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	20007820 	.word	0x20007820
 800b024:	40007c00 	.word	0x40007c00

0800b028 <MX_LPTIM2_Init>:
/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	af00      	add	r7, sp, #0

  hlptim2.Instance = LPTIM2;
 800b02c:	4b12      	ldr	r3, [pc, #72]	; (800b078 <MX_LPTIM2_Init+0x50>)
 800b02e:	4a13      	ldr	r2, [pc, #76]	; (800b07c <MX_LPTIM2_Init+0x54>)
 800b030:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800b032:	4b11      	ldr	r3, [pc, #68]	; (800b078 <MX_LPTIM2_Init+0x50>)
 800b034:	2200      	movs	r2, #0
 800b036:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800b038:	4b0f      	ldr	r3, [pc, #60]	; (800b078 <MX_LPTIM2_Init+0x50>)
 800b03a:	2200      	movs	r2, #0
 800b03c:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800b03e:	4b0e      	ldr	r3, [pc, #56]	; (800b078 <MX_LPTIM2_Init+0x50>)
 800b040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b044:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800b046:	4b0c      	ldr	r3, [pc, #48]	; (800b078 <MX_LPTIM2_Init+0x50>)
 800b048:	2200      	movs	r2, #0
 800b04a:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800b04c:	4b0a      	ldr	r3, [pc, #40]	; (800b078 <MX_LPTIM2_Init+0x50>)
 800b04e:	2200      	movs	r2, #0
 800b050:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800b052:	4b09      	ldr	r3, [pc, #36]	; (800b078 <MX_LPTIM2_Init+0x50>)
 800b054:	2200      	movs	r2, #0
 800b056:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800b058:	4b07      	ldr	r3, [pc, #28]	; (800b078 <MX_LPTIM2_Init+0x50>)
 800b05a:	2200      	movs	r2, #0
 800b05c:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800b05e:	4b06      	ldr	r3, [pc, #24]	; (800b078 <MX_LPTIM2_Init+0x50>)
 800b060:	2200      	movs	r2, #0
 800b062:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 800b064:	4804      	ldr	r0, [pc, #16]	; (800b078 <MX_LPTIM2_Init+0x50>)
 800b066:	f7f9 f8c5 	bl	80041f4 <HAL_LPTIM_Init>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d001      	beq.n	800b074 <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 800b070:	f000 f8f2 	bl	800b258 <Error_Handler>
  }

}
 800b074:	bf00      	nop
 800b076:	bd80      	pop	{r7, pc}
 800b078:	200077e8 	.word	0x200077e8
 800b07c:	40009400 	.word	0x40009400

0800b080 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]

  if(lptimHandle->Instance==LPTIM1)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a1a      	ldr	r2, [pc, #104]	; (800b0f8 <HAL_LPTIM_MspInit+0x78>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d114      	bne.n	800b0bc <HAL_LPTIM_MspInit+0x3c>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800b092:	4a1a      	ldr	r2, [pc, #104]	; (800b0fc <HAL_LPTIM_MspInit+0x7c>)
 800b094:	4b19      	ldr	r3, [pc, #100]	; (800b0fc <HAL_LPTIM_MspInit+0x7c>)
 800b096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b098:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b09c:	6593      	str	r3, [r2, #88]	; 0x58
 800b09e:	4b17      	ldr	r3, [pc, #92]	; (800b0fc <HAL_LPTIM_MspInit+0x7c>)
 800b0a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0a6:	60fb      	str	r3, [r7, #12]
 800b0a8:	68fb      	ldr	r3, [r7, #12]

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	2041      	movs	r0, #65	; 0x41
 800b0b0:	f7f8 f845 	bl	800313e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800b0b4:	2041      	movs	r0, #65	; 0x41
 800b0b6:	f7f8 f85e 	bl	8003176 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }
}
 800b0ba:	e018      	b.n	800b0ee <HAL_LPTIM_MspInit+0x6e>
  else if(lptimHandle->Instance==LPTIM2)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a0f      	ldr	r2, [pc, #60]	; (800b100 <HAL_LPTIM_MspInit+0x80>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d113      	bne.n	800b0ee <HAL_LPTIM_MspInit+0x6e>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800b0c6:	4a0d      	ldr	r2, [pc, #52]	; (800b0fc <HAL_LPTIM_MspInit+0x7c>)
 800b0c8:	4b0c      	ldr	r3, [pc, #48]	; (800b0fc <HAL_LPTIM_MspInit+0x7c>)
 800b0ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0cc:	f043 0320 	orr.w	r3, r3, #32
 800b0d0:	65d3      	str	r3, [r2, #92]	; 0x5c
 800b0d2:	4b0a      	ldr	r3, [pc, #40]	; (800b0fc <HAL_LPTIM_MspInit+0x7c>)
 800b0d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0d6:	f003 0320 	and.w	r3, r3, #32
 800b0da:	60bb      	str	r3, [r7, #8]
 800b0dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 800b0de:	2200      	movs	r2, #0
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	2042      	movs	r0, #66	; 0x42
 800b0e4:	f7f8 f82b 	bl	800313e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 800b0e8:	2042      	movs	r0, #66	; 0x42
 800b0ea:	f7f8 f844 	bl	8003176 <HAL_NVIC_EnableIRQ>
}
 800b0ee:	bf00      	nop
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop
 800b0f8:	40007c00 	.word	0x40007c00
 800b0fc:	40021000 	.word	0x40021000
 800b100:	40009400 	.word	0x40009400

0800b104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b108:	f7f7 feee 	bl	8002ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b10c:	f000 f81b 	bl	800b146 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b110:	f7ff fda0 	bl	800ac54 <MX_GPIO_Init>
  MX_I2C2_Init();
 800b114:	f7ff fed8 	bl	800aec8 <MX_I2C2_Init>
  MX_LPTIM1_Init();
 800b118:	f7ff ff5a 	bl	800afd0 <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 800b11c:	f7ff ff84 	bl	800b028 <MX_LPTIM2_Init>
//  MX_TIM1_Init();
  MX_TIM2_Init();
 800b120:	f000 f992 	bl	800b448 <MX_TIM2_Init>
  MX_TIM3_Init();
 800b124:	f000 f9f0 	bl	800b508 <MX_TIM3_Init>
  MX_TIM6_Init();
 800b128:	f000 fa4e 	bl	800b5c8 <MX_TIM6_Init>
  //MX_TIM15_Init();
  MX_TIM16_Init();
 800b12c:	f000 fa82 	bl	800b634 <MX_TIM16_Init>
  MX_UART4_Init();
 800b130:	f000 fbda 	bl	800b8e8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800b134:	f000 fc08 	bl	800b948 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b138:	f000 fc38 	bl	800b9ac <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800b13c:	f000 fd28 	bl	800bb90 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
//  TIM15->CCR4 = 255;
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
  app_main();
 800b140:	f7f7 fd16 	bl	8002b70 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800b144:	e7fe      	b.n	800b144 <main+0x40>

0800b146 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b0b0      	sub	sp, #192	; 0xc0
 800b14a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b14c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b150:	2244      	movs	r2, #68	; 0x44
 800b152:	2100      	movs	r1, #0
 800b154:	4618      	mov	r0, r3
 800b156:	f001 face 	bl	800c6f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b15a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b15e:	2200      	movs	r2, #0
 800b160:	601a      	str	r2, [r3, #0]
 800b162:	605a      	str	r2, [r3, #4]
 800b164:	609a      	str	r2, [r3, #8]
 800b166:	60da      	str	r2, [r3, #12]
 800b168:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b16a:	463b      	mov	r3, r7
 800b16c:	2268      	movs	r2, #104	; 0x68
 800b16e:	2100      	movs	r1, #0
 800b170:	4618      	mov	r0, r3
 800b172:	f001 fac0 	bl	800c6f6 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b176:	2301      	movs	r3, #1
 800b178:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b17a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b17e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b182:	2302      	movs	r3, #2
 800b184:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b188:	2303      	movs	r3, #3
 800b18a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800b18e:	2301      	movs	r3, #1
 800b190:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 20;
 800b194:	2314      	movs	r3, #20
 800b196:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800b19a:	2307      	movs	r3, #7
 800b19c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b1ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7fa f94f 	bl	8005454 <HAL_RCC_OscConfig>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d001      	beq.n	800b1c0 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800b1bc:	f000 f84c 	bl	800b258 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b1c0:	230f      	movs	r3, #15
 800b1c2:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b1c4:	2303      	movs	r3, #3
 800b1c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800b1d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b1d8:	2104      	movs	r1, #4
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7fa fce0 	bl	8005ba0 <HAL_RCC_ClockConfig>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d001      	beq.n	800b1ea <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800b1e6:	f000 f837 	bl	800b258 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800b1ea:	f242 638b 	movw	r3, #9867	; 0x268b
 800b1ee:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_LPTIM1
                              |RCC_PERIPHCLK_LPTIM2|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800b200:	2300      	movs	r3, #0
 800b202:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 800b204:	2300      	movs	r3, #0
 800b206:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b208:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b20c:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800b20e:	2303      	movs	r3, #3
 800b210:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800b212:	2301      	movs	r3, #1
 800b214:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800b216:	230c      	movs	r3, #12
 800b218:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800b21a:	2307      	movs	r3, #7
 800b21c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800b21e:	2302      	movs	r3, #2
 800b220:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800b222:	2302      	movs	r3, #2
 800b224:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800b226:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b22a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b22c:	463b      	mov	r3, r7
 800b22e:	4618      	mov	r0, r3
 800b230:	f7fa fec8 	bl	8005fc4 <HAL_RCCEx_PeriphCLKConfig>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d001      	beq.n	800b23e <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800b23a:	f000 f80d 	bl	800b258 <Error_Handler>
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800b23e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b242:	f7fa f8a1 	bl	8005388 <HAL_PWREx_ControlVoltageScaling>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800b24c:	f000 f804 	bl	800b258 <Error_Handler>
  }
}
 800b250:	bf00      	nop
 800b252:	37c0      	adds	r7, #192	; 0xc0
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b258:	b480      	push	{r7}
 800b25a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800b25c:	bf00      	nop
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
	...

0800b268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b26e:	4a0f      	ldr	r2, [pc, #60]	; (800b2ac <HAL_MspInit+0x44>)
 800b270:	4b0e      	ldr	r3, [pc, #56]	; (800b2ac <HAL_MspInit+0x44>)
 800b272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b274:	f043 0301 	orr.w	r3, r3, #1
 800b278:	6613      	str	r3, [r2, #96]	; 0x60
 800b27a:	4b0c      	ldr	r3, [pc, #48]	; (800b2ac <HAL_MspInit+0x44>)
 800b27c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b27e:	f003 0301 	and.w	r3, r3, #1
 800b282:	607b      	str	r3, [r7, #4]
 800b284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b286:	4a09      	ldr	r2, [pc, #36]	; (800b2ac <HAL_MspInit+0x44>)
 800b288:	4b08      	ldr	r3, [pc, #32]	; (800b2ac <HAL_MspInit+0x44>)
 800b28a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b28c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b290:	6593      	str	r3, [r2, #88]	; 0x58
 800b292:	4b06      	ldr	r3, [pc, #24]	; (800b2ac <HAL_MspInit+0x44>)
 800b294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b29a:	603b      	str	r3, [r7, #0]
 800b29c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b29e:	bf00      	nop
 800b2a0:	370c      	adds	r7, #12
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	40021000 	.word	0x40021000

0800b2b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b2b4:	bf00      	nop
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr

0800b2be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b2be:	b480      	push	{r7}
 800b2c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b2c2:	e7fe      	b.n	800b2c2 <HardFault_Handler+0x4>

0800b2c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b2c8:	e7fe      	b.n	800b2c8 <MemManage_Handler+0x4>

0800b2ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b2ce:	e7fe      	b.n	800b2ce <BusFault_Handler+0x4>

0800b2d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b2d4:	e7fe      	b.n	800b2d4 <UsageFault_Handler+0x4>

0800b2d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b2d6:	b480      	push	{r7}
 800b2d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b2da:	bf00      	nop
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b2e8:	bf00      	nop
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b2f2:	b480      	push	{r7}
 800b2f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b2f6:	bf00      	nop
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b304:	f7f7 fe2c 	bl	8002f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  app_1ms();
 800b308:	f7f7 fc66 	bl	8002bd8 <app_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 800b30c:	bf00      	nop
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800b314:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b318:	f7f8 f8f2 	bl	8003500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800b31c:	bf00      	nop
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b324:	4803      	ldr	r0, [pc, #12]	; (800b334 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800b326:	f7fb f9fd 	bl	8006724 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800b32a:	4803      	ldr	r0, [pc, #12]	; (800b338 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800b32c:	f7fb f9fa 	bl	8006724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800b330:	bf00      	nop
 800b332:	bd80      	pop	{r7, pc}
 800b334:	20007918 	.word	0x20007918
 800b338:	20007858 	.word	0x20007858

0800b33c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b340:	4802      	ldr	r0, [pc, #8]	; (800b34c <TIM1_TRG_COM_IRQHandler+0x10>)
 800b342:	f7fb f9ef 	bl	8006724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800b346:	bf00      	nop
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	20007918 	.word	0x20007918

0800b350 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b354:	4802      	ldr	r0, [pc, #8]	; (800b360 <TIM1_CC_IRQHandler+0x10>)
 800b356:	f7fb f9e5 	bl	8006724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800b35a:	bf00      	nop
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	20007918 	.word	0x20007918

0800b364 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b368:	4802      	ldr	r0, [pc, #8]	; (800b374 <TIM2_IRQHandler+0x10>)
 800b36a:	f7fb f9db 	bl	8006724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b36e:	bf00      	nop
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	20007958 	.word	0x20007958

0800b378 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800b37c:	4802      	ldr	r0, [pc, #8]	; (800b388 <TIM3_IRQHandler+0x10>)
 800b37e:	f7fb f9d1 	bl	8006724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800b382:	bf00      	nop
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	20007898 	.word	0x20007898

0800b38c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b390:	4802      	ldr	r0, [pc, #8]	; (800b39c <TIM6_DAC_IRQHandler+0x10>)
 800b392:	f7fb f9c7 	bl	8006724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b396:	bf00      	nop
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	200078d8 	.word	0x200078d8

0800b3a0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800b3a4:	4802      	ldr	r0, [pc, #8]	; (800b3b0 <LPTIM1_IRQHandler+0x10>)
 800b3a6:	f7f8 ffaf 	bl	8004308 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800b3aa:	bf00      	nop
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	20007820 	.word	0x20007820

0800b3b4 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 800b3b8:	4802      	ldr	r0, [pc, #8]	; (800b3c4 <LPTIM2_IRQHandler+0x10>)
 800b3ba:	f7f8 ffa5 	bl	8004308 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 800b3be:	bf00      	nop
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	200077e8 	.word	0x200077e8

0800b3c8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800b3cc:	4802      	ldr	r0, [pc, #8]	; (800b3d8 <USB_IRQHandler+0x10>)
 800b3ce:	f7f9 f977 	bl	80046c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800b3d2:	bf00      	nop
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	20008ddc 	.word	0x20008ddc

0800b3dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b3e0:	4a17      	ldr	r2, [pc, #92]	; (800b440 <SystemInit+0x64>)
 800b3e2:	4b17      	ldr	r3, [pc, #92]	; (800b440 <SystemInit+0x64>)
 800b3e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800b3f0:	4a14      	ldr	r2, [pc, #80]	; (800b444 <SystemInit+0x68>)
 800b3f2:	4b14      	ldr	r3, [pc, #80]	; (800b444 <SystemInit+0x68>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f043 0301 	orr.w	r3, r3, #1
 800b3fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800b3fc:	4b11      	ldr	r3, [pc, #68]	; (800b444 <SystemInit+0x68>)
 800b3fe:	2200      	movs	r2, #0
 800b400:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800b402:	4a10      	ldr	r2, [pc, #64]	; (800b444 <SystemInit+0x68>)
 800b404:	4b0f      	ldr	r3, [pc, #60]	; (800b444 <SystemInit+0x68>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800b40c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800b410:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800b412:	4b0c      	ldr	r3, [pc, #48]	; (800b444 <SystemInit+0x68>)
 800b414:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b418:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b41a:	4a0a      	ldr	r2, [pc, #40]	; (800b444 <SystemInit+0x68>)
 800b41c:	4b09      	ldr	r3, [pc, #36]	; (800b444 <SystemInit+0x68>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b424:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800b426:	4b07      	ldr	r3, [pc, #28]	; (800b444 <SystemInit+0x68>)
 800b428:	2200      	movs	r2, #0
 800b42a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b42c:	4b04      	ldr	r3, [pc, #16]	; (800b440 <SystemInit+0x64>)
 800b42e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b432:	609a      	str	r2, [r3, #8]
#endif
}
 800b434:	bf00      	nop
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	e000ed00 	.word	0xe000ed00
 800b444:	40021000 	.word	0x40021000

0800b448 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b088      	sub	sp, #32
 800b44c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b44e:	f107 0314 	add.w	r3, r7, #20
 800b452:	2200      	movs	r2, #0
 800b454:	601a      	str	r2, [r3, #0]
 800b456:	605a      	str	r2, [r3, #4]
 800b458:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800b45a:	1d3b      	adds	r3, r7, #4
 800b45c:	2200      	movs	r2, #0
 800b45e:	601a      	str	r2, [r3, #0]
 800b460:	605a      	str	r2, [r3, #4]
 800b462:	609a      	str	r2, [r3, #8]
 800b464:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800b466:	4b27      	ldr	r3, [pc, #156]	; (800b504 <MX_TIM2_Init+0xbc>)
 800b468:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b46c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800b46e:	4b25      	ldr	r3, [pc, #148]	; (800b504 <MX_TIM2_Init+0xbc>)
 800b470:	2200      	movs	r2, #0
 800b472:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b474:	4b23      	ldr	r3, [pc, #140]	; (800b504 <MX_TIM2_Init+0xbc>)
 800b476:	2200      	movs	r2, #0
 800b478:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800b47a:	4b22      	ldr	r3, [pc, #136]	; (800b504 <MX_TIM2_Init+0xbc>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b480:	4b20      	ldr	r3, [pc, #128]	; (800b504 <MX_TIM2_Init+0xbc>)
 800b482:	2200      	movs	r2, #0
 800b484:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b486:	4b1f      	ldr	r3, [pc, #124]	; (800b504 <MX_TIM2_Init+0xbc>)
 800b488:	2200      	movs	r2, #0
 800b48a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800b48c:	481d      	ldr	r0, [pc, #116]	; (800b504 <MX_TIM2_Init+0xbc>)
 800b48e:	f7fb f91e 	bl	80066ce <HAL_TIM_IC_Init>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d001      	beq.n	800b49c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800b498:	f7ff fede 	bl	800b258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b49c:	2300      	movs	r3, #0
 800b49e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b4a4:	f107 0314 	add.w	r3, r7, #20
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	4816      	ldr	r0, [pc, #88]	; (800b504 <MX_TIM2_Init+0xbc>)
 800b4ac:	f7fb fc9e 	bl	8006dec <HAL_TIMEx_MasterConfigSynchronization>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d001      	beq.n	800b4ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b4b6:	f7ff fecf 	bl	800b258 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800b4ca:	1d3b      	adds	r3, r7, #4
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	480c      	ldr	r0, [pc, #48]	; (800b504 <MX_TIM2_Init+0xbc>)
 800b4d2:	f7fb fa46 	bl	8006962 <HAL_TIM_IC_ConfigChannel>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d001      	beq.n	800b4e0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800b4dc:	f7ff febc 	bl	800b258 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800b4e0:	2302      	movs	r3, #2
 800b4e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800b4e4:	1d3b      	adds	r3, r7, #4
 800b4e6:	2204      	movs	r2, #4
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	4806      	ldr	r0, [pc, #24]	; (800b504 <MX_TIM2_Init+0xbc>)
 800b4ec:	f7fb fa39 	bl	8006962 <HAL_TIM_IC_ConfigChannel>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800b4f6:	f7ff feaf 	bl	800b258 <Error_Handler>
  }

}
 800b4fa:	bf00      	nop
 800b4fc:	3720      	adds	r7, #32
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	20007958 	.word	0x20007958

0800b508 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b088      	sub	sp, #32
 800b50c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b50e:	f107 0314 	add.w	r3, r7, #20
 800b512:	2200      	movs	r2, #0
 800b514:	601a      	str	r2, [r3, #0]
 800b516:	605a      	str	r2, [r3, #4]
 800b518:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800b51a:	1d3b      	adds	r3, r7, #4
 800b51c:	2200      	movs	r2, #0
 800b51e:	601a      	str	r2, [r3, #0]
 800b520:	605a      	str	r2, [r3, #4]
 800b522:	609a      	str	r2, [r3, #8]
 800b524:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 800b526:	4b26      	ldr	r3, [pc, #152]	; (800b5c0 <MX_TIM3_Init+0xb8>)
 800b528:	4a26      	ldr	r2, [pc, #152]	; (800b5c4 <MX_TIM3_Init+0xbc>)
 800b52a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800b52c:	4b24      	ldr	r3, [pc, #144]	; (800b5c0 <MX_TIM3_Init+0xb8>)
 800b52e:	2200      	movs	r2, #0
 800b530:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b532:	4b23      	ldr	r3, [pc, #140]	; (800b5c0 <MX_TIM3_Init+0xb8>)
 800b534:	2200      	movs	r2, #0
 800b536:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800b538:	4b21      	ldr	r3, [pc, #132]	; (800b5c0 <MX_TIM3_Init+0xb8>)
 800b53a:	2200      	movs	r2, #0
 800b53c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b53e:	4b20      	ldr	r3, [pc, #128]	; (800b5c0 <MX_TIM3_Init+0xb8>)
 800b540:	2200      	movs	r2, #0
 800b542:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b544:	4b1e      	ldr	r3, [pc, #120]	; (800b5c0 <MX_TIM3_Init+0xb8>)
 800b546:	2200      	movs	r2, #0
 800b548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800b54a:	481d      	ldr	r0, [pc, #116]	; (800b5c0 <MX_TIM3_Init+0xb8>)
 800b54c:	f7fb f8bf 	bl	80066ce <HAL_TIM_IC_Init>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d001      	beq.n	800b55a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800b556:	f7ff fe7f 	bl	800b258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b55a:	2300      	movs	r3, #0
 800b55c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b55e:	2300      	movs	r3, #0
 800b560:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b562:	f107 0314 	add.w	r3, r7, #20
 800b566:	4619      	mov	r1, r3
 800b568:	4815      	ldr	r0, [pc, #84]	; (800b5c0 <MX_TIM3_Init+0xb8>)
 800b56a:	f7fb fc3f 	bl	8006dec <HAL_TIMEx_MasterConfigSynchronization>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d001      	beq.n	800b578 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800b574:	f7ff fe70 	bl	800b258 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800b578:	2300      	movs	r3, #0
 800b57a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800b57c:	2301      	movs	r3, #1
 800b57e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800b580:	2300      	movs	r3, #0
 800b582:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800b584:	2300      	movs	r3, #0
 800b586:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800b588:	1d3b      	adds	r3, r7, #4
 800b58a:	2200      	movs	r2, #0
 800b58c:	4619      	mov	r1, r3
 800b58e:	480c      	ldr	r0, [pc, #48]	; (800b5c0 <MX_TIM3_Init+0xb8>)
 800b590:	f7fb f9e7 	bl	8006962 <HAL_TIM_IC_ConfigChannel>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d001      	beq.n	800b59e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800b59a:	f7ff fe5d 	bl	800b258 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800b59e:	2302      	movs	r3, #2
 800b5a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800b5a2:	1d3b      	adds	r3, r7, #4
 800b5a4:	2204      	movs	r2, #4
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	4805      	ldr	r0, [pc, #20]	; (800b5c0 <MX_TIM3_Init+0xb8>)
 800b5aa:	f7fb f9da 	bl	8006962 <HAL_TIM_IC_ConfigChannel>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d001      	beq.n	800b5b8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800b5b4:	f7ff fe50 	bl	800b258 <Error_Handler>
  }

}
 800b5b8:	bf00      	nop
 800b5ba:	3720      	adds	r7, #32
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	20007898 	.word	0x20007898
 800b5c4:	40000400 	.word	0x40000400

0800b5c8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b5ce:	1d3b      	adds	r3, r7, #4
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	605a      	str	r2, [r3, #4]
 800b5d6:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 800b5d8:	4b14      	ldr	r3, [pc, #80]	; (800b62c <MX_TIM6_Init+0x64>)
 800b5da:	4a15      	ldr	r2, [pc, #84]	; (800b630 <MX_TIM6_Init+0x68>)
 800b5dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80;
 800b5de:	4b13      	ldr	r3, [pc, #76]	; (800b62c <MX_TIM6_Init+0x64>)
 800b5e0:	2250      	movs	r2, #80	; 0x50
 800b5e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b5e4:	4b11      	ldr	r3, [pc, #68]	; (800b62c <MX_TIM6_Init+0x64>)
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 92;
 800b5ea:	4b10      	ldr	r3, [pc, #64]	; (800b62c <MX_TIM6_Init+0x64>)
 800b5ec:	225c      	movs	r2, #92	; 0x5c
 800b5ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b5f0:	4b0e      	ldr	r3, [pc, #56]	; (800b62c <MX_TIM6_Init+0x64>)
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800b5f6:	480d      	ldr	r0, [pc, #52]	; (800b62c <MX_TIM6_Init+0x64>)
 800b5f8:	f7fb f83e 	bl	8006678 <HAL_TIM_Base_Init>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d001      	beq.n	800b606 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800b602:	f7ff fe29 	bl	800b258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b606:	2300      	movs	r3, #0
 800b608:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b60a:	2300      	movs	r3, #0
 800b60c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800b60e:	1d3b      	adds	r3, r7, #4
 800b610:	4619      	mov	r1, r3
 800b612:	4806      	ldr	r0, [pc, #24]	; (800b62c <MX_TIM6_Init+0x64>)
 800b614:	f7fb fbea 	bl	8006dec <HAL_TIMEx_MasterConfigSynchronization>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d001      	beq.n	800b622 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800b61e:	f7ff fe1b 	bl	800b258 <Error_Handler>
  }

}
 800b622:	bf00      	nop
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	200078d8 	.word	0x200078d8
 800b630:	40001000 	.word	0x40001000

0800b634 <MX_TIM16_Init>:
  HAL_TIM_MspPostInit(&htim15);

}
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800b638:	4b0f      	ldr	r3, [pc, #60]	; (800b678 <MX_TIM16_Init+0x44>)
 800b63a:	4a10      	ldr	r2, [pc, #64]	; (800b67c <MX_TIM16_Init+0x48>)
 800b63c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800b63e:	4b0e      	ldr	r3, [pc, #56]	; (800b678 <MX_TIM16_Init+0x44>)
 800b640:	2200      	movs	r2, #0
 800b642:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b644:	4b0c      	ldr	r3, [pc, #48]	; (800b678 <MX_TIM16_Init+0x44>)
 800b646:	2200      	movs	r2, #0
 800b648:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 800b64a:	4b0b      	ldr	r3, [pc, #44]	; (800b678 <MX_TIM16_Init+0x44>)
 800b64c:	2200      	movs	r2, #0
 800b64e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b650:	4b09      	ldr	r3, [pc, #36]	; (800b678 <MX_TIM16_Init+0x44>)
 800b652:	2200      	movs	r2, #0
 800b654:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800b656:	4b08      	ldr	r3, [pc, #32]	; (800b678 <MX_TIM16_Init+0x44>)
 800b658:	2200      	movs	r2, #0
 800b65a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b65c:	4b06      	ldr	r3, [pc, #24]	; (800b678 <MX_TIM16_Init+0x44>)
 800b65e:	2200      	movs	r2, #0
 800b660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800b662:	4805      	ldr	r0, [pc, #20]	; (800b678 <MX_TIM16_Init+0x44>)
 800b664:	f7fb f808 	bl	8006678 <HAL_TIM_Base_Init>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d001      	beq.n	800b672 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800b66e:	f7ff fdf3 	bl	800b258 <Error_Handler>
  }

}
 800b672:	bf00      	nop
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	20007998 	.word	0x20007998
 800b67c:	40014400 	.word	0x40014400

0800b680 <HAL_TIM_IC_MspInit>:
  /* USER CODE END TIM1_MspInit 1 */
  }
}

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b08c      	sub	sp, #48	; 0x30
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b688:	f107 031c 	add.w	r3, r7, #28
 800b68c:	2200      	movs	r2, #0
 800b68e:	601a      	str	r2, [r3, #0]
 800b690:	605a      	str	r2, [r3, #4]
 800b692:	609a      	str	r2, [r3, #8]
 800b694:	60da      	str	r2, [r3, #12]
 800b696:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6a0:	d131      	bne.n	800b706 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b6a2:	4a35      	ldr	r2, [pc, #212]	; (800b778 <HAL_TIM_IC_MspInit+0xf8>)
 800b6a4:	4b34      	ldr	r3, [pc, #208]	; (800b778 <HAL_TIM_IC_MspInit+0xf8>)
 800b6a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6a8:	f043 0301 	orr.w	r3, r3, #1
 800b6ac:	6593      	str	r3, [r2, #88]	; 0x58
 800b6ae:	4b32      	ldr	r3, [pc, #200]	; (800b778 <HAL_TIM_IC_MspInit+0xf8>)
 800b6b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6b2:	f003 0301 	and.w	r3, r3, #1
 800b6b6:	61bb      	str	r3, [r7, #24]
 800b6b8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6ba:	4a2f      	ldr	r2, [pc, #188]	; (800b778 <HAL_TIM_IC_MspInit+0xf8>)
 800b6bc:	4b2e      	ldr	r3, [pc, #184]	; (800b778 <HAL_TIM_IC_MspInit+0xf8>)
 800b6be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6c0:	f043 0301 	orr.w	r3, r3, #1
 800b6c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b6c6:	4b2c      	ldr	r3, [pc, #176]	; (800b778 <HAL_TIM_IC_MspInit+0xf8>)
 800b6c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6ca:	f003 0301 	and.w	r3, r3, #1
 800b6ce:	617b      	str	r3, [r7, #20]
 800b6d0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6d6:	2302      	movs	r3, #2
 800b6d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6e6:	f107 031c 	add.w	r3, r7, #28
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b6f0:	f7f7 fd5c 	bl	80031ac <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	201c      	movs	r0, #28
 800b6fa:	f7f7 fd20 	bl	800313e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b6fe:	201c      	movs	r0, #28
 800b700:	f7f7 fd39 	bl	8003176 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800b704:	e034      	b.n	800b770 <HAL_TIM_IC_MspInit+0xf0>
  else if(tim_icHandle->Instance==TIM3)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a1c      	ldr	r2, [pc, #112]	; (800b77c <HAL_TIM_IC_MspInit+0xfc>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d12f      	bne.n	800b770 <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b710:	4a19      	ldr	r2, [pc, #100]	; (800b778 <HAL_TIM_IC_MspInit+0xf8>)
 800b712:	4b19      	ldr	r3, [pc, #100]	; (800b778 <HAL_TIM_IC_MspInit+0xf8>)
 800b714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b716:	f043 0302 	orr.w	r3, r3, #2
 800b71a:	6593      	str	r3, [r2, #88]	; 0x58
 800b71c:	4b16      	ldr	r3, [pc, #88]	; (800b778 <HAL_TIM_IC_MspInit+0xf8>)
 800b71e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b720:	f003 0302 	and.w	r3, r3, #2
 800b724:	613b      	str	r3, [r7, #16]
 800b726:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b728:	4a13      	ldr	r2, [pc, #76]	; (800b778 <HAL_TIM_IC_MspInit+0xf8>)
 800b72a:	4b13      	ldr	r3, [pc, #76]	; (800b778 <HAL_TIM_IC_MspInit+0xf8>)
 800b72c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b72e:	f043 0302 	orr.w	r3, r3, #2
 800b732:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b734:	4b10      	ldr	r3, [pc, #64]	; (800b778 <HAL_TIM_IC_MspInit+0xf8>)
 800b736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b738:	f003 0302 	and.w	r3, r3, #2
 800b73c:	60fb      	str	r3, [r7, #12]
 800b73e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800b740:	2330      	movs	r3, #48	; 0x30
 800b742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b744:	2302      	movs	r3, #2
 800b746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b748:	2300      	movs	r3, #0
 800b74a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b74c:	2300      	movs	r3, #0
 800b74e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b750:	2302      	movs	r3, #2
 800b752:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b754:	f107 031c 	add.w	r3, r7, #28
 800b758:	4619      	mov	r1, r3
 800b75a:	4809      	ldr	r0, [pc, #36]	; (800b780 <HAL_TIM_IC_MspInit+0x100>)
 800b75c:	f7f7 fd26 	bl	80031ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b760:	2200      	movs	r2, #0
 800b762:	2100      	movs	r1, #0
 800b764:	201d      	movs	r0, #29
 800b766:	f7f7 fcea 	bl	800313e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b76a:	201d      	movs	r0, #29
 800b76c:	f7f7 fd03 	bl	8003176 <HAL_NVIC_EnableIRQ>
}
 800b770:	bf00      	nop
 800b772:	3730      	adds	r7, #48	; 0x30
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	40021000 	.word	0x40021000
 800b77c:	40000400 	.word	0x40000400
 800b780:	48000400 	.word	0x48000400

0800b784 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a27      	ldr	r2, [pc, #156]	; (800b830 <HAL_TIM_Base_MspInit+0xac>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d114      	bne.n	800b7c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b796:	4a27      	ldr	r2, [pc, #156]	; (800b834 <HAL_TIM_Base_MspInit+0xb0>)
 800b798:	4b26      	ldr	r3, [pc, #152]	; (800b834 <HAL_TIM_Base_MspInit+0xb0>)
 800b79a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b79c:	f043 0310 	orr.w	r3, r3, #16
 800b7a0:	6593      	str	r3, [r2, #88]	; 0x58
 800b7a2:	4b24      	ldr	r3, [pc, #144]	; (800b834 <HAL_TIM_Base_MspInit+0xb0>)
 800b7a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7a6:	f003 0310 	and.w	r3, r3, #16
 800b7aa:	617b      	str	r3, [r7, #20]
 800b7ac:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	2036      	movs	r0, #54	; 0x36
 800b7b4:	f7f7 fcc3 	bl	800313e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b7b8:	2036      	movs	r0, #54	; 0x36
 800b7ba:	f7f7 fcdc 	bl	8003176 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800b7be:	e032      	b.n	800b826 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM15)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4a1c      	ldr	r2, [pc, #112]	; (800b838 <HAL_TIM_Base_MspInit+0xb4>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d114      	bne.n	800b7f4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800b7ca:	4a1a      	ldr	r2, [pc, #104]	; (800b834 <HAL_TIM_Base_MspInit+0xb0>)
 800b7cc:	4b19      	ldr	r3, [pc, #100]	; (800b834 <HAL_TIM_Base_MspInit+0xb0>)
 800b7ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7d4:	6613      	str	r3, [r2, #96]	; 0x60
 800b7d6:	4b17      	ldr	r3, [pc, #92]	; (800b834 <HAL_TIM_Base_MspInit+0xb0>)
 800b7d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7de:	613b      	str	r3, [r7, #16]
 800b7e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	2018      	movs	r0, #24
 800b7e8:	f7f7 fca9 	bl	800313e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800b7ec:	2018      	movs	r0, #24
 800b7ee:	f7f7 fcc2 	bl	8003176 <HAL_NVIC_EnableIRQ>
}
 800b7f2:	e018      	b.n	800b826 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM16)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a10      	ldr	r2, [pc, #64]	; (800b83c <HAL_TIM_Base_MspInit+0xb8>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d113      	bne.n	800b826 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800b7fe:	4a0d      	ldr	r2, [pc, #52]	; (800b834 <HAL_TIM_Base_MspInit+0xb0>)
 800b800:	4b0c      	ldr	r3, [pc, #48]	; (800b834 <HAL_TIM_Base_MspInit+0xb0>)
 800b802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b808:	6613      	str	r3, [r2, #96]	; 0x60
 800b80a:	4b0a      	ldr	r3, [pc, #40]	; (800b834 <HAL_TIM_Base_MspInit+0xb0>)
 800b80c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b80e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b812:	60fb      	str	r3, [r7, #12]
 800b814:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800b816:	2200      	movs	r2, #0
 800b818:	2100      	movs	r1, #0
 800b81a:	2019      	movs	r0, #25
 800b81c:	f7f7 fc8f 	bl	800313e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800b820:	2019      	movs	r0, #25
 800b822:	f7f7 fca8 	bl	8003176 <HAL_NVIC_EnableIRQ>
}
 800b826:	bf00      	nop
 800b828:	3718      	adds	r7, #24
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	40001000 	.word	0x40001000
 800b834:	40021000 	.word	0x40021000
 800b838:	40014000 	.word	0x40014000
 800b83c:	40014400 	.word	0x40014400

0800b840 <tim_setNewTimeAndStart>:
  /* USER CODE END TIM16_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void tim_setNewTimeAndStart(TIM_TypeDef *tim, uint32_t time){
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
	tim->CR1 &= ~TIM_CR1_CEN;	//Stop counter
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f023 0201 	bic.w	r2, r3, #1
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	601a      	str	r2, [r3, #0]
	tim->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f043 0202 	orr.w	r2, r3, #2
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	601a      	str	r2, [r3, #0]
	tim->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	691b      	ldr	r3, [r3, #16]
 800b866:	f023 0201 	bic.w	r2, r3, #1
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	611a      	str	r2, [r3, #16]
	tim->ARR = time;				//Load new time
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	683a      	ldr	r2, [r7, #0]
 800b872:	62da      	str	r2, [r3, #44]	; 0x2c
	tim->EGR |= TIM_EGR_UG;		//Force reload of shadow register -> Start from beginning
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	695b      	ldr	r3, [r3, #20]
 800b878:	f043 0201 	orr.w	r2, r3, #1
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	615a      	str	r2, [r3, #20]
	tim->CR1 &= ~TIM_CR1_UDIS;	//Allow new updates to be triggered
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f023 0202 	bic.w	r2, r3, #2
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	601a      	str	r2, [r3, #0]
	tim->DIER |= TIM_DIER_UIE;	//Enable update interrupts
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	f043 0201 	orr.w	r2, r3, #1
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	60da      	str	r2, [r3, #12]
	tim->CR1 |= TIM_CR1_CEN;		//Enable counter
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f043 0201 	orr.w	r2, r3, #1
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	601a      	str	r2, [r3, #0]
}
 800b8a4:	bf00      	nop
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <tim_stop>:
void tim_stop(TIM_TypeDef *tim){
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
	tim->CR1 &= ~TIM_CR1_CEN;	//Stop counter
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f023 0201 	bic.w	r2, r3, #1
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	601a      	str	r2, [r3, #0]
	tim->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f043 0202 	orr.w	r2, r3, #2
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	601a      	str	r2, [r3, #0]
	tim->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	691b      	ldr	r3, [r3, #16]
 800b8d4:	f023 0201 	bic.w	r2, r3, #1
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	611a      	str	r2, [r3, #16]
}
 800b8dc:	bf00      	nop
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b8ec:	4b14      	ldr	r3, [pc, #80]	; (800b940 <MX_UART4_Init+0x58>)
 800b8ee:	4a15      	ldr	r2, [pc, #84]	; (800b944 <MX_UART4_Init+0x5c>)
 800b8f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b8f2:	4b13      	ldr	r3, [pc, #76]	; (800b940 <MX_UART4_Init+0x58>)
 800b8f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b8f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b8fa:	4b11      	ldr	r3, [pc, #68]	; (800b940 <MX_UART4_Init+0x58>)
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b900:	4b0f      	ldr	r3, [pc, #60]	; (800b940 <MX_UART4_Init+0x58>)
 800b902:	2200      	movs	r2, #0
 800b904:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b906:	4b0e      	ldr	r3, [pc, #56]	; (800b940 <MX_UART4_Init+0x58>)
 800b908:	2200      	movs	r2, #0
 800b90a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b90c:	4b0c      	ldr	r3, [pc, #48]	; (800b940 <MX_UART4_Init+0x58>)
 800b90e:	220c      	movs	r2, #12
 800b910:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b912:	4b0b      	ldr	r3, [pc, #44]	; (800b940 <MX_UART4_Init+0x58>)
 800b914:	2200      	movs	r2, #0
 800b916:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b918:	4b09      	ldr	r3, [pc, #36]	; (800b940 <MX_UART4_Init+0x58>)
 800b91a:	2200      	movs	r2, #0
 800b91c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b91e:	4b08      	ldr	r3, [pc, #32]	; (800b940 <MX_UART4_Init+0x58>)
 800b920:	2200      	movs	r2, #0
 800b922:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b924:	4b06      	ldr	r3, [pc, #24]	; (800b940 <MX_UART4_Init+0x58>)
 800b926:	2200      	movs	r2, #0
 800b928:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b92a:	4805      	ldr	r0, [pc, #20]	; (800b940 <MX_UART4_Init+0x58>)
 800b92c:	f7fb fad2 	bl	8006ed4 <HAL_UART_Init>
 800b930:	4603      	mov	r3, r0
 800b932:	2b00      	cmp	r3, #0
 800b934:	d001      	beq.n	800b93a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800b936:	f7ff fc8f 	bl	800b258 <Error_Handler>
  }

}
 800b93a:	bf00      	nop
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	20007a50 	.word	0x20007a50
 800b944:	40004c00 	.word	0x40004c00

0800b948 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800b94c:	4b14      	ldr	r3, [pc, #80]	; (800b9a0 <MX_USART1_UART_Init+0x58>)
 800b94e:	4a15      	ldr	r2, [pc, #84]	; (800b9a4 <MX_USART1_UART_Init+0x5c>)
 800b950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 800b952:	4b13      	ldr	r3, [pc, #76]	; (800b9a0 <MX_USART1_UART_Init+0x58>)
 800b954:	4a14      	ldr	r2, [pc, #80]	; (800b9a8 <MX_USART1_UART_Init+0x60>)
 800b956:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b958:	4b11      	ldr	r3, [pc, #68]	; (800b9a0 <MX_USART1_UART_Init+0x58>)
 800b95a:	2200      	movs	r2, #0
 800b95c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 800b95e:	4b10      	ldr	r3, [pc, #64]	; (800b9a0 <MX_USART1_UART_Init+0x58>)
 800b960:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b964:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b966:	4b0e      	ldr	r3, [pc, #56]	; (800b9a0 <MX_USART1_UART_Init+0x58>)
 800b968:	2200      	movs	r2, #0
 800b96a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b96c:	4b0c      	ldr	r3, [pc, #48]	; (800b9a0 <MX_USART1_UART_Init+0x58>)
 800b96e:	220c      	movs	r2, #12
 800b970:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b972:	4b0b      	ldr	r3, [pc, #44]	; (800b9a0 <MX_USART1_UART_Init+0x58>)
 800b974:	2200      	movs	r2, #0
 800b976:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b978:	4b09      	ldr	r3, [pc, #36]	; (800b9a0 <MX_USART1_UART_Init+0x58>)
 800b97a:	2200      	movs	r2, #0
 800b97c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b97e:	4b08      	ldr	r3, [pc, #32]	; (800b9a0 <MX_USART1_UART_Init+0x58>)
 800b980:	2200      	movs	r2, #0
 800b982:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b984:	4b06      	ldr	r3, [pc, #24]	; (800b9a0 <MX_USART1_UART_Init+0x58>)
 800b986:	2200      	movs	r2, #0
 800b988:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b98a:	4805      	ldr	r0, [pc, #20]	; (800b9a0 <MX_USART1_UART_Init+0x58>)
 800b98c:	f7fb faa2 	bl	8006ed4 <HAL_UART_Init>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d001      	beq.n	800b99a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800b996:	f7ff fc5f 	bl	800b258 <Error_Handler>
  }

}
 800b99a:	bf00      	nop
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	200079d8 	.word	0x200079d8
 800b9a4:	40013800 	.word	0x40013800
 800b9a8:	0003d090 	.word	0x0003d090

0800b9ac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800b9b0:	4b14      	ldr	r3, [pc, #80]	; (800ba04 <MX_USART2_UART_Init+0x58>)
 800b9b2:	4a15      	ldr	r2, [pc, #84]	; (800ba08 <MX_USART2_UART_Init+0x5c>)
 800b9b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 800b9b6:	4b13      	ldr	r3, [pc, #76]	; (800ba04 <MX_USART2_UART_Init+0x58>)
 800b9b8:	4a14      	ldr	r2, [pc, #80]	; (800ba0c <MX_USART2_UART_Init+0x60>)
 800b9ba:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b9bc:	4b11      	ldr	r3, [pc, #68]	; (800ba04 <MX_USART2_UART_Init+0x58>)
 800b9be:	2200      	movs	r2, #0
 800b9c0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800b9c2:	4b10      	ldr	r3, [pc, #64]	; (800ba04 <MX_USART2_UART_Init+0x58>)
 800b9c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b9c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b9ca:	4b0e      	ldr	r3, [pc, #56]	; (800ba04 <MX_USART2_UART_Init+0x58>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b9d0:	4b0c      	ldr	r3, [pc, #48]	; (800ba04 <MX_USART2_UART_Init+0x58>)
 800b9d2:	220c      	movs	r2, #12
 800b9d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b9d6:	4b0b      	ldr	r3, [pc, #44]	; (800ba04 <MX_USART2_UART_Init+0x58>)
 800b9d8:	2200      	movs	r2, #0
 800b9da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b9dc:	4b09      	ldr	r3, [pc, #36]	; (800ba04 <MX_USART2_UART_Init+0x58>)
 800b9de:	2200      	movs	r2, #0
 800b9e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b9e2:	4b08      	ldr	r3, [pc, #32]	; (800ba04 <MX_USART2_UART_Init+0x58>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b9e8:	4b06      	ldr	r3, [pc, #24]	; (800ba04 <MX_USART2_UART_Init+0x58>)
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b9ee:	4805      	ldr	r0, [pc, #20]	; (800ba04 <MX_USART2_UART_Init+0x58>)
 800b9f0:	f7fb fa70 	bl	8006ed4 <HAL_UART_Init>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800b9fa:	f7ff fc2d 	bl	800b258 <Error_Handler>
  }

}
 800b9fe:	bf00      	nop
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	20007ac8 	.word	0x20007ac8
 800ba08:	40004400 	.word	0x40004400
 800ba0c:	0003d090 	.word	0x0003d090

0800ba10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b08e      	sub	sp, #56	; 0x38
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	601a      	str	r2, [r3, #0]
 800ba20:	605a      	str	r2, [r3, #4]
 800ba22:	609a      	str	r2, [r3, #8]
 800ba24:	60da      	str	r2, [r3, #12]
 800ba26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a52      	ldr	r2, [pc, #328]	; (800bb78 <HAL_UART_MspInit+0x168>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d131      	bne.n	800ba96 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800ba32:	4a52      	ldr	r2, [pc, #328]	; (800bb7c <HAL_UART_MspInit+0x16c>)
 800ba34:	4b51      	ldr	r3, [pc, #324]	; (800bb7c <HAL_UART_MspInit+0x16c>)
 800ba36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba3c:	6593      	str	r3, [r2, #88]	; 0x58
 800ba3e:	4b4f      	ldr	r3, [pc, #316]	; (800bb7c <HAL_UART_MspInit+0x16c>)
 800ba40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba46:	623b      	str	r3, [r7, #32]
 800ba48:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ba4a:	4a4c      	ldr	r2, [pc, #304]	; (800bb7c <HAL_UART_MspInit+0x16c>)
 800ba4c:	4b4b      	ldr	r3, [pc, #300]	; (800bb7c <HAL_UART_MspInit+0x16c>)
 800ba4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba50:	f043 0304 	orr.w	r3, r3, #4
 800ba54:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba56:	4b49      	ldr	r3, [pc, #292]	; (800bb7c <HAL_UART_MspInit+0x16c>)
 800ba58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba5a:	f003 0304 	and.w	r3, r3, #4
 800ba5e:	61fb      	str	r3, [r7, #28]
 800ba60:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800ba62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ba66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba68:	2302      	movs	r3, #2
 800ba6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba70:	2303      	movs	r3, #3
 800ba72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800ba74:	2308      	movs	r3, #8
 800ba76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ba78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	4840      	ldr	r0, [pc, #256]	; (800bb80 <HAL_UART_MspInit+0x170>)
 800ba80:	f7f7 fb94 	bl	80031ac <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800ba84:	2200      	movs	r2, #0
 800ba86:	2100      	movs	r1, #0
 800ba88:	2034      	movs	r0, #52	; 0x34
 800ba8a:	f7f7 fb58 	bl	800313e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800ba8e:	2034      	movs	r0, #52	; 0x34
 800ba90:	f7f7 fb71 	bl	8003176 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800ba94:	e06b      	b.n	800bb6e <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART1)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a3a      	ldr	r2, [pc, #232]	; (800bb84 <HAL_UART_MspInit+0x174>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d130      	bne.n	800bb02 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 800baa0:	4a36      	ldr	r2, [pc, #216]	; (800bb7c <HAL_UART_MspInit+0x16c>)
 800baa2:	4b36      	ldr	r3, [pc, #216]	; (800bb7c <HAL_UART_MspInit+0x16c>)
 800baa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800baa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800baaa:	6613      	str	r3, [r2, #96]	; 0x60
 800baac:	4b33      	ldr	r3, [pc, #204]	; (800bb7c <HAL_UART_MspInit+0x16c>)
 800baae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bab4:	61bb      	str	r3, [r7, #24]
 800bab6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bab8:	4a30      	ldr	r2, [pc, #192]	; (800bb7c <HAL_UART_MspInit+0x16c>)
 800baba:	4b30      	ldr	r3, [pc, #192]	; (800bb7c <HAL_UART_MspInit+0x16c>)
 800babc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800babe:	f043 0302 	orr.w	r3, r3, #2
 800bac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bac4:	4b2d      	ldr	r3, [pc, #180]	; (800bb7c <HAL_UART_MspInit+0x16c>)
 800bac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bac8:	f003 0302 	and.w	r3, r3, #2
 800bacc:	617b      	str	r3, [r7, #20]
 800bace:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800bad0:	23c0      	movs	r3, #192	; 0xc0
 800bad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bad4:	2302      	movs	r3, #2
 800bad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bad8:	2300      	movs	r3, #0
 800bada:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800badc:	2303      	movs	r3, #3
 800bade:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800bae0:	2307      	movs	r3, #7
 800bae2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bae8:	4619      	mov	r1, r3
 800baea:	4827      	ldr	r0, [pc, #156]	; (800bb88 <HAL_UART_MspInit+0x178>)
 800baec:	f7f7 fb5e 	bl	80031ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800baf0:	2200      	movs	r2, #0
 800baf2:	2100      	movs	r1, #0
 800baf4:	2025      	movs	r0, #37	; 0x25
 800baf6:	f7f7 fb22 	bl	800313e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800bafa:	2025      	movs	r0, #37	; 0x25
 800bafc:	f7f7 fb3b 	bl	8003176 <HAL_NVIC_EnableIRQ>
}
 800bb00:	e035      	b.n	800bb6e <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART2)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a21      	ldr	r2, [pc, #132]	; (800bb8c <HAL_UART_MspInit+0x17c>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d130      	bne.n	800bb6e <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800bb0c:	4a1b      	ldr	r2, [pc, #108]	; (800bb7c <HAL_UART_MspInit+0x16c>)
 800bb0e:	4b1b      	ldr	r3, [pc, #108]	; (800bb7c <HAL_UART_MspInit+0x16c>)
 800bb10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb16:	6593      	str	r3, [r2, #88]	; 0x58
 800bb18:	4b18      	ldr	r3, [pc, #96]	; (800bb7c <HAL_UART_MspInit+0x16c>)
 800bb1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb20:	613b      	str	r3, [r7, #16]
 800bb22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb24:	4a15      	ldr	r2, [pc, #84]	; (800bb7c <HAL_UART_MspInit+0x16c>)
 800bb26:	4b15      	ldr	r3, [pc, #84]	; (800bb7c <HAL_UART_MspInit+0x16c>)
 800bb28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb2a:	f043 0301 	orr.w	r3, r3, #1
 800bb2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bb30:	4b12      	ldr	r3, [pc, #72]	; (800bb7c <HAL_UART_MspInit+0x16c>)
 800bb32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb34:	f003 0301 	and.w	r3, r3, #1
 800bb38:	60fb      	str	r3, [r7, #12]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800bb3c:	230c      	movs	r3, #12
 800bb3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb40:	2302      	movs	r3, #2
 800bb42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb44:	2300      	movs	r3, #0
 800bb46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb48:	2303      	movs	r3, #3
 800bb4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800bb4c:	2307      	movs	r3, #7
 800bb4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb54:	4619      	mov	r1, r3
 800bb56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bb5a:	f7f7 fb27 	bl	80031ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800bb5e:	2200      	movs	r2, #0
 800bb60:	2100      	movs	r1, #0
 800bb62:	2026      	movs	r0, #38	; 0x26
 800bb64:	f7f7 faeb 	bl	800313e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800bb68:	2026      	movs	r0, #38	; 0x26
 800bb6a:	f7f7 fb04 	bl	8003176 <HAL_NVIC_EnableIRQ>
}
 800bb6e:	bf00      	nop
 800bb70:	3738      	adds	r7, #56	; 0x38
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	40004c00 	.word	0x40004c00
 800bb7c:	40021000 	.word	0x40021000
 800bb80:	48000800 	.word	0x48000800
 800bb84:	40013800 	.word	0x40013800
 800bb88:	48000400 	.word	0x48000400
 800bb8c:	40004400 	.word	0x40004400

0800bb90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800bb94:	2200      	movs	r2, #0
 800bb96:	490b      	ldr	r1, [pc, #44]	; (800bbc4 <MX_USB_DEVICE_Init+0x34>)
 800bb98:	480b      	ldr	r0, [pc, #44]	; (800bbc8 <MX_USB_DEVICE_Init+0x38>)
 800bb9a:	f7fe f825 	bl	8009be8 <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 800bb9e:	490b      	ldr	r1, [pc, #44]	; (800bbcc <MX_USB_DEVICE_Init+0x3c>)
 800bba0:	4809      	ldr	r0, [pc, #36]	; (800bbc8 <MX_USB_DEVICE_Init+0x38>)
 800bba2:	f7fe f84c 	bl	8009c3e <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800bba6:	490a      	ldr	r1, [pc, #40]	; (800bbd0 <MX_USB_DEVICE_Init+0x40>)
 800bba8:	4807      	ldr	r0, [pc, #28]	; (800bbc8 <MX_USB_DEVICE_Init+0x38>)
 800bbaa:	f7fd ff7f 	bl	8009aac <USBD_CDC_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 800bbae:	4806      	ldr	r0, [pc, #24]	; (800bbc8 <MX_USB_DEVICE_Init+0x38>)
 800bbb0:	f000 fc70 	bl	800c494 <USBD_LL_BatteryCharging>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d002      	beq.n	800bbc0 <MX_USB_DEVICE_Init+0x30>
  USBD_Start(&hUsbDeviceFS);
 800bbba:	4803      	ldr	r0, [pc, #12]	; (800bbc8 <MX_USB_DEVICE_Init+0x38>)
 800bbbc:	f7fe f859 	bl	8009c72 <USBD_Start>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bbc0:	bf00      	nop
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	20001290 	.word	0x20001290
 800bbc8:	20007b40 	.word	0x20007b40
 800bbcc:	20001178 	.word	0x20001178
 800bbd0:	20001280 	.word	0x20001280

0800bbd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bbd8:	2200      	movs	r2, #0
 800bbda:	4905      	ldr	r1, [pc, #20]	; (800bbf0 <CDC_Init_FS+0x1c>)
 800bbdc:	4805      	ldr	r0, [pc, #20]	; (800bbf4 <CDC_Init_FS+0x20>)
 800bbde:	f7fd ff7c 	bl	8009ada <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bbe2:	4905      	ldr	r1, [pc, #20]	; (800bbf8 <CDC_Init_FS+0x24>)
 800bbe4:	4803      	ldr	r0, [pc, #12]	; (800bbf4 <CDC_Init_FS+0x20>)
 800bbe6:	f7fd ff92 	bl	8009b0e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bbea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	200085dc 	.word	0x200085dc
 800bbf4:	20007b40 	.word	0x20007b40
 800bbf8:	20007ddc 	.word	0x20007ddc

0800bbfc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bc00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	4603      	mov	r3, r0
 800bc14:	6039      	str	r1, [r7, #0]
 800bc16:	71fb      	strb	r3, [r7, #7]
 800bc18:	4613      	mov	r3, r2
 800bc1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bc1c:	79fb      	ldrb	r3, [r7, #7]
 800bc1e:	2b23      	cmp	r3, #35	; 0x23
 800bc20:	d84a      	bhi.n	800bcb8 <CDC_Control_FS+0xac>
 800bc22:	a201      	add	r2, pc, #4	; (adr r2, 800bc28 <CDC_Control_FS+0x1c>)
 800bc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc28:	0800bcb9 	.word	0x0800bcb9
 800bc2c:	0800bcb9 	.word	0x0800bcb9
 800bc30:	0800bcb9 	.word	0x0800bcb9
 800bc34:	0800bcb9 	.word	0x0800bcb9
 800bc38:	0800bcb9 	.word	0x0800bcb9
 800bc3c:	0800bcb9 	.word	0x0800bcb9
 800bc40:	0800bcb9 	.word	0x0800bcb9
 800bc44:	0800bcb9 	.word	0x0800bcb9
 800bc48:	0800bcb9 	.word	0x0800bcb9
 800bc4c:	0800bcb9 	.word	0x0800bcb9
 800bc50:	0800bcb9 	.word	0x0800bcb9
 800bc54:	0800bcb9 	.word	0x0800bcb9
 800bc58:	0800bcb9 	.word	0x0800bcb9
 800bc5c:	0800bcb9 	.word	0x0800bcb9
 800bc60:	0800bcb9 	.word	0x0800bcb9
 800bc64:	0800bcb9 	.word	0x0800bcb9
 800bc68:	0800bcb9 	.word	0x0800bcb9
 800bc6c:	0800bcb9 	.word	0x0800bcb9
 800bc70:	0800bcb9 	.word	0x0800bcb9
 800bc74:	0800bcb9 	.word	0x0800bcb9
 800bc78:	0800bcb9 	.word	0x0800bcb9
 800bc7c:	0800bcb9 	.word	0x0800bcb9
 800bc80:	0800bcb9 	.word	0x0800bcb9
 800bc84:	0800bcb9 	.word	0x0800bcb9
 800bc88:	0800bcb9 	.word	0x0800bcb9
 800bc8c:	0800bcb9 	.word	0x0800bcb9
 800bc90:	0800bcb9 	.word	0x0800bcb9
 800bc94:	0800bcb9 	.word	0x0800bcb9
 800bc98:	0800bcb9 	.word	0x0800bcb9
 800bc9c:	0800bcb9 	.word	0x0800bcb9
 800bca0:	0800bcb9 	.word	0x0800bcb9
 800bca4:	0800bcb9 	.word	0x0800bcb9
 800bca8:	0800bcb9 	.word	0x0800bcb9
 800bcac:	0800bcb9 	.word	0x0800bcb9
 800bcb0:	0800bcb9 	.word	0x0800bcb9
 800bcb4:	0800bcb9 	.word	0x0800bcb9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bcb8:	bf00      	nop
  }

  return (USBD_OK);
 800bcba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(myUSBRxCallback) myUSBRxCallback((char *)Buf, *Len);
 800bcd2:	4b0c      	ldr	r3, [pc, #48]	; (800bd04 <CDC_Receive_FS+0x3c>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d007      	beq.n	800bcea <CDC_Receive_FS+0x22>
 800bcda:	4b0a      	ldr	r3, [pc, #40]	; (800bd04 <CDC_Receive_FS+0x3c>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	683a      	ldr	r2, [r7, #0]
 800bce0:	6812      	ldr	r2, [r2, #0]
 800bce2:	b292      	uxth	r2, r2
 800bce4:	4611      	mov	r1, r2
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	4798      	blx	r3
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bcea:	6879      	ldr	r1, [r7, #4]
 800bcec:	4806      	ldr	r0, [pc, #24]	; (800bd08 <CDC_Receive_FS+0x40>)
 800bcee:	f7fd ff0e 	bl	8009b0e <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bcf2:	4805      	ldr	r0, [pc, #20]	; (800bd08 <CDC_Receive_FS+0x40>)
 800bcf4:	f7fd ff4e 	bl	8009b94 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800bcf8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3708      	adds	r7, #8
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	20007568 	.word	0x20007568
 800bd08:	20007b40 	.word	0x20007b40

0800bd0c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	460b      	mov	r3, r1
 800bd16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bd1c:	4b0d      	ldr	r3, [pc, #52]	; (800bd54 <CDC_Transmit_FS+0x48>)
 800bd1e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bd22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d001      	beq.n	800bd32 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e00b      	b.n	800bd4a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bd32:	887b      	ldrh	r3, [r7, #2]
 800bd34:	461a      	mov	r2, r3
 800bd36:	6879      	ldr	r1, [r7, #4]
 800bd38:	4806      	ldr	r0, [pc, #24]	; (800bd54 <CDC_Transmit_FS+0x48>)
 800bd3a:	f7fd fece 	bl	8009ada <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bd3e:	4805      	ldr	r0, [pc, #20]	; (800bd54 <CDC_Transmit_FS+0x48>)
 800bd40:	f7fd fef9 	bl	8009b36 <USBD_CDC_TransmitPacket>
 800bd44:	4603      	mov	r3, r0
 800bd46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bd48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	20007b40 	.word	0x20007b40

0800bd58 <usb_registerRxCallback>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void usb_registerRxCallback(usb_rxCallback callback){
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
	myUSBRxCallback = callback;
 800bd60:	4a04      	ldr	r2, [pc, #16]	; (800bd74 <usb_registerRxCallback+0x1c>)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6013      	str	r3, [r2, #0]
}
 800bd66:	bf00      	nop
 800bd68:	370c      	adds	r7, #12
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr
 800bd72:	bf00      	nop
 800bd74:	20007568 	.word	0x20007568

0800bd78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b088      	sub	sp, #32
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a16      	ldr	r2, [pc, #88]	; (800bde0 <HAL_PCD_MspInit+0x68>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d125      	bne.n	800bdd6 <HAL_PCD_MspInit+0x5e>
  
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bd8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bd8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd90:	2302      	movs	r3, #2
 800bd92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd94:	2300      	movs	r3, #0
 800bd96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd98:	2303      	movs	r3, #3
 800bd9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800bd9c:	230a      	movs	r3, #10
 800bd9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bda0:	f107 030c 	add.w	r3, r7, #12
 800bda4:	4619      	mov	r1, r3
 800bda6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bdaa:	f7f7 f9ff 	bl	80031ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bdae:	4a0d      	ldr	r2, [pc, #52]	; (800bde4 <HAL_PCD_MspInit+0x6c>)
 800bdb0:	4b0c      	ldr	r3, [pc, #48]	; (800bde4 <HAL_PCD_MspInit+0x6c>)
 800bdb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bdb8:	6593      	str	r3, [r2, #88]	; 0x58
 800bdba:	4b0a      	ldr	r3, [pc, #40]	; (800bde4 <HAL_PCD_MspInit+0x6c>)
 800bdbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bdc2:	60bb      	str	r3, [r7, #8]
 800bdc4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	2100      	movs	r1, #0
 800bdca:	2043      	movs	r0, #67	; 0x43
 800bdcc:	f7f7 f9b7 	bl	800313e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800bdd0:	2043      	movs	r0, #67	; 0x43
 800bdd2:	f7f7 f9d0 	bl	8003176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bdd6:	bf00      	nop
 800bdd8:	3720      	adds	r7, #32
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	40006800 	.word	0x40006800
 800bde4:	40021000 	.word	0x40021000

0800bde8 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	4610      	mov	r0, r2
 800be00:	f7fd ff80 	bl	8009d04 <USBD_LL_SetupStage>
}
 800be04:	bf00      	nop
 800be06:	3708      	adds	r7, #8
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	460b      	mov	r3, r1
 800be16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 0470 	ldr.w	r0, [r3, #1136]	; 0x470
 800be1e:	78fb      	ldrb	r3, [r7, #3]
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	015b      	lsls	r3, r3, #5
 800be24:	4413      	add	r3, r2
 800be26:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	78fb      	ldrb	r3, [r7, #3]
 800be2e:	4619      	mov	r1, r3
 800be30:	f7fd ffb3 	bl	8009d9a <USBD_LL_DataOutStage>
}
 800be34:	bf00      	nop
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	460b      	mov	r3, r1
 800be46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 0470 	ldr.w	r0, [r3, #1136]	; 0x470
 800be4e:	78fb      	ldrb	r3, [r7, #3]
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	015b      	lsls	r3, r3, #5
 800be54:	4413      	add	r3, r2
 800be56:	333c      	adds	r3, #60	; 0x3c
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	78fb      	ldrb	r3, [r7, #3]
 800be5c:	4619      	mov	r1, r3
 800be5e:	f7fe f809 	bl	8009e74 <USBD_LL_DataInStage>
}
 800be62:	bf00      	nop
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}

0800be6a <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800be6a:	b580      	push	{r7, lr}
 800be6c:	b082      	sub	sp, #8
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fe f917 	bl	800a0ac <USBD_LL_SOF>
}
 800be7e:	bf00      	nop
 800be80:	3708      	adds	r7, #8
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800be86:	b580      	push	{r7, lr}
 800be88:	b084      	sub	sp, #16
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be8e:	2301      	movs	r3, #1
 800be90:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	2b02      	cmp	r3, #2
 800be98:	d102      	bne.n	800bea0 <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800be9a:	2301      	movs	r3, #1
 800be9c:	73fb      	strb	r3, [r7, #15]
    break;
 800be9e:	e002      	b.n	800bea6 <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;
 800bea0:	2301      	movs	r3, #1
 800bea2:	73fb      	strb	r3, [r7, #15]
    break;    
 800bea4:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800beac:	7bfa      	ldrb	r2, [r7, #15]
 800beae:	4611      	mov	r1, r2
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7fe f8c5 	bl	800a040 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7fe f87e 	bl	8009fbe <USBD_LL_Reset>
}
 800bec2:	bf00      	nop
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
	...

0800becc <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800beda:	4618      	mov	r0, r3
 800bedc:	f7fe f8c0 	bl	800a060 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	699b      	ldr	r3, [r3, #24]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d005      	beq.n	800bef4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bee8:	4a04      	ldr	r2, [pc, #16]	; (800befc <HAL_PCD_SuspendCallback+0x30>)
 800beea:	4b04      	ldr	r3, [pc, #16]	; (800befc <HAL_PCD_SuspendCallback+0x30>)
 800beec:	691b      	ldr	r3, [r3, #16]
 800beee:	f043 0306 	orr.w	r3, r3, #6
 800bef2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bef4:	bf00      	nop
 800bef6:	3708      	adds	r7, #8
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	e000ed00 	.word	0xe000ed00

0800bf00 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b082      	sub	sp, #8
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	699b      	ldr	r3, [r3, #24]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d007      	beq.n	800bf20 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf10:	4a08      	ldr	r2, [pc, #32]	; (800bf34 <HAL_PCD_ResumeCallback+0x34>)
 800bf12:	4b08      	ldr	r3, [pc, #32]	; (800bf34 <HAL_PCD_ResumeCallback+0x34>)
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	f023 0306 	bic.w	r3, r3, #6
 800bf1a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bf1c:	f000 fab4 	bl	800c488 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7fe f8af 	bl	800a08a <USBD_LL_Resume>
}
 800bf2c:	bf00      	nop
 800bf2e:	3708      	adds	r7, #8
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	e000ed00 	.word	0xe000ed00

0800bf38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800bf40:	f7f9 fa78 	bl	8005434 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bf44:	4a2c      	ldr	r2, [pc, #176]	; (800bff8 <USBD_LL_Init+0xc0>)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
  pdev->pData = &hpcd_USB_FS;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	4a2a      	ldr	r2, [pc, #168]	; (800bff8 <USBD_LL_Init+0xc0>)
 800bf50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800bf54:	4b28      	ldr	r3, [pc, #160]	; (800bff8 <USBD_LL_Init+0xc0>)
 800bf56:	4a29      	ldr	r2, [pc, #164]	; (800bffc <USBD_LL_Init+0xc4>)
 800bf58:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bf5a:	4b27      	ldr	r3, [pc, #156]	; (800bff8 <USBD_LL_Init+0xc0>)
 800bf5c:	2208      	movs	r2, #8
 800bf5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bf60:	4b25      	ldr	r3, [pc, #148]	; (800bff8 <USBD_LL_Init+0xc0>)
 800bf62:	2202      	movs	r2, #2
 800bf64:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800bf66:	4b24      	ldr	r3, [pc, #144]	; (800bff8 <USBD_LL_Init+0xc0>)
 800bf68:	2200      	movs	r2, #0
 800bf6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bf6c:	4b22      	ldr	r3, [pc, #136]	; (800bff8 <USBD_LL_Init+0xc0>)
 800bf6e:	2202      	movs	r2, #2
 800bf70:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bf72:	4b21      	ldr	r3, [pc, #132]	; (800bff8 <USBD_LL_Init+0xc0>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bf78:	4b1f      	ldr	r3, [pc, #124]	; (800bff8 <USBD_LL_Init+0xc0>)
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bf7e:	4b1e      	ldr	r3, [pc, #120]	; (800bff8 <USBD_LL_Init+0xc0>)
 800bf80:	2200      	movs	r2, #0
 800bf82:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bf84:	4b1c      	ldr	r3, [pc, #112]	; (800bff8 <USBD_LL_Init+0xc0>)
 800bf86:	2200      	movs	r2, #0
 800bf88:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bf8a:	481b      	ldr	r0, [pc, #108]	; (800bff8 <USBD_LL_Init+0xc0>)
 800bf8c:	f7f8 fa9d 	bl	80044ca <HAL_PCD_Init>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d001      	beq.n	800bf9a <USBD_LL_Init+0x62>
  {
    Error_Handler( );
 800bf96:	f7ff f95f 	bl	800b258 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bfa0:	2318      	movs	r3, #24
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	f7f9 f953 	bl	8005250 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bfb0:	2358      	movs	r3, #88	; 0x58
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	2180      	movs	r1, #128	; 0x80
 800bfb6:	f7f9 f94b 	bl	8005250 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bfc0:	23c0      	movs	r3, #192	; 0xc0
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	2181      	movs	r1, #129	; 0x81
 800bfc6:	f7f9 f943 	bl	8005250 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bfd0:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	2101      	movs	r1, #1
 800bfd8:	f7f9 f93a 	bl	8005250 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bfe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	2182      	movs	r1, #130	; 0x82
 800bfea:	f7f9 f931 	bl	8005250 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 800bfee:	2300      	movs	r3, #0
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3708      	adds	r7, #8
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	20008ddc 	.word	0x20008ddc
 800bffc:	40006800 	.word	0x40006800

0800c000 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c008:	2300      	movs	r3, #0
 800c00a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c00c:	2300      	movs	r3, #0
 800c00e:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c016:	4618      	mov	r0, r3
 800c018:	f7f8 fb30 	bl	800467c <HAL_PCD_Start>
 800c01c:	4603      	mov	r3, r0
 800c01e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800c020:	7bbb      	ldrb	r3, [r7, #14]
 800c022:	2b03      	cmp	r3, #3
 800c024:	d816      	bhi.n	800c054 <USBD_LL_Start+0x54>
 800c026:	a201      	add	r2, pc, #4	; (adr r2, 800c02c <USBD_LL_Start+0x2c>)
 800c028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c02c:	0800c03d 	.word	0x0800c03d
 800c030:	0800c043 	.word	0x0800c043
 800c034:	0800c049 	.word	0x0800c049
 800c038:	0800c04f 	.word	0x0800c04f
    case HAL_OK :
      usb_status = USBD_OK;
 800c03c:	2300      	movs	r3, #0
 800c03e:	73fb      	strb	r3, [r7, #15]
    break;
 800c040:	e00b      	b.n	800c05a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c042:	2302      	movs	r3, #2
 800c044:	73fb      	strb	r3, [r7, #15]
    break;
 800c046:	e008      	b.n	800c05a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c048:	2301      	movs	r3, #1
 800c04a:	73fb      	strb	r3, [r7, #15]
    break;
 800c04c:	e005      	b.n	800c05a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c04e:	2302      	movs	r3, #2
 800c050:	73fb      	strb	r3, [r7, #15]
    break;
 800c052:	e002      	b.n	800c05a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c054:	2302      	movs	r3, #2
 800c056:	73fb      	strb	r3, [r7, #15]
    break;
 800c058:	bf00      	nop
  }
  return usb_status;
 800c05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	4608      	mov	r0, r1
 800c06e:	4611      	mov	r1, r2
 800c070:	461a      	mov	r2, r3
 800c072:	4603      	mov	r3, r0
 800c074:	70fb      	strb	r3, [r7, #3]
 800c076:	460b      	mov	r3, r1
 800c078:	70bb      	strb	r3, [r7, #2]
 800c07a:	4613      	mov	r3, r2
 800c07c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c07e:	2300      	movs	r3, #0
 800c080:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c082:	2300      	movs	r3, #0
 800c084:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c08c:	78bb      	ldrb	r3, [r7, #2]
 800c08e:	883a      	ldrh	r2, [r7, #0]
 800c090:	78f9      	ldrb	r1, [r7, #3]
 800c092:	f7f8 fc93 	bl	80049bc <HAL_PCD_EP_Open>
 800c096:	4603      	mov	r3, r0
 800c098:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c09a:	7bbb      	ldrb	r3, [r7, #14]
 800c09c:	2b03      	cmp	r3, #3
 800c09e:	d817      	bhi.n	800c0d0 <USBD_LL_OpenEP+0x6c>
 800c0a0:	a201      	add	r2, pc, #4	; (adr r2, 800c0a8 <USBD_LL_OpenEP+0x44>)
 800c0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a6:	bf00      	nop
 800c0a8:	0800c0b9 	.word	0x0800c0b9
 800c0ac:	0800c0bf 	.word	0x0800c0bf
 800c0b0:	0800c0c5 	.word	0x0800c0c5
 800c0b4:	0800c0cb 	.word	0x0800c0cb
    case HAL_OK :
      usb_status = USBD_OK;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c0bc:	e00b      	b.n	800c0d6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c0be:	2302      	movs	r3, #2
 800c0c0:	73fb      	strb	r3, [r7, #15]
    break;
 800c0c2:	e008      	b.n	800c0d6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c0c8:	e005      	b.n	800c0d6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c0ca:	2302      	movs	r3, #2
 800c0cc:	73fb      	strb	r3, [r7, #15]
    break;
 800c0ce:	e002      	b.n	800c0d6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c0d0:	2302      	movs	r3, #2
 800c0d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c0d4:	bf00      	nop
  }
  return usb_status;
 800c0d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3710      	adds	r7, #16
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c0fa:	78fa      	ldrb	r2, [r7, #3]
 800c0fc:	4611      	mov	r1, r2
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7f8 fcbc 	bl	8004a7c <HAL_PCD_EP_Close>
 800c104:	4603      	mov	r3, r0
 800c106:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800c108:	7bbb      	ldrb	r3, [r7, #14]
 800c10a:	2b03      	cmp	r3, #3
 800c10c:	d816      	bhi.n	800c13c <USBD_LL_CloseEP+0x5c>
 800c10e:	a201      	add	r2, pc, #4	; (adr r2, 800c114 <USBD_LL_CloseEP+0x34>)
 800c110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c114:	0800c125 	.word	0x0800c125
 800c118:	0800c12b 	.word	0x0800c12b
 800c11c:	0800c131 	.word	0x0800c131
 800c120:	0800c137 	.word	0x0800c137
    case HAL_OK :
      usb_status = USBD_OK;
 800c124:	2300      	movs	r3, #0
 800c126:	73fb      	strb	r3, [r7, #15]
    break;
 800c128:	e00b      	b.n	800c142 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c12a:	2302      	movs	r3, #2
 800c12c:	73fb      	strb	r3, [r7, #15]
    break;
 800c12e:	e008      	b.n	800c142 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c130:	2301      	movs	r3, #1
 800c132:	73fb      	strb	r3, [r7, #15]
    break;
 800c134:	e005      	b.n	800c142 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c136:	2302      	movs	r3, #2
 800c138:	73fb      	strb	r3, [r7, #15]
    break;
 800c13a:	e002      	b.n	800c142 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c13c:	2302      	movs	r3, #2
 800c13e:	73fb      	strb	r3, [r7, #15]
    break;
 800c140:	bf00      	nop
  }
  return usb_status;  
 800c142:	7bfb      	ldrb	r3, [r7, #15]
}
 800c144:	4618      	mov	r0, r3
 800c146:	3710      	adds	r7, #16
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	460b      	mov	r3, r1
 800c156:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c158:	2300      	movs	r3, #0
 800c15a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c15c:	2300      	movs	r3, #0
 800c15e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c166:	78fa      	ldrb	r2, [r7, #3]
 800c168:	4611      	mov	r1, r2
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7f8 fd51 	bl	8004c12 <HAL_PCD_EP_SetStall>
 800c170:	4603      	mov	r3, r0
 800c172:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c174:	7bbb      	ldrb	r3, [r7, #14]
 800c176:	2b03      	cmp	r3, #3
 800c178:	d816      	bhi.n	800c1a8 <USBD_LL_StallEP+0x5c>
 800c17a:	a201      	add	r2, pc, #4	; (adr r2, 800c180 <USBD_LL_StallEP+0x34>)
 800c17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c180:	0800c191 	.word	0x0800c191
 800c184:	0800c197 	.word	0x0800c197
 800c188:	0800c19d 	.word	0x0800c19d
 800c18c:	0800c1a3 	.word	0x0800c1a3
    case HAL_OK :
      usb_status = USBD_OK;
 800c190:	2300      	movs	r3, #0
 800c192:	73fb      	strb	r3, [r7, #15]
    break;
 800c194:	e00b      	b.n	800c1ae <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c196:	2302      	movs	r3, #2
 800c198:	73fb      	strb	r3, [r7, #15]
    break;
 800c19a:	e008      	b.n	800c1ae <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c19c:	2301      	movs	r3, #1
 800c19e:	73fb      	strb	r3, [r7, #15]
    break;
 800c1a0:	e005      	b.n	800c1ae <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c1a2:	2302      	movs	r3, #2
 800c1a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c1a6:	e002      	b.n	800c1ae <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c1a8:	2302      	movs	r3, #2
 800c1aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c1ac:	bf00      	nop
  }
  return usb_status;  
 800c1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3710      	adds	r7, #16
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c1d2:	78fa      	ldrb	r2, [r7, #3]
 800c1d4:	4611      	mov	r1, r2
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7f8 fd75 	bl	8004cc6 <HAL_PCD_EP_ClrStall>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800c1e0:	7bbb      	ldrb	r3, [r7, #14]
 800c1e2:	2b03      	cmp	r3, #3
 800c1e4:	d816      	bhi.n	800c214 <USBD_LL_ClearStallEP+0x5c>
 800c1e6:	a201      	add	r2, pc, #4	; (adr r2, 800c1ec <USBD_LL_ClearStallEP+0x34>)
 800c1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ec:	0800c1fd 	.word	0x0800c1fd
 800c1f0:	0800c203 	.word	0x0800c203
 800c1f4:	0800c209 	.word	0x0800c209
 800c1f8:	0800c20f 	.word	0x0800c20f
    case HAL_OK :
      usb_status = USBD_OK;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c200:	e00b      	b.n	800c21a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c202:	2302      	movs	r3, #2
 800c204:	73fb      	strb	r3, [r7, #15]
    break;
 800c206:	e008      	b.n	800c21a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c208:	2301      	movs	r3, #1
 800c20a:	73fb      	strb	r3, [r7, #15]
    break;
 800c20c:	e005      	b.n	800c21a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c20e:	2302      	movs	r3, #2
 800c210:	73fb      	strb	r3, [r7, #15]
    break;
 800c212:	e002      	b.n	800c21a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c214:	2302      	movs	r3, #2
 800c216:	73fb      	strb	r3, [r7, #15]
    break;
 800c218:	bf00      	nop
  }
  return usb_status; 
 800c21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3710      	adds	r7, #16
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	460b      	mov	r3, r1
 800c22e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c236:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800c238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	da08      	bge.n	800c252 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800c240:	78fb      	ldrb	r3, [r7, #3]
 800c242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c246:	68fa      	ldr	r2, [r7, #12]
 800c248:	015b      	lsls	r3, r3, #5
 800c24a:	4413      	add	r3, r2
 800c24c:	332a      	adds	r3, #42	; 0x2a
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	e008      	b.n	800c264 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800c252:	78fb      	ldrb	r3, [r7, #3]
 800c254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	015b      	lsls	r3, r3, #5
 800c25c:	4413      	add	r3, r2
 800c25e:	f203 232a 	addw	r3, r3, #554	; 0x22a
 800c262:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c264:	4618      	mov	r0, r3
 800c266:	3714      	adds	r7, #20
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	460b      	mov	r3, r1
 800c27a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c27c:	2300      	movs	r3, #0
 800c27e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c280:	2300      	movs	r3, #0
 800c282:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c28a:	78fa      	ldrb	r2, [r7, #3]
 800c28c:	4611      	mov	r1, r2
 800c28e:	4618      	mov	r0, r3
 800c290:	f7f8 fb6f 	bl	8004972 <HAL_PCD_SetAddress>
 800c294:	4603      	mov	r3, r0
 800c296:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800c298:	7bbb      	ldrb	r3, [r7, #14]
 800c29a:	2b03      	cmp	r3, #3
 800c29c:	d816      	bhi.n	800c2cc <USBD_LL_SetUSBAddress+0x5c>
 800c29e:	a201      	add	r2, pc, #4	; (adr r2, 800c2a4 <USBD_LL_SetUSBAddress+0x34>)
 800c2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a4:	0800c2b5 	.word	0x0800c2b5
 800c2a8:	0800c2bb 	.word	0x0800c2bb
 800c2ac:	0800c2c1 	.word	0x0800c2c1
 800c2b0:	0800c2c7 	.word	0x0800c2c7
    case HAL_OK :
      usb_status = USBD_OK;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c2b8:	e00b      	b.n	800c2d2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c2ba:	2302      	movs	r3, #2
 800c2bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c2be:	e008      	b.n	800c2d2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c2c4:	e005      	b.n	800c2d2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c2c6:	2302      	movs	r3, #2
 800c2c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c2ca:	e002      	b.n	800c2d2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c2cc:	2302      	movs	r3, #2
 800c2ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c2d0:	bf00      	nop
  }
  return usb_status;  
 800c2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3710      	adds	r7, #16
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b086      	sub	sp, #24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	607a      	str	r2, [r7, #4]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	72fb      	strb	r3, [r7, #11]
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c2fe:	893b      	ldrh	r3, [r7, #8]
 800c300:	7af9      	ldrb	r1, [r7, #11]
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	f7f8 fc4c 	bl	8004ba0 <HAL_PCD_EP_Transmit>
 800c308:	4603      	mov	r3, r0
 800c30a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800c30c:	7dbb      	ldrb	r3, [r7, #22]
 800c30e:	2b03      	cmp	r3, #3
 800c310:	d816      	bhi.n	800c340 <USBD_LL_Transmit+0x64>
 800c312:	a201      	add	r2, pc, #4	; (adr r2, 800c318 <USBD_LL_Transmit+0x3c>)
 800c314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c318:	0800c329 	.word	0x0800c329
 800c31c:	0800c32f 	.word	0x0800c32f
 800c320:	0800c335 	.word	0x0800c335
 800c324:	0800c33b 	.word	0x0800c33b
    case HAL_OK :
      usb_status = USBD_OK;
 800c328:	2300      	movs	r3, #0
 800c32a:	75fb      	strb	r3, [r7, #23]
    break;
 800c32c:	e00b      	b.n	800c346 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c32e:	2302      	movs	r3, #2
 800c330:	75fb      	strb	r3, [r7, #23]
    break;
 800c332:	e008      	b.n	800c346 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c334:	2301      	movs	r3, #1
 800c336:	75fb      	strb	r3, [r7, #23]
    break;
 800c338:	e005      	b.n	800c346 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c33a:	2302      	movs	r3, #2
 800c33c:	75fb      	strb	r3, [r7, #23]
    break;
 800c33e:	e002      	b.n	800c346 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800c340:	2302      	movs	r3, #2
 800c342:	75fb      	strb	r3, [r7, #23]
    break;
 800c344:	bf00      	nop
  }
  return usb_status;    
 800c346:	7dfb      	ldrb	r3, [r7, #23]
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3718      	adds	r7, #24
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	607a      	str	r2, [r7, #4]
 800c35a:	461a      	mov	r2, r3
 800c35c:	460b      	mov	r3, r1
 800c35e:	72fb      	strb	r3, [r7, #11]
 800c360:	4613      	mov	r3, r2
 800c362:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c364:	2300      	movs	r3, #0
 800c366:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c368:	2300      	movs	r3, #0
 800c36a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c372:	893b      	ldrh	r3, [r7, #8]
 800c374:	7af9      	ldrb	r1, [r7, #11]
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	f7f8 fbc2 	bl	8004b00 <HAL_PCD_EP_Receive>
 800c37c:	4603      	mov	r3, r0
 800c37e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800c380:	7dbb      	ldrb	r3, [r7, #22]
 800c382:	2b03      	cmp	r3, #3
 800c384:	d816      	bhi.n	800c3b4 <USBD_LL_PrepareReceive+0x64>
 800c386:	a201      	add	r2, pc, #4	; (adr r2, 800c38c <USBD_LL_PrepareReceive+0x3c>)
 800c388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38c:	0800c39d 	.word	0x0800c39d
 800c390:	0800c3a3 	.word	0x0800c3a3
 800c394:	0800c3a9 	.word	0x0800c3a9
 800c398:	0800c3af 	.word	0x0800c3af
    case HAL_OK :
      usb_status = USBD_OK;
 800c39c:	2300      	movs	r3, #0
 800c39e:	75fb      	strb	r3, [r7, #23]
    break;
 800c3a0:	e00b      	b.n	800c3ba <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c3a2:	2302      	movs	r3, #2
 800c3a4:	75fb      	strb	r3, [r7, #23]
    break;
 800c3a6:	e008      	b.n	800c3ba <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	75fb      	strb	r3, [r7, #23]
    break;
 800c3ac:	e005      	b.n	800c3ba <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c3ae:	2302      	movs	r3, #2
 800c3b0:	75fb      	strb	r3, [r7, #23]
    break;
 800c3b2:	e002      	b.n	800c3ba <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800c3b4:	2302      	movs	r3, #2
 800c3b6:	75fb      	strb	r3, [r7, #23]
    break;
 800c3b8:	bf00      	nop
  }
  return usb_status; 
 800c3ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3718      	adds	r7, #24
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	460b      	mov	r3, r1
 800c3ce:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c3d6:	78fa      	ldrb	r2, [r7, #3]
 800c3d8:	4611      	mov	r1, r2
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7f8 fbca 	bl	8004b74 <HAL_PCD_EP_GetRxCount>
 800c3e0:	4603      	mov	r3, r0
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3708      	adds	r7, #8
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
	...

0800c3ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c3f8:	78fb      	ldrb	r3, [r7, #3]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d002      	beq.n	800c404 <HAL_PCDEx_LPM_Callback+0x18>
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d013      	beq.n	800c42a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800c402:	e023      	b.n	800c44c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	699b      	ldr	r3, [r3, #24]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d007      	beq.n	800c41c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c40c:	f7fe fe9b 	bl	800b146 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c410:	4a10      	ldr	r2, [pc, #64]	; (800c454 <HAL_PCDEx_LPM_Callback+0x68>)
 800c412:	4b10      	ldr	r3, [pc, #64]	; (800c454 <HAL_PCDEx_LPM_Callback+0x68>)
 800c414:	691b      	ldr	r3, [r3, #16]
 800c416:	f023 0306 	bic.w	r3, r3, #6
 800c41a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800c422:	4618      	mov	r0, r3
 800c424:	f7fd fe31 	bl	800a08a <USBD_LL_Resume>
    break;
 800c428:	e010      	b.n	800c44c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800c430:	4618      	mov	r0, r3
 800c432:	f7fd fe15 	bl	800a060 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	699b      	ldr	r3, [r3, #24]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d005      	beq.n	800c44a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c43e:	4a05      	ldr	r2, [pc, #20]	; (800c454 <HAL_PCDEx_LPM_Callback+0x68>)
 800c440:	4b04      	ldr	r3, [pc, #16]	; (800c454 <HAL_PCDEx_LPM_Callback+0x68>)
 800c442:	691b      	ldr	r3, [r3, #16]
 800c444:	f043 0306 	orr.w	r3, r3, #6
 800c448:	6113      	str	r3, [r2, #16]
    break;   
 800c44a:	bf00      	nop
}
 800c44c:	bf00      	nop
 800c44e:	3708      	adds	r7, #8
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	e000ed00 	.word	0xe000ed00

0800c458 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c458:	b480      	push	{r7}
 800c45a:	b083      	sub	sp, #12
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c460:	4b03      	ldr	r3, [pc, #12]	; (800c470 <USBD_static_malloc+0x18>)
}
 800c462:	4618      	mov	r0, r3
 800c464:	370c      	adds	r7, #12
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	2000756c 	.word	0x2000756c

0800c474 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]

}
 800c47c:	bf00      	nop
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c48c:	f7fe fe5b 	bl	800b146 <SystemClock_Config>
}
 800c490:	bf00      	nop
 800c492:	bd80      	pop	{r7, pc}

0800c494 <USBD_LL_BatteryCharging>:
  *         else return USBD_FAIL if false
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
 800c494:	b480      	push	{r7}
 800c496:	b085      	sub	sp, #20
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c4a2:	60fb      	str	r3, [r7, #12]
  if (hpcd->Init.battery_charging_enable == ENABLE)
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	6a1b      	ldr	r3, [r3, #32]
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	d101      	bne.n	800c4b0 <USBD_LL_BatteryCharging+0x1c>
  {
    return USBD_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	e000      	b.n	800c4b2 <USBD_LL_BatteryCharging+0x1e>
  }
  else
  {
    return USBD_FAIL;
 800c4b0:	2302      	movs	r3, #2
  }
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3714      	adds	r7, #20
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
	...

0800c4c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	6039      	str	r1, [r7, #0]
 800c4ca:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	2212      	movs	r2, #18
 800c4d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c4d2:	4b03      	ldr	r3, [pc, #12]	; (800c4e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr
 800c4e0:	200012b0 	.word	0x200012b0

0800c4e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	6039      	str	r1, [r7, #0]
 800c4ee:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	2204      	movs	r2, #4
 800c4f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c4f6:	4b03      	ldr	r3, [pc, #12]	; (800c504 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	370c      	adds	r7, #12
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr
 800c504:	200012d0 	.word	0x200012d0

0800c508 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	4603      	mov	r3, r0
 800c510:	6039      	str	r1, [r7, #0]
 800c512:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c514:	79fb      	ldrb	r3, [r7, #7]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d105      	bne.n	800c526 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c51a:	683a      	ldr	r2, [r7, #0]
 800c51c:	4907      	ldr	r1, [pc, #28]	; (800c53c <USBD_FS_ProductStrDescriptor+0x34>)
 800c51e:	4808      	ldr	r0, [pc, #32]	; (800c540 <USBD_FS_ProductStrDescriptor+0x38>)
 800c520:	f7fe faba 	bl	800aa98 <USBD_GetString>
 800c524:	e004      	b.n	800c530 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c526:	683a      	ldr	r2, [r7, #0]
 800c528:	4904      	ldr	r1, [pc, #16]	; (800c53c <USBD_FS_ProductStrDescriptor+0x34>)
 800c52a:	4805      	ldr	r0, [pc, #20]	; (800c540 <USBD_FS_ProductStrDescriptor+0x38>)
 800c52c:	f7fe fab4 	bl	800aa98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c530:	4b02      	ldr	r3, [pc, #8]	; (800c53c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c532:	4618      	mov	r0, r3
 800c534:	3708      	adds	r7, #8
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	20009250 	.word	0x20009250
 800c540:	0800d14c 	.word	0x0800d14c

0800c544 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	4603      	mov	r3, r0
 800c54c:	6039      	str	r1, [r7, #0]
 800c54e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c550:	683a      	ldr	r2, [r7, #0]
 800c552:	4904      	ldr	r1, [pc, #16]	; (800c564 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c554:	4804      	ldr	r0, [pc, #16]	; (800c568 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c556:	f7fe fa9f 	bl	800aa98 <USBD_GetString>
  return USBD_StrDesc;
 800c55a:	4b02      	ldr	r3, [pc, #8]	; (800c564 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	20009250 	.word	0x20009250
 800c568:	0800d15c 	.word	0x0800d15c

0800c56c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
 800c572:	4603      	mov	r3, r0
 800c574:	6039      	str	r1, [r7, #0]
 800c576:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c578:	79fb      	ldrb	r3, [r7, #7]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d105      	bne.n	800c58a <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800c57e:	683a      	ldr	r2, [r7, #0]
 800c580:	4907      	ldr	r1, [pc, #28]	; (800c5a0 <USBD_FS_SerialStrDescriptor+0x34>)
 800c582:	4808      	ldr	r0, [pc, #32]	; (800c5a4 <USBD_FS_SerialStrDescriptor+0x38>)
 800c584:	f7fe fa88 	bl	800aa98 <USBD_GetString>
 800c588:	e004      	b.n	800c594 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800c58a:	683a      	ldr	r2, [r7, #0]
 800c58c:	4904      	ldr	r1, [pc, #16]	; (800c5a0 <USBD_FS_SerialStrDescriptor+0x34>)
 800c58e:	4805      	ldr	r0, [pc, #20]	; (800c5a4 <USBD_FS_SerialStrDescriptor+0x38>)
 800c590:	f7fe fa82 	bl	800aa98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c594:	4b02      	ldr	r3, [pc, #8]	; (800c5a0 <USBD_FS_SerialStrDescriptor+0x34>)
}
 800c596:	4618      	mov	r0, r3
 800c598:	3708      	adds	r7, #8
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	20009250 	.word	0x20009250
 800c5a4:	0800d170 	.word	0x0800d170

0800c5a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	6039      	str	r1, [r7, #0]
 800c5b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c5b4:	79fb      	ldrb	r3, [r7, #7]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d105      	bne.n	800c5c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5ba:	683a      	ldr	r2, [r7, #0]
 800c5bc:	4907      	ldr	r1, [pc, #28]	; (800c5dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5be:	4808      	ldr	r0, [pc, #32]	; (800c5e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c5c0:	f7fe fa6a 	bl	800aa98 <USBD_GetString>
 800c5c4:	e004      	b.n	800c5d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5c6:	683a      	ldr	r2, [r7, #0]
 800c5c8:	4904      	ldr	r1, [pc, #16]	; (800c5dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5ca:	4805      	ldr	r0, [pc, #20]	; (800c5e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c5cc:	f7fe fa64 	bl	800aa98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5d0:	4b02      	ldr	r3, [pc, #8]	; (800c5dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3708      	adds	r7, #8
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	20009250 	.word	0x20009250
 800c5e0:	0800d180 	.word	0x0800d180

0800c5e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	6039      	str	r1, [r7, #0]
 800c5ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c5f0:	79fb      	ldrb	r3, [r7, #7]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d105      	bne.n	800c602 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c5f6:	683a      	ldr	r2, [r7, #0]
 800c5f8:	4907      	ldr	r1, [pc, #28]	; (800c618 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c5fa:	4808      	ldr	r0, [pc, #32]	; (800c61c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c5fc:	f7fe fa4c 	bl	800aa98 <USBD_GetString>
 800c600:	e004      	b.n	800c60c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c602:	683a      	ldr	r2, [r7, #0]
 800c604:	4904      	ldr	r1, [pc, #16]	; (800c618 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c606:	4805      	ldr	r0, [pc, #20]	; (800c61c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c608:	f7fe fa46 	bl	800aa98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c60c:	4b02      	ldr	r3, [pc, #8]	; (800c618 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3708      	adds	r7, #8
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	20009250 	.word	0x20009250
 800c61c:	0800d18c 	.word	0x0800d18c

0800c620 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c620:	b480      	push	{r7}
 800c622:	b083      	sub	sp, #12
 800c624:	af00      	add	r7, sp, #0
 800c626:	4603      	mov	r3, r0
 800c628:	6039      	str	r1, [r7, #0]
 800c62a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_BOSDesc);
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	220c      	movs	r2, #12
 800c630:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c632:	4b03      	ldr	r3, [pc, #12]	; (800c640 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c634:	4618      	mov	r0, r3
 800c636:	370c      	adds	r7, #12
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr
 800c640:	200012c4 	.word	0x200012c4

0800c644 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c67c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800c648:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800c64a:	e003      	b.n	800c654 <LoopCopyDataInit>

0800c64c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800c64c:	4b0c      	ldr	r3, [pc, #48]	; (800c680 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800c64e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800c650:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800c652:	3104      	adds	r1, #4

0800c654 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800c654:	480b      	ldr	r0, [pc, #44]	; (800c684 <LoopForever+0xa>)
	ldr	r3, =_edata
 800c656:	4b0c      	ldr	r3, [pc, #48]	; (800c688 <LoopForever+0xe>)
	adds	r2, r0, r1
 800c658:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800c65a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800c65c:	d3f6      	bcc.n	800c64c <CopyDataInit>
	ldr	r2, =_sbss
 800c65e:	4a0b      	ldr	r2, [pc, #44]	; (800c68c <LoopForever+0x12>)
	b	LoopFillZerobss
 800c660:	e002      	b.n	800c668 <LoopFillZerobss>

0800c662 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800c662:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800c664:	f842 3b04 	str.w	r3, [r2], #4

0800c668 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800c668:	4b09      	ldr	r3, [pc, #36]	; (800c690 <LoopForever+0x16>)
	cmp	r2, r3
 800c66a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800c66c:	d3f9      	bcc.n	800c662 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c66e:	f7fe feb5 	bl	800b3dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c672:	f000 f811 	bl	800c698 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800c676:	f7fe fd45 	bl	800b104 <main>

0800c67a <LoopForever>:

LoopForever:
    b LoopForever
 800c67a:	e7fe      	b.n	800c67a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c67c:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 800c680:	0800d33c 	.word	0x0800d33c
	ldr	r0, =_sdata
 800c684:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800c688:	200014a4 	.word	0x200014a4
	ldr	r2, =_sbss
 800c68c:	200014a4 	.word	0x200014a4
	ldr	r3, = _ebss
 800c690:	20009454 	.word	0x20009454

0800c694 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c694:	e7fe      	b.n	800c694 <ADC1_IRQHandler>
	...

0800c698 <__libc_init_array>:
 800c698:	b570      	push	{r4, r5, r6, lr}
 800c69a:	4e0d      	ldr	r6, [pc, #52]	; (800c6d0 <__libc_init_array+0x38>)
 800c69c:	4c0d      	ldr	r4, [pc, #52]	; (800c6d4 <__libc_init_array+0x3c>)
 800c69e:	1ba4      	subs	r4, r4, r6
 800c6a0:	10a4      	asrs	r4, r4, #2
 800c6a2:	2500      	movs	r5, #0
 800c6a4:	42a5      	cmp	r5, r4
 800c6a6:	d109      	bne.n	800c6bc <__libc_init_array+0x24>
 800c6a8:	4e0b      	ldr	r6, [pc, #44]	; (800c6d8 <__libc_init_array+0x40>)
 800c6aa:	4c0c      	ldr	r4, [pc, #48]	; (800c6dc <__libc_init_array+0x44>)
 800c6ac:	f000 fd2a 	bl	800d104 <_init>
 800c6b0:	1ba4      	subs	r4, r4, r6
 800c6b2:	10a4      	asrs	r4, r4, #2
 800c6b4:	2500      	movs	r5, #0
 800c6b6:	42a5      	cmp	r5, r4
 800c6b8:	d105      	bne.n	800c6c6 <__libc_init_array+0x2e>
 800c6ba:	bd70      	pop	{r4, r5, r6, pc}
 800c6bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6c0:	4798      	blx	r3
 800c6c2:	3501      	adds	r5, #1
 800c6c4:	e7ee      	b.n	800c6a4 <__libc_init_array+0xc>
 800c6c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6ca:	4798      	blx	r3
 800c6cc:	3501      	adds	r5, #1
 800c6ce:	e7f2      	b.n	800c6b6 <__libc_init_array+0x1e>
 800c6d0:	0800d334 	.word	0x0800d334
 800c6d4:	0800d334 	.word	0x0800d334
 800c6d8:	0800d334 	.word	0x0800d334
 800c6dc:	0800d338 	.word	0x0800d338

0800c6e0 <memcpy>:
 800c6e0:	b510      	push	{r4, lr}
 800c6e2:	1e43      	subs	r3, r0, #1
 800c6e4:	440a      	add	r2, r1
 800c6e6:	4291      	cmp	r1, r2
 800c6e8:	d100      	bne.n	800c6ec <memcpy+0xc>
 800c6ea:	bd10      	pop	{r4, pc}
 800c6ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6f4:	e7f7      	b.n	800c6e6 <memcpy+0x6>

0800c6f6 <memset>:
 800c6f6:	4402      	add	r2, r0
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d100      	bne.n	800c700 <memset+0xa>
 800c6fe:	4770      	bx	lr
 800c700:	f803 1b01 	strb.w	r1, [r3], #1
 800c704:	e7f9      	b.n	800c6fa <memset+0x4>
	...

0800c708 <sniprintf>:
 800c708:	b40c      	push	{r2, r3}
 800c70a:	b530      	push	{r4, r5, lr}
 800c70c:	4b17      	ldr	r3, [pc, #92]	; (800c76c <sniprintf+0x64>)
 800c70e:	1e0c      	subs	r4, r1, #0
 800c710:	b09d      	sub	sp, #116	; 0x74
 800c712:	681d      	ldr	r5, [r3, #0]
 800c714:	da08      	bge.n	800c728 <sniprintf+0x20>
 800c716:	238b      	movs	r3, #139	; 0x8b
 800c718:	602b      	str	r3, [r5, #0]
 800c71a:	f04f 30ff 	mov.w	r0, #4294967295
 800c71e:	b01d      	add	sp, #116	; 0x74
 800c720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c724:	b002      	add	sp, #8
 800c726:	4770      	bx	lr
 800c728:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c72c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c730:	bf14      	ite	ne
 800c732:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c736:	4623      	moveq	r3, r4
 800c738:	9304      	str	r3, [sp, #16]
 800c73a:	9307      	str	r3, [sp, #28]
 800c73c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c740:	9002      	str	r0, [sp, #8]
 800c742:	9006      	str	r0, [sp, #24]
 800c744:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c748:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c74a:	ab21      	add	r3, sp, #132	; 0x84
 800c74c:	a902      	add	r1, sp, #8
 800c74e:	4628      	mov	r0, r5
 800c750:	9301      	str	r3, [sp, #4]
 800c752:	f000 f929 	bl	800c9a8 <_svfiprintf_r>
 800c756:	1c43      	adds	r3, r0, #1
 800c758:	bfbc      	itt	lt
 800c75a:	238b      	movlt	r3, #139	; 0x8b
 800c75c:	602b      	strlt	r3, [r5, #0]
 800c75e:	2c00      	cmp	r4, #0
 800c760:	d0dd      	beq.n	800c71e <sniprintf+0x16>
 800c762:	9b02      	ldr	r3, [sp, #8]
 800c764:	2200      	movs	r2, #0
 800c766:	701a      	strb	r2, [r3, #0]
 800c768:	e7d9      	b.n	800c71e <sniprintf+0x16>
 800c76a:	bf00      	nop
 800c76c:	200012d4 	.word	0x200012d4

0800c770 <strncpy>:
 800c770:	b570      	push	{r4, r5, r6, lr}
 800c772:	4604      	mov	r4, r0
 800c774:	b902      	cbnz	r2, 800c778 <strncpy+0x8>
 800c776:	bd70      	pop	{r4, r5, r6, pc}
 800c778:	4623      	mov	r3, r4
 800c77a:	f811 5b01 	ldrb.w	r5, [r1], #1
 800c77e:	f803 5b01 	strb.w	r5, [r3], #1
 800c782:	1e56      	subs	r6, r2, #1
 800c784:	b91d      	cbnz	r5, 800c78e <strncpy+0x1e>
 800c786:	4414      	add	r4, r2
 800c788:	42a3      	cmp	r3, r4
 800c78a:	d103      	bne.n	800c794 <strncpy+0x24>
 800c78c:	bd70      	pop	{r4, r5, r6, pc}
 800c78e:	461c      	mov	r4, r3
 800c790:	4632      	mov	r2, r6
 800c792:	e7ef      	b.n	800c774 <strncpy+0x4>
 800c794:	f803 5b01 	strb.w	r5, [r3], #1
 800c798:	e7f6      	b.n	800c788 <strncpy+0x18>

0800c79a <_strtol_l.isra.0>:
 800c79a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c79e:	4680      	mov	r8, r0
 800c7a0:	4689      	mov	r9, r1
 800c7a2:	4692      	mov	sl, r2
 800c7a4:	461f      	mov	r7, r3
 800c7a6:	468b      	mov	fp, r1
 800c7a8:	465d      	mov	r5, fp
 800c7aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c7ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7b0:	f000 f88a 	bl	800c8c8 <__locale_ctype_ptr_l>
 800c7b4:	4420      	add	r0, r4
 800c7b6:	7846      	ldrb	r6, [r0, #1]
 800c7b8:	f016 0608 	ands.w	r6, r6, #8
 800c7bc:	d10b      	bne.n	800c7d6 <_strtol_l.isra.0+0x3c>
 800c7be:	2c2d      	cmp	r4, #45	; 0x2d
 800c7c0:	d10b      	bne.n	800c7da <_strtol_l.isra.0+0x40>
 800c7c2:	782c      	ldrb	r4, [r5, #0]
 800c7c4:	2601      	movs	r6, #1
 800c7c6:	f10b 0502 	add.w	r5, fp, #2
 800c7ca:	b167      	cbz	r7, 800c7e6 <_strtol_l.isra.0+0x4c>
 800c7cc:	2f10      	cmp	r7, #16
 800c7ce:	d114      	bne.n	800c7fa <_strtol_l.isra.0+0x60>
 800c7d0:	2c30      	cmp	r4, #48	; 0x30
 800c7d2:	d00a      	beq.n	800c7ea <_strtol_l.isra.0+0x50>
 800c7d4:	e011      	b.n	800c7fa <_strtol_l.isra.0+0x60>
 800c7d6:	46ab      	mov	fp, r5
 800c7d8:	e7e6      	b.n	800c7a8 <_strtol_l.isra.0+0xe>
 800c7da:	2c2b      	cmp	r4, #43	; 0x2b
 800c7dc:	bf04      	itt	eq
 800c7de:	782c      	ldrbeq	r4, [r5, #0]
 800c7e0:	f10b 0502 	addeq.w	r5, fp, #2
 800c7e4:	e7f1      	b.n	800c7ca <_strtol_l.isra.0+0x30>
 800c7e6:	2c30      	cmp	r4, #48	; 0x30
 800c7e8:	d127      	bne.n	800c83a <_strtol_l.isra.0+0xa0>
 800c7ea:	782b      	ldrb	r3, [r5, #0]
 800c7ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c7f0:	2b58      	cmp	r3, #88	; 0x58
 800c7f2:	d14b      	bne.n	800c88c <_strtol_l.isra.0+0xf2>
 800c7f4:	786c      	ldrb	r4, [r5, #1]
 800c7f6:	2710      	movs	r7, #16
 800c7f8:	3502      	adds	r5, #2
 800c7fa:	2e00      	cmp	r6, #0
 800c7fc:	bf0c      	ite	eq
 800c7fe:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c802:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c806:	2200      	movs	r2, #0
 800c808:	fbb1 fef7 	udiv	lr, r1, r7
 800c80c:	4610      	mov	r0, r2
 800c80e:	fb07 1c1e 	mls	ip, r7, lr, r1
 800c812:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c816:	2b09      	cmp	r3, #9
 800c818:	d811      	bhi.n	800c83e <_strtol_l.isra.0+0xa4>
 800c81a:	461c      	mov	r4, r3
 800c81c:	42a7      	cmp	r7, r4
 800c81e:	dd1d      	ble.n	800c85c <_strtol_l.isra.0+0xc2>
 800c820:	1c53      	adds	r3, r2, #1
 800c822:	d007      	beq.n	800c834 <_strtol_l.isra.0+0x9a>
 800c824:	4586      	cmp	lr, r0
 800c826:	d316      	bcc.n	800c856 <_strtol_l.isra.0+0xbc>
 800c828:	d101      	bne.n	800c82e <_strtol_l.isra.0+0x94>
 800c82a:	45a4      	cmp	ip, r4
 800c82c:	db13      	blt.n	800c856 <_strtol_l.isra.0+0xbc>
 800c82e:	fb00 4007 	mla	r0, r0, r7, r4
 800c832:	2201      	movs	r2, #1
 800c834:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c838:	e7eb      	b.n	800c812 <_strtol_l.isra.0+0x78>
 800c83a:	270a      	movs	r7, #10
 800c83c:	e7dd      	b.n	800c7fa <_strtol_l.isra.0+0x60>
 800c83e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c842:	2b19      	cmp	r3, #25
 800c844:	d801      	bhi.n	800c84a <_strtol_l.isra.0+0xb0>
 800c846:	3c37      	subs	r4, #55	; 0x37
 800c848:	e7e8      	b.n	800c81c <_strtol_l.isra.0+0x82>
 800c84a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c84e:	2b19      	cmp	r3, #25
 800c850:	d804      	bhi.n	800c85c <_strtol_l.isra.0+0xc2>
 800c852:	3c57      	subs	r4, #87	; 0x57
 800c854:	e7e2      	b.n	800c81c <_strtol_l.isra.0+0x82>
 800c856:	f04f 32ff 	mov.w	r2, #4294967295
 800c85a:	e7eb      	b.n	800c834 <_strtol_l.isra.0+0x9a>
 800c85c:	1c53      	adds	r3, r2, #1
 800c85e:	d108      	bne.n	800c872 <_strtol_l.isra.0+0xd8>
 800c860:	2322      	movs	r3, #34	; 0x22
 800c862:	f8c8 3000 	str.w	r3, [r8]
 800c866:	4608      	mov	r0, r1
 800c868:	f1ba 0f00 	cmp.w	sl, #0
 800c86c:	d107      	bne.n	800c87e <_strtol_l.isra.0+0xe4>
 800c86e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c872:	b106      	cbz	r6, 800c876 <_strtol_l.isra.0+0xdc>
 800c874:	4240      	negs	r0, r0
 800c876:	f1ba 0f00 	cmp.w	sl, #0
 800c87a:	d00c      	beq.n	800c896 <_strtol_l.isra.0+0xfc>
 800c87c:	b122      	cbz	r2, 800c888 <_strtol_l.isra.0+0xee>
 800c87e:	3d01      	subs	r5, #1
 800c880:	f8ca 5000 	str.w	r5, [sl]
 800c884:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c888:	464d      	mov	r5, r9
 800c88a:	e7f9      	b.n	800c880 <_strtol_l.isra.0+0xe6>
 800c88c:	2430      	movs	r4, #48	; 0x30
 800c88e:	2f00      	cmp	r7, #0
 800c890:	d1b3      	bne.n	800c7fa <_strtol_l.isra.0+0x60>
 800c892:	2708      	movs	r7, #8
 800c894:	e7b1      	b.n	800c7fa <_strtol_l.isra.0+0x60>
 800c896:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800c89c <strtol>:
 800c89c:	4b08      	ldr	r3, [pc, #32]	; (800c8c0 <strtol+0x24>)
 800c89e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8a0:	681c      	ldr	r4, [r3, #0]
 800c8a2:	4d08      	ldr	r5, [pc, #32]	; (800c8c4 <strtol+0x28>)
 800c8a4:	6a23      	ldr	r3, [r4, #32]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	bf08      	it	eq
 800c8aa:	462b      	moveq	r3, r5
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	460a      	mov	r2, r1
 800c8b2:	4601      	mov	r1, r0
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	f7ff ff70 	bl	800c79a <_strtol_l.isra.0>
 800c8ba:	b003      	add	sp, #12
 800c8bc:	bd30      	pop	{r4, r5, pc}
 800c8be:	bf00      	nop
 800c8c0:	200012d4 	.word	0x200012d4
 800c8c4:	20001338 	.word	0x20001338

0800c8c8 <__locale_ctype_ptr_l>:
 800c8c8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c8cc:	4770      	bx	lr

0800c8ce <__ascii_mbtowc>:
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	b901      	cbnz	r1, 800c8d4 <__ascii_mbtowc+0x6>
 800c8d2:	a901      	add	r1, sp, #4
 800c8d4:	b142      	cbz	r2, 800c8e8 <__ascii_mbtowc+0x1a>
 800c8d6:	b14b      	cbz	r3, 800c8ec <__ascii_mbtowc+0x1e>
 800c8d8:	7813      	ldrb	r3, [r2, #0]
 800c8da:	600b      	str	r3, [r1, #0]
 800c8dc:	7812      	ldrb	r2, [r2, #0]
 800c8de:	1c10      	adds	r0, r2, #0
 800c8e0:	bf18      	it	ne
 800c8e2:	2001      	movne	r0, #1
 800c8e4:	b002      	add	sp, #8
 800c8e6:	4770      	bx	lr
 800c8e8:	4610      	mov	r0, r2
 800c8ea:	e7fb      	b.n	800c8e4 <__ascii_mbtowc+0x16>
 800c8ec:	f06f 0001 	mvn.w	r0, #1
 800c8f0:	e7f8      	b.n	800c8e4 <__ascii_mbtowc+0x16>

0800c8f2 <__ssputs_r>:
 800c8f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f6:	688e      	ldr	r6, [r1, #8]
 800c8f8:	429e      	cmp	r6, r3
 800c8fa:	4682      	mov	sl, r0
 800c8fc:	460c      	mov	r4, r1
 800c8fe:	4691      	mov	r9, r2
 800c900:	4698      	mov	r8, r3
 800c902:	d835      	bhi.n	800c970 <__ssputs_r+0x7e>
 800c904:	898a      	ldrh	r2, [r1, #12]
 800c906:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c90a:	d031      	beq.n	800c970 <__ssputs_r+0x7e>
 800c90c:	6825      	ldr	r5, [r4, #0]
 800c90e:	6909      	ldr	r1, [r1, #16]
 800c910:	1a6f      	subs	r7, r5, r1
 800c912:	6965      	ldr	r5, [r4, #20]
 800c914:	2302      	movs	r3, #2
 800c916:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c91a:	fb95 f5f3 	sdiv	r5, r5, r3
 800c91e:	f108 0301 	add.w	r3, r8, #1
 800c922:	443b      	add	r3, r7
 800c924:	429d      	cmp	r5, r3
 800c926:	bf38      	it	cc
 800c928:	461d      	movcc	r5, r3
 800c92a:	0553      	lsls	r3, r2, #21
 800c92c:	d531      	bpl.n	800c992 <__ssputs_r+0xa0>
 800c92e:	4629      	mov	r1, r5
 800c930:	f000 fb3a 	bl	800cfa8 <_malloc_r>
 800c934:	4606      	mov	r6, r0
 800c936:	b950      	cbnz	r0, 800c94e <__ssputs_r+0x5c>
 800c938:	230c      	movs	r3, #12
 800c93a:	f8ca 3000 	str.w	r3, [sl]
 800c93e:	89a3      	ldrh	r3, [r4, #12]
 800c940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c944:	81a3      	strh	r3, [r4, #12]
 800c946:	f04f 30ff 	mov.w	r0, #4294967295
 800c94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c94e:	463a      	mov	r2, r7
 800c950:	6921      	ldr	r1, [r4, #16]
 800c952:	f7ff fec5 	bl	800c6e0 <memcpy>
 800c956:	89a3      	ldrh	r3, [r4, #12]
 800c958:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c95c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c960:	81a3      	strh	r3, [r4, #12]
 800c962:	6126      	str	r6, [r4, #16]
 800c964:	6165      	str	r5, [r4, #20]
 800c966:	443e      	add	r6, r7
 800c968:	1bed      	subs	r5, r5, r7
 800c96a:	6026      	str	r6, [r4, #0]
 800c96c:	60a5      	str	r5, [r4, #8]
 800c96e:	4646      	mov	r6, r8
 800c970:	4546      	cmp	r6, r8
 800c972:	bf28      	it	cs
 800c974:	4646      	movcs	r6, r8
 800c976:	4632      	mov	r2, r6
 800c978:	4649      	mov	r1, r9
 800c97a:	6820      	ldr	r0, [r4, #0]
 800c97c:	f000 faab 	bl	800ced6 <memmove>
 800c980:	68a3      	ldr	r3, [r4, #8]
 800c982:	1b9b      	subs	r3, r3, r6
 800c984:	60a3      	str	r3, [r4, #8]
 800c986:	6823      	ldr	r3, [r4, #0]
 800c988:	441e      	add	r6, r3
 800c98a:	6026      	str	r6, [r4, #0]
 800c98c:	2000      	movs	r0, #0
 800c98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c992:	462a      	mov	r2, r5
 800c994:	f000 fb66 	bl	800d064 <_realloc_r>
 800c998:	4606      	mov	r6, r0
 800c99a:	2800      	cmp	r0, #0
 800c99c:	d1e1      	bne.n	800c962 <__ssputs_r+0x70>
 800c99e:	6921      	ldr	r1, [r4, #16]
 800c9a0:	4650      	mov	r0, sl
 800c9a2:	f000 fab3 	bl	800cf0c <_free_r>
 800c9a6:	e7c7      	b.n	800c938 <__ssputs_r+0x46>

0800c9a8 <_svfiprintf_r>:
 800c9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ac:	b09d      	sub	sp, #116	; 0x74
 800c9ae:	4680      	mov	r8, r0
 800c9b0:	9303      	str	r3, [sp, #12]
 800c9b2:	898b      	ldrh	r3, [r1, #12]
 800c9b4:	061c      	lsls	r4, r3, #24
 800c9b6:	460d      	mov	r5, r1
 800c9b8:	4616      	mov	r6, r2
 800c9ba:	d50f      	bpl.n	800c9dc <_svfiprintf_r+0x34>
 800c9bc:	690b      	ldr	r3, [r1, #16]
 800c9be:	b96b      	cbnz	r3, 800c9dc <_svfiprintf_r+0x34>
 800c9c0:	2140      	movs	r1, #64	; 0x40
 800c9c2:	f000 faf1 	bl	800cfa8 <_malloc_r>
 800c9c6:	6028      	str	r0, [r5, #0]
 800c9c8:	6128      	str	r0, [r5, #16]
 800c9ca:	b928      	cbnz	r0, 800c9d8 <_svfiprintf_r+0x30>
 800c9cc:	230c      	movs	r3, #12
 800c9ce:	f8c8 3000 	str.w	r3, [r8]
 800c9d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d6:	e0c5      	b.n	800cb64 <_svfiprintf_r+0x1bc>
 800c9d8:	2340      	movs	r3, #64	; 0x40
 800c9da:	616b      	str	r3, [r5, #20]
 800c9dc:	2300      	movs	r3, #0
 800c9de:	9309      	str	r3, [sp, #36]	; 0x24
 800c9e0:	2320      	movs	r3, #32
 800c9e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9e6:	2330      	movs	r3, #48	; 0x30
 800c9e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9ec:	f04f 0b01 	mov.w	fp, #1
 800c9f0:	4637      	mov	r7, r6
 800c9f2:	463c      	mov	r4, r7
 800c9f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d13c      	bne.n	800ca76 <_svfiprintf_r+0xce>
 800c9fc:	ebb7 0a06 	subs.w	sl, r7, r6
 800ca00:	d00b      	beq.n	800ca1a <_svfiprintf_r+0x72>
 800ca02:	4653      	mov	r3, sl
 800ca04:	4632      	mov	r2, r6
 800ca06:	4629      	mov	r1, r5
 800ca08:	4640      	mov	r0, r8
 800ca0a:	f7ff ff72 	bl	800c8f2 <__ssputs_r>
 800ca0e:	3001      	adds	r0, #1
 800ca10:	f000 80a3 	beq.w	800cb5a <_svfiprintf_r+0x1b2>
 800ca14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca16:	4453      	add	r3, sl
 800ca18:	9309      	str	r3, [sp, #36]	; 0x24
 800ca1a:	783b      	ldrb	r3, [r7, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	f000 809c 	beq.w	800cb5a <_svfiprintf_r+0x1b2>
 800ca22:	2300      	movs	r3, #0
 800ca24:	f04f 32ff 	mov.w	r2, #4294967295
 800ca28:	9304      	str	r3, [sp, #16]
 800ca2a:	9307      	str	r3, [sp, #28]
 800ca2c:	9205      	str	r2, [sp, #20]
 800ca2e:	9306      	str	r3, [sp, #24]
 800ca30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca34:	931a      	str	r3, [sp, #104]	; 0x68
 800ca36:	2205      	movs	r2, #5
 800ca38:	7821      	ldrb	r1, [r4, #0]
 800ca3a:	4850      	ldr	r0, [pc, #320]	; (800cb7c <_svfiprintf_r+0x1d4>)
 800ca3c:	f7f3 fbd8 	bl	80001f0 <memchr>
 800ca40:	1c67      	adds	r7, r4, #1
 800ca42:	9b04      	ldr	r3, [sp, #16]
 800ca44:	b9d8      	cbnz	r0, 800ca7e <_svfiprintf_r+0xd6>
 800ca46:	06d9      	lsls	r1, r3, #27
 800ca48:	bf44      	itt	mi
 800ca4a:	2220      	movmi	r2, #32
 800ca4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ca50:	071a      	lsls	r2, r3, #28
 800ca52:	bf44      	itt	mi
 800ca54:	222b      	movmi	r2, #43	; 0x2b
 800ca56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ca5a:	7822      	ldrb	r2, [r4, #0]
 800ca5c:	2a2a      	cmp	r2, #42	; 0x2a
 800ca5e:	d016      	beq.n	800ca8e <_svfiprintf_r+0xe6>
 800ca60:	9a07      	ldr	r2, [sp, #28]
 800ca62:	2100      	movs	r1, #0
 800ca64:	200a      	movs	r0, #10
 800ca66:	4627      	mov	r7, r4
 800ca68:	3401      	adds	r4, #1
 800ca6a:	783b      	ldrb	r3, [r7, #0]
 800ca6c:	3b30      	subs	r3, #48	; 0x30
 800ca6e:	2b09      	cmp	r3, #9
 800ca70:	d951      	bls.n	800cb16 <_svfiprintf_r+0x16e>
 800ca72:	b1c9      	cbz	r1, 800caa8 <_svfiprintf_r+0x100>
 800ca74:	e011      	b.n	800ca9a <_svfiprintf_r+0xf2>
 800ca76:	2b25      	cmp	r3, #37	; 0x25
 800ca78:	d0c0      	beq.n	800c9fc <_svfiprintf_r+0x54>
 800ca7a:	4627      	mov	r7, r4
 800ca7c:	e7b9      	b.n	800c9f2 <_svfiprintf_r+0x4a>
 800ca7e:	4a3f      	ldr	r2, [pc, #252]	; (800cb7c <_svfiprintf_r+0x1d4>)
 800ca80:	1a80      	subs	r0, r0, r2
 800ca82:	fa0b f000 	lsl.w	r0, fp, r0
 800ca86:	4318      	orrs	r0, r3
 800ca88:	9004      	str	r0, [sp, #16]
 800ca8a:	463c      	mov	r4, r7
 800ca8c:	e7d3      	b.n	800ca36 <_svfiprintf_r+0x8e>
 800ca8e:	9a03      	ldr	r2, [sp, #12]
 800ca90:	1d11      	adds	r1, r2, #4
 800ca92:	6812      	ldr	r2, [r2, #0]
 800ca94:	9103      	str	r1, [sp, #12]
 800ca96:	2a00      	cmp	r2, #0
 800ca98:	db01      	blt.n	800ca9e <_svfiprintf_r+0xf6>
 800ca9a:	9207      	str	r2, [sp, #28]
 800ca9c:	e004      	b.n	800caa8 <_svfiprintf_r+0x100>
 800ca9e:	4252      	negs	r2, r2
 800caa0:	f043 0302 	orr.w	r3, r3, #2
 800caa4:	9207      	str	r2, [sp, #28]
 800caa6:	9304      	str	r3, [sp, #16]
 800caa8:	783b      	ldrb	r3, [r7, #0]
 800caaa:	2b2e      	cmp	r3, #46	; 0x2e
 800caac:	d10e      	bne.n	800cacc <_svfiprintf_r+0x124>
 800caae:	787b      	ldrb	r3, [r7, #1]
 800cab0:	2b2a      	cmp	r3, #42	; 0x2a
 800cab2:	f107 0101 	add.w	r1, r7, #1
 800cab6:	d132      	bne.n	800cb1e <_svfiprintf_r+0x176>
 800cab8:	9b03      	ldr	r3, [sp, #12]
 800caba:	1d1a      	adds	r2, r3, #4
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	9203      	str	r2, [sp, #12]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	bfb8      	it	lt
 800cac4:	f04f 33ff 	movlt.w	r3, #4294967295
 800cac8:	3702      	adds	r7, #2
 800caca:	9305      	str	r3, [sp, #20]
 800cacc:	4c2c      	ldr	r4, [pc, #176]	; (800cb80 <_svfiprintf_r+0x1d8>)
 800cace:	7839      	ldrb	r1, [r7, #0]
 800cad0:	2203      	movs	r2, #3
 800cad2:	4620      	mov	r0, r4
 800cad4:	f7f3 fb8c 	bl	80001f0 <memchr>
 800cad8:	b138      	cbz	r0, 800caea <_svfiprintf_r+0x142>
 800cada:	2340      	movs	r3, #64	; 0x40
 800cadc:	1b00      	subs	r0, r0, r4
 800cade:	fa03 f000 	lsl.w	r0, r3, r0
 800cae2:	9b04      	ldr	r3, [sp, #16]
 800cae4:	4303      	orrs	r3, r0
 800cae6:	9304      	str	r3, [sp, #16]
 800cae8:	3701      	adds	r7, #1
 800caea:	7839      	ldrb	r1, [r7, #0]
 800caec:	4825      	ldr	r0, [pc, #148]	; (800cb84 <_svfiprintf_r+0x1dc>)
 800caee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800caf2:	2206      	movs	r2, #6
 800caf4:	1c7e      	adds	r6, r7, #1
 800caf6:	f7f3 fb7b 	bl	80001f0 <memchr>
 800cafa:	2800      	cmp	r0, #0
 800cafc:	d035      	beq.n	800cb6a <_svfiprintf_r+0x1c2>
 800cafe:	4b22      	ldr	r3, [pc, #136]	; (800cb88 <_svfiprintf_r+0x1e0>)
 800cb00:	b9fb      	cbnz	r3, 800cb42 <_svfiprintf_r+0x19a>
 800cb02:	9b03      	ldr	r3, [sp, #12]
 800cb04:	3307      	adds	r3, #7
 800cb06:	f023 0307 	bic.w	r3, r3, #7
 800cb0a:	3308      	adds	r3, #8
 800cb0c:	9303      	str	r3, [sp, #12]
 800cb0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb10:	444b      	add	r3, r9
 800cb12:	9309      	str	r3, [sp, #36]	; 0x24
 800cb14:	e76c      	b.n	800c9f0 <_svfiprintf_r+0x48>
 800cb16:	fb00 3202 	mla	r2, r0, r2, r3
 800cb1a:	2101      	movs	r1, #1
 800cb1c:	e7a3      	b.n	800ca66 <_svfiprintf_r+0xbe>
 800cb1e:	2300      	movs	r3, #0
 800cb20:	9305      	str	r3, [sp, #20]
 800cb22:	4618      	mov	r0, r3
 800cb24:	240a      	movs	r4, #10
 800cb26:	460f      	mov	r7, r1
 800cb28:	3101      	adds	r1, #1
 800cb2a:	783a      	ldrb	r2, [r7, #0]
 800cb2c:	3a30      	subs	r2, #48	; 0x30
 800cb2e:	2a09      	cmp	r2, #9
 800cb30:	d903      	bls.n	800cb3a <_svfiprintf_r+0x192>
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d0ca      	beq.n	800cacc <_svfiprintf_r+0x124>
 800cb36:	9005      	str	r0, [sp, #20]
 800cb38:	e7c8      	b.n	800cacc <_svfiprintf_r+0x124>
 800cb3a:	fb04 2000 	mla	r0, r4, r0, r2
 800cb3e:	2301      	movs	r3, #1
 800cb40:	e7f1      	b.n	800cb26 <_svfiprintf_r+0x17e>
 800cb42:	ab03      	add	r3, sp, #12
 800cb44:	9300      	str	r3, [sp, #0]
 800cb46:	462a      	mov	r2, r5
 800cb48:	4b10      	ldr	r3, [pc, #64]	; (800cb8c <_svfiprintf_r+0x1e4>)
 800cb4a:	a904      	add	r1, sp, #16
 800cb4c:	4640      	mov	r0, r8
 800cb4e:	f3af 8000 	nop.w
 800cb52:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cb56:	4681      	mov	r9, r0
 800cb58:	d1d9      	bne.n	800cb0e <_svfiprintf_r+0x166>
 800cb5a:	89ab      	ldrh	r3, [r5, #12]
 800cb5c:	065b      	lsls	r3, r3, #25
 800cb5e:	f53f af38 	bmi.w	800c9d2 <_svfiprintf_r+0x2a>
 800cb62:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb64:	b01d      	add	sp, #116	; 0x74
 800cb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb6a:	ab03      	add	r3, sp, #12
 800cb6c:	9300      	str	r3, [sp, #0]
 800cb6e:	462a      	mov	r2, r5
 800cb70:	4b06      	ldr	r3, [pc, #24]	; (800cb8c <_svfiprintf_r+0x1e4>)
 800cb72:	a904      	add	r1, sp, #16
 800cb74:	4640      	mov	r0, r8
 800cb76:	f000 f881 	bl	800cc7c <_printf_i>
 800cb7a:	e7ea      	b.n	800cb52 <_svfiprintf_r+0x1aa>
 800cb7c:	0800d1f6 	.word	0x0800d1f6
 800cb80:	0800d1fc 	.word	0x0800d1fc
 800cb84:	0800d200 	.word	0x0800d200
 800cb88:	00000000 	.word	0x00000000
 800cb8c:	0800c8f3 	.word	0x0800c8f3

0800cb90 <_printf_common>:
 800cb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb94:	4691      	mov	r9, r2
 800cb96:	461f      	mov	r7, r3
 800cb98:	688a      	ldr	r2, [r1, #8]
 800cb9a:	690b      	ldr	r3, [r1, #16]
 800cb9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cba0:	4293      	cmp	r3, r2
 800cba2:	bfb8      	it	lt
 800cba4:	4613      	movlt	r3, r2
 800cba6:	f8c9 3000 	str.w	r3, [r9]
 800cbaa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cbae:	4606      	mov	r6, r0
 800cbb0:	460c      	mov	r4, r1
 800cbb2:	b112      	cbz	r2, 800cbba <_printf_common+0x2a>
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	f8c9 3000 	str.w	r3, [r9]
 800cbba:	6823      	ldr	r3, [r4, #0]
 800cbbc:	0699      	lsls	r1, r3, #26
 800cbbe:	bf42      	ittt	mi
 800cbc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cbc4:	3302      	addmi	r3, #2
 800cbc6:	f8c9 3000 	strmi.w	r3, [r9]
 800cbca:	6825      	ldr	r5, [r4, #0]
 800cbcc:	f015 0506 	ands.w	r5, r5, #6
 800cbd0:	d107      	bne.n	800cbe2 <_printf_common+0x52>
 800cbd2:	f104 0a19 	add.w	sl, r4, #25
 800cbd6:	68e3      	ldr	r3, [r4, #12]
 800cbd8:	f8d9 2000 	ldr.w	r2, [r9]
 800cbdc:	1a9b      	subs	r3, r3, r2
 800cbde:	429d      	cmp	r5, r3
 800cbe0:	db29      	blt.n	800cc36 <_printf_common+0xa6>
 800cbe2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cbe6:	6822      	ldr	r2, [r4, #0]
 800cbe8:	3300      	adds	r3, #0
 800cbea:	bf18      	it	ne
 800cbec:	2301      	movne	r3, #1
 800cbee:	0692      	lsls	r2, r2, #26
 800cbf0:	d42e      	bmi.n	800cc50 <_printf_common+0xc0>
 800cbf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbf6:	4639      	mov	r1, r7
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	47c0      	blx	r8
 800cbfc:	3001      	adds	r0, #1
 800cbfe:	d021      	beq.n	800cc44 <_printf_common+0xb4>
 800cc00:	6823      	ldr	r3, [r4, #0]
 800cc02:	68e5      	ldr	r5, [r4, #12]
 800cc04:	f8d9 2000 	ldr.w	r2, [r9]
 800cc08:	f003 0306 	and.w	r3, r3, #6
 800cc0c:	2b04      	cmp	r3, #4
 800cc0e:	bf08      	it	eq
 800cc10:	1aad      	subeq	r5, r5, r2
 800cc12:	68a3      	ldr	r3, [r4, #8]
 800cc14:	6922      	ldr	r2, [r4, #16]
 800cc16:	bf0c      	ite	eq
 800cc18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc1c:	2500      	movne	r5, #0
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	bfc4      	itt	gt
 800cc22:	1a9b      	subgt	r3, r3, r2
 800cc24:	18ed      	addgt	r5, r5, r3
 800cc26:	f04f 0900 	mov.w	r9, #0
 800cc2a:	341a      	adds	r4, #26
 800cc2c:	454d      	cmp	r5, r9
 800cc2e:	d11b      	bne.n	800cc68 <_printf_common+0xd8>
 800cc30:	2000      	movs	r0, #0
 800cc32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc36:	2301      	movs	r3, #1
 800cc38:	4652      	mov	r2, sl
 800cc3a:	4639      	mov	r1, r7
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	47c0      	blx	r8
 800cc40:	3001      	adds	r0, #1
 800cc42:	d103      	bne.n	800cc4c <_printf_common+0xbc>
 800cc44:	f04f 30ff 	mov.w	r0, #4294967295
 800cc48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc4c:	3501      	adds	r5, #1
 800cc4e:	e7c2      	b.n	800cbd6 <_printf_common+0x46>
 800cc50:	18e1      	adds	r1, r4, r3
 800cc52:	1c5a      	adds	r2, r3, #1
 800cc54:	2030      	movs	r0, #48	; 0x30
 800cc56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc5a:	4422      	add	r2, r4
 800cc5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc64:	3302      	adds	r3, #2
 800cc66:	e7c4      	b.n	800cbf2 <_printf_common+0x62>
 800cc68:	2301      	movs	r3, #1
 800cc6a:	4622      	mov	r2, r4
 800cc6c:	4639      	mov	r1, r7
 800cc6e:	4630      	mov	r0, r6
 800cc70:	47c0      	blx	r8
 800cc72:	3001      	adds	r0, #1
 800cc74:	d0e6      	beq.n	800cc44 <_printf_common+0xb4>
 800cc76:	f109 0901 	add.w	r9, r9, #1
 800cc7a:	e7d7      	b.n	800cc2c <_printf_common+0x9c>

0800cc7c <_printf_i>:
 800cc7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc80:	4617      	mov	r7, r2
 800cc82:	7e0a      	ldrb	r2, [r1, #24]
 800cc84:	b085      	sub	sp, #20
 800cc86:	2a6e      	cmp	r2, #110	; 0x6e
 800cc88:	4698      	mov	r8, r3
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	460c      	mov	r4, r1
 800cc8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc90:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800cc94:	f000 80bc 	beq.w	800ce10 <_printf_i+0x194>
 800cc98:	d81a      	bhi.n	800ccd0 <_printf_i+0x54>
 800cc9a:	2a63      	cmp	r2, #99	; 0x63
 800cc9c:	d02e      	beq.n	800ccfc <_printf_i+0x80>
 800cc9e:	d80a      	bhi.n	800ccb6 <_printf_i+0x3a>
 800cca0:	2a00      	cmp	r2, #0
 800cca2:	f000 80c8 	beq.w	800ce36 <_printf_i+0x1ba>
 800cca6:	2a58      	cmp	r2, #88	; 0x58
 800cca8:	f000 808a 	beq.w	800cdc0 <_printf_i+0x144>
 800ccac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccb0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800ccb4:	e02a      	b.n	800cd0c <_printf_i+0x90>
 800ccb6:	2a64      	cmp	r2, #100	; 0x64
 800ccb8:	d001      	beq.n	800ccbe <_printf_i+0x42>
 800ccba:	2a69      	cmp	r2, #105	; 0x69
 800ccbc:	d1f6      	bne.n	800ccac <_printf_i+0x30>
 800ccbe:	6821      	ldr	r1, [r4, #0]
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	f011 0f80 	tst.w	r1, #128	; 0x80
 800ccc6:	d023      	beq.n	800cd10 <_printf_i+0x94>
 800ccc8:	1d11      	adds	r1, r2, #4
 800ccca:	6019      	str	r1, [r3, #0]
 800cccc:	6813      	ldr	r3, [r2, #0]
 800ccce:	e027      	b.n	800cd20 <_printf_i+0xa4>
 800ccd0:	2a73      	cmp	r2, #115	; 0x73
 800ccd2:	f000 80b4 	beq.w	800ce3e <_printf_i+0x1c2>
 800ccd6:	d808      	bhi.n	800ccea <_printf_i+0x6e>
 800ccd8:	2a6f      	cmp	r2, #111	; 0x6f
 800ccda:	d02a      	beq.n	800cd32 <_printf_i+0xb6>
 800ccdc:	2a70      	cmp	r2, #112	; 0x70
 800ccde:	d1e5      	bne.n	800ccac <_printf_i+0x30>
 800cce0:	680a      	ldr	r2, [r1, #0]
 800cce2:	f042 0220 	orr.w	r2, r2, #32
 800cce6:	600a      	str	r2, [r1, #0]
 800cce8:	e003      	b.n	800ccf2 <_printf_i+0x76>
 800ccea:	2a75      	cmp	r2, #117	; 0x75
 800ccec:	d021      	beq.n	800cd32 <_printf_i+0xb6>
 800ccee:	2a78      	cmp	r2, #120	; 0x78
 800ccf0:	d1dc      	bne.n	800ccac <_printf_i+0x30>
 800ccf2:	2278      	movs	r2, #120	; 0x78
 800ccf4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800ccf8:	496e      	ldr	r1, [pc, #440]	; (800ceb4 <_printf_i+0x238>)
 800ccfa:	e064      	b.n	800cdc6 <_printf_i+0x14a>
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800cd02:	1d11      	adds	r1, r2, #4
 800cd04:	6019      	str	r1, [r3, #0]
 800cd06:	6813      	ldr	r3, [r2, #0]
 800cd08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	e0a3      	b.n	800ce58 <_printf_i+0x1dc>
 800cd10:	f011 0f40 	tst.w	r1, #64	; 0x40
 800cd14:	f102 0104 	add.w	r1, r2, #4
 800cd18:	6019      	str	r1, [r3, #0]
 800cd1a:	d0d7      	beq.n	800cccc <_printf_i+0x50>
 800cd1c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	da03      	bge.n	800cd2c <_printf_i+0xb0>
 800cd24:	222d      	movs	r2, #45	; 0x2d
 800cd26:	425b      	negs	r3, r3
 800cd28:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cd2c:	4962      	ldr	r1, [pc, #392]	; (800ceb8 <_printf_i+0x23c>)
 800cd2e:	220a      	movs	r2, #10
 800cd30:	e017      	b.n	800cd62 <_printf_i+0xe6>
 800cd32:	6820      	ldr	r0, [r4, #0]
 800cd34:	6819      	ldr	r1, [r3, #0]
 800cd36:	f010 0f80 	tst.w	r0, #128	; 0x80
 800cd3a:	d003      	beq.n	800cd44 <_printf_i+0xc8>
 800cd3c:	1d08      	adds	r0, r1, #4
 800cd3e:	6018      	str	r0, [r3, #0]
 800cd40:	680b      	ldr	r3, [r1, #0]
 800cd42:	e006      	b.n	800cd52 <_printf_i+0xd6>
 800cd44:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cd48:	f101 0004 	add.w	r0, r1, #4
 800cd4c:	6018      	str	r0, [r3, #0]
 800cd4e:	d0f7      	beq.n	800cd40 <_printf_i+0xc4>
 800cd50:	880b      	ldrh	r3, [r1, #0]
 800cd52:	4959      	ldr	r1, [pc, #356]	; (800ceb8 <_printf_i+0x23c>)
 800cd54:	2a6f      	cmp	r2, #111	; 0x6f
 800cd56:	bf14      	ite	ne
 800cd58:	220a      	movne	r2, #10
 800cd5a:	2208      	moveq	r2, #8
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800cd62:	6865      	ldr	r5, [r4, #4]
 800cd64:	60a5      	str	r5, [r4, #8]
 800cd66:	2d00      	cmp	r5, #0
 800cd68:	f2c0 809c 	blt.w	800cea4 <_printf_i+0x228>
 800cd6c:	6820      	ldr	r0, [r4, #0]
 800cd6e:	f020 0004 	bic.w	r0, r0, #4
 800cd72:	6020      	str	r0, [r4, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d13f      	bne.n	800cdf8 <_printf_i+0x17c>
 800cd78:	2d00      	cmp	r5, #0
 800cd7a:	f040 8095 	bne.w	800cea8 <_printf_i+0x22c>
 800cd7e:	4675      	mov	r5, lr
 800cd80:	2a08      	cmp	r2, #8
 800cd82:	d10b      	bne.n	800cd9c <_printf_i+0x120>
 800cd84:	6823      	ldr	r3, [r4, #0]
 800cd86:	07da      	lsls	r2, r3, #31
 800cd88:	d508      	bpl.n	800cd9c <_printf_i+0x120>
 800cd8a:	6923      	ldr	r3, [r4, #16]
 800cd8c:	6862      	ldr	r2, [r4, #4]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	bfde      	ittt	le
 800cd92:	2330      	movle	r3, #48	; 0x30
 800cd94:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd98:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd9c:	ebae 0305 	sub.w	r3, lr, r5
 800cda0:	6123      	str	r3, [r4, #16]
 800cda2:	f8cd 8000 	str.w	r8, [sp]
 800cda6:	463b      	mov	r3, r7
 800cda8:	aa03      	add	r2, sp, #12
 800cdaa:	4621      	mov	r1, r4
 800cdac:	4630      	mov	r0, r6
 800cdae:	f7ff feef 	bl	800cb90 <_printf_common>
 800cdb2:	3001      	adds	r0, #1
 800cdb4:	d155      	bne.n	800ce62 <_printf_i+0x1e6>
 800cdb6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdba:	b005      	add	sp, #20
 800cdbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdc0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800cdc4:	493c      	ldr	r1, [pc, #240]	; (800ceb8 <_printf_i+0x23c>)
 800cdc6:	6822      	ldr	r2, [r4, #0]
 800cdc8:	6818      	ldr	r0, [r3, #0]
 800cdca:	f012 0f80 	tst.w	r2, #128	; 0x80
 800cdce:	f100 0504 	add.w	r5, r0, #4
 800cdd2:	601d      	str	r5, [r3, #0]
 800cdd4:	d001      	beq.n	800cdda <_printf_i+0x15e>
 800cdd6:	6803      	ldr	r3, [r0, #0]
 800cdd8:	e002      	b.n	800cde0 <_printf_i+0x164>
 800cdda:	0655      	lsls	r5, r2, #25
 800cddc:	d5fb      	bpl.n	800cdd6 <_printf_i+0x15a>
 800cdde:	8803      	ldrh	r3, [r0, #0]
 800cde0:	07d0      	lsls	r0, r2, #31
 800cde2:	bf44      	itt	mi
 800cde4:	f042 0220 	orrmi.w	r2, r2, #32
 800cde8:	6022      	strmi	r2, [r4, #0]
 800cdea:	b91b      	cbnz	r3, 800cdf4 <_printf_i+0x178>
 800cdec:	6822      	ldr	r2, [r4, #0]
 800cdee:	f022 0220 	bic.w	r2, r2, #32
 800cdf2:	6022      	str	r2, [r4, #0]
 800cdf4:	2210      	movs	r2, #16
 800cdf6:	e7b1      	b.n	800cd5c <_printf_i+0xe0>
 800cdf8:	4675      	mov	r5, lr
 800cdfa:	fbb3 f0f2 	udiv	r0, r3, r2
 800cdfe:	fb02 3310 	mls	r3, r2, r0, r3
 800ce02:	5ccb      	ldrb	r3, [r1, r3]
 800ce04:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	d1f5      	bne.n	800cdfa <_printf_i+0x17e>
 800ce0e:	e7b7      	b.n	800cd80 <_printf_i+0x104>
 800ce10:	6808      	ldr	r0, [r1, #0]
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	6949      	ldr	r1, [r1, #20]
 800ce16:	f010 0f80 	tst.w	r0, #128	; 0x80
 800ce1a:	d004      	beq.n	800ce26 <_printf_i+0x1aa>
 800ce1c:	1d10      	adds	r0, r2, #4
 800ce1e:	6018      	str	r0, [r3, #0]
 800ce20:	6813      	ldr	r3, [r2, #0]
 800ce22:	6019      	str	r1, [r3, #0]
 800ce24:	e007      	b.n	800ce36 <_printf_i+0x1ba>
 800ce26:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ce2a:	f102 0004 	add.w	r0, r2, #4
 800ce2e:	6018      	str	r0, [r3, #0]
 800ce30:	6813      	ldr	r3, [r2, #0]
 800ce32:	d0f6      	beq.n	800ce22 <_printf_i+0x1a6>
 800ce34:	8019      	strh	r1, [r3, #0]
 800ce36:	2300      	movs	r3, #0
 800ce38:	6123      	str	r3, [r4, #16]
 800ce3a:	4675      	mov	r5, lr
 800ce3c:	e7b1      	b.n	800cda2 <_printf_i+0x126>
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	1d11      	adds	r1, r2, #4
 800ce42:	6019      	str	r1, [r3, #0]
 800ce44:	6815      	ldr	r5, [r2, #0]
 800ce46:	6862      	ldr	r2, [r4, #4]
 800ce48:	2100      	movs	r1, #0
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	f7f3 f9d0 	bl	80001f0 <memchr>
 800ce50:	b108      	cbz	r0, 800ce56 <_printf_i+0x1da>
 800ce52:	1b40      	subs	r0, r0, r5
 800ce54:	6060      	str	r0, [r4, #4]
 800ce56:	6863      	ldr	r3, [r4, #4]
 800ce58:	6123      	str	r3, [r4, #16]
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce60:	e79f      	b.n	800cda2 <_printf_i+0x126>
 800ce62:	6923      	ldr	r3, [r4, #16]
 800ce64:	462a      	mov	r2, r5
 800ce66:	4639      	mov	r1, r7
 800ce68:	4630      	mov	r0, r6
 800ce6a:	47c0      	blx	r8
 800ce6c:	3001      	adds	r0, #1
 800ce6e:	d0a2      	beq.n	800cdb6 <_printf_i+0x13a>
 800ce70:	6823      	ldr	r3, [r4, #0]
 800ce72:	079b      	lsls	r3, r3, #30
 800ce74:	d507      	bpl.n	800ce86 <_printf_i+0x20a>
 800ce76:	2500      	movs	r5, #0
 800ce78:	f104 0919 	add.w	r9, r4, #25
 800ce7c:	68e3      	ldr	r3, [r4, #12]
 800ce7e:	9a03      	ldr	r2, [sp, #12]
 800ce80:	1a9b      	subs	r3, r3, r2
 800ce82:	429d      	cmp	r5, r3
 800ce84:	db05      	blt.n	800ce92 <_printf_i+0x216>
 800ce86:	68e0      	ldr	r0, [r4, #12]
 800ce88:	9b03      	ldr	r3, [sp, #12]
 800ce8a:	4298      	cmp	r0, r3
 800ce8c:	bfb8      	it	lt
 800ce8e:	4618      	movlt	r0, r3
 800ce90:	e793      	b.n	800cdba <_printf_i+0x13e>
 800ce92:	2301      	movs	r3, #1
 800ce94:	464a      	mov	r2, r9
 800ce96:	4639      	mov	r1, r7
 800ce98:	4630      	mov	r0, r6
 800ce9a:	47c0      	blx	r8
 800ce9c:	3001      	adds	r0, #1
 800ce9e:	d08a      	beq.n	800cdb6 <_printf_i+0x13a>
 800cea0:	3501      	adds	r5, #1
 800cea2:	e7eb      	b.n	800ce7c <_printf_i+0x200>
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d1a7      	bne.n	800cdf8 <_printf_i+0x17c>
 800cea8:	780b      	ldrb	r3, [r1, #0]
 800ceaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ceae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ceb2:	e765      	b.n	800cd80 <_printf_i+0x104>
 800ceb4:	0800d218 	.word	0x0800d218
 800ceb8:	0800d207 	.word	0x0800d207

0800cebc <__ascii_wctomb>:
 800cebc:	b149      	cbz	r1, 800ced2 <__ascii_wctomb+0x16>
 800cebe:	2aff      	cmp	r2, #255	; 0xff
 800cec0:	bf85      	ittet	hi
 800cec2:	238a      	movhi	r3, #138	; 0x8a
 800cec4:	6003      	strhi	r3, [r0, #0]
 800cec6:	700a      	strbls	r2, [r1, #0]
 800cec8:	f04f 30ff 	movhi.w	r0, #4294967295
 800cecc:	bf98      	it	ls
 800cece:	2001      	movls	r0, #1
 800ced0:	4770      	bx	lr
 800ced2:	4608      	mov	r0, r1
 800ced4:	4770      	bx	lr

0800ced6 <memmove>:
 800ced6:	4288      	cmp	r0, r1
 800ced8:	b510      	push	{r4, lr}
 800ceda:	eb01 0302 	add.w	r3, r1, r2
 800cede:	d803      	bhi.n	800cee8 <memmove+0x12>
 800cee0:	1e42      	subs	r2, r0, #1
 800cee2:	4299      	cmp	r1, r3
 800cee4:	d10c      	bne.n	800cf00 <memmove+0x2a>
 800cee6:	bd10      	pop	{r4, pc}
 800cee8:	4298      	cmp	r0, r3
 800ceea:	d2f9      	bcs.n	800cee0 <memmove+0xa>
 800ceec:	1881      	adds	r1, r0, r2
 800ceee:	1ad2      	subs	r2, r2, r3
 800cef0:	42d3      	cmn	r3, r2
 800cef2:	d100      	bne.n	800cef6 <memmove+0x20>
 800cef4:	bd10      	pop	{r4, pc}
 800cef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cefa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cefe:	e7f7      	b.n	800cef0 <memmove+0x1a>
 800cf00:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf04:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cf08:	e7eb      	b.n	800cee2 <memmove+0xc>
	...

0800cf0c <_free_r>:
 800cf0c:	b538      	push	{r3, r4, r5, lr}
 800cf0e:	4605      	mov	r5, r0
 800cf10:	2900      	cmp	r1, #0
 800cf12:	d045      	beq.n	800cfa0 <_free_r+0x94>
 800cf14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf18:	1f0c      	subs	r4, r1, #4
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	bfb8      	it	lt
 800cf1e:	18e4      	addlt	r4, r4, r3
 800cf20:	f000 f8d6 	bl	800d0d0 <__malloc_lock>
 800cf24:	4a1f      	ldr	r2, [pc, #124]	; (800cfa4 <_free_r+0x98>)
 800cf26:	6813      	ldr	r3, [r2, #0]
 800cf28:	4610      	mov	r0, r2
 800cf2a:	b933      	cbnz	r3, 800cf3a <_free_r+0x2e>
 800cf2c:	6063      	str	r3, [r4, #4]
 800cf2e:	6014      	str	r4, [r2, #0]
 800cf30:	4628      	mov	r0, r5
 800cf32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf36:	f000 b8cc 	b.w	800d0d2 <__malloc_unlock>
 800cf3a:	42a3      	cmp	r3, r4
 800cf3c:	d90c      	bls.n	800cf58 <_free_r+0x4c>
 800cf3e:	6821      	ldr	r1, [r4, #0]
 800cf40:	1862      	adds	r2, r4, r1
 800cf42:	4293      	cmp	r3, r2
 800cf44:	bf04      	itt	eq
 800cf46:	681a      	ldreq	r2, [r3, #0]
 800cf48:	685b      	ldreq	r3, [r3, #4]
 800cf4a:	6063      	str	r3, [r4, #4]
 800cf4c:	bf04      	itt	eq
 800cf4e:	1852      	addeq	r2, r2, r1
 800cf50:	6022      	streq	r2, [r4, #0]
 800cf52:	6004      	str	r4, [r0, #0]
 800cf54:	e7ec      	b.n	800cf30 <_free_r+0x24>
 800cf56:	4613      	mov	r3, r2
 800cf58:	685a      	ldr	r2, [r3, #4]
 800cf5a:	b10a      	cbz	r2, 800cf60 <_free_r+0x54>
 800cf5c:	42a2      	cmp	r2, r4
 800cf5e:	d9fa      	bls.n	800cf56 <_free_r+0x4a>
 800cf60:	6819      	ldr	r1, [r3, #0]
 800cf62:	1858      	adds	r0, r3, r1
 800cf64:	42a0      	cmp	r0, r4
 800cf66:	d10b      	bne.n	800cf80 <_free_r+0x74>
 800cf68:	6820      	ldr	r0, [r4, #0]
 800cf6a:	4401      	add	r1, r0
 800cf6c:	1858      	adds	r0, r3, r1
 800cf6e:	4282      	cmp	r2, r0
 800cf70:	6019      	str	r1, [r3, #0]
 800cf72:	d1dd      	bne.n	800cf30 <_free_r+0x24>
 800cf74:	6810      	ldr	r0, [r2, #0]
 800cf76:	6852      	ldr	r2, [r2, #4]
 800cf78:	605a      	str	r2, [r3, #4]
 800cf7a:	4401      	add	r1, r0
 800cf7c:	6019      	str	r1, [r3, #0]
 800cf7e:	e7d7      	b.n	800cf30 <_free_r+0x24>
 800cf80:	d902      	bls.n	800cf88 <_free_r+0x7c>
 800cf82:	230c      	movs	r3, #12
 800cf84:	602b      	str	r3, [r5, #0]
 800cf86:	e7d3      	b.n	800cf30 <_free_r+0x24>
 800cf88:	6820      	ldr	r0, [r4, #0]
 800cf8a:	1821      	adds	r1, r4, r0
 800cf8c:	428a      	cmp	r2, r1
 800cf8e:	bf04      	itt	eq
 800cf90:	6811      	ldreq	r1, [r2, #0]
 800cf92:	6852      	ldreq	r2, [r2, #4]
 800cf94:	6062      	str	r2, [r4, #4]
 800cf96:	bf04      	itt	eq
 800cf98:	1809      	addeq	r1, r1, r0
 800cf9a:	6021      	streq	r1, [r4, #0]
 800cf9c:	605c      	str	r4, [r3, #4]
 800cf9e:	e7c7      	b.n	800cf30 <_free_r+0x24>
 800cfa0:	bd38      	pop	{r3, r4, r5, pc}
 800cfa2:	bf00      	nop
 800cfa4:	2000778c 	.word	0x2000778c

0800cfa8 <_malloc_r>:
 800cfa8:	b570      	push	{r4, r5, r6, lr}
 800cfaa:	1ccd      	adds	r5, r1, #3
 800cfac:	f025 0503 	bic.w	r5, r5, #3
 800cfb0:	3508      	adds	r5, #8
 800cfb2:	2d0c      	cmp	r5, #12
 800cfb4:	bf38      	it	cc
 800cfb6:	250c      	movcc	r5, #12
 800cfb8:	2d00      	cmp	r5, #0
 800cfba:	4606      	mov	r6, r0
 800cfbc:	db01      	blt.n	800cfc2 <_malloc_r+0x1a>
 800cfbe:	42a9      	cmp	r1, r5
 800cfc0:	d903      	bls.n	800cfca <_malloc_r+0x22>
 800cfc2:	230c      	movs	r3, #12
 800cfc4:	6033      	str	r3, [r6, #0]
 800cfc6:	2000      	movs	r0, #0
 800cfc8:	bd70      	pop	{r4, r5, r6, pc}
 800cfca:	f000 f881 	bl	800d0d0 <__malloc_lock>
 800cfce:	4a23      	ldr	r2, [pc, #140]	; (800d05c <_malloc_r+0xb4>)
 800cfd0:	6814      	ldr	r4, [r2, #0]
 800cfd2:	4621      	mov	r1, r4
 800cfd4:	b991      	cbnz	r1, 800cffc <_malloc_r+0x54>
 800cfd6:	4c22      	ldr	r4, [pc, #136]	; (800d060 <_malloc_r+0xb8>)
 800cfd8:	6823      	ldr	r3, [r4, #0]
 800cfda:	b91b      	cbnz	r3, 800cfe4 <_malloc_r+0x3c>
 800cfdc:	4630      	mov	r0, r6
 800cfde:	f000 f867 	bl	800d0b0 <_sbrk_r>
 800cfe2:	6020      	str	r0, [r4, #0]
 800cfe4:	4629      	mov	r1, r5
 800cfe6:	4630      	mov	r0, r6
 800cfe8:	f000 f862 	bl	800d0b0 <_sbrk_r>
 800cfec:	1c43      	adds	r3, r0, #1
 800cfee:	d126      	bne.n	800d03e <_malloc_r+0x96>
 800cff0:	230c      	movs	r3, #12
 800cff2:	6033      	str	r3, [r6, #0]
 800cff4:	4630      	mov	r0, r6
 800cff6:	f000 f86c 	bl	800d0d2 <__malloc_unlock>
 800cffa:	e7e4      	b.n	800cfc6 <_malloc_r+0x1e>
 800cffc:	680b      	ldr	r3, [r1, #0]
 800cffe:	1b5b      	subs	r3, r3, r5
 800d000:	d41a      	bmi.n	800d038 <_malloc_r+0x90>
 800d002:	2b0b      	cmp	r3, #11
 800d004:	d90f      	bls.n	800d026 <_malloc_r+0x7e>
 800d006:	600b      	str	r3, [r1, #0]
 800d008:	50cd      	str	r5, [r1, r3]
 800d00a:	18cc      	adds	r4, r1, r3
 800d00c:	4630      	mov	r0, r6
 800d00e:	f000 f860 	bl	800d0d2 <__malloc_unlock>
 800d012:	f104 000b 	add.w	r0, r4, #11
 800d016:	1d23      	adds	r3, r4, #4
 800d018:	f020 0007 	bic.w	r0, r0, #7
 800d01c:	1ac3      	subs	r3, r0, r3
 800d01e:	d01b      	beq.n	800d058 <_malloc_r+0xb0>
 800d020:	425a      	negs	r2, r3
 800d022:	50e2      	str	r2, [r4, r3]
 800d024:	bd70      	pop	{r4, r5, r6, pc}
 800d026:	428c      	cmp	r4, r1
 800d028:	bf0d      	iteet	eq
 800d02a:	6863      	ldreq	r3, [r4, #4]
 800d02c:	684b      	ldrne	r3, [r1, #4]
 800d02e:	6063      	strne	r3, [r4, #4]
 800d030:	6013      	streq	r3, [r2, #0]
 800d032:	bf18      	it	ne
 800d034:	460c      	movne	r4, r1
 800d036:	e7e9      	b.n	800d00c <_malloc_r+0x64>
 800d038:	460c      	mov	r4, r1
 800d03a:	6849      	ldr	r1, [r1, #4]
 800d03c:	e7ca      	b.n	800cfd4 <_malloc_r+0x2c>
 800d03e:	1cc4      	adds	r4, r0, #3
 800d040:	f024 0403 	bic.w	r4, r4, #3
 800d044:	42a0      	cmp	r0, r4
 800d046:	d005      	beq.n	800d054 <_malloc_r+0xac>
 800d048:	1a21      	subs	r1, r4, r0
 800d04a:	4630      	mov	r0, r6
 800d04c:	f000 f830 	bl	800d0b0 <_sbrk_r>
 800d050:	3001      	adds	r0, #1
 800d052:	d0cd      	beq.n	800cff0 <_malloc_r+0x48>
 800d054:	6025      	str	r5, [r4, #0]
 800d056:	e7d9      	b.n	800d00c <_malloc_r+0x64>
 800d058:	bd70      	pop	{r4, r5, r6, pc}
 800d05a:	bf00      	nop
 800d05c:	2000778c 	.word	0x2000778c
 800d060:	20007790 	.word	0x20007790

0800d064 <_realloc_r>:
 800d064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d066:	4607      	mov	r7, r0
 800d068:	4614      	mov	r4, r2
 800d06a:	460e      	mov	r6, r1
 800d06c:	b921      	cbnz	r1, 800d078 <_realloc_r+0x14>
 800d06e:	4611      	mov	r1, r2
 800d070:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d074:	f7ff bf98 	b.w	800cfa8 <_malloc_r>
 800d078:	b922      	cbnz	r2, 800d084 <_realloc_r+0x20>
 800d07a:	f7ff ff47 	bl	800cf0c <_free_r>
 800d07e:	4625      	mov	r5, r4
 800d080:	4628      	mov	r0, r5
 800d082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d084:	f000 f826 	bl	800d0d4 <_malloc_usable_size_r>
 800d088:	4284      	cmp	r4, r0
 800d08a:	d90f      	bls.n	800d0ac <_realloc_r+0x48>
 800d08c:	4621      	mov	r1, r4
 800d08e:	4638      	mov	r0, r7
 800d090:	f7ff ff8a 	bl	800cfa8 <_malloc_r>
 800d094:	4605      	mov	r5, r0
 800d096:	2800      	cmp	r0, #0
 800d098:	d0f2      	beq.n	800d080 <_realloc_r+0x1c>
 800d09a:	4631      	mov	r1, r6
 800d09c:	4622      	mov	r2, r4
 800d09e:	f7ff fb1f 	bl	800c6e0 <memcpy>
 800d0a2:	4631      	mov	r1, r6
 800d0a4:	4638      	mov	r0, r7
 800d0a6:	f7ff ff31 	bl	800cf0c <_free_r>
 800d0aa:	e7e9      	b.n	800d080 <_realloc_r+0x1c>
 800d0ac:	4635      	mov	r5, r6
 800d0ae:	e7e7      	b.n	800d080 <_realloc_r+0x1c>

0800d0b0 <_sbrk_r>:
 800d0b0:	b538      	push	{r3, r4, r5, lr}
 800d0b2:	4c06      	ldr	r4, [pc, #24]	; (800d0cc <_sbrk_r+0x1c>)
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	4605      	mov	r5, r0
 800d0b8:	4608      	mov	r0, r1
 800d0ba:	6023      	str	r3, [r4, #0]
 800d0bc:	f000 f814 	bl	800d0e8 <_sbrk>
 800d0c0:	1c43      	adds	r3, r0, #1
 800d0c2:	d102      	bne.n	800d0ca <_sbrk_r+0x1a>
 800d0c4:	6823      	ldr	r3, [r4, #0]
 800d0c6:	b103      	cbz	r3, 800d0ca <_sbrk_r+0x1a>
 800d0c8:	602b      	str	r3, [r5, #0]
 800d0ca:	bd38      	pop	{r3, r4, r5, pc}
 800d0cc:	20009450 	.word	0x20009450

0800d0d0 <__malloc_lock>:
 800d0d0:	4770      	bx	lr

0800d0d2 <__malloc_unlock>:
 800d0d2:	4770      	bx	lr

0800d0d4 <_malloc_usable_size_r>:
 800d0d4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800d0d8:	2800      	cmp	r0, #0
 800d0da:	f1a0 0004 	sub.w	r0, r0, #4
 800d0de:	bfbc      	itt	lt
 800d0e0:	580b      	ldrlt	r3, [r1, r0]
 800d0e2:	18c0      	addlt	r0, r0, r3
 800d0e4:	4770      	bx	lr
	...

0800d0e8 <_sbrk>:
 800d0e8:	4b04      	ldr	r3, [pc, #16]	; (800d0fc <_sbrk+0x14>)
 800d0ea:	6819      	ldr	r1, [r3, #0]
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	b909      	cbnz	r1, 800d0f4 <_sbrk+0xc>
 800d0f0:	4903      	ldr	r1, [pc, #12]	; (800d100 <_sbrk+0x18>)
 800d0f2:	6019      	str	r1, [r3, #0]
 800d0f4:	6818      	ldr	r0, [r3, #0]
 800d0f6:	4402      	add	r2, r0
 800d0f8:	601a      	str	r2, [r3, #0]
 800d0fa:	4770      	bx	lr
 800d0fc:	20007794 	.word	0x20007794
 800d100:	20009454 	.word	0x20009454

0800d104 <_init>:
 800d104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d106:	bf00      	nop
 800d108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d10a:	bc08      	pop	{r3}
 800d10c:	469e      	mov	lr, r3
 800d10e:	4770      	bx	lr

0800d110 <_fini>:
 800d110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d112:	bf00      	nop
 800d114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d116:	bc08      	pop	{r3}
 800d118:	469e      	mov	lr, r3
 800d11a:	4770      	bx	lr
