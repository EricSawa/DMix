
DMX_Merger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd2c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800bec0  0800bec0  0001bec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bf64  0800bf64  0001bf64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bf6c  0800bf6c  0001bf6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bf70  0800bf70  0001bf70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000948  20000000  0800bf74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002d38  20000948  0800c8bc  00020948  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20003680  0800c8bc  00023680  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020948  2**0
                  CONTENTS, READONLY
 10 .debug_info   000363a2  00000000  00000000  00020978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000060b8  00000000  00000000  00056d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001e18  00000000  00000000  0005cdd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001b00  00000000  00000000  0005ebf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000fe29  00000000  00000000  000606f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00008790  00000000  00000000  00070519  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00078ca9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000079cc  00000000  00000000  00078d28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000948 	.word	0x20000948
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800bea8 	.word	0x0800bea8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000094c 	.word	0x2000094c
 80001d0:	0800bea8 	.word	0x0800bea8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <app_btn_init>:
static void getOthSwitches(eal_task_Task *self);
static void debounceOthSwitches(eal_task_Task *self);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_btn_init(eal_task_Task *self){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	memset(othButtonState, 0, sizeof(othButtonState));
 80004ec:	2205      	movs	r2, #5
 80004ee:	2100      	movs	r1, #0
 80004f0:	480d      	ldr	r0, [pc, #52]	; (8000528 <app_btn_init+0x44>)
 80004f2:	f00b fcd1 	bl	800be98 <memset>
	memset(othButtonBuffer, 0, sizeof(othButtonBuffer));
 80004f6:	2205      	movs	r2, #5
 80004f8:	2100      	movs	r1, #0
 80004fa:	480c      	ldr	r0, [pc, #48]	; (800052c <app_btn_init+0x48>)
 80004fc:	f00b fccc 	bl	800be98 <memset>
	memset(othButtonTime, 0, sizeof(othButtonTime));
 8000500:	220a      	movs	r2, #10
 8000502:	2100      	movs	r1, #0
 8000504:	480a      	ldr	r0, [pc, #40]	; (8000530 <app_btn_init+0x4c>)
 8000506:	f00b fcc7 	bl	800be98 <memset>
	memset(othButtonHoldTimeShort, 0, sizeof(othButtonHoldTimeShort));
 800050a:	220a      	movs	r2, #10
 800050c:	2100      	movs	r1, #0
 800050e:	4809      	ldr	r0, [pc, #36]	; (8000534 <app_btn_init+0x50>)
 8000510:	f00b fcc2 	bl	800be98 <memset>
	memset(othButtonHoldTimeLong, 0, sizeof(othButtonHoldTimeLong));
 8000514:	220a      	movs	r2, #10
 8000516:	2100      	movs	r1, #0
 8000518:	4807      	ldr	r0, [pc, #28]	; (8000538 <app_btn_init+0x54>)
 800051a:	f00b fcbd 	bl	800be98 <memset>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000964 	.word	0x20000964
 800052c:	2000096c 	.word	0x2000096c
 8000530:	20000974 	.word	0x20000974
 8000534:	20000980 	.word	0x20000980
 8000538:	2000098c 	.word	0x2000098c

0800053c <app_btn_process>:

void app_btn_process(eal_task_Task *self){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	f083 0301 	eor.w	r3, r3, #1
 800054c:	b2db      	uxtb	r3, r3
 800054e:	2b00      	cmp	r3, #0
 8000550:	d111      	bne.n	8000576 <app_btn_process+0x3a>
	if(!cyclicFlag) return;
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <app_btn_process+0x48>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	f083 0301 	eor.w	r3, r3, #1
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d10b      	bne.n	800057a <app_btn_process+0x3e>
	getOthSwitches(self);
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f000 f83e 	bl	80005e4 <getOthSwitches>
	debounceOthSwitches(self);
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f000 f8b9 	bl	80006e0 <debounceOthSwitches>
	cyclicFlag = false;
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <app_btn_process+0x48>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	e002      	b.n	800057c <app_btn_process+0x40>
	if(!self->enable) return;
 8000576:	bf00      	nop
 8000578:	e000      	b.n	800057c <app_btn_process+0x40>
	if(!cyclicFlag) return;
 800057a:	bf00      	nop
}
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000996 	.word	0x20000996

08000588 <app_btn_cyclic1ms>:

void app_btn_cyclic1ms(eal_task_Task *self, bool stat){
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <app_btn_cyclic1ms+0x3c>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
	if(internalTimer > 0)--internalTimer;
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <app_btn_cyclic1ms+0x40>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	b21b      	sxth	r3, r3
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dd08      	ble.n	80005b6 <app_btn_cyclic1ms+0x2e>
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <app_btn_cyclic1ms+0x40>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	3b01      	subs	r3, #1
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	b21a      	sxth	r2, r3
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <app_btn_cyclic1ms+0x40>)
 80005b4:	801a      	strh	r2, [r3, #0]
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000996 	.word	0x20000996
 80005c8:	20000998 	.word	0x20000998

080005cc <app_btn_receiveMsg>:

void app_btn_receiveMsg(eal_task_Task *self, msg_Message *message){
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]

}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <getOthSwitches>:

/* Helper ----------------------------------------------------------------------*/
static void getOthSwitches(eal_task_Task *self){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(I_SW2_GPIO_Port, I_SW2_Pin) == 0) 		othButtonBuffer[0] |= (1 << 0); else othButtonBuffer[0] &= ~(1 << 0);
 80005ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f4:	f001 fbea 	bl	8001dcc <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d107      	bne.n	800060e <getOthSwitches+0x2a>
 80005fe:	4b37      	ldr	r3, [pc, #220]	; (80006dc <getOthSwitches+0xf8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <getOthSwitches+0xf8>)
 800060a:	701a      	strb	r2, [r3, #0]
 800060c:	e006      	b.n	800061c <getOthSwitches+0x38>
 800060e:	4b33      	ldr	r3, [pc, #204]	; (80006dc <getOthSwitches+0xf8>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	f023 0301 	bic.w	r3, r3, #1
 8000616:	b2da      	uxtb	r2, r3
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <getOthSwitches+0xf8>)
 800061a:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO1_GPIO_Port, I_GPIO1_Pin) == 0) 	othButtonBuffer[0] |= (1 << 1); else othButtonBuffer[0] &= ~(1 << 1);
 800061c:	2110      	movs	r1, #16
 800061e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000622:	f001 fbd3 	bl	8001dcc <HAL_GPIO_ReadPin>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d107      	bne.n	800063c <getOthSwitches+0x58>
 800062c:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <getOthSwitches+0xf8>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <getOthSwitches+0xf8>)
 8000638:	701a      	strb	r2, [r3, #0]
 800063a:	e006      	b.n	800064a <getOthSwitches+0x66>
 800063c:	4b27      	ldr	r3, [pc, #156]	; (80006dc <getOthSwitches+0xf8>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	f023 0302 	bic.w	r3, r3, #2
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <getOthSwitches+0xf8>)
 8000648:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO2_GPIO_Port, I_GPIO2_Pin) == 0) 	othButtonBuffer[0] |= (1 << 2); else othButtonBuffer[0] &= ~(1 << 2);
 800064a:	2120      	movs	r1, #32
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f001 fbbc 	bl	8001dcc <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d107      	bne.n	800066a <getOthSwitches+0x86>
 800065a:	4b20      	ldr	r3, [pc, #128]	; (80006dc <getOthSwitches+0xf8>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	b2da      	uxtb	r2, r3
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <getOthSwitches+0xf8>)
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	e006      	b.n	8000678 <getOthSwitches+0x94>
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <getOthSwitches+0xf8>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	f023 0304 	bic.w	r3, r3, #4
 8000672:	b2da      	uxtb	r2, r3
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <getOthSwitches+0xf8>)
 8000676:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO3_GPIO_Port, I_GPIO3_Pin) == 0) 	othButtonBuffer[0] |= (1 << 3); else othButtonBuffer[0] &= ~(1 << 3);
 8000678:	2140      	movs	r1, #64	; 0x40
 800067a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067e:	f001 fba5 	bl	8001dcc <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d107      	bne.n	8000698 <getOthSwitches+0xb4>
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <getOthSwitches+0xf8>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	f043 0308 	orr.w	r3, r3, #8
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <getOthSwitches+0xf8>)
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	e006      	b.n	80006a6 <getOthSwitches+0xc2>
 8000698:	4b10      	ldr	r3, [pc, #64]	; (80006dc <getOthSwitches+0xf8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	f023 0308 	bic.w	r3, r3, #8
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <getOthSwitches+0xf8>)
 80006a4:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(I_GPIO4_GPIO_Port, I_GPIO4_Pin) == 0) 	othButtonBuffer[0] |= (1 << 4); else othButtonBuffer[0] &= ~(1 << 4);
 80006a6:	2180      	movs	r1, #128	; 0x80
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ac:	f001 fb8e 	bl	8001dcc <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d107      	bne.n	80006c6 <getOthSwitches+0xe2>
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <getOthSwitches+0xf8>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	f043 0310 	orr.w	r3, r3, #16
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <getOthSwitches+0xf8>)
 80006c2:	701a      	strb	r2, [r3, #0]

}
 80006c4:	e006      	b.n	80006d4 <getOthSwitches+0xf0>
	if(HAL_GPIO_ReadPin(I_GPIO4_GPIO_Port, I_GPIO4_Pin) == 0) 	othButtonBuffer[0] |= (1 << 4); else othButtonBuffer[0] &= ~(1 << 4);
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <getOthSwitches+0xf8>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	f023 0310 	bic.w	r3, r3, #16
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	4b02      	ldr	r3, [pc, #8]	; (80006dc <getOthSwitches+0xf8>)
 80006d2:	701a      	strb	r2, [r3, #0]
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000096c 	.word	0x2000096c

080006e0 <debounceOthSwitches>:

static void debounceOthSwitches(eal_task_Task *self){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	; 0x30
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	static uint8_t swNmbr = 0;
	if(swIndex[swNmbr] != app_btn_NONE){
 80006e8:	4ba3      	ldr	r3, [pc, #652]	; (8000978 <debounceOthSwitches+0x298>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4ba3      	ldr	r3, [pc, #652]	; (800097c <debounceOthSwitches+0x29c>)
 80006f0:	5c9b      	ldrb	r3, [r3, r2]
 80006f2:	2bff      	cmp	r3, #255	; 0xff
 80006f4:	f000 812f 	beq.w	8000956 <debounceOthSwitches+0x276>
		uint16_t msk = 1 << (swIndex[swNmbr]&0xf);
 80006f8:	4b9f      	ldr	r3, [pc, #636]	; (8000978 <debounceOthSwitches+0x298>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b9f      	ldr	r3, [pc, #636]	; (800097c <debounceOthSwitches+0x29c>)
 8000700:	5c9b      	ldrb	r3, [r3, r2]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	2201      	movs	r2, #1
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint8_t  idx = (swIndex[swNmbr]&0xf0) >> 4;
 800070e:	4b9a      	ldr	r3, [pc, #616]	; (8000978 <debounceOthSwitches+0x298>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	4b99      	ldr	r3, [pc, #612]	; (800097c <debounceOthSwitches+0x29c>)
 8000716:	5c9b      	ldrb	r3, [r3, r2]
 8000718:	091b      	lsrs	r3, r3, #4
 800071a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (!(othButtonBuffer[idx] & msk)){ 			/*button is released*/
 800071e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000722:	4a97      	ldr	r2, [pc, #604]	; (8000980 <debounceOthSwitches+0x2a0>)
 8000724:	5cd3      	ldrb	r3, [r2, r3]
 8000726:	461a      	mov	r2, r3
 8000728:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800072a:	4013      	ands	r3, r2
 800072c:	2b00      	cmp	r3, #0
 800072e:	d15d      	bne.n	80007ec <debounceOthSwitches+0x10c>
			if(othButtonTime[swNmbr] > 0){
 8000730:	4b91      	ldr	r3, [pc, #580]	; (8000978 <debounceOthSwitches+0x298>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b93      	ldr	r3, [pc, #588]	; (8000984 <debounceOthSwitches+0x2a4>)
 8000738:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800073c:	2b00      	cmp	r3, #0
 800073e:	f000 80a4 	beq.w	800088a <debounceOthSwitches+0x1aa>
				--othButtonTime[swNmbr];
 8000742:	4b8d      	ldr	r3, [pc, #564]	; (8000978 <debounceOthSwitches+0x298>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4a8f      	ldr	r2, [pc, #572]	; (8000984 <debounceOthSwitches+0x2a4>)
 8000748:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800074c:	3a01      	subs	r2, #1
 800074e:	b291      	uxth	r1, r2
 8000750:	4a8c      	ldr	r2, [pc, #560]	; (8000984 <debounceOthSwitches+0x2a4>)
 8000752:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(othButtonTime[swNmbr] <= 0){
 8000756:	4b88      	ldr	r3, [pc, #544]	; (8000978 <debounceOthSwitches+0x298>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	4b89      	ldr	r3, [pc, #548]	; (8000984 <debounceOthSwitches+0x2a4>)
 800075e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000762:	2b00      	cmp	r3, #0
 8000764:	f040 8091 	bne.w	800088a <debounceOthSwitches+0x1aa>
					if(othButtonState[idx] & msk){
 8000768:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800076c:	4a86      	ldr	r2, [pc, #536]	; (8000988 <debounceOthSwitches+0x2a8>)
 800076e:	5cd3      	ldrb	r3, [r2, r3]
 8000770:	461a      	mov	r2, r3
 8000772:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000774:	4013      	ands	r3, r2
 8000776:	2b00      	cmp	r3, #0
 8000778:	f000 8087 	beq.w	800088a <debounceOthSwitches+0x1aa>
						if(self->sendMsg != NULL){
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d014      	beq.n	80007ae <debounceOthSwitches+0xce>
							msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_RELEASED, 0, 0);
 8000784:	4b7c      	ldr	r3, [pc, #496]	; (8000978 <debounceOthSwitches+0x298>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b29b      	uxth	r3, r3
 800078a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800078c:	2300      	movs	r3, #0
 800078e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000790:	2342      	movs	r3, #66	; 0x42
 8000792:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000796:	2300      	movs	r3, #0
 8000798:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800079c:	2300      	movs	r3, #0
 800079e:	857b      	strh	r3, [r7, #42]	; 0x2a
							self->sendMsg(self, &newMessage);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	695b      	ldr	r3, [r3, #20]
 80007a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80007a8:	4611      	mov	r1, r2
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	4798      	blx	r3
						}
						othButtonState[idx] &=~msk;
 80007ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80007b2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80007b6:	4974      	ldr	r1, [pc, #464]	; (8000988 <debounceOthSwitches+0x2a8>)
 80007b8:	5c8a      	ldrb	r2, [r1, r2]
 80007ba:	b251      	sxtb	r1, r2
 80007bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80007be:	b252      	sxtb	r2, r2
 80007c0:	43d2      	mvns	r2, r2
 80007c2:	b252      	sxtb	r2, r2
 80007c4:	400a      	ands	r2, r1
 80007c6:	b252      	sxtb	r2, r2
 80007c8:	b2d1      	uxtb	r1, r2
 80007ca:	4a6f      	ldr	r2, [pc, #444]	; (8000988 <debounceOthSwitches+0x2a8>)
 80007cc:	54d1      	strb	r1, [r2, r3]
						othButtonHoldTimeShort[swNmbr] = 0;
 80007ce:	4b6a      	ldr	r3, [pc, #424]	; (8000978 <debounceOthSwitches+0x298>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b6d      	ldr	r3, [pc, #436]	; (800098c <debounceOthSwitches+0x2ac>)
 80007d6:	2100      	movs	r1, #0
 80007d8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						othButtonHoldTimeLong[swNmbr] = 0;
 80007dc:	4b66      	ldr	r3, [pc, #408]	; (8000978 <debounceOthSwitches+0x298>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b6b      	ldr	r3, [pc, #428]	; (8000990 <debounceOthSwitches+0x2b0>)
 80007e4:	2100      	movs	r1, #0
 80007e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80007ea:	e04e      	b.n	800088a <debounceOthSwitches+0x1aa>
					}
				}
			}
		}else{					 						/*button is down*/
			if(othButtonTime[swNmbr] < app_cfg_btn_TIME_DEBOUNCE){
 80007ec:	4b62      	ldr	r3, [pc, #392]	; (8000978 <debounceOthSwitches+0x298>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b64      	ldr	r3, [pc, #400]	; (8000984 <debounceOthSwitches+0x2a4>)
 80007f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	d846      	bhi.n	800088a <debounceOthSwitches+0x1aa>
				++othButtonTime[swNmbr];
 80007fc:	4b5e      	ldr	r3, [pc, #376]	; (8000978 <debounceOthSwitches+0x298>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4a60      	ldr	r2, [pc, #384]	; (8000984 <debounceOthSwitches+0x2a4>)
 8000802:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000806:	3201      	adds	r2, #1
 8000808:	b291      	uxth	r1, r2
 800080a:	4a5e      	ldr	r2, [pc, #376]	; (8000984 <debounceOthSwitches+0x2a4>)
 800080c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(othButtonTime[swNmbr] >= app_cfg_btn_TIME_DEBOUNCE){
 8000810:	4b59      	ldr	r3, [pc, #356]	; (8000978 <debounceOthSwitches+0x298>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b5b      	ldr	r3, [pc, #364]	; (8000984 <debounceOthSwitches+0x2a4>)
 8000818:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800081c:	2b03      	cmp	r3, #3
 800081e:	d934      	bls.n	800088a <debounceOthSwitches+0x1aa>
					if(self->sendMsg != NULL){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	695b      	ldr	r3, [r3, #20]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d014      	beq.n	8000852 <debounceOthSwitches+0x172>
						msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_PRESSED, 0, 0);
 8000828:	4b53      	ldr	r3, [pc, #332]	; (8000978 <debounceOthSwitches+0x298>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b29b      	uxth	r3, r3
 800082e:	83bb      	strh	r3, [r7, #28]
 8000830:	2301      	movs	r3, #1
 8000832:	83fb      	strh	r3, [r7, #30]
 8000834:	2342      	movs	r3, #66	; 0x42
 8000836:	f887 3020 	strb.w	r3, [r7, #32]
 800083a:	2300      	movs	r3, #0
 800083c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000840:	2300      	movs	r3, #0
 8000842:	847b      	strh	r3, [r7, #34]	; 0x22
						self->sendMsg(self, &newMessage);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	f107 021c 	add.w	r2, r7, #28
 800084c:	4611      	mov	r1, r2
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	4798      	blx	r3
					}
					othButtonState[idx] |= msk;
 8000852:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000856:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800085a:	494b      	ldr	r1, [pc, #300]	; (8000988 <debounceOthSwitches+0x2a8>)
 800085c:	5c89      	ldrb	r1, [r1, r2]
 800085e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	430a      	orrs	r2, r1
 8000864:	b2d1      	uxtb	r1, r2
 8000866:	4a48      	ldr	r2, [pc, #288]	; (8000988 <debounceOthSwitches+0x2a8>)
 8000868:	54d1      	strb	r1, [r2, r3]
					othButtonHoldTimeShort[swNmbr] = app_cfg_btn_TIME_HOLD_SHORT;
 800086a:	4b43      	ldr	r3, [pc, #268]	; (8000978 <debounceOthSwitches+0x298>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	4b46      	ldr	r3, [pc, #280]	; (800098c <debounceOthSwitches+0x2ac>)
 8000872:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000876:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					othButtonHoldTimeLong[swNmbr] = app_cfg_btn_TIME_HOLD_LONG;
 800087a:	4b3f      	ldr	r3, [pc, #252]	; (8000978 <debounceOthSwitches+0x298>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	4b43      	ldr	r3, [pc, #268]	; (8000990 <debounceOthSwitches+0x2b0>)
 8000882:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000886:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				}
			}
		}
		if(othButtonHoldTimeShort[swNmbr]>0){
 800088a:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <debounceOthSwitches+0x298>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	4b3e      	ldr	r3, [pc, #248]	; (800098c <debounceOthSwitches+0x2ac>)
 8000892:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000896:	2b00      	cmp	r3, #0
 8000898:	dd2a      	ble.n	80008f0 <debounceOthSwitches+0x210>
			--othButtonHoldTimeShort[swNmbr];
 800089a:	4b37      	ldr	r3, [pc, #220]	; (8000978 <debounceOthSwitches+0x298>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	4a3b      	ldr	r2, [pc, #236]	; (800098c <debounceOthSwitches+0x2ac>)
 80008a0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80008a4:	b292      	uxth	r2, r2
 80008a6:	3a01      	subs	r2, #1
 80008a8:	b292      	uxth	r2, r2
 80008aa:	b211      	sxth	r1, r2
 80008ac:	4a37      	ldr	r2, [pc, #220]	; (800098c <debounceOthSwitches+0x2ac>)
 80008ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(othButtonHoldTimeShort[swNmbr] == 0) {
 80008b2:	4b31      	ldr	r3, [pc, #196]	; (8000978 <debounceOthSwitches+0x298>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b34      	ldr	r3, [pc, #208]	; (800098c <debounceOthSwitches+0x2ac>)
 80008ba:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d116      	bne.n	80008f0 <debounceOthSwitches+0x210>
				if(self->sendMsg != NULL){
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d012      	beq.n	80008f0 <debounceOthSwitches+0x210>
					msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_HOLD_SHORT, 0, 0);
 80008ca:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <debounceOthSwitches+0x298>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	82bb      	strh	r3, [r7, #20]
 80008d2:	2302      	movs	r3, #2
 80008d4:	82fb      	strh	r3, [r7, #22]
 80008d6:	2342      	movs	r3, #66	; 0x42
 80008d8:	763b      	strb	r3, [r7, #24]
 80008da:	2300      	movs	r3, #0
 80008dc:	767b      	strb	r3, [r7, #25]
 80008de:	2300      	movs	r3, #0
 80008e0:	837b      	strh	r3, [r7, #26]
					self->sendMsg(self, &newMessage);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f107 0214 	add.w	r2, r7, #20
 80008ea:	4611      	mov	r1, r2
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	4798      	blx	r3
				}
			}
		}
		if(othButtonHoldTimeLong[swNmbr]>0){
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <debounceOthSwitches+0x298>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b26      	ldr	r3, [pc, #152]	; (8000990 <debounceOthSwitches+0x2b0>)
 80008f8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	dd2a      	ble.n	8000956 <debounceOthSwitches+0x276>
			--othButtonHoldTimeLong[swNmbr];
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <debounceOthSwitches+0x298>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4a22      	ldr	r2, [pc, #136]	; (8000990 <debounceOthSwitches+0x2b0>)
 8000906:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800090a:	b292      	uxth	r2, r2
 800090c:	3a01      	subs	r2, #1
 800090e:	b292      	uxth	r2, r2
 8000910:	b211      	sxth	r1, r2
 8000912:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <debounceOthSwitches+0x2b0>)
 8000914:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(othButtonHoldTimeLong[swNmbr] == 0) {
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <debounceOthSwitches+0x298>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <debounceOthSwitches+0x2b0>)
 8000920:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d116      	bne.n	8000956 <debounceOthSwitches+0x276>
				if(self->sendMsg != NULL){
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d012      	beq.n	8000956 <debounceOthSwitches+0x276>
					msg_Message newMessage = msg_LITERAL(app_cfg_BTN_MSG, msg_EVENT(swNmbr), app_cfg_btn_STAT_HOLD_LONG, 0, 0);
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <debounceOthSwitches+0x298>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b29b      	uxth	r3, r3
 8000936:	81bb      	strh	r3, [r7, #12]
 8000938:	2303      	movs	r3, #3
 800093a:	81fb      	strh	r3, [r7, #14]
 800093c:	2342      	movs	r3, #66	; 0x42
 800093e:	743b      	strb	r3, [r7, #16]
 8000940:	2300      	movs	r3, #0
 8000942:	747b      	strb	r3, [r7, #17]
 8000944:	2300      	movs	r3, #0
 8000946:	827b      	strh	r3, [r7, #18]
					self->sendMsg(self, &newMessage);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	f107 020c 	add.w	r2, r7, #12
 8000950:	4611      	mov	r1, r2
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	4798      	blx	r3
				}
			}
		}
	}
	if(++swNmbr >= (app_cfg_NMBR_BTNS))swNmbr = 0;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <debounceOthSwitches+0x298>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <debounceOthSwitches+0x298>)
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <debounceOthSwitches+0x298>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b04      	cmp	r3, #4
 8000968:	d902      	bls.n	8000970 <debounceOthSwitches+0x290>
 800096a:	4b03      	ldr	r3, [pc, #12]	; (8000978 <debounceOthSwitches+0x298>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
}
 8000970:	bf00      	nop
 8000972:	3730      	adds	r7, #48	; 0x30
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2000099a 	.word	0x2000099a
 800097c:	0800bf14 	.word	0x0800bf14
 8000980:	2000096c 	.word	0x2000096c
 8000984:	20000974 	.word	0x20000974
 8000988:	20000964 	.word	0x20000964
 800098c:	20000980 	.word	0x20000980
 8000990:	2000098c 	.word	0x2000098c

08000994 <app_dmx_init>:
static volatile bool cyclicFlag = false;
static volatile int16_t internalTimer = 0;
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_dmx_init(eal_task_Task *self){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	dmx_registerCallback(&dmx1, dmx1TransmitterCallback);
 800099c:	4911      	ldr	r1, [pc, #68]	; (80009e4 <app_dmx_init+0x50>)
 800099e:	4812      	ldr	r0, [pc, #72]	; (80009e8 <app_dmx_init+0x54>)
 80009a0:	f006 ffd5 	bl	800794e <dmx_registerCallback>
	dmx_init(&dmx1);
 80009a4:	4810      	ldr	r0, [pc, #64]	; (80009e8 <app_dmx_init+0x54>)
 80009a6:	f006 ffe1 	bl	800796c <dmx_init>
	dmx_txStart(&dmx1);
 80009aa:	480f      	ldr	r0, [pc, #60]	; (80009e8 <app_dmx_init+0x54>)
 80009ac:	f007 f8b4 	bl	8007b18 <dmx_txStart>

	dmx_registerCallback(&dmx2, dmx2ReceiverCallback);
 80009b0:	490e      	ldr	r1, [pc, #56]	; (80009ec <app_dmx_init+0x58>)
 80009b2:	480f      	ldr	r0, [pc, #60]	; (80009f0 <app_dmx_init+0x5c>)
 80009b4:	f006 ffcb 	bl	800794e <dmx_registerCallback>
	dmx_init(&dmx2);
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <app_dmx_init+0x5c>)
 80009ba:	f006 ffd7 	bl	800796c <dmx_init>
	dmx_rxStart(&dmx2);
 80009be:	480c      	ldr	r0, [pc, #48]	; (80009f0 <app_dmx_init+0x5c>)
 80009c0:	f007 f8bc 	bl	8007b3c <dmx_rxStart>

	HAL_GPIO_WritePin(O_USART1_DIR_GPIO_Port, O_USART1_DIR_Pin, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ca:	480a      	ldr	r0, [pc, #40]	; (80009f4 <app_dmx_init+0x60>)
 80009cc:	f001 fa16 	bl	8001dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(O_USART2_DIR_GPIO_Port, O_USART2_DIR_Pin, GPIO_PIN_SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2104      	movs	r1, #4
 80009d4:	4807      	ldr	r0, [pc, #28]	; (80009f4 <app_dmx_init+0x60>)
 80009d6:	f001 fa11 	bl	8001dfc <HAL_GPIO_WritePin>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	08000ab9 	.word	0x08000ab9
 80009e8:	200005e0 	.word	0x200005e0
 80009ec:	08000ad3 	.word	0x08000ad3
 80009f0:	2000063c 	.word	0x2000063c
 80009f4:	48000800 	.word	0x48000800

080009f8 <app_dmx_process>:

void app_dmx_process(eal_task_Task *self){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	f083 0301 	eor.w	r3, r3, #1
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d111      	bne.n	8000a32 <app_dmx_process+0x3a>
	if(!cyclicFlag) return;
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <app_dmx_process+0x48>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	f083 0301 	eor.w	r3, r3, #1
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d10b      	bne.n	8000a36 <app_dmx_process+0x3e>
	/*Do everything what you want to do*/
	dmx_loop(&dmx1);
 8000a1e:	4809      	ldr	r0, [pc, #36]	; (8000a44 <app_dmx_process+0x4c>)
 8000a20:	f006 ffee 	bl	8007a00 <dmx_loop>
	dmx_loop(&dmx2);
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <app_dmx_process+0x50>)
 8000a26:	f006 ffeb 	bl	8007a00 <dmx_loop>
	cyclicFlag = false;
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <app_dmx_process+0x48>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
 8000a30:	e002      	b.n	8000a38 <app_dmx_process+0x40>
	if(!self->enable) return;
 8000a32:	bf00      	nop
 8000a34:	e000      	b.n	8000a38 <app_dmx_process+0x40>
	if(!cyclicFlag) return;
 8000a36:	bf00      	nop
}
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000d9c 	.word	0x20000d9c
 8000a44:	200005e0 	.word	0x200005e0
 8000a48:	2000063c 	.word	0x2000063c

08000a4c <app_dmx_cyclic1ms>:

void app_dmx_cyclic1ms(eal_task_Task *self, bool stat){
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <app_dmx_cyclic1ms+0x20>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000d9c 	.word	0x20000d9c

08000a70 <app_dmx_receiveMsg>:

void app_dmx_receiveMsg(eal_task_Task *self, msg_Message *message){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	if(message->type == app_cfg_DMX_MSG){
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	791b      	ldrb	r3, [r3, #4]
 8000a7e:	2b44      	cmp	r3, #68	; 0x44
 8000a80:	d113      	bne.n	8000aaa <app_dmx_receiveMsg+0x3a>
		/*Action parsing*/
		if(msg_isAction(message)){
 8000a82:	6838      	ldr	r0, [r7, #0]
 8000a84:	f007 fc0e 	bl	80082a4 <msg_isAction>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d00d      	beq.n	8000aaa <app_dmx_receiveMsg+0x3a>
			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a96:	81fb      	strh	r3, [r7, #14]
			//TODO: Add real behavior
			dmx1.universe[idx] = (uint8_t)message->value;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <app_dmx_receiveMsg+0x44>)
 8000a9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a9c:	89fb      	ldrh	r3, [r7, #14]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000aa6:	b2d2      	uxtb	r2, r2
 8000aa8:	701a      	strb	r2, [r3, #0]
		}
		/*Event parsing*/
		}else{

		}
}
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200005e0 	.word	0x200005e0

08000ab8 <dmx1TransmitterCallback>:

/* Callback's ---------------------------------------------------------------------*/
bool dmx1TransmitterCallback(dmx_cfg_Instance *dmx){
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	bool state = true;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
	return state;
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <dmx2ReceiverCallback>:

bool dmx2ReceiverCallback(dmx_cfg_Instance *dmx){
 8000ad2:	b480      	push	{r7}
 8000ad4:	b085      	sub	sp, #20
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
	bool state = true;
 8000ada:	2301      	movs	r3, #1
 8000adc:	73fb      	strb	r3, [r7, #15]
	return state;
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <USART1_IRQHandler>:
/* IRQs ---------------------------------------------------------------------*/
void USART1_IRQHandler(void){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	dmx_irqRxInterfaceHandler(&dmx2);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <USART1_IRQHandler+0x10>)
 8000af2:	f007 f917 	bl	8007d24 <dmx_irqRxInterfaceHandler>
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000063c 	.word	0x2000063c

08000b00 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	dmx_irqTxInterfaceHandler(&dmx1);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <USART2_IRQHandler+0x10>)
 8000b06:	f007 f898 	bl	8007c3a <dmx_irqTxInterfaceHandler>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200005e0 	.word	0x200005e0

08000b14 <app_dmx_preset_init>:
static volatile bool cyclicFlag = false;
static volatile int16_t internalTimer = 0;
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_dmx_preset_init(eal_task_Task *self){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	e061      	b.n	8000be6 <app_dmx_preset_init+0xd2>
		myPresets[i].relTime_ms = 0;
 8000b22:	4a34      	ldr	r2, [pc, #208]	; (8000bf4 <app_dmx_preset_init+0xe0>)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000b2a:	fb01 f303 	mul.w	r3, r1, r3
 8000b2e:	4413      	add	r3, r2
 8000b30:	3304      	adds	r3, #4
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
		myPresets[i].trigger = false;
 8000b36:	4a2f      	ldr	r2, [pc, #188]	; (8000bf4 <app_dmx_preset_init+0xe0>)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000b3e:	fb01 f303 	mul.w	r3, r1, r3
 8000b42:	4413      	add	r3, r2
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
		myPresets[i].transitionDoneCnt = 0;
 8000b48:	4a2a      	ldr	r2, [pc, #168]	; (8000bf4 <app_dmx_preset_init+0xe0>)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000b50:	fb01 f303 	mul.w	r3, r1, r3
 8000b54:	4413      	add	r3, r2
 8000b56:	3308      	adds	r3, #8
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
		myPresets[i].transitionEnableSize = 0;
 8000b5c:	4a25      	ldr	r2, [pc, #148]	; (8000bf4 <app_dmx_preset_init+0xe0>)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000b64:	fb01 f303 	mul.w	r3, r1, r3
 8000b68:	4413      	add	r3, r2
 8000b6a:	330c      	adds	r3, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
		memset(myPresets[i].presetTransitionStatus, 0, sizeof(myPresets[i].presetTransitionStatus));
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8000b76:	fb02 f303 	mul.w	r3, r2, r3
 8000b7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000b7e:	4a1d      	ldr	r2, [pc, #116]	; (8000bf4 <app_dmx_preset_init+0xe0>)
 8000b80:	4413      	add	r3, r2
 8000b82:	2228      	movs	r2, #40	; 0x28
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f00b f986 	bl	800be98 <memset>
		for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	e023      	b.n	8000bda <app_dmx_preset_init+0xc6>
			if(myPresets[i].presetTransitionSettings[j].enable) ++myPresets[i].transitionEnableSize;
 8000b92:	4918      	ldr	r1, [pc, #96]	; (8000bf4 <app_dmx_preset_init+0xe0>)
 8000b94:	68ba      	ldr	r2, [r7, #8]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8000b9e:	fb00 f303 	mul.w	r3, r0, r3
 8000ba2:	4413      	add	r3, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	331d      	adds	r3, #29
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d012      	beq.n	8000bd4 <app_dmx_preset_init+0xc0>
 8000bae:	4a11      	ldr	r2, [pc, #68]	; (8000bf4 <app_dmx_preset_init+0xe0>)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000bb6:	fb01 f303 	mul.w	r3, r1, r3
 8000bba:	4413      	add	r3, r2
 8000bbc:	330c      	adds	r3, #12
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	1c5a      	adds	r2, r3, #1
 8000bc2:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <app_dmx_preset_init+0xe0>)
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8000bca:	fb00 f303 	mul.w	r3, r0, r3
 8000bce:	440b      	add	r3, r1
 8000bd0:	330c      	adds	r3, #12
 8000bd2:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	2b13      	cmp	r3, #19
 8000bde:	ddd8      	ble.n	8000b92 <app_dmx_preset_init+0x7e>
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	3301      	adds	r3, #1
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	dd9a      	ble.n	8000b22 <app_dmx_preset_init+0xe>
		}
	}
}
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000000 	.word	0x20000000

08000bf8 <app_dmx_preset_process>:

void app_dmx_preset_process(eal_task_Task *self){
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	f083 0301 	eor.w	r3, r3, #1
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f040 80d9 	bne.w	8000dc2 <app_dmx_preset_process+0x1ca>
	if(!cyclicFlag) return;
 8000c10:	4b6f      	ldr	r3, [pc, #444]	; (8000dd0 <app_dmx_preset_process+0x1d8>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	f083 0301 	eor.w	r3, r3, #1
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f040 80d2 	bne.w	8000dc6 <app_dmx_preset_process+0x1ce>
	/*Do everything what you want to do*/
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	e0c4      	b.n	8000db2 <app_dmx_preset_process+0x1ba>
		if(myPresets[i].trigger){	/*Preset is triggered and can be executed*/
 8000c28:	4a6a      	ldr	r2, [pc, #424]	; (8000dd4 <app_dmx_preset_process+0x1dc>)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000c30:	fb01 f303 	mul.w	r3, r1, r3
 8000c34:	4413      	add	r3, r2
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f000 80b7 	beq.w	8000dac <app_dmx_preset_process+0x1b4>
			++myPresets[i].relTime_ms;
 8000c3e:	4a65      	ldr	r2, [pc, #404]	; (8000dd4 <app_dmx_preset_process+0x1dc>)
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000c46:	fb01 f303 	mul.w	r3, r1, r3
 8000c4a:	4413      	add	r3, r2
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	1c5a      	adds	r2, r3, #1
 8000c52:	4960      	ldr	r1, [pc, #384]	; (8000dd4 <app_dmx_preset_process+0x1dc>)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8000c5a:	fb00 f303 	mul.w	r3, r0, r3
 8000c5e:	440b      	add	r3, r1
 8000c60:	3304      	adds	r3, #4
 8000c62:	601a      	str	r2, [r3, #0]
			for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	e05e      	b.n	8000d28 <app_dmx_preset_process+0x130>
				if(myPresets[i].presetTransitionSettings[j].enable){
 8000c6a:	495a      	ldr	r1, [pc, #360]	; (8000dd4 <app_dmx_preset_process+0x1dc>)
 8000c6c:	68ba      	ldr	r2, [r7, #8]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	0112      	lsls	r2, r2, #4
 8000c72:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8000c76:	fb00 f303 	mul.w	r3, r0, r3
 8000c7a:	4413      	add	r3, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	331d      	adds	r3, #29
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d04d      	beq.n	8000d22 <app_dmx_preset_process+0x12a>
					if(myPresets[i].presetTransitionStatus[j].transStep == app_dmx_preset_cfg_TRANS_STEP_EXE) performNextTransitionStep(self, i, j);
 8000c86:	4953      	ldr	r1, [pc, #332]	; (8000dd4 <app_dmx_preset_process+0x1dc>)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	22bc      	movs	r2, #188	; 0xbc
 8000c8c:	fb02 f203 	mul.w	r2, r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4413      	add	r3, r2
 8000c94:	33a8      	adds	r3, #168	; 0xa8
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	440b      	add	r3, r1
 8000c9a:	785b      	ldrb	r3, [r3, #1]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d108      	bne.n	8000cb2 <app_dmx_preset_process+0xba>
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	68ba      	ldr	r2, [r7, #8]
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	4619      	mov	r1, r3
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 f964 	bl	8000f78 <performNextTransitionStep>
 8000cb0:	e037      	b.n	8000d22 <app_dmx_preset_process+0x12a>
					else if((myPresets[i].relTime_ms >= myPresets[i].presetTransitionSettings[j].transDelay_ms) && (myPresets[i].presetTransitionStatus[j].transStep == app_dmx_preset_cfg_TRANS_STEP_NONE)){
 8000cb2:	4a48      	ldr	r2, [pc, #288]	; (8000dd4 <app_dmx_preset_process+0x1dc>)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000cba:	fb01 f303 	mul.w	r3, r1, r3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4843      	ldr	r0, [pc, #268]	; (8000dd4 <app_dmx_preset_process+0x1dc>)
 8000cc6:	68b9      	ldr	r1, [r7, #8]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	0109      	lsls	r1, r1, #4
 8000ccc:	f44f 74bc 	mov.w	r4, #376	; 0x178
 8000cd0:	fb04 f303 	mul.w	r3, r4, r3
 8000cd4:	440b      	add	r3, r1
 8000cd6:	4403      	add	r3, r0
 8000cd8:	3318      	adds	r3, #24
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d320      	bcc.n	8000d22 <app_dmx_preset_process+0x12a>
 8000ce0:	493c      	ldr	r1, [pc, #240]	; (8000dd4 <app_dmx_preset_process+0x1dc>)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	22bc      	movs	r2, #188	; 0xbc
 8000ce6:	fb02 f203 	mul.w	r2, r2, r3
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	4413      	add	r3, r2
 8000cee:	33a8      	adds	r3, #168	; 0xa8
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	440b      	add	r3, r1
 8000cf4:	785b      	ldrb	r3, [r3, #1]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d113      	bne.n	8000d22 <app_dmx_preset_process+0x12a>
						myPresets[i].presetTransitionStatus[j].transStep = app_dmx_preset_cfg_TRANS_STEP_EXE;
 8000cfa:	4936      	ldr	r1, [pc, #216]	; (8000dd4 <app_dmx_preset_process+0x1dc>)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	22bc      	movs	r2, #188	; 0xbc
 8000d00:	fb02 f203 	mul.w	r2, r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	4413      	add	r3, r2
 8000d08:	33a8      	adds	r3, #168	; 0xa8
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	440b      	add	r3, r1
 8000d0e:	2201      	movs	r2, #1
 8000d10:	705a      	strb	r2, [r3, #1]
						performNextTransitionStep(self, i, j);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f000 f92b 	bl	8000f78 <performNextTransitionStep>
			for(int j = 0; j < app_dmx_preset_cfg_NMBR_TRANSITIONS; ++j){
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	3301      	adds	r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	2b13      	cmp	r3, #19
 8000d2c:	dd9d      	ble.n	8000c6a <app_dmx_preset_process+0x72>
					}
				}
			}
			if(myPresets[i].transitionDoneCnt >= myPresets[i].transitionEnableSize){	/*All transitions are performed*/
 8000d2e:	4a29      	ldr	r2, [pc, #164]	; (8000dd4 <app_dmx_preset_process+0x1dc>)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000d36:	fb01 f303 	mul.w	r3, r1, r3
 8000d3a:	4413      	add	r3, r2
 8000d3c:	3308      	adds	r3, #8
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4924      	ldr	r1, [pc, #144]	; (8000dd4 <app_dmx_preset_process+0x1dc>)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8000d48:	fb00 f303 	mul.w	r3, r0, r3
 8000d4c:	440b      	add	r3, r1
 8000d4e:	330c      	adds	r3, #12
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d32a      	bcc.n	8000dac <app_dmx_preset_process+0x1b4>
				myPresets[i].transitionDoneCnt = 0;
 8000d56:	4a1f      	ldr	r2, [pc, #124]	; (8000dd4 <app_dmx_preset_process+0x1dc>)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000d5e:	fb01 f303 	mul.w	r3, r1, r3
 8000d62:	4413      	add	r3, r2
 8000d64:	3308      	adds	r3, #8
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
				myPresets[i].trigger = false;
 8000d6a:	4a1a      	ldr	r2, [pc, #104]	; (8000dd4 <app_dmx_preset_process+0x1dc>)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000d72:	fb01 f303 	mul.w	r3, r1, r3
 8000d76:	4413      	add	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
				myPresets[i].relTime_ms = 0;
 8000d7c:	4a15      	ldr	r2, [pc, #84]	; (8000dd4 <app_dmx_preset_process+0x1dc>)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000d84:	fb01 f303 	mul.w	r3, r1, r3
 8000d88:	4413      	add	r3, r2
 8000d8a:	3304      	adds	r3, #4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
				memset(myPresets[i].presetTransitionStatus, 0, sizeof(myPresets[i].presetTransitionStatus));
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8000d96:	fb02 f303 	mul.w	r3, r2, r3
 8000d9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000d9e:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <app_dmx_preset_process+0x1dc>)
 8000da0:	4413      	add	r3, r2
 8000da2:	2228      	movs	r2, #40	; 0x28
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f00b f876 	bl	800be98 <memset>
	for(int i = 0; i < app_cfg_NMBR_PRESETS; ++i){
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3301      	adds	r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	2b03      	cmp	r3, #3
 8000db6:	f77f af37 	ble.w	8000c28 <app_dmx_preset_process+0x30>
			}
		}
	}
	/*End of everything you want to do*/
	cyclicFlag = false;
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <app_dmx_preset_process+0x1d8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
 8000dc0:	e002      	b.n	8000dc8 <app_dmx_preset_process+0x1d0>
	if(!self->enable) return;
 8000dc2:	bf00      	nop
 8000dc4:	e000      	b.n	8000dc8 <app_dmx_preset_process+0x1d0>
	if(!cyclicFlag) return;
 8000dc6:	bf00      	nop
}
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd90      	pop	{r4, r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000d9d 	.word	0x20000d9d
 8000dd4:	20000000 	.word	0x20000000

08000dd8 <app_dmx_preset_cyclic1ms>:

void app_dmx_preset_cyclic1ms(eal_task_Task *self, bool stat){
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	70fb      	strb	r3, [r7, #3]
	cyclicFlag = true;
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <app_dmx_preset_cyclic1ms+0x20>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000d9d 	.word	0x20000d9d

08000dfc <app_dmx_preset_receiveMsg>:

void app_dmx_preset_receiveMsg(eal_task_Task *self, msg_Message *message){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
	if(message->type == app_cfg_DMX_PRESET_MSG){
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	791b      	ldrb	r3, [r3, #4]
 8000e0a:	2b50      	cmp	r3, #80	; 0x50
 8000e0c:	f040 80ad 	bne.w	8000f6a <app_dmx_preset_receiveMsg+0x16e>
		/*Action parsing*/
		if(msg_isAction(message)){
 8000e10:	6838      	ldr	r0, [r7, #0]
 8000e12:	f007 fa47 	bl	80082a4 <msg_isAction>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 80a6 	beq.w	8000f6a <app_dmx_preset_receiveMsg+0x16e>
			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e26:	83fb      	strh	r3, [r7, #30]
			if(APP_CFG_IS_INDEX_IN_RANGE(idx, app_cfg_dmx_preset_TRIGGER_PRESET_OFFSET_IDX, app_cfg_dmx_preset_TRIGGER_PRESET4_IDX+1)){
 8000e28:	8bfb      	ldrh	r3, [r7, #30]
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	f200 809d 	bhi.w	8000f6a <app_dmx_preset_receiveMsg+0x16e>
				if((message->value == app_cfg_dmx_preset_TRIGGER_ENABLE) && (myPresets[idx].trigger == false)) {	/*Can be triggered only once*/
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e36:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d151      	bne.n	8000ee2 <app_dmx_preset_receiveMsg+0xe6>
 8000e3e:	8bfb      	ldrh	r3, [r7, #30]
 8000e40:	4a4c      	ldr	r2, [pc, #304]	; (8000f74 <app_dmx_preset_receiveMsg+0x178>)
 8000e42:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000e46:	fb01 f303 	mul.w	r3, r1, r3
 8000e4a:	4413      	add	r3, r2
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	f083 0301 	eor.w	r3, r3, #1
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d044      	beq.n	8000ee2 <app_dmx_preset_receiveMsg+0xe6>
					myPresets[idx].trigger = true;
 8000e58:	8bfb      	ldrh	r3, [r7, #30]
 8000e5a:	4a46      	ldr	r2, [pc, #280]	; (8000f74 <app_dmx_preset_receiveMsg+0x178>)
 8000e5c:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000e60:	fb01 f303 	mul.w	r3, r1, r3
 8000e64:	4413      	add	r3, r2
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
					myPresets[idx].relTime_ms = 0;
 8000e6a:	8bfb      	ldrh	r3, [r7, #30]
 8000e6c:	4a41      	ldr	r2, [pc, #260]	; (8000f74 <app_dmx_preset_receiveMsg+0x178>)
 8000e6e:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000e72:	fb01 f303 	mul.w	r3, r1, r3
 8000e76:	4413      	add	r3, r2
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
					myPresets[idx].transitionDoneCnt = 0;
 8000e7e:	8bfb      	ldrh	r3, [r7, #30]
 8000e80:	4a3c      	ldr	r2, [pc, #240]	; (8000f74 <app_dmx_preset_receiveMsg+0x178>)
 8000e82:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000e86:	fb01 f303 	mul.w	r3, r1, r3
 8000e8a:	4413      	add	r3, r2
 8000e8c:	3308      	adds	r3, #8
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
					memset(myPresets[idx].presetTransitionStatus, 0, sizeof(myPresets[idx].presetTransitionStatus));
 8000e92:	8bfb      	ldrh	r3, [r7, #30]
 8000e94:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8000e98:	fb02 f303 	mul.w	r3, r2, r3
 8000e9c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000ea0:	4a34      	ldr	r2, [pc, #208]	; (8000f74 <app_dmx_preset_receiveMsg+0x178>)
 8000ea2:	4413      	add	r3, r2
 8000ea4:	2228      	movs	r2, #40	; 0x28
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f00a fff5 	bl	800be98 <memset>
					if(self->sendMsg != NULL){
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d059      	beq.n	8000f6a <app_dmx_preset_receiveMsg+0x16e>
						msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_EVENT(idx), app_cfg_dmx_preset_TRIGGER_ENABLE, 0, 0);
 8000eb6:	8bfb      	ldrh	r3, [r7, #30]
 8000eb8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	82bb      	strh	r3, [r7, #20]
 8000ec0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000ec4:	82fb      	strh	r3, [r7, #22]
 8000ec6:	2350      	movs	r3, #80	; 0x50
 8000ec8:	763b      	strb	r3, [r7, #24]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	767b      	strb	r3, [r7, #25]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	837b      	strh	r3, [r7, #26]
						self->sendMsg(self, &newMessage);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	f107 0214 	add.w	r2, r7, #20
 8000eda:	4611      	mov	r1, r2
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	4798      	blx	r3
					if(self->sendMsg != NULL){
 8000ee0:	e043      	b.n	8000f6a <app_dmx_preset_receiveMsg+0x16e>
					}
				}else{
					myPresets[idx].trigger = false;
 8000ee2:	8bfb      	ldrh	r3, [r7, #30]
 8000ee4:	4a23      	ldr	r2, [pc, #140]	; (8000f74 <app_dmx_preset_receiveMsg+0x178>)
 8000ee6:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000eea:	fb01 f303 	mul.w	r3, r1, r3
 8000eee:	4413      	add	r3, r2
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
					myPresets[idx].relTime_ms = 0;
 8000ef4:	8bfb      	ldrh	r3, [r7, #30]
 8000ef6:	4a1f      	ldr	r2, [pc, #124]	; (8000f74 <app_dmx_preset_receiveMsg+0x178>)
 8000ef8:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000efc:	fb01 f303 	mul.w	r3, r1, r3
 8000f00:	4413      	add	r3, r2
 8000f02:	3304      	adds	r3, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
					myPresets[idx].transitionDoneCnt = 0;
 8000f08:	8bfb      	ldrh	r3, [r7, #30]
 8000f0a:	4a1a      	ldr	r2, [pc, #104]	; (8000f74 <app_dmx_preset_receiveMsg+0x178>)
 8000f0c:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000f10:	fb01 f303 	mul.w	r3, r1, r3
 8000f14:	4413      	add	r3, r2
 8000f16:	3308      	adds	r3, #8
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
					memset(myPresets[idx].presetTransitionStatus, 0, sizeof(myPresets[idx].presetTransitionStatus));
 8000f1c:	8bfb      	ldrh	r3, [r7, #30]
 8000f1e:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000f2a:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <app_dmx_preset_receiveMsg+0x178>)
 8000f2c:	4413      	add	r3, r2
 8000f2e:	2228      	movs	r2, #40	; 0x28
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f00a ffb0 	bl	800be98 <memset>
					if(self->sendMsg != NULL){
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d014      	beq.n	8000f6a <app_dmx_preset_receiveMsg+0x16e>
						msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_EVENT(idx), app_cfg_dmx_preset_TRIGGER_DISABLE, 0, 0);
 8000f40:	8bfb      	ldrh	r3, [r7, #30]
 8000f42:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	81bb      	strh	r3, [r7, #12]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	81fb      	strh	r3, [r7, #14]
 8000f4e:	2350      	movs	r3, #80	; 0x50
 8000f50:	743b      	strb	r3, [r7, #16]
 8000f52:	2300      	movs	r3, #0
 8000f54:	747b      	strb	r3, [r7, #17]
 8000f56:	2300      	movs	r3, #0
 8000f58:	827b      	strh	r3, [r7, #18]
						self->sendMsg(self, &newMessage);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f107 020c 	add.w	r2, r7, #12
 8000f62:	4611      	mov	r1, r2
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	4798      	blx	r3
		/*Event parsing*/
		}else{

		}
	}
}
 8000f68:	e7ff      	b.n	8000f6a <app_dmx_preset_receiveMsg+0x16e>
 8000f6a:	bf00      	nop
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000000 	.word	0x20000000

08000f78 <performNextTransitionStep>:

/*Helper*/
static void performNextTransitionStep(eal_task_Task *self, uint8_t preset, uint8_t transition){
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b08b      	sub	sp, #44	; 0x2c
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	460b      	mov	r3, r1
 8000f82:	72fb      	strb	r3, [r7, #11]
 8000f84:	4613      	mov	r3, r2
 8000f86:	72bb      	strb	r3, [r7, #10]
	float actualTransitionTime = (float)(myPresets[preset].relTime_ms - myPresets[preset].presetTransitionSettings[transition].transDelay_ms);
 8000f88:	7afb      	ldrb	r3, [r7, #11]
 8000f8a:	4aa5      	ldr	r2, [pc, #660]	; (8001220 <performNextTransitionStep+0x2a8>)
 8000f8c:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000f90:	fb01 f303 	mul.w	r3, r1, r3
 8000f94:	4413      	add	r3, r2
 8000f96:	3304      	adds	r3, #4
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	7afb      	ldrb	r3, [r7, #11]
 8000f9c:	7ab9      	ldrb	r1, [r7, #10]
 8000f9e:	48a0      	ldr	r0, [pc, #640]	; (8001220 <performNextTransitionStep+0x2a8>)
 8000fa0:	0109      	lsls	r1, r1, #4
 8000fa2:	f44f 74bc 	mov.w	r4, #376	; 0x178
 8000fa6:	fb04 f303 	mul.w	r3, r4, r3
 8000faa:	440b      	add	r3, r1
 8000fac:	4403      	add	r3, r0
 8000fae:	3318      	adds	r3, #24
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	ee07 3a90 	vmov	s15, r3
 8000fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fbc:	edc7 7a08 	vstr	s15, [r7, #32]
	uint16_t newVal = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(myPresets[preset].presetTransitionSettings[transition].transTime_ms == 0){
 8000fc4:	7afb      	ldrb	r3, [r7, #11]
 8000fc6:	7aba      	ldrb	r2, [r7, #10]
 8000fc8:	4995      	ldr	r1, [pc, #596]	; (8001220 <performNextTransitionStep+0x2a8>)
 8000fca:	3201      	adds	r2, #1
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8000fd2:	fb00 f303 	mul.w	r3, r0, r3
 8000fd6:	4413      	add	r3, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	3304      	adds	r3, #4
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d12c      	bne.n	800103c <performNextTransitionStep+0xc4>
		newVal = myPresets[preset].presetTransitionSettings[transition].dmxEndVal;
 8000fe2:	7afb      	ldrb	r3, [r7, #11]
 8000fe4:	7aba      	ldrb	r2, [r7, #10]
 8000fe6:	498e      	ldr	r1, [pc, #568]	; (8001220 <performNextTransitionStep+0x2a8>)
 8000fe8:	3201      	adds	r2, #1
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8000ff0:	fb00 f303 	mul.w	r3, r0, r3
 8000ff4:	4413      	add	r3, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3303      	adds	r3, #3
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	84fb      	strh	r3, [r7, #38]	; 0x26
		++myPresets[preset].transitionDoneCnt;
 8000ffe:	7afb      	ldrb	r3, [r7, #11]
 8001000:	4987      	ldr	r1, [pc, #540]	; (8001220 <performNextTransitionStep+0x2a8>)
 8001002:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8001006:	fb02 f203 	mul.w	r2, r2, r3
 800100a:	440a      	add	r2, r1
 800100c:	3208      	adds	r2, #8
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	3201      	adds	r2, #1
 8001012:	4983      	ldr	r1, [pc, #524]	; (8001220 <performNextTransitionStep+0x2a8>)
 8001014:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8001018:	fb00 f303 	mul.w	r3, r0, r3
 800101c:	440b      	add	r3, r1
 800101e:	3308      	adds	r3, #8
 8001020:	601a      	str	r2, [r3, #0]
		myPresets[preset].presetTransitionStatus[transition].transStep = app_dmx_preset_cfg_TRANS_STEP_DONE;
 8001022:	7afa      	ldrb	r2, [r7, #11]
 8001024:	7abb      	ldrb	r3, [r7, #10]
 8001026:	497e      	ldr	r1, [pc, #504]	; (8001220 <performNextTransitionStep+0x2a8>)
 8001028:	20bc      	movs	r0, #188	; 0xbc
 800102a:	fb00 f202 	mul.w	r2, r0, r2
 800102e:	4413      	add	r3, r2
 8001030:	33a8      	adds	r3, #168	; 0xa8
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	440b      	add	r3, r1
 8001036:	2202      	movs	r2, #2
 8001038:	705a      	strb	r2, [r3, #1]
 800103a:	e098      	b.n	800116e <performNextTransitionStep+0x1f6>
	}else{
		//TODO: Perform different ramps
		float diff = (float)((float)myPresets[preset].presetTransitionSettings[transition].dmxEndVal - (float)myPresets[preset].presetTransitionSettings[transition].dmxStartVal);
 800103c:	7afb      	ldrb	r3, [r7, #11]
 800103e:	7aba      	ldrb	r2, [r7, #10]
 8001040:	4977      	ldr	r1, [pc, #476]	; (8001220 <performNextTransitionStep+0x2a8>)
 8001042:	3201      	adds	r2, #1
 8001044:	0112      	lsls	r2, r2, #4
 8001046:	f44f 70bc 	mov.w	r0, #376	; 0x178
 800104a:	fb00 f303 	mul.w	r3, r0, r3
 800104e:	4413      	add	r3, r2
 8001050:	440b      	add	r3, r1
 8001052:	3303      	adds	r3, #3
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105e:	7afb      	ldrb	r3, [r7, #11]
 8001060:	7aba      	ldrb	r2, [r7, #10]
 8001062:	496f      	ldr	r1, [pc, #444]	; (8001220 <performNextTransitionStep+0x2a8>)
 8001064:	3201      	adds	r2, #1
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	f44f 70bc 	mov.w	r0, #376	; 0x178
 800106c:	fb00 f303 	mul.w	r3, r0, r3
 8001070:	4413      	add	r3, r2
 8001072:	440b      	add	r3, r1
 8001074:	3302      	adds	r3, #2
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	ee07 3a90 	vmov	s15, r3
 800107c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001084:	edc7 7a07 	vstr	s15, [r7, #28]
		float actualVal = (diff/((float)myPresets[preset].presetTransitionSettings[transition].transTime_ms)*actualTransitionTime) + (float)myPresets[preset].presetTransitionSettings[transition].dmxStartVal;
 8001088:	7afb      	ldrb	r3, [r7, #11]
 800108a:	7aba      	ldrb	r2, [r7, #10]
 800108c:	4964      	ldr	r1, [pc, #400]	; (8001220 <performNextTransitionStep+0x2a8>)
 800108e:	3201      	adds	r2, #1
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8001096:	fb00 f303 	mul.w	r3, r0, r3
 800109a:	4413      	add	r3, r2
 800109c:	440b      	add	r3, r1
 800109e:	3304      	adds	r3, #4
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	ee07 3a90 	vmov	s15, r3
 80010a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80010ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80010b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ba:	7afb      	ldrb	r3, [r7, #11]
 80010bc:	7aba      	ldrb	r2, [r7, #10]
 80010be:	4958      	ldr	r1, [pc, #352]	; (8001220 <performNextTransitionStep+0x2a8>)
 80010c0:	3201      	adds	r2, #1
 80010c2:	0112      	lsls	r2, r2, #4
 80010c4:	f44f 70bc 	mov.w	r0, #376	; 0x178
 80010c8:	fb00 f303 	mul.w	r3, r0, r3
 80010cc:	4413      	add	r3, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	3302      	adds	r3, #2
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	ee07 3a90 	vmov	s15, r3
 80010d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e0:	edc7 7a06 	vstr	s15, [r7, #24]
		newVal = (uint16_t)actualVal;
 80010e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80010e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ec:	edc7 7a01 	vstr	s15, [r7, #4]
 80010f0:	88bb      	ldrh	r3, [r7, #4]
 80010f2:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(newVal >= myPresets[preset].presetTransitionSettings[transition].dmxEndVal){
 80010f4:	7afb      	ldrb	r3, [r7, #11]
 80010f6:	7aba      	ldrb	r2, [r7, #10]
 80010f8:	4949      	ldr	r1, [pc, #292]	; (8001220 <performNextTransitionStep+0x2a8>)
 80010fa:	3201      	adds	r2, #1
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8001102:	fb00 f303 	mul.w	r3, r0, r3
 8001106:	4413      	add	r3, r2
 8001108:	440b      	add	r3, r1
 800110a:	3303      	adds	r3, #3
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b29b      	uxth	r3, r3
 8001110:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001112:	429a      	cmp	r2, r3
 8001114:	d32b      	bcc.n	800116e <performNextTransitionStep+0x1f6>
			newVal = myPresets[preset].presetTransitionSettings[transition].dmxEndVal;
 8001116:	7afb      	ldrb	r3, [r7, #11]
 8001118:	7aba      	ldrb	r2, [r7, #10]
 800111a:	4941      	ldr	r1, [pc, #260]	; (8001220 <performNextTransitionStep+0x2a8>)
 800111c:	3201      	adds	r2, #1
 800111e:	0112      	lsls	r2, r2, #4
 8001120:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8001124:	fb00 f303 	mul.w	r3, r0, r3
 8001128:	4413      	add	r3, r2
 800112a:	440b      	add	r3, r1
 800112c:	3303      	adds	r3, #3
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	84fb      	strh	r3, [r7, #38]	; 0x26
			++myPresets[preset].transitionDoneCnt;
 8001132:	7afb      	ldrb	r3, [r7, #11]
 8001134:	493a      	ldr	r1, [pc, #232]	; (8001220 <performNextTransitionStep+0x2a8>)
 8001136:	f44f 72bc 	mov.w	r2, #376	; 0x178
 800113a:	fb02 f203 	mul.w	r2, r2, r3
 800113e:	440a      	add	r2, r1
 8001140:	3208      	adds	r2, #8
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	3201      	adds	r2, #1
 8001146:	4936      	ldr	r1, [pc, #216]	; (8001220 <performNextTransitionStep+0x2a8>)
 8001148:	f44f 70bc 	mov.w	r0, #376	; 0x178
 800114c:	fb00 f303 	mul.w	r3, r0, r3
 8001150:	440b      	add	r3, r1
 8001152:	3308      	adds	r3, #8
 8001154:	601a      	str	r2, [r3, #0]
			myPresets[preset].presetTransitionStatus[transition].transStep = app_dmx_preset_cfg_TRANS_STEP_DONE;
 8001156:	7afa      	ldrb	r2, [r7, #11]
 8001158:	7abb      	ldrb	r3, [r7, #10]
 800115a:	4931      	ldr	r1, [pc, #196]	; (8001220 <performNextTransitionStep+0x2a8>)
 800115c:	20bc      	movs	r0, #188	; 0xbc
 800115e:	fb00 f202 	mul.w	r2, r0, r2
 8001162:	4413      	add	r3, r2
 8001164:	33a8      	adds	r3, #168	; 0xa8
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	440b      	add	r3, r1
 800116a:	2202      	movs	r2, #2
 800116c:	705a      	strb	r2, [r3, #1]
		}
	}
	//If the if request is enabled 0 values can't be send because the comparison will be never true
//	if(newVal != myPresets[preset].presetTransitionStatus[transition].actualVal) {
		myPresets[preset].presetTransitionStatus[transition].actualVal = newVal;
 800116e:	7afa      	ldrb	r2, [r7, #11]
 8001170:	7abb      	ldrb	r3, [r7, #10]
 8001172:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001174:	b2cc      	uxtb	r4, r1
 8001176:	492a      	ldr	r1, [pc, #168]	; (8001220 <performNextTransitionStep+0x2a8>)
 8001178:	20bc      	movs	r0, #188	; 0xbc
 800117a:	fb00 f202 	mul.w	r2, r0, r2
 800117e:	4413      	add	r3, r2
 8001180:	33a8      	adds	r3, #168	; 0xa8
 8001182:	4622      	mov	r2, r4
 8001184:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
		if(self->sendMsg != NULL){
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d02a      	beq.n	80011e6 <performNextTransitionStep+0x26e>
			msg_Message newMessage = msg_LITERAL(app_cfg_DMX_MSG, msg_ACTION(myPresets[preset].presetTransitionSettings[transition].dmxCh), myPresets[preset].presetTransitionStatus[transition].actualVal, 0, 0);
 8001190:	7afb      	ldrb	r3, [r7, #11]
 8001192:	7aba      	ldrb	r2, [r7, #10]
 8001194:	4922      	ldr	r1, [pc, #136]	; (8001220 <performNextTransitionStep+0x2a8>)
 8001196:	3201      	adds	r2, #1
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	f44f 70bc 	mov.w	r0, #376	; 0x178
 800119e:	fb00 f303 	mul.w	r3, r0, r3
 80011a2:	4413      	add	r3, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	823b      	strh	r3, [r7, #16]
 80011b4:	7afa      	ldrb	r2, [r7, #11]
 80011b6:	7abb      	ldrb	r3, [r7, #10]
 80011b8:	4919      	ldr	r1, [pc, #100]	; (8001220 <performNextTransitionStep+0x2a8>)
 80011ba:	20bc      	movs	r0, #188	; 0xbc
 80011bc:	fb00 f202 	mul.w	r2, r0, r2
 80011c0:	4413      	add	r3, r2
 80011c2:	33a8      	adds	r3, #168	; 0xa8
 80011c4:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	827b      	strh	r3, [r7, #18]
 80011cc:	2344      	movs	r3, #68	; 0x44
 80011ce:	753b      	strb	r3, [r7, #20]
 80011d0:	2300      	movs	r3, #0
 80011d2:	757b      	strb	r3, [r7, #21]
 80011d4:	2300      	movs	r3, #0
 80011d6:	82fb      	strh	r3, [r7, #22]
			self->sendMsg(self, &newMessage);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	f107 0210 	add.w	r2, r7, #16
 80011e0:	4611      	mov	r1, r2
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	4798      	blx	r3
		}
		if(myPresets[preset].presetTransitionStatus[transition].transStep == app_dmx_preset_cfg_TRANS_STEP_DONE) myPresets[preset].presetTransitionStatus[transition].actualVal = 0;
 80011e6:	7afa      	ldrb	r2, [r7, #11]
 80011e8:	7abb      	ldrb	r3, [r7, #10]
 80011ea:	490d      	ldr	r1, [pc, #52]	; (8001220 <performNextTransitionStep+0x2a8>)
 80011ec:	20bc      	movs	r0, #188	; 0xbc
 80011ee:	fb00 f202 	mul.w	r2, r0, r2
 80011f2:	4413      	add	r3, r2
 80011f4:	33a8      	adds	r3, #168	; 0xa8
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	440b      	add	r3, r1
 80011fa:	785b      	ldrb	r3, [r3, #1]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d10a      	bne.n	8001216 <performNextTransitionStep+0x29e>
 8001200:	7afa      	ldrb	r2, [r7, #11]
 8001202:	7abb      	ldrb	r3, [r7, #10]
 8001204:	4906      	ldr	r1, [pc, #24]	; (8001220 <performNextTransitionStep+0x2a8>)
 8001206:	20bc      	movs	r0, #188	; 0xbc
 8001208:	fb00 f202 	mul.w	r2, r0, r2
 800120c:	4413      	add	r3, r2
 800120e:	33a8      	adds	r3, #168	; 0xa8
 8001210:	2200      	movs	r2, #0
 8001212:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
//	}
}
 8001216:	bf00      	nop
 8001218:	372c      	adds	r7, #44	; 0x2c
 800121a:	46bd      	mov	sp, r7
 800121c:	bd90      	pop	{r4, r7, pc}
 800121e:	bf00      	nop
 8001220:	20000000 	.word	0x20000000

08001224 <app_footcontrol_init>:
*******************************************************************************/
static void sendDmxPreset(eal_task_Task *self, app_footcontrol_PresetCfg *preset);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void app_footcontrol_init(eal_task_Task *self){
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <app_footcontrol_process>:

void app_footcontrol_process(eal_task_Task *self){
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	if(!self->enable) return;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	f083 0301 	eor.w	r3, r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10b      	bne.n	8001266 <app_footcontrol_process+0x2e>
	if(!cyclicFlag) return;
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <app_footcontrol_process+0x40>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f083 0301 	eor.w	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d105      	bne.n	800126a <app_footcontrol_process+0x32>
	//TODO: logic
	cyclicFlag = false;
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <app_footcontrol_process+0x40>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	e002      	b.n	800126c <app_footcontrol_process+0x34>
	if(!self->enable) return;
 8001266:	bf00      	nop
 8001268:	e000      	b.n	800126c <app_footcontrol_process+0x34>
	if(!cyclicFlag) return;
 800126a:	bf00      	nop
}
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000d9e 	.word	0x20000d9e

0800127c <app_footcontrol_receiveMsg>:
void app_footcontrol_cyclic1ms(eal_task_Task *self, bool stat){
	cyclicFlag = true;
	if(internalTimer > 0)--internalTimer;
}

void app_footcontrol_receiveMsg(eal_task_Task *self, msg_Message *message){
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
	/*Button message parsing*/
	if(message->type == app_cfg_BTN_MSG){
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	791b      	ldrb	r3, [r3, #4]
 800128a:	2b42      	cmp	r3, #66	; 0x42
 800128c:	f040 808a 	bne.w	80013a4 <app_footcontrol_receiveMsg+0x128>
		/*Action parsing*/
		if(msg_isAction(message)){
 8001290:	6838      	ldr	r0, [r7, #0]
 8001292:	f007 f807 	bl	80082a4 <msg_isAction>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	f040 8083 	bne.w	80013a4 <app_footcontrol_receiveMsg+0x128>
//			uint16_t idx = msg_KILL_ACTION_MSK(message->index);
		}
		/*Event parsing*/
		else{
			uint16_t idx = message->index;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	81fb      	strh	r3, [r7, #14]
			if(myGpios[idx].mode == app_footcontrol_GPIO_INPUT){
 80012a4:	89fa      	ldrh	r2, [r7, #14]
 80012a6:	4941      	ldr	r1, [pc, #260]	; (80013ac <app_footcontrol_receiveMsg+0x130>)
 80012a8:	4613      	mov	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4413      	add	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	440b      	add	r3, r1
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d175      	bne.n	80013a4 <app_footcontrol_receiveMsg+0x128>
				if((message->value == app_cfg_btn_STAT_RELEASED) && (myGpios[idx].release.presetNr != app_footcontrol_NO_PRESET)) sendDmxPreset(self, &myGpios[idx].release);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d117      	bne.n	80012f2 <app_footcontrol_receiveMsg+0x76>
 80012c2:	89fa      	ldrh	r2, [r7, #14]
 80012c4:	4939      	ldr	r1, [pc, #228]	; (80013ac <app_footcontrol_receiveMsg+0x130>)
 80012c6:	4613      	mov	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4413      	add	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	440b      	add	r3, r1
 80012d0:	3306      	adds	r3, #6
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2bff      	cmp	r3, #255	; 0xff
 80012d6:	d00c      	beq.n	80012f2 <app_footcontrol_receiveMsg+0x76>
 80012d8:	89fa      	ldrh	r2, [r7, #14]
 80012da:	4613      	mov	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4413      	add	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4a32      	ldr	r2, [pc, #200]	; (80013ac <app_footcontrol_receiveMsg+0x130>)
 80012e4:	4413      	add	r3, r2
 80012e6:	3306      	adds	r3, #6
 80012e8:	4619      	mov	r1, r3
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 f860 	bl	80013b0 <sendDmxPreset>
 80012f0:	e058      	b.n	80013a4 <app_footcontrol_receiveMsg+0x128>
				else if((message->value == app_cfg_btn_STAT_PRESSED) && (myGpios[idx].press.presetNr != app_footcontrol_NO_PRESET)) sendDmxPreset(self, &myGpios[idx].press);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d117      	bne.n	800132c <app_footcontrol_receiveMsg+0xb0>
 80012fc:	89fa      	ldrh	r2, [r7, #14]
 80012fe:	492b      	ldr	r1, [pc, #172]	; (80013ac <app_footcontrol_receiveMsg+0x130>)
 8001300:	4613      	mov	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	4413      	add	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	440b      	add	r3, r1
 800130a:	3302      	adds	r3, #2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2bff      	cmp	r3, #255	; 0xff
 8001310:	d00c      	beq.n	800132c <app_footcontrol_receiveMsg+0xb0>
 8001312:	89fa      	ldrh	r2, [r7, #14]
 8001314:	4613      	mov	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4413      	add	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4a23      	ldr	r2, [pc, #140]	; (80013ac <app_footcontrol_receiveMsg+0x130>)
 800131e:	4413      	add	r3, r2
 8001320:	3302      	adds	r3, #2
 8001322:	4619      	mov	r1, r3
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 f843 	bl	80013b0 <sendDmxPreset>
 800132a:	e03b      	b.n	80013a4 <app_footcontrol_receiveMsg+0x128>
				else if((message->value == app_cfg_btn_STAT_HOLD_SHORT) && (myGpios[idx].holdShort.presetNr != app_footcontrol_NO_PRESET)) sendDmxPreset(self, &myGpios[idx].holdShort);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d118      	bne.n	8001368 <app_footcontrol_receiveMsg+0xec>
 8001336:	89fa      	ldrh	r2, [r7, #14]
 8001338:	491c      	ldr	r1, [pc, #112]	; (80013ac <app_footcontrol_receiveMsg+0x130>)
 800133a:	4613      	mov	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4413      	add	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	440b      	add	r3, r1
 8001344:	330a      	adds	r3, #10
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2bff      	cmp	r3, #255	; 0xff
 800134a:	d00d      	beq.n	8001368 <app_footcontrol_receiveMsg+0xec>
 800134c:	89fa      	ldrh	r2, [r7, #14]
 800134e:	4613      	mov	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	4413      	add	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	3308      	adds	r3, #8
 8001358:	4a14      	ldr	r2, [pc, #80]	; (80013ac <app_footcontrol_receiveMsg+0x130>)
 800135a:	4413      	add	r3, r2
 800135c:	3302      	adds	r3, #2
 800135e:	4619      	mov	r1, r3
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f825 	bl	80013b0 <sendDmxPreset>
 8001366:	e01d      	b.n	80013a4 <app_footcontrol_receiveMsg+0x128>
				else if((message->value == app_cfg_btn_STAT_HOLD_LONG) && (myGpios[idx].holdLong.presetNr != app_footcontrol_NO_PRESET)) sendDmxPreset(self, &myGpios[idx].holdLong);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800136e:	2b03      	cmp	r3, #3
 8001370:	d118      	bne.n	80013a4 <app_footcontrol_receiveMsg+0x128>
 8001372:	89fa      	ldrh	r2, [r7, #14]
 8001374:	490d      	ldr	r1, [pc, #52]	; (80013ac <app_footcontrol_receiveMsg+0x130>)
 8001376:	4613      	mov	r3, r2
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4413      	add	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	440b      	add	r3, r1
 8001380:	330e      	adds	r3, #14
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2bff      	cmp	r3, #255	; 0xff
 8001386:	d00d      	beq.n	80013a4 <app_footcontrol_receiveMsg+0x128>
 8001388:	89fa      	ldrh	r2, [r7, #14]
 800138a:	4613      	mov	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	4413      	add	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	3308      	adds	r3, #8
 8001394:	4a05      	ldr	r2, [pc, #20]	; (80013ac <app_footcontrol_receiveMsg+0x130>)
 8001396:	4413      	add	r3, r2
 8001398:	3306      	adds	r3, #6
 800139a:	4619      	mov	r1, r3
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f807 	bl	80013b0 <sendDmxPreset>
			}
		}
	}
}
 80013a2:	e7ff      	b.n	80013a4 <app_footcontrol_receiveMsg+0x128>
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200006e4 	.word	0x200006e4

080013b0 <sendDmxPreset>:

/* Helper ----------------------------------------------------------------------*/
static void sendDmxPreset(eal_task_Task *self, app_footcontrol_PresetCfg *preset){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
	if(self->sendMsg == NULL) return;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01a      	beq.n	80013f8 <sendDmxPreset+0x48>
	msg_Message newMessage = msg_LITERAL(app_cfg_DMX_PRESET_MSG, msg_ACTION(preset->presetNr), preset->triggerValue, 0, 0);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80013cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	813b      	strh	r3, [r7, #8]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013da:	817b      	strh	r3, [r7, #10]
 80013dc:	2350      	movs	r3, #80	; 0x50
 80013de:	733b      	strb	r3, [r7, #12]
 80013e0:	2300      	movs	r3, #0
 80013e2:	737b      	strb	r3, [r7, #13]
 80013e4:	2300      	movs	r3, #0
 80013e6:	81fb      	strh	r3, [r7, #14]
	self->sendMsg(self, &newMessage);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	f107 0208 	add.w	r2, r7, #8
 80013f0:	4611      	mov	r1, r2
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	4798      	blx	r3
 80013f6:	e000      	b.n	80013fa <sendDmxPreset+0x4a>
	if(self->sendMsg == NULL) return;
 80013f8:	bf00      	nop
}
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <app_uart_irqHandler>:
	}
	return bufferState;
}


void app_uart_irqHandler(USART_TypeDef *uartHandler, stRingBuf *rxBuf, stRingBuf *txBuf){
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
		volatile uint16_t ISR;
		char bufferState;

		ISR = uartHandler->ISR;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	b29b      	uxth	r3, r3
 8001412:	82bb      	strh	r3, [r7, #20]
		if(ISR & USART_ISR_RXNE){ //Bit 5 = Read Data Register Not Empty in SR
 8001414:	8abb      	ldrh	r3, [r7, #20]
 8001416:	b29b      	uxth	r3, r3
 8001418:	f003 0320 	and.w	r3, r3, #32
 800141c:	2b00      	cmp	r3, #0
 800141e:	d009      	beq.n	8001434 <app_uart_irqHandler+0x34>
			bufferState = RINGBUFFER_cIn(uartHandler->RDR, rxBuf);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001424:	b29b      	uxth	r3, r3
 8001426:	b2db      	uxtb	r3, r3
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	4618      	mov	r0, r3
 800142c:	f006 ff4c 	bl	80082c8 <RINGBUFFER_cIn>
 8001430:	4603      	mov	r3, r0
 8001432:	75fb      	strb	r3, [r7, #23]
			if(bufferState != ringbuffer_OK){
				//TODO Error handling
			}
		}
		if(ISR & USART_ISR_TXE){
 8001434:	8abb      	ldrh	r3, [r7, #20]
 8001436:	b29b      	uxth	r3, r3
 8001438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143c:	2b00      	cmp	r3, #0
 800143e:	d01e      	beq.n	800147e <app_uart_irqHandler+0x7e>
			uartHandler->ISR &= ~USART_ISR_TXE;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	61da      	str	r2, [r3, #28]
			char data;
			bufferState = RINGBUFFER_cOut(&data, txBuf);
 800144c:	f107 0313 	add.w	r3, r7, #19
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4618      	mov	r0, r3
 8001454:	f006 ff75 	bl	8008342 <RINGBUFFER_cOut>
 8001458:	4603      	mov	r3, r0
 800145a:	75fb      	strb	r3, [r7, #23]
			if(bufferState == ringbuffer_EMPTY){
 800145c:	7dfb      	ldrb	r3, [r7, #23]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d106      	bne.n	8001470 <app_uart_irqHandler+0x70>
				uartHandler->CR1 &= ~USART_CR1_TXEIE;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	e006      	b.n	800147e <app_uart_irqHandler+0x7e>
			}else if (bufferState == ringbuffer_NO_BUF){
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <app_uart_irqHandler+0x7e>

			}else{
				uartHandler->TDR = data;
 8001476:	7cfb      	ldrb	r3, [r7, #19]
 8001478:	b29a      	uxth	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	851a      	strh	r2, [r3, #40]	; 0x28
			}
		}
		if(ISR & USART_ISR_ORE){
 800147e:	8abb      	ldrh	r3, [r7, #20]
 8001480:	b29b      	uxth	r3, r3
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <app_uart_irqHandler+0x96>
			uartHandler->ICR |= USART_ICR_ORECF;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	f043 0208 	orr.w	r2, r3, #8
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	621a      	str	r2, [r3, #32]
		}
	}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <app_main>:
};
/******************************************************************************
* Function Definitions
*******************************************************************************/
#define SOFT_I2C	1
void app_main(){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
	msgTask.enable = true;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <app_main+0x4c>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
	msgTask.init(&msgTask);
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <app_main+0x4c>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	480e      	ldr	r0, [pc, #56]	; (80014ec <app_main+0x4c>)
 80014b2:	4798      	blx	r3
	uint8_t readData[2] = {0};
 80014b4:	2300      	movs	r3, #0
 80014b6:	80bb      	strh	r3, [r7, #4]

//	eeprom_read(&eepromDev1, 0, readData, 2);
	uint8_t writeData[2] = {0xBA, 0xAB};
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <app_main+0x50>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	803b      	strh	r3, [r7, #0]
	i2c_soft_init(&softI2C2);
 80014be:	480d      	ldr	r0, [pc, #52]	; (80014f4 <app_main+0x54>)
 80014c0:	f007 f858 	bl	8008574 <i2c_soft_init>
//	eeprom_read(&eepromDev1, 0, readData, 2);
	eeprom_write(&eepromDev1, 0, writeData, 2);
 80014c4:	463a      	mov	r2, r7
 80014c6:	2302      	movs	r3, #2
 80014c8:	2100      	movs	r1, #0
 80014ca:	480b      	ldr	r0, [pc, #44]	; (80014f8 <app_main+0x58>)
 80014cc:	f006 fcc3 	bl	8007e56 <eeprom_write>
	while (1){
		msgTask.mainLoop(&msgTask);
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <app_main+0x4c>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <app_main+0x4c>)
 80014d6:	4798      	blx	r3
		btnTask.mainLoop(&btnTask);
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <app_main+0x5c>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	4807      	ldr	r0, [pc, #28]	; (80014fc <app_main+0x5c>)
 80014de:	4798      	blx	r3
		footcontrolTask.mainLoop(&footcontrolTask);
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <app_main+0x60>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	4806      	ldr	r0, [pc, #24]	; (8001500 <app_main+0x60>)
 80014e6:	4798      	blx	r3
		msgTask.mainLoop(&msgTask);
 80014e8:	e7f2      	b.n	80014d0 <app_main+0x30>
 80014ea:	bf00      	nop
 80014ec:	20000768 	.word	0x20000768
 80014f0:	0800bec0 	.word	0x0800bec0
 80014f4:	200006bc 	.word	0x200006bc
 80014f8:	20000698 	.word	0x20000698
 80014fc:	200007b0 	.word	0x200007b0
 8001500:	200007c8 	.word	0x200007c8

08001504 <app_1ms>:
//		dmxTask.mainLoop(&dmxTask);
//		dmxPresetTask.mainLoop(&dmxPresetTask);
	 }
}

void app_1ms(){
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	static uint16_t timer100ms = 0;
	static uint16_t timer500ms = 0;
	dmx_1ms(&dmx1);
 8001508:	481d      	ldr	r0, [pc, #116]	; (8001580 <app_1ms+0x7c>)
 800150a:	f006 fab3 	bl	8007a74 <dmx_1ms>
	if(dmxTask.timer) dmxTask.timer(&dmxTask, true);
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <app_1ms+0x80>)
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d004      	beq.n	8001520 <app_1ms+0x1c>
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <app_1ms+0x80>)
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2101      	movs	r1, #1
 800151c:	4819      	ldr	r0, [pc, #100]	; (8001584 <app_1ms+0x80>)
 800151e:	4798      	blx	r3
	if(dmxPresetTask.timer) dmxPresetTask.timer(&dmxPresetTask, true);
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <app_1ms+0x84>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d004      	beq.n	8001532 <app_1ms+0x2e>
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <app_1ms+0x84>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2101      	movs	r1, #1
 800152e:	4816      	ldr	r0, [pc, #88]	; (8001588 <app_1ms+0x84>)
 8001530:	4798      	blx	r3
	if(btnTask.timer) btnTask.timer(&btnTask, true);
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <app_1ms+0x88>)
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d004      	beq.n	8001544 <app_1ms+0x40>
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <app_1ms+0x88>)
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2101      	movs	r1, #1
 8001540:	4812      	ldr	r0, [pc, #72]	; (800158c <app_1ms+0x88>)
 8001542:	4798      	blx	r3
	if(++timer100ms >= 100){
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <app_1ms+0x8c>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	b29a      	uxth	r2, r3
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <app_1ms+0x8c>)
 800154e:	801a      	strh	r2, [r3, #0]
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <app_1ms+0x8c>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	2b63      	cmp	r3, #99	; 0x63
 8001556:	d902      	bls.n	800155e <app_1ms+0x5a>
		timer100ms = 0;
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <app_1ms+0x8c>)
 800155a:	2200      	movs	r2, #0
 800155c:	801a      	strh	r2, [r3, #0]
//		uart_writeStringToBuffer("AT+NAMEERIC12  ", &uart4TxBuf, huart4.Instance);
//		uart_writeStringToBuffer("AT+NAMEERIC12  ", &uart2TxBuf, huart2.Instance);
	}
	if(++timer500ms >= 500){
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <app_1ms+0x90>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	3301      	adds	r3, #1
 8001564:	b29a      	uxth	r2, r3
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <app_1ms+0x90>)
 8001568:	801a      	strh	r2, [r3, #0]
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <app_1ms+0x90>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001572:	d302      	bcc.n	800157a <app_1ms+0x76>
		timer500ms = 0;
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <app_1ms+0x90>)
 8001576:	2200      	movs	r2, #0
 8001578:	801a      	strh	r2, [r3, #0]
	}

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200005e0 	.word	0x200005e0
 8001584:	20000798 	.word	0x20000798
 8001588:	20000780 	.word	0x20000780
 800158c:	200007b0 	.word	0x200007b0
 8001590:	200017a0 	.word	0x200017a0
 8001594:	200017a2 	.word	0x200017a2

08001598 <app_process>:
/* Application Task ------------------------------------------------------------*/
static void app_process(eal_task_Task *self){
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	msg_Message buffer = {0};
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
	msg_Message *newMessage = msg_getNext(&buffer, &msgBuf);
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <app_process+0x38>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f006 fdda 	bl	800816a <msg_getNext>
 80015b6:	6178      	str	r0, [r7, #20]
	if(newMessage != NULL){
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d004      	beq.n	80015c8 <app_process+0x30>
		self->receiveMsg(self, newMessage);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	6979      	ldr	r1, [r7, #20]
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	4798      	blx	r3
	}
}
 80015c8:	bf00      	nop
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000740 	.word	0x20000740

080015d4 <app_receiveMsg>:
static void app_receiveMsg(eal_task_Task *self, msg_Message *message){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
	dmxTask.receiveMsg(&dmxTask, message);
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <app_receiveMsg+0x3c>)
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	6839      	ldr	r1, [r7, #0]
 80015e4:	480a      	ldr	r0, [pc, #40]	; (8001610 <app_receiveMsg+0x3c>)
 80015e6:	4798      	blx	r3
	dmxPresetTask.receiveMsg(&dmxPresetTask, message);
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <app_receiveMsg+0x40>)
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	6839      	ldr	r1, [r7, #0]
 80015ee:	4809      	ldr	r0, [pc, #36]	; (8001614 <app_receiveMsg+0x40>)
 80015f0:	4798      	blx	r3
	btnTask.receiveMsg(&btnTask, message);
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <app_receiveMsg+0x44>)
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	6839      	ldr	r1, [r7, #0]
 80015f8:	4807      	ldr	r0, [pc, #28]	; (8001618 <app_receiveMsg+0x44>)
 80015fa:	4798      	blx	r3
	footcontrolTask.receiveMsg(&footcontrolTask, message);
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <app_receiveMsg+0x48>)
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	6839      	ldr	r1, [r7, #0]
 8001602:	4806      	ldr	r0, [pc, #24]	; (800161c <app_receiveMsg+0x48>)
 8001604:	4798      	blx	r3
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000798 	.word	0x20000798
 8001614:	20000780 	.word	0x20000780
 8001618:	200007b0 	.word	0x200007b0
 800161c:	200007c8 	.word	0x200007c8

08001620 <app_init>:

static void app_init(eal_task_Task *self){
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	eeprom_registerCallback(&eepromDev1, eepromCallback);
 8001628:	4910      	ldr	r1, [pc, #64]	; (800166c <app_init+0x4c>)
 800162a:	4811      	ldr	r0, [pc, #68]	; (8001670 <app_init+0x50>)
 800162c:	f006 fbf2 	bl	8007e14 <eeprom_registerCallback>
	eeprom_init(&eepromDev1);
 8001630:	480f      	ldr	r0, [pc, #60]	; (8001670 <app_init+0x50>)
 8001632:	f006 fbfd 	bl	8007e30 <eeprom_init>
//	dmxTask.enable = true;
//	if(dmxTask.init) dmxTask.init(&dmxTask);
//	dmxPresetTask.enable = true;
//	if(dmxPresetTask.init) dmxPresetTask.init(&dmxPresetTask);
	btnTask.enable = true;
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <app_init+0x54>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
	if(btnTask.init) btnTask.init(&btnTask);
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <app_init+0x54>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <app_init+0x2c>
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <app_init+0x54>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	480a      	ldr	r0, [pc, #40]	; (8001674 <app_init+0x54>)
 800164a:	4798      	blx	r3
	footcontrolTask.enable = true;
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <app_init+0x58>)
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
	if(footcontrolTask.init) footcontrolTask.init(&footcontrolTask);
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <app_init+0x58>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <app_init+0x42>
 800165a:	4b07      	ldr	r3, [pc, #28]	; (8001678 <app_init+0x58>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4806      	ldr	r0, [pc, #24]	; (8001678 <app_init+0x58>)
 8001660:	4798      	blx	r3

}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	080016e5 	.word	0x080016e5
 8001670:	20000698 	.word	0x20000698
 8001674:	200007b0 	.word	0x200007b0
 8001678:	200007c8 	.word	0x200007c8

0800167c <sendMessage>:

/* Messages --------------------------------------------------------------------*/
static void sendMessage(eal_task_Task *self, msg_Message *message){
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
	uint8_t msgBufState = 1;
 8001686:	2301      	movs	r3, #1
 8001688:	73fb      	strb	r3, [r7, #15]
	if(msg_isAction(message))msgBufState = msg_writeAction(message, &msgBuf);
 800168a:	6838      	ldr	r0, [r7, #0]
 800168c:	f006 fe0a 	bl	80082a4 <msg_isAction>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d006      	beq.n	80016a4 <sendMessage+0x28>
 8001696:	490c      	ldr	r1, [pc, #48]	; (80016c8 <sendMessage+0x4c>)
 8001698:	6838      	ldr	r0, [r7, #0]
 800169a:	f006 fd4d 	bl	8008138 <msg_writeAction>
 800169e:	4603      	mov	r3, r0
 80016a0:	73fb      	strb	r3, [r7, #15]
 80016a2:	e005      	b.n	80016b0 <sendMessage+0x34>
	else msgBufState = msg_writeEvent(message, &msgBuf);
 80016a4:	4908      	ldr	r1, [pc, #32]	; (80016c8 <sendMessage+0x4c>)
 80016a6:	6838      	ldr	r0, [r7, #0]
 80016a8:	f006 fd2f 	bl	800810a <msg_writeEvent>
 80016ac:	4603      	mov	r3, r0
 80016ae:	73fb      	strb	r3, [r7, #15]
	if(msgBufState != 1) messageBufferError(msgBufState);
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d003      	beq.n	80016be <sendMessage+0x42>
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f807 	bl	80016cc <messageBufferError>
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000740 	.word	0x20000740

080016cc <messageBufferError>:
static void messageBufferError(uint8_t state){
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
//	if(state == NO_BUF) USART3_WriteStringToBuffer("ERROR: MSG NO BUF\r\n", 18);
//	else if(state == FULL) USART3_WriteStringToBuffer("ERROR: MSG BUF OVR\r\n", 19);
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <eepromCallback>:

/* Callback's ---------------------------------------------------------------------*/
uint8_t eepromCallback(eeprom_cfg_Config *config){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	6078      	str	r0, [r7, #4]
	uint8_t state = 1;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
	if(config->callbackType == EEPROM_CFG_CALL_TX_START){
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7a9b      	ldrb	r3, [r3, #10]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d115      	bne.n	8001724 <eepromCallback+0x40>
		if(i2c_soft_mem_write(&softI2C2, config->devAddr, config->memAddr, I2C_MEMADD_SIZE_16BIT, config->txBuffer, config->dataSize) != soft_i2c_RETURN_OK) state = 0;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	4618      	mov	r0, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6952      	ldr	r2, [r2, #20]
 800170c:	9201      	str	r2, [sp, #4]
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	2302      	movs	r3, #2
 8001712:	4602      	mov	r2, r0
 8001714:	481e      	ldr	r0, [pc, #120]	; (8001790 <eepromCallback+0xac>)
 8001716:	f006 ffe8 	bl	80086ea <i2c_soft_mem_write>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <eepromCallback+0x40>
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
	}
	if(config->callbackType == EEPROM_CFG_CALL_RX_START){
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	7a9b      	ldrb	r3, [r3, #10]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d115      	bne.n	8001758 <eepromCallback+0x74>
		if(i2c_soft_mem_read(&softI2C2, config->devAddr, config->memAddr, I2C_MEMADD_SIZE_16BIT, config->rxBuffer, config->dataSize) != soft_i2c_RETURN_OK) state = 0;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	4618      	mov	r0, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6952      	ldr	r2, [r2, #20]
 8001740:	9201      	str	r2, [sp, #4]
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2302      	movs	r3, #2
 8001746:	4602      	mov	r2, r0
 8001748:	4811      	ldr	r0, [pc, #68]	; (8001790 <eepromCallback+0xac>)
 800174a:	f006 ff46 	bl	80085da <i2c_soft_mem_read>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <eepromCallback+0x74>
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]
	}
	if(config->callbackType == EEPROM_CFG_CALL_CHECK_TX_STATE){
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	7a9b      	ldrb	r3, [r3, #10]
 800175c:	2b04      	cmp	r3, #4
 800175e:	d112      	bne.n	8001786 <eepromCallback+0xa2>
		//TODO: Change to soft i2c
		if(HAL_I2C_Master_Transmit(&hi2c2, config->devAddr, config->rxBuffer, config->dataSize, 1) != HAL_OK) state = 0;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b299      	uxth	r1, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1a      	ldr	r2, [r3, #32]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	b298      	uxth	r0, r3
 8001770:	2301      	movs	r3, #1
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	4603      	mov	r3, r0
 8001776:	4807      	ldr	r0, [pc, #28]	; (8001794 <eepromCallback+0xb0>)
 8001778:	f000 fbe6 	bl	8001f48 <HAL_I2C_Master_Transmit>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <eepromCallback+0xa2>
 8001782:	2300      	movs	r3, #0
 8001784:	73fb      	strb	r3, [r7, #15]
	}
	return state;
 8001786:	7bfb      	ldrb	r3, [r7, #15]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200006bc 	.word	0x200006bc
 8001794:	200019cc 	.word	0x200019cc

08001798 <UART4_IRQHandler>:

/* IRQs ---------------------------------------------------------------------*/
void UART4_IRQHandler(void){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	app_uart_irqHandler(huart4.Instance, &uart4RxBuf, &uart4TxBuf);
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <UART4_IRQHandler+0x18>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <UART4_IRQHandler+0x1c>)
 80017a2:	4905      	ldr	r1, [pc, #20]	; (80017b8 <UART4_IRQHandler+0x20>)
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fe2b 	bl	8001400 <app_uart_irqHandler>
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20001c80 	.word	0x20001c80
 80017b4:	20000750 	.word	0x20000750
 80017b8:	2000075c 	.word	0x2000075c

080017bc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == dmx1.txTimer) dmx_irqTxTimerHandler(&dmx1);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d102      	bne.n	80017d6 <HAL_TIM_PeriodElapsedCallback+0x1a>
 80017d0:	4803      	ldr	r0, [pc, #12]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80017d2:	f006 f9c9 	bl	8007b68 <dmx_irqTxTimerHandler>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200005e0 	.word	0x200005e0

080017e4 <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  if (__HAL_TIM_GET_FLAG(&htim16, TIM_FLAG_UPDATE) != RESET){
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <TIM1_UP_TIM16_IRQHandler+0x28>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d107      	bne.n	8001806 <TIM1_UP_TIM16_IRQHandler+0x22>
	  __HAL_TIM_CLEAR_IT(&htim16, TIM_IT_UPDATE);
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <TIM1_UP_TIM16_IRQHandler+0x28>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f06f 0201 	mvn.w	r2, #1
 80017fe:	611a      	str	r2, [r3, #16]
	  i2c_soft_timer_us(&softI2C2);
 8001800:	4803      	ldr	r0, [pc, #12]	; (8001810 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8001802:	f006 fed7 	bl	80085b4 <i2c_soft_timer_us>
  }
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20001bc8 	.word	0x20001bc8
 8001810:	200006bc 	.word	0x200006bc

08001814 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181e:	2003      	movs	r0, #3
 8001820:	f000 f918 	bl	8001a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001824:	2000      	movs	r0, #0
 8001826:	f000 f80d 	bl	8001844 <HAL_InitTick>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	71fb      	strb	r3, [r7, #7]
 8001834:	e001      	b.n	800183a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001836:	f008 ff79 	bl	800a72c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800183a:	79fb      	ldrb	r3, [r7, #7]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <HAL_InitTick+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0c      	ldr	r2, [pc, #48]	; (8001888 <HAL_InitTick+0x44>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	099b      	lsrs	r3, r3, #6
 800185c:	4618      	mov	r0, r3
 800185e:	f000 f92e 	bl	8001abe <HAL_SYSTICK_Config>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <HAL_InitTick+0x2a>
  {
    status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
 800186c:	e005      	b.n	800187a <HAL_InitTick+0x36>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	f04f 30ff 	mov.w	r0, #4294967295
 8001876:	f000 f8f8 	bl	8001a6a <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200008f0 	.word	0x200008f0
 8001888:	10624dd3 	.word	0x10624dd3

0800188c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  uwTick++;
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <HAL_IncTick+0x18>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	4a03      	ldr	r2, [pc, #12]	; (80018a4 <HAL_IncTick+0x18>)
 8001898:	6013      	str	r3, [r2, #0]
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	200019c8 	.word	0x200019c8

080018a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return uwTick;
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <HAL_GetTick+0x14>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	200019c8 	.word	0x200019c8

080018c0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <NVIC_SetPriorityGrouping+0x44>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018dc:	4013      	ands	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <NVIC_SetPriorityGrouping+0x44>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <NVIC_GetPriorityGrouping+0x18>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	f003 0307 	and.w	r3, r3, #7
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800192e:	4909      	ldr	r1, [pc, #36]	; (8001954 <NVIC_EnableIRQ+0x30>)
 8001930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001934:	095b      	lsrs	r3, r3, #5
 8001936:	79fa      	ldrb	r2, [r7, #7]
 8001938:	f002 021f 	and.w	r2, r2, #31
 800193c:	2001      	movs	r0, #1
 800193e:	fa00 f202 	lsl.w	r2, r0, r2
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000e100 	.word	0xe000e100

08001958 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	da0b      	bge.n	8001984 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	490d      	ldr	r1, [pc, #52]	; (80019a4 <NVIC_SetPriority+0x4c>)
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	f003 030f 	and.w	r3, r3, #15
 8001974:	3b04      	subs	r3, #4
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001982:	e009      	b.n	8001998 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	4908      	ldr	r1, [pc, #32]	; (80019a8 <NVIC_SetPriority+0x50>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	440b      	add	r3, r1
 8001994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00
 80019a8:	e000e100 	.word	0xe000e100

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	2201      	movs	r2, #1
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	1e5a      	subs	r2, r3, #1
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	401a      	ands	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f2:	2101      	movs	r1, #1
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	1e59      	subs	r1, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	4313      	orrs	r3, r2
         );
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3724      	adds	r7, #36	; 0x24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a20:	d301      	bcc.n	8001a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00f      	b.n	8001a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <SysTick_Config+0x40>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2e:	210f      	movs	r1, #15
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f7ff ff90 	bl	8001958 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <SysTick_Config+0x40>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <SysTick_Config+0x40>)
 8001a40:	2207      	movs	r2, #7
 8001a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	e000e010 	.word	0xe000e010

08001a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ff2f 	bl	80018c0 <NVIC_SetPriorityGrouping>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7c:	f7ff ff44 	bl	8001908 <NVIC_GetPriorityGrouping>
 8001a80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	6978      	ldr	r0, [r7, #20]
 8001a88:	f7ff ff90 	bl	80019ac <NVIC_EncodePriority>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff5f 	bl	8001958 <NVIC_SetPriority>
}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff37 	bl	8001924 <NVIC_EnableIRQ>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ffa2 	bl	8001a10 <SysTick_Config>
 8001acc:	4603      	mov	r3, r0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae6:	e154      	b.n	8001d92 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2101      	movs	r1, #1
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	fa01 f303 	lsl.w	r3, r1, r3
 8001af4:	4013      	ands	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8146 	beq.w	8001d8c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x38>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b12      	cmp	r3, #18
 8001b0e:	d123      	bne.n	8001b58 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	08da      	lsrs	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3208      	adds	r2, #8
 8001b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	220f      	movs	r2, #15
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	08da      	lsrs	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3208      	adds	r2, #8
 8001b52:	6939      	ldr	r1, [r7, #16]
 8001b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0203 	and.w	r2, r3, #3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d00b      	beq.n	8001bac <HAL_GPIO_Init+0xd4>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d007      	beq.n	8001bac <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ba0:	2b11      	cmp	r3, #17
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b12      	cmp	r3, #18
 8001baa:	d130      	bne.n	8001c0e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001be2:	2201      	movs	r2, #1
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	091b      	lsrs	r3, r3, #4
 8001bf8:	f003 0201 	and.w	r2, r3, #1
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 80a0 	beq.w	8001d8c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4c:	4a58      	ldr	r2, [pc, #352]	; (8001db0 <HAL_GPIO_Init+0x2d8>)
 8001c4e:	4b58      	ldr	r3, [pc, #352]	; (8001db0 <HAL_GPIO_Init+0x2d8>)
 8001c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6613      	str	r3, [r2, #96]	; 0x60
 8001c58:	4b55      	ldr	r3, [pc, #340]	; (8001db0 <HAL_GPIO_Init+0x2d8>)
 8001c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c64:	4a53      	ldr	r2, [pc, #332]	; (8001db4 <HAL_GPIO_Init+0x2dc>)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c8e:	d019      	beq.n	8001cc4 <HAL_GPIO_Init+0x1ec>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a49      	ldr	r2, [pc, #292]	; (8001db8 <HAL_GPIO_Init+0x2e0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d013      	beq.n	8001cc0 <HAL_GPIO_Init+0x1e8>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a48      	ldr	r2, [pc, #288]	; (8001dbc <HAL_GPIO_Init+0x2e4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00d      	beq.n	8001cbc <HAL_GPIO_Init+0x1e4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a47      	ldr	r2, [pc, #284]	; (8001dc0 <HAL_GPIO_Init+0x2e8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d007      	beq.n	8001cb8 <HAL_GPIO_Init+0x1e0>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a46      	ldr	r2, [pc, #280]	; (8001dc4 <HAL_GPIO_Init+0x2ec>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d101      	bne.n	8001cb4 <HAL_GPIO_Init+0x1dc>
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	e008      	b.n	8001cc6 <HAL_GPIO_Init+0x1ee>
 8001cb4:	2307      	movs	r3, #7
 8001cb6:	e006      	b.n	8001cc6 <HAL_GPIO_Init+0x1ee>
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e004      	b.n	8001cc6 <HAL_GPIO_Init+0x1ee>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e002      	b.n	8001cc6 <HAL_GPIO_Init+0x1ee>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <HAL_GPIO_Init+0x1ee>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	f002 0203 	and.w	r2, r2, #3
 8001ccc:	0092      	lsls	r2, r2, #2
 8001cce:	4093      	lsls	r3, r2
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cd6:	4937      	ldr	r1, [pc, #220]	; (8001db4 <HAL_GPIO_Init+0x2dc>)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ce4:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d08:	4a2f      	ldr	r2, [pc, #188]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d0e:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d32:	4a25      	ldr	r2, [pc, #148]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d38:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d5c:	4a1a      	ldr	r2, [pc, #104]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d62:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d86:	4a10      	ldr	r2, [pc, #64]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f47f aea3 	bne.w	8001ae8 <HAL_GPIO_Init+0x10>
  }
}
 8001da2:	bf00      	nop
 8001da4:	371c      	adds	r7, #28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010000 	.word	0x40010000
 8001db8:	48000400 	.word	0x48000400
 8001dbc:	48000800 	.word	0x48000800
 8001dc0:	48000c00 	.word	0x48000c00
 8001dc4:	48001000 	.word	0x48001000
 8001dc8:	40010400 	.word	0x40010400

08001dcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	887b      	ldrh	r3, [r7, #2]
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001de4:	2301      	movs	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]
 8001de8:	e001      	b.n	8001dee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e0c:	787b      	ldrb	r3, [r7, #1]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e12:	887a      	ldrh	r2, [r7, #2]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e1a:	887a      	ldrh	r2, [r7, #2]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e080      	b.n	8001f40 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f008 fad6 	bl	800a404 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2224      	movs	r2, #36	; 0x24
 8001e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6852      	ldr	r2, [r2, #4]
 8001e78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	6892      	ldr	r2, [r2, #8]
 8001e88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d107      	bne.n	8001ea6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6892      	ldr	r2, [r2, #8]
 8001e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	e006      	b.n	8001eb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6892      	ldr	r2, [r2, #8]
 8001eae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001eb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d104      	bne.n	8001ec6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ec4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	68d2      	ldr	r2, [r2, #12]
 8001ee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ee8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6911      	ldr	r1, [r2, #16]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6952      	ldr	r2, [r2, #20]
 8001ef6:	4311      	orrs	r1, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6992      	ldr	r2, [r2, #24]
 8001efc:	0212      	lsls	r2, r2, #8
 8001efe:	430a      	orrs	r2, r1
 8001f00:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	69d1      	ldr	r1, [r2, #28]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6a12      	ldr	r2, [r2, #32]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	f042 0201 	orr.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af02      	add	r7, sp, #8
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	461a      	mov	r2, r3
 8001f54:	460b      	mov	r3, r1
 8001f56:	817b      	strh	r3, [r7, #10]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	f040 80da 	bne.w	800211e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_I2C_Master_Transmit+0x30>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e0d3      	b.n	8002120 <HAL_I2C_Master_Transmit+0x1d8>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f80:	f7ff fc92 	bl	80018a8 <HAL_GetTick>
 8001f84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2319      	movs	r3, #25
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f8f0 	bl	8002178 <I2C_WaitOnFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e0be      	b.n	8002120 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2221      	movs	r2, #33	; 0x21
 8001fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2210      	movs	r2, #16
 8001fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	893a      	ldrh	r2, [r7, #8]
 8001fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	2bff      	cmp	r3, #255	; 0xff
 8001fd2:	d90e      	bls.n	8001ff2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	22ff      	movs	r2, #255	; 0xff
 8001fd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	8979      	ldrh	r1, [r7, #10]
 8001fe2:	4b51      	ldr	r3, [pc, #324]	; (8002128 <HAL_I2C_Master_Transmit+0x1e0>)
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 f9e6 	bl	80023bc <I2C_TransferConfig>
 8001ff0:	e06c      	b.n	80020cc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002000:	b2da      	uxtb	r2, r3
 8002002:	8979      	ldrh	r1, [r7, #10]
 8002004:	4b48      	ldr	r3, [pc, #288]	; (8002128 <HAL_I2C_Master_Transmit+0x1e0>)
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 f9d5 	bl	80023bc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002012:	e05b      	b.n	80020cc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	6a39      	ldr	r1, [r7, #32]
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f8ed 	bl	80021f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e07b      	b.n	8002120 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002030:	7812      	ldrb	r2, [r2, #0]
 8002032:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002042:	b29b      	uxth	r3, r3
 8002044:	3b01      	subs	r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205c:	b29b      	uxth	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d034      	beq.n	80020cc <HAL_I2C_Master_Transmit+0x184>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002066:	2b00      	cmp	r3, #0
 8002068:	d130      	bne.n	80020cc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	2200      	movs	r2, #0
 8002072:	2180      	movs	r1, #128	; 0x80
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f87f 	bl	8002178 <I2C_WaitOnFlagUntilTimeout>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e04d      	b.n	8002120 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002088:	b29b      	uxth	r3, r3
 800208a:	2bff      	cmp	r3, #255	; 0xff
 800208c:	d90e      	bls.n	80020ac <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	22ff      	movs	r2, #255	; 0xff
 8002092:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002098:	b2da      	uxtb	r2, r3
 800209a:	8979      	ldrh	r1, [r7, #10]
 800209c:	2300      	movs	r3, #0
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 f989 	bl	80023bc <I2C_TransferConfig>
 80020aa:	e00f      	b.n	80020cc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	8979      	ldrh	r1, [r7, #10]
 80020be:	2300      	movs	r3, #0
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f978 	bl	80023bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d19e      	bne.n	8002014 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	6a39      	ldr	r1, [r7, #32]
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f8cc 	bl	8002278 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e01a      	b.n	8002120 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2220      	movs	r2, #32
 80020f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_I2C_Master_Transmit+0x1e4>)
 80020fe:	400b      	ands	r3, r1
 8002100:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2220      	movs	r2, #32
 8002106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	e000      	b.n	8002120 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800211e:	2302      	movs	r3, #2
  }
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	80002000 	.word	0x80002000
 800212c:	fe00e800 	.word	0xfe00e800

08002130 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b02      	cmp	r3, #2
 8002144:	d103      	bne.n	800214e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2200      	movs	r2, #0
 800214c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d007      	beq.n	800216c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	6992      	ldr	r2, [r2, #24]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	619a      	str	r2, [r3, #24]
  }
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	4613      	mov	r3, r2
 8002186:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002188:	e022      	b.n	80021d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002190:	d01e      	beq.n	80021d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002192:	f7ff fb89 	bl	80018a8 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	1ad2      	subs	r2, r2, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d802      	bhi.n	80021a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d113      	bne.n	80021d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ac:	f043 0220 	orr.w	r2, r3, #32
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e00f      	b.n	80021f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	401a      	ands	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	429a      	cmp	r2, r3
 80021de:	bf0c      	ite	eq
 80021e0:	2301      	moveq	r3, #1
 80021e2:	2300      	movne	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d0cd      	beq.n	800218a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002204:	e02c      	b.n	8002260 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f870 	bl	80022f0 <I2C_IsAcknowledgeFailed>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e02a      	b.n	8002270 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002220:	d01e      	beq.n	8002260 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002222:	f7ff fb41 	bl	80018a8 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	1ad2      	subs	r2, r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	429a      	cmp	r2, r3
 8002230:	d802      	bhi.n	8002238 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d113      	bne.n	8002260 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223c:	f043 0220 	orr.w	r2, r3, #32
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e007      	b.n	8002270 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b02      	cmp	r3, #2
 800226c:	d1cb      	bne.n	8002206 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002284:	e028      	b.n	80022d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f830 	bl	80022f0 <I2C_IsAcknowledgeFailed>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e026      	b.n	80022e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229a:	f7ff fb05 	bl	80018a8 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1ad2      	subs	r2, r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d802      	bhi.n	80022b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d113      	bne.n	80022d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b4:	f043 0220 	orr.w	r2, r3, #32
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2220      	movs	r2, #32
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e007      	b.n	80022e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	2b20      	cmp	r3, #32
 80022e4:	d1cf      	bne.n	8002286 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b10      	cmp	r3, #16
 8002308:	d151      	bne.n	80023ae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800230a:	e022      	b.n	8002352 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002312:	d01e      	beq.n	8002352 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002314:	f7ff fac8 	bl	80018a8 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	1ad2      	subs	r2, r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	429a      	cmp	r2, r3
 8002322:	d802      	bhi.n	800232a <I2C_IsAcknowledgeFailed+0x3a>
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d113      	bne.n	8002352 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f043 0220 	orr.w	r2, r3, #32
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2220      	movs	r2, #32
 800233a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e02e      	b.n	80023b0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b20      	cmp	r3, #32
 800235e:	d1d5      	bne.n	800230c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2210      	movs	r2, #16
 8002366:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2220      	movs	r2, #32
 800236e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f7ff fedd 	bl	8002130 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <I2C_IsAcknowledgeFailed+0xc8>)
 8002382:	400b      	ands	r3, r1
 8002384:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	f043 0204 	orr.w	r2, r3, #4
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	fe00e800 	.word	0xfe00e800

080023bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	460b      	mov	r3, r1
 80023c8:	817b      	strh	r3, [r7, #10]
 80023ca:	4613      	mov	r3, r2
 80023cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6859      	ldr	r1, [r3, #4]
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	0d5b      	lsrs	r3, r3, #21
 80023dc:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <I2C_TransferConfig+0x54>)
 80023e2:	4303      	orrs	r3, r0
 80023e4:	43db      	mvns	r3, r3
 80023e6:	4019      	ands	r1, r3
 80023e8:	897b      	ldrh	r3, [r7, #10]
 80023ea:	f3c3 0009 	ubfx	r0, r3, #0, #10
 80023ee:	7a7b      	ldrb	r3, [r7, #9]
 80023f0:	041b      	lsls	r3, r3, #16
 80023f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80023f6:	4318      	orrs	r0, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4318      	orrs	r0, r3
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	4303      	orrs	r3, r0
 8002400:	430b      	orrs	r3, r1
 8002402:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	03ff63ff 	.word	0x03ff63ff

08002414 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b20      	cmp	r3, #32
 8002428:	d138      	bne.n	800249c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002434:	2302      	movs	r3, #2
 8002436:	e032      	b.n	800249e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2224      	movs	r2, #36	; 0x24
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002466:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	6811      	ldr	r1, [r2, #0]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	e000      	b.n	800249e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800249c:	2302      	movs	r3, #2
  }
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b085      	sub	sp, #20
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d139      	bne.n	8002534 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e033      	b.n	8002536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2224      	movs	r2, #36	; 0x24
 80024da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	f022 0201 	bic.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	e000      	b.n	8002536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002534:	2302      	movs	r3, #2
  }
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim: LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_LPTIM_Init+0x16>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e076      	b.n	8002648 <HAL_LPTIM_Init+0x104>

#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_LPTIM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f007 ffe4 	bl	800a53c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d103      	bne.n	8002594 <HAL_LPTIM_Init+0x50>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 031e 	bic.w	r3, r3, #30
 8002592:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800259c:	4293      	cmp	r3, r2
 800259e:	d005      	beq.n	80025ac <HAL_LPTIM_Init+0x68>
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80025a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80025aa:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4b28      	ldr	r3, [pc, #160]	; (8002650 <HAL_LPTIM_Init+0x10c>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80025bc:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80025c2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80025c8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80025ce:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d107      	bne.n	80025ee <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 80025e6:	4313      	orrs	r3, r2
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00a      	beq.n	8002610 <HAL_LPTIM_Init+0xcc>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002602:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8002608:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a0d      	ldr	r2, [pc, #52]	; (8002654 <HAL_LPTIM_Init+0x110>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d108      	bne.n	8002634 <HAL_LPTIM_Init+0xf0>
    /* Check LPTIM1 Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));

    /* Configure LPTIM1 Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800262e:	430a      	orrs	r2, r1
 8002630:	621a      	str	r2, [r3, #32]
 8002632:	e004      	b.n	800263e <HAL_LPTIM_Init+0xfa>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800263c:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	ff19f1fe 	.word	0xff19f1fe
 8002654:	40007c00 	.word	0x40007c00

08002658 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim: LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d10d      	bne.n	800268a <HAL_LPTIM_IRQHandler+0x32>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d106      	bne.n	800268a <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2201      	movs	r2, #1
 8002682:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f882 	bl	800278e <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b02      	cmp	r3, #2
 8002696:	d10d      	bne.n	80026b4 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d106      	bne.n	80026b4 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2202      	movs	r2, #2
 80026ac:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f877 	bl	80027a2 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d10d      	bne.n	80026de <HAL_LPTIM_IRQHandler+0x86>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d106      	bne.n	80026de <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2204      	movs	r2, #4
 80026d6:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f86c 	bl	80027b6 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d10d      	bne.n	8002708 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d106      	bne.n	8002708 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2208      	movs	r2, #8
 8002700:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f861 	bl	80027ca <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b10      	cmp	r3, #16
 8002714:	d10d      	bne.n	8002732 <HAL_LPTIM_IRQHandler+0xda>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b10      	cmp	r3, #16
 8002722:	d106      	bne.n	8002732 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2210      	movs	r2, #16
 800272a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f856 	bl	80027de <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b20      	cmp	r3, #32
 800273e:	d10d      	bne.n	800275c <HAL_LPTIM_IRQHandler+0x104>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	2b20      	cmp	r3, #32
 800274c:	d106      	bne.n	800275c <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2220      	movs	r2, #32
 8002754:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f84b 	bl	80027f2 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002766:	2b40      	cmp	r3, #64	; 0x40
 8002768:	d10d      	bne.n	8002786 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002774:	2b40      	cmp	r3, #64	; 0x40
 8002776:	d106      	bne.n	8002786 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2240      	movs	r2, #64	; 0x40
 800277e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f840 	bl	8002806 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */      
    }
  }
#endif
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim : LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800281a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281c:	b08b      	sub	sp, #44	; 0x2c
 800281e:	af06      	add	r7, sp, #24
 8002820:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0cb      	b.n	80029c4 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d106      	bne.n	8002846 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f008 fe75 	bl	800b530 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2203      	movs	r2, #3
 800284a:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f003 ff44 	bl	80066e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	687e      	ldr	r6, [r7, #4]
 8002860:	466d      	mov	r5, sp
 8002862:	f106 0410 	add.w	r4, r6, #16
 8002866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286a:	6823      	ldr	r3, [r4, #0]
 800286c:	602b      	str	r3, [r5, #0]
 800286e:	1d33      	adds	r3, r6, #4
 8002870:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002872:	6838      	ldr	r0, [r7, #0]
 8002874:	f003 ff0b 	bl	800668e <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f003 ff4b 	bl	800671a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]
 8002888:	e035      	b.n	80028f6 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	015b      	lsls	r3, r3, #5
 8002890:	4413      	add	r3, r2
 8002892:	3329      	adds	r3, #41	; 0x29
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	015b      	lsls	r3, r3, #5
 800289e:	4413      	add	r3, r2
 80028a0:	3328      	adds	r3, #40	; 0x28
 80028a2:	7bfa      	ldrb	r2, [r7, #15]
 80028a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	b291      	uxth	r1, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	015b      	lsls	r3, r3, #5
 80028b0:	4413      	add	r3, r2
 80028b2:	3336      	adds	r3, #54	; 0x36
 80028b4:	460a      	mov	r2, r1
 80028b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	015b      	lsls	r3, r3, #5
 80028be:	4413      	add	r3, r2
 80028c0:	332b      	adds	r3, #43	; 0x2b
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	015b      	lsls	r3, r3, #5
 80028cc:	4413      	add	r3, r2
 80028ce:	3338      	adds	r3, #56	; 0x38
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	015b      	lsls	r3, r3, #5
 80028da:	4413      	add	r3, r2
 80028dc:	333c      	adds	r3, #60	; 0x3c
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	3302      	adds	r3, #2
 80028e8:	015b      	lsls	r3, r3, #5
 80028ea:	4413      	add	r3, r2
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < 15U; i++)
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	3301      	adds	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	2b0e      	cmp	r3, #14
 80028fa:	d9c6      	bls.n	800288a <HAL_PCD_Init+0x70>
  }

  for (i = 0U; i < 15U; i++)
 80028fc:	2300      	movs	r3, #0
 80028fe:	73fb      	strb	r3, [r7, #15]
 8002900:	e031      	b.n	8002966 <HAL_PCD_Init+0x14c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	015b      	lsls	r3, r3, #5
 8002908:	4413      	add	r3, r2
 800290a:	f203 2329 	addw	r3, r3, #553	; 0x229
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	015b      	lsls	r3, r3, #5
 8002918:	4413      	add	r3, r2
 800291a:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800291e:	7bfa      	ldrb	r2, [r7, #15]
 8002920:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	015b      	lsls	r3, r3, #5
 8002928:	4413      	add	r3, r2
 800292a:	f203 232b 	addw	r3, r3, #555	; 0x22b
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	015b      	lsls	r3, r3, #5
 8002938:	4413      	add	r3, r2
 800293a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	015b      	lsls	r3, r3, #5
 8002948:	4413      	add	r3, r2
 800294a:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	3312      	adds	r3, #18
 8002958:	015b      	lsls	r3, r3, #5
 800295a:	4413      	add	r3, r2
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < 15U; i++)
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	3301      	adds	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	2b0e      	cmp	r3, #14
 800296a:	d9ca      	bls.n	8002902 <HAL_PCD_Init+0xe8>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	687e      	ldr	r6, [r7, #4]
 8002974:	466d      	mov	r5, sp
 8002976:	f106 0410 	add.w	r4, r6, #16
 800297a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800297c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	602b      	str	r3, [r5, #0]
 8002982:	1d33      	adds	r3, r6, #4
 8002984:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002986:	6838      	ldr	r0, [r7, #0]
 8002988:	f003 fed4 	bl	8006734 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d102      	bne.n	80029aa <HAL_PCD_Init+0x190>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fe5e 	bl	8003666 <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d102      	bne.n	80029b8 <HAL_PCD_Init+0x19e>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fe31 	bl	800361a <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f004 ff04 	bl	80077ca <USB_DevDisconnect>

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_PCD_Start+0x16>
 80029de:	2302      	movs	r3, #2
 80029e0:	e012      	b.n	8002a08 <HAL_PCD_Start+0x3c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_DevConnect(hpcd->Instance);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f004 fed4 	bl	800779c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 fe59 	bl	80066b0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f004 fee9 	bl	80077f4 <USB_ReadInterrupts>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a2c:	d102      	bne.n	8002a34 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fb40 	bl	80030b4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f004 fedb 	bl	80077f4 <USB_ReadInterrupts>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a48:	d112      	bne.n	8002a70 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002a56:	b292      	uxth	r2, r2
 8002a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a5c:	b292      	uxth	r2, r2
 8002a5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f008 fdeb 	bl	800b63e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a68:	2100      	movs	r1, #0
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f929 	bl	8002cc2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f004 febd 	bl	80077f4 <USB_ReadInterrupts>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a84:	d10b      	bne.n	8002a9e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002a92:	b292      	uxth	r2, r2
 8002a94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a98:	b292      	uxth	r2, r2
 8002a9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f004 fea6 	bl	80077f4 <USB_ReadInterrupts>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ab2:	d10b      	bne.n	8002acc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002ac0:	b292      	uxth	r2, r2
 8002ac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ac6:	b292      	uxth	r2, r2
 8002ac8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f004 fe8f 	bl	80077f4 <USB_ReadInterrupts>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae0:	d133      	bne.n	8002b4a <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002aee:	b292      	uxth	r2, r2
 8002af0:	f022 0204 	bic.w	r2, r2, #4
 8002af4:	b292      	uxth	r2, r2
 8002af6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002b06:	b292      	uxth	r2, r2
 8002b08:	f022 0208 	bic.w	r2, r2, #8
 8002b0c:	b292      	uxth	r2, r2
 8002b0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b24:	2100      	movs	r1, #0
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f009 f83c 	bl	800bba4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f008 fdc3 	bl	800b6b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002b3e:	b292      	uxth	r2, r2
 8002b40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b44:	b292      	uxth	r2, r2
 8002b46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f004 fe50 	bl	80077f4 <USB_ReadInterrupts>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b5e:	d131      	bne.n	8002bc4 <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002b6c:	b292      	uxth	r2, r2
 8002b6e:	f042 0208 	orr.w	r2, r2, #8
 8002b72:	b292      	uxth	r2, r2
 8002b74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002b84:	b292      	uxth	r2, r2
 8002b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b8a:	b292      	uxth	r2, r2
 8002b8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002b9c:	b292      	uxth	r2, r2
 8002b9e:	f042 0204 	orr.w	r2, r2, #4
 8002ba2:	b292      	uxth	r2, r2
 8002ba4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f004 fe21 	bl	80077f4 <USB_ReadInterrupts>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bbc:	d002      	beq.n	8002bc4 <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f008 fd60 	bl	800b684 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f004 fe13 	bl	80077f4 <USB_ReadInterrupts>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd4:	2b80      	cmp	r3, #128	; 0x80
 8002bd6:	d13f      	bne.n	8002c58 <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002be4:	b292      	uxth	r2, r2
 8002be6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bea:	b292      	uxth	r2, r2
 8002bec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d12b      	bne.n	8002c52 <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002c06:	b292      	uxth	r2, r2
 8002c08:	f042 0204 	orr.w	r2, r2, #4
 8002c0c:	b292      	uxth	r2, r2
 8002c0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002c1e:	b292      	uxth	r2, r2
 8002c20:	f042 0208 	orr.w	r2, r2, #8
 8002c24:	b292      	uxth	r2, r2
 8002c26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	089b      	lsrs	r3, r3, #2
 8002c3e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002c48:	2101      	movs	r1, #1
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f008 ffaa 	bl	800bba4 <HAL_PCDEx_LPM_Callback>
 8002c50:	e002      	b.n	8002c58 <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f008 fd16 	bl	800b684 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f004 fdc9 	bl	80077f4 <USB_ReadInterrupts>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c6c:	d10e      	bne.n	8002c8c <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002c7a:	b292      	uxth	r2, r2
 8002c7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c80:	b292      	uxth	r2, r2
 8002c82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f008 fccb 	bl	800b622 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f004 fdaf 	bl	80077f4 <USB_ReadInterrupts>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca0:	d10b      	bne.n	8002cba <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002cae:	b292      	uxth	r2, r2
 8002cb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cb4:	b292      	uxth	r2, r2
 8002cb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_PCD_SetAddress+0x1a>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e013      	b.n	8002d04 <HAL_PCD_SetAddress+0x42>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f004 fd3d 	bl	8007774 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	4608      	mov	r0, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	70fb      	strb	r3, [r7, #3]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	803b      	strh	r3, [r7, #0]
 8002d22:	4613      	mov	r3, r2
 8002d24:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0b      	bge.n	8002d4a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8002d32:	78fb      	ldrb	r3, [r7, #3]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	015b      	lsls	r3, r3, #5
 8002d3a:	3328      	adds	r3, #40	; 0x28
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	705a      	strb	r2, [r3, #1]
 8002d48:	e00b      	b.n	8002d62 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	015b      	lsls	r3, r3, #5
 8002d52:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & 0xFU;
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d6e:	883a      	ldrh	r2, [r7, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	78ba      	ldrb	r2, [r7, #2]
 8002d78:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	785b      	ldrb	r3, [r3, #1]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d004      	beq.n	8002d8c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d8c:	78bb      	ldrb	r3, [r7, #2]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d102      	bne.n	8002d98 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_PCD_EP_Open+0x9a>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e00e      	b.n	8002dc4 <HAL_PCD_EP_Open+0xb8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68f9      	ldr	r1, [r7, #12]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f003 fce1 	bl	800677c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return ret;
 8002dc2:	7afb      	ldrb	r3, [r7, #11]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	da0b      	bge.n	8002df8 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	015b      	lsls	r3, r3, #5
 8002de8:	3328      	adds	r3, #40	; 0x28
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	705a      	strb	r2, [r3, #1]
 8002df6:	e00b      	b.n	8002e10 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	015b      	lsls	r3, r3, #5
 8002e00:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	4413      	add	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & 0xFU;
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_PCD_EP_Close+0x5e>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e00e      	b.n	8002e48 <HAL_PCD_EP_Close+0x7c>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68f9      	ldr	r1, [r7, #12]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f003 ff81 	bl	8006d40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8002e60:	7afb      	ldrb	r3, [r7, #11]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	015b      	lsls	r3, r3, #5
 8002e68:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4413      	add	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2200      	movs	r2, #0
 8002e82:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2200      	movs	r2, #0
 8002e88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0xFU;
 8002e8a:	7afb      	ldrb	r3, [r7, #11]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0xFU) == 0U)
 8002e96:	7afb      	ldrb	r3, [r7, #11]
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d106      	bne.n	8002eae <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6979      	ldr	r1, [r7, #20]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f004 f8e0 	bl	800706c <USB_EPStartXfer>
 8002eac:	e005      	b.n	8002eba <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6979      	ldr	r1, [r7, #20]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f004 f8d9 	bl	800706c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	70fb      	strb	r3, [r7, #3]
  return (uint16_t)hpcd->OUT_ep[ep_addr & 0xFU].xfer_count;
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	3312      	adds	r3, #18
 8002eda:	015b      	lsls	r3, r3, #5
 8002edc:	4413      	add	r3, r2
 8002ede:	3304      	adds	r3, #4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	b29b      	uxth	r3, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	460b      	mov	r3, r1
 8002efe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8002f00:	7afb      	ldrb	r3, [r7, #11]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	015b      	lsls	r3, r3, #5
 8002f08:	3328      	adds	r3, #40	; 0x28
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2201      	movs	r2, #1
 8002f26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0xFU;
 8002f28:	7afb      	ldrb	r3, [r7, #11]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0xFU) == 0U)
 8002f34:	7afb      	ldrb	r3, [r7, #11]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6979      	ldr	r1, [r7, #20]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f004 f891 	bl	800706c <USB_EPStartXfer>
 8002f4a:	e005      	b.n	8002f58 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6979      	ldr	r1, [r7, #20]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f004 f88a 	bl	800706c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	f003 020f 	and.w	r2, r3, #15
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d901      	bls.n	8002f80 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e046      	b.n	800300e <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	da0b      	bge.n	8002fa0 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	015b      	lsls	r3, r3, #5
 8002f90:	3328      	adds	r3, #40	; 0x28
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	705a      	strb	r2, [r3, #1]
 8002f9e:	e009      	b.n	8002fb4 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	015b      	lsls	r3, r3, #5
 8002fa4:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	4413      	add	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8002fba:	78fb      	ldrb	r3, [r7, #3]
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_PCD_EP_SetStall+0x72>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e01c      	b.n	800300e <HAL_PCD_EP_SetStall+0xac>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68f9      	ldr	r1, [r7, #12]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f004 faf6 	bl	80075d4 <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d108      	bne.n	8003004 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4610      	mov	r0, r2
 8003000:	f004 fc08 	bl	8007814 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	460b      	mov	r3, r1
 8003020:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003022:	78fb      	ldrb	r3, [r7, #3]
 8003024:	f003 020f 	and.w	r2, r3, #15
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	429a      	cmp	r2, r3
 800302e:	d901      	bls.n	8003034 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e03a      	b.n	80030aa <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003038:	2b00      	cmp	r3, #0
 800303a:	da0b      	bge.n	8003054 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	015b      	lsls	r3, r3, #5
 8003044:	3328      	adds	r3, #40	; 0x28
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	705a      	strb	r2, [r3, #1]
 8003052:	e00b      	b.n	800306c <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	015b      	lsls	r3, r3, #5
 800305c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	4413      	add	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	b2da      	uxtb	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_PCD_EP_ClrStall+0x76>
 8003088:	2302      	movs	r3, #2
 800308a:	e00e      	b.n	80030aa <HAL_PCD_EP_ClrStall+0x94>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68f9      	ldr	r1, [r7, #12]
 800309a:	4618      	mov	r0, r3
 800309c:	f004 fadc 	bl	8007658 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	b089      	sub	sp, #36	; 0x24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030bc:	e25e      	b.n	800357c <PCD_EP_ISR_Handler+0x4c8>
  {
    wIstr = hpcd->Instance->ISTR;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030c6:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80030c8:	8afb      	ldrh	r3, [r7, #22]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80030d2:	7d7b      	ldrb	r3, [r7, #21]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f040 812c 	bne.w	8003332 <PCD_EP_ISR_Handler+0x27e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80030da:	8afb      	ldrh	r3, [r7, #22]
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d14b      	bne.n	800317c <PCD_EP_ISR_Handler+0xc8>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80030f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f4:	b29c      	uxth	r4, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4622      	mov	r2, r4
 80030fc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3328      	adds	r3, #40	; 0x28
 8003102:	613b      	str	r3, [r7, #16]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800310c:	b29b      	uxth	r3, r3
 800310e:	461a      	mov	r2, r3
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	4413      	add	r3, r2
 800311e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	695a      	ldr	r2, [r3, #20]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	441a      	add	r2, r3
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800313a:	2100      	movs	r1, #0
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f008 fa59 	bl	800b5f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 8216 	beq.w	800357c <PCD_EP_ISR_Handler+0x4c8>
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f040 8211 	bne.w	800357c <PCD_EP_ISR_Handler+0x4c8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	b292      	uxth	r2, r2
 800316e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800317a:	e1ff      	b.n	800357c <PCD_EP_ISR_Handler+0x4c8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8003182:	613b      	str	r3, [r7, #16]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	81fb      	strh	r3, [r7, #14]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800318c:	89fb      	ldrh	r3, [r7, #14]
 800318e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003192:	2b00      	cmp	r3, #0
 8003194:	d02f      	beq.n	80031f6 <PCD_EP_ISR_Handler+0x142>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800319e:	b29b      	uxth	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4413      	add	r3, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	4413      	add	r3, r2
 80031b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f503 6186 	add.w	r1, r3, #1072	; 0x430
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	88da      	ldrh	r2, [r3, #6]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	f004 fb6c 	bl	80078ae <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	b29a      	uxth	r2, r3
 80031de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031e2:	4013      	ands	r3, r2
 80031e4:	b29c      	uxth	r4, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4622      	mov	r2, r4
 80031ec:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f008 f9d6 	bl	800b5a0 <HAL_PCD_SetupStageCallback>
 80031f4:	e1c2      	b.n	800357c <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f280 81be 	bge.w	800357c <PCD_EP_ISR_Handler+0x4c8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	b29a      	uxth	r2, r3
 8003208:	f640 738f 	movw	r3, #3983	; 0xf8f
 800320c:	4013      	ands	r3, r2
 800320e:	b29c      	uxth	r4, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4622      	mov	r2, r4
 8003216:	801a      	strh	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003220:	b29b      	uxth	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4413      	add	r3, r2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	4413      	add	r3, r2
 8003232:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 0U)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d011      	beq.n	800326c <PCD_EP_ISR_Handler+0x1b8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	6959      	ldr	r1, [r3, #20]
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	88da      	ldrh	r2, [r3, #6]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	b29b      	uxth	r3, r3
 800325a:	f004 fb28 	bl	80078ae <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	441a      	add	r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	615a      	str	r2, [r3, #20]

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800326c:	2100      	movs	r1, #0
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f008 f9a8 	bl	800b5c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	461c      	mov	r4, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003282:	b29b      	uxth	r3, r3
 8003284:	441c      	add	r4, r3
 8003286:	f204 4306 	addw	r3, r4, #1030	; 0x406
 800328a:	60bb      	str	r3, [r7, #8]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d111      	bne.n	80032b8 <PCD_EP_ISR_Handler+0x204>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	881a      	ldrh	r2, [r3, #0]
 8003298:	f243 33ff 	movw	r3, #13311	; 0x33ff
 800329c:	4013      	ands	r3, r2
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	801a      	strh	r2, [r3, #0]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	801a      	strh	r2, [r3, #0]
 80032b6:	e026      	b.n	8003306 <PCD_EP_ISR_Handler+0x252>
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	2b3d      	cmp	r3, #61	; 0x3d
 80032be:	d813      	bhi.n	80032e8 <PCD_EP_ISR_Handler+0x234>
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	61bb      	str	r3, [r7, #24]
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <PCD_EP_ISR_Handler+0x226>
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	3301      	adds	r3, #1
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	029b      	lsls	r3, r3, #10
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	801a      	strh	r2, [r3, #0]
 80032e6:	e00e      	b.n	8003306 <PCD_EP_ISR_Handler+0x252>
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	61bb      	str	r3, [r7, #24]
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	029b      	lsls	r3, r3, #10
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003300:	b29a      	uxth	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	b29b      	uxth	r3, r3
 800330e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003316:	b29c      	uxth	r4, r3
 8003318:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800331c:	b29c      	uxth	r4, r3
 800331e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003322:	b29c      	uxth	r4, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	4b9b      	ldr	r3, [pc, #620]	; (8003598 <PCD_EP_ISR_Handler+0x4e4>)
 800332a:	4323      	orrs	r3, r4
 800332c:	b29b      	uxth	r3, r3
 800332e:	8013      	strh	r3, [r2, #0]
 8003330:	e124      	b.n	800357c <PCD_EP_ISR_Handler+0x4c8>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	7d7b      	ldrb	r3, [r7, #21]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	81fb      	strh	r3, [r7, #14]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003342:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f280 80c9 	bge.w	80034de <PCD_EP_ISR_Handler+0x42a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	7d7b      	ldrb	r3, [r7, #21]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	b29a      	uxth	r2, r3
 800335c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003360:	4013      	ands	r3, r2
 8003362:	b29c      	uxth	r4, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	7d7b      	ldrb	r3, [r7, #21]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	4622      	mov	r2, r4
 8003372:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003374:	7d7b      	ldrb	r3, [r7, #21]
 8003376:	015b      	lsls	r3, r3, #5
 8003378:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	4413      	add	r3, r2
 8003380:	613b      	str	r3, [r7, #16]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	7b1b      	ldrb	r3, [r3, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d11f      	bne.n	80033ca <PCD_EP_ISR_Handler+0x316>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003392:	b29b      	uxth	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4413      	add	r3, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ae:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80033b0:	8bfb      	ldrh	r3, [r7, #30]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d06e      	beq.n	8003494 <PCD_EP_ISR_Handler+0x3e0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	6959      	ldr	r1, [r3, #20]
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	88da      	ldrh	r2, [r3, #6]
 80033c2:	8bfb      	ldrh	r3, [r7, #30]
 80033c4:	f004 fa73 	bl	80078ae <USB_ReadPMA>
 80033c8:	e064      	b.n	8003494 <PCD_EP_ISR_Handler+0x3e0>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01f      	beq.n	8003424 <PCD_EP_ISR_Handler+0x370>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	4413      	add	r3, r2
 80033fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003408:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800340a:	8bfb      	ldrh	r3, [r7, #30]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d028      	beq.n	8003462 <PCD_EP_ISR_Handler+0x3ae>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	6959      	ldr	r1, [r3, #20]
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	891a      	ldrh	r2, [r3, #8]
 800341c:	8bfb      	ldrh	r3, [r7, #30]
 800341e:	f004 fa46 	bl	80078ae <USB_ReadPMA>
 8003422:	e01e      	b.n	8003462 <PCD_EP_ISR_Handler+0x3ae>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800342c:	b29b      	uxth	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4413      	add	r3, r2
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	4413      	add	r3, r2
 800343e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003448:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800344a:	8bfb      	ldrh	r3, [r7, #30]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <PCD_EP_ISR_Handler+0x3ae>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	6959      	ldr	r1, [r3, #20]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	895a      	ldrh	r2, [r3, #10]
 800345c:	8bfb      	ldrh	r3, [r7, #30]
 800345e:	f004 fa26 	bl	80078ae <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347c:	b29c      	uxth	r4, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	441a      	add	r2, r3
 800348c:	4b43      	ldr	r3, [pc, #268]	; (800359c <PCD_EP_ISR_Handler+0x4e8>)
 800348e:	4323      	orrs	r3, r4
 8003490:	b29b      	uxth	r3, r3
 8003492:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	8bfb      	ldrh	r3, [r7, #30]
 800349a:	441a      	add	r2, r3
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	8bfb      	ldrh	r3, [r7, #30]
 80034a6:	441a      	add	r2, r3
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d004      	beq.n	80034be <PCD_EP_ISR_Handler+0x40a>
 80034b4:	8bfa      	ldrh	r2, [r7, #30]
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d206      	bcs.n	80034cc <PCD_EP_ISR_Handler+0x418>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	4619      	mov	r1, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f008 f87d 	bl	800b5c4 <HAL_PCD_DataOutStageCallback>
 80034ca:	e008      	b.n	80034de <PCD_EP_ISR_Handler+0x42a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	7819      	ldrb	r1, [r3, #0]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff fcb9 	bl	8002e50 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80034de:	89fb      	ldrh	r3, [r7, #14]
 80034e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d049      	beq.n	800357c <PCD_EP_ISR_Handler+0x4c8>
      {
        ep = &hpcd->IN_ep[epindex];
 80034e8:	7d7b      	ldrb	r3, [r7, #21]
 80034ea:	015b      	lsls	r3, r3, #5
 80034ec:	3328      	adds	r3, #40	; 0x28
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	7d7b      	ldrb	r3, [r7, #21]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	b29b      	uxth	r3, r3
 8003504:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350c:	b29c      	uxth	r4, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	7d7b      	ldrb	r3, [r7, #21]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	4622      	mov	r2, r4
 800351c:	801a      	strh	r2, [r3, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003526:	b29b      	uxth	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	4413      	add	r3, r2
 8003538:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	441a      	add	r2, r3
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d106      	bne.n	800356a <PCD_EP_ISR_Handler+0x4b6>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	4619      	mov	r1, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f008 f846 	bl	800b5f4 <HAL_PCD_DataInStageCallback>
 8003568:	e008      	b.n	800357c <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	7819      	ldrb	r1, [r3, #0]
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	695a      	ldr	r2, [r3, #20]
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff fcba 	bl	8002ef0 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003584:	b29b      	uxth	r3, r3
 8003586:	b21b      	sxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	f6ff ad98 	blt.w	80030be <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3724      	adds	r7, #36	; 0x24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd90      	pop	{r4, r7, pc}
 8003598:	ffff8080 	.word	0xffff8080
 800359c:	ffff80c0 	.word	0xffff80c0

080035a0 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	460b      	mov	r3, r1
 80035ac:	817b      	strh	r3, [r7, #10]
 80035ae:	4613      	mov	r3, r2
 80035b0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80035b2:	897b      	ldrh	r3, [r7, #10]
 80035b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d008      	beq.n	80035d0 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80035be:	897b      	ldrh	r3, [r7, #10]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	015b      	lsls	r3, r3, #5
 80035c6:	3328      	adds	r3, #40	; 0x28
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4413      	add	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	e006      	b.n	80035de <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035d0:	897b      	ldrh	r3, [r7, #10]
 80035d2:	015b      	lsls	r3, r3, #5
 80035d4:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80035de:	893b      	ldrh	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d107      	bne.n	80035f4 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2200      	movs	r2, #0
 80035e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	80da      	strh	r2, [r3, #6]
 80035f2:	e00b      	b.n	800360c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2201      	movs	r2, #1
 80035f8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	b29a      	uxth	r2, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 800361a:	b480      	push	{r7}
 800361c:	b085      	sub	sp, #20
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003636:	b29b      	uxth	r3, r3
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800364a:	b29b      	uxth	r3, r3
 800364c:	f043 0302 	orr.w	r3, r3, #2
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003666:	b480      	push	{r7}
 8003668:	b085      	sub	sp, #20
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
  hpcd->LPM_State = LPM_L0;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800368a:	b29b      	uxth	r3, r3
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f043 0302 	orr.w	r3, r3, #2
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
	...

080036bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036c0:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40007000 	.word	0x40007000

080036d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e6:	d130      	bne.n	800374a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036e8:	4b23      	ldr	r3, [pc, #140]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f4:	d038      	beq.n	8003768 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036f6:	4a20      	ldr	r2, [pc, #128]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f8:	4b1f      	ldr	r3, [pc, #124]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003700:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003704:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003706:	4b1d      	ldr	r3, [pc, #116]	; (800377c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2232      	movs	r2, #50	; 0x32
 800370c:	fb02 f303 	mul.w	r3, r2, r3
 8003710:	4a1b      	ldr	r2, [pc, #108]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0c9b      	lsrs	r3, r3, #18
 8003718:	3301      	adds	r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800371c:	e002      	b.n	8003724 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3b01      	subs	r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003724:	4b14      	ldr	r3, [pc, #80]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003730:	d102      	bne.n	8003738 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f2      	bne.n	800371e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003744:	d110      	bne.n	8003768 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e00f      	b.n	800376a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800374a:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003756:	d007      	beq.n	8003768 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003758:	4a07      	ldr	r2, [pc, #28]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800375a:	4b07      	ldr	r3, [pc, #28]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003766:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40007000 	.word	0x40007000
 800377c:	200008f0 	.word	0x200008f0
 8003780:	431bde83 	.word	0x431bde83

08003784 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003788:	4a05      	ldr	r2, [pc, #20]	; (80037a0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800378a:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003792:	6053      	str	r3, [r2, #4]
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40007000 	.word	0x40007000

080037a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_oscsource;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e395      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037b6:	4ba3      	ldr	r3, [pc, #652]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037c0:	4ba0      	ldr	r3, [pc, #640]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 80df 	beq.w	8003996 <HAL_RCC_OscConfig+0x1f2>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <HAL_RCC_OscConfig+0x4a>
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b0c      	cmp	r3, #12
 80037e2:	f040 8086 	bne.w	80038f2 <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	f040 8082 	bne.w	80038f2 <HAL_RCC_OscConfig+0x14e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037ee:	4b95      	ldr	r3, [pc, #596]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <HAL_RCC_OscConfig+0x62>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e36d      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1a      	ldr	r2, [r3, #32]
 800380a:	4b8e      	ldr	r3, [pc, #568]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d004      	beq.n	8003820 <HAL_RCC_OscConfig+0x7c>
 8003816:	4b8b      	ldr	r3, [pc, #556]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800381e:	e005      	b.n	800382c <HAL_RCC_OscConfig+0x88>
 8003820:	4b88      	ldr	r3, [pc, #544]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800382c:	429a      	cmp	r2, r3
 800382e:	d923      	bls.n	8003878 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fd0d 	bl	8004254 <RCC_SetFlashLatencyFromMSIRange>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e34e      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003844:	4a7f      	ldr	r2, [pc, #508]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003846:	4b7f      	ldr	r3, [pc, #508]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f043 0308 	orr.w	r3, r3, #8
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	497c      	ldr	r1, [pc, #496]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003852:	4b7c      	ldr	r3, [pc, #496]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	4313      	orrs	r3, r2
 8003860:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003862:	4978      	ldr	r1, [pc, #480]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003864:	4b77      	ldr	r3, [pc, #476]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	021b      	lsls	r3, r3, #8
 8003872:	4313      	orrs	r3, r2
 8003874:	604b      	str	r3, [r1, #4]
 8003876:	e022      	b.n	80038be <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003878:	4a72      	ldr	r2, [pc, #456]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 800387a:	4b72      	ldr	r3, [pc, #456]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f043 0308 	orr.w	r3, r3, #8
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	496f      	ldr	r1, [pc, #444]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003886:	4b6f      	ldr	r3, [pc, #444]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	4313      	orrs	r3, r2
 8003894:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003896:	496b      	ldr	r1, [pc, #428]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003898:	4b6a      	ldr	r3, [pc, #424]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	021b      	lsls	r3, r3, #8
 80038a6:	4313      	orrs	r3, r2
 80038a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fcd0 	bl	8004254 <RCC_SetFlashLatencyFromMSIRange>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e311      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038be:	f000 fbf5 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 80038c2:	4601      	mov	r1, r0
 80038c4:	4b5f      	ldr	r3, [pc, #380]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	4a5e      	ldr	r2, [pc, #376]	; (8003a48 <HAL_RCC_OscConfig+0x2a4>)
 80038d0:	5cd3      	ldrb	r3, [r2, r3]
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	fa21 f303 	lsr.w	r3, r1, r3
 80038da:	4a5c      	ldr	r2, [pc, #368]	; (8003a4c <HAL_RCC_OscConfig+0x2a8>)
 80038dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80038de:	2000      	movs	r0, #0
 80038e0:	f7fd ffb0 	bl	8001844 <HAL_InitTick>
 80038e4:	4603      	mov	r3, r0
 80038e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d052      	beq.n	8003994 <HAL_RCC_OscConfig+0x1f0>
        {
          return status;
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	e2f7      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d032      	beq.n	8003960 <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038fa:	4a52      	ldr	r2, [pc, #328]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 80038fc:	4b51      	ldr	r3, [pc, #324]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003906:	f7fd ffcf 	bl	80018a8 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800390e:	f7fd ffcb 	bl	80018a8 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e2e0      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003920:	4b48      	ldr	r3, [pc, #288]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x16a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800392c:	4a45      	ldr	r2, [pc, #276]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 800392e:	4b45      	ldr	r3, [pc, #276]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f043 0308 	orr.w	r3, r3, #8
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	4942      	ldr	r1, [pc, #264]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 800393a:	4b42      	ldr	r3, [pc, #264]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800394a:	493e      	ldr	r1, [pc, #248]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 800394c:	4b3d      	ldr	r3, [pc, #244]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	4313      	orrs	r3, r2
 800395c:	604b      	str	r3, [r1, #4]
 800395e:	e01a      	b.n	8003996 <HAL_RCC_OscConfig+0x1f2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003960:	4a38      	ldr	r2, [pc, #224]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003962:	4b38      	ldr	r3, [pc, #224]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 0301 	bic.w	r3, r3, #1
 800396a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800396c:	f7fd ff9c 	bl	80018a8 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003974:	f7fd ff98 	bl	80018a8 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e2ad      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003986:	4b2f      	ldr	r3, [pc, #188]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x1d0>
 8003992:	e000      	b.n	8003996 <HAL_RCC_OscConfig+0x1f2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003994:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d072      	beq.n	8003a88 <HAL_RCC_OscConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d005      	beq.n	80039b4 <HAL_RCC_OscConfig+0x210>
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2b0c      	cmp	r3, #12
 80039ac:	d10e      	bne.n	80039cc <HAL_RCC_OscConfig+0x228>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d10b      	bne.n	80039cc <HAL_RCC_OscConfig+0x228>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b4:	4b23      	ldr	r3, [pc, #140]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d062      	beq.n	8003a86 <HAL_RCC_OscConfig+0x2e2>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d15e      	bne.n	8003a86 <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e28a      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d4:	d106      	bne.n	80039e4 <HAL_RCC_OscConfig+0x240>
 80039d6:	4a1b      	ldr	r2, [pc, #108]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 80039d8:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e01d      	b.n	8003a20 <HAL_RCC_OscConfig+0x27c>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x264>
 80039ee:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 80039f0:	4b14      	ldr	r3, [pc, #80]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e00b      	b.n	8003a20 <HAL_RCC_OscConfig+0x27c>
 8003a08:	4a0e      	ldr	r2, [pc, #56]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003a0a:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003a16:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_RCC_OscConfig+0x2a0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d01a      	beq.n	8003a5e <HAL_RCC_OscConfig+0x2ba>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fd ff3e 	bl	80018a8 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a2e:	e00f      	b.n	8003a50 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a30:	f7fd ff3a 	bl	80018a8 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	; 0x64
 8003a3c:	d908      	bls.n	8003a50 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e24f      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
 8003a48:	0800bf1c 	.word	0x0800bf1c
 8003a4c:	200008f0 	.word	0x200008f0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a50:	4bae      	ldr	r3, [pc, #696]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0e9      	beq.n	8003a30 <HAL_RCC_OscConfig+0x28c>
 8003a5c:	e014      	b.n	8003a88 <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5e:	f7fd ff23 	bl	80018a8 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x2d4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a66:	f7fd ff1f 	bl	80018a8 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b64      	cmp	r3, #100	; 0x64
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e234      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a78:	4ba4      	ldr	r3, [pc, #656]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1f0      	bne.n	8003a66 <HAL_RCC_OscConfig+0x2c2>
 8003a84:	e000      	b.n	8003a88 <HAL_RCC_OscConfig+0x2e4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a86:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d060      	beq.n	8003b56 <HAL_RCC_OscConfig+0x3b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d005      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x302>
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b0c      	cmp	r3, #12
 8003a9e:	d119      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d116      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x330>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa6:	4b99      	ldr	r3, [pc, #612]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <HAL_RCC_OscConfig+0x31a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e211      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abe:	4993      	ldr	r1, [pc, #588]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003ac0:	4b92      	ldr	r3, [pc, #584]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	061b      	lsls	r3, r3, #24
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ad2:	e040      	b.n	8003b56 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d023      	beq.n	8003b24 <HAL_RCC_OscConfig+0x380>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003adc:	4a8b      	ldr	r2, [pc, #556]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003ade:	4b8b      	ldr	r3, [pc, #556]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae8:	f7fd fede 	bl	80018a8 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af0:	f7fd feda 	bl	80018a8 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e1ef      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b02:	4b82      	ldr	r3, [pc, #520]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCC_OscConfig+0x34c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0e:	497f      	ldr	r1, [pc, #508]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003b10:	4b7e      	ldr	r3, [pc, #504]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	061b      	lsls	r3, r3, #24
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	604b      	str	r3, [r1, #4]
 8003b22:	e018      	b.n	8003b56 <HAL_RCC_OscConfig+0x3b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b24:	4a79      	ldr	r2, [pc, #484]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003b26:	4b79      	ldr	r3, [pc, #484]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fd feba 	bl	80018a8 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b38:	f7fd feb6 	bl	80018a8 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e1cb      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b4a:	4b70      	ldr	r3, [pc, #448]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d03c      	beq.n	8003bdc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d01c      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x400>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b6a:	4a68      	ldr	r2, [pc, #416]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003b6c:	4b67      	ldr	r3, [pc, #412]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7a:	f7fd fe95 	bl	80018a8 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b82:	f7fd fe91 	bl	80018a8 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e1a6      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b94:	4b5d      	ldr	r3, [pc, #372]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0ef      	beq.n	8003b82 <HAL_RCC_OscConfig+0x3de>
 8003ba2:	e01b      	b.n	8003bdc <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba4:	4a59      	ldr	r2, [pc, #356]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003ba6:	4b59      	ldr	r3, [pc, #356]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bac:	f023 0301 	bic.w	r3, r3, #1
 8003bb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb4:	f7fd fe78 	bl	80018a8 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bbc:	f7fd fe74 	bl	80018a8 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e189      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bce:	4b4f      	ldr	r3, [pc, #316]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ef      	bne.n	8003bbc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80a5 	beq.w	8003d34 <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bea:	2300      	movs	r3, #0
 8003bec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bee:	4b47      	ldr	r3, [pc, #284]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10d      	bne.n	8003c16 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfa:	4a44      	ldr	r2, [pc, #272]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003bfc:	4b43      	ldr	r3, [pc, #268]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c04:	6593      	str	r3, [r2, #88]	; 0x58
 8003c06:	4b41      	ldr	r3, [pc, #260]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c12:	2301      	movs	r3, #1
 8003c14:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c16:	4b3e      	ldr	r3, [pc, #248]	; (8003d10 <HAL_RCC_OscConfig+0x56c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d118      	bne.n	8003c54 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c22:	4a3b      	ldr	r2, [pc, #236]	; (8003d10 <HAL_RCC_OscConfig+0x56c>)
 8003c24:	4b3a      	ldr	r3, [pc, #232]	; (8003d10 <HAL_RCC_OscConfig+0x56c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2e:	f7fd fe3b 	bl	80018a8 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c36:	f7fd fe37 	bl	80018a8 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e14c      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c48:	4b31      	ldr	r3, [pc, #196]	; (8003d10 <HAL_RCC_OscConfig+0x56c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x492>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d108      	bne.n	8003c6e <HAL_RCC_OscConfig+0x4ca>
 8003c5c:	4a2b      	ldr	r2, [pc, #172]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003c5e:	4b2b      	ldr	r3, [pc, #172]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c6c:	e024      	b.n	8003cb8 <HAL_RCC_OscConfig+0x514>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b05      	cmp	r3, #5
 8003c74:	d110      	bne.n	8003c98 <HAL_RCC_OscConfig+0x4f4>
 8003c76:	4a25      	ldr	r2, [pc, #148]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003c78:	4b24      	ldr	r3, [pc, #144]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	f043 0304 	orr.w	r3, r3, #4
 8003c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c86:	4a21      	ldr	r2, [pc, #132]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003c88:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c96:	e00f      	b.n	8003cb8 <HAL_RCC_OscConfig+0x514>
 8003c98:	4a1c      	ldr	r2, [pc, #112]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003c9a:	4b1c      	ldr	r3, [pc, #112]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ca8:	4a18      	ldr	r2, [pc, #96]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003caa:	4b18      	ldr	r3, [pc, #96]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb0:	f023 0304 	bic.w	r3, r3, #4
 8003cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d016      	beq.n	8003cee <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7fd fdf2 	bl	80018a8 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc8:	f7fd fdee 	bl	80018a8 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e101      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cde:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <HAL_RCC_OscConfig+0x568>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ed      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x524>
 8003cec:	e019      	b.n	8003d22 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cee:	f7fd fddb 	bl	80018a8 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cf4:	e00e      	b.n	8003d14 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7fd fdd7 	bl	80018a8 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d905      	bls.n	8003d14 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e0ea      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d14:	4b75      	ldr	r3, [pc, #468]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e9      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x552>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d22:	7ffb      	ldrb	r3, [r7, #31]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d105      	bne.n	8003d34 <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d28:	4a70      	ldr	r2, [pc, #448]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003d2a:	4b70      	ldr	r3, [pc, #448]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d03c      	beq.n	8003dba <HAL_RCC_OscConfig+0x616>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01c      	beq.n	8003d82 <HAL_RCC_OscConfig+0x5de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d48:	4a68      	ldr	r2, [pc, #416]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003d4a:	4b68      	ldr	r3, [pc, #416]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003d4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d58:	f7fd fda6 	bl	80018a8 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x5ce>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d60:	f7fd fda2 	bl	80018a8 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e0b7      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d72:	4b5e      	ldr	r3, [pc, #376]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003d74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0ef      	beq.n	8003d60 <HAL_RCC_OscConfig+0x5bc>
 8003d80:	e01b      	b.n	8003dba <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d82:	4a5a      	ldr	r2, [pc, #360]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003d84:	4b59      	ldr	r3, [pc, #356]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003d86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d8a:	f023 0301 	bic.w	r3, r3, #1
 8003d8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d92:	f7fd fd89 	bl	80018a8 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d9a:	f7fd fd85 	bl	80018a8 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e09a      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dac:	4b4f      	ldr	r3, [pc, #316]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003dae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1ef      	bne.n	8003d9a <HAL_RCC_OscConfig+0x5f6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 808e 	beq.w	8003ee0 <HAL_RCC_OscConfig+0x73c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b0c      	cmp	r3, #12
 8003dc8:	f000 8088 	beq.w	8003edc <HAL_RCC_OscConfig+0x738>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d155      	bne.n	8003e80 <HAL_RCC_OscConfig+0x6dc>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd4:	4a45      	ldr	r2, [pc, #276]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003dd6:	4b45      	ldr	r3, [pc, #276]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fd fd62 	bl	80018a8 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fd fd5e 	bl	80018a8 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e073      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dfa:	4b3c      	ldr	r3, [pc, #240]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x644>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e06:	4939      	ldr	r1, [pc, #228]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	011a      	lsls	r2, r3, #4
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e14:	021b      	lsls	r3, r3, #8
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e22:	085b      	lsrs	r3, r3, #1
 8003e24:	3b01      	subs	r3, #1
 8003e26:	055b      	lsls	r3, r3, #21
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	085b      	lsrs	r3, r3, #1
 8003e30:	3b01      	subs	r3, #1
 8003e32:	065b      	lsls	r3, r3, #25
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	06db      	lsls	r3, r3, #27
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e40:	4a2a      	ldr	r2, [pc, #168]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003e42:	4b2a      	ldr	r3, [pc, #168]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e4c:	4a27      	ldr	r2, [pc, #156]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003e4e:	4b27      	ldr	r3, [pc, #156]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fd fd26 	bl	80018a8 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x6ce>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e60:	f7fd fd22 	bl	80018a8 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x6ce>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e037      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e72:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x6bc>
 8003e7e:	e02f      	b.n	8003ee0 <HAL_RCC_OscConfig+0x73c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e80:	4a1a      	ldr	r2, [pc, #104]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003e82:	4b1a      	ldr	r3, [pc, #104]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e8a:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e8c:	4b17      	ldr	r3, [pc, #92]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d105      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x700>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003e98:	4a14      	ldr	r2, [pc, #80]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003e9a:	4b14      	ldr	r3, [pc, #80]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f023 0303 	bic.w	r3, r3, #3
 8003ea2:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ea4:	4a11      	ldr	r2, [pc, #68]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003ea6:	4b11      	ldr	r3, [pc, #68]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb2:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fd fcf8 	bl	80018a8 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x72a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7fd fcf4 	bl	80018a8 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x72a>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e009      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ece:	4b07      	ldr	r3, [pc, #28]	; (8003eec <HAL_RCC_OscConfig+0x748>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x718>
 8003eda:	e001      	b.n	8003ee0 <HAL_RCC_OscConfig+0x73c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <HAL_RCC_OscConfig+0x73e>
    }
  }
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3720      	adds	r7, #32
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40021000 	.word	0x40021000

08003ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0c6      	b.n	8004092 <HAL_RCC_ClockConfig+0x1a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f04:	4b65      	ldr	r3, [pc, #404]	; (800409c <HAL_RCC_ClockConfig+0x1ac>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0207 	and.w	r2, r3, #7
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d210      	bcs.n	8003f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f12:	4962      	ldr	r1, [pc, #392]	; (800409c <HAL_RCC_ClockConfig+0x1ac>)
 8003f14:	4b61      	ldr	r3, [pc, #388]	; (800409c <HAL_RCC_ClockConfig+0x1ac>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f023 0207 	bic.w	r2, r3, #7
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f22:	4b5e      	ldr	r3, [pc, #376]	; (800409c <HAL_RCC_ClockConfig+0x1ac>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0207 	and.w	r2, r3, #7
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0ae      	b.n	8004092 <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d04c      	beq.n	8003fda <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d107      	bne.n	8003f58 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f48:	4b55      	ldr	r3, [pc, #340]	; (80040a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d121      	bne.n	8003f98 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e09c      	b.n	8004092 <HAL_RCC_ClockConfig+0x1a2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d107      	bne.n	8003f70 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f60:	4b4f      	ldr	r3, [pc, #316]	; (80040a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d115      	bne.n	8003f98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e090      	b.n	8004092 <HAL_RCC_ClockConfig+0x1a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d107      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f78:	4b49      	ldr	r3, [pc, #292]	; (80040a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d109      	bne.n	8003f98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e084      	b.n	8004092 <HAL_RCC_ClockConfig+0x1a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f88:	4b45      	ldr	r3, [pc, #276]	; (80040a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e07c      	b.n	8004092 <HAL_RCC_ClockConfig+0x1a2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f98:	4941      	ldr	r1, [pc, #260]	; (80040a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f9a:	4b41      	ldr	r3, [pc, #260]	; (80040a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f023 0203 	bic.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003faa:	f7fd fc7d 	bl	80018a8 <HAL_GetTick>
 8003fae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb0:	e00a      	b.n	8003fc8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb2:	f7fd fc79 	bl	80018a8 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e064      	b.n	8004092 <HAL_RCC_ClockConfig+0x1a2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc8:	4b35      	ldr	r3, [pc, #212]	; (80040a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 020c 	and.w	r2, r3, #12
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d1eb      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe6:	492e      	ldr	r1, [pc, #184]	; (80040a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003fe8:	4b2d      	ldr	r3, [pc, #180]	; (80040a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff8:	4b28      	ldr	r3, [pc, #160]	; (800409c <HAL_RCC_ClockConfig+0x1ac>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0207 	and.w	r2, r3, #7
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d910      	bls.n	8004028 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004006:	4925      	ldr	r1, [pc, #148]	; (800409c <HAL_RCC_ClockConfig+0x1ac>)
 8004008:	4b24      	ldr	r3, [pc, #144]	; (800409c <HAL_RCC_ClockConfig+0x1ac>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f023 0207 	bic.w	r2, r3, #7
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	4313      	orrs	r3, r2
 8004014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004016:	4b21      	ldr	r3, [pc, #132]	; (800409c <HAL_RCC_ClockConfig+0x1ac>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0207 	and.w	r2, r3, #7
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d001      	beq.n	8004028 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e034      	b.n	8004092 <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d008      	beq.n	8004046 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004034:	491a      	ldr	r1, [pc, #104]	; (80040a0 <HAL_RCC_ClockConfig+0x1b0>)
 8004036:	4b1a      	ldr	r3, [pc, #104]	; (80040a0 <HAL_RCC_ClockConfig+0x1b0>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d009      	beq.n	8004066 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004052:	4913      	ldr	r1, [pc, #76]	; (80040a0 <HAL_RCC_ClockConfig+0x1b0>)
 8004054:	4b12      	ldr	r3, [pc, #72]	; (80040a0 <HAL_RCC_ClockConfig+0x1b0>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4313      	orrs	r3, r2
 8004064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004066:	f000 f821 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 800406a:	4601      	mov	r1, r0
 800406c:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <HAL_RCC_ClockConfig+0x1b0>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	091b      	lsrs	r3, r3, #4
 8004072:	f003 030f 	and.w	r3, r3, #15
 8004076:	4a0b      	ldr	r2, [pc, #44]	; (80040a4 <HAL_RCC_ClockConfig+0x1b4>)
 8004078:	5cd3      	ldrb	r3, [r2, r3]
 800407a:	f003 031f 	and.w	r3, r3, #31
 800407e:	fa21 f303 	lsr.w	r3, r1, r3
 8004082:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8004086:	2000      	movs	r0, #0
 8004088:	f7fd fbdc 	bl	8001844 <HAL_InitTick>
 800408c:	4603      	mov	r3, r0
 800408e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004090:	7afb      	ldrb	r3, [r7, #11]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40022000 	.word	0x40022000
 80040a0:	40021000 	.word	0x40021000
 80040a4:	0800bf1c 	.word	0x0800bf1c
 80040a8:	200008f0 	.word	0x200008f0

080040ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b089      	sub	sp, #36	; 0x24
 80040b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ba:	4b46      	ldr	r3, [pc, #280]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x128>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040c4:	4b43      	ldr	r3, [pc, #268]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x128>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_GetSysClockFreq+0x34>
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2b0c      	cmp	r3, #12
 80040d8:	d121      	bne.n	800411e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d11e      	bne.n	800411e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040e0:	4b3c      	ldr	r3, [pc, #240]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x128>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d107      	bne.n	80040fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040ec:	4b39      	ldr	r3, [pc, #228]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x128>)
 80040ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f2:	0a1b      	lsrs	r3, r3, #8
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	e005      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040fc:	4b35      	ldr	r3, [pc, #212]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x128>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	091b      	lsrs	r3, r3, #4
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004108:	4a33      	ldr	r2, [pc, #204]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004110:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10d      	bne.n	8004134 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b04      	cmp	r3, #4
 8004122:	d102      	bne.n	800412a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004124:	4b2d      	ldr	r3, [pc, #180]	; (80041dc <HAL_RCC_GetSysClockFreq+0x130>)
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	e004      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2b08      	cmp	r3, #8
 800412e:	d101      	bne.n	8004134 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004130:	4b2b      	ldr	r3, [pc, #172]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x134>)
 8004132:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b0c      	cmp	r3, #12
 8004138:	d145      	bne.n	80041c6 <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800413a:	4b26      	ldr	r3, [pc, #152]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x128>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004144:	4b23      	ldr	r3, [pc, #140]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x128>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	3301      	adds	r3, #1
 8004150:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b02      	cmp	r3, #2
 8004156:	d002      	beq.n	800415e <HAL_RCC_GetSysClockFreq+0xb2>
 8004158:	2b03      	cmp	r3, #3
 800415a:	d00d      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0xcc>
 800415c:	e019      	b.n	8004192 <HAL_RCC_GetSysClockFreq+0xe6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800415e:	4a1f      	ldr	r2, [pc, #124]	; (80041dc <HAL_RCC_GetSysClockFreq+0x130>)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x128>)
 8004168:	68d2      	ldr	r2, [r2, #12]
 800416a:	0a12      	lsrs	r2, r2, #8
 800416c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004170:	fb02 f303 	mul.w	r3, r2, r3
 8004174:	617b      	str	r3, [r7, #20]
      break;
 8004176:	e019      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004178:	4a19      	ldr	r2, [pc, #100]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x134>)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	4a14      	ldr	r2, [pc, #80]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x128>)
 8004182:	68d2      	ldr	r2, [r2, #12]
 8004184:	0a12      	lsrs	r2, r2, #8
 8004186:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800418a:	fb02 f303 	mul.w	r3, r2, r3
 800418e:	617b      	str	r3, [r7, #20]
      break;
 8004190:	e00c      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	fbb2 f3f3 	udiv	r3, r2, r3
 800419a:	4a0e      	ldr	r2, [pc, #56]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x128>)
 800419c:	68d2      	ldr	r2, [r2, #12]
 800419e:	0a12      	lsrs	r2, r2, #8
 80041a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041a4:	fb02 f303 	mul.w	r3, r2, r3
 80041a8:	617b      	str	r3, [r7, #20]
      break;
 80041aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041ac:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x128>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	0e5b      	lsrs	r3, r3, #25
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	3301      	adds	r3, #1
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco/pllr;
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041c6:	69bb      	ldr	r3, [r7, #24]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3724      	adds	r7, #36	; 0x24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	40021000 	.word	0x40021000
 80041d8:	0800bf34 	.word	0x0800bf34
 80041dc:	00f42400 	.word	0x00f42400
 80041e0:	007a1200 	.word	0x007a1200

080041e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e8:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ea:	681b      	ldr	r3, [r3, #0]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	200008f0 	.word	0x200008f0

080041fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004200:	f7ff fff0 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 8004204:	4601      	mov	r1, r0
 8004206:	4b06      	ldr	r3, [pc, #24]	; (8004220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	0a1b      	lsrs	r3, r3, #8
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	4a04      	ldr	r2, [pc, #16]	; (8004224 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004212:	5cd3      	ldrb	r3, [r2, r3]
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	fa21 f303 	lsr.w	r3, r1, r3
}
 800421c:	4618      	mov	r0, r3
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40021000 	.word	0x40021000
 8004224:	0800bf2c 	.word	0x0800bf2c

08004228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800422c:	f7ff ffda 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 8004230:	4601      	mov	r1, r0
 8004232:	4b06      	ldr	r3, [pc, #24]	; (800424c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	0adb      	lsrs	r3, r3, #11
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	4a04      	ldr	r2, [pc, #16]	; (8004250 <HAL_RCC_GetPCLK2Freq+0x28>)
 800423e:	5cd3      	ldrb	r3, [r2, r3]
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40021000 	.word	0x40021000
 8004250:	0800bf2c 	.word	0x0800bf2c

08004254 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800425c:	2300      	movs	r3, #0
 800425e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004260:	4b2a      	ldr	r3, [pc, #168]	; (800430c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800426c:	f7ff fa26 	bl	80036bc <HAL_PWREx_GetVoltageRange>
 8004270:	6178      	str	r0, [r7, #20]
 8004272:	e014      	b.n	800429e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004274:	4a25      	ldr	r2, [pc, #148]	; (800430c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004276:	4b25      	ldr	r3, [pc, #148]	; (800430c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800427e:	6593      	str	r3, [r2, #88]	; 0x58
 8004280:	4b22      	ldr	r3, [pc, #136]	; (800430c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800428c:	f7ff fa16 	bl	80036bc <HAL_PWREx_GetVoltageRange>
 8004290:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004292:	4a1e      	ldr	r2, [pc, #120]	; (800430c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004294:	4b1d      	ldr	r3, [pc, #116]	; (800430c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a4:	d10b      	bne.n	80042be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b80      	cmp	r3, #128	; 0x80
 80042aa:	d919      	bls.n	80042e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2ba0      	cmp	r3, #160	; 0xa0
 80042b0:	d902      	bls.n	80042b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042b2:	2302      	movs	r3, #2
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	e013      	b.n	80042e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042b8:	2301      	movs	r3, #1
 80042ba:	613b      	str	r3, [r7, #16]
 80042bc:	e010      	b.n	80042e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b80      	cmp	r3, #128	; 0x80
 80042c2:	d902      	bls.n	80042ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042c4:	2303      	movs	r3, #3
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	e00a      	b.n	80042e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b80      	cmp	r3, #128	; 0x80
 80042ce:	d102      	bne.n	80042d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042d0:	2302      	movs	r3, #2
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	e004      	b.n	80042e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b70      	cmp	r3, #112	; 0x70
 80042da:	d101      	bne.n	80042e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042dc:	2301      	movs	r3, #1
 80042de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042e0:	490b      	ldr	r1, [pc, #44]	; (8004310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f023 0207 	bic.w	r2, r3, #7
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042f0:	4b07      	ldr	r3, [pc, #28]	; (8004310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0207 	and.w	r2, r3, #7
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d001      	beq.n	8004302 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40021000 	.word	0x40021000
 8004310:	40022000 	.word	0x40022000

08004314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800431c:	2300      	movs	r3, #0
 800431e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004320:	2300      	movs	r3, #0
 8004322:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800432c:	2b00      	cmp	r3, #0
 800432e:	d02f      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004334:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004338:	d005      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800433a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800433e:	d015      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d007      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004344:	e00f      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004346:	4a5d      	ldr	r2, [pc, #372]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004348:	4b5c      	ldr	r3, [pc, #368]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004350:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004352:	e00c      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3304      	adds	r3, #4
 8004358:	2100      	movs	r1, #0
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fa44 	bl	80047e8 <RCCEx_PLLSAI1_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004364:	e003      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	74fb      	strb	r3, [r7, #19]
      break;
 800436a:	e000      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 800436c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800436e:	7cfb      	ldrb	r3, [r7, #19]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10b      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004374:	4951      	ldr	r1, [pc, #324]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004376:	4b51      	ldr	r3, [pc, #324]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800438a:	e001      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 809e 	beq.w	80044da <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800439e:	2300      	movs	r3, #0
 80043a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043a2:	4b46      	ldr	r3, [pc, #280]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80043b2:	2300      	movs	r3, #0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00d      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b8:	4a40      	ldr	r2, [pc, #256]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80043ba:	4b40      	ldr	r3, [pc, #256]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c2:	6593      	str	r3, [r2, #88]	; 0x58
 80043c4:	4b3d      	ldr	r3, [pc, #244]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043d0:	2301      	movs	r3, #1
 80043d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043d4:	4a3a      	ldr	r2, [pc, #232]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043d6:	4b3a      	ldr	r3, [pc, #232]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043e0:	f7fd fa62 	bl	80018a8 <HAL_GetTick>
 80043e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043e6:	e009      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e8:	f7fd fa5e 	bl	80018a8 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d902      	bls.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	74fb      	strb	r3, [r7, #19]
        break;
 80043fa:	e005      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043fc:	4b30      	ldr	r3, [pc, #192]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0ef      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d15a      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800440e:	4b2b      	ldr	r3, [pc, #172]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004418:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01e      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	429a      	cmp	r2, r3
 8004428:	d019      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800442a:	4b24      	ldr	r3, [pc, #144]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800442c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004434:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004436:	4a21      	ldr	r2, [pc, #132]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004438:	4b20      	ldr	r3, [pc, #128]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004446:	4a1d      	ldr	r2, [pc, #116]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004448:	4b1c      	ldr	r3, [pc, #112]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004452:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004456:	4a19      	ldr	r2, [pc, #100]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d016      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004468:	f7fd fa1e 	bl	80018a8 <HAL_GetTick>
 800446c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800446e:	e00b      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004470:	f7fd fa1a 	bl	80018a8 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f241 3288 	movw	r2, #5000	; 0x1388
 800447e:	4293      	cmp	r3, r2
 8004480:	d902      	bls.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	74fb      	strb	r3, [r7, #19]
            break;
 8004486:	e006      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004488:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0ec      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8004496:	7cfb      	ldrb	r3, [r7, #19]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10b      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800449c:	4907      	ldr	r1, [pc, #28]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800449e:	4b07      	ldr	r3, [pc, #28]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044b2:	e009      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044b4:	7cfb      	ldrb	r3, [r7, #19]
 80044b6:	74bb      	strb	r3, [r7, #18]
 80044b8:	e006      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c4:	7cfb      	ldrb	r3, [r7, #19]
 80044c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044c8:	7c7b      	ldrb	r3, [r7, #17]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d105      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ce:	4a9e      	ldr	r2, [pc, #632]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80044d0:	4b9d      	ldr	r3, [pc, #628]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80044d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044e6:	4998      	ldr	r1, [pc, #608]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80044e8:	4b97      	ldr	r3, [pc, #604]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ee:	f023 0203 	bic.w	r2, r3, #3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004508:	498f      	ldr	r1, [pc, #572]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800450a:	4b8f      	ldr	r3, [pc, #572]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004510:	f023 020c 	bic.w	r2, r3, #12
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800452a:	4987      	ldr	r1, [pc, #540]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800452c:	4b86      	ldr	r3, [pc, #536]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004532:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800454c:	497e      	ldr	r1, [pc, #504]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800454e:	4b7e      	ldr	r3, [pc, #504]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004554:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800456e:	4976      	ldr	r1, [pc, #472]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004570:	4b75      	ldr	r3, [pc, #468]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004590:	496d      	ldr	r1, [pc, #436]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004592:	4b6d      	ldr	r3, [pc, #436]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004598:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045b2:	4965      	ldr	r1, [pc, #404]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80045b4:	4b64      	ldr	r3, [pc, #400]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045d4:	495c      	ldr	r1, [pc, #368]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80045d6:	4b5c      	ldr	r3, [pc, #368]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045f6:	4954      	ldr	r1, [pc, #336]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80045f8:	4b53      	ldr	r3, [pc, #332]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004618:	494b      	ldr	r1, [pc, #300]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800461a:	4b4b      	ldr	r3, [pc, #300]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004620:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800463a:	4943      	ldr	r1, [pc, #268]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800463c:	4b42      	ldr	r3, [pc, #264]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800463e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004642:	f023 0203 	bic.w	r2, r3, #3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d028      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800465c:	493a      	ldr	r1, [pc, #232]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800465e:	4b3a      	ldr	r3, [pc, #232]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004664:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004676:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800467a:	d106      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800467c:	4a32      	ldr	r2, [pc, #200]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800467e:	4b32      	ldr	r3, [pc, #200]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004686:	60d3      	str	r3, [r2, #12]
 8004688:	e011      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004692:	d10c      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3304      	adds	r3, #4
 8004698:	2101      	movs	r1, #1
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f8a4 	bl	80047e8 <RCCEx_PLLSAI1_Config>
 80046a0:	4603      	mov	r3, r0
 80046a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 80046aa:	7cfb      	ldrb	r3, [r7, #19]
 80046ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d028      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046ba:	4923      	ldr	r1, [pc, #140]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80046bc:	4b22      	ldr	r3, [pc, #136]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046d8:	d106      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046da:	4a1b      	ldr	r2, [pc, #108]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80046dc:	4b1a      	ldr	r3, [pc, #104]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046e4:	60d3      	str	r3, [r2, #12]
 80046e6:	e011      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046f0:	d10c      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3304      	adds	r3, #4
 80046f6:	2101      	movs	r1, #1
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 f875 	bl	80047e8 <RCCEx_PLLSAI1_Config>
 80046fe:	4603      	mov	r3, r0
 8004700:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004702:	7cfb      	ldrb	r3, [r7, #19]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8004708:	7cfb      	ldrb	r3, [r7, #19]
 800470a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d02b      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004718:	490b      	ldr	r1, [pc, #44]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800471c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004720:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004736:	d109      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004738:	4a03      	ldr	r2, [pc, #12]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800473a:	4b03      	ldr	r3, [pc, #12]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004742:	60d3      	str	r3, [r2, #12]
 8004744:	e014      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8004746:	bf00      	nop
 8004748:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004750:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004754:	d10c      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3304      	adds	r3, #4
 800475a:	2101      	movs	r1, #1
 800475c:	4618      	mov	r0, r3
 800475e:	f000 f843 	bl	80047e8 <RCCEx_PLLSAI1_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004766:	7cfb      	ldrb	r3, [r7, #19]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 800476c:	7cfb      	ldrb	r3, [r7, #19]
 800476e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01c      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800477c:	4919      	ldr	r1, [pc, #100]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800477e:	4b19      	ldr	r3, [pc, #100]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004784:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800479a:	d10c      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	2102      	movs	r1, #2
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f820 	bl	80047e8 <RCCEx_PLLSAI1_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ac:	7cfb      	ldrb	r3, [r7, #19]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 80047b2:	7cfb      	ldrb	r3, [r7, #19]
 80047b4:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047c2:	4908      	ldr	r1, [pc, #32]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80047c4:	4b07      	ldr	r3, [pc, #28]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000

080047e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047f6:	4b73      	ldr	r3, [pc, #460]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d018      	beq.n	8004834 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004802:	4b70      	ldr	r3, [pc, #448]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f003 0203 	and.w	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d10d      	bne.n	800482e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
       ||
 8004816:	2b00      	cmp	r3, #0
 8004818:	d009      	beq.n	800482e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800481a:	4b6a      	ldr	r3, [pc, #424]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	091b      	lsrs	r3, r3, #4
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
       ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d044      	beq.n	80048b8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
 8004832:	e041      	b.n	80048b8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d00c      	beq.n	8004856 <RCCEx_PLLSAI1_Config+0x6e>
 800483c:	2b03      	cmp	r3, #3
 800483e:	d013      	beq.n	8004868 <RCCEx_PLLSAI1_Config+0x80>
 8004840:	2b01      	cmp	r3, #1
 8004842:	d120      	bne.n	8004886 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004844:	4b5f      	ldr	r3, [pc, #380]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d11d      	bne.n	800488c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004854:	e01a      	b.n	800488c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004856:	4b5b      	ldr	r3, [pc, #364]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800485e:	2b00      	cmp	r3, #0
 8004860:	d116      	bne.n	8004890 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004866:	e013      	b.n	8004890 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004868:	4b56      	ldr	r3, [pc, #344]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10f      	bne.n	8004894 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004874:	4b53      	ldr	r3, [pc, #332]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d109      	bne.n	8004894 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004884:	e006      	b.n	8004894 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	73fb      	strb	r3, [r7, #15]
      break;
 800488a:	e004      	b.n	8004896 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800488c:	bf00      	nop
 800488e:	e002      	b.n	8004896 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004890:	bf00      	nop
 8004892:	e000      	b.n	8004896 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004894:	bf00      	nop
    }

    if(status == HAL_OK)
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10d      	bne.n	80048b8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800489c:	4849      	ldr	r0, [pc, #292]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800489e:	4b49      	ldr	r3, [pc, #292]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6819      	ldr	r1, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	430b      	orrs	r3, r1
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d17c      	bne.n	80049b8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048be:	4a41      	ldr	r2, [pc, #260]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048c0:	4b40      	ldr	r3, [pc, #256]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ca:	f7fc ffed 	bl	80018a8 <HAL_GetTick>
 80048ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048d0:	e009      	b.n	80048e6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048d2:	f7fc ffe9 	bl	80018a8 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d902      	bls.n	80048e6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	73fb      	strb	r3, [r7, #15]
        break;
 80048e4:	e005      	b.n	80048f2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048e6:	4b37      	ldr	r3, [pc, #220]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1ef      	bne.n	80048d2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d15f      	bne.n	80049b8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d110      	bne.n	8004920 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048fe:	4831      	ldr	r0, [pc, #196]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004900:	4b30      	ldr	r3, [pc, #192]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004908:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6892      	ldr	r2, [r2, #8]
 8004910:	0211      	lsls	r1, r2, #8
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	68d2      	ldr	r2, [r2, #12]
 8004916:	06d2      	lsls	r2, r2, #27
 8004918:	430a      	orrs	r2, r1
 800491a:	4313      	orrs	r3, r2
 800491c:	6103      	str	r3, [r0, #16]
 800491e:	e027      	b.n	8004970 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d112      	bne.n	800494c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004926:	4827      	ldr	r0, [pc, #156]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004928:	4b26      	ldr	r3, [pc, #152]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004930:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6892      	ldr	r2, [r2, #8]
 8004938:	0211      	lsls	r1, r2, #8
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6912      	ldr	r2, [r2, #16]
 800493e:	0852      	lsrs	r2, r2, #1
 8004940:	3a01      	subs	r2, #1
 8004942:	0552      	lsls	r2, r2, #21
 8004944:	430a      	orrs	r2, r1
 8004946:	4313      	orrs	r3, r2
 8004948:	6103      	str	r3, [r0, #16]
 800494a:	e011      	b.n	8004970 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800494c:	481d      	ldr	r0, [pc, #116]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800494e:	4b1d      	ldr	r3, [pc, #116]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004956:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6892      	ldr	r2, [r2, #8]
 800495e:	0211      	lsls	r1, r2, #8
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6952      	ldr	r2, [r2, #20]
 8004964:	0852      	lsrs	r2, r2, #1
 8004966:	3a01      	subs	r2, #1
 8004968:	0652      	lsls	r2, r2, #25
 800496a:	430a      	orrs	r2, r1
 800496c:	4313      	orrs	r3, r2
 800496e:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004970:	4a14      	ldr	r2, [pc, #80]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004972:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800497a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497c:	f7fc ff94 	bl	80018a8 <HAL_GetTick>
 8004980:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004982:	e009      	b.n	8004998 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004984:	f7fc ff90 	bl	80018a8 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d902      	bls.n	8004998 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	73fb      	strb	r3, [r7, #15]
          break;
 8004996:	e005      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004998:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0ef      	beq.n	8004984 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049aa:	4906      	ldr	r1, [pc, #24]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049ac:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40021000 	.word	0x40021000

080049c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e01d      	b.n	8004a16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f006 fa7a 	bl	800aee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4619      	mov	r1, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	f000 fc26 	bl	8005258 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b082      	sub	sp, #8
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e01d      	b.n	8004a6c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d106      	bne.n	8004a4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f006 f98f 	bl	800ad68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	f000 fbfb 	bl	8005258 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e01d      	b.n	8004ac2 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f006 f9a2 	bl	800ade4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3304      	adds	r3, #4
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	f000 fbd0 	bl	8005258 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b082      	sub	sp, #8
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d122      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d11b      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f06f 0202 	mvn.w	r2, #2
 8004af6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	f003 0303 	and.w	r3, r3, #3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fb84 	bl	800521a <HAL_TIM_IC_CaptureCallback>
 8004b12:	e005      	b.n	8004b20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fb76 	bl	8005206 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fb87 	bl	800522e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d122      	bne.n	8004b7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d11b      	bne.n	8004b7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f06f 0204 	mvn.w	r2, #4
 8004b4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fb5a 	bl	800521a <HAL_TIM_IC_CaptureCallback>
 8004b66:	e005      	b.n	8004b74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fb4c 	bl	8005206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fb5d 	bl	800522e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d122      	bne.n	8004bce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d11b      	bne.n	8004bce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f06f 0208 	mvn.w	r2, #8
 8004b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2204      	movs	r2, #4
 8004ba4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fb30 	bl	800521a <HAL_TIM_IC_CaptureCallback>
 8004bba:	e005      	b.n	8004bc8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fb22 	bl	8005206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fb33 	bl	800522e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d122      	bne.n	8004c22 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b10      	cmp	r3, #16
 8004be8:	d11b      	bne.n	8004c22 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f06f 0210 	mvn.w	r2, #16
 8004bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2208      	movs	r2, #8
 8004bf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fb06 	bl	800521a <HAL_TIM_IC_CaptureCallback>
 8004c0e:	e005      	b.n	8004c1c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 faf8 	bl	8005206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fb09 	bl	800522e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d10e      	bne.n	8004c4e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d107      	bne.n	8004c4e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f06f 0201 	mvn.w	r2, #1
 8004c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7fc fdb7 	bl	80017bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c58:	2b80      	cmp	r3, #128	; 0x80
 8004c5a:	d10e      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c66:	2b80      	cmp	r3, #128	; 0x80
 8004c68:	d107      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f001 f85f 	bl	8005d38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c88:	d10e      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c94:	2b80      	cmp	r3, #128	; 0x80
 8004c96:	d107      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f001 f852 	bl	8005d4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb2:	2b40      	cmp	r3, #64	; 0x40
 8004cb4:	d10e      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc0:	2b40      	cmp	r3, #64	; 0x40
 8004cc2:	d107      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fab7 	bl	8005242 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b20      	cmp	r3, #32
 8004ce0:	d10e      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	d107      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0220 	mvn.w	r2, #32
 8004cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f001 f812 	bl	8005d24 <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e08a      	b.n	8004e38 <HAL_TIM_IC_ConfigChannel+0x130>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d11b      	bne.n	8004d70 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	6819      	ldr	r1, [r3, #0]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f000 fd72 	bl	8005830 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	6812      	ldr	r2, [r2, #0]
 8004d54:	6992      	ldr	r2, [r2, #24]
 8004d56:	f022 020c 	bic.w	r2, r2, #12
 8004d5a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	6812      	ldr	r2, [r2, #0]
 8004d64:	6991      	ldr	r1, [r2, #24]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	6892      	ldr	r2, [r2, #8]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	619a      	str	r2, [r3, #24]
 8004d6e:	e05a      	b.n	8004e26 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d11c      	bne.n	8004db0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	6819      	ldr	r1, [r3, #0]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f000 fdde 	bl	8005946 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	6992      	ldr	r2, [r2, #24]
 8004d94:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d98:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	6812      	ldr	r2, [r2, #0]
 8004da2:	6991      	ldr	r1, [r2, #24]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	6892      	ldr	r2, [r2, #8]
 8004da8:	0212      	lsls	r2, r2, #8
 8004daa:	430a      	orrs	r2, r1
 8004dac:	619a      	str	r2, [r3, #24]
 8004dae:	e03a      	b.n	8004e26 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d11b      	bne.n	8004dee <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	6819      	ldr	r1, [r3, #0]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f000 fe2b 	bl	8005a20 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	6812      	ldr	r2, [r2, #0]
 8004dd2:	69d2      	ldr	r2, [r2, #28]
 8004dd4:	f022 020c 	bic.w	r2, r2, #12
 8004dd8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	6812      	ldr	r2, [r2, #0]
 8004de2:	69d1      	ldr	r1, [r2, #28]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	6892      	ldr	r2, [r2, #8]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	61da      	str	r2, [r3, #28]
 8004dec:	e01b      	b.n	8004e26 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	6819      	ldr	r1, [r3, #0]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f000 fe4b 	bl	8005a98 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	69d2      	ldr	r2, [r2, #28]
 8004e0c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e10:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	6812      	ldr	r2, [r2, #0]
 8004e1a:	69d1      	ldr	r1, [r2, #28]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	6892      	ldr	r2, [r2, #8]
 8004e20:	0212      	lsls	r2, r2, #8
 8004e22:	430a      	orrs	r2, r1
 8004e24:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e105      	b.n	8005066 <HAL_TIM_PWM_ConfigChannel+0x226>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2202      	movs	r2, #2
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b14      	cmp	r3, #20
 8004e6e:	f200 80f0 	bhi.w	8005052 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004e72:	a201      	add	r2, pc, #4	; (adr r2, 8004e78 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e78:	08004ecd 	.word	0x08004ecd
 8004e7c:	08005053 	.word	0x08005053
 8004e80:	08005053 	.word	0x08005053
 8004e84:	08005053 	.word	0x08005053
 8004e88:	08004f0d 	.word	0x08004f0d
 8004e8c:	08005053 	.word	0x08005053
 8004e90:	08005053 	.word	0x08005053
 8004e94:	08005053 	.word	0x08005053
 8004e98:	08004f4f 	.word	0x08004f4f
 8004e9c:	08005053 	.word	0x08005053
 8004ea0:	08005053 	.word	0x08005053
 8004ea4:	08005053 	.word	0x08005053
 8004ea8:	08004f8f 	.word	0x08004f8f
 8004eac:	08005053 	.word	0x08005053
 8004eb0:	08005053 	.word	0x08005053
 8004eb4:	08005053 	.word	0x08005053
 8004eb8:	08004fd1 	.word	0x08004fd1
 8004ebc:	08005053 	.word	0x08005053
 8004ec0:	08005053 	.word	0x08005053
 8004ec4:	08005053 	.word	0x08005053
 8004ec8:	08005011 	.word	0x08005011
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fa2e 	bl	8005334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	6992      	ldr	r2, [r2, #24]
 8004ee2:	f042 0208 	orr.w	r2, r2, #8
 8004ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	6992      	ldr	r2, [r2, #24]
 8004ef2:	f022 0204 	bic.w	r2, r2, #4
 8004ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	6991      	ldr	r1, [r2, #24]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	6912      	ldr	r2, [r2, #16]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	619a      	str	r2, [r3, #24]
      break;
 8004f0a:	e0a3      	b.n	8005054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fa8a 	bl	800542c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	6992      	ldr	r2, [r2, #24]
 8004f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	6992      	ldr	r2, [r2, #24]
 8004f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	6812      	ldr	r2, [r2, #0]
 8004f40:	6991      	ldr	r1, [r2, #24]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	6912      	ldr	r2, [r2, #16]
 8004f46:	0212      	lsls	r2, r2, #8
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	619a      	str	r2, [r3, #24]
      break;
 8004f4c:	e082      	b.n	8005054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fae3 	bl	8005520 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	6812      	ldr	r2, [r2, #0]
 8004f62:	69d2      	ldr	r2, [r2, #28]
 8004f64:	f042 0208 	orr.w	r2, r2, #8
 8004f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	69d2      	ldr	r2, [r2, #28]
 8004f74:	f022 0204 	bic.w	r2, r2, #4
 8004f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	6812      	ldr	r2, [r2, #0]
 8004f82:	69d1      	ldr	r1, [r2, #28]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	6912      	ldr	r2, [r2, #16]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	61da      	str	r2, [r3, #28]
      break;
 8004f8c:	e062      	b.n	8005054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68b9      	ldr	r1, [r7, #8]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fb3b 	bl	8005610 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	69d2      	ldr	r2, [r2, #28]
 8004fa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	69d2      	ldr	r2, [r2, #28]
 8004fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	69d1      	ldr	r1, [r2, #28]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	6912      	ldr	r2, [r2, #16]
 8004fc8:	0212      	lsls	r2, r2, #8
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	61da      	str	r2, [r3, #28]
      break;
 8004fce:	e041      	b.n	8005054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fb78 	bl	80056cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004fe6:	f042 0208 	orr.w	r2, r2, #8
 8004fea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004ff6:	f022 0204 	bic.w	r2, r2, #4
 8004ffa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	6912      	ldr	r2, [r2, #16]
 800500a:	430a      	orrs	r2, r1
 800500c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800500e:	e021      	b.n	8005054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fbb0 	bl	800577c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	6812      	ldr	r2, [r2, #0]
 8005024:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800502a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	6812      	ldr	r2, [r2, #0]
 8005034:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	6912      	ldr	r2, [r2, #16]
 800504a:	0212      	lsls	r2, r2, #8
 800504c:	430a      	orrs	r2, r1
 800504e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005050:	e000      	b.n	8005054 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005052:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop

08005070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_TIM_ConfigClockSource+0x18>
 8005084:	2302      	movs	r3, #2
 8005086:	e0ba      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x18e>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b40      	cmp	r3, #64	; 0x40
 80050c2:	d07a      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0x14a>
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d80d      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x74>
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	f000 8086 	beq.w	80051da <HAL_TIM_ConfigClockSource+0x16a>
 80050ce:	2b10      	cmp	r3, #16
 80050d0:	d803      	bhi.n	80050da <HAL_TIM_ConfigClockSource+0x6a>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 8081 	beq.w	80051da <HAL_TIM_ConfigClockSource+0x16a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80050d8:	e088      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 80050da:	2b20      	cmp	r3, #32
 80050dc:	d07d      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x16a>
 80050de:	2b30      	cmp	r3, #48	; 0x30
 80050e0:	d07b      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x16a>
      break;
 80050e2:	e083      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 80050e4:	2b70      	cmp	r3, #112	; 0x70
 80050e6:	d018      	beq.n	800511a <HAL_TIM_ConfigClockSource+0xaa>
 80050e8:	2b70      	cmp	r3, #112	; 0x70
 80050ea:	d804      	bhi.n	80050f6 <HAL_TIM_ConfigClockSource+0x86>
 80050ec:	2b50      	cmp	r3, #80	; 0x50
 80050ee:	d044      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x10a>
 80050f0:	2b60      	cmp	r3, #96	; 0x60
 80050f2:	d052      	beq.n	800519a <HAL_TIM_ConfigClockSource+0x12a>
      break;
 80050f4:	e07a      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 80050f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050fa:	d003      	beq.n	8005104 <HAL_TIM_ConfigClockSource+0x94>
 80050fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005100:	d028      	beq.n	8005154 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8005102:	e073      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x17c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005112:	f023 0307 	bic.w	r3, r3, #7
 8005116:	6093      	str	r3, [r2, #8]
      break;
 8005118:	e068      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6899      	ldr	r1, [r3, #8]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f000 fd0d 	bl	8005b48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800513c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005140:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005148:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	609a      	str	r2, [r3, #8]
      break;
 8005152:	e04b      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	6899      	ldr	r1, [r3, #8]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f000 fcf0 	bl	8005b48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6812      	ldr	r2, [r2, #0]
 8005170:	6892      	ldr	r2, [r2, #8]
 8005172:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005176:	609a      	str	r2, [r3, #8]
      break;
 8005178:	e038      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	6859      	ldr	r1, [r3, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	461a      	mov	r2, r3
 8005188:	f000 fbae 	bl	80058e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2150      	movs	r1, #80	; 0x50
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fcbd 	bl	8005b12 <TIM_ITRx_SetConfig>
      break;
 8005198:	e028      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6859      	ldr	r1, [r3, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	461a      	mov	r2, r3
 80051a8:	f000 fc0a 	bl	80059c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2160      	movs	r1, #96	; 0x60
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fcad 	bl	8005b12 <TIM_ITRx_SetConfig>
      break;
 80051b8:	e018      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6859      	ldr	r1, [r3, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f000 fb8e 	bl	80058e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2140      	movs	r1, #64	; 0x40
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fc9d 	bl	8005b12 <TIM_ITRx_SetConfig>
      break;
 80051d8:	e008      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4619      	mov	r1, r3
 80051e4:	4610      	mov	r0, r2
 80051e6:	f000 fc94 	bl	8005b12 <TIM_ITRx_SetConfig>
      break;
 80051ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
	...

08005258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a2e      	ldr	r2, [pc, #184]	; (8005324 <TIM_Base_SetConfig+0xcc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d007      	beq.n	8005280 <TIM_Base_SetConfig+0x28>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005276:	d003      	beq.n	8005280 <TIM_Base_SetConfig+0x28>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a2b      	ldr	r2, [pc, #172]	; (8005328 <TIM_Base_SetConfig+0xd0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d108      	bne.n	8005292 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a23      	ldr	r2, [pc, #140]	; (8005324 <TIM_Base_SetConfig+0xcc>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00f      	beq.n	80052ba <TIM_Base_SetConfig+0x62>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a0:	d00b      	beq.n	80052ba <TIM_Base_SetConfig+0x62>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a20      	ldr	r2, [pc, #128]	; (8005328 <TIM_Base_SetConfig+0xd0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d007      	beq.n	80052ba <TIM_Base_SetConfig+0x62>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a1f      	ldr	r2, [pc, #124]	; (800532c <TIM_Base_SetConfig+0xd4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d003      	beq.n	80052ba <TIM_Base_SetConfig+0x62>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a1e      	ldr	r2, [pc, #120]	; (8005330 <TIM_Base_SetConfig+0xd8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d108      	bne.n	80052cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a0c      	ldr	r2, [pc, #48]	; (8005324 <TIM_Base_SetConfig+0xcc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d007      	beq.n	8005308 <TIM_Base_SetConfig+0xb0>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a0c      	ldr	r2, [pc, #48]	; (800532c <TIM_Base_SetConfig+0xd4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d003      	beq.n	8005308 <TIM_Base_SetConfig+0xb0>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a0b      	ldr	r2, [pc, #44]	; (8005330 <TIM_Base_SetConfig+0xd8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d103      	bne.n	8005310 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	691a      	ldr	r2, [r3, #16]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	615a      	str	r2, [r3, #20]
}
 8005316:	bf00      	nop
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40012c00 	.word	0x40012c00
 8005328:	40000400 	.word	0x40000400
 800532c:	40014000 	.word	0x40014000
 8005330:	40014400 	.word	0x40014400

08005334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	f023 0201 	bic.w	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0303 	bic.w	r3, r3, #3
 800536e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f023 0302 	bic.w	r3, r3, #2
 8005380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a24      	ldr	r2, [pc, #144]	; (8005420 <TIM_OC1_SetConfig+0xec>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d007      	beq.n	80053a4 <TIM_OC1_SetConfig+0x70>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a23      	ldr	r2, [pc, #140]	; (8005424 <TIM_OC1_SetConfig+0xf0>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d003      	beq.n	80053a4 <TIM_OC1_SetConfig+0x70>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a22      	ldr	r2, [pc, #136]	; (8005428 <TIM_OC1_SetConfig+0xf4>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d10c      	bne.n	80053be <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f023 0308 	bic.w	r3, r3, #8
 80053aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f023 0304 	bic.w	r3, r3, #4
 80053bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a17      	ldr	r2, [pc, #92]	; (8005420 <TIM_OC1_SetConfig+0xec>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d007      	beq.n	80053d6 <TIM_OC1_SetConfig+0xa2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a16      	ldr	r2, [pc, #88]	; (8005424 <TIM_OC1_SetConfig+0xf0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d003      	beq.n	80053d6 <TIM_OC1_SetConfig+0xa2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a15      	ldr	r2, [pc, #84]	; (8005428 <TIM_OC1_SetConfig+0xf4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d111      	bne.n	80053fa <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	621a      	str	r2, [r3, #32]
}
 8005414:	bf00      	nop
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	40012c00 	.word	0x40012c00
 8005424:	40014000 	.word	0x40014000
 8005428:	40014400 	.word	0x40014400

0800542c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	f023 0210 	bic.w	r2, r3, #16
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800545a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800545e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	021b      	lsls	r3, r3, #8
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4313      	orrs	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f023 0320 	bic.w	r3, r3, #32
 800547a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a22      	ldr	r2, [pc, #136]	; (8005514 <TIM_OC2_SetConfig+0xe8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d10d      	bne.n	80054ac <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a19      	ldr	r2, [pc, #100]	; (8005514 <TIM_OC2_SetConfig+0xe8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d007      	beq.n	80054c4 <TIM_OC2_SetConfig+0x98>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a18      	ldr	r2, [pc, #96]	; (8005518 <TIM_OC2_SetConfig+0xec>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d003      	beq.n	80054c4 <TIM_OC2_SetConfig+0x98>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a17      	ldr	r2, [pc, #92]	; (800551c <TIM_OC2_SetConfig+0xf0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d113      	bne.n	80054ec <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	4313      	orrs	r3, r2
 80054de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	621a      	str	r2, [r3, #32]
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40012c00 	.word	0x40012c00
 8005518:	40014000 	.word	0x40014000
 800551c:	40014400 	.word	0x40014400

08005520 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800554e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0303 	bic.w	r3, r3, #3
 800555a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800556c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	021b      	lsls	r3, r3, #8
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	4313      	orrs	r3, r2
 8005578:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a21      	ldr	r2, [pc, #132]	; (8005604 <TIM_OC3_SetConfig+0xe4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d10d      	bne.n	800559e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005588:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	021b      	lsls	r3, r3, #8
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	4313      	orrs	r3, r2
 8005594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800559c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a18      	ldr	r2, [pc, #96]	; (8005604 <TIM_OC3_SetConfig+0xe4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d007      	beq.n	80055b6 <TIM_OC3_SetConfig+0x96>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a17      	ldr	r2, [pc, #92]	; (8005608 <TIM_OC3_SetConfig+0xe8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d003      	beq.n	80055b6 <TIM_OC3_SetConfig+0x96>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a16      	ldr	r2, [pc, #88]	; (800560c <TIM_OC3_SetConfig+0xec>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d113      	bne.n	80055de <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	621a      	str	r2, [r3, #32]
}
 80055f8:	bf00      	nop
 80055fa:	371c      	adds	r7, #28
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	40012c00 	.word	0x40012c00
 8005608:	40014000 	.word	0x40014000
 800560c:	40014400 	.word	0x40014400

08005610 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800563e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800564a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	021b      	lsls	r3, r3, #8
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800565e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	031b      	lsls	r3, r3, #12
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a14      	ldr	r2, [pc, #80]	; (80056c0 <TIM_OC4_SetConfig+0xb0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d007      	beq.n	8005684 <TIM_OC4_SetConfig+0x74>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a13      	ldr	r2, [pc, #76]	; (80056c4 <TIM_OC4_SetConfig+0xb4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d003      	beq.n	8005684 <TIM_OC4_SetConfig+0x74>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a12      	ldr	r2, [pc, #72]	; (80056c8 <TIM_OC4_SetConfig+0xb8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d109      	bne.n	8005698 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800568a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	019b      	lsls	r3, r3, #6
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	621a      	str	r2, [r3, #32]
}
 80056b2:	bf00      	nop
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40012c00 	.word	0x40012c00
 80056c4:	40014000 	.word	0x40014000
 80056c8:	40014400 	.word	0x40014400

080056cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005710:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	041b      	lsls	r3, r3, #16
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a13      	ldr	r2, [pc, #76]	; (8005770 <TIM_OC5_SetConfig+0xa4>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d007      	beq.n	8005736 <TIM_OC5_SetConfig+0x6a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a12      	ldr	r2, [pc, #72]	; (8005774 <TIM_OC5_SetConfig+0xa8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d003      	beq.n	8005736 <TIM_OC5_SetConfig+0x6a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a11      	ldr	r2, [pc, #68]	; (8005778 <TIM_OC5_SetConfig+0xac>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d109      	bne.n	800574a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800573c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	021b      	lsls	r3, r3, #8
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	621a      	str	r2, [r3, #32]
}
 8005764:	bf00      	nop
 8005766:	371c      	adds	r7, #28
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	40012c00 	.word	0x40012c00
 8005774:	40014000 	.word	0x40014000
 8005778:	40014400 	.word	0x40014400

0800577c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	021b      	lsls	r3, r3, #8
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	051b      	lsls	r3, r3, #20
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a14      	ldr	r2, [pc, #80]	; (8005824 <TIM_OC6_SetConfig+0xa8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d007      	beq.n	80057e8 <TIM_OC6_SetConfig+0x6c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a13      	ldr	r2, [pc, #76]	; (8005828 <TIM_OC6_SetConfig+0xac>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_OC6_SetConfig+0x6c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a12      	ldr	r2, [pc, #72]	; (800582c <TIM_OC6_SetConfig+0xb0>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d109      	bne.n	80057fc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	029b      	lsls	r3, r3, #10
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	621a      	str	r2, [r3, #32]
}
 8005816:	bf00      	nop
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40014000 	.word	0x40014000
 800582c:	40014400 	.word	0x40014400

08005830 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f023 0201 	bic.w	r2, r3, #1
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4a20      	ldr	r2, [pc, #128]	; (80058dc <TIM_TI1_SetConfig+0xac>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00b      	beq.n	8005876 <TIM_TI1_SetConfig+0x46>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005864:	d007      	beq.n	8005876 <TIM_TI1_SetConfig+0x46>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4a1d      	ldr	r2, [pc, #116]	; (80058e0 <TIM_TI1_SetConfig+0xb0>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d003      	beq.n	8005876 <TIM_TI1_SetConfig+0x46>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4a1c      	ldr	r2, [pc, #112]	; (80058e4 <TIM_TI1_SetConfig+0xb4>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d101      	bne.n	800587a <TIM_TI1_SetConfig+0x4a>
 8005876:	2301      	movs	r3, #1
 8005878:	e000      	b.n	800587c <TIM_TI1_SetConfig+0x4c>
 800587a:	2300      	movs	r3, #0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d008      	beq.n	8005892 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f023 0303 	bic.w	r3, r3, #3
 8005886:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4313      	orrs	r3, r2
 800588e:	617b      	str	r3, [r7, #20]
 8005890:	e003      	b.n	800589a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f043 0301 	orr.w	r3, r3, #1
 8005898:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f023 030a 	bic.w	r3, r3, #10
 80058b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f003 030a 	and.w	r3, r3, #10
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	621a      	str	r2, [r3, #32]
}
 80058ce:	bf00      	nop
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40012c00 	.word	0x40012c00
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40014000 	.word	0x40014000

080058e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	f023 0201 	bic.w	r2, r3, #1
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f023 030a 	bic.w	r3, r3, #10
 8005924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	621a      	str	r2, [r3, #32]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005946:	b480      	push	{r7}
 8005948:	b087      	sub	sp, #28
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
 8005952:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	f023 0210 	bic.w	r2, r3, #16
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005972:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005984:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	031b      	lsls	r3, r3, #12
 800598a:	b29b      	uxth	r3, r3
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	4313      	orrs	r3, r2
 8005990:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005998:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	621a      	str	r2, [r3, #32]
}
 80059b4:	bf00      	nop
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	f023 0210 	bic.w	r2, r3, #16
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	031b      	lsls	r3, r3, #12
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	621a      	str	r2, [r3, #32]
}
 8005a14:	bf00      	nop
 8005a16:	371c      	adds	r7, #28
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
 8005a2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f023 0303 	bic.w	r3, r3, #3
 8005a4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005a70:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	621a      	str	r2, [r3, #32]
}
 8005a8c:	bf00      	nop
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ad6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	031b      	lsls	r3, r3, #12
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005aea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	031b      	lsls	r3, r3, #12
 8005af0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b085      	sub	sp, #20
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	f043 0307 	orr.w	r3, r3, #7
 8005b34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	609a      	str	r2, [r3, #8]
}
 8005b3c:	bf00      	nop
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	021a      	lsls	r2, r3, #8
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	609a      	str	r2, [r3, #8]
}
 8005b7c:	bf00      	nop
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e040      	b.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1a      	ldr	r2, [pc, #104]	; (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d108      	bne.n	8005bdc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005bd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bf4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	40012c00 	.word	0x40012c00

08005c34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d101      	bne.n	8005c50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e060      	b.n	8005d12 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	041b      	lsls	r3, r3, #16
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a14      	ldr	r2, [pc, #80]	; (8005d20 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d115      	bne.n	8005d00 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	051b      	lsls	r3, r3, #20
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	40012c00 	.word	0x40012c00

08005d24 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e043      	b.n	8005dfa <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d106      	bne.n	8005d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f005 fa52 	bl	800b230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2224      	movs	r2, #36	; 0x24
 8005d90:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	6812      	ldr	r2, [r2, #0]
 8005d9e:	f022 0201 	bic.w	r2, r2, #1
 8005da2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f82d 	bl	8005e04 <UART_SetConfig>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e022      	b.n	8005dfa <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fb31 	bl	8006424 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	6852      	ldr	r2, [r2, #4]
 8005dcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6812      	ldr	r2, [r2, #0]
 8005dda:	6892      	ldr	r2, [r2, #8]
 8005ddc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005de0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6812      	ldr	r2, [r2, #0]
 8005dea:	6812      	ldr	r2, [r2, #0]
 8005dec:	f042 0201 	orr.w	r2, r2, #1
 8005df0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fbb8 	bl	8006568 <UART_CheckIdleState>
 8005df8:	4603      	mov	r3, r0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005e08:	b088      	sub	sp, #32
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005e12:	2310      	movs	r3, #16
 8005e14:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	431a      	orrs	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6819      	ldr	r1, [r3, #0]
 8005e48:	4bad      	ldr	r3, [pc, #692]	; (8006100 <UART_SetConfig+0x2fc>)
 8005e4a:	400b      	ands	r3, r1
 8005e4c:	69f9      	ldr	r1, [r7, #28]
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6812      	ldr	r2, [r2, #0]
 8005e5a:	6852      	ldr	r2, [r2, #4]
 8005e5c:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	68d2      	ldr	r2, [r2, #12]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4aa4      	ldr	r2, [pc, #656]	; (8006104 <UART_SetConfig+0x300>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d004      	beq.n	8005e82 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	69fa      	ldr	r2, [r7, #28]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6812      	ldr	r2, [r2, #0]
 8005e8a:	6892      	ldr	r2, [r2, #8]
 8005e8c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a9b      	ldr	r2, [pc, #620]	; (8006108 <UART_SetConfig+0x304>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d121      	bne.n	8005ee4 <UART_SetConfig+0xe0>
 8005ea0:	4b9a      	ldr	r3, [pc, #616]	; (800610c <UART_SetConfig+0x308>)
 8005ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d816      	bhi.n	8005edc <UART_SetConfig+0xd8>
 8005eae:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <UART_SetConfig+0xb0>)
 8005eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb4:	08005ec5 	.word	0x08005ec5
 8005eb8:	08005ed1 	.word	0x08005ed1
 8005ebc:	08005ecb 	.word	0x08005ecb
 8005ec0:	08005ed7 	.word	0x08005ed7
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	76fb      	strb	r3, [r7, #27]
 8005ec8:	e0ba      	b.n	8006040 <UART_SetConfig+0x23c>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	76fb      	strb	r3, [r7, #27]
 8005ece:	e0b7      	b.n	8006040 <UART_SetConfig+0x23c>
 8005ed0:	2304      	movs	r3, #4
 8005ed2:	76fb      	strb	r3, [r7, #27]
 8005ed4:	e0b4      	b.n	8006040 <UART_SetConfig+0x23c>
 8005ed6:	2308      	movs	r3, #8
 8005ed8:	76fb      	strb	r3, [r7, #27]
 8005eda:	e0b1      	b.n	8006040 <UART_SetConfig+0x23c>
 8005edc:	2310      	movs	r3, #16
 8005ede:	76fb      	strb	r3, [r7, #27]
 8005ee0:	bf00      	nop
 8005ee2:	e0ad      	b.n	8006040 <UART_SetConfig+0x23c>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a89      	ldr	r2, [pc, #548]	; (8006110 <UART_SetConfig+0x30c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d134      	bne.n	8005f58 <UART_SetConfig+0x154>
 8005eee:	4b87      	ldr	r3, [pc, #540]	; (800610c <UART_SetConfig+0x308>)
 8005ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef4:	f003 030c 	and.w	r3, r3, #12
 8005ef8:	2b0c      	cmp	r3, #12
 8005efa:	d829      	bhi.n	8005f50 <UART_SetConfig+0x14c>
 8005efc:	a201      	add	r2, pc, #4	; (adr r2, 8005f04 <UART_SetConfig+0x100>)
 8005efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f02:	bf00      	nop
 8005f04:	08005f39 	.word	0x08005f39
 8005f08:	08005f51 	.word	0x08005f51
 8005f0c:	08005f51 	.word	0x08005f51
 8005f10:	08005f51 	.word	0x08005f51
 8005f14:	08005f45 	.word	0x08005f45
 8005f18:	08005f51 	.word	0x08005f51
 8005f1c:	08005f51 	.word	0x08005f51
 8005f20:	08005f51 	.word	0x08005f51
 8005f24:	08005f3f 	.word	0x08005f3f
 8005f28:	08005f51 	.word	0x08005f51
 8005f2c:	08005f51 	.word	0x08005f51
 8005f30:	08005f51 	.word	0x08005f51
 8005f34:	08005f4b 	.word	0x08005f4b
 8005f38:	2300      	movs	r3, #0
 8005f3a:	76fb      	strb	r3, [r7, #27]
 8005f3c:	e080      	b.n	8006040 <UART_SetConfig+0x23c>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	76fb      	strb	r3, [r7, #27]
 8005f42:	e07d      	b.n	8006040 <UART_SetConfig+0x23c>
 8005f44:	2304      	movs	r3, #4
 8005f46:	76fb      	strb	r3, [r7, #27]
 8005f48:	e07a      	b.n	8006040 <UART_SetConfig+0x23c>
 8005f4a:	2308      	movs	r3, #8
 8005f4c:	76fb      	strb	r3, [r7, #27]
 8005f4e:	e077      	b.n	8006040 <UART_SetConfig+0x23c>
 8005f50:	2310      	movs	r3, #16
 8005f52:	76fb      	strb	r3, [r7, #27]
 8005f54:	bf00      	nop
 8005f56:	e073      	b.n	8006040 <UART_SetConfig+0x23c>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a6d      	ldr	r2, [pc, #436]	; (8006114 <UART_SetConfig+0x310>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d120      	bne.n	8005fa4 <UART_SetConfig+0x1a0>
 8005f62:	4b6a      	ldr	r3, [pc, #424]	; (800610c <UART_SetConfig+0x308>)
 8005f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f6c:	2b10      	cmp	r3, #16
 8005f6e:	d00f      	beq.n	8005f90 <UART_SetConfig+0x18c>
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	d802      	bhi.n	8005f7a <UART_SetConfig+0x176>
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <UART_SetConfig+0x180>
 8005f78:	e010      	b.n	8005f9c <UART_SetConfig+0x198>
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	d005      	beq.n	8005f8a <UART_SetConfig+0x186>
 8005f7e:	2b30      	cmp	r3, #48	; 0x30
 8005f80:	d009      	beq.n	8005f96 <UART_SetConfig+0x192>
 8005f82:	e00b      	b.n	8005f9c <UART_SetConfig+0x198>
 8005f84:	2300      	movs	r3, #0
 8005f86:	76fb      	strb	r3, [r7, #27]
 8005f88:	e05a      	b.n	8006040 <UART_SetConfig+0x23c>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	76fb      	strb	r3, [r7, #27]
 8005f8e:	e057      	b.n	8006040 <UART_SetConfig+0x23c>
 8005f90:	2304      	movs	r3, #4
 8005f92:	76fb      	strb	r3, [r7, #27]
 8005f94:	e054      	b.n	8006040 <UART_SetConfig+0x23c>
 8005f96:	2308      	movs	r3, #8
 8005f98:	76fb      	strb	r3, [r7, #27]
 8005f9a:	e051      	b.n	8006040 <UART_SetConfig+0x23c>
 8005f9c:	2310      	movs	r3, #16
 8005f9e:	76fb      	strb	r3, [r7, #27]
 8005fa0:	bf00      	nop
 8005fa2:	e04d      	b.n	8006040 <UART_SetConfig+0x23c>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a5b      	ldr	r2, [pc, #364]	; (8006118 <UART_SetConfig+0x314>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d120      	bne.n	8005ff0 <UART_SetConfig+0x1ec>
 8005fae:	4b57      	ldr	r3, [pc, #348]	; (800610c <UART_SetConfig+0x308>)
 8005fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005fb8:	2b40      	cmp	r3, #64	; 0x40
 8005fba:	d00f      	beq.n	8005fdc <UART_SetConfig+0x1d8>
 8005fbc:	2b40      	cmp	r3, #64	; 0x40
 8005fbe:	d802      	bhi.n	8005fc6 <UART_SetConfig+0x1c2>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d005      	beq.n	8005fd0 <UART_SetConfig+0x1cc>
 8005fc4:	e010      	b.n	8005fe8 <UART_SetConfig+0x1e4>
 8005fc6:	2b80      	cmp	r3, #128	; 0x80
 8005fc8:	d005      	beq.n	8005fd6 <UART_SetConfig+0x1d2>
 8005fca:	2bc0      	cmp	r3, #192	; 0xc0
 8005fcc:	d009      	beq.n	8005fe2 <UART_SetConfig+0x1de>
 8005fce:	e00b      	b.n	8005fe8 <UART_SetConfig+0x1e4>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	76fb      	strb	r3, [r7, #27]
 8005fd4:	e034      	b.n	8006040 <UART_SetConfig+0x23c>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	76fb      	strb	r3, [r7, #27]
 8005fda:	e031      	b.n	8006040 <UART_SetConfig+0x23c>
 8005fdc:	2304      	movs	r3, #4
 8005fde:	76fb      	strb	r3, [r7, #27]
 8005fe0:	e02e      	b.n	8006040 <UART_SetConfig+0x23c>
 8005fe2:	2308      	movs	r3, #8
 8005fe4:	76fb      	strb	r3, [r7, #27]
 8005fe6:	e02b      	b.n	8006040 <UART_SetConfig+0x23c>
 8005fe8:	2310      	movs	r3, #16
 8005fea:	76fb      	strb	r3, [r7, #27]
 8005fec:	bf00      	nop
 8005fee:	e027      	b.n	8006040 <UART_SetConfig+0x23c>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a43      	ldr	r2, [pc, #268]	; (8006104 <UART_SetConfig+0x300>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d123      	bne.n	8006042 <UART_SetConfig+0x23e>
 8005ffa:	4b44      	ldr	r3, [pc, #272]	; (800610c <UART_SetConfig+0x308>)
 8005ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006000:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006008:	d012      	beq.n	8006030 <UART_SetConfig+0x22c>
 800600a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800600e:	d802      	bhi.n	8006016 <UART_SetConfig+0x212>
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <UART_SetConfig+0x220>
 8006014:	e012      	b.n	800603c <UART_SetConfig+0x238>
 8006016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800601a:	d006      	beq.n	800602a <UART_SetConfig+0x226>
 800601c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006020:	d009      	beq.n	8006036 <UART_SetConfig+0x232>
 8006022:	e00b      	b.n	800603c <UART_SetConfig+0x238>
 8006024:	2300      	movs	r3, #0
 8006026:	76fb      	strb	r3, [r7, #27]
 8006028:	e00a      	b.n	8006040 <UART_SetConfig+0x23c>
 800602a:	2302      	movs	r3, #2
 800602c:	76fb      	strb	r3, [r7, #27]
 800602e:	e007      	b.n	8006040 <UART_SetConfig+0x23c>
 8006030:	2304      	movs	r3, #4
 8006032:	76fb      	strb	r3, [r7, #27]
 8006034:	e004      	b.n	8006040 <UART_SetConfig+0x23c>
 8006036:	2308      	movs	r3, #8
 8006038:	76fb      	strb	r3, [r7, #27]
 800603a:	e001      	b.n	8006040 <UART_SetConfig+0x23c>
 800603c:	2310      	movs	r3, #16
 800603e:	76fb      	strb	r3, [r7, #27]
 8006040:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a2f      	ldr	r2, [pc, #188]	; (8006104 <UART_SetConfig+0x300>)
 8006048:	4293      	cmp	r3, r2
 800604a:	f040 80ea 	bne.w	8006222 <UART_SetConfig+0x41e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800604e:	7efb      	ldrb	r3, [r7, #27]
 8006050:	2b08      	cmp	r3, #8
 8006052:	d824      	bhi.n	800609e <UART_SetConfig+0x29a>
 8006054:	a201      	add	r2, pc, #4	; (adr r2, 800605c <UART_SetConfig+0x258>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	08006081 	.word	0x08006081
 8006060:	0800609f 	.word	0x0800609f
 8006064:	08006089 	.word	0x08006089
 8006068:	0800609f 	.word	0x0800609f
 800606c:	0800608f 	.word	0x0800608f
 8006070:	0800609f 	.word	0x0800609f
 8006074:	0800609f 	.word	0x0800609f
 8006078:	0800609f 	.word	0x0800609f
 800607c:	08006097 	.word	0x08006097
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006080:	f7fe f8bc 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8006084:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8006086:	e00d      	b.n	80060a4 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006088:	4b24      	ldr	r3, [pc, #144]	; (800611c <UART_SetConfig+0x318>)
 800608a:	60fb      	str	r3, [r7, #12]
#endif
        break;
 800608c:	e00a      	b.n	80060a4 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800608e:	f7fe f80d 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 8006092:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8006094:	e006      	b.n	80060a4 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800609a:	60fb      	str	r3, [r7, #12]
#endif
        break;
 800609c:	e002      	b.n	80060a4 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	74fb      	strb	r3, [r7, #19]
        break;
 80060a2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 81ad 	beq.w	8006406 <UART_SetConfig+0x602>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	4613      	mov	r3, r2
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	441a      	add	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d805      	bhi.n	80060c8 <UART_SetConfig+0x2c4>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d202      	bcs.n	80060ce <UART_SetConfig+0x2ca>
      {
        ret = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	74fb      	strb	r3, [r7, #19]
 80060cc:	e19b      	b.n	8006406 <UART_SetConfig+0x602>
      }
      else
      {
        switch (clocksource)
 80060ce:	7efb      	ldrb	r3, [r7, #27]
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	f200 8093 	bhi.w	80061fc <UART_SetConfig+0x3f8>
 80060d6:	a201      	add	r2, pc, #4	; (adr r2, 80060dc <UART_SetConfig+0x2d8>)
 80060d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060dc:	08006121 	.word	0x08006121
 80060e0:	080061fd 	.word	0x080061fd
 80060e4:	08006161 	.word	0x08006161
 80060e8:	080061fd 	.word	0x080061fd
 80060ec:	08006195 	.word	0x08006195
 80060f0:	080061fd 	.word	0x080061fd
 80060f4:	080061fd 	.word	0x080061fd
 80060f8:	080061fd 	.word	0x080061fd
 80060fc:	080061d3 	.word	0x080061d3
 8006100:	efff69f3 	.word	0xefff69f3
 8006104:	40008000 	.word	0x40008000
 8006108:	40013800 	.word	0x40013800
 800610c:	40021000 	.word	0x40021000
 8006110:	40004400 	.word	0x40004400
 8006114:	40004800 	.word	0x40004800
 8006118:	40004c00 	.word	0x40004c00
 800611c:	00f42400 	.word	0x00f42400
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006120:	f7fe f86c 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8006124:	4603      	mov	r3, r0
 8006126:	f04f 0400 	mov.w	r4, #0
 800612a:	ea4f 2904 	mov.w	r9, r4, lsl #8
 800612e:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8006132:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	085b      	lsrs	r3, r3, #1
 800613c:	f04f 0400 	mov.w	r4, #0
 8006140:	eb18 0003 	adds.w	r0, r8, r3
 8006144:	eb49 0104 	adc.w	r1, r9, r4
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f04f 0400 	mov.w	r4, #0
 8006150:	461a      	mov	r2, r3
 8006152:	4623      	mov	r3, r4
 8006154:	f7fa f83e 	bl	80001d4 <__aeabi_uldivmod>
 8006158:	4603      	mov	r3, r0
 800615a:	460c      	mov	r4, r1
 800615c:	617b      	str	r3, [r7, #20]
#endif
            break;
 800615e:	e050      	b.n	8006202 <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	085b      	lsrs	r3, r3, #1
 8006166:	f04f 0400 	mov.w	r4, #0
 800616a:	49ad      	ldr	r1, [pc, #692]	; (8006420 <UART_SetConfig+0x61c>)
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	eb13 0801 	adds.w	r8, r3, r1
 8006174:	eb44 0902 	adc.w	r9, r4, r2
 8006178:	4640      	mov	r0, r8
 800617a:	4649      	mov	r1, r9
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f04f 0400 	mov.w	r4, #0
 8006184:	461a      	mov	r2, r3
 8006186:	4623      	mov	r3, r4
 8006188:	f7fa f824 	bl	80001d4 <__aeabi_uldivmod>
 800618c:	4603      	mov	r3, r0
 800618e:	460c      	mov	r4, r1
 8006190:	617b      	str	r3, [r7, #20]
#endif
            break;
 8006192:	e036      	b.n	8006202 <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006194:	f7fd ff8a 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 8006198:	4603      	mov	r3, r0
 800619a:	461a      	mov	r2, r3
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	021d      	lsls	r5, r3, #8
 80061a2:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 80061a6:	0214      	lsls	r4, r2, #8
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	085b      	lsrs	r3, r3, #1
 80061ae:	461a      	mov	r2, r3
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	18a0      	adds	r0, r4, r2
 80061b6:	eb45 0103 	adc.w	r1, r5, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f04f 0400 	mov.w	r4, #0
 80061c2:	461a      	mov	r2, r3
 80061c4:	4623      	mov	r3, r4
 80061c6:	f7fa f805 	bl	80001d4 <__aeabi_uldivmod>
 80061ca:	4603      	mov	r3, r0
 80061cc:	460c      	mov	r4, r1
 80061ce:	617b      	str	r3, [r7, #20]
#endif
            break;
 80061d0:	e017      	b.n	8006202 <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	085b      	lsrs	r3, r3, #1
 80061d8:	f04f 0400 	mov.w	r4, #0
 80061dc:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80061e0:	f144 0100 	adc.w	r1, r4, #0
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f04f 0400 	mov.w	r4, #0
 80061ec:	461a      	mov	r2, r3
 80061ee:	4623      	mov	r3, r4
 80061f0:	f7f9 fff0 	bl	80001d4 <__aeabi_uldivmod>
 80061f4:	4603      	mov	r3, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	617b      	str	r3, [r7, #20]
#endif
            break;
 80061fa:	e002      	b.n	8006202 <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	74fb      	strb	r3, [r7, #19]
            break;
 8006200:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006208:	d308      	bcc.n	800621c <UART_SetConfig+0x418>
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006210:	d204      	bcs.n	800621c <UART_SetConfig+0x418>
        {
          huart->Instance->BRR = usartdiv;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	60da      	str	r2, [r3, #12]
 800621a:	e0f4      	b.n	8006406 <UART_SetConfig+0x602>
        }
        else
        {
          ret = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	74fb      	strb	r3, [r7, #19]
 8006220:	e0f1      	b.n	8006406 <UART_SetConfig+0x602>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800622a:	d17e      	bne.n	800632a <UART_SetConfig+0x526>
  {
    switch (clocksource)
 800622c:	7efb      	ldrb	r3, [r7, #27]
 800622e:	2b08      	cmp	r3, #8
 8006230:	d85b      	bhi.n	80062ea <UART_SetConfig+0x4e6>
 8006232:	a201      	add	r2, pc, #4	; (adr r2, 8006238 <UART_SetConfig+0x434>)
 8006234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006238:	0800625d 	.word	0x0800625d
 800623c:	0800627b 	.word	0x0800627b
 8006240:	08006299 	.word	0x08006299
 8006244:	080062eb 	.word	0x080062eb
 8006248:	080062b5 	.word	0x080062b5
 800624c:	080062eb 	.word	0x080062eb
 8006250:	080062eb 	.word	0x080062eb
 8006254:	080062eb 	.word	0x080062eb
 8006258:	080062d3 	.word	0x080062d3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800625c:	f7fd ffce 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8006260:	4603      	mov	r3, r0
 8006262:	005a      	lsls	r2, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	085b      	lsrs	r3, r3, #1
 800626a:	441a      	add	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	fbb2 f3f3 	udiv	r3, r2, r3
 8006274:	b29b      	uxth	r3, r3
 8006276:	617b      	str	r3, [r7, #20]
#endif
        break;
 8006278:	e03a      	b.n	80062f0 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800627a:	f7fd ffd5 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 800627e:	4603      	mov	r3, r0
 8006280:	005a      	lsls	r2, r3, #1
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	085b      	lsrs	r3, r3, #1
 8006288:	441a      	add	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006292:	b29b      	uxth	r3, r3
 8006294:	617b      	str	r3, [r7, #20]
#endif
        break;
 8006296:	e02b      	b.n	80062f0 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	085b      	lsrs	r3, r3, #1
 800629e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80062a2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	6852      	ldr	r2, [r2, #4]
 80062aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	617b      	str	r3, [r7, #20]
#endif
        break;
 80062b2:	e01d      	b.n	80062f0 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80062b4:	f7fd fefa 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 80062b8:	4603      	mov	r3, r0
 80062ba:	005a      	lsls	r2, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	085b      	lsrs	r3, r3, #1
 80062c2:	441a      	add	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	617b      	str	r3, [r7, #20]
#endif
        break;
 80062d0:	e00e      	b.n	80062f0 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	085b      	lsrs	r3, r3, #1
 80062d8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	617b      	str	r3, [r7, #20]
#endif
        break;
 80062e8:	e002      	b.n	80062f0 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	74fb      	strb	r3, [r7, #19]
        break;
 80062ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	2b0f      	cmp	r3, #15
 80062f4:	d916      	bls.n	8006324 <UART_SetConfig+0x520>
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062fc:	d212      	bcs.n	8006324 <UART_SetConfig+0x520>
    {
      brrtemp = usartdiv & 0xFFF0U;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	b29b      	uxth	r3, r3
 8006302:	f023 030f 	bic.w	r3, r3, #15
 8006306:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	085b      	lsrs	r3, r3, #1
 800630c:	b29b      	uxth	r3, r3
 800630e:	f003 0307 	and.w	r3, r3, #7
 8006312:	b29a      	uxth	r2, r3
 8006314:	897b      	ldrh	r3, [r7, #10]
 8006316:	4313      	orrs	r3, r2
 8006318:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	897a      	ldrh	r2, [r7, #10]
 8006320:	60da      	str	r2, [r3, #12]
 8006322:	e070      	b.n	8006406 <UART_SetConfig+0x602>
    }
    else
    {
      ret = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	74fb      	strb	r3, [r7, #19]
 8006328:	e06d      	b.n	8006406 <UART_SetConfig+0x602>
    }
  }
  else
  {
    switch (clocksource)
 800632a:	7efb      	ldrb	r3, [r7, #27]
 800632c:	2b08      	cmp	r3, #8
 800632e:	d859      	bhi.n	80063e4 <UART_SetConfig+0x5e0>
 8006330:	a201      	add	r2, pc, #4	; (adr r2, 8006338 <UART_SetConfig+0x534>)
 8006332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006336:	bf00      	nop
 8006338:	0800635d 	.word	0x0800635d
 800633c:	08006379 	.word	0x08006379
 8006340:	08006395 	.word	0x08006395
 8006344:	080063e5 	.word	0x080063e5
 8006348:	080063b1 	.word	0x080063b1
 800634c:	080063e5 	.word	0x080063e5
 8006350:	080063e5 	.word	0x080063e5
 8006354:	080063e5 	.word	0x080063e5
 8006358:	080063cd 	.word	0x080063cd
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800635c:	f7fd ff4e 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8006360:	4602      	mov	r2, r0
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	085b      	lsrs	r3, r3, #1
 8006368:	441a      	add	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006372:	b29b      	uxth	r3, r3
 8006374:	617b      	str	r3, [r7, #20]
#endif
        break;
 8006376:	e038      	b.n	80063ea <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006378:	f7fd ff56 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 800637c:	4602      	mov	r2, r0
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	085b      	lsrs	r3, r3, #1
 8006384:	441a      	add	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	fbb2 f3f3 	udiv	r3, r2, r3
 800638e:	b29b      	uxth	r3, r3
 8006390:	617b      	str	r3, [r7, #20]
#endif
        break;
 8006392:	e02a      	b.n	80063ea <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	085b      	lsrs	r3, r3, #1
 800639a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800639e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6852      	ldr	r2, [r2, #4]
 80063a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	617b      	str	r3, [r7, #20]
#endif
        break;
 80063ae:	e01c      	b.n	80063ea <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80063b0:	f7fd fe7c 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 80063b4:	4602      	mov	r2, r0
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	085b      	lsrs	r3, r3, #1
 80063bc:	441a      	add	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	617b      	str	r3, [r7, #20]
#endif
        break;
 80063ca:	e00e      	b.n	80063ea <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	085b      	lsrs	r3, r3, #1
 80063d2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	fbb2 f3f3 	udiv	r3, r2, r3
 80063de:	b29b      	uxth	r3, r3
 80063e0:	617b      	str	r3, [r7, #20]
#endif
        break;
 80063e2:	e002      	b.n	80063ea <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	74fb      	strb	r3, [r7, #19]
        break;
 80063e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2b0f      	cmp	r3, #15
 80063ee:	d908      	bls.n	8006402 <UART_SetConfig+0x5fe>
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f6:	d204      	bcs.n	8006402 <UART_SetConfig+0x5fe>
    {
      huart->Instance->BRR = usartdiv;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	60da      	str	r2, [r3, #12]
 8006400:	e001      	b.n	8006406 <UART_SetConfig+0x602>
    }
    else
    {
      ret = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006412:	7cfb      	ldrb	r3, [r7, #19]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3720      	adds	r7, #32
 8006418:	46bd      	mov	sp, r7
 800641a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800641e:	bf00      	nop
 8006420:	f4240000 	.word	0xf4240000

08006424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6812      	ldr	r2, [r2, #0]
 8006440:	6852      	ldr	r2, [r2, #4]
 8006442:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800644a:	430a      	orrs	r2, r1
 800644c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	6812      	ldr	r2, [r2, #0]
 8006462:	6852      	ldr	r2, [r2, #4]
 8006464:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800646c:	430a      	orrs	r2, r1
 800646e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	6852      	ldr	r2, [r2, #4]
 8006486:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800648e:	430a      	orrs	r2, r1
 8006490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	6812      	ldr	r2, [r2, #0]
 80064a6:	6852      	ldr	r2, [r2, #4]
 80064a8:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064b0:	430a      	orrs	r2, r1
 80064b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	f003 0310 	and.w	r3, r3, #16
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6812      	ldr	r2, [r2, #0]
 80064c8:	6892      	ldr	r2, [r2, #8]
 80064ca:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064d2:	430a      	orrs	r2, r1
 80064d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	f003 0320 	and.w	r3, r3, #32
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6812      	ldr	r2, [r2, #0]
 80064ea:	6892      	ldr	r2, [r2, #8]
 80064ec:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80064f4:	430a      	orrs	r2, r1
 80064f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006500:	2b00      	cmp	r3, #0
 8006502:	d01a      	beq.n	800653a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	6812      	ldr	r2, [r2, #0]
 800650c:	6852      	ldr	r2, [r2, #4]
 800650e:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006522:	d10a      	bne.n	800653a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6812      	ldr	r2, [r2, #0]
 800652c:	6852      	ldr	r2, [r2, #4]
 800652e:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006536:	430a      	orrs	r2, r1
 8006538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	6812      	ldr	r2, [r2, #0]
 800654e:	6852      	ldr	r2, [r2, #4]
 8006550:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006558:	430a      	orrs	r2, r1
 800655a:	605a      	str	r2, [r3, #4]
  }
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af02      	add	r7, sp, #8
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006570:	2300      	movs	r3, #0
 8006572:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800657a:	f7fb f995 	bl	80018a8 <HAL_GetTick>
 800657e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b08      	cmp	r3, #8
 800658c:	d10e      	bne.n	80065ac <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800658e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f82c 	bl	80065fa <UART_WaitOnFlagUntilTimeout>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e022      	b.n	80065f2 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0304 	and.w	r3, r3, #4
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d10e      	bne.n	80065d8 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f816 	bl	80065fa <UART_WaitOnFlagUntilTimeout>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e00c      	b.n	80065f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2220      	movs	r2, #32
 80065dc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b084      	sub	sp, #16
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	603b      	str	r3, [r7, #0]
 8006606:	4613      	mov	r3, r2
 8006608:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800660a:	e02c      	b.n	8006666 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006612:	d028      	beq.n	8006666 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d007      	beq.n	800662a <UART_WaitOnFlagUntilTimeout+0x30>
 800661a:	f7fb f945 	bl	80018a8 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	1ad2      	subs	r2, r2, r3
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	429a      	cmp	r2, r3
 8006628:	d91d      	bls.n	8006666 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	6812      	ldr	r2, [r2, #0]
 8006632:	6812      	ldr	r2, [r2, #0]
 8006634:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006638:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	6812      	ldr	r2, [r2, #0]
 8006642:	6892      	ldr	r2, [r2, #8]
 8006644:	f022 0201 	bic.w	r2, r2, #1
 8006648:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2220      	movs	r2, #32
 800664e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2220      	movs	r2, #32
 8006656:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e00f      	b.n	8006686 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69da      	ldr	r2, [r3, #28]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	401a      	ands	r2, r3
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	429a      	cmp	r2, r3
 8006674:	bf0c      	ite	eq
 8006676:	2301      	moveq	r3, #1
 8006678:	2300      	movne	r3, #0
 800667a:	b2db      	uxtb	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	79fb      	ldrb	r3, [r7, #7]
 8006680:	429a      	cmp	r2, r3
 8006682:	d0c3      	beq.n	800660c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800668e:	b084      	sub	sp, #16
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	f107 0014 	add.w	r0, r7, #20
 800669c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	b004      	add	sp, #16
 80066ae:	4770      	bx	lr

080066b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80066b8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80066bc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	89fb      	ldrh	r3, [r7, #14]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80066e8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80066ec:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	b21a      	sxth	r2, r3
 80066f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80066fc:	43db      	mvns	r3, r3
 80066fe:	b21b      	sxth	r3, r3
 8006700:	4013      	ands	r3, r2
 8006702:	b21b      	sxth	r3, r3
 8006704:	b29a      	uxth	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	460b      	mov	r3, r1
 8006724:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006734:	b084      	sub	sp, #16
 8006736:	b580      	push	{r7, lr}
 8006738:	b082      	sub	sp, #8
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	f107 0014 	add.w	r0, r7, #20
 8006742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7ff ffa2 	bl	80066b0 <USB_EnableGlobalInt>

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006778:	b004      	add	sp, #16
 800677a:	4770      	bx	lr

0800677c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800677c:	b490      	push	{r4, r7}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29b      	uxth	r3, r3
 8006798:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800679c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a0:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	78db      	ldrb	r3, [r3, #3]
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d819      	bhi.n	80067de <USB_ActivateEndpoint+0x62>
 80067aa:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <USB_ActivateEndpoint+0x34>)
 80067ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b0:	080067c1 	.word	0x080067c1
 80067b4:	080067d5 	.word	0x080067d5
 80067b8:	080067e5 	.word	0x080067e5
 80067bc:	080067cb 	.word	0x080067cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80067c0:	8abb      	ldrh	r3, [r7, #20]
 80067c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067c6:	82bb      	strh	r3, [r7, #20]
      break;
 80067c8:	e00d      	b.n	80067e6 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80067ca:	8abb      	ldrh	r3, [r7, #20]
 80067cc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80067d0:	82bb      	strh	r3, [r7, #20]
      break;
 80067d2:	e008      	b.n	80067e6 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80067d4:	8abb      	ldrh	r3, [r7, #20]
 80067d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067da:	82bb      	strh	r3, [r7, #20]
      break;
 80067dc:	e003      	b.n	80067e6 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	75fb      	strb	r3, [r7, #23]
      break;
 80067e2:	e000      	b.n	80067e6 <USB_ActivateEndpoint+0x6a>
      break;
 80067e4:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal);
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	8aba      	ldrh	r2, [r7, #20]
 80067f2:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	b29b      	uxth	r3, r3
 8006802:	b21b      	sxth	r3, r3
 8006804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680c:	b21a      	sxth	r2, r3
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	b21b      	sxth	r3, r3
 8006814:	4313      	orrs	r3, r2
 8006816:	b21b      	sxth	r3, r3
 8006818:	b29c      	uxth	r4, r3
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	441a      	add	r2, r3
 8006824:	4b87      	ldr	r3, [pc, #540]	; (8006a44 <USB_ActivateEndpoint+0x2c8>)
 8006826:	4323      	orrs	r3, r4
 8006828:	b29b      	uxth	r3, r3
 800682a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	7b1b      	ldrb	r3, [r3, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	f040 810d 	bne.w	8006a50 <USB_ActivateEndpoint+0x2d4>
  {
    if (ep->is_in != 0U)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	785b      	ldrb	r3, [r3, #1]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d067      	beq.n	800690e <USB_ActivateEndpoint+0x192>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800683e:	687c      	ldr	r4, [r7, #4]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006846:	b29b      	uxth	r3, r3
 8006848:	441c      	add	r4, r3
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	4423      	add	r3, r4
 8006852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006856:	461c      	mov	r4, r3
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	88db      	ldrh	r3, [r3, #6]
 800685c:	085b      	lsrs	r3, r3, #1
 800685e:	b29b      	uxth	r3, r3
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	b29b      	uxth	r3, r3
 8006864:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	b29c      	uxth	r4, r3
 8006874:	4623      	mov	r3, r4
 8006876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687a:	2b00      	cmp	r3, #0
 800687c:	d014      	beq.n	80068a8 <USB_ActivateEndpoint+0x12c>
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	b29b      	uxth	r3, r3
 800688c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006894:	b29c      	uxth	r4, r3
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	441a      	add	r2, r3
 80068a0:	4b69      	ldr	r3, [pc, #420]	; (8006a48 <USB_ActivateEndpoint+0x2cc>)
 80068a2:	4323      	orrs	r3, r4
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	78db      	ldrb	r3, [r3, #3]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d018      	beq.n	80068e2 <USB_ActivateEndpoint+0x166>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c6:	b29c      	uxth	r4, r3
 80068c8:	f084 0320 	eor.w	r3, r4, #32
 80068cc:	b29c      	uxth	r4, r3
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	441a      	add	r2, r3
 80068d8:	4b5a      	ldr	r3, [pc, #360]	; (8006a44 <USB_ActivateEndpoint+0x2c8>)
 80068da:	4323      	orrs	r3, r4
 80068dc:	b29b      	uxth	r3, r3
 80068de:	8013      	strh	r3, [r2, #0]
 80068e0:	e226      	b.n	8006d30 <USB_ActivateEndpoint+0x5b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f8:	b29c      	uxth	r4, r3
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	441a      	add	r2, r3
 8006904:	4b4f      	ldr	r3, [pc, #316]	; (8006a44 <USB_ActivateEndpoint+0x2c8>)
 8006906:	4323      	orrs	r3, r4
 8006908:	b29b      	uxth	r3, r3
 800690a:	8013      	strh	r3, [r2, #0]
 800690c:	e210      	b.n	8006d30 <USB_ActivateEndpoint+0x5b4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800690e:	687c      	ldr	r4, [r7, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006916:	b29b      	uxth	r3, r3
 8006918:	441c      	add	r4, r3
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	4423      	add	r3, r4
 8006922:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006926:	461c      	mov	r4, r3
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	88db      	ldrh	r3, [r3, #6]
 800692c:	085b      	lsrs	r3, r3, #1
 800692e:	b29b      	uxth	r3, r3
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	b29b      	uxth	r3, r3
 8006934:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006936:	687c      	ldr	r4, [r7, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693e:	b29b      	uxth	r3, r3
 8006940:	441c      	add	r4, r3
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	4423      	add	r3, r4
 800694a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d111      	bne.n	800697c <USB_ActivateEndpoint+0x200>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	881a      	ldrh	r2, [r3, #0]
 800695c:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8006960:	4013      	ands	r3, r2
 8006962:	b29a      	uxth	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	801a      	strh	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006974:	b29a      	uxth	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	801a      	strh	r2, [r3, #0]
 800697a:	e026      	b.n	80069ca <USB_ActivateEndpoint+0x24e>
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	2b3d      	cmp	r3, #61	; 0x3d
 8006982:	d813      	bhi.n	80069ac <USB_ActivateEndpoint+0x230>
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	085b      	lsrs	r3, r3, #1
 800698a:	613b      	str	r3, [r7, #16]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <USB_ActivateEndpoint+0x222>
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	3301      	adds	r3, #1
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	029b      	lsls	r3, r3, #10
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	801a      	strh	r2, [r3, #0]
 80069aa:	e00e      	b.n	80069ca <USB_ActivateEndpoint+0x24e>
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	095b      	lsrs	r3, r3, #5
 80069b2:	613b      	str	r3, [r7, #16]
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	029b      	lsls	r3, r3, #10
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	b29c      	uxth	r4, r3
 80069d8:	4623      	mov	r3, r4
 80069da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d014      	beq.n	8006a0c <USB_ActivateEndpoint+0x290>
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f8:	b29c      	uxth	r4, r3
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	441a      	add	r2, r3
 8006a04:	4b11      	ldr	r3, [pc, #68]	; (8006a4c <USB_ActivateEndpoint+0x2d0>)
 8006a06:	4323      	orrs	r3, r4
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a22:	b29c      	uxth	r4, r3
 8006a24:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006a28:	b29c      	uxth	r4, r3
 8006a2a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006a2e:	b29c      	uxth	r4, r3
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	441a      	add	r2, r3
 8006a3a:	4b02      	ldr	r3, [pc, #8]	; (8006a44 <USB_ActivateEndpoint+0x2c8>)
 8006a3c:	4323      	orrs	r3, r4
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	8013      	strh	r3, [r2, #0]
 8006a42:	e175      	b.n	8006d30 <USB_ActivateEndpoint+0x5b4>
 8006a44:	ffff8080 	.word	0xffff8080
 8006a48:	ffff80c0 	.word	0xffff80c0
 8006a4c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a66:	b29c      	uxth	r4, r3
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	441a      	add	r2, r3
 8006a72:	4b96      	ldr	r3, [pc, #600]	; (8006ccc <USB_ActivateEndpoint+0x550>)
 8006a74:	4323      	orrs	r3, r4
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006a7a:	687c      	ldr	r4, [r7, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	441c      	add	r4, r3
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	4423      	add	r3, r4
 8006a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a92:	461c      	mov	r4, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	891b      	ldrh	r3, [r3, #8]
 8006a98:	085b      	lsrs	r3, r3, #1
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	8023      	strh	r3, [r4, #0]
 8006aa2:	687c      	ldr	r4, [r7, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	441c      	add	r4, r3
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	4423      	add	r3, r4
 8006ab6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006aba:	461c      	mov	r4, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	895b      	ldrh	r3, [r3, #10]
 8006ac0:	085b      	lsrs	r3, r3, #1
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	785b      	ldrb	r3, [r3, #1]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f040 8088 	bne.w	8006be4 <USB_ActivateEndpoint+0x468>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	b29c      	uxth	r4, r3
 8006ae2:	4623      	mov	r3, r4
 8006ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d014      	beq.n	8006b16 <USB_ActivateEndpoint+0x39a>
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b02:	b29c      	uxth	r4, r3
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	441a      	add	r2, r3
 8006b0e:	4b70      	ldr	r3, [pc, #448]	; (8006cd0 <USB_ActivateEndpoint+0x554>)
 8006b10:	4323      	orrs	r3, r4
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	b29c      	uxth	r4, r3
 8006b24:	4623      	mov	r3, r4
 8006b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d014      	beq.n	8006b58 <USB_ActivateEndpoint+0x3dc>
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b44:	b29c      	uxth	r4, r3
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	441a      	add	r2, r3
 8006b50:	4b60      	ldr	r3, [pc, #384]	; (8006cd4 <USB_ActivateEndpoint+0x558>)
 8006b52:	4323      	orrs	r3, r4
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6e:	b29c      	uxth	r4, r3
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	441a      	add	r2, r3
 8006b7a:	4b56      	ldr	r3, [pc, #344]	; (8006cd4 <USB_ActivateEndpoint+0x558>)
 8006b7c:	4323      	orrs	r3, r4
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b98:	b29c      	uxth	r4, r3
 8006b9a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006b9e:	b29c      	uxth	r4, r3
 8006ba0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006ba4:	b29c      	uxth	r4, r3
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	441a      	add	r2, r3
 8006bb0:	4b49      	ldr	r3, [pc, #292]	; (8006cd8 <USB_ActivateEndpoint+0x55c>)
 8006bb2:	4323      	orrs	r3, r4
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bce:	b29c      	uxth	r4, r3
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	441a      	add	r2, r3
 8006bda:	4b3f      	ldr	r3, [pc, #252]	; (8006cd8 <USB_ActivateEndpoint+0x55c>)
 8006bdc:	4323      	orrs	r3, r4
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	8013      	strh	r3, [r2, #0]
 8006be2:	e0a5      	b.n	8006d30 <USB_ActivateEndpoint+0x5b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29c      	uxth	r4, r3
 8006bf2:	4623      	mov	r3, r4
 8006bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d014      	beq.n	8006c26 <USB_ActivateEndpoint+0x4aa>
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c12:	b29c      	uxth	r4, r3
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	441a      	add	r2, r3
 8006c1e:	4b2c      	ldr	r3, [pc, #176]	; (8006cd0 <USB_ActivateEndpoint+0x554>)
 8006c20:	4323      	orrs	r3, r4
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	b29c      	uxth	r4, r3
 8006c34:	4623      	mov	r3, r4
 8006c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d014      	beq.n	8006c68 <USB_ActivateEndpoint+0x4ec>
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c54:	b29c      	uxth	r4, r3
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	441a      	add	r2, r3
 8006c60:	4b1c      	ldr	r3, [pc, #112]	; (8006cd4 <USB_ActivateEndpoint+0x558>)
 8006c62:	4323      	orrs	r3, r4
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7e:	b29c      	uxth	r4, r3
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	441a      	add	r2, r3
 8006c8a:	4b11      	ldr	r3, [pc, #68]	; (8006cd0 <USB_ActivateEndpoint+0x554>)
 8006c8c:	4323      	orrs	r3, r4
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	78db      	ldrb	r3, [r3, #3]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d020      	beq.n	8006cdc <USB_ActivateEndpoint+0x560>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb0:	b29c      	uxth	r4, r3
 8006cb2:	f084 0320 	eor.w	r3, r4, #32
 8006cb6:	b29c      	uxth	r4, r3
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	441a      	add	r2, r3
 8006cc2:	4b05      	ldr	r3, [pc, #20]	; (8006cd8 <USB_ActivateEndpoint+0x55c>)
 8006cc4:	4323      	orrs	r3, r4
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	8013      	strh	r3, [r2, #0]
 8006cca:	e01c      	b.n	8006d06 <USB_ActivateEndpoint+0x58a>
 8006ccc:	ffff8180 	.word	0xffff8180
 8006cd0:	ffffc080 	.word	0xffffc080
 8006cd4:	ffff80c0 	.word	0xffff80c0
 8006cd8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cf2:	b29c      	uxth	r4, r3
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	441a      	add	r2, r3
 8006cfe:	4b0f      	ldr	r3, [pc, #60]	; (8006d3c <USB_ActivateEndpoint+0x5c0>)
 8006d00:	4323      	orrs	r3, r4
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1c:	b29c      	uxth	r4, r3
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	441a      	add	r2, r3
 8006d28:	4b04      	ldr	r3, [pc, #16]	; (8006d3c <USB_ActivateEndpoint+0x5c0>)
 8006d2a:	4323      	orrs	r3, r4
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bc90      	pop	{r4, r7}
 8006d3a:	4770      	bx	lr
 8006d3c:	ffff8080 	.word	0xffff8080

08006d40 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d40:	b490      	push	{r4, r7}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	7b1b      	ldrb	r3, [r3, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d171      	bne.n	8006e36 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	785b      	ldrb	r3, [r3, #1]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d036      	beq.n	8006dc8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	b29c      	uxth	r4, r3
 8006d68:	4623      	mov	r3, r4
 8006d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d014      	beq.n	8006d9c <USB_DeactivateEndpoint+0x5c>
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d88:	b29c      	uxth	r4, r3
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	441a      	add	r2, r3
 8006d94:	4b6b      	ldr	r3, [pc, #428]	; (8006f44 <USB_DeactivateEndpoint+0x204>)
 8006d96:	4323      	orrs	r3, r4
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db2:	b29c      	uxth	r4, r3
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	441a      	add	r2, r3
 8006dbe:	4b62      	ldr	r3, [pc, #392]	; (8006f48 <USB_DeactivateEndpoint+0x208>)
 8006dc0:	4323      	orrs	r3, r4
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	8013      	strh	r3, [r2, #0]
 8006dc6:	e144      	b.n	8007052 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	b29c      	uxth	r4, r3
 8006dd6:	4623      	mov	r3, r4
 8006dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d014      	beq.n	8006e0a <USB_DeactivateEndpoint+0xca>
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df6:	b29c      	uxth	r4, r3
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	441a      	add	r2, r3
 8006e02:	4b52      	ldr	r3, [pc, #328]	; (8006f4c <USB_DeactivateEndpoint+0x20c>)
 8006e04:	4323      	orrs	r3, r4
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e20:	b29c      	uxth	r4, r3
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	441a      	add	r2, r3
 8006e2c:	4b46      	ldr	r3, [pc, #280]	; (8006f48 <USB_DeactivateEndpoint+0x208>)
 8006e2e:	4323      	orrs	r3, r4
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	8013      	strh	r3, [r2, #0]
 8006e34:	e10d      	b.n	8007052 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	785b      	ldrb	r3, [r3, #1]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f040 8088 	bne.w	8006f50 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	b29c      	uxth	r4, r3
 8006e4e:	4623      	mov	r3, r4
 8006e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d014      	beq.n	8006e82 <USB_DeactivateEndpoint+0x142>
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6e:	b29c      	uxth	r4, r3
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	441a      	add	r2, r3
 8006e7a:	4b34      	ldr	r3, [pc, #208]	; (8006f4c <USB_DeactivateEndpoint+0x20c>)
 8006e7c:	4323      	orrs	r3, r4
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	881b      	ldrh	r3, [r3, #0]
 8006e8e:	b29c      	uxth	r4, r3
 8006e90:	4623      	mov	r3, r4
 8006e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d014      	beq.n	8006ec4 <USB_DeactivateEndpoint+0x184>
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb0:	b29c      	uxth	r4, r3
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	441a      	add	r2, r3
 8006ebc:	4b21      	ldr	r3, [pc, #132]	; (8006f44 <USB_DeactivateEndpoint+0x204>)
 8006ebe:	4323      	orrs	r3, r4
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eda:	b29c      	uxth	r4, r3
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	441a      	add	r2, r3
 8006ee6:	4b17      	ldr	r3, [pc, #92]	; (8006f44 <USB_DeactivateEndpoint+0x204>)
 8006ee8:	4323      	orrs	r3, r4
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f04:	b29c      	uxth	r4, r3
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	441a      	add	r2, r3
 8006f10:	4b0d      	ldr	r3, [pc, #52]	; (8006f48 <USB_DeactivateEndpoint+0x208>)
 8006f12:	4323      	orrs	r3, r4
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f2e:	b29c      	uxth	r4, r3
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	441a      	add	r2, r3
 8006f3a:	4b03      	ldr	r3, [pc, #12]	; (8006f48 <USB_DeactivateEndpoint+0x208>)
 8006f3c:	4323      	orrs	r3, r4
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	8013      	strh	r3, [r2, #0]
 8006f42:	e086      	b.n	8007052 <USB_DeactivateEndpoint+0x312>
 8006f44:	ffff80c0 	.word	0xffff80c0
 8006f48:	ffff8080 	.word	0xffff8080
 8006f4c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b29c      	uxth	r4, r3
 8006f5e:	4623      	mov	r3, r4
 8006f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d014      	beq.n	8006f92 <USB_DeactivateEndpoint+0x252>
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7e:	b29c      	uxth	r4, r3
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	441a      	add	r2, r3
 8006f8a:	4b35      	ldr	r3, [pc, #212]	; (8007060 <USB_DeactivateEndpoint+0x320>)
 8006f8c:	4323      	orrs	r3, r4
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	b29c      	uxth	r4, r3
 8006fa0:	4623      	mov	r3, r4
 8006fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d014      	beq.n	8006fd4 <USB_DeactivateEndpoint+0x294>
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc0:	b29c      	uxth	r4, r3
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	441a      	add	r2, r3
 8006fcc:	4b25      	ldr	r3, [pc, #148]	; (8007064 <USB_DeactivateEndpoint+0x324>)
 8006fce:	4323      	orrs	r3, r4
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fea:	b29c      	uxth	r4, r3
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	441a      	add	r2, r3
 8006ff6:	4b1a      	ldr	r3, [pc, #104]	; (8007060 <USB_DeactivateEndpoint+0x320>)
 8006ff8:	4323      	orrs	r3, r4
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	b29b      	uxth	r3, r3
 800700c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007014:	b29c      	uxth	r4, r3
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	441a      	add	r2, r3
 8007020:	4b11      	ldr	r3, [pc, #68]	; (8007068 <USB_DeactivateEndpoint+0x328>)
 8007022:	4323      	orrs	r3, r4
 8007024:	b29b      	uxth	r3, r3
 8007026:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	b29b      	uxth	r3, r3
 8007036:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800703a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703e:	b29c      	uxth	r4, r3
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	441a      	add	r2, r3
 800704a:	4b07      	ldr	r3, [pc, #28]	; (8007068 <USB_DeactivateEndpoint+0x328>)
 800704c:	4323      	orrs	r3, r4
 800704e:	b29b      	uxth	r3, r3
 8007050:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bc90      	pop	{r4, r7}
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	ffffc080 	.word	0xffffc080
 8007064:	ffff80c0 	.word	0xffff80c0
 8007068:	ffff8080 	.word	0xffff8080

0800706c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800706c:	b590      	push	{r4, r7, lr}
 800706e:	b095      	sub	sp, #84	; 0x54
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len = ep->xfer_len;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* IN endpoint */
  if (ep->is_in == 1U)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	785b      	ldrb	r3, [r3, #1]
 8007080:	2b01      	cmp	r3, #1
 8007082:	f040 815f 	bne.w	8007344 <USB_EPStartXfer+0x2d8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	699a      	ldr	r2, [r3, #24]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	429a      	cmp	r2, r3
 8007090:	d909      	bls.n	80070a6 <USB_EPStartXfer+0x3a>
    {
      len = ep->maxpacket;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	699a      	ldr	r2, [r3, #24]
 800709c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800709e:	1ad2      	subs	r2, r2, r3
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	619a      	str	r2, [r3, #24]
 80070a4:	e005      	b.n	80070b2 <USB_EPStartXfer+0x46>
    }
    else
    {
      len = ep->xfer_len;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2200      	movs	r2, #0
 80070b0:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	7b1b      	ldrb	r3, [r3, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d11a      	bne.n	80070f0 <USB_EPStartXfer+0x84>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	6959      	ldr	r1, [r3, #20]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	88da      	ldrh	r2, [r3, #6]
 80070c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fbb0 	bl	800782c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070cc:	687c      	ldr	r4, [r7, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	441c      	add	r4, r3
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	00db      	lsls	r3, r3, #3
 80070de:	4423      	add	r3, r4
 80070e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070e4:	633b      	str	r3, [r7, #48]	; 0x30
 80070e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	801a      	strh	r2, [r3, #0]
 80070ee:	e10d      	b.n	800730c <USB_EPStartXfer+0x2a0>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007102:	2b00      	cmp	r3, #0
 8007104:	d063      	beq.n	80071ce <USB_EPStartXfer+0x162>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007106:	687c      	ldr	r4, [r7, #4]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	785b      	ldrb	r3, [r3, #1]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d145      	bne.n	800719c <USB_EPStartXfer+0x130>
 8007110:	687c      	ldr	r4, [r7, #4]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007118:	b29b      	uxth	r3, r3
 800711a:	441c      	add	r4, r3
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	00db      	lsls	r3, r3, #3
 8007122:	4423      	add	r3, r4
 8007124:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800712a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800712c:	2b00      	cmp	r3, #0
 800712e:	d111      	bne.n	8007154 <USB_EPStartXfer+0xe8>
 8007130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007132:	881a      	ldrh	r2, [r3, #0]
 8007134:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8007138:	4013      	ands	r3, r2
 800713a:	b29a      	uxth	r2, r3
 800713c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713e:	801a      	strh	r2, [r3, #0]
 8007140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800714c:	b29a      	uxth	r2, r3
 800714e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007150:	801a      	strh	r2, [r3, #0]
 8007152:	e037      	b.n	80071c4 <USB_EPStartXfer+0x158>
 8007154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007156:	2b3d      	cmp	r3, #61	; 0x3d
 8007158:	d811      	bhi.n	800717e <USB_EPStartXfer+0x112>
 800715a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800715c:	085b      	lsrs	r3, r3, #1
 800715e:	647b      	str	r3, [r7, #68]	; 0x44
 8007160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <USB_EPStartXfer+0x104>
 800716a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800716c:	3301      	adds	r3, #1
 800716e:	647b      	str	r3, [r7, #68]	; 0x44
 8007170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007172:	b29b      	uxth	r3, r3
 8007174:	029b      	lsls	r3, r3, #10
 8007176:	b29a      	uxth	r2, r3
 8007178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717a:	801a      	strh	r2, [r3, #0]
 800717c:	e022      	b.n	80071c4 <USB_EPStartXfer+0x158>
 800717e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007180:	095b      	lsrs	r3, r3, #5
 8007182:	647b      	str	r3, [r7, #68]	; 0x44
 8007184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007186:	b29b      	uxth	r3, r3
 8007188:	029b      	lsls	r3, r3, #10
 800718a:	b29b      	uxth	r3, r3
 800718c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007194:	b29a      	uxth	r2, r3
 8007196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007198:	801a      	strh	r2, [r3, #0]
 800719a:	e013      	b.n	80071c4 <USB_EPStartXfer+0x158>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	785b      	ldrb	r3, [r3, #1]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d10f      	bne.n	80071c4 <USB_EPStartXfer+0x158>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	441c      	add	r4, r3
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	4423      	add	r3, r4
 80071b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80071bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071be:	b29a      	uxth	r2, r3
 80071c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c2:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	895b      	ldrh	r3, [r3, #10]
 80071c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80071cc:	e062      	b.n	8007294 <USB_EPStartXfer+0x228>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d145      	bne.n	8007262 <USB_EPStartXfer+0x1f6>
 80071d6:	687c      	ldr	r4, [r7, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071de:	b29b      	uxth	r3, r3
 80071e0:	441c      	add	r4, r3
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	00db      	lsls	r3, r3, #3
 80071e8:	4423      	add	r3, r4
 80071ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071ee:	627b      	str	r3, [r7, #36]	; 0x24
 80071f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d111      	bne.n	800721a <USB_EPStartXfer+0x1ae>
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	881a      	ldrh	r2, [r3, #0]
 80071fa:	f243 33ff 	movw	r3, #13311	; 0x33ff
 80071fe:	4013      	ands	r3, r2
 8007200:	b29a      	uxth	r2, r3
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	801a      	strh	r2, [r3, #0]
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800720e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007212:	b29a      	uxth	r2, r3
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	801a      	strh	r2, [r3, #0]
 8007218:	e038      	b.n	800728c <USB_EPStartXfer+0x220>
 800721a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800721c:	2b3d      	cmp	r3, #61	; 0x3d
 800721e:	d811      	bhi.n	8007244 <USB_EPStartXfer+0x1d8>
 8007220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007222:	085b      	lsrs	r3, r3, #1
 8007224:	643b      	str	r3, [r7, #64]	; 0x40
 8007226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <USB_EPStartXfer+0x1ca>
 8007230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007232:	3301      	adds	r3, #1
 8007234:	643b      	str	r3, [r7, #64]	; 0x40
 8007236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007238:	b29b      	uxth	r3, r3
 800723a:	029b      	lsls	r3, r3, #10
 800723c:	b29a      	uxth	r2, r3
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	801a      	strh	r2, [r3, #0]
 8007242:	e023      	b.n	800728c <USB_EPStartXfer+0x220>
 8007244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007246:	095b      	lsrs	r3, r3, #5
 8007248:	643b      	str	r3, [r7, #64]	; 0x40
 800724a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800724c:	b29b      	uxth	r3, r3
 800724e:	029b      	lsls	r3, r3, #10
 8007250:	b29b      	uxth	r3, r3
 8007252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800725a:	b29a      	uxth	r2, r3
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	801a      	strh	r2, [r3, #0]
 8007260:	e014      	b.n	800728c <USB_EPStartXfer+0x220>
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	785b      	ldrb	r3, [r3, #1]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d110      	bne.n	800728c <USB_EPStartXfer+0x220>
 800726a:	687c      	ldr	r4, [r7, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007272:	b29b      	uxth	r3, r3
 8007274:	441c      	add	r4, r3
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	00db      	lsls	r3, r3, #3
 800727c:	4423      	add	r3, r4
 800727e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007282:	623b      	str	r3, [r7, #32]
 8007284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007286:	b29a      	uxth	r2, r3
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	891b      	ldrh	r3, [r3, #8]
 8007290:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	6959      	ldr	r1, [r3, #20]
 8007298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800729a:	b29b      	uxth	r3, r3
 800729c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fac3 	bl	800782c <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	785b      	ldrb	r3, [r3, #1]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d115      	bne.n	80072da <USB_EPStartXfer+0x26e>
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c4:	b29c      	uxth	r4, r3
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	441a      	add	r2, r3
 80072d0:	4b9a      	ldr	r3, [pc, #616]	; (800753c <USB_EPStartXfer+0x4d0>)
 80072d2:	4323      	orrs	r3, r4
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	8013      	strh	r3, [r2, #0]
 80072d8:	e018      	b.n	800730c <USB_EPStartXfer+0x2a0>
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	785b      	ldrb	r3, [r3, #1]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d114      	bne.n	800730c <USB_EPStartXfer+0x2a0>
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f8:	b29c      	uxth	r4, r3
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	441a      	add	r2, r3
 8007304:	4b8e      	ldr	r3, [pc, #568]	; (8007540 <USB_EPStartXfer+0x4d4>)
 8007306:	4323      	orrs	r3, r4
 8007308:	b29b      	uxth	r3, r3
 800730a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	b29b      	uxth	r3, r3
 800731a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800731e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007322:	b29c      	uxth	r4, r3
 8007324:	f084 0310 	eor.w	r3, r4, #16
 8007328:	b29c      	uxth	r4, r3
 800732a:	f084 0320 	eor.w	r3, r4, #32
 800732e:	b29c      	uxth	r4, r3
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	441a      	add	r2, r3
 800733a:	4b82      	ldr	r3, [pc, #520]	; (8007544 <USB_EPStartXfer+0x4d8>)
 800733c:	4323      	orrs	r3, r4
 800733e:	b29b      	uxth	r3, r3
 8007340:	8013      	strh	r3, [r2, #0]
 8007342:	e13f      	b.n	80075c4 <USB_EPStartXfer+0x558>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	699a      	ldr	r2, [r3, #24]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	429a      	cmp	r2, r3
 800734e:	d909      	bls.n	8007364 <USB_EPStartXfer+0x2f8>
    {
      len = ep->maxpacket;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	699a      	ldr	r2, [r3, #24]
 800735a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800735c:	1ad2      	subs	r2, r2, r3
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	619a      	str	r2, [r3, #24]
 8007362:	e005      	b.n	8007370 <USB_EPStartXfer+0x304>
    }
    else
    {
      len = ep->xfer_len;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2200      	movs	r2, #0
 800736e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	7b1b      	ldrb	r3, [r3, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d145      	bne.n	8007404 <USB_EPStartXfer+0x398>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007378:	687c      	ldr	r4, [r7, #4]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007380:	b29b      	uxth	r3, r3
 8007382:	441c      	add	r4, r3
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	00db      	lsls	r3, r3, #3
 800738a:	4423      	add	r3, r4
 800738c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007390:	61fb      	str	r3, [r7, #28]
 8007392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007394:	2b00      	cmp	r3, #0
 8007396:	d111      	bne.n	80073bc <USB_EPStartXfer+0x350>
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	881a      	ldrh	r2, [r3, #0]
 800739c:	f243 33ff 	movw	r3, #13311	; 0x33ff
 80073a0:	4013      	ands	r3, r2
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	801a      	strh	r2, [r3, #0]
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	801a      	strh	r2, [r3, #0]
 80073ba:	e0e8      	b.n	800758e <USB_EPStartXfer+0x522>
 80073bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073be:	2b3d      	cmp	r3, #61	; 0x3d
 80073c0:	d811      	bhi.n	80073e6 <USB_EPStartXfer+0x37a>
 80073c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073c4:	085b      	lsrs	r3, r3, #1
 80073c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <USB_EPStartXfer+0x36c>
 80073d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d4:	3301      	adds	r3, #1
 80073d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073da:	b29b      	uxth	r3, r3
 80073dc:	029b      	lsls	r3, r3, #10
 80073de:	b29a      	uxth	r2, r3
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	801a      	strh	r2, [r3, #0]
 80073e4:	e0d3      	b.n	800758e <USB_EPStartXfer+0x522>
 80073e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e8:	095b      	lsrs	r3, r3, #5
 80073ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	029b      	lsls	r3, r3, #10
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	801a      	strh	r2, [r3, #0]
 8007402:	e0c4      	b.n	800758e <USB_EPStartXfer+0x522>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	785b      	ldrb	r3, [r3, #1]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d145      	bne.n	8007498 <USB_EPStartXfer+0x42c>
 800740c:	687c      	ldr	r4, [r7, #4]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007414:	b29b      	uxth	r3, r3
 8007416:	441c      	add	r4, r3
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	00db      	lsls	r3, r3, #3
 800741e:	4423      	add	r3, r4
 8007420:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007424:	61bb      	str	r3, [r7, #24]
 8007426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007428:	2b00      	cmp	r3, #0
 800742a:	d111      	bne.n	8007450 <USB_EPStartXfer+0x3e4>
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	881a      	ldrh	r2, [r3, #0]
 8007430:	f243 33ff 	movw	r3, #13311	; 0x33ff
 8007434:	4013      	ands	r3, r2
 8007436:	b29a      	uxth	r2, r3
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	801a      	strh	r2, [r3, #0]
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	881b      	ldrh	r3, [r3, #0]
 8007440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007448:	b29a      	uxth	r2, r3
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	801a      	strh	r2, [r3, #0]
 800744e:	e038      	b.n	80074c2 <USB_EPStartXfer+0x456>
 8007450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007452:	2b3d      	cmp	r3, #61	; 0x3d
 8007454:	d811      	bhi.n	800747a <USB_EPStartXfer+0x40e>
 8007456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007458:	085b      	lsrs	r3, r3, #1
 800745a:	63bb      	str	r3, [r7, #56]	; 0x38
 800745c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <USB_EPStartXfer+0x400>
 8007466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007468:	3301      	adds	r3, #1
 800746a:	63bb      	str	r3, [r7, #56]	; 0x38
 800746c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746e:	b29b      	uxth	r3, r3
 8007470:	029b      	lsls	r3, r3, #10
 8007472:	b29a      	uxth	r2, r3
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	801a      	strh	r2, [r3, #0]
 8007478:	e023      	b.n	80074c2 <USB_EPStartXfer+0x456>
 800747a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800747c:	095b      	lsrs	r3, r3, #5
 800747e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007482:	b29b      	uxth	r3, r3
 8007484:	029b      	lsls	r3, r3, #10
 8007486:	b29b      	uxth	r3, r3
 8007488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800748c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007490:	b29a      	uxth	r2, r3
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	801a      	strh	r2, [r3, #0]
 8007496:	e014      	b.n	80074c2 <USB_EPStartXfer+0x456>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	785b      	ldrb	r3, [r3, #1]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d110      	bne.n	80074c2 <USB_EPStartXfer+0x456>
 80074a0:	687c      	ldr	r4, [r7, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	441c      	add	r4, r3
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	00db      	lsls	r3, r3, #3
 80074b2:	4423      	add	r3, r4
 80074b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074b8:	617b      	str	r3, [r7, #20]
 80074ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074bc:	b29a      	uxth	r2, r3
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	801a      	strh	r2, [r3, #0]
 80074c2:	687c      	ldr	r4, [r7, #4]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	785b      	ldrb	r3, [r3, #1]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d14c      	bne.n	8007566 <USB_EPStartXfer+0x4fa>
 80074cc:	687c      	ldr	r4, [r7, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	441c      	add	r4, r3
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	00db      	lsls	r3, r3, #3
 80074de:	4423      	add	r3, r4
 80074e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074e4:	613b      	str	r3, [r7, #16]
 80074e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d111      	bne.n	8007510 <USB_EPStartXfer+0x4a4>
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	881a      	ldrh	r2, [r3, #0]
 80074f0:	f243 33ff 	movw	r3, #13311	; 0x33ff
 80074f4:	4013      	ands	r3, r2
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	801a      	strh	r2, [r3, #0]
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007508:	b29a      	uxth	r2, r3
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	801a      	strh	r2, [r3, #0]
 800750e:	e03e      	b.n	800758e <USB_EPStartXfer+0x522>
 8007510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007512:	2b3d      	cmp	r3, #61	; 0x3d
 8007514:	d818      	bhi.n	8007548 <USB_EPStartXfer+0x4dc>
 8007516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007518:	085b      	lsrs	r3, r3, #1
 800751a:	637b      	str	r3, [r7, #52]	; 0x34
 800751c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <USB_EPStartXfer+0x4c0>
 8007526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007528:	3301      	adds	r3, #1
 800752a:	637b      	str	r3, [r7, #52]	; 0x34
 800752c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752e:	b29b      	uxth	r3, r3
 8007530:	029b      	lsls	r3, r3, #10
 8007532:	b29a      	uxth	r2, r3
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	801a      	strh	r2, [r3, #0]
 8007538:	e029      	b.n	800758e <USB_EPStartXfer+0x522>
 800753a:	bf00      	nop
 800753c:	ffff80c0 	.word	0xffff80c0
 8007540:	ffffc080 	.word	0xffffc080
 8007544:	ffff8080 	.word	0xffff8080
 8007548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754a:	095b      	lsrs	r3, r3, #5
 800754c:	637b      	str	r3, [r7, #52]	; 0x34
 800754e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007550:	b29b      	uxth	r3, r3
 8007552:	029b      	lsls	r3, r3, #10
 8007554:	b29b      	uxth	r3, r3
 8007556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800755a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800755e:	b29a      	uxth	r2, r3
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	801a      	strh	r2, [r3, #0]
 8007564:	e013      	b.n	800758e <USB_EPStartXfer+0x522>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	785b      	ldrb	r3, [r3, #1]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d10f      	bne.n	800758e <USB_EPStartXfer+0x522>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007574:	b29b      	uxth	r3, r3
 8007576:	441c      	add	r4, r3
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	00db      	lsls	r3, r3, #3
 800757e:	4423      	add	r3, r4
 8007580:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007584:	60fb      	str	r3, [r7, #12]
 8007586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007588:	b29a      	uxth	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	b29b      	uxth	r3, r3
 800759c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a4:	b29c      	uxth	r4, r3
 80075a6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80075aa:	b29c      	uxth	r4, r3
 80075ac:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80075b0:	b29c      	uxth	r4, r3
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	441a      	add	r2, r3
 80075bc:	4b04      	ldr	r3, [pc, #16]	; (80075d0 <USB_EPStartXfer+0x564>)
 80075be:	4323      	orrs	r3, r4
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3754      	adds	r7, #84	; 0x54
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd90      	pop	{r4, r7, pc}
 80075ce:	bf00      	nop
 80075d0:	ffff8080 	.word	0xffff8080

080075d4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075d4:	b490      	push	{r4, r7}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	785b      	ldrb	r3, [r3, #1]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d018      	beq.n	8007618 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075fc:	b29c      	uxth	r4, r3
 80075fe:	f084 0310 	eor.w	r3, r4, #16
 8007602:	b29c      	uxth	r4, r3
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	441a      	add	r2, r3
 800760e:	4b11      	ldr	r3, [pc, #68]	; (8007654 <USB_EPSetStall+0x80>)
 8007610:	4323      	orrs	r3, r4
 8007612:	b29b      	uxth	r3, r3
 8007614:	8013      	strh	r3, [r2, #0]
 8007616:	e017      	b.n	8007648 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29b      	uxth	r3, r3
 8007626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800762a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762e:	b29c      	uxth	r4, r3
 8007630:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007634:	b29c      	uxth	r4, r3
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	441a      	add	r2, r3
 8007640:	4b04      	ldr	r3, [pc, #16]	; (8007654 <USB_EPSetStall+0x80>)
 8007642:	4323      	orrs	r3, r4
 8007644:	b29b      	uxth	r3, r3
 8007646:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bc90      	pop	{r4, r7}
 8007652:	4770      	bx	lr
 8007654:	ffff8080 	.word	0xffff8080

08007658 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007658:	b490      	push	{r4, r7}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	785b      	ldrb	r3, [r3, #1]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d03c      	beq.n	80076e4 <USB_EPClearStall+0x8c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4413      	add	r3, r2
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	b29c      	uxth	r4, r3
 8007678:	4623      	mov	r3, r4
 800767a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767e:	2b00      	cmp	r3, #0
 8007680:	d014      	beq.n	80076ac <USB_EPClearStall+0x54>
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007698:	b29c      	uxth	r4, r3
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	441a      	add	r2, r3
 80076a4:	4b30      	ldr	r3, [pc, #192]	; (8007768 <USB_EPClearStall+0x110>)
 80076a6:	4323      	orrs	r3, r4
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076c2:	b29c      	uxth	r4, r3
 80076c4:	f084 0310 	eor.w	r3, r4, #16
 80076c8:	b29c      	uxth	r4, r3
 80076ca:	f084 0320 	eor.w	r3, r4, #32
 80076ce:	b29c      	uxth	r4, r3
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	441a      	add	r2, r3
 80076da:	4b24      	ldr	r3, [pc, #144]	; (800776c <USB_EPClearStall+0x114>)
 80076dc:	4323      	orrs	r3, r4
 80076de:	b29b      	uxth	r3, r3
 80076e0:	8013      	strh	r3, [r2, #0]
 80076e2:	e03b      	b.n	800775c <USB_EPClearStall+0x104>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	b29c      	uxth	r4, r3
 80076f2:	4623      	mov	r3, r4
 80076f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d014      	beq.n	8007726 <USB_EPClearStall+0xce>
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	b29b      	uxth	r3, r3
 800770a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800770e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007712:	b29c      	uxth	r4, r3
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	441a      	add	r2, r3
 800771e:	4b14      	ldr	r3, [pc, #80]	; (8007770 <USB_EPClearStall+0x118>)
 8007720:	4323      	orrs	r3, r4
 8007722:	b29b      	uxth	r3, r3
 8007724:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	b29b      	uxth	r3, r3
 8007734:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773c:	b29c      	uxth	r4, r3
 800773e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007742:	b29c      	uxth	r4, r3
 8007744:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007748:	b29c      	uxth	r4, r3
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	441a      	add	r2, r3
 8007754:	4b05      	ldr	r3, [pc, #20]	; (800776c <USB_EPClearStall+0x114>)
 8007756:	4323      	orrs	r3, r4
 8007758:	b29b      	uxth	r3, r3
 800775a:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bc90      	pop	{r4, r7}
 8007766:	4770      	bx	lr
 8007768:	ffff80c0 	.word	0xffff80c0
 800776c:	ffff8080 	.word	0xffff8080
 8007770:	ffffc080 	.word	0xffffc080

08007774 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	460b      	mov	r3, r1
 800777e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d103      	bne.n	800778e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2280      	movs	r2, #128	; 0x80
 800778a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077d8:	b29b      	uxth	r3, r3
 80077da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80077de:	b29a      	uxth	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007802:	b29b      	uxth	r3, r3
 8007804:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007806:	68fb      	ldr	r3, [r7, #12]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800782c:	b480      	push	{r7}
 800782e:	b08d      	sub	sp, #52	; 0x34
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	4611      	mov	r1, r2
 8007838:	461a      	mov	r2, r3
 800783a:	460b      	mov	r3, r1
 800783c:	80fb      	strh	r3, [r7, #6]
 800783e:	4613      	mov	r3, r2
 8007840:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007842:	88bb      	ldrh	r3, [r7, #4]
 8007844:	3301      	adds	r3, #1
 8007846:	085b      	lsrs	r3, r3, #1
 8007848:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007852:	88fa      	ldrh	r2, [r7, #6]
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800785c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007862:	e01b      	b.n	800789c <USB_WritePMA+0x70>
  {
    temp1 = (uint16_t) * pBuf;
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	3301      	adds	r3, #1
 800786e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	b29b      	uxth	r3, r3
 8007876:	021b      	lsls	r3, r3, #8
 8007878:	b29b      	uxth	r3, r3
 800787a:	461a      	mov	r2, r3
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	4313      	orrs	r3, r2
 8007880:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	b29a      	uxth	r2, r3
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	3302      	adds	r3, #2
 800788e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (PMA_ACCESS > 1U)
    {
      pdwVal++;
    }
    pBuf++;
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	3301      	adds	r3, #1
 8007894:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007898:	3b01      	subs	r3, #1
 800789a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1e0      	bne.n	8007864 <USB_WritePMA+0x38>
  }
}
 80078a2:	bf00      	nop
 80078a4:	3734      	adds	r7, #52	; 0x34
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b08b      	sub	sp, #44	; 0x2c
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	60f8      	str	r0, [r7, #12]
 80078b6:	60b9      	str	r1, [r7, #8]
 80078b8:	4611      	mov	r1, r2
 80078ba:	461a      	mov	r2, r3
 80078bc:	460b      	mov	r3, r1
 80078be:	80fb      	strh	r3, [r7, #6]
 80078c0:	4613      	mov	r3, r2
 80078c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80078c4:	88bb      	ldrh	r3, [r7, #4]
 80078c6:	085b      	lsrs	r3, r3, #1
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80078d4:	88fa      	ldrh	r2, [r7, #6]
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	4413      	add	r3, r2
 80078da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078de:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	627b      	str	r3, [r7, #36]	; 0x24
 80078e4:	e017      	b.n	8007916 <USB_ReadPMA+0x68>
  {
    temp = *pdwVal;
 80078e6:	6a3b      	ldr	r3, [r7, #32]
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	3302      	adds	r3, #2
 80078f0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	3301      	adds	r3, #1
 80078fe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	0a1b      	lsrs	r3, r3, #8
 8007904:	b2da      	uxtb	r2, r3
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	3301      	adds	r3, #1
 800790e:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	3b01      	subs	r3, #1
 8007914:	627b      	str	r3, [r7, #36]	; 0x24
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1e4      	bne.n	80078e6 <USB_ReadPMA+0x38>
    {
      pdwVal++;
    }
  }

  if ((wNBytes % 2U) != 0U)
 800791c:	88bb      	ldrh	r3, [r7, #4]
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	b29b      	uxth	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00c      	beq.n	8007942 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	881b      	ldrh	r3, [r3, #0]
 800792c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	3302      	adds	r3, #2
 8007932:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	b2da      	uxtb	r2, r3
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	3301      	adds	r3, #1
 8007940:	61fb      	str	r3, [r7, #28]
  }
}
 8007942:	bf00      	nop
 8007944:	372c      	adds	r7, #44	; 0x2c
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <dmx_registerCallback>:
* Variable Declarations
*******************************************************************************/
/******************************************************************************
* Function Definitions
*******************************************************************************/
void dmx_registerCallback(dmx_cfg_Instance *dmx, dmx_cfg_callback callback){
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
	dmx->callback = callback;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	655a      	str	r2, [r3, #84]	; 0x54
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
	...

0800796c <dmx_init>:

void dmx_init(dmx_cfg_Instance *dmx){
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
	if(dmx->type == dmx_cfg_TYPE_TRANSMITTER){
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d126      	bne.n	80079ca <dmx_init+0x5e>
		gpio_ConfigureToFloating(dmx->txBreakPort, dmx->txBreakPin);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	891b      	ldrh	r3, [r3, #8]
 8007984:	4619      	mov	r1, r3
 8007986:	4610      	mov	r0, r2
 8007988:	f002 fc78 	bl	800a27c <gpio_ConfigureToFloating>
		dmx->txState = dmx_cfg_TX_STATE_NONE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	705a      	strb	r2, [r3, #1]
		dmx->txBreakToBreakCnt = 0;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	621a      	str	r2, [r3, #32]
		dmx->txBreakToBreakTime_ms = dmx->txBreakToBreakTime_ms + (dmx->txBreakTime_us + dmx->txMarkAfterBreakTime_us + dmx->txMarkBetweenTime_us*dmx->universeSize)/1000;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	69da      	ldr	r2, [r3, #28]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6919      	ldr	r1, [r3, #16]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	4419      	add	r1, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
 80079b0:	fb00 f303 	mul.w	r3, r0, r3
 80079b4:	440b      	add	r3, r1
 80079b6:	4911      	ldr	r1, [pc, #68]	; (80079fc <dmx_init+0x90>)
 80079b8:	fb81 0103 	smull	r0, r1, r1, r3
 80079bc:	1189      	asrs	r1, r1, #6
 80079be:	17db      	asrs	r3, r3, #31
 80079c0:	1acb      	subs	r3, r1, r3
 80079c2:	441a      	add	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	61da      	str	r2, [r3, #28]
 80079c8:	e010      	b.n	80079ec <dmx_init+0x80>
	}else if(dmx->type == dmx_cfg_TYPE_RECEIVER){
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d10c      	bne.n	80079ec <dmx_init+0x80>
		dmx->rxState = dmx_cfg_RX_STATE_NONE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		dmx->rxFallingTime = 0;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	631a      	str	r2, [r3, #48]	; 0x30
		dmx->rxRisingTime = 0;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	635a      	str	r2, [r3, #52]	; 0x34
		dmx->rxTimerUpdateCnt = 0;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	641a      	str	r2, [r3, #64]	; 0x40
	}
	dmx->universeCnt = 0;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 80079f4:	bf00      	nop
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	10624dd3 	.word	0x10624dd3

08007a00 <dmx_loop>:

void dmx_loop(dmx_cfg_Instance *dmx){
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
	if(dmx->type == dmx_cfg_TYPE_TRANSMITTER){
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10e      	bne.n	8007a2e <dmx_loop+0x2e>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	785b      	ldrb	r3, [r3, #1]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d029      	beq.n	8007a6c <dmx_loop+0x6c>
		if(dmx->txBreakToBreakCnt == 0){
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d106      	bne.n	8007a2e <dmx_loop+0x2e>
			dmx_sendStart(dmx);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f83a 	bl	8007a9a <dmx_sendStart>
			dmx->txBreakToBreakCnt = dmx->txBreakToBreakTime_ms;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	69da      	ldr	r2, [r3, #28]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	621a      	str	r2, [r3, #32]
		}
	}else if(dmx->type == dmx_cfg_TYPE_RECEIVER){
	}
	/*Loop flags*/
	if(dmx->universeComplete){
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d01a      	beq.n	8007a6e <dmx_loop+0x6e>
		dmx->universeComplete = false;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
		if(dmx->type == dmx_cfg_TYPE_TRANSMITTER) dmx->callbackType = dmx_cfg_CALL_TX_COMPLETE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d104      	bne.n	8007a52 <dmx_loop+0x52>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007a50:	e003      	b.n	8007a5a <dmx_loop+0x5a>
		else dmx->callbackType = dmx_cfg_CALL_RX_COMPLETE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		if(dmx->callback) dmx->callback(dmx);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <dmx_loop+0x6e>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	4798      	blx	r3
 8007a6a:	e000      	b.n	8007a6e <dmx_loop+0x6e>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8007a6c:	bf00      	nop
	}
}
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <dmx_1ms>:

void dmx_1ms(dmx_cfg_Instance *dmx){
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
	if(dmx->txBreakToBreakCnt > 0) --dmx->txBreakToBreakCnt;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a1b      	ldr	r3, [r3, #32]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	dd04      	ble.n	8007a8e <dmx_1ms+0x1a>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	1e5a      	subs	r2, r3, #1
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	621a      	str	r2, [r3, #32]
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <dmx_sendStart>:

void dmx_sendStart(dmx_cfg_Instance *dmx){
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b082      	sub	sp, #8
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d130      	bne.n	8007b0c <dmx_sendStart+0x72>
	if(dmx->universe == NULL) return;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d02e      	beq.n	8007b10 <dmx_sendStart+0x76>
	if(dmx->txBreakToBreakTime_ms < dmx_cfg_MIN_BREAK_TO_BREAK_TIME_MS) dmx->txBreakToBreakTime_ms = dmx_cfg_MIN_BREAK_TO_BREAK_TIME_MS;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	2b18      	cmp	r3, #24
 8007ab8:	dc02      	bgt.n	8007ac0 <dmx_sendStart+0x26>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2219      	movs	r2, #25
 8007abe:	61da      	str	r2, [r3, #28]
	if(dmx->txBreakTime_us < dmx_cfg_MIN_BREAK_TIME_US) dmx->txBreakTime_us = dmx_cfg_MIN_BREAK_TIME_US;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	2b5f      	cmp	r3, #95	; 0x5f
 8007ac6:	dc02      	bgt.n	8007ace <dmx_sendStart+0x34>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2260      	movs	r2, #96	; 0x60
 8007acc:	611a      	str	r2, [r3, #16]
	if(dmx->txMarkAfterBreakTime_us < dmx_cfg_MIN_MARK_AFTER_BREAK_TIME_US) dmx->txMarkAfterBreakTime_us = dmx_cfg_MIN_MARK_AFTER_BREAK_TIME_US;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	2b0b      	cmp	r3, #11
 8007ad4:	dc02      	bgt.n	8007adc <dmx_sendStart+0x42>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	220c      	movs	r2, #12
 8007ada:	615a      	str	r2, [r3, #20]
	dmx->universeComplete = false;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	dmx->txState = dmx_cfg_TX_STATE_SEND_BREAK;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	705a      	strb	r2, [r3, #1]
	tim_setNewTimeAndStart(dmx->txTimer, dmx->txBreakTime_us);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68da      	ldr	r2, [r3, #12]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	4619      	mov	r1, r3
 8007af4:	4610      	mov	r0, r2
 8007af6:	f003 fab3 	bl	800b060 <tim_setNewTimeAndStart>
	gpio_ConfigureToPushPull(dmx->txBreakPort, dmx->txBreakPin);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	891b      	ldrh	r3, [r3, #8]
 8007b02:	4619      	mov	r1, r3
 8007b04:	4610      	mov	r0, r2
 8007b06:	f002 fbd7 	bl	800a2b8 <gpio_ConfigureToPushPull>
 8007b0a:	e002      	b.n	8007b12 <dmx_sendStart+0x78>
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 8007b0c:	bf00      	nop
 8007b0e:	e000      	b.n	8007b12 <dmx_sendStart+0x78>
	if(dmx->universe == NULL) return;
 8007b10:	bf00      	nop
}
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <dmx_txStart>:
	else if(timeIdx == dmx_cfg_TIME_MARK_AFTER_BREAK) dmx->txMarkAfterBreakTime_us = time_us;
	else if(timeIdx == dmx_cfg_TIME_MARK_BETWEEN) dmx->txMarkBetweenTime_us = time_us;
	else if(timeIdx == dmx_cfg_TIME_BREAK_TO_BREAK) dmx->txBreakToBreakTime_ms = (time_us + dmx->txBreakTime_us + dmx->txMarkAfterBreakTime_us + dmx->txMarkBetweenTime_us*dmx->universeSize)/1000;
}

void dmx_txStart(dmx_cfg_Instance *dmx){
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d103      	bne.n	8007b30 <dmx_txStart+0x18>
	dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	705a      	strb	r2, [r3, #1]
 8007b2e:	e000      	b.n	8007b32 <dmx_txStart+0x1a>
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
 8007b30:	bf00      	nop
}
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <dmx_rxStart>:
void dmx_txStop(dmx_cfg_Instance *dmx){
	if(dmx->type != dmx_cfg_TYPE_TRANSMITTER) return;
	dmx->txState = dmx_cfg_TX_STATE_NONE;
}

void dmx_rxStart(dmx_cfg_Instance *dmx){
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
	if(dmx->type != dmx_cfg_TYPE_RECEIVER) return;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d109      	bne.n	8007b60 <dmx_rxStart+0x24>
	uart_enableReceiveInt(dmx->uart);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b50:	4618      	mov	r0, r3
 8007b52:	f003 fc2d 	bl	800b3b0 <uart_enableReceiveInt>
	dmx->rxState = dmx_cfg_RX_STATE_WAIT_FOR_BREAK;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007b5e:	e000      	b.n	8007b62 <dmx_rxStart+0x26>
	if(dmx->type != dmx_cfg_TYPE_RECEIVER) return;
 8007b60:	bf00      	nop
}
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <dmx_irqTxTimerHandler>:
void dmx_incrementRxUpdateCnt(dmx_cfg_Instance *dmx){
	++dmx->rxTimerUpdateCnt;
}

/*Transmit IRQs*/
void dmx_irqTxTimerHandler(dmx_cfg_Instance *dmx){
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
	if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	785b      	ldrb	r3, [r3, #1]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d05c      	beq.n	8007c32 <dmx_irqTxTimerHandler+0xca>
	if(dmx->txState == dmx_cfg_TX_STATE_SEND_BREAK){
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	785b      	ldrb	r3, [r3, #1]
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d113      	bne.n	8007ba8 <dmx_irqTxTimerHandler+0x40>
		gpio_ConfigureToFloating(dmx->txBreakPort, dmx->txBreakPin);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	891b      	ldrh	r3, [r3, #8]
 8007b88:	4619      	mov	r1, r3
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	f002 fb76 	bl	800a27c <gpio_ConfigureToFloating>
		tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkAfterBreakTime_us);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68da      	ldr	r2, [r3, #12]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	4610      	mov	r0, r2
 8007b9c:	f003 fa60 	bl	800b060 <tim_setNewTimeAndStart>
		dmx->txState = dmx_cfg_TX_STATE_SEND_MARK;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2203      	movs	r2, #3
 8007ba4:	705a      	strb	r2, [r3, #1]
 8007ba6:	e045      	b.n	8007c34 <dmx_irqTxTimerHandler+0xcc>
	}else if(dmx->txState == dmx_cfg_TX_STATE_SEND_MARK){
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	785b      	ldrb	r3, [r3, #1]
 8007bac:	2b03      	cmp	r3, #3
 8007bae:	d133      	bne.n	8007c18 <dmx_irqTxTimerHandler+0xb0>
		dmx->universeCnt = 0;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		dmx->uart->CR1 &= ~USART_CR1_TXEIE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007bc0:	6812      	ldr	r2, [r2, #0]
 8007bc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bc6:	601a      	str	r2, [r3, #0]
		dmx->uart->TDR = dmx->universeStartCode;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007bd2:	b292      	uxth	r2, r2
 8007bd4:	851a      	strh	r2, [r3, #40]	; 0x28
		if(dmx->txMarkBetweenTime_us == 0) {
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d110      	bne.n	8007c00 <dmx_irqTxTimerHandler+0x98>
			dmx->uart->CR1 |= USART_CR1_TXEIE;		//start with transmission --> enable transmitbuffer empty interrupt
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007be6:	6812      	ldr	r2, [r2, #0]
 8007be8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007bec:	601a      	str	r2, [r3, #0]
			tim_stop(dmx->txTimer);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f003 fa6c 	bl	800b0d0 <tim_stop>
			dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;	//The whole universe can be transmitted as fast as possible
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	705a      	strb	r2, [r3, #1]
 8007bfe:	e019      	b.n	8007c34 <dmx_irqTxTimerHandler+0xcc>
		}
		else{
			tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkBetweenTime_us);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68da      	ldr	r2, [r3, #12]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	4619      	mov	r1, r3
 8007c0a:	4610      	mov	r0, r2
 8007c0c:	f003 fa28 	bl	800b060 <tim_setNewTimeAndStart>
			dmx->txState = dmx_cfg_TX_STATE_SEND_UNIVERSE;	//The universe can be transmitted with defined delay between all data bytes
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2205      	movs	r2, #5
 8007c14:	705a      	strb	r2, [r3, #1]
 8007c16:	e00d      	b.n	8007c34 <dmx_irqTxTimerHandler+0xcc>
		}
	}else if(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE){
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	785b      	ldrb	r3, [r3, #1]
 8007c1c:	2b05      	cmp	r3, #5
 8007c1e:	d109      	bne.n	8007c34 <dmx_irqTxTimerHandler+0xcc>
		dmx->uart->CR1 |= USART_CR1_TXEIE;		//start with transmission --> enable transmitbuffer empty interrupt
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007c28:	6812      	ldr	r2, [r2, #0]
 8007c2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	e000      	b.n	8007c34 <dmx_irqTxTimerHandler+0xcc>
	if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8007c32:	bf00      	nop
	}
}
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <dmx_irqTxInterfaceHandler>:

void dmx_irqTxInterfaceHandler(dmx_cfg_Instance *dmx){
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b082      	sub	sp, #8
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
	if (dmx->uart->ISR & USART_ISR_TXE){				//transmit dmx values
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c46:	69db      	ldr	r3, [r3, #28]
 8007c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d066      	beq.n	8007d1e <dmx_irqTxInterfaceHandler+0xe4>
		dmx->uart->ISR &= ~USART_ISR_TXE; //Kill transmit-buffer empty flag
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007c58:	69d2      	ldr	r2, [r2, #28]
 8007c5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c5e:	61da      	str	r2, [r3, #28]
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	785b      	ldrb	r3, [r3, #1]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d059      	beq.n	8007d1c <dmx_irqTxInterfaceHandler+0xe2>
		if((dmx->txState == dmx_cfg_TX_STATE_WAIT_FOR_BREAK)||(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE)){
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	785b      	ldrb	r3, [r3, #1]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d003      	beq.n	8007c78 <dmx_irqTxInterfaceHandler+0x3e>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	785b      	ldrb	r3, [r3, #1]
 8007c74:	2b05      	cmp	r3, #5
 8007c76:	d152      	bne.n	8007d1e <dmx_irqTxInterfaceHandler+0xe4>
			if(dmx->universeCnt < dmx->universeSize){
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d230      	bcs.n	8007cea <dmx_irqTxInterfaceHandler+0xb0>
				dmx->uart->CR1 &= ~USART_CR1_TXEIE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007c90:	6812      	ldr	r2, [r2, #0]
 8007c92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c96:	601a      	str	r2, [r3, #0]
				dmx->uart->TDR = dmx->universe[dmx->universeCnt];
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	f8b1 1050 	ldrh.w	r1, [r1, #80]	; 0x50
 8007ca6:	440a      	add	r2, r1
 8007ca8:	7812      	ldrb	r2, [r2, #0]
 8007caa:	b292      	uxth	r2, r2
 8007cac:	851a      	strh	r2, [r3, #40]	; 0x28
				dmx->universeCnt++;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				if(dmx->txState == dmx_cfg_TX_STATE_SEND_UNIVERSE) tim_setNewTimeAndStart(dmx->txTimer, dmx->txMarkBetweenTime_us);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	785b      	ldrb	r3, [r3, #1]
 8007cc2:	2b05      	cmp	r3, #5
 8007cc4:	d108      	bne.n	8007cd8 <dmx_irqTxInterfaceHandler+0x9e>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	f003 f9c5 	bl	800b060 <tim_setNewTimeAndStart>
 8007cd6:	e022      	b.n	8007d1e <dmx_irqTxInterfaceHandler+0xe4>
				else dmx->uart->CR1 |= USART_CR1_TXEIE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007ce0:	6812      	ldr	r2, [r2, #0]
 8007ce2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ce6:	601a      	str	r2, [r3, #0]
 8007ce8:	e019      	b.n	8007d1e <dmx_irqTxInterfaceHandler+0xe4>
			}else{
				dmx->universeCnt = 0;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				dmx->uart->CR1 &= ~USART_CR1_TXEIE;	//disable transmit-buffer empty interrupt
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007cfa:	6812      	ldr	r2, [r2, #0]
 8007cfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d00:	601a      	str	r2, [r3, #0]
				dmx->txState = dmx_cfg_TX_STATE_WAIT_FOR_BREAK;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	705a      	strb	r2, [r3, #1]
				tim_stop(dmx->txTimer);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f003 f9df 	bl	800b0d0 <tim_stop>
				dmx->universeComplete = true;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007d1a:	e000      	b.n	8007d1e <dmx_irqTxInterfaceHandler+0xe4>
		if(dmx->txState == dmx_cfg_TX_STATE_NONE) return;
 8007d1c:	bf00      	nop
			}
		}

	}
}
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <dmx_irqRxInterfaceHandler>:
/*Receive IRQs*/
void dmx_irqRxTimerHandler(dmx_cfg_Instance *dmx){
//TODO: Add measurement of break
}

void dmx_irqRxInterfaceHandler(dmx_cfg_Instance *dmx){
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
	uint32_t sr = dmx->uart->ISR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	60fb      	str	r3, [r7, #12]
	if (sr & USART_ISR_RXNE){
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f003 0320 	and.w	r3, r3, #32
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d065      	beq.n	8007e0a <dmx_irqRxInterfaceHandler+0xe6>
		if(sr & USART_ISR_ORE) dmx->uart->ICR |= USART_ICR_ORECF; /*Kill overrun error*/
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f003 0308 	and.w	r3, r3, #8
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d007      	beq.n	8007d58 <dmx_irqRxInterfaceHandler+0x34>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007d50:	6a12      	ldr	r2, [r2, #32]
 8007d52:	f042 0208 	orr.w	r2, r2, #8
 8007d56:	621a      	str	r2, [r3, #32]
		uint8_t  dmxByte = (uint8_t)dmx->uart->RDR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	72fb      	strb	r3, [r7, #11]
		if(dmx->rxState == dmx_cfg_RX_STATE_NONE) return;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d04d      	beq.n	8007e08 <dmx_irqRxInterfaceHandler+0xe4>
		if(sr & USART_ISR_FE){	/*Frame error*/
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d014      	beq.n	8007da0 <dmx_irqRxInterfaceHandler+0x7c>
			dmx->uart->ICR |= USART_ICR_FECF; /*Kill frame error*/
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007d7e:	6a12      	ldr	r2, [r2, #32]
 8007d80:	f042 0202 	orr.w	r2, r2, #2
 8007d84:	621a      	str	r2, [r3, #32]
			dmx->universeCnt = 0;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			dmx->rxState = dmx_cfg_RX_STATE_RECEIVE_START_CODE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2203      	movs	r2, #3
 8007d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			dmx->universeComplete = false;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007d9e:	e034      	b.n	8007e0a <dmx_irqRxInterfaceHandler+0xe6>
		}else if(dmx->rxState == dmx_cfg_RX_STATE_RECEIVE_START_CODE){
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d108      	bne.n	8007dbc <dmx_irqRxInterfaceHandler+0x98>
			dmx->rxState = dmx_cfg_RX_STATE_RECEIVE_UNIVERSE;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2204      	movs	r2, #4
 8007dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			dmx->universeStartCode = dmxByte;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	7afa      	ldrb	r2, [r7, #11]
 8007db6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8007dba:	e026      	b.n	8007e0a <dmx_irqRxInterfaceHandler+0xe6>
		}else if(dmx->rxState == dmx_cfg_RX_STATE_RECEIVE_UNIVERSE){
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d121      	bne.n	8007e0a <dmx_irqRxInterfaceHandler+0xe6>
			dmx->universe[dmx->universeCnt] = dmxByte;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8007dd0:	4413      	add	r3, r2
 8007dd2:	7afa      	ldrb	r2, [r7, #11]
 8007dd4:	701a      	strb	r2, [r3, #0]
			dmx->universeCnt++;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ddc:	3301      	adds	r3, #1
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			if(dmx->universeCnt >= dmx->universeSize){
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d309      	bcc.n	8007e0a <dmx_irqRxInterfaceHandler+0xe6>
				dmx->universeComplete = true;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
				dmx->rxState = dmx_cfg_RX_STATE_WAIT_FOR_BREAK;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007e06:	e000      	b.n	8007e0a <dmx_irqRxInterfaceHandler+0xe6>
		if(dmx->rxState == dmx_cfg_RX_STATE_NONE) return;
 8007e08:	bf00      	nop
			}
		}
	}
}
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <eeprom_registerCallback>:
static inline void readData(eeprom_cfg_Config *config, uint8_t *data, uint16_t dataSize);
static inline void callbackError(uint8_t type);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void eeprom_registerCallback(eeprom_cfg_Config *config, eeprom_cfg_callback callback){
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
	config->callback = callback;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	60da      	str	r2, [r3, #12]
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <eeprom_init>:
void eeprom_init(eeprom_cfg_Config *config){
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
	if(config->callback != NULL){
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d004      	beq.n	8007e4a <eeprom_init+0x1a>
		config->maxAddress = config->memorySize >> 3; /*Convert Bit to Byte*/
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	08da      	lsrs	r2, r3, #3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	611a      	str	r2, [r3, #16]
	}
}
 8007e4a:	bf00      	nop
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <eeprom_write>:

void eeprom_write(eeprom_cfg_Config *config, uint16_t startAddr, uint8_t *data, uint8_t dataSize){
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	607a      	str	r2, [r7, #4]
 8007e60:	461a      	mov	r2, r3
 8007e62:	460b      	mov	r3, r1
 8007e64:	817b      	strh	r3, [r7, #10]
 8007e66:	4613      	mov	r3, r2
 8007e68:	727b      	strb	r3, [r7, #9]
	if(writeValidation(config, startAddr, data, dataSize) == OK){
 8007e6a:	7a7b      	ldrb	r3, [r7, #9]
 8007e6c:	8979      	ldrh	r1, [r7, #10]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 f83f 	bl	8007ef4 <writeValidation>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d10a      	bne.n	8007e92 <eeprom_write+0x3c>
		writeStartAddr(config, startAddr);
 8007e7c:	897b      	ldrh	r3, [r7, #10]
 8007e7e:	4619      	mov	r1, r3
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f000 f80a 	bl	8007e9a <writeStartAddr>
		writeData(config, data, dataSize);
 8007e86:	7a7b      	ldrb	r3, [r7, #9]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	6879      	ldr	r1, [r7, #4]
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 f813 	bl	8007eb8 <writeData>
	}
}
 8007e92:	bf00      	nop
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <writeStartAddr>:
	if(config->callback(config) != OK) return false;
	else return true;
}


static inline void writeStartAddr(eeprom_cfg_Config *config, uint16_t startAddr){
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	807b      	strh	r3, [r7, #2]
	config->memAddr = startAddr;
 8007ea6:	887a      	ldrh	r2, [r7, #2]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	619a      	str	r2, [r3, #24]
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <writeData>:

static inline void writeData(eeprom_cfg_Config *config, uint8_t *data, uint8_t dataSize){
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	71fb      	strb	r3, [r7, #7]
	config->dataSize = dataSize;
 8007ec6:	79fa      	ldrb	r2, [r7, #7]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	615a      	str	r2, [r3, #20]
	config->txBuffer = data;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	61da      	str	r2, [r3, #28]
	config->callbackType = EEPROM_CFG_CALL_TX_START;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	729a      	strb	r2, [r3, #10]
	if(config->callback(config) != OK) callbackError(EEPROM_CFG_CALL_TX_ERROR);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	4798      	blx	r3
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d002      	beq.n	8007eec <writeData+0x34>
 8007ee6:	2002      	movs	r0, #2
 8007ee8:	f000 f832 	bl	8007f50 <callbackError>
}
 8007eec:	bf00      	nop
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <writeValidation>:
	config->rxBuffer = data;
	config->callbackType = EEPROM_CFG_CALL_RX_START;
	if(config->callback(config) != OK) callbackError(EEPROM_CFG_CALL_RX_ERROR);
}

static inline uint8_t writeValidation(eeprom_cfg_Config *config, uint16_t startAddr, uint8_t *data, uint8_t dataSize){
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	607a      	str	r2, [r7, #4]
 8007efe:	461a      	mov	r2, r3
 8007f00:	460b      	mov	r3, r1
 8007f02:	817b      	strh	r3, [r7, #10]
 8007f04:	4613      	mov	r3, r2
 8007f06:	727b      	strb	r3, [r7, #9]
	if(config->callback == NULL) return NOK;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <writeValidation+0x20>
 8007f10:	2300      	movs	r3, #0
 8007f12:	e017      	b.n	8007f44 <writeValidation+0x50>
	if(data == NULL) return NOK;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <writeValidation+0x2a>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	e012      	b.n	8007f44 <writeValidation+0x50>
	if((startAddr + dataSize) > config->maxAddress) return NOK;
 8007f1e:	897a      	ldrh	r2, [r7, #10]
 8007f20:	7a7b      	ldrb	r3, [r7, #9]
 8007f22:	4413      	add	r3, r2
 8007f24:	461a      	mov	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d901      	bls.n	8007f32 <writeValidation+0x3e>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	e008      	b.n	8007f44 <writeValidation+0x50>
	if(dataSize > config->pageBufferSize) return NOK;
 8007f32:	7a7b      	ldrb	r3, [r7, #9]
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	891b      	ldrh	r3, [r3, #8]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d901      	bls.n	8007f42 <writeValidation+0x4e>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	e000      	b.n	8007f44 <writeValidation+0x50>
	else return OK;
 8007f42:	2301      	movs	r3, #1
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <callbackError>:
	if(data == NULL) return NOK;
	if((startAddr + dataSize) > config->maxAddress) return NOK;
	else return OK;
}

static inline void callbackError(uint8_t type){
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	4603      	mov	r3, r0
 8007f58:	71fb      	strb	r3, [r7, #7]
	//TODO: Do something with the error
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <isSimilarToLast>:
	message->origin = 0;
	message->value = 0;
	message->ctx = 0;
}

static inline uint8_t isSimilarToLast(msg_Message *message, msg_Buffer *buf){
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	6039      	str	r1, [r7, #0]
	char type;
	uint16_t idx;
	if(RINGBUFFER_isEmpty(&buf->buffer)) return 0;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fa16 	bl	80083a4 <RINGBUFFER_isEmpty>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <isSimilarToLast+0x1c>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	e039      	b.n	8007ff6 <isSimilarToLast+0x90>
	uint16_t lastTmp = buf->lastMsg;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	899b      	ldrh	r3, [r3, #12]
 8007f86:	81fb      	strh	r3, [r7, #14]
	type = buf->buffer.data[lastTmp];
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	89fb      	ldrh	r3, [r7, #14]
 8007f8e:	4413      	add	r3, r2
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	737b      	strb	r3, [r7, #13]
	if(++lastTmp >= buf->buffer.size) lastTmp = 0;
 8007f94:	89fb      	ldrh	r3, [r7, #14]
 8007f96:	3301      	adds	r3, #1
 8007f98:	81fb      	strh	r3, [r7, #14]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	889b      	ldrh	r3, [r3, #4]
 8007f9e:	89fa      	ldrh	r2, [r7, #14]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d301      	bcc.n	8007fa8 <isSimilarToLast+0x42>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	81fb      	strh	r3, [r7, #14]
	idx = (buf->buffer.data[lastTmp] << 8) & 0xFF00;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	689a      	ldr	r2, [r3, #8]
 8007fac:	89fb      	ldrh	r3, [r7, #14]
 8007fae:	4413      	add	r3, r2
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	021b      	lsls	r3, r3, #8
 8007fb4:	817b      	strh	r3, [r7, #10]
	if(++lastTmp >= buf->buffer.size) lastTmp = 0;
 8007fb6:	89fb      	ldrh	r3, [r7, #14]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	81fb      	strh	r3, [r7, #14]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	889b      	ldrh	r3, [r3, #4]
 8007fc0:	89fa      	ldrh	r2, [r7, #14]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d301      	bcc.n	8007fca <isSimilarToLast+0x64>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	81fb      	strh	r3, [r7, #14]
	idx |= (buf->buffer.data[lastTmp] << 0) & 0xFF;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	689a      	ldr	r2, [r3, #8]
 8007fce:	89fb      	ldrh	r3, [r7, #14]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	897b      	ldrh	r3, [r7, #10]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	817b      	strh	r3, [r7, #10]
	if((type == message->type) && (idx == message->index)) return 1;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	791b      	ldrb	r3, [r3, #4]
 8007fe0:	7b7a      	ldrb	r2, [r7, #13]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d106      	bne.n	8007ff4 <isSimilarToLast+0x8e>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	881b      	ldrh	r3, [r3, #0]
 8007fea:	897a      	ldrh	r2, [r7, #10]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d101      	bne.n	8007ff4 <isSimilarToLast+0x8e>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e000      	b.n	8007ff6 <isSimilarToLast+0x90>
	else return 0;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <writeMsg>:

static inline uint8_t writeMsg(msg_Message *message, msg_Buffer *buf){
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b084      	sub	sp, #16
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	6039      	str	r1, [r7, #0]
	uint8_t bufferState =  ringbuffer_NO_BUF;
 8008008:	2300      	movs	r3, #0
 800800a:	73fb      	strb	r3, [r7, #15]
	uint8_t isSimilarActive = 0;
 800800c:	2300      	movs	r3, #0
 800800e:	73bb      	strb	r3, [r7, #14]
	uint16_t nextMsgTmp = buf->buffer.in;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	81bb      	strh	r3, [r7, #12]
	if(message != NULL){
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d064      	beq.n	80080e6 <writeMsg+0xe8>
		if(isSimilarToLast(message, buf)){
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff ffa1 	bl	8007f66 <isSimilarToLast>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d005      	beq.n	8008036 <writeMsg+0x38>
			buf->buffer.in = buf->lastMsg;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	899a      	ldrh	r2, [r3, #12]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	801a      	strh	r2, [r3, #0]
			isSimilarActive = 1;
 8008032:	2301      	movs	r3, #1
 8008034:	73bb      	strb	r3, [r7, #14]
		}
		bufferState = RINGBUFFER_cIn(message->type, &buf->buffer);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	791b      	ldrb	r3, [r3, #4]
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	4611      	mov	r1, r2
 800803e:	4618      	mov	r0, r3
 8008040:	f000 f942 	bl	80082c8 <RINGBUFFER_cIn>
 8008044:	4603      	mov	r3, r0
 8008046:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->index >> 8), &buf->buffer);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	0a1b      	lsrs	r3, r3, #8
 800804e:	b29b      	uxth	r3, r3
 8008050:	b2db      	uxtb	r3, r3
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	4611      	mov	r1, r2
 8008056:	4618      	mov	r0, r3
 8008058:	f000 f936 	bl	80082c8 <RINGBUFFER_cIn>
 800805c:	4603      	mov	r3, r0
 800805e:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->index), &buf->buffer);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	881b      	ldrh	r3, [r3, #0]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	4611      	mov	r1, r2
 800806a:	4618      	mov	r0, r3
 800806c:	f000 f92c 	bl	80082c8 <RINGBUFFER_cIn>
 8008070:	4603      	mov	r3, r0
 8008072:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->value >> 8), &buf->buffer);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800807a:	121b      	asrs	r3, r3, #8
 800807c:	b21b      	sxth	r3, r3
 800807e:	b2db      	uxtb	r3, r3
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	4611      	mov	r1, r2
 8008084:	4618      	mov	r0, r3
 8008086:	f000 f91f 	bl	80082c8 <RINGBUFFER_cIn>
 800808a:	4603      	mov	r3, r0
 800808c:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->value), &buf->buffer);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008094:	b2db      	uxtb	r3, r3
 8008096:	683a      	ldr	r2, [r7, #0]
 8008098:	4611      	mov	r1, r2
 800809a:	4618      	mov	r0, r3
 800809c:	f000 f914 	bl	80082c8 <RINGBUFFER_cIn>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->ctx >> 8), &buf->buffer);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80080aa:	121b      	asrs	r3, r3, #8
 80080ac:	b21b      	sxth	r3, r3
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	4611      	mov	r1, r2
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 f907 	bl	80082c8 <RINGBUFFER_cIn>
 80080ba:	4603      	mov	r3, r0
 80080bc:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn((char)(message->ctx), &buf->buffer);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	4611      	mov	r1, r2
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 f8fc 	bl	80082c8 <RINGBUFFER_cIn>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73fb      	strb	r3, [r7, #15]
		bufferState = RINGBUFFER_cIn(message->origin, &buf->buffer);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	795b      	ldrb	r3, [r3, #5]
 80080d8:	683a      	ldr	r2, [r7, #0]
 80080da:	4611      	mov	r1, r2
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 f8f3 	bl	80082c8 <RINGBUFFER_cIn>
 80080e2:	4603      	mov	r3, r0
 80080e4:	73fb      	strb	r3, [r7, #15]
	}
	if(bufferState ==  ringbuffer_FULL) buf->buffer.in = nextMsgTmp;
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
 80080e8:	2b03      	cmp	r3, #3
 80080ea:	d103      	bne.n	80080f4 <writeMsg+0xf6>
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	89ba      	ldrh	r2, [r7, #12]
 80080f0:	801a      	strh	r2, [r3, #0]
 80080f2:	e005      	b.n	8008100 <writeMsg+0x102>
	else if(!isSimilarActive) buf->lastMsg = nextMsgTmp;
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d102      	bne.n	8008100 <writeMsg+0x102>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	89ba      	ldrh	r2, [r7, #12]
 80080fe:	819a      	strh	r2, [r3, #12]
	return bufferState;
 8008100:	7bfb      	ldrb	r3, [r7, #15]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <msg_writeEvent>:
	msgBuffer.out = 0;
	msgBuffer.size = size;
	msgBuffer.data = pData;
}

uint8_t msg_writeEvent(msg_Message *message, msg_Buffer *buf){
 800810a:	b580      	push	{r7, lr}
 800810c:	b084      	sub	sp, #16
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	6039      	str	r1, [r7, #0]
	message->index = CAST_MSG_TO_EVENT(message->index);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800811c:	b29a      	uxth	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	801a      	strh	r2, [r3, #0]
	uint8_t bufferState = writeMsg(message, buf);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7ff ff6a 	bl	8007ffe <writeMsg>
 800812a:	4603      	mov	r3, r0
 800812c:	73fb      	strb	r3, [r7, #15]
	return bufferState;
 800812e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <msg_writeAction>:

uint8_t msg_writeAction(msg_Message *message, msg_Buffer *buf){
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
	message->index = CAST_MSG_TO_ACTION(message->index);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800814a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800814e:	b29a      	uxth	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	801a      	strh	r2, [r3, #0]
	uint8_t bufferState = writeMsg(message, buf);
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7ff ff51 	bl	8007ffe <writeMsg>
 800815c:	4603      	mov	r3, r0
 800815e:	73fb      	strb	r3, [r7, #15]
	return bufferState;
 8008160:	7bfb      	ldrb	r3, [r7, #15]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <msg_getNext>:

msg_Message *msg_getNext(msg_Message *message, msg_Buffer *buf){
 800816a:	b580      	push	{r7, lr}
 800816c:	b084      	sub	sp, #16
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	6039      	str	r1, [r7, #0]
	uint8_t bufferState =  ringbuffer_OK;
 8008174:	2301      	movs	r3, #1
 8008176:	73fb      	strb	r3, [r7, #15]
	char tmp = 0;
 8008178:	2300      	movs	r3, #0
 800817a:	73bb      	strb	r3, [r7, #14]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 800817c:	683a      	ldr	r2, [r7, #0]
 800817e:	f107 030e 	add.w	r3, r7, #14
 8008182:	4611      	mov	r1, r2
 8008184:	4618      	mov	r0, r3
 8008186:	f000 f8dc 	bl	8008342 <RINGBUFFER_cOut>
 800818a:	4603      	mov	r3, r0
 800818c:	73fb      	strb	r3, [r7, #15]
	message->type = tmp;
 800818e:	7bba      	ldrb	r2, [r7, #14]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	711a      	strb	r2, [r3, #4]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8008194:	683a      	ldr	r2, [r7, #0]
 8008196:	f107 030e 	add.w	r3, r7, #14
 800819a:	4611      	mov	r1, r2
 800819c:	4618      	mov	r0, r3
 800819e:	f000 f8d0 	bl	8008342 <RINGBUFFER_cOut>
 80081a2:	4603      	mov	r3, r0
 80081a4:	73fb      	strb	r3, [r7, #15]
	message->index |= (uint16_t)((tmp & 0xFF) << 8);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	881a      	ldrh	r2, [r3, #0]
 80081aa:	7bbb      	ldrb	r3, [r7, #14]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	021b      	lsls	r3, r3, #8
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	4313      	orrs	r3, r2
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	801a      	strh	r2, [r3, #0]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	f107 030e 	add.w	r3, r7, #14
 80081c0:	4611      	mov	r1, r2
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 f8bd 	bl	8008342 <RINGBUFFER_cOut>
 80081c8:	4603      	mov	r3, r0
 80081ca:	73fb      	strb	r3, [r7, #15]
	message->index |= (uint16_t)(tmp & 0xFF);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	881a      	ldrh	r2, [r3, #0]
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	4313      	orrs	r3, r2
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	801a      	strh	r2, [r3, #0]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	f107 030e 	add.w	r3, r7, #14
 80081e2:	4611      	mov	r1, r2
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 f8ac 	bl	8008342 <RINGBUFFER_cOut>
 80081ea:	4603      	mov	r3, r0
 80081ec:	73fb      	strb	r3, [r7, #15]
	message->value |= (uint16_t)((tmp & 0xFF) << 8);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80081f4:	7bbb      	ldrb	r3, [r7, #14]
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	021b      	lsls	r3, r3, #8
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	b21b      	sxth	r3, r3
 80081fe:	4313      	orrs	r3, r2
 8008200:	b21a      	sxth	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	805a      	strh	r2, [r3, #2]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	f107 030e 	add.w	r3, r7, #14
 800820c:	4611      	mov	r1, r2
 800820e:	4618      	mov	r0, r3
 8008210:	f000 f897 	bl	8008342 <RINGBUFFER_cOut>
 8008214:	4603      	mov	r3, r0
 8008216:	73fb      	strb	r3, [r7, #15]
	message->value |= (uint16_t)(tmp & 0xFF);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800821e:	7bbb      	ldrb	r3, [r7, #14]
 8008220:	b21b      	sxth	r3, r3
 8008222:	4313      	orrs	r3, r2
 8008224:	b21a      	sxth	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	805a      	strh	r2, [r3, #2]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	f107 030e 	add.w	r3, r7, #14
 8008230:	4611      	mov	r1, r2
 8008232:	4618      	mov	r0, r3
 8008234:	f000 f885 	bl	8008342 <RINGBUFFER_cOut>
 8008238:	4603      	mov	r3, r0
 800823a:	73fb      	strb	r3, [r7, #15]
	message->ctx |= (uint16_t)((tmp & 0xFF) << 8);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8008242:	7bbb      	ldrb	r3, [r7, #14]
 8008244:	b29b      	uxth	r3, r3
 8008246:	021b      	lsls	r3, r3, #8
 8008248:	b29b      	uxth	r3, r3
 800824a:	b21b      	sxth	r3, r3
 800824c:	4313      	orrs	r3, r2
 800824e:	b21a      	sxth	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	80da      	strh	r2, [r3, #6]
	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8008254:	683a      	ldr	r2, [r7, #0]
 8008256:	f107 030e 	add.w	r3, r7, #14
 800825a:	4611      	mov	r1, r2
 800825c:	4618      	mov	r0, r3
 800825e:	f000 f870 	bl	8008342 <RINGBUFFER_cOut>
 8008262:	4603      	mov	r3, r0
 8008264:	73fb      	strb	r3, [r7, #15]
	message->ctx |= (uint16_t)(tmp & 0xFF);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800826c:	7bbb      	ldrb	r3, [r7, #14]
 800826e:	b21b      	sxth	r3, r3
 8008270:	4313      	orrs	r3, r2
 8008272:	b21a      	sxth	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	80da      	strh	r2, [r3, #6]

	bufferState = RINGBUFFER_cOut(&tmp,&buf->buffer);
 8008278:	683a      	ldr	r2, [r7, #0]
 800827a:	f107 030e 	add.w	r3, r7, #14
 800827e:	4611      	mov	r1, r2
 8008280:	4618      	mov	r0, r3
 8008282:	f000 f85e 	bl	8008342 <RINGBUFFER_cOut>
 8008286:	4603      	mov	r3, r0
 8008288:	73fb      	strb	r3, [r7, #15]
	message->origin = tmp;
 800828a:	7bba      	ldrb	r2, [r7, #14]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	715a      	strb	r2, [r3, #5]
	if(bufferState ==  ringbuffer_OK)return message;
 8008290:	7bfb      	ldrb	r3, [r7, #15]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d101      	bne.n	800829a <msg_getNext+0x130>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	e000      	b.n	800829c <msg_getNext+0x132>
	else return NULL;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <msg_isAction>:

uint8_t msg_isAction(msg_Message *message){
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
	if((message->index & ACTION_MSK) == ACTION_MSK) return TRUE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	b21b      	sxth	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	da01      	bge.n	80082ba <msg_isAction+0x16>
 80082b6:	2301      	movs	r3, #1
 80082b8:	e000      	b.n	80082bc <msg_isAction+0x18>
	else return FALSE;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <RINGBUFFER_cIn>:
 *  Created on: 15.01.2018
 *      Author: sawadee
 */
#include "ringbuffer.h"

uint8_t RINGBUFFER_cIn(char data, stRingBuf *pBuf){
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	4603      	mov	r3, r0
 80082d0:	6039      	str	r1, [r7, #0]
 80082d2:	71fb      	strb	r3, [r7, #7]
	if(pBuf->data != NULL){
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d02b      	beq.n	8008334 <RINGBUFFER_cIn+0x6c>
		if ( ( pBuf->in + 1 == pBuf->out ) || ( pBuf->out == 0 && pBuf->in + 1 == pBuf->size ) ) return ringbuffer_FULL;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	881b      	ldrh	r3, [r3, #0]
 80082e0:	3301      	adds	r3, #1
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	8852      	ldrh	r2, [r2, #2]
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d00a      	beq.n	8008300 <RINGBUFFER_cIn+0x38>
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	885b      	ldrh	r3, [r3, #2]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d108      	bne.n	8008304 <RINGBUFFER_cIn+0x3c>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	3301      	adds	r3, #1
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	8892      	ldrh	r2, [r2, #4]
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d101      	bne.n	8008304 <RINGBUFFER_cIn+0x3c>
 8008300:	2303      	movs	r3, #3
 8008302:	e018      	b.n	8008336 <RINGBUFFER_cIn+0x6e>
		pBuf->data[pBuf->in] = data;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	8812      	ldrh	r2, [r2, #0]
 800830c:	4413      	add	r3, r2
 800830e:	79fa      	ldrb	r2, [r7, #7]
 8008310:	701a      	strb	r2, [r3, #0]
		pBuf->in++;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	881b      	ldrh	r3, [r3, #0]
 8008316:	3301      	adds	r3, #1
 8008318:	b29a      	uxth	r2, r3
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	801a      	strh	r2, [r3, #0]
		if (pBuf->in >= pBuf->size) pBuf->in = 0;
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	881a      	ldrh	r2, [r3, #0]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	889b      	ldrh	r3, [r3, #4]
 8008326:	429a      	cmp	r2, r3
 8008328:	d302      	bcc.n	8008330 <RINGBUFFER_cIn+0x68>
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2200      	movs	r2, #0
 800832e:	801a      	strh	r2, [r3, #0]
		return ringbuffer_OK;
 8008330:	2301      	movs	r3, #1
 8008332:	e000      	b.n	8008336 <RINGBUFFER_cIn+0x6e>
	}else return ringbuffer_NO_BUF;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <RINGBUFFER_cOut>:
uint8_t RINGBUFFER_cOut(char *pData, stRingBuf *pBuf){
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	6039      	str	r1, [r7, #0]
	if(pBuf->data != NULL){
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d020      	beq.n	8008396 <RINGBUFFER_cOut+0x54>
		if (pBuf->out == pBuf->in) return ringbuffer_EMPTY;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	885a      	ldrh	r2, [r3, #2]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	881b      	ldrh	r3, [r3, #0]
 800835c:	429a      	cmp	r2, r3
 800835e:	d101      	bne.n	8008364 <RINGBUFFER_cOut+0x22>
 8008360:	2302      	movs	r3, #2
 8008362:	e019      	b.n	8008398 <RINGBUFFER_cOut+0x56>
		*pData = pBuf->data[pBuf->out];
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	683a      	ldr	r2, [r7, #0]
 800836a:	8852      	ldrh	r2, [r2, #2]
 800836c:	4413      	add	r3, r2
 800836e:	781a      	ldrb	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	701a      	strb	r2, [r3, #0]
		pBuf->out++;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	885b      	ldrh	r3, [r3, #2]
 8008378:	3301      	adds	r3, #1
 800837a:	b29a      	uxth	r2, r3
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	805a      	strh	r2, [r3, #2]
		if (pBuf->out >= pBuf->size)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	885a      	ldrh	r2, [r3, #2]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	889b      	ldrh	r3, [r3, #4]
 8008388:	429a      	cmp	r2, r3
 800838a:	d302      	bcc.n	8008392 <RINGBUFFER_cOut+0x50>
		  pBuf->out = 0;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	2200      	movs	r2, #0
 8008390:	805a      	strh	r2, [r3, #2]
		return ringbuffer_OK;
 8008392:	2301      	movs	r3, #1
 8008394:	e000      	b.n	8008398 <RINGBUFFER_cOut+0x56>
	}else return ringbuffer_NO_BUF;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <RINGBUFFER_isEmpty>:

uint8_t RINGBUFFER_isEmpty(stRingBuf *pBuf){
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
	if(pBuf->out == pBuf->in) return 1;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	885a      	ldrh	r2, [r3, #2]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d101      	bne.n	80083bc <RINGBUFFER_isEmpty+0x18>
 80083b8:	2301      	movs	r3, #1
 80083ba:	e000      	b.n	80083be <RINGBUFFER_isEmpty+0x1a>
	else return 0;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <soft_i2c_bsp_gpioInit>:

#define soft_i2c_bsp_GPIO_MODE_MSK 			0x03
#define soft_i2c_bsp_GPIO_MODE_INPUT_FLOAT 	0x00
#define soft_i2c_bsp_GPIO_MODE_OUTPUT_OD 	0x01

static inline void soft_i2c_bsp_gpioInit(soft_i2c_bsp_pin_device *pin){
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
	/*Enable open drain output*/
	pin->GPIOx->OTYPER |= pin->GPIO_Pin;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	6812      	ldr	r2, [r2, #0]
 80083da:	6852      	ldr	r2, [r2, #4]
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	8889      	ldrh	r1, [r1, #4]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	605a      	str	r2, [r3, #4]
	/*Set as input*/
	pin->GPIOx->MODER &= ~(soft_i2c_bsp_GPIO_MODE_MSK << (pin->GPIO_Pin_BitPos << 1));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	6812      	ldr	r2, [r2, #0]
 80083ec:	6812      	ldr	r2, [r2, #0]
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	7989      	ldrb	r1, [r1, #6]
 80083f2:	0049      	lsls	r1, r1, #1
 80083f4:	2003      	movs	r0, #3
 80083f6:	fa00 f101 	lsl.w	r1, r0, r1
 80083fa:	43c9      	mvns	r1, r1
 80083fc:	400a      	ands	r2, r1
 80083fe:	601a      	str	r2, [r3, #0]
	pin->GPIOx->MODER |= (soft_i2c_bsp_GPIO_MODE_INPUT_FLOAT << (pin->GPIO_Pin_BitPos << 1));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	6812      	ldr	r2, [r2, #0]
 8008408:	6812      	ldr	r2, [r2, #0]
 800840a:	601a      	str	r2, [r3, #0]
	/*Disable all pull ups or pull downs*/
	pin->GPIOx->PUPDR &= ~(soft_i2c_bsp_GPIO_PULL_MSK << (pin->GPIO_Pin_BitPos << 1));
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	6812      	ldr	r2, [r2, #0]
 8008414:	68d2      	ldr	r2, [r2, #12]
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	7989      	ldrb	r1, [r1, #6]
 800841a:	0049      	lsls	r1, r1, #1
 800841c:	2003      	movs	r0, #3
 800841e:	fa00 f101 	lsl.w	r1, r0, r1
 8008422:	43c9      	mvns	r1, r1
 8008424:	400a      	ands	r2, r1
 8008426:	60da      	str	r2, [r3, #12]
	pin->GPIOx->PUPDR |= (soft_i2c_bsp_GPIO_PULL_NONE << (pin->GPIO_Pin_BitPos << 1));
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	6812      	ldr	r2, [r2, #0]
 8008430:	68d2      	ldr	r2, [r2, #12]
 8008432:	60da      	str	r2, [r3, #12]
	/*Set gpio speed as high as possible*/
	pin->GPIOx->OSPEEDR &= ~(soft_i2c_bsp_GPIO_SPEED_MSK << (pin->GPIO_Pin_BitPos << 1));
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	6812      	ldr	r2, [r2, #0]
 800843c:	6892      	ldr	r2, [r2, #8]
 800843e:	6879      	ldr	r1, [r7, #4]
 8008440:	7989      	ldrb	r1, [r1, #6]
 8008442:	0049      	lsls	r1, r1, #1
 8008444:	2003      	movs	r0, #3
 8008446:	fa00 f101 	lsl.w	r1, r0, r1
 800844a:	43c9      	mvns	r1, r1
 800844c:	400a      	ands	r2, r1
 800844e:	609a      	str	r2, [r3, #8]
	pin->GPIOx->OSPEEDR |= soft_i2c_bsp_GPIO_SPEED_VERY_HIGH << (pin->GPIO_Pin_BitPos << 1);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	6812      	ldr	r2, [r2, #0]
 8008458:	6892      	ldr	r2, [r2, #8]
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	7989      	ldrb	r1, [r1, #6]
 800845e:	0049      	lsls	r1, r1, #1
 8008460:	2003      	movs	r0, #3
 8008462:	fa00 f101 	lsl.w	r1, r0, r1
 8008466:	430a      	orrs	r2, r1
 8008468:	609a      	str	r2, [r3, #8]
	/*Set gpio output level always to low*/
	pin->GPIOx->ODR &= ~pin->GPIO_Pin;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	6812      	ldr	r2, [r2, #0]
 8008472:	6952      	ldr	r2, [r2, #20]
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	8889      	ldrh	r1, [r1, #4]
 8008478:	43c9      	mvns	r1, r1
 800847a:	400a      	ands	r2, r1
 800847c:	615a      	str	r2, [r3, #20]
}
 800847e:	bf00      	nop
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <soft_i2c_bsp_readGpio>:
		pin->GPIOx->MODER &= ~(soft_i2c_bsp_GPIO_MODE_MSK << (pin->GPIO_Pin_BitPos << 1));
		pin->GPIOx->MODER |= (soft_i2c_bsp_GPIO_MODE_OUTPUT_OD << (pin->GPIO_Pin_BitPos << 1));
	}
}

static inline bool soft_i2c_bsp_readGpio(soft_i2c_bsp_pin_device *pin){
 800848a:	b580      	push	{r7, lr}
 800848c:	b082      	sub	sp, #8
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
	//TODO: remove HAL
	return HAL_GPIO_ReadPin(pin->GPIOx, pin->GPIO_Pin);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	889b      	ldrh	r3, [r3, #4]
 800849a:	4619      	mov	r1, r3
 800849c:	4610      	mov	r0, r2
 800849e:	f7f9 fc95 	bl	8001dcc <HAL_GPIO_ReadPin>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	bf14      	ite	ne
 80084a8:	2301      	movne	r3, #1
 80084aa:	2300      	moveq	r3, #0
 80084ac:	b2db      	uxtb	r3, r3
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <soft_i2c_bsp_timInit>:

static inline void soft_i2c_bsp_timInit(soft_i2c_bsp_tim_device *tim){
 80084b6:	b480      	push	{r7}
 80084b8:	b083      	sub	sp, #12
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
	tim->TIMx->CR1 &= ~TIM_CR1_CEN;		//Stop counter
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	6812      	ldr	r2, [r2, #0]
 80084c6:	6812      	ldr	r2, [r2, #0]
 80084c8:	f022 0201 	bic.w	r2, r2, #1
 80084cc:	601a      	str	r2, [r3, #0]
	tim->TIMx->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	6812      	ldr	r2, [r2, #0]
 80084d6:	6812      	ldr	r2, [r2, #0]
 80084d8:	f042 0202 	orr.w	r2, r2, #2
 80084dc:	601a      	str	r2, [r3, #0]
	tim->TIMx->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	6812      	ldr	r2, [r2, #0]
 80084e6:	6912      	ldr	r2, [r2, #16]
 80084e8:	f022 0201 	bic.w	r2, r2, #1
 80084ec:	611a      	str	r2, [r3, #16]
	tim->TIMx->EGR |= TIM_EGR_UG;		//Force reload of shadow register -> Start from beginning
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	6812      	ldr	r2, [r2, #0]
 80084f6:	6952      	ldr	r2, [r2, #20]
 80084f8:	f042 0201 	orr.w	r2, r2, #1
 80084fc:	615a      	str	r2, [r3, #20]
	tim->TIMx->DIER |= TIM_DIER_UIE;	//Enable update interrupts
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	6812      	ldr	r2, [r2, #0]
 8008506:	68d2      	ldr	r2, [r2, #12]
 8008508:	f042 0201 	orr.w	r2, r2, #1
 800850c:	60da      	str	r2, [r3, #12]
	tim->TIMx->CR1 |= TIM_CR1_CEN;		//Enable counter
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	6812      	ldr	r2, [r2, #0]
 8008516:	6812      	ldr	r2, [r2, #0]
 8008518:	f042 0201 	orr.w	r2, r2, #1
 800851c:	601a      	str	r2, [r3, #0]
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <soft_i2c_bsp_timStart>:

static inline void soft_i2c_bsp_timStart(soft_i2c_bsp_tim_device *tim){
 800852a:	b480      	push	{r7}
 800852c:	b083      	sub	sp, #12
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
//	tim->TIMx->CR1 |= TIM_CR1_CEN;		//Enable counter
	tim->TIMx->CR1 &= ~TIM_CR1_UDIS;	//Allow that update can be triggered
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	6812      	ldr	r2, [r2, #0]
 800853a:	6812      	ldr	r2, [r2, #0]
 800853c:	f022 0202 	bic.w	r2, r2, #2
 8008540:	601a      	str	r2, [r3, #0]
}
 8008542:	bf00      	nop
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <soft_i2c_bsp_timStop>:

static inline void soft_i2c_bsp_timStop(soft_i2c_bsp_tim_device *tim){
 800854e:	b480      	push	{r7}
 8008550:	b083      	sub	sp, #12
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
//	tim->TIMx->CR1 &= ~TIM_CR1_CEN;		//Enable counter
	tim->TIMx->CR1 |= TIM_CR1_UDIS;		//Avoid that update can be triggered
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	6812      	ldr	r2, [r2, #0]
 800855e:	6812      	ldr	r2, [r2, #0]
 8008560:	f042 0202 	orr.w	r2, r2, #2
 8008564:	601a      	str	r2, [r3, #0]
}
 8008566:	bf00      	nop
 8008568:	370c      	adds	r7, #12
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
	...

08008574 <i2c_soft_init>:
static int write_byte(soft_i2c_cfg_Config *self, uint8_t byte);
static int read_byte(soft_i2c_cfg_Config *self, uint8_t *byte_p, int ack);
/******************************************************************************
* Function Definitions
*******************************************************************************/
void i2c_soft_init(soft_i2c_cfg_Config *self){
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
    self->baudrate_us = (1000000L / 2L / self->baudrate);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	695b      	ldr	r3, [r3, #20]
 8008580:	4a0b      	ldr	r2, [pc, #44]	; (80085b0 <i2c_soft_init+0x3c>)
 8008582:	fbb2 f2f3 	udiv	r2, r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	619a      	str	r2, [r3, #24]
    soft_i2c_bsp_gpioInit(&self->scl_pin);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4618      	mov	r0, r3
 800858e:	f7ff ff1c 	bl	80083ca <soft_i2c_bsp_gpioInit>
    soft_i2c_bsp_gpioInit(&self->sda_pin);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	3308      	adds	r3, #8
 8008596:	4618      	mov	r0, r3
 8008598:	f7ff ff17 	bl	80083ca <soft_i2c_bsp_gpioInit>
    soft_i2c_bsp_timInit(&self->timer);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3310      	adds	r3, #16
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7ff ff88 	bl	80084b6 <soft_i2c_bsp_timInit>
}
 80085a6:	bf00      	nop
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	0007a120 	.word	0x0007a120

080085b4 <i2c_soft_timer_us>:

void i2c_soft_timer_us(soft_i2c_cfg_Config *self){
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
	if(self->timer_us > 0) --self->timer_us;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	dd04      	ble.n	80085ce <i2c_soft_timer_us+0x1a>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	1e5a      	subs	r2, r3, #1
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80085ce:	bf00      	nop
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <i2c_soft_mem_read>:
	/*4. Send the stop condition. */
	status = stop_cond(self);
	return status;
}

int i2c_soft_mem_read(soft_i2c_cfg_Config *self, int address, int memAddr, int memAddrSize, uint8_t *data, int size){
 80085da:	b580      	push	{r7, lr}
 80085dc:	b088      	sub	sp, #32
 80085de:	af00      	add	r7, sp, #0
 80085e0:	60f8      	str	r0, [r7, #12]
 80085e2:	60b9      	str	r1, [r7, #8]
 80085e4:	607a      	str	r2, [r7, #4]
 80085e6:	603b      	str	r3, [r7, #0]
	int i;
	int ack;
	int status = soft_i2c_RETURN_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	61bb      	str	r3, [r7, #24]
	/*** Write part ***/
	/* 1. Send the start condition. */
	status = start_cond(self);
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f000 f91f 	bl	8008830 <start_cond>
 80085f2:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) return status;
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <i2c_soft_mem_read+0x24>
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	e071      	b.n	80086e2 <i2c_soft_mem_read+0x108>
	/* 2. Write the address with the direction bit set to 0.*/
	status = write_byte(self, address);
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	b2db      	uxtb	r3, r3
 8008602:	4619      	mov	r1, r3
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 fa31 	bl	8008a6c <write_byte>
 800860a:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) {
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d004      	beq.n	800861c <i2c_soft_mem_read+0x42>
		stop_cond(self);	/*Ignore the possible error of stop condition*/
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f000 f94d 	bl	80088b2 <stop_cond>
		return status;
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	e062      	b.n	80086e2 <i2c_soft_mem_read+0x108>
	}
	/* 3. Write the mem address. */
	for (i = memAddrSize; i > 0; i--) {
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	61fb      	str	r3, [r7, #28]
 8008620:	e017      	b.n	8008652 <i2c_soft_mem_read+0x78>
		uint8_t addressPart = ((memAddr >> ((i-1) << 3)) & 0xFF);
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	3b01      	subs	r3, #1
 8008626:	00db      	lsls	r3, r3, #3
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	fa42 f303 	asr.w	r3, r2, r3
 800862e:	75fb      	strb	r3, [r7, #23]
		status = write_byte(self, addressPart);
 8008630:	7dfb      	ldrb	r3, [r7, #23]
 8008632:	4619      	mov	r1, r3
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f000 fa19 	bl	8008a6c <write_byte>
 800863a:	61b8      	str	r0, [r7, #24]
		if (status != soft_i2c_RETURN_OK) {
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d004      	beq.n	800864c <i2c_soft_mem_read+0x72>
			stop_cond(self); /*Ignore the possible error of stop condition*/
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f000 f935 	bl	80088b2 <stop_cond>
			return status;
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	e04a      	b.n	80086e2 <i2c_soft_mem_read+0x108>
	for (i = memAddrSize; i > 0; i--) {
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	3b01      	subs	r3, #1
 8008650:	61fb      	str	r3, [r7, #28]
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	2b00      	cmp	r3, #0
 8008656:	dce4      	bgt.n	8008622 <i2c_soft_mem_read+0x48>
		}
	}
	/*** Read part ***/
	/* 4. Send the start condition. */
	status = start_cond(self);
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 f8e9 	bl	8008830 <start_cond>
 800865e:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) return status;
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <i2c_soft_mem_read+0x90>
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	e03b      	b.n	80086e2 <i2c_soft_mem_read+0x108>
	/* 5. Write the address with the direction bit set to 1.*/
	status = write_byte(self, ((address) | 0x1));
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	b25b      	sxtb	r3, r3
 800866e:	f043 0301 	orr.w	r3, r3, #1
 8008672:	b25b      	sxtb	r3, r3
 8008674:	b2db      	uxtb	r3, r3
 8008676:	4619      	mov	r1, r3
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f000 f9f7 	bl	8008a6c <write_byte>
 800867e:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) {
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d004      	beq.n	8008690 <i2c_soft_mem_read+0xb6>
		stop_cond(self); /*Ignore the possible error of stop condition*/
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 f913 	bl	80088b2 <stop_cond>
		return status;
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	e028      	b.n	80086e2 <i2c_soft_mem_read+0x108>
	}
	/* 6. Read the data. */
	for (i = 0; i < size; i++) {
 8008690:	2300      	movs	r3, #0
 8008692:	61fb      	str	r3, [r7, #28]
 8008694:	e01c      	b.n	80086d0 <i2c_soft_mem_read+0xf6>
		/* ACK all but last read byte. */
		ack = (i + 1 != size);
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	1c5a      	adds	r2, r3, #1
 800869a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869c:	429a      	cmp	r2, r3
 800869e:	bf14      	ite	ne
 80086a0:	2301      	movne	r3, #1
 80086a2:	2300      	moveq	r3, #0
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	613b      	str	r3, [r7, #16]
		status = read_byte(self, &data[i], ack);
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086ac:	4413      	add	r3, r2
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	4619      	mov	r1, r3
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 fa14 	bl	8008ae0 <read_byte>
 80086b8:	61b8      	str	r0, [r7, #24]
		if (status != soft_i2c_RETURN_OK) {
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d004      	beq.n	80086ca <i2c_soft_mem_read+0xf0>
			stop_cond(self); /*Ignore the possible error of stop condition*/
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 f8f6 	bl	80088b2 <stop_cond>
			return status;
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	e00b      	b.n	80086e2 <i2c_soft_mem_read+0x108>
	for (i = 0; i < size; i++) {
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	3301      	adds	r3, #1
 80086ce:	61fb      	str	r3, [r7, #28]
 80086d0:	69fa      	ldr	r2, [r7, #28]
 80086d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d4:	429a      	cmp	r2, r3
 80086d6:	dbde      	blt.n	8008696 <i2c_soft_mem_read+0xbc>
		}
	}
	/*7. Send the stop condition. */
	status = stop_cond(self);
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 f8ea 	bl	80088b2 <stop_cond>
 80086de:	61b8      	str	r0, [r7, #24]
	return status;
 80086e0:	69bb      	ldr	r3, [r7, #24]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3720      	adds	r7, #32
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <i2c_soft_mem_write>:
	/*4. Send the stop condition. */
	status = stop_cond(self);
	return status;
}

int i2c_soft_mem_write(soft_i2c_cfg_Config *self, int address, int memAddr, int memAddrSize, const uint8_t *data, int size){
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b088      	sub	sp, #32
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	60f8      	str	r0, [r7, #12]
 80086f2:	60b9      	str	r1, [r7, #8]
 80086f4:	607a      	str	r2, [r7, #4]
 80086f6:	603b      	str	r3, [r7, #0]
	int i;
	int status = soft_i2c_RETURN_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	61bb      	str	r3, [r7, #24]
	/* 1. Send the start condition. */
	status = start_cond(self);
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 f897 	bl	8008830 <start_cond>
 8008702:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) return status;
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <i2c_soft_mem_write+0x24>
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	e04c      	b.n	80087a8 <i2c_soft_mem_write+0xbe>
	/* 2. Write the address with the direction bit set to 0. */
	status = write_byte(self, address);
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	b2db      	uxtb	r3, r3
 8008712:	4619      	mov	r1, r3
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f000 f9a9 	bl	8008a6c <write_byte>
 800871a:	61b8      	str	r0, [r7, #24]
	if (status != soft_i2c_RETURN_OK) {
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d004      	beq.n	800872c <i2c_soft_mem_write+0x42>
		stop_cond(self);	/*Ignore the possible error of stop condition*/
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 f8c5 	bl	80088b2 <stop_cond>
		return status;
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	e03d      	b.n	80087a8 <i2c_soft_mem_write+0xbe>
	}
	/* 3. Write the mem address. */
	for (i = memAddrSize; i > 0; i--) {
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	61fb      	str	r3, [r7, #28]
 8008730:	e017      	b.n	8008762 <i2c_soft_mem_write+0x78>
		uint8_t addressPart = ((memAddr >> ((i-1) << 3)) & 0xFF);
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	3b01      	subs	r3, #1
 8008736:	00db      	lsls	r3, r3, #3
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	fa42 f303 	asr.w	r3, r2, r3
 800873e:	75fb      	strb	r3, [r7, #23]
		status = write_byte(self, addressPart);
 8008740:	7dfb      	ldrb	r3, [r7, #23]
 8008742:	4619      	mov	r1, r3
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 f991 	bl	8008a6c <write_byte>
 800874a:	61b8      	str	r0, [r7, #24]
		if (status != soft_i2c_RETURN_OK) {
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d004      	beq.n	800875c <i2c_soft_mem_write+0x72>
			stop_cond(self); /*Ignore the possible error of stop condition*/
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f000 f8ad 	bl	80088b2 <stop_cond>
			return status;
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	e025      	b.n	80087a8 <i2c_soft_mem_write+0xbe>
	for (i = memAddrSize; i > 0; i--) {
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	3b01      	subs	r3, #1
 8008760:	61fb      	str	r3, [r7, #28]
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	2b00      	cmp	r3, #0
 8008766:	dce4      	bgt.n	8008732 <i2c_soft_mem_write+0x48>
		}
	}
	/* 4. Write the data. */
	for (i = 0; i < size; i++) {
 8008768:	2300      	movs	r3, #0
 800876a:	61fb      	str	r3, [r7, #28]
 800876c:	e013      	b.n	8008796 <i2c_soft_mem_write+0xac>
		status = write_byte(self, data[i]);
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008772:	4413      	add	r3, r2
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	4619      	mov	r1, r3
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f000 f977 	bl	8008a6c <write_byte>
 800877e:	61b8      	str	r0, [r7, #24]
		if (status != soft_i2c_RETURN_OK) {
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d004      	beq.n	8008790 <i2c_soft_mem_write+0xa6>
			stop_cond(self); /*Ignore the possible error of stop condition*/
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 f893 	bl	80088b2 <stop_cond>
			return status;
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	e00b      	b.n	80087a8 <i2c_soft_mem_write+0xbe>
	for (i = 0; i < size; i++) {
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	3301      	adds	r3, #1
 8008794:	61fb      	str	r3, [r7, #28]
 8008796:	69fa      	ldr	r2, [r7, #28]
 8008798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879a:	429a      	cmp	r2, r3
 800879c:	dbe7      	blt.n	800876e <i2c_soft_mem_write+0x84>
		}
	}
	/*5. Send the stop condition. */
	status = stop_cond(self);
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 f887 	bl	80088b2 <stop_cond>
 80087a4:	61b8      	str	r0, [r7, #24]
	return status;
 80087a6:	69bb      	ldr	r3, [r7, #24]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3720      	adds	r7, #32
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <busy_wait_us>:
    if (status != soft_i2c_RETURN_OK) return status;
    return res;
}

/* Helper ----------------------------------------------------------------------*/
static void busy_wait_us(soft_i2c_cfg_Config *self, uint32_t time_us){
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
	self->timer_us = time_us;
 80087ba:	683a      	ldr	r2, [r7, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	625a      	str	r2, [r3, #36]	; 0x24
	//TODO: Enable timer
	soft_i2c_bsp_timStart(&self->timer);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3310      	adds	r3, #16
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7ff feb0 	bl	800852a <soft_i2c_bsp_timStart>
//	htim16.Instance->CR1 &= ~TIM_CR1_UDIS;
	while(self->timer_us > 0);
 80087ca:	bf00      	nop
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	dcfb      	bgt.n	80087cc <busy_wait_us+0x1c>
	//TODO: stop timer
	soft_i2c_bsp_timStop(&self->timer);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	3310      	adds	r3, #16
 80087d8:	4618      	mov	r0, r3
 80087da:	f7ff feb8 	bl	800854e <soft_i2c_bsp_timStop>
//	htim16.Instance->CR1 |= TIM_CR1_UDIS;

}
 80087de:	bf00      	nop
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <wait_for_clock_stretching_end>:

static int wait_for_clock_stretching_end(soft_i2c_cfg_Config *self){
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b084      	sub	sp, #16
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
    uint32_t clock_stretching_us = 0;
 80087ee:	2300      	movs	r3, #0
 80087f0:	60fb      	str	r3, [r7, #12]
    do {
        if (soft_i2c_bsp_readGpio(&self->scl_pin) == 1) {
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7ff fe48 	bl	800848a <soft_i2c_bsp_readGpio>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d001      	beq.n	8008804 <wait_for_clock_stretching_end+0x1e>
            return soft_i2c_RETURN_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	e011      	b.n	8008828 <wait_for_clock_stretching_end+0x42>
        }
        busy_wait_us(self, self->clock_stretching_sleep_us);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7ff ffd0 	bl	80087b0 <busy_wait_us>
        clock_stretching_us += self->clock_stretching_sleep_us;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	4413      	add	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]
    } while (clock_stretching_us < self->max_clock_stretching_us);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	69da      	ldr	r2, [r3, #28]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	429a      	cmp	r2, r3
 8008822:	d8e6      	bhi.n	80087f2 <wait_for_clock_stretching_end+0xc>
    return soft_i2c_RETURN_CLOCK_STRETCH;
 8008824:	f06f 0302 	mvn.w	r3, #2
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <start_cond>:

static int start_cond(soft_i2c_cfg_Config *self){
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
	gpio_setPinMode(GPIO_MODE_INPUT, self->scl_pin.GPIOx, self->scl_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6819      	ldr	r1, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	799b      	ldrb	r3, [r3, #6]
 8008840:	b29a      	uxth	r2, r3
 8008842:	2300      	movs	r3, #0
 8008844:	2000      	movs	r0, #0
 8008846:	f001 fd5d 	bl	800a304 <gpio_setPinMode>
	/* The line is busy if SDA is low. */
	gpio_setPinMode(GPIO_MODE_INPUT, self->sda_pin.GPIOx, self->sda_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6899      	ldr	r1, [r3, #8]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	7b9b      	ldrb	r3, [r3, #14]
 8008852:	b29a      	uxth	r2, r3
 8008854:	2300      	movs	r3, #0
 8008856:	2000      	movs	r0, #0
 8008858:	f001 fd54 	bl	800a304 <gpio_setPinMode>
    if (soft_i2c_bsp_readGpio(&self->sda_pin) == 0) {
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	3308      	adds	r3, #8
 8008860:	4618      	mov	r0, r3
 8008862:	f7ff fe12 	bl	800848a <soft_i2c_bsp_readGpio>
 8008866:	4603      	mov	r3, r0
 8008868:	f083 0301 	eor.w	r3, r3, #1
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d002      	beq.n	8008878 <start_cond+0x48>
        return soft_i2c_RETURN_BUSY;
 8008872:	f06f 0301 	mvn.w	r3, #1
 8008876:	e018      	b.n	80088aa <start_cond+0x7a>
    }
    /* SCL is high, set SDA from 1 to 0. */
    gpio_setPinMode(GPIO_MODE_OUTPUT_OD, self->sda_pin.GPIOx, self->sda_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6899      	ldr	r1, [r3, #8]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	7b9b      	ldrb	r3, [r3, #14]
 8008880:	b29a      	uxth	r2, r3
 8008882:	2300      	movs	r3, #0
 8008884:	2011      	movs	r0, #17
 8008886:	f001 fd3d 	bl	800a304 <gpio_setPinMode>
    busy_wait_us(self, self->baudrate_us);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	4619      	mov	r1, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7ff ff8d 	bl	80087b0 <busy_wait_us>
    /* Set SCL low as preparation for the first transfer. */
    gpio_setPinMode(GPIO_MODE_OUTPUT_OD, self->scl_pin.GPIOx, self->scl_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6819      	ldr	r1, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	799b      	ldrb	r3, [r3, #6]
 800889e:	b29a      	uxth	r2, r3
 80088a0:	2300      	movs	r3, #0
 80088a2:	2011      	movs	r0, #17
 80088a4:	f001 fd2e 	bl	800a304 <gpio_setPinMode>
    return soft_i2c_RETURN_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <stop_cond>:

static int stop_cond(soft_i2c_cfg_Config *self){
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b082      	sub	sp, #8
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
    /* Set SDA to 0. */
    gpio_setPinMode(GPIO_MODE_OUTPUT_OD, self->sda_pin.GPIOx, self->sda_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6899      	ldr	r1, [r3, #8]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	7b9b      	ldrb	r3, [r3, #14]
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	2300      	movs	r3, #0
 80088c6:	2011      	movs	r0, #17
 80088c8:	f001 fd1c 	bl	800a304 <gpio_setPinMode>
    busy_wait_us(self, self->baudrate_us);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7ff ff6c 	bl	80087b0 <busy_wait_us>
    /* SDA to 1. */
    gpio_setPinMode(GPIO_MODE_INPUT, self->scl_pin.GPIOx, self->scl_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6819      	ldr	r1, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	799b      	ldrb	r3, [r3, #6]
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	2300      	movs	r3, #0
 80088e4:	2000      	movs	r0, #0
 80088e6:	f001 fd0d 	bl	800a304 <gpio_setPinMode>
    /* Clock stretching. */
    if (wait_for_clock_stretching_end(self) != soft_i2c_RETURN_OK) {
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7ff ff7b 	bl	80087e6 <wait_for_clock_stretching_end>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <stop_cond+0x4a>
        return soft_i2c_RETURN_CLOCK_STRETCH;
 80088f6:	f06f 0302 	mvn.w	r3, #2
 80088fa:	e029      	b.n	8008950 <stop_cond+0x9e>
    }
    /* Stop bit setup time, minimum 4us. */
    busy_wait_us(self, self->baudrate_us);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	4619      	mov	r1, r3
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f7ff ff54 	bl	80087b0 <busy_wait_us>
    /* SCL is high, set SDA from 0 to 1. */
    gpio_setPinMode(GPIO_MODE_INPUT, self->sda_pin.GPIOx, self->sda_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6899      	ldr	r1, [r3, #8]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	7b9b      	ldrb	r3, [r3, #14]
 8008910:	b29a      	uxth	r2, r3
 8008912:	2300      	movs	r3, #0
 8008914:	2000      	movs	r0, #0
 8008916:	f001 fcf5 	bl	800a304 <gpio_setPinMode>
    busy_wait_us(self, self->baudrate_us);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7ff ff45 	bl	80087b0 <busy_wait_us>
    /* Make sure no device is pulling SDA low. */
    if (soft_i2c_bsp_readGpio(&self->sda_pin) == 0) {
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	3308      	adds	r3, #8
 800892a:	4618      	mov	r0, r3
 800892c:	f7ff fdad 	bl	800848a <soft_i2c_bsp_readGpio>
 8008930:	4603      	mov	r3, r0
 8008932:	f083 0301 	eor.w	r3, r3, #1
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <stop_cond+0x90>
        return soft_i2c_RETURN_BUSY;
 800893c:	f06f 0301 	mvn.w	r3, #1
 8008940:	e006      	b.n	8008950 <stop_cond+0x9e>
    }
    busy_wait_us(self, self->baudrate_us);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7ff ff31 	bl	80087b0 <busy_wait_us>
    return soft_i2c_RETURN_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <write_bit>:

static int write_bit(soft_i2c_cfg_Config *self, int value){
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
    if (value == 1) gpio_setPinMode(GPIO_MODE_INPUT, self->sda_pin.GPIOx, self->sda_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d109      	bne.n	800897c <write_bit+0x24>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6899      	ldr	r1, [r3, #8]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	7b9b      	ldrb	r3, [r3, #14]
 8008970:	b29a      	uxth	r2, r3
 8008972:	2300      	movs	r3, #0
 8008974:	2000      	movs	r0, #0
 8008976:	f001 fcc5 	bl	800a304 <gpio_setPinMode>
 800897a:	e008      	b.n	800898e <write_bit+0x36>
    else gpio_setPinMode(GPIO_MODE_OUTPUT_OD, self->sda_pin.GPIOx, self->sda_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6899      	ldr	r1, [r3, #8]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	7b9b      	ldrb	r3, [r3, #14]
 8008984:	b29a      	uxth	r2, r3
 8008986:	2300      	movs	r3, #0
 8008988:	2011      	movs	r0, #17
 800898a:	f001 fcbb 	bl	800a304 <gpio_setPinMode>
    /* SDA change propagation delay. */
    busy_wait_us(self, self->baudrate_us);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7ff ff0b 	bl	80087b0 <busy_wait_us>
    /* Set SCL high to indicate a new valid SDA value is available */
    gpio_setPinMode(GPIO_MODE_INPUT, self->scl_pin.GPIOx, self->scl_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6819      	ldr	r1, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	799b      	ldrb	r3, [r3, #6]
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	2300      	movs	r3, #0
 80089a6:	2000      	movs	r0, #0
 80089a8:	f001 fcac 	bl	800a304 <gpio_setPinMode>
    /* Wait for SDA value to be read by slave, minimum of 4us for
       standard mode. */
    busy_wait_us(self, self->baudrate_us);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f7ff fefc 	bl	80087b0 <busy_wait_us>
    /* Clock stretching */
    if (wait_for_clock_stretching_end(self) != soft_i2c_RETURN_OK) {
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7ff ff14 	bl	80087e6 <wait_for_clock_stretching_end>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <write_bit+0x72>
        return soft_i2c_RETURN_CLOCK_STRETCH;
 80089c4:	f06f 0302 	mvn.w	r3, #2
 80089c8:	e009      	b.n	80089de <write_bit+0x86>
    }
    /* Clear the SCL to low in preparation for next change. */
    gpio_setPinMode(GPIO_MODE_OUTPUT_OD, self->scl_pin.GPIOx, self->scl_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6819      	ldr	r1, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	799b      	ldrb	r3, [r3, #6]
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	2300      	movs	r3, #0
 80089d6:	2011      	movs	r0, #17
 80089d8:	f001 fc94 	bl	800a304 <gpio_setPinMode>
    return soft_i2c_RETURN_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <read_bit>:

static int read_bit(soft_i2c_cfg_Config *self, uint8_t *value_p){
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b082      	sub	sp, #8
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	6039      	str	r1, [r7, #0]
    /* Let the slave drive data. */
    gpio_setPinMode(GPIO_MODE_INPUT, self->sda_pin.GPIOx, self->sda_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6899      	ldr	r1, [r3, #8]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	7b9b      	ldrb	r3, [r3, #14]
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	2300      	movs	r3, #0
 80089fc:	2000      	movs	r0, #0
 80089fe:	f001 fc81 	bl	800a304 <gpio_setPinMode>
    /* Wait for SDA value to be written by slave, minimum of 4us for
       standard mode. */
    busy_wait_us(self, self->baudrate_us);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff fed1 	bl	80087b0 <busy_wait_us>
    /* Set SCL high to indicate a new valid SDA value is available. */
    gpio_setPinMode(GPIO_MODE_INPUT, self->scl_pin.GPIOx, self->scl_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6819      	ldr	r1, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	799b      	ldrb	r3, [r3, #6]
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	2300      	movs	r3, #0
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	f001 fc72 	bl	800a304 <gpio_setPinMode>
    /* Clock stretching. */
    if (wait_for_clock_stretching_end(self) != soft_i2c_RETURN_OK) {
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f7ff fee0 	bl	80087e6 <wait_for_clock_stretching_end>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d002      	beq.n	8008a32 <read_bit+0x4c>
        return soft_i2c_RETURN_CLOCK_STRETCH;
 8008a2c:	f06f 0302 	mvn.w	r3, #2
 8008a30:	e018      	b.n	8008a64 <read_bit+0x7e>
    }
    /* Wait for SDA value to be written by slave, minimum of 4us for
       standard mode. */
    busy_wait_us(self, self->baudrate_us);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	4619      	mov	r1, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7ff feb9 	bl	80087b0 <busy_wait_us>
    /* SCL is high, read out bit. */
    *value_p = soft_i2c_bsp_readGpio(&self->sda_pin);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	3308      	adds	r3, #8
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7ff fd21 	bl	800848a <soft_i2c_bsp_readGpio>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	701a      	strb	r2, [r3, #0]
    /* Set SCL low in preparation for next operation. */
    gpio_setPinMode(GPIO_MODE_OUTPUT_OD, self->scl_pin.GPIOx, self->scl_pin.GPIO_Pin_BitPos, GPIO_PIN_RESET);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6819      	ldr	r1, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	799b      	ldrb	r3, [r3, #6]
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	2011      	movs	r0, #17
 8008a5e:	f001 fc51 	bl	800a304 <gpio_setPinMode>
    return soft_i2c_RETURN_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <write_byte>:

static int write_byte(soft_i2c_cfg_Config *self, uint8_t byte){
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	460b      	mov	r3, r1
 8008a76:	70fb      	strb	r3, [r7, #3]
    uint8_t data;
    int status = soft_i2c_RETURN_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 8; i++) {
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	617b      	str	r3, [r7, #20]
 8008a80:	e014      	b.n	8008aac <write_byte+0x40>
    	status = write_bit(self, (byte & 0x80) != 0);
 8008a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	09db      	lsrs	r3, r3, #7
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7ff ff62 	bl	8008958 <write_bit>
 8008a94:	6138      	str	r0, [r7, #16]
        if (status != soft_i2c_RETURN_OK) return status;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <write_byte+0x34>
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	e01b      	b.n	8008ad8 <write_byte+0x6c>
        byte <<= 1;
 8008aa0:	78fb      	ldrb	r3, [r7, #3]
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 8; i++) {
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	617b      	str	r3, [r7, #20]
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	2b07      	cmp	r3, #7
 8008ab0:	dde7      	ble.n	8008a82 <write_byte+0x16>
    }
    status = read_bit(self, &data);
 8008ab2:	f107 030f 	add.w	r3, r7, #15
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7ff ff94 	bl	80089e6 <read_bit>
 8008abe:	6138      	str	r0, [r7, #16]
    if (status != soft_i2c_RETURN_OK) return status;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d001      	beq.n	8008aca <write_byte+0x5e>
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	e006      	b.n	8008ad8 <write_byte+0x6c>
    if(data == 0) return soft_i2c_RETURN_OK;
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <write_byte+0x68>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	e001      	b.n	8008ad8 <write_byte+0x6c>
    else return soft_i2c_RETURN_NACK;
 8008ad4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3718      	adds	r7, #24
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <read_byte>:

static int read_byte(soft_i2c_cfg_Config *self, uint8_t *byte_p, int ack){
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b088      	sub	sp, #32
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
    uint8_t bit = 0;
 8008aec:	2300      	movs	r3, #0
 8008aee:	75fb      	strb	r3, [r7, #23]
    *byte_p = 0;
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	2200      	movs	r2, #0
 8008af4:	701a      	strb	r2, [r3, #0]
    int status = soft_i2c_RETURN_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < 8; i++) {
 8008afa:	2300      	movs	r3, #0
 8008afc:	61fb      	str	r3, [r7, #28]
 8008afe:	e019      	b.n	8008b34 <read_byte+0x54>
    	status = read_bit(self, &bit);
 8008b00:	f107 0317 	add.w	r3, r7, #23
 8008b04:	4619      	mov	r1, r3
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f7ff ff6d 	bl	80089e6 <read_bit>
 8008b0c:	61b8      	str	r0, [r7, #24]
        if (status != 0) return status;
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d001      	beq.n	8008b18 <read_byte+0x38>
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	e021      	b.n	8008b5c <read_byte+0x7c>
        *byte_p = ((*byte_p << 1 ) | bit);
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	b25a      	sxtb	r2, r3
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
 8008b22:	b25b      	sxtb	r3, r3
 8008b24:	4313      	orrs	r3, r2
 8008b26:	b25b      	sxtb	r3, r3
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	3301      	adds	r3, #1
 8008b32:	61fb      	str	r3, [r7, #28]
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	2b07      	cmp	r3, #7
 8008b38:	dde2      	ble.n	8008b00 <read_byte+0x20>
    }
    /* Acknowledge that the byte was successfully received. */
    status = write_bit(self, !ack);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	bf0c      	ite	eq
 8008b40:	2301      	moveq	r3, #1
 8008b42:	2300      	movne	r3, #0
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	4619      	mov	r1, r3
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f7ff ff05 	bl	8008958 <write_bit>
 8008b4e:	61b8      	str	r0, [r7, #24]
    if (status != soft_i2c_RETURN_OK) return status;
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <read_byte+0x7a>
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	e000      	b.n	8008b5c <read_byte+0x7c>
    return soft_i2c_RETURN_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3720      	adds	r7, #32
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	7c1b      	ldrb	r3, [r3, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d115      	bne.n	8008ba8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b80:	2202      	movs	r2, #2
 8008b82:	2181      	movs	r1, #129	; 0x81
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f002 fe49 	bl	800b81c <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b94:	2202      	movs	r2, #2
 8008b96:	2101      	movs	r1, #1
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f002 fe3f 	bl	800b81c <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8008ba6:	e012      	b.n	8008bce <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ba8:	2340      	movs	r3, #64	; 0x40
 8008baa:	2202      	movs	r2, #2
 8008bac:	2181      	movs	r1, #129	; 0x81
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f002 fe34 	bl	800b81c <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008bba:	2340      	movs	r3, #64	; 0x40
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	2101      	movs	r1, #1
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f002 fe2b 	bl	800b81c <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008bce:	2308      	movs	r3, #8
 8008bd0:	2203      	movs	r2, #3
 8008bd2:	2182      	movs	r1, #130	; 0x82
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f002 fe21 	bl	800b81c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8008be0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008be4:	f003 f814 	bl	800bc10 <USBD_static_malloc>
 8008be8:	4602      	mov	r2, r0
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d102      	bne.n	8008c00 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	73fb      	strb	r3, [r7, #15]
 8008bfe:	e026      	b.n	8008c4e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008c06:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	7c1b      	ldrb	r3, [r3, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d109      	bne.n	8008c3e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c34:	2101      	movs	r1, #1
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f002 ff66 	bl	800bb08 <USBD_LL_PrepareReceive>
 8008c3c:	e007      	b.n	8008c4e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c44:	2340      	movs	r3, #64	; 0x40
 8008c46:	2101      	movs	r1, #1
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f002 ff5d 	bl	800bb08 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	460b      	mov	r3, r1
 8008c62:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008c68:	2181      	movs	r1, #129	; 0x81
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f002 fe14 	bl	800b898 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008c76:	2101      	movs	r1, #1
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f002 fe0d 	bl	800b898 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008c86:	2182      	movs	r1, #130	; 0x82
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f002 fe05 	bl	800b898 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00e      	beq.n	8008cbc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f002 ffbc 	bl	800bc2c <USBD_static_free>
    pdev->pClassData = NULL;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b086      	sub	sp, #24
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008cd6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d039      	beq.n	8008d64 <USBD_CDC_Setup+0x9e>
 8008cf0:	2b20      	cmp	r3, #32
 8008cf2:	d17c      	bne.n	8008dee <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	88db      	ldrh	r3, [r3, #6]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d029      	beq.n	8008d50 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	b25b      	sxtb	r3, r3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	da11      	bge.n	8008d2a <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8008d12:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d14:	683a      	ldr	r2, [r7, #0]
 8008d16:	88d2      	ldrh	r2, [r2, #6]
 8008d18:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008d1a:	6939      	ldr	r1, [r7, #16]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	88db      	ldrh	r3, [r3, #6]
 8008d20:	461a      	mov	r2, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f001 f974 	bl	800a010 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8008d28:	e068      	b.n	8008dfc <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	785a      	ldrb	r2, [r3, #1]
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	88db      	ldrh	r3, [r3, #6]
 8008d38:	b2da      	uxtb	r2, r3
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008d40:	6939      	ldr	r1, [r7, #16]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	88db      	ldrh	r3, [r3, #6]
 8008d46:	461a      	mov	r2, r3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f001 f98f 	bl	800a06c <USBD_CtlPrepareRx>
    break;
 8008d4e:	e055      	b.n	8008dfc <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	7850      	ldrb	r0, [r2, #1]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	4798      	blx	r3
    break;
 8008d62:	e04b      	b.n	8008dfc <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	785b      	ldrb	r3, [r3, #1]
 8008d68:	2b0a      	cmp	r3, #10
 8008d6a:	d017      	beq.n	8008d9c <USBD_CDC_Setup+0xd6>
 8008d6c:	2b0b      	cmp	r3, #11
 8008d6e:	d029      	beq.n	8008dc4 <USBD_CDC_Setup+0xfe>
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d133      	bne.n	8008ddc <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008d7a:	2b03      	cmp	r3, #3
 8008d7c:	d107      	bne.n	8008d8e <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8008d7e:	f107 030c 	add.w	r3, r7, #12
 8008d82:	2202      	movs	r2, #2
 8008d84:	4619      	mov	r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f001 f942 	bl	800a010 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008d8c:	e02e      	b.n	8008dec <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f001 f8d2 	bl	8009f3a <USBD_CtlError>
			  ret = USBD_FAIL;
 8008d96:	2302      	movs	r3, #2
 8008d98:	75fb      	strb	r3, [r7, #23]
      break;
 8008d9a:	e027      	b.n	8008dec <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008da2:	2b03      	cmp	r3, #3
 8008da4:	d107      	bne.n	8008db6 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8008da6:	f107 030f 	add.w	r3, r7, #15
 8008daa:	2201      	movs	r2, #1
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f001 f92e 	bl	800a010 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008db4:	e01a      	b.n	8008dec <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8008db6:	6839      	ldr	r1, [r7, #0]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f001 f8be 	bl	8009f3a <USBD_CtlError>
			  ret = USBD_FAIL;
 8008dbe:	2302      	movs	r3, #2
 8008dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8008dc2:	e013      	b.n	8008dec <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	d00d      	beq.n	8008dea <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f001 f8b2 	bl	8009f3a <USBD_CtlError>
			  ret = USBD_FAIL;
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008dda:	e006      	b.n	8008dea <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f001 f8ab 	bl	8009f3a <USBD_CtlError>
      ret = USBD_FAIL;
 8008de4:	2302      	movs	r3, #2
 8008de6:	75fb      	strb	r3, [r7, #23]
      break;
 8008de8:	e000      	b.n	8008dec <USBD_CDC_Setup+0x126>
      break;
 8008dea:	bf00      	nop
    }
    break;
 8008dec:	e006      	b.n	8008dfc <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f001 f8a2 	bl	8009f3a <USBD_CtlError>
    ret = USBD_FAIL;
 8008df6:	2302      	movs	r3, #2
 8008df8:	75fb      	strb	r3, [r7, #23]
    break;
 8008dfa:	bf00      	nop
  }

  return ret;
 8008dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3718      	adds	r7, #24
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	460b      	mov	r3, r1
 8008e10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008e18:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008e20:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d037      	beq.n	8008e9c <USBD_CDC_DataIn+0x96>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008e2c:	78fa      	ldrb	r2, [r7, #3]
 8008e2e:	6879      	ldr	r1, [r7, #4]
 8008e30:	4613      	mov	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	440b      	add	r3, r1
 8008e3a:	331c      	adds	r3, #28
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d026      	beq.n	8008e90 <USBD_CDC_DataIn+0x8a>
 8008e42:	78fa      	ldrb	r2, [r7, #3]
 8008e44:	6879      	ldr	r1, [r7, #4]
 8008e46:	4613      	mov	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4413      	add	r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	440b      	add	r3, r1
 8008e50:	331c      	adds	r3, #28
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	78fa      	ldrb	r2, [r7, #3]
 8008e56:	68b9      	ldr	r1, [r7, #8]
 8008e58:	0152      	lsls	r2, r2, #5
 8008e5a:	440a      	add	r2, r1
 8008e5c:	3238      	adds	r2, #56	; 0x38
 8008e5e:	6812      	ldr	r2, [r2, #0]
 8008e60:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e64:	fb02 f201 	mul.w	r2, r2, r1
 8008e68:	1a9b      	subs	r3, r3, r2
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d110      	bne.n	8008e90 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008e6e:	78fa      	ldrb	r2, [r7, #3]
 8008e70:	6879      	ldr	r1, [r7, #4]
 8008e72:	4613      	mov	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	440b      	add	r3, r1
 8008e7c:	331c      	adds	r3, #28
 8008e7e:	2200      	movs	r2, #0
 8008e80:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8008e82:	78f9      	ldrb	r1, [r7, #3]
 8008e84:	2300      	movs	r3, #0
 8008e86:	2200      	movs	r2, #0
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f002 fe03 	bl	800ba94 <USBD_LL_Transmit>
 8008e8e:	e003      	b.n	8008e98 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	e000      	b.n	8008e9e <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8008e9c:	2302      	movs	r3, #2
  }
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	460b      	mov	r3, r1
 8008eb0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008eb8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f002 fe5c 	bl	800bb7c <USBD_LL_GetRxDataSize>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00d      	beq.n	8008ef2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008eea:	4611      	mov	r1, r2
 8008eec:	4798      	blx	r3

    return USBD_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	e000      	b.n	8008ef4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008ef2:	2302      	movs	r3, #2
  }
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008f0a:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d015      	beq.n	8008f42 <USBD_CDC_EP0_RxReady+0x46>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008f1c:	2bff      	cmp	r3, #255	; 0xff
 8008f1e:	d010      	beq.n	8008f42 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008f2e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f36:	b292      	uxth	r2, r2
 8008f38:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	22ff      	movs	r2, #255	; 0xff
 8008f3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2243      	movs	r2, #67	; 0x43
 8008f58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008f5a:	4b03      	ldr	r3, [pc, #12]	; (8008f68 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	20000868 	.word	0x20000868

08008f6c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2243      	movs	r2, #67	; 0x43
 8008f78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008f7a:	4b03      	ldr	r3, [pc, #12]	; (8008f88 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	20000824 	.word	0x20000824

08008f8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2243      	movs	r2, #67	; 0x43
 8008f98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008f9a:	4b03      	ldr	r3, [pc, #12]	; (8008fa8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	200008ac 	.word	0x200008ac

08008fac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	220a      	movs	r2, #10
 8008fb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008fba:	4b03      	ldr	r3, [pc, #12]	; (8008fc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr
 8008fc8:	200007e0 	.word	0x200007e0

08008fcc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008fd6:	2302      	movs	r3, #2
 8008fd8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d005      	beq.n	8008fec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b087      	sub	sp, #28
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	60f8      	str	r0, [r7, #12]
 8009002:	60b9      	str	r1, [r7, #8]
 8009004:	4613      	mov	r3, r2
 8009006:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800900e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009018:	88fa      	ldrh	r2, [r7, #6]
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	371c      	adds	r7, #28
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800902e:	b480      	push	{r7}
 8009030:	b085      	sub	sp, #20
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800903e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b084      	sub	sp, #16
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009064:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800906c:	2b00      	cmp	r3, #0
 800906e:	d017      	beq.n	80090a0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	7c1b      	ldrb	r3, [r3, #16]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d109      	bne.n	800908c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800907e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009082:	2101      	movs	r1, #1
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f002 fd3f 	bl	800bb08 <USBD_LL_PrepareReceive>
 800908a:	e007      	b.n	800909c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009092:	2340      	movs	r3, #64	; 0x40
 8009094:	2101      	movs	r1, #1
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f002 fd36 	bl	800bb08 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800909c:	2300      	movs	r3, #0
 800909e:	e000      	b.n	80090a2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80090a0:	2302      	movs	r3, #2
  }
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	60f8      	str	r0, [r7, #12]
 80090b2:	60b9      	str	r1, [r7, #8]
 80090b4:	4613      	mov	r3, r2
 80090b6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d101      	bne.n	80090c2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80090be:	2302      	movs	r3, #2
 80090c0:	e01a      	b.n	80090f8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d003      	beq.n	80090e2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	79fa      	ldrb	r2, [r7, #7]
 80090ee:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f002 fafd 	bl	800b6f0 <USBD_LL_Init>

  return USBD_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800910a:	2300      	movs	r3, #0
 800910c:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d006      	beq.n	8009122 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	73fb      	strb	r3, [r7, #15]
 8009120:	e001      	b.n	8009126 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009122:	2302      	movs	r3, #2
 8009124:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009126:	7bfb      	ldrb	r3, [r7, #15]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f002 fb3b 	bl	800b7b8 <USBD_LL_Start>

  return USBD_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b084      	sub	sp, #16
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	460b      	mov	r3, r1
 800916c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800916e:	2302      	movs	r3, #2
 8009170:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00c      	beq.n	8009196 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	78fa      	ldrb	r2, [r7, #3]
 8009186:	4611      	mov	r1, r2
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	4798      	blx	r3
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d101      	bne.n	8009196 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009192:	2300      	movs	r3, #0
 8009194:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009196:	7bfb      	ldrb	r3, [r7, #15]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	78fa      	ldrb	r2, [r7, #3]
 80091b6:	4611      	mov	r1, r2
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	4798      	blx	r3
  return USBD_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b082      	sub	sp, #8
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 fe71 	bl	8009ec0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2201      	movs	r2, #1
 80091e2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80091ec:	461a      	mov	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80091fa:	f003 031f 	and.w	r3, r3, #31
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d00c      	beq.n	800921c <USBD_LL_SetupStage+0x56>
 8009202:	2b01      	cmp	r3, #1
 8009204:	d302      	bcc.n	800920c <USBD_LL_SetupStage+0x46>
 8009206:	2b02      	cmp	r3, #2
 8009208:	d010      	beq.n	800922c <USBD_LL_SetupStage+0x66>
 800920a:	e017      	b.n	800923c <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009212:	4619      	mov	r1, r3
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f9c5 	bl	80095a4 <USBD_StdDevReq>
    break;
 800921a:	e01a      	b.n	8009252 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fa27 	bl	8009678 <USBD_StdItfReq>
    break;
 800922a:	e012      	b.n	8009252 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009232:	4619      	mov	r1, r3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fa65 	bl	8009704 <USBD_StdEPReq>
    break;
 800923a:	e00a      	b.n	8009252 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8009242:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009246:	b2db      	uxtb	r3, r3
 8009248:	4619      	mov	r1, r3
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f002 fb5a 	bl	800b904 <USBD_LL_StallEP>
    break;
 8009250:	bf00      	nop
  }

  return USBD_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	460b      	mov	r3, r1
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800926a:	7afb      	ldrb	r3, [r7, #11]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d147      	bne.n	8009300 <USBD_LL_DataOutStage+0xa4>
  {
    pep = &pdev->ep_out[0];
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009276:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800927e:	2b03      	cmp	r3, #3
 8009280:	d134      	bne.n	80092ec <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	68da      	ldr	r2, [r3, #12]
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	429a      	cmp	r2, r3
 800928c:	d919      	bls.n	80092c2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	68da      	ldr	r2, [r3, #12]
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	1ad2      	subs	r2, r2, r3
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	68da      	ldr	r2, [r3, #12]
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d203      	bcs.n	80092b0 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	e002      	b.n	80092b6 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	461a      	mov	r2, r3
 80092b8:	6879      	ldr	r1, [r7, #4]
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f000 fef4 	bl	800a0a8 <USBD_CtlContinueRx>
 80092c0:	e034      	b.n	800932c <USBD_LL_DataOutStage+0xd0>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00a      	beq.n	80092e4 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80092d4:	2b03      	cmp	r3, #3
 80092d6:	d105      	bne.n	80092e4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f000 fef1 	bl	800a0cc <USBD_CtlSendStatus>
 80092ea:	e01f      	b.n	800932c <USBD_LL_DataOutStage+0xd0>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80092f2:	2b05      	cmp	r3, #5
 80092f4:	d11a      	bne.n	800932c <USBD_LL_DataOutStage+0xd0>
      {
        USBD_LL_StallEP(pdev, 0U);
 80092f6:	2100      	movs	r1, #0
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f002 fb03 	bl	800b904 <USBD_LL_StallEP>
 80092fe:	e015      	b.n	800932c <USBD_LL_DataOutStage+0xd0>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00d      	beq.n	8009328 <USBD_LL_DataOutStage+0xcc>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8009312:	2b03      	cmp	r3, #3
 8009314:	d108      	bne.n	8009328 <USBD_LL_DataOutStage+0xcc>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	7afa      	ldrb	r2, [r7, #11]
 8009320:	4611      	mov	r1, r2
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	4798      	blx	r3
 8009326:	e001      	b.n	800932c <USBD_LL_DataOutStage+0xd0>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009328:	2302      	movs	r3, #2
 800932a:	e000      	b.n	800932e <USBD_LL_DataOutStage+0xd2>
  }

  return USBD_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b086      	sub	sp, #24
 800933a:	af00      	add	r7, sp, #0
 800933c:	60f8      	str	r0, [r7, #12]
 800933e:	460b      	mov	r3, r1
 8009340:	607a      	str	r2, [r7, #4]
 8009342:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8009344:	7afb      	ldrb	r3, [r7, #11]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d17f      	bne.n	800944a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	3314      	adds	r3, #20
 800934e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009356:	2b02      	cmp	r3, #2
 8009358:	d15c      	bne.n	8009414 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	68da      	ldr	r2, [r3, #12]
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	429a      	cmp	r2, r3
 8009364:	d915      	bls.n	8009392 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	68da      	ldr	r2, [r3, #12]
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	1ad2      	subs	r2, r2, r3
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	b29b      	uxth	r3, r3
 800937a:	461a      	mov	r2, r3
 800937c:	6879      	ldr	r1, [r7, #4]
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f000 fe62 	bl	800a048 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009384:	2300      	movs	r3, #0
 8009386:	2200      	movs	r2, #0
 8009388:	2100      	movs	r1, #0
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f002 fbbc 	bl	800bb08 <USBD_LL_PrepareReceive>
 8009390:	e04e      	b.n	8009430 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	6912      	ldr	r2, [r2, #16]
 800939a:	fbb3 f1f2 	udiv	r1, r3, r2
 800939e:	fb02 f201 	mul.w	r2, r2, r1
 80093a2:	1a9b      	subs	r3, r3, r2
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d11c      	bne.n	80093e2 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	689a      	ldr	r2, [r3, #8]
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d316      	bcc.n	80093e2 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	689a      	ldr	r2, [r3, #8]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80093be:	429a      	cmp	r2, r3
 80093c0:	d20f      	bcs.n	80093e2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80093c2:	2200      	movs	r2, #0
 80093c4:	2100      	movs	r1, #0
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f000 fe3e 	bl	800a048 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80093d4:	2300      	movs	r3, #0
 80093d6:	2200      	movs	r2, #0
 80093d8:	2100      	movs	r1, #0
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f002 fb94 	bl	800bb08 <USBD_LL_PrepareReceive>
 80093e0:	e026      	b.n	8009430 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00a      	beq.n	8009404 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d105      	bne.n	8009404 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009404:	2180      	movs	r1, #128	; 0x80
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f002 fa7c 	bl	800b904 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f000 fe70 	bl	800a0f2 <USBD_CtlReceiveStatus>
 8009412:	e00d      	b.n	8009430 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800941a:	2b04      	cmp	r3, #4
 800941c:	d004      	beq.n	8009428 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009424:	2b00      	cmp	r3, #0
 8009426:	d103      	bne.n	8009430 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009428:	2180      	movs	r1, #128	; 0x80
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f002 fa6a 	bl	800b904 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8009436:	2b01      	cmp	r3, #1
 8009438:	d11d      	bne.n	8009476 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f7ff fe86 	bl	800914c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8009448:	e015      	b.n	8009476 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00d      	beq.n	8009472 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800945c:	2b03      	cmp	r3, #3
 800945e:	d108      	bne.n	8009472 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009466:	695b      	ldr	r3, [r3, #20]
 8009468:	7afa      	ldrb	r2, [r7, #11]
 800946a:	4611      	mov	r1, r2
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	4798      	blx	r3
 8009470:	e001      	b.n	8009476 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009472:	2302      	movs	r3, #2
 8009474:	e000      	b.n	8009478 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3718      	adds	r7, #24
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009488:	2340      	movs	r3, #64	; 0x40
 800948a:	2200      	movs	r2, #0
 800948c:	2100      	movs	r1, #0
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f002 f9c4 	bl	800b81c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2240      	movs	r2, #64	; 0x40
 80094a0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094a4:	2340      	movs	r3, #64	; 0x40
 80094a6:	2200      	movs	r2, #0
 80094a8:	2180      	movs	r1, #128	; 0x80
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f002 f9b6 	bl	800b81c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2240      	movs	r2, #64	; 0x40
 80094ba:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d009      	beq.n	80094f8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	6852      	ldr	r2, [r2, #4]
 80094f0:	b2d2      	uxtb	r2, r2
 80094f2:	4611      	mov	r1, r2
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	4798      	blx	r3
  }

  return USBD_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8009502:	b480      	push	{r7}
 8009504:	b083      	sub	sp, #12
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	460b      	mov	r3, r1
 800950c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	78fa      	ldrb	r2, [r7, #3]
 8009512:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr

08009522 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8009522:	b480      	push	{r7}
 8009524:	b083      	sub	sp, #12
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2204      	movs	r2, #4
 800953a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	370c      	adds	r7, #12
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b082      	sub	sp, #8
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800957c:	2b03      	cmp	r3, #3
 800957e:	d10b      	bne.n	8009598 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009586:	69db      	ldr	r3, [r3, #28]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d005      	beq.n	8009598 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009592:	69db      	ldr	r3, [r3, #28]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
	...

080095a4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095ba:	2b20      	cmp	r3, #32
 80095bc:	d004      	beq.n	80095c8 <USBD_StdDevReq+0x24>
 80095be:	2b40      	cmp	r3, #64	; 0x40
 80095c0:	d002      	beq.n	80095c8 <USBD_StdDevReq+0x24>
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d008      	beq.n	80095d8 <USBD_StdDevReq+0x34>
 80095c6:	e04c      	b.n	8009662 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	6839      	ldr	r1, [r7, #0]
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	4798      	blx	r3
    break;
 80095d6:	e049      	b.n	800966c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	785b      	ldrb	r3, [r3, #1]
 80095dc:	2b09      	cmp	r3, #9
 80095de:	d83a      	bhi.n	8009656 <USBD_StdDevReq+0xb2>
 80095e0:	a201      	add	r2, pc, #4	; (adr r2, 80095e8 <USBD_StdDevReq+0x44>)
 80095e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e6:	bf00      	nop
 80095e8:	08009639 	.word	0x08009639
 80095ec:	0800964d 	.word	0x0800964d
 80095f0:	08009657 	.word	0x08009657
 80095f4:	08009643 	.word	0x08009643
 80095f8:	08009657 	.word	0x08009657
 80095fc:	0800961b 	.word	0x0800961b
 8009600:	08009611 	.word	0x08009611
 8009604:	08009657 	.word	0x08009657
 8009608:	0800962f 	.word	0x0800962f
 800960c:	08009625 	.word	0x08009625
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f9d2 	bl	80099bc <USBD_GetDescriptor>
      break;
 8009618:	e022      	b.n	8009660 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800961a:	6839      	ldr	r1, [r7, #0]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 fae3 	bl	8009be8 <USBD_SetAddress>
      break;
 8009622:	e01d      	b.n	8009660 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8009624:	6839      	ldr	r1, [r7, #0]
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fb20 	bl	8009c6c <USBD_SetConfig>
      break;
 800962c:	e018      	b.n	8009660 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fba9 	bl	8009d88 <USBD_GetConfig>
      break;
 8009636:	e013      	b.n	8009660 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8009638:	6839      	ldr	r1, [r7, #0]
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fbd8 	bl	8009df0 <USBD_GetStatus>
      break;
 8009640:	e00e      	b.n	8009660 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fc06 	bl	8009e56 <USBD_SetFeature>
      break;
 800964a:	e009      	b.n	8009660 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fc15 	bl	8009e7e <USBD_ClrFeature>
      break;
 8009654:	e004      	b.n	8009660 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8009656:	6839      	ldr	r1, [r7, #0]
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 fc6e 	bl	8009f3a <USBD_CtlError>
      break;
 800965e:	bf00      	nop
    }
    break;
 8009660:	e004      	b.n	800966c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8009662:	6839      	ldr	r1, [r7, #0]
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fc68 	bl	8009f3a <USBD_CtlError>
    break;
 800966a:	bf00      	nop
  }

  return ret;
 800966c:	7bfb      	ldrb	r3, [r7, #15]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop

08009678 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800968e:	2b20      	cmp	r3, #32
 8009690:	d003      	beq.n	800969a <USBD_StdItfReq+0x22>
 8009692:	2b40      	cmp	r3, #64	; 0x40
 8009694:	d001      	beq.n	800969a <USBD_StdItfReq+0x22>
 8009696:	2b00      	cmp	r3, #0
 8009698:	d12a      	bne.n	80096f0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80096a0:	3b01      	subs	r3, #1
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d81d      	bhi.n	80096e2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	889b      	ldrh	r3, [r3, #4]
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d813      	bhi.n	80096d8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	4798      	blx	r3
 80096be:	4603      	mov	r3, r0
 80096c0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	88db      	ldrh	r3, [r3, #6]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d110      	bne.n	80096ec <USBD_StdItfReq+0x74>
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10d      	bne.n	80096ec <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fcfb 	bl	800a0cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80096d6:	e009      	b.n	80096ec <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fc2d 	bl	8009f3a <USBD_CtlError>
      break;
 80096e0:	e004      	b.n	80096ec <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fc28 	bl	8009f3a <USBD_CtlError>
      break;
 80096ea:	e000      	b.n	80096ee <USBD_StdItfReq+0x76>
      break;
 80096ec:	bf00      	nop
    }
    break;
 80096ee:	e004      	b.n	80096fa <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fc21 	bl	8009f3a <USBD_CtlError>
    break;
 80096f8:	bf00      	nop
  }

  return USBD_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800970e:	2300      	movs	r3, #0
 8009710:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	889b      	ldrh	r3, [r3, #4]
 8009716:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009720:	2b20      	cmp	r3, #32
 8009722:	d004      	beq.n	800972e <USBD_StdEPReq+0x2a>
 8009724:	2b40      	cmp	r3, #64	; 0x40
 8009726:	d002      	beq.n	800972e <USBD_StdEPReq+0x2a>
 8009728:	2b00      	cmp	r3, #0
 800972a:	d008      	beq.n	800973e <USBD_StdEPReq+0x3a>
 800972c:	e13b      	b.n	80099a6 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	4798      	blx	r3
    break;
 800973c:	e138      	b.n	80099b0 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009746:	2b20      	cmp	r3, #32
 8009748:	d10a      	bne.n	8009760 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	6839      	ldr	r1, [r7, #0]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	4798      	blx	r3
 8009758:	4603      	mov	r3, r0
 800975a:	73fb      	strb	r3, [r7, #15]

      return ret;
 800975c:	7bfb      	ldrb	r3, [r7, #15]
 800975e:	e128      	b.n	80099b2 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	785b      	ldrb	r3, [r3, #1]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d03e      	beq.n	80097e6 <USBD_StdEPReq+0xe2>
 8009768:	2b03      	cmp	r3, #3
 800976a:	d002      	beq.n	8009772 <USBD_StdEPReq+0x6e>
 800976c:	2b00      	cmp	r3, #0
 800976e:	d070      	beq.n	8009852 <USBD_StdEPReq+0x14e>
 8009770:	e113      	b.n	800999a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009778:	2b02      	cmp	r3, #2
 800977a:	d002      	beq.n	8009782 <USBD_StdEPReq+0x7e>
 800977c:	2b03      	cmp	r3, #3
 800977e:	d015      	beq.n	80097ac <USBD_StdEPReq+0xa8>
 8009780:	e02b      	b.n	80097da <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009782:	7bbb      	ldrb	r3, [r7, #14]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00c      	beq.n	80097a2 <USBD_StdEPReq+0x9e>
 8009788:	7bbb      	ldrb	r3, [r7, #14]
 800978a:	2b80      	cmp	r3, #128	; 0x80
 800978c:	d009      	beq.n	80097a2 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800978e:	7bbb      	ldrb	r3, [r7, #14]
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f002 f8b6 	bl	800b904 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009798:	2180      	movs	r1, #128	; 0x80
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f002 f8b2 	bl	800b904 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80097a0:	e020      	b.n	80097e4 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fbc8 	bl	8009f3a <USBD_CtlError>
        break;
 80097aa:	e01b      	b.n	80097e4 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	885b      	ldrh	r3, [r3, #2]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10e      	bne.n	80097d2 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80097b4:	7bbb      	ldrb	r3, [r7, #14]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00b      	beq.n	80097d2 <USBD_StdEPReq+0xce>
 80097ba:	7bbb      	ldrb	r3, [r7, #14]
 80097bc:	2b80      	cmp	r3, #128	; 0x80
 80097be:	d008      	beq.n	80097d2 <USBD_StdEPReq+0xce>
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	88db      	ldrh	r3, [r3, #6]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d104      	bne.n	80097d2 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80097c8:	7bbb      	ldrb	r3, [r7, #14]
 80097ca:	4619      	mov	r1, r3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f002 f899 	bl	800b904 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fc7a 	bl	800a0cc <USBD_CtlSendStatus>

        break;
 80097d8:	e004      	b.n	80097e4 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80097da:	6839      	ldr	r1, [r7, #0]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fbac 	bl	8009f3a <USBD_CtlError>
        break;
 80097e2:	bf00      	nop
      }
      break;
 80097e4:	e0de      	b.n	80099a4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d002      	beq.n	80097f6 <USBD_StdEPReq+0xf2>
 80097f0:	2b03      	cmp	r3, #3
 80097f2:	d015      	beq.n	8009820 <USBD_StdEPReq+0x11c>
 80097f4:	e026      	b.n	8009844 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097f6:	7bbb      	ldrb	r3, [r7, #14]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00c      	beq.n	8009816 <USBD_StdEPReq+0x112>
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
 80097fe:	2b80      	cmp	r3, #128	; 0x80
 8009800:	d009      	beq.n	8009816 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8009802:	7bbb      	ldrb	r3, [r7, #14]
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f002 f87c 	bl	800b904 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800980c:	2180      	movs	r1, #128	; 0x80
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f002 f878 	bl	800b904 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009814:	e01c      	b.n	8009850 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8009816:	6839      	ldr	r1, [r7, #0]
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fb8e 	bl	8009f3a <USBD_CtlError>
        break;
 800981e:	e017      	b.n	8009850 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	885b      	ldrh	r3, [r3, #2]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d112      	bne.n	800984e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009828:	7bbb      	ldrb	r3, [r7, #14]
 800982a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800982e:	2b00      	cmp	r3, #0
 8009830:	d004      	beq.n	800983c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8009832:	7bbb      	ldrb	r3, [r7, #14]
 8009834:	4619      	mov	r1, r3
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f002 f89a 	bl	800b970 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fc45 	bl	800a0cc <USBD_CtlSendStatus>
        }
        break;
 8009842:	e004      	b.n	800984e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fb77 	bl	8009f3a <USBD_CtlError>
        break;
 800984c:	e000      	b.n	8009850 <USBD_StdEPReq+0x14c>
        break;
 800984e:	bf00      	nop
      }
      break;
 8009850:	e0a8      	b.n	80099a4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009858:	2b02      	cmp	r3, #2
 800985a:	d002      	beq.n	8009862 <USBD_StdEPReq+0x15e>
 800985c:	2b03      	cmp	r3, #3
 800985e:	d031      	beq.n	80098c4 <USBD_StdEPReq+0x1c0>
 8009860:	e095      	b.n	800998e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009862:	7bbb      	ldrb	r3, [r7, #14]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d007      	beq.n	8009878 <USBD_StdEPReq+0x174>
 8009868:	7bbb      	ldrb	r3, [r7, #14]
 800986a:	2b80      	cmp	r3, #128	; 0x80
 800986c:	d004      	beq.n	8009878 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800986e:	6839      	ldr	r1, [r7, #0]
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 fb62 	bl	8009f3a <USBD_CtlError>
          break;
 8009876:	e08f      	b.n	8009998 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009878:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800987c:	2b00      	cmp	r3, #0
 800987e:	da0b      	bge.n	8009898 <USBD_StdEPReq+0x194>
 8009880:	7bbb      	ldrb	r3, [r7, #14]
 8009882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009886:	4613      	mov	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	3310      	adds	r3, #16
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	4413      	add	r3, r2
 8009894:	3304      	adds	r3, #4
 8009896:	e00a      	b.n	80098ae <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009898:	7bbb      	ldrb	r3, [r7, #14]
 800989a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800989e:	4613      	mov	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4413      	add	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	4413      	add	r3, r2
 80098ae:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	2200      	movs	r2, #0
 80098b4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2202      	movs	r2, #2
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 fba7 	bl	800a010 <USBD_CtlSendData>
          break;
 80098c2:	e069      	b.n	8009998 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80098c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	da11      	bge.n	80098f0 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80098cc:	7bbb      	ldrb	r3, [r7, #14]
 80098ce:	f003 020f 	and.w	r2, r3, #15
 80098d2:	6879      	ldr	r1, [r7, #4]
 80098d4:	4613      	mov	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	4413      	add	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	440b      	add	r3, r1
 80098de:	3318      	adds	r3, #24
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d117      	bne.n	8009916 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80098e6:	6839      	ldr	r1, [r7, #0]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fb26 	bl	8009f3a <USBD_CtlError>
            break;
 80098ee:	e053      	b.n	8009998 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80098f0:	7bbb      	ldrb	r3, [r7, #14]
 80098f2:	f003 020f 	and.w	r2, r3, #15
 80098f6:	6879      	ldr	r1, [r7, #4]
 80098f8:	4613      	mov	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	440b      	add	r3, r1
 8009902:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d104      	bne.n	8009916 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800990c:	6839      	ldr	r1, [r7, #0]
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fb13 	bl	8009f3a <USBD_CtlError>
            break;
 8009914:	e040      	b.n	8009998 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009916:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800991a:	2b00      	cmp	r3, #0
 800991c:	da0b      	bge.n	8009936 <USBD_StdEPReq+0x232>
 800991e:	7bbb      	ldrb	r3, [r7, #14]
 8009920:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009924:	4613      	mov	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	3310      	adds	r3, #16
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	4413      	add	r3, r2
 8009932:	3304      	adds	r3, #4
 8009934:	e00a      	b.n	800994c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009936:	7bbb      	ldrb	r3, [r7, #14]
 8009938:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800993c:	4613      	mov	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	4413      	add	r3, r2
 800994c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800994e:	7bbb      	ldrb	r3, [r7, #14]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <USBD_StdEPReq+0x256>
 8009954:	7bbb      	ldrb	r3, [r7, #14]
 8009956:	2b80      	cmp	r3, #128	; 0x80
 8009958:	d103      	bne.n	8009962 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	2200      	movs	r2, #0
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	e00e      	b.n	8009980 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009962:	7bbb      	ldrb	r3, [r7, #14]
 8009964:	4619      	mov	r1, r3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f002 f838 	bl	800b9dc <USBD_LL_IsStallEP>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d003      	beq.n	800997a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	2201      	movs	r2, #1
 8009976:	601a      	str	r2, [r3, #0]
 8009978:	e002      	b.n	8009980 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	2200      	movs	r2, #0
 800997e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	2202      	movs	r2, #2
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fb42 	bl	800a010 <USBD_CtlSendData>
          break;
 800998c:	e004      	b.n	8009998 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 fad2 	bl	8009f3a <USBD_CtlError>
        break;
 8009996:	bf00      	nop
      }
      break;
 8009998:	e004      	b.n	80099a4 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 facc 	bl	8009f3a <USBD_CtlError>
      break;
 80099a2:	bf00      	nop
    }
    break;
 80099a4:	e004      	b.n	80099b0 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 fac6 	bl	8009f3a <USBD_CtlError>
    break;
 80099ae:	bf00      	nop
  }

  return ret;
 80099b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
	...

080099bc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	885b      	ldrh	r3, [r3, #2]
 80099ca:	0a1b      	lsrs	r3, r3, #8
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	3b01      	subs	r3, #1
 80099d0:	2b0e      	cmp	r3, #14
 80099d2:	f200 80e5 	bhi.w	8009ba0 <USBD_GetDescriptor+0x1e4>
 80099d6:	a201      	add	r2, pc, #4	; (adr r2, 80099dc <USBD_GetDescriptor+0x20>)
 80099d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099dc:	08009a31 	.word	0x08009a31
 80099e0:	08009a49 	.word	0x08009a49
 80099e4:	08009a89 	.word	0x08009a89
 80099e8:	08009ba1 	.word	0x08009ba1
 80099ec:	08009ba1 	.word	0x08009ba1
 80099f0:	08009b4d 	.word	0x08009b4d
 80099f4:	08009b73 	.word	0x08009b73
 80099f8:	08009ba1 	.word	0x08009ba1
 80099fc:	08009ba1 	.word	0x08009ba1
 8009a00:	08009ba1 	.word	0x08009ba1
 8009a04:	08009ba1 	.word	0x08009ba1
 8009a08:	08009ba1 	.word	0x08009ba1
 8009a0c:	08009ba1 	.word	0x08009ba1
 8009a10:	08009ba1 	.word	0x08009ba1
 8009a14:	08009a19 	.word	0x08009a19
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009a1e:	69db      	ldr	r3, [r3, #28]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	7c12      	ldrb	r2, [r2, #16]
 8009a24:	f107 010a 	add.w	r1, r7, #10
 8009a28:	4610      	mov	r0, r2
 8009a2a:	4798      	blx	r3
 8009a2c:	60f8      	str	r0, [r7, #12]
    break;
 8009a2e:	e0bc      	b.n	8009baa <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	7c12      	ldrb	r2, [r2, #16]
 8009a3c:	f107 010a 	add.w	r1, r7, #10
 8009a40:	4610      	mov	r0, r2
 8009a42:	4798      	blx	r3
 8009a44:	60f8      	str	r0, [r7, #12]
    break;
 8009a46:	e0b0      	b.n	8009baa <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	7c1b      	ldrb	r3, [r3, #16]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10d      	bne.n	8009a6c <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a58:	f107 020a 	add.w	r2, r7, #10
 8009a5c:	4610      	mov	r0, r2
 8009a5e:	4798      	blx	r3
 8009a60:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3301      	adds	r3, #1
 8009a66:	2202      	movs	r2, #2
 8009a68:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009a6a:	e09e      	b.n	8009baa <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a74:	f107 020a 	add.w	r2, r7, #10
 8009a78:	4610      	mov	r0, r2
 8009a7a:	4798      	blx	r3
 8009a7c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	3301      	adds	r3, #1
 8009a82:	2202      	movs	r2, #2
 8009a84:	701a      	strb	r2, [r3, #0]
    break;
 8009a86:	e090      	b.n	8009baa <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	885b      	ldrh	r3, [r3, #2]
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	2b05      	cmp	r3, #5
 8009a90:	d856      	bhi.n	8009b40 <USBD_GetDescriptor+0x184>
 8009a92:	a201      	add	r2, pc, #4	; (adr r2, 8009a98 <USBD_GetDescriptor+0xdc>)
 8009a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a98:	08009ab1 	.word	0x08009ab1
 8009a9c:	08009ac9 	.word	0x08009ac9
 8009aa0:	08009ae1 	.word	0x08009ae1
 8009aa4:	08009af9 	.word	0x08009af9
 8009aa8:	08009b11 	.word	0x08009b11
 8009aac:	08009b29 	.word	0x08009b29
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	7c12      	ldrb	r2, [r2, #16]
 8009abc:	f107 010a 	add.w	r1, r7, #10
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4798      	blx	r3
 8009ac4:	60f8      	str	r0, [r7, #12]
      break;
 8009ac6:	e040      	b.n	8009b4a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	7c12      	ldrb	r2, [r2, #16]
 8009ad4:	f107 010a 	add.w	r1, r7, #10
 8009ad8:	4610      	mov	r0, r2
 8009ada:	4798      	blx	r3
 8009adc:	60f8      	str	r0, [r7, #12]
      break;
 8009ade:	e034      	b.n	8009b4a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	7c12      	ldrb	r2, [r2, #16]
 8009aec:	f107 010a 	add.w	r1, r7, #10
 8009af0:	4610      	mov	r0, r2
 8009af2:	4798      	blx	r3
 8009af4:	60f8      	str	r0, [r7, #12]
      break;
 8009af6:	e028      	b.n	8009b4a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	7c12      	ldrb	r2, [r2, #16]
 8009b04:	f107 010a 	add.w	r1, r7, #10
 8009b08:	4610      	mov	r0, r2
 8009b0a:	4798      	blx	r3
 8009b0c:	60f8      	str	r0, [r7, #12]
      break;
 8009b0e:	e01c      	b.n	8009b4a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009b16:	695b      	ldr	r3, [r3, #20]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	7c12      	ldrb	r2, [r2, #16]
 8009b1c:	f107 010a 	add.w	r1, r7, #10
 8009b20:	4610      	mov	r0, r2
 8009b22:	4798      	blx	r3
 8009b24:	60f8      	str	r0, [r7, #12]
      break;
 8009b26:	e010      	b.n	8009b4a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	7c12      	ldrb	r2, [r2, #16]
 8009b34:	f107 010a 	add.w	r1, r7, #10
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4798      	blx	r3
 8009b3c:	60f8      	str	r0, [r7, #12]
      break;
 8009b3e:	e004      	b.n	8009b4a <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8009b40:	6839      	ldr	r1, [r7, #0]
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f9f9 	bl	8009f3a <USBD_CtlError>
      return;
 8009b48:	e04b      	b.n	8009be2 <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 8009b4a:	e02e      	b.n	8009baa <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	7c1b      	ldrb	r3, [r3, #16]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d109      	bne.n	8009b68 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b5c:	f107 020a 	add.w	r2, r7, #10
 8009b60:	4610      	mov	r0, r2
 8009b62:	4798      	blx	r3
 8009b64:	60f8      	str	r0, [r7, #12]
      break;
 8009b66:	e020      	b.n	8009baa <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009b68:	6839      	ldr	r1, [r7, #0]
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f9e5 	bl	8009f3a <USBD_CtlError>
      return;
 8009b70:	e037      	b.n	8009be2 <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	7c1b      	ldrb	r3, [r3, #16]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10d      	bne.n	8009b96 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b82:	f107 020a 	add.w	r2, r7, #10
 8009b86:	4610      	mov	r0, r2
 8009b88:	4798      	blx	r3
 8009b8a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	2207      	movs	r2, #7
 8009b92:	701a      	strb	r2, [r3, #0]
      break;
 8009b94:	e009      	b.n	8009baa <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f9ce 	bl	8009f3a <USBD_CtlError>
      return;
 8009b9e:	e020      	b.n	8009be2 <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f9c9 	bl	8009f3a <USBD_CtlError>
    return;
 8009ba8:	e01b      	b.n	8009be2 <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 8009baa:	897b      	ldrh	r3, [r7, #10]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d011      	beq.n	8009bd4 <USBD_GetDescriptor+0x218>
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	88db      	ldrh	r3, [r3, #6]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00d      	beq.n	8009bd4 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	88da      	ldrh	r2, [r3, #6]
 8009bbc:	897b      	ldrh	r3, [r7, #10]
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	bf28      	it	cs
 8009bc2:	4613      	movcs	r3, r2
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8009bc8:	897b      	ldrh	r3, [r7, #10]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	68f9      	ldr	r1, [r7, #12]
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fa1e 	bl	800a010 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	88db      	ldrh	r3, [r3, #6]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d102      	bne.n	8009be2 <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fa75 	bl	800a0cc <USBD_CtlSendStatus>
  }
}
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	889b      	ldrh	r3, [r3, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d130      	bne.n	8009c5c <USBD_SetAddress+0x74>
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	88db      	ldrh	r3, [r3, #6]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d12c      	bne.n	8009c5c <USBD_SetAddress+0x74>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	885b      	ldrh	r3, [r3, #2]
 8009c06:	2b7f      	cmp	r3, #127	; 0x7f
 8009c08:	d828      	bhi.n	8009c5c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	885b      	ldrh	r3, [r3, #2]
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009c1c:	2b03      	cmp	r3, #3
 8009c1e:	d104      	bne.n	8009c2a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f989 	bl	8009f3a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c28:	e01c      	b.n	8009c64 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	7bfa      	ldrb	r2, [r7, #15]
 8009c2e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f001 fef6 	bl	800ba28 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fa45 	bl	800a0cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d004      	beq.n	8009c52 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2202      	movs	r2, #2
 8009c4c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c50:	e008      	b.n	8009c64 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2201      	movs	r2, #1
 8009c56:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c5a:	e003      	b.n	8009c64 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 f96b 	bl	8009f3a <USBD_CtlError>
  }
}
 8009c64:	bf00      	nop
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	885b      	ldrh	r3, [r3, #2]
 8009c7a:	b2da      	uxtb	r2, r3
 8009c7c:	4b41      	ldr	r3, [pc, #260]	; (8009d84 <USBD_SetConfig+0x118>)
 8009c7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c80:	4b40      	ldr	r3, [pc, #256]	; (8009d84 <USBD_SetConfig+0x118>)
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d904      	bls.n	8009c92 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f955 	bl	8009f3a <USBD_CtlError>
 8009c90:	e075      	b.n	8009d7e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d002      	beq.n	8009ca2 <USBD_SetConfig+0x36>
 8009c9c:	2b03      	cmp	r3, #3
 8009c9e:	d023      	beq.n	8009ce8 <USBD_SetConfig+0x7c>
 8009ca0:	e062      	b.n	8009d68 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8009ca2:	4b38      	ldr	r3, [pc, #224]	; (8009d84 <USBD_SetConfig+0x118>)
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d01a      	beq.n	8009ce0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8009caa:	4b36      	ldr	r3, [pc, #216]	; (8009d84 <USBD_SetConfig+0x118>)
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2203      	movs	r2, #3
 8009cb8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009cbc:	4b31      	ldr	r3, [pc, #196]	; (8009d84 <USBD_SetConfig+0x118>)
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f7ff fa4d 	bl	8009162 <USBD_SetClassConfig>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d104      	bne.n	8009cd8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8009cce:	6839      	ldr	r1, [r7, #0]
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 f932 	bl	8009f3a <USBD_CtlError>
          return;
 8009cd6:	e052      	b.n	8009d7e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 f9f7 	bl	800a0cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009cde:	e04e      	b.n	8009d7e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f9f3 	bl	800a0cc <USBD_CtlSendStatus>
      break;
 8009ce6:	e04a      	b.n	8009d7e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009ce8:	4b26      	ldr	r3, [pc, #152]	; (8009d84 <USBD_SetConfig+0x118>)
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d112      	bne.n	8009d16 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8009cf8:	4b22      	ldr	r3, [pc, #136]	; (8009d84 <USBD_SetConfig+0x118>)
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8009d02:	4b20      	ldr	r3, [pc, #128]	; (8009d84 <USBD_SetConfig+0x118>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	4619      	mov	r1, r3
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f7ff fa49 	bl	80091a0 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f9dc 	bl	800a0cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009d14:	e033      	b.n	8009d7e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8009d16:	4b1b      	ldr	r3, [pc, #108]	; (8009d84 <USBD_SetConfig+0x118>)
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d01d      	beq.n	8009d60 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f7ff fa37 	bl	80091a0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d32:	4b14      	ldr	r3, [pc, #80]	; (8009d84 <USBD_SetConfig+0x118>)
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	461a      	mov	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009d3c:	4b11      	ldr	r3, [pc, #68]	; (8009d84 <USBD_SetConfig+0x118>)
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	4619      	mov	r1, r3
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7ff fa0d 	bl	8009162 <USBD_SetClassConfig>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d104      	bne.n	8009d58 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009d4e:	6839      	ldr	r1, [r7, #0]
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 f8f2 	bl	8009f3a <USBD_CtlError>
          return;
 8009d56:	e012      	b.n	8009d7e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 f9b7 	bl	800a0cc <USBD_CtlSendStatus>
      break;
 8009d5e:	e00e      	b.n	8009d7e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f9b3 	bl	800a0cc <USBD_CtlSendStatus>
      break;
 8009d66:	e00a      	b.n	8009d7e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8009d68:	6839      	ldr	r1, [r7, #0]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f8e5 	bl	8009f3a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009d70:	4b04      	ldr	r3, [pc, #16]	; (8009d84 <USBD_SetConfig+0x118>)
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7ff fa12 	bl	80091a0 <USBD_ClrClassConfig>
      break;
 8009d7c:	bf00      	nop
    }
  }
}
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	200017a4 	.word	0x200017a4

08009d88 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	88db      	ldrh	r3, [r3, #6]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d004      	beq.n	8009da4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8009d9a:	6839      	ldr	r1, [r7, #0]
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f8cc 	bl	8009f3a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8009da2:	e021      	b.n	8009de8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	db17      	blt.n	8009dde <USBD_GetConfig+0x56>
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	dd02      	ble.n	8009db8 <USBD_GetConfig+0x30>
 8009db2:	2b03      	cmp	r3, #3
 8009db4:	d00b      	beq.n	8009dce <USBD_GetConfig+0x46>
 8009db6:	e012      	b.n	8009dde <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	3308      	adds	r3, #8
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f922 	bl	800a010 <USBD_CtlSendData>
      break;
 8009dcc:	e00c      	b.n	8009de8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	3304      	adds	r3, #4
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f91a 	bl	800a010 <USBD_CtlSendData>
      break;
 8009ddc:	e004      	b.n	8009de8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8009dde:	6839      	ldr	r1, [r7, #0]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f8aa 	bl	8009f3a <USBD_CtlError>
      break;
 8009de6:	bf00      	nop
}
 8009de8:	bf00      	nop
 8009dea:	3708      	adds	r7, #8
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009e00:	3b01      	subs	r3, #1
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d81e      	bhi.n	8009e44 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	88db      	ldrh	r3, [r3, #6]
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d004      	beq.n	8009e18 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f892 	bl	8009f3a <USBD_CtlError>
      break;
 8009e16:	e01a      	b.n	8009e4e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d005      	beq.n	8009e34 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	f043 0202 	orr.w	r2, r3, #2
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	330c      	adds	r3, #12
 8009e38:	2202      	movs	r2, #2
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 f8e7 	bl	800a010 <USBD_CtlSendData>
    break;
 8009e42:	e004      	b.n	8009e4e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 f877 	bl	8009f3a <USBD_CtlError>
    break;
 8009e4c:	bf00      	nop
  }
}
 8009e4e:	bf00      	nop
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b082      	sub	sp, #8
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
 8009e5e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	885b      	ldrh	r3, [r3, #2]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d106      	bne.n	8009e76 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f92b 	bl	800a0cc <USBD_CtlSendStatus>
  }

}
 8009e76:	bf00      	nop
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b082      	sub	sp, #8
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d80b      	bhi.n	8009eac <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	885b      	ldrh	r3, [r3, #2]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d10c      	bne.n	8009eb6 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f911 	bl	800a0cc <USBD_CtlSendStatus>
    }
    break;
 8009eaa:	e004      	b.n	8009eb6 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f843 	bl	8009f3a <USBD_CtlError>
    break;
 8009eb4:	e000      	b.n	8009eb8 <USBD_ClrFeature+0x3a>
    break;
 8009eb6:	bf00      	nop
  }
}
 8009eb8:	bf00      	nop
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	781a      	ldrb	r2, [r3, #0]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	785a      	ldrb	r2, [r3, #1]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	3302      	adds	r3, #2
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	3303      	adds	r3, #3
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	021b      	lsls	r3, r3, #8
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	4413      	add	r3, r2
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	3304      	adds	r3, #4
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	3305      	adds	r3, #5
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	021b      	lsls	r3, r3, #8
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	4413      	add	r3, r2
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	3306      	adds	r3, #6
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	3307      	adds	r3, #7
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	021b      	lsls	r3, r3, #8
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	4413      	add	r3, r2
 8009f28:	b29a      	uxth	r2, r3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	80da      	strh	r2, [r3, #6]

}
 8009f2e:	bf00      	nop
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b082      	sub	sp, #8
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8009f44:	2180      	movs	r1, #128	; 0x80
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f001 fcdc 	bl	800b904 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f001 fcd8 	bl	800b904 <USBD_LL_StallEP>
}
 8009f54:	bf00      	nop
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d032      	beq.n	8009fd8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f000 f834 	bl	8009fe0 <USBD_GetLen>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	005b      	lsls	r3, r3, #1
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009f86:	7dfb      	ldrb	r3, [r7, #23]
 8009f88:	1c5a      	adds	r2, r3, #1
 8009f8a:	75fa      	strb	r2, [r7, #23]
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	4413      	add	r3, r2
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	7812      	ldrb	r2, [r2, #0]
 8009f96:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009f98:	7dfb      	ldrb	r3, [r7, #23]
 8009f9a:	1c5a      	adds	r2, r3, #1
 8009f9c:	75fa      	strb	r2, [r7, #23]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	2203      	movs	r2, #3
 8009fa6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009fa8:	e012      	b.n	8009fd0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009faa:	7dfb      	ldrb	r3, [r7, #23]
 8009fac:	1c5a      	adds	r2, r3, #1
 8009fae:	75fa      	strb	r2, [r7, #23]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	441a      	add	r2, r3
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	1c59      	adds	r1, r3, #1
 8009fba:	60f9      	str	r1, [r7, #12]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009fc0:	7dfb      	ldrb	r3, [r7, #23]
 8009fc2:	1c5a      	adds	r2, r3, #1
 8009fc4:	75fa      	strb	r2, [r7, #23]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	4413      	add	r3, r2
 8009fcc:	2200      	movs	r2, #0
 8009fce:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d1e8      	bne.n	8009faa <USBD_GetString+0x4e>
    }
  }
}
 8009fd8:	bf00      	nop
 8009fda:	3718      	adds	r7, #24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8009fec:	e005      	b.n	8009ffa <USBD_GetLen+0x1a>
    {
        len++;
 8009fee:	7bfb      	ldrb	r3, [r7, #15]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	73fb      	strb	r3, [r7, #15]
        buf++;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1f5      	bne.n	8009fee <USBD_GetLen+0xe>
    }

    return len;
 800a002:	7bfb      	ldrb	r3, [r7, #15]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	4613      	mov	r3, r2
 800a01c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2202      	movs	r2, #2
 800a022:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800a026:	88fa      	ldrh	r2, [r7, #6]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a02c:	88fa      	ldrh	r2, [r7, #6]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800a032:	88fb      	ldrh	r3, [r7, #6]
 800a034:	68ba      	ldr	r2, [r7, #8]
 800a036:	2100      	movs	r1, #0
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f001 fd2b 	bl	800ba94 <USBD_LL_Transmit>

  return USBD_OK;
 800a03e:	2300      	movs	r3, #0
}
 800a040:	4618      	mov	r0, r3
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	4613      	mov	r3, r2
 800a054:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800a056:	88fb      	ldrh	r3, [r7, #6]
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	2100      	movs	r1, #0
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f001 fd19 	bl	800ba94 <USBD_LL_Transmit>

  return USBD_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	4613      	mov	r3, r2
 800a078:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2203      	movs	r2, #3
 800a07e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800a082:	88fa      	ldrh	r2, [r7, #6]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800a08a:	88fa      	ldrh	r2, [r7, #6]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800a092:	88fb      	ldrh	r3, [r7, #6]
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	2100      	movs	r1, #0
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f001 fd35 	bl	800bb08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0b6:	88fb      	ldrh	r3, [r7, #6]
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f001 fd23 	bl	800bb08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2204      	movs	r2, #4
 800a0d8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a0dc:	2300      	movs	r3, #0
 800a0de:	2200      	movs	r2, #0
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f001 fcd6 	bl	800ba94 <USBD_LL_Transmit>

  return USBD_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b082      	sub	sp, #8
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2205      	movs	r2, #5
 800a0fe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a102:	2300      	movs	r3, #0
 800a104:	2200      	movs	r2, #0
 800a106:	2100      	movs	r1, #0
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f001 fcfd 	bl	800bb08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b08a      	sub	sp, #40	; 0x28
 800a11c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a11e:	f107 0314 	add.w	r3, r7, #20
 800a122:	2200      	movs	r2, #0
 800a124:	601a      	str	r2, [r3, #0]
 800a126:	605a      	str	r2, [r3, #4]
 800a128:	609a      	str	r2, [r3, #8]
 800a12a:	60da      	str	r2, [r3, #12]
 800a12c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a12e:	4a50      	ldr	r2, [pc, #320]	; (800a270 <MX_GPIO_Init+0x158>)
 800a130:	4b4f      	ldr	r3, [pc, #316]	; (800a270 <MX_GPIO_Init+0x158>)
 800a132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a13a:	4b4d      	ldr	r3, [pc, #308]	; (800a270 <MX_GPIO_Init+0x158>)
 800a13c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a13e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a142:	613b      	str	r3, [r7, #16]
 800a144:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a146:	4a4a      	ldr	r2, [pc, #296]	; (800a270 <MX_GPIO_Init+0x158>)
 800a148:	4b49      	ldr	r3, [pc, #292]	; (800a270 <MX_GPIO_Init+0x158>)
 800a14a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a14c:	f043 0304 	orr.w	r3, r3, #4
 800a150:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a152:	4b47      	ldr	r3, [pc, #284]	; (800a270 <MX_GPIO_Init+0x158>)
 800a154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a156:	f003 0304 	and.w	r3, r3, #4
 800a15a:	60fb      	str	r3, [r7, #12]
 800a15c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a15e:	4a44      	ldr	r2, [pc, #272]	; (800a270 <MX_GPIO_Init+0x158>)
 800a160:	4b43      	ldr	r3, [pc, #268]	; (800a270 <MX_GPIO_Init+0x158>)
 800a162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a164:	f043 0301 	orr.w	r3, r3, #1
 800a168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a16a:	4b41      	ldr	r3, [pc, #260]	; (800a270 <MX_GPIO_Init+0x158>)
 800a16c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a16e:	f003 0301 	and.w	r3, r3, #1
 800a172:	60bb      	str	r3, [r7, #8]
 800a174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a176:	4a3e      	ldr	r2, [pc, #248]	; (800a270 <MX_GPIO_Init+0x158>)
 800a178:	4b3d      	ldr	r3, [pc, #244]	; (800a270 <MX_GPIO_Init+0x158>)
 800a17a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a17c:	f043 0302 	orr.w	r3, r3, #2
 800a180:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a182:	4b3b      	ldr	r3, [pc, #236]	; (800a270 <MX_GPIO_Init+0x158>)
 800a184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a186:	f003 0302 	and.w	r3, r3, #2
 800a18a:	607b      	str	r3, [r7, #4]
 800a18c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a18e:	4a38      	ldr	r2, [pc, #224]	; (800a270 <MX_GPIO_Init+0x158>)
 800a190:	4b37      	ldr	r3, [pc, #220]	; (800a270 <MX_GPIO_Init+0x158>)
 800a192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a194:	f043 0308 	orr.w	r3, r3, #8
 800a198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a19a:	4b35      	ldr	r3, [pc, #212]	; (800a270 <MX_GPIO_Init+0x158>)
 800a19c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a19e:	f003 0308 	and.w	r3, r3, #8
 800a1a2:	603b      	str	r3, [r7, #0]
 800a1a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, O_USART2_DIR_Pin|O_USART1_DIR_Pin, GPIO_PIN_RESET);
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f241 0104 	movw	r1, #4100	; 0x1004
 800a1ac:	4831      	ldr	r0, [pc, #196]	; (800a274 <MX_GPIO_Init+0x15c>)
 800a1ae:	f7f7 fe25 	bl	8001dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O_BT_PWR_GPIO_Port, O_BT_PWR_Pin, GPIO_PIN_RESET);
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a1b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a1bc:	f7f7 fe1e 	bl	8001dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = O_USART2_DIR_Pin|O_USART1_DIR_Pin;
 800a1c0:	f241 0304 	movw	r3, #4100	; 0x1004
 800a1c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a1d2:	f107 0314 	add.w	r3, r7, #20
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	4826      	ldr	r0, [pc, #152]	; (800a274 <MX_GPIO_Init+0x15c>)
 800a1da:	f7f7 fc7d 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_USART2_BREAK_Pin;
 800a1de:	2308      	movs	r3, #8
 800a1e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(O_USART2_BREAK_GPIO_Port, &GPIO_InitStruct);
 800a1ea:	f107 0314 	add.w	r3, r7, #20
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	4820      	ldr	r0, [pc, #128]	; (800a274 <MX_GPIO_Init+0x15c>)
 800a1f2:	f7f7 fc71 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = I_GPIO1_Pin|I_GPIO2_Pin|I_GPIO3_Pin|I_GPIO4_Pin 
 800a1f6:	f44f 733c 	mov.w	r3, #752	; 0x2f0
 800a1fa:	617b      	str	r3, [r7, #20]
                          |I_USB_VBUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a200:	2300      	movs	r3, #0
 800a202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a204:	f107 0314 	add.w	r3, r7, #20
 800a208:	4619      	mov	r1, r3
 800a20a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a20e:	f7f7 fc63 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_SW2_Pin;
 800a212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a218:	2300      	movs	r3, #0
 800a21a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a21c:	2301      	movs	r3, #1
 800a21e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I_SW2_GPIO_Port, &GPIO_InitStruct);
 800a220:	f107 0314 	add.w	r3, r7, #20
 800a224:	4619      	mov	r1, r3
 800a226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a22a:	f7f7 fc55 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_BT_PWR_Pin;
 800a22e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a234:	2301      	movs	r3, #1
 800a236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a238:	2300      	movs	r3, #0
 800a23a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a23c:	2300      	movs	r3, #0
 800a23e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(O_BT_PWR_GPIO_Port, &GPIO_InitStruct);
 800a240:	f107 0314 	add.w	r3, r7, #20
 800a244:	4619      	mov	r1, r3
 800a246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a24a:	f7f7 fc45 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_USART1_BREAK_Pin;
 800a24e:	2304      	movs	r3, #4
 800a250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a252:	2300      	movs	r3, #0
 800a254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a256:	2300      	movs	r3, #0
 800a258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(O_USART1_BREAK_GPIO_Port, &GPIO_InitStruct);
 800a25a:	f107 0314 	add.w	r3, r7, #20
 800a25e:	4619      	mov	r1, r3
 800a260:	4805      	ldr	r0, [pc, #20]	; (800a278 <MX_GPIO_Init+0x160>)
 800a262:	f7f7 fc39 	bl	8001ad8 <HAL_GPIO_Init>

}
 800a266:	bf00      	nop
 800a268:	3728      	adds	r7, #40	; 0x28
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	40021000 	.word	0x40021000
 800a274:	48000800 	.word	0x48000800
 800a278:	48000c00 	.word	0x48000c00

0800a27c <gpio_ConfigureToFloating>:

/* USER CODE BEGIN 2 */
void gpio_ConfigureToFloating(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b088      	sub	sp, #32
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	460b      	mov	r3, r1
 800a286:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a288:	f107 030c 	add.w	r3, r7, #12
 800a28c:	2200      	movs	r2, #0
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	605a      	str	r2, [r3, #4]
 800a292:	609a      	str	r2, [r3, #8]
 800a294:	60da      	str	r2, [r3, #12]
 800a296:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800a298:	887b      	ldrh	r3, [r7, #2]
 800a29a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a29c:	2300      	movs	r3, #0
 800a29e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800a2a4:	f107 030c 	add.w	r3, r7, #12
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f7f7 fc14 	bl	8001ad8 <HAL_GPIO_Init>
}
 800a2b0:	bf00      	nop
 800a2b2:	3720      	adds	r7, #32
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <gpio_ConfigureToPushPull>:
void gpio_ConfigureToPushPull(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b088      	sub	sp, #32
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2c4:	f107 030c 	add.w	r3, r7, #12
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	605a      	str	r2, [r3, #4]
 800a2ce:	609a      	str	r2, [r3, #8]
 800a2d0:	60da      	str	r2, [r3, #12]
 800a2d2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800a2d4:	887b      	ldrh	r3, [r7, #2]
 800a2d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2e0:	2303      	movs	r3, #3
 800a2e2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800a2e4:	f107 030c 	add.w	r3, r7, #12
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7f7 fbf4 	bl	8001ad8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800a2f0:	887b      	ldrh	r3, [r7, #2]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f7f7 fd80 	bl	8001dfc <HAL_GPIO_WritePin>
}
 800a2fc:	bf00      	nop
 800a2fe:	3720      	adds	r7, #32
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <gpio_setPinMode>:

#define TEST_GPIO_MODE_MSK 0x03
#define TEST_GPIO_MODE_INPUT_FLOAT 0x00
#define TEST_GPIO_MODE_OUTPUT_OD 0x01

void gpio_setPinMode(uint8_t mode, GPIO_TypeDef  *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState){
 800a304:	b580      	push	{r7, lr}
 800a306:	b088      	sub	sp, #32
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6039      	str	r1, [r7, #0]
 800a30c:	4611      	mov	r1, r2
 800a30e:	461a      	mov	r2, r3
 800a310:	4603      	mov	r3, r0
 800a312:	71fb      	strb	r3, [r7, #7]
 800a314:	460b      	mov	r3, r1
 800a316:	80bb      	strh	r3, [r7, #4]
 800a318:	4613      	mov	r3, r2
 800a31a:	71bb      	strb	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a31c:	f107 030c 	add.w	r3, r7, #12
 800a320:	2200      	movs	r2, #0
 800a322:	601a      	str	r2, [r3, #0]
 800a324:	605a      	str	r2, [r3, #4]
 800a326:	609a      	str	r2, [r3, #8]
 800a328:	60da      	str	r2, [r3, #12]
 800a32a:	611a      	str	r2, [r3, #16]
	if(mode == GPIO_MODE_INPUT){
 800a32c:	79fb      	ldrb	r3, [r7, #7]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10c      	bne.n	800a34c <gpio_setPinMode+0x48>
//		uint8_t position = ((GPIO_Pin - 1) << 1)
//		GPIOx->MODER &= ~(1 << GPIO_Pin);

		GPIO_InitStruct.Pin = GPIO_Pin;
 800a332:	88bb      	ldrh	r3, [r7, #4]
 800a334:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a336:	2300      	movs	r3, #0
 800a338:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a33a:	2300      	movs	r3, #0
 800a33c:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800a33e:	f107 030c 	add.w	r3, r7, #12
 800a342:	4619      	mov	r1, r3
 800a344:	6838      	ldr	r0, [r7, #0]
 800a346:	f7f7 fbc7 	bl	8001ad8 <HAL_GPIO_Init>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
	}
}
 800a34a:	e016      	b.n	800a37a <gpio_setPinMode+0x76>
	}else if(mode == GPIO_MODE_OUTPUT_OD){
 800a34c:	79fb      	ldrb	r3, [r7, #7]
 800a34e:	2b11      	cmp	r3, #17
 800a350:	d113      	bne.n	800a37a <gpio_setPinMode+0x76>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 800a352:	79ba      	ldrb	r2, [r7, #6]
 800a354:	88bb      	ldrh	r3, [r7, #4]
 800a356:	4619      	mov	r1, r3
 800a358:	6838      	ldr	r0, [r7, #0]
 800a35a:	f7f7 fd4f 	bl	8001dfc <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = GPIO_Pin;
 800a35e:	88bb      	ldrh	r3, [r7, #4]
 800a360:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800a362:	2311      	movs	r3, #17
 800a364:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a366:	2300      	movs	r3, #0
 800a368:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a36a:	2303      	movs	r3, #3
 800a36c:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800a36e:	f107 030c 	add.w	r3, r7, #12
 800a372:	4619      	mov	r1, r3
 800a374:	6838      	ldr	r0, [r7, #0]
 800a376:	f7f7 fbaf 	bl	8001ad8 <HAL_GPIO_Init>
}
 800a37a:	bf00      	nop
 800a37c:	3720      	adds	r7, #32
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
	...

0800a384 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800a388:	4b1b      	ldr	r3, [pc, #108]	; (800a3f8 <MX_I2C2_Init+0x74>)
 800a38a:	4a1c      	ldr	r2, [pc, #112]	; (800a3fc <MX_I2C2_Init+0x78>)
 800a38c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800a38e:	4b1a      	ldr	r3, [pc, #104]	; (800a3f8 <MX_I2C2_Init+0x74>)
 800a390:	4a1b      	ldr	r2, [pc, #108]	; (800a400 <MX_I2C2_Init+0x7c>)
 800a392:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800a394:	4b18      	ldr	r3, [pc, #96]	; (800a3f8 <MX_I2C2_Init+0x74>)
 800a396:	2200      	movs	r2, #0
 800a398:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a39a:	4b17      	ldr	r3, [pc, #92]	; (800a3f8 <MX_I2C2_Init+0x74>)
 800a39c:	2201      	movs	r2, #1
 800a39e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a3a0:	4b15      	ldr	r3, [pc, #84]	; (800a3f8 <MX_I2C2_Init+0x74>)
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800a3a6:	4b14      	ldr	r3, [pc, #80]	; (800a3f8 <MX_I2C2_Init+0x74>)
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a3ac:	4b12      	ldr	r3, [pc, #72]	; (800a3f8 <MX_I2C2_Init+0x74>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a3b2:	4b11      	ldr	r3, [pc, #68]	; (800a3f8 <MX_I2C2_Init+0x74>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a3b8:	4b0f      	ldr	r3, [pc, #60]	; (800a3f8 <MX_I2C2_Init+0x74>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a3be:	480e      	ldr	r0, [pc, #56]	; (800a3f8 <MX_I2C2_Init+0x74>)
 800a3c0:	f7f7 fd34 	bl	8001e2c <HAL_I2C_Init>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800a3ca:	f000 f9a7 	bl	800a71c <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a3ce:	2100      	movs	r1, #0
 800a3d0:	4809      	ldr	r0, [pc, #36]	; (800a3f8 <MX_I2C2_Init+0x74>)
 800a3d2:	f7f8 f81f 	bl	8002414 <HAL_I2CEx_ConfigAnalogFilter>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d001      	beq.n	800a3e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800a3dc:	f000 f99e 	bl	800a71c <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	4805      	ldr	r0, [pc, #20]	; (800a3f8 <MX_I2C2_Init+0x74>)
 800a3e4:	f7f8 f861 	bl	80024aa <HAL_I2CEx_ConfigDigitalFilter>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d001      	beq.n	800a3f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800a3ee:	f000 f995 	bl	800a71c <Error_Handler>
  }

}
 800a3f2:	bf00      	nop
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	200019cc 	.word	0x200019cc
 800a3fc:	40005800 	.word	0x40005800
 800a400:	10909cec 	.word	0x10909cec

0800a404 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b08a      	sub	sp, #40	; 0x28
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a40c:	f107 0314 	add.w	r3, r7, #20
 800a410:	2200      	movs	r2, #0
 800a412:	601a      	str	r2, [r3, #0]
 800a414:	605a      	str	r2, [r3, #4]
 800a416:	609a      	str	r2, [r3, #8]
 800a418:	60da      	str	r2, [r3, #12]
 800a41a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a17      	ldr	r2, [pc, #92]	; (800a480 <HAL_I2C_MspInit+0x7c>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d128      	bne.n	800a478 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a426:	4a17      	ldr	r2, [pc, #92]	; (800a484 <HAL_I2C_MspInit+0x80>)
 800a428:	4b16      	ldr	r3, [pc, #88]	; (800a484 <HAL_I2C_MspInit+0x80>)
 800a42a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a42c:	f043 0302 	orr.w	r3, r3, #2
 800a430:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a432:	4b14      	ldr	r3, [pc, #80]	; (800a484 <HAL_I2C_MspInit+0x80>)
 800a434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a436:	f003 0302 	and.w	r3, r3, #2
 800a43a:	613b      	str	r3, [r7, #16]
 800a43c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a43e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a444:	2312      	movs	r3, #18
 800a446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a448:	2301      	movs	r3, #1
 800a44a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a44c:	2303      	movs	r3, #3
 800a44e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a450:	2304      	movs	r3, #4
 800a452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a454:	f107 0314 	add.w	r3, r7, #20
 800a458:	4619      	mov	r1, r3
 800a45a:	480b      	ldr	r0, [pc, #44]	; (800a488 <HAL_I2C_MspInit+0x84>)
 800a45c:	f7f7 fb3c 	bl	8001ad8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a460:	4a08      	ldr	r2, [pc, #32]	; (800a484 <HAL_I2C_MspInit+0x80>)
 800a462:	4b08      	ldr	r3, [pc, #32]	; (800a484 <HAL_I2C_MspInit+0x80>)
 800a464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a466:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a46a:	6593      	str	r3, [r2, #88]	; 0x58
 800a46c:	4b05      	ldr	r3, [pc, #20]	; (800a484 <HAL_I2C_MspInit+0x80>)
 800a46e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a470:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a474:	60fb      	str	r3, [r7, #12]
 800a476:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800a478:	bf00      	nop
 800a47a:	3728      	adds	r7, #40	; 0x28
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	40005800 	.word	0x40005800
 800a484:	40021000 	.word	0x40021000
 800a488:	48000400 	.word	0x48000400

0800a48c <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim1;
LPTIM_HandleTypeDef hlptim2;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	af00      	add	r7, sp, #0

  hlptim1.Instance = LPTIM1;
 800a490:	4b12      	ldr	r3, [pc, #72]	; (800a4dc <MX_LPTIM1_Init+0x50>)
 800a492:	4a13      	ldr	r2, [pc, #76]	; (800a4e0 <MX_LPTIM1_Init+0x54>)
 800a494:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800a496:	4b11      	ldr	r3, [pc, #68]	; (800a4dc <MX_LPTIM1_Init+0x50>)
 800a498:	2200      	movs	r2, #0
 800a49a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800a49c:	4b0f      	ldr	r3, [pc, #60]	; (800a4dc <MX_LPTIM1_Init+0x50>)
 800a49e:	2200      	movs	r2, #0
 800a4a0:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800a4a2:	4b0e      	ldr	r3, [pc, #56]	; (800a4dc <MX_LPTIM1_Init+0x50>)
 800a4a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4a8:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800a4aa:	4b0c      	ldr	r3, [pc, #48]	; (800a4dc <MX_LPTIM1_Init+0x50>)
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800a4b0:	4b0a      	ldr	r3, [pc, #40]	; (800a4dc <MX_LPTIM1_Init+0x50>)
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800a4b6:	4b09      	ldr	r3, [pc, #36]	; (800a4dc <MX_LPTIM1_Init+0x50>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800a4bc:	4b07      	ldr	r3, [pc, #28]	; (800a4dc <MX_LPTIM1_Init+0x50>)
 800a4be:	2200      	movs	r2, #0
 800a4c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800a4c2:	4b06      	ldr	r3, [pc, #24]	; (800a4dc <MX_LPTIM1_Init+0x50>)
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800a4c8:	4804      	ldr	r0, [pc, #16]	; (800a4dc <MX_LPTIM1_Init+0x50>)
 800a4ca:	f7f8 f83b 	bl	8002544 <HAL_LPTIM_Init>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d001      	beq.n	800a4d8 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 800a4d4:	f000 f922 	bl	800a71c <Error_Handler>
  }

}
 800a4d8:	bf00      	nop
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	20001a50 	.word	0x20001a50
 800a4e0:	40007c00 	.word	0x40007c00

0800a4e4 <MX_LPTIM2_Init>:
/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	af00      	add	r7, sp, #0

  hlptim2.Instance = LPTIM2;
 800a4e8:	4b12      	ldr	r3, [pc, #72]	; (800a534 <MX_LPTIM2_Init+0x50>)
 800a4ea:	4a13      	ldr	r2, [pc, #76]	; (800a538 <MX_LPTIM2_Init+0x54>)
 800a4ec:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800a4ee:	4b11      	ldr	r3, [pc, #68]	; (800a534 <MX_LPTIM2_Init+0x50>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800a4f4:	4b0f      	ldr	r3, [pc, #60]	; (800a534 <MX_LPTIM2_Init+0x50>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800a4fa:	4b0e      	ldr	r3, [pc, #56]	; (800a534 <MX_LPTIM2_Init+0x50>)
 800a4fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a500:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800a502:	4b0c      	ldr	r3, [pc, #48]	; (800a534 <MX_LPTIM2_Init+0x50>)
 800a504:	2200      	movs	r2, #0
 800a506:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800a508:	4b0a      	ldr	r3, [pc, #40]	; (800a534 <MX_LPTIM2_Init+0x50>)
 800a50a:	2200      	movs	r2, #0
 800a50c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800a50e:	4b09      	ldr	r3, [pc, #36]	; (800a534 <MX_LPTIM2_Init+0x50>)
 800a510:	2200      	movs	r2, #0
 800a512:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800a514:	4b07      	ldr	r3, [pc, #28]	; (800a534 <MX_LPTIM2_Init+0x50>)
 800a516:	2200      	movs	r2, #0
 800a518:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800a51a:	4b06      	ldr	r3, [pc, #24]	; (800a534 <MX_LPTIM2_Init+0x50>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 800a520:	4804      	ldr	r0, [pc, #16]	; (800a534 <MX_LPTIM2_Init+0x50>)
 800a522:	f7f8 f80f 	bl	8002544 <HAL_LPTIM_Init>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d001      	beq.n	800a530 <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 800a52c:	f000 f8f6 	bl	800a71c <Error_Handler>
  }

}
 800a530:	bf00      	nop
 800a532:	bd80      	pop	{r7, pc}
 800a534:	20001a18 	.word	0x20001a18
 800a538:	40009400 	.word	0x40009400

0800a53c <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]

  if(lptimHandle->Instance==LPTIM1)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a1a      	ldr	r2, [pc, #104]	; (800a5b4 <HAL_LPTIM_MspInit+0x78>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d114      	bne.n	800a578 <HAL_LPTIM_MspInit+0x3c>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800a54e:	4a1a      	ldr	r2, [pc, #104]	; (800a5b8 <HAL_LPTIM_MspInit+0x7c>)
 800a550:	4b19      	ldr	r3, [pc, #100]	; (800a5b8 <HAL_LPTIM_MspInit+0x7c>)
 800a552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a558:	6593      	str	r3, [r2, #88]	; 0x58
 800a55a:	4b17      	ldr	r3, [pc, #92]	; (800a5b8 <HAL_LPTIM_MspInit+0x7c>)
 800a55c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a55e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a562:	60fb      	str	r3, [r7, #12]
 800a564:	68fb      	ldr	r3, [r7, #12]

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800a566:	2200      	movs	r2, #0
 800a568:	2100      	movs	r1, #0
 800a56a:	2041      	movs	r0, #65	; 0x41
 800a56c:	f7f7 fa7d 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800a570:	2041      	movs	r0, #65	; 0x41
 800a572:	f7f7 fa96 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }
}
 800a576:	e018      	b.n	800a5aa <HAL_LPTIM_MspInit+0x6e>
  else if(lptimHandle->Instance==LPTIM2)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a0f      	ldr	r2, [pc, #60]	; (800a5bc <HAL_LPTIM_MspInit+0x80>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d113      	bne.n	800a5aa <HAL_LPTIM_MspInit+0x6e>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800a582:	4a0d      	ldr	r2, [pc, #52]	; (800a5b8 <HAL_LPTIM_MspInit+0x7c>)
 800a584:	4b0c      	ldr	r3, [pc, #48]	; (800a5b8 <HAL_LPTIM_MspInit+0x7c>)
 800a586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a588:	f043 0320 	orr.w	r3, r3, #32
 800a58c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800a58e:	4b0a      	ldr	r3, [pc, #40]	; (800a5b8 <HAL_LPTIM_MspInit+0x7c>)
 800a590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a592:	f003 0320 	and.w	r3, r3, #32
 800a596:	60bb      	str	r3, [r7, #8]
 800a598:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 800a59a:	2200      	movs	r2, #0
 800a59c:	2100      	movs	r1, #0
 800a59e:	2042      	movs	r0, #66	; 0x42
 800a5a0:	f7f7 fa63 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 800a5a4:	2042      	movs	r0, #66	; 0x42
 800a5a6:	f7f7 fa7c 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
}
 800a5aa:	bf00      	nop
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	40007c00 	.word	0x40007c00
 800a5b8:	40021000 	.word	0x40021000
 800a5bc:	40009400 	.word	0x40009400

0800a5c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a5c4:	f7f7 f926 	bl	8001814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a5c8:	f000 f81f 	bl	800a60a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a5cc:	f7ff fda4 	bl	800a118 <MX_GPIO_Init>
  MX_I2C2_Init();
 800a5d0:	f7ff fed8 	bl	800a384 <MX_I2C2_Init>
  MX_LPTIM1_Init();
 800a5d4:	f7ff ff5a 	bl	800a48c <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 800a5d8:	f7ff ff84 	bl	800a4e4 <MX_LPTIM2_Init>
  MX_TIM1_Init();
 800a5dc:	f000 f98e 	bl	800a8fc <MX_TIM1_Init>
  MX_TIM2_Init();
 800a5e0:	f000 fa1a 	bl	800aa18 <MX_TIM2_Init>
  MX_TIM3_Init();
 800a5e4:	f000 fa54 	bl	800aa90 <MX_TIM3_Init>
  MX_TIM6_Init();
 800a5e8:	f000 fab4 	bl	800ab54 <MX_TIM6_Init>
  MX_TIM15_Init();
 800a5ec:	f000 fae8 	bl	800abc0 <MX_TIM15_Init>
  MX_TIM16_Init();
 800a5f0:	f000 fb94 	bl	800ad1c <MX_TIM16_Init>
  MX_UART4_Init();
 800a5f4:	f000 fd88 	bl	800b108 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800a5f8:	f000 fdb6 	bl	800b168 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800a5fc:	f000 fde6 	bl	800b1cc <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800a600:	f000 fee6 	bl	800b3d0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
//  TIM15->CCR4 = 255;
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
  app_main();
 800a604:	f7f6 ff4c 	bl	80014a0 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a608:	e7fe      	b.n	800a608 <main+0x48>

0800a60a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b0b0      	sub	sp, #192	; 0xc0
 800a60e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a610:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800a614:	2244      	movs	r2, #68	; 0x44
 800a616:	2100      	movs	r1, #0
 800a618:	4618      	mov	r0, r3
 800a61a:	f001 fc3d 	bl	800be98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a61e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a622:	2200      	movs	r2, #0
 800a624:	601a      	str	r2, [r3, #0]
 800a626:	605a      	str	r2, [r3, #4]
 800a628:	609a      	str	r2, [r3, #8]
 800a62a:	60da      	str	r2, [r3, #12]
 800a62c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a62e:	463b      	mov	r3, r7
 800a630:	2268      	movs	r2, #104	; 0x68
 800a632:	2100      	movs	r1, #0
 800a634:	4618      	mov	r0, r3
 800a636:	f001 fc2f 	bl	800be98 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a63a:	2301      	movs	r3, #1
 800a63c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a63e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a642:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a646:	2302      	movs	r3, #2
 800a648:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a64c:	2303      	movs	r3, #3
 800a64e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800a652:	2301      	movs	r3, #1
 800a654:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 20;
 800a658:	2314      	movs	r3, #20
 800a65a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800a65e:	2307      	movs	r3, #7
 800a660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a664:	2302      	movs	r3, #2
 800a666:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a66a:	2302      	movs	r3, #2
 800a66c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a670:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800a674:	4618      	mov	r0, r3
 800a676:	f7f9 f895 	bl	80037a4 <HAL_RCC_OscConfig>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d001      	beq.n	800a684 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800a680:	f000 f84c 	bl	800a71c <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a684:	230f      	movs	r3, #15
 800a686:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a688:	2303      	movs	r3, #3
 800a68a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a68c:	2300      	movs	r3, #0
 800a68e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a690:	2300      	movs	r3, #0
 800a692:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a694:	2300      	movs	r3, #0
 800a696:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a698:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a69c:	2104      	movs	r1, #4
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7f9 fc26 	bl	8003ef0 <HAL_RCC_ClockConfig>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d001      	beq.n	800a6ae <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800a6aa:	f000 f837 	bl	800a71c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800a6ae:	f242 638b 	movw	r3, #9867	; 0x268b
 800a6b2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_LPTIM1
                              |RCC_PERIPHCLK_LPTIM2|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800a6cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a6d0:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800a6da:	230c      	movs	r3, #12
 800a6dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800a6de:	2307      	movs	r3, #7
 800a6e0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800a6e2:	2302      	movs	r3, #2
 800a6e4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800a6e6:	2302      	movs	r3, #2
 800a6e8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800a6ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a6ee:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a6f0:	463b      	mov	r3, r7
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7f9 fe0e 	bl	8004314 <HAL_RCCEx_PeriphCLKConfig>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800a6fe:	f000 f80d 	bl	800a71c <Error_Handler>
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800a702:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a706:	f7f8 ffe7 	bl	80036d8 <HAL_PWREx_ControlVoltageScaling>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d001      	beq.n	800a714 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800a710:	f000 f804 	bl	800a71c <Error_Handler>
  }
}
 800a714:	bf00      	nop
 800a716:	37c0      	adds	r7, #192	; 0xc0
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a71c:	b480      	push	{r7}
 800a71e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a720:	bf00      	nop
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
	...

0800a72c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a732:	4a0f      	ldr	r2, [pc, #60]	; (800a770 <HAL_MspInit+0x44>)
 800a734:	4b0e      	ldr	r3, [pc, #56]	; (800a770 <HAL_MspInit+0x44>)
 800a736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a738:	f043 0301 	orr.w	r3, r3, #1
 800a73c:	6613      	str	r3, [r2, #96]	; 0x60
 800a73e:	4b0c      	ldr	r3, [pc, #48]	; (800a770 <HAL_MspInit+0x44>)
 800a740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a742:	f003 0301 	and.w	r3, r3, #1
 800a746:	607b      	str	r3, [r7, #4]
 800a748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a74a:	4a09      	ldr	r2, [pc, #36]	; (800a770 <HAL_MspInit+0x44>)
 800a74c:	4b08      	ldr	r3, [pc, #32]	; (800a770 <HAL_MspInit+0x44>)
 800a74e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a754:	6593      	str	r3, [r2, #88]	; 0x58
 800a756:	4b06      	ldr	r3, [pc, #24]	; (800a770 <HAL_MspInit+0x44>)
 800a758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a75a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a75e:	603b      	str	r3, [r7, #0]
 800a760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a762:	bf00      	nop
 800a764:	370c      	adds	r7, #12
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	40021000 	.word	0x40021000

0800a774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a774:	b480      	push	{r7}
 800a776:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a778:	bf00      	nop
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr

0800a782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a782:	b480      	push	{r7}
 800a784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a786:	e7fe      	b.n	800a786 <HardFault_Handler+0x4>

0800a788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a788:	b480      	push	{r7}
 800a78a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a78c:	e7fe      	b.n	800a78c <MemManage_Handler+0x4>

0800a78e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a78e:	b480      	push	{r7}
 800a790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a792:	e7fe      	b.n	800a792 <BusFault_Handler+0x4>

0800a794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a794:	b480      	push	{r7}
 800a796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a798:	e7fe      	b.n	800a798 <UsageFault_Handler+0x4>

0800a79a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a79a:	b480      	push	{r7}
 800a79c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a79e:	bf00      	nop
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a7ac:	bf00      	nop
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a7b6:	b480      	push	{r7}
 800a7b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a7ba:	bf00      	nop
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a7c8:	f7f7 f860 	bl	800188c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  app_1ms();
 800a7cc:	f7f6 fe9a 	bl	8001504 <app_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 800a7d0:	bf00      	nop
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a7d8:	4803      	ldr	r0, [pc, #12]	; (800a7e8 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800a7da:	f7fa f976 	bl	8004aca <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800a7de:	4803      	ldr	r0, [pc, #12]	; (800a7ec <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800a7e0:	f7fa f973 	bl	8004aca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800a7e4:	bf00      	nop
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	20001b48 	.word	0x20001b48
 800a7ec:	20001a88 	.word	0x20001a88

0800a7f0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a7f4:	4802      	ldr	r0, [pc, #8]	; (800a800 <TIM1_TRG_COM_IRQHandler+0x10>)
 800a7f6:	f7fa f968 	bl	8004aca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800a7fa:	bf00      	nop
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	20001b48 	.word	0x20001b48

0800a804 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a808:	4802      	ldr	r0, [pc, #8]	; (800a814 <TIM1_CC_IRQHandler+0x10>)
 800a80a:	f7fa f95e 	bl	8004aca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800a80e:	bf00      	nop
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	20001b48 	.word	0x20001b48

0800a818 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a81c:	4802      	ldr	r0, [pc, #8]	; (800a828 <TIM2_IRQHandler+0x10>)
 800a81e:	f7fa f954 	bl	8004aca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a822:	bf00      	nop
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	20001b88 	.word	0x20001b88

0800a82c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a830:	4802      	ldr	r0, [pc, #8]	; (800a83c <TIM3_IRQHandler+0x10>)
 800a832:	f7fa f94a 	bl	8004aca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a836:	bf00      	nop
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	20001ac8 	.word	0x20001ac8

0800a840 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a844:	4802      	ldr	r0, [pc, #8]	; (800a850 <TIM6_DAC_IRQHandler+0x10>)
 800a846:	f7fa f940 	bl	8004aca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a84a:	bf00      	nop
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	20001b08 	.word	0x20001b08

0800a854 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800a858:	4802      	ldr	r0, [pc, #8]	; (800a864 <LPTIM1_IRQHandler+0x10>)
 800a85a:	f7f7 fefd 	bl	8002658 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800a85e:	bf00      	nop
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	20001a50 	.word	0x20001a50

0800a868 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 800a86c:	4802      	ldr	r0, [pc, #8]	; (800a878 <LPTIM2_IRQHandler+0x10>)
 800a86e:	f7f7 fef3 	bl	8002658 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 800a872:	bf00      	nop
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	20001a18 	.word	0x20001a18

0800a87c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800a880:	4802      	ldr	r0, [pc, #8]	; (800a88c <USB_IRQHandler+0x10>)
 800a882:	f7f8 f8c5 	bl	8002a10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800a886:	bf00      	nop
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	2000300c 	.word	0x2000300c

0800a890 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800a890:	b480      	push	{r7}
 800a892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a894:	4a17      	ldr	r2, [pc, #92]	; (800a8f4 <SystemInit+0x64>)
 800a896:	4b17      	ldr	r3, [pc, #92]	; (800a8f4 <SystemInit+0x64>)
 800a898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a89c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800a8a4:	4a14      	ldr	r2, [pc, #80]	; (800a8f8 <SystemInit+0x68>)
 800a8a6:	4b14      	ldr	r3, [pc, #80]	; (800a8f8 <SystemInit+0x68>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f043 0301 	orr.w	r3, r3, #1
 800a8ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800a8b0:	4b11      	ldr	r3, [pc, #68]	; (800a8f8 <SystemInit+0x68>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800a8b6:	4a10      	ldr	r2, [pc, #64]	; (800a8f8 <SystemInit+0x68>)
 800a8b8:	4b0f      	ldr	r3, [pc, #60]	; (800a8f8 <SystemInit+0x68>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800a8c0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800a8c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800a8c6:	4b0c      	ldr	r3, [pc, #48]	; (800a8f8 <SystemInit+0x68>)
 800a8c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a8cc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a8ce:	4a0a      	ldr	r2, [pc, #40]	; (800a8f8 <SystemInit+0x68>)
 800a8d0:	4b09      	ldr	r3, [pc, #36]	; (800a8f8 <SystemInit+0x68>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800a8da:	4b07      	ldr	r3, [pc, #28]	; (800a8f8 <SystemInit+0x68>)
 800a8dc:	2200      	movs	r2, #0
 800a8de:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a8e0:	4b04      	ldr	r3, [pc, #16]	; (800a8f4 <SystemInit+0x64>)
 800a8e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a8e6:	609a      	str	r2, [r3, #8]
#endif
}
 800a8e8:	bf00      	nop
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	e000ed00 	.word	0xe000ed00
 800a8f8:	40021000 	.word	0x40021000

0800a8fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b096      	sub	sp, #88	; 0x58
 800a900:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a902:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a906:	2200      	movs	r2, #0
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	605a      	str	r2, [r3, #4]
 800a90c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a90e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a912:	2200      	movs	r2, #0
 800a914:	601a      	str	r2, [r3, #0]
 800a916:	605a      	str	r2, [r3, #4]
 800a918:	609a      	str	r2, [r3, #8]
 800a91a:	60da      	str	r2, [r3, #12]
 800a91c:	611a      	str	r2, [r3, #16]
 800a91e:	615a      	str	r2, [r3, #20]
 800a920:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a922:	1d3b      	adds	r3, r7, #4
 800a924:	222c      	movs	r2, #44	; 0x2c
 800a926:	2100      	movs	r1, #0
 800a928:	4618      	mov	r0, r3
 800a92a:	f001 fab5 	bl	800be98 <memset>

  htim1.Instance = TIM1;
 800a92e:	4b38      	ldr	r3, [pc, #224]	; (800aa10 <MX_TIM1_Init+0x114>)
 800a930:	4a38      	ldr	r2, [pc, #224]	; (800aa14 <MX_TIM1_Init+0x118>)
 800a932:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a934:	4b36      	ldr	r3, [pc, #216]	; (800aa10 <MX_TIM1_Init+0x114>)
 800a936:	2200      	movs	r2, #0
 800a938:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a93a:	4b35      	ldr	r3, [pc, #212]	; (800aa10 <MX_TIM1_Init+0x114>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800a940:	4b33      	ldr	r3, [pc, #204]	; (800aa10 <MX_TIM1_Init+0x114>)
 800a942:	2200      	movs	r2, #0
 800a944:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a946:	4b32      	ldr	r3, [pc, #200]	; (800aa10 <MX_TIM1_Init+0x114>)
 800a948:	2200      	movs	r2, #0
 800a94a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a94c:	4b30      	ldr	r3, [pc, #192]	; (800aa10 <MX_TIM1_Init+0x114>)
 800a94e:	2200      	movs	r2, #0
 800a950:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a952:	4b2f      	ldr	r3, [pc, #188]	; (800aa10 <MX_TIM1_Init+0x114>)
 800a954:	2200      	movs	r2, #0
 800a956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a958:	482d      	ldr	r0, [pc, #180]	; (800aa10 <MX_TIM1_Init+0x114>)
 800a95a:	f7fa f860 	bl	8004a1e <HAL_TIM_PWM_Init>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d001      	beq.n	800a968 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800a964:	f7ff feda 	bl	800a71c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a968:	2300      	movs	r3, #0
 800a96a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a96c:	2300      	movs	r3, #0
 800a96e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a970:	2300      	movs	r3, #0
 800a972:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a974:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a978:	4619      	mov	r1, r3
 800a97a:	4825      	ldr	r0, [pc, #148]	; (800aa10 <MX_TIM1_Init+0x114>)
 800a97c:	f7fb f904 	bl	8005b88 <HAL_TIMEx_MasterConfigSynchronization>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d001      	beq.n	800a98a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800a986:	f7ff fec9 	bl	800a71c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a98a:	2360      	movs	r3, #96	; 0x60
 800a98c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800a98e:	2300      	movs	r3, #0
 800a990:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a992:	2300      	movs	r3, #0
 800a994:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a996:	2300      	movs	r3, #0
 800a998:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a99a:	2300      	movs	r3, #0
 800a99c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a9a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	4818      	ldr	r0, [pc, #96]	; (800aa10 <MX_TIM1_Init+0x114>)
 800a9b0:	f7fa fa46 	bl	8004e40 <HAL_TIM_PWM_ConfigChannel>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d001      	beq.n	800a9be <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800a9ba:	f7ff feaf 	bl	800a71c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a9d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a9d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a9e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a9e4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a9ee:	1d3b      	adds	r3, r7, #4
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	4807      	ldr	r0, [pc, #28]	; (800aa10 <MX_TIM1_Init+0x114>)
 800a9f4:	f7fb f91e 	bl	8005c34 <HAL_TIMEx_ConfigBreakDeadTime>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d001      	beq.n	800aa02 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800a9fe:	f7ff fe8d 	bl	800a71c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800aa02:	4803      	ldr	r0, [pc, #12]	; (800aa10 <MX_TIM1_Init+0x114>)
 800aa04:	f000 face 	bl	800afa4 <HAL_TIM_MspPostInit>

}
 800aa08:	bf00      	nop
 800aa0a:	3758      	adds	r7, #88	; 0x58
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	20001b48 	.word	0x20001b48
 800aa14:	40012c00 	.word	0x40012c00

0800aa18 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b088      	sub	sp, #32
 800aa1c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aa1e:	f107 0314 	add.w	r3, r7, #20
 800aa22:	2200      	movs	r2, #0
 800aa24:	601a      	str	r2, [r3, #0]
 800aa26:	605a      	str	r2, [r3, #4]
 800aa28:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800aa2a:	1d3b      	adds	r3, r7, #4
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	601a      	str	r2, [r3, #0]
 800aa30:	605a      	str	r2, [r3, #4]
 800aa32:	609a      	str	r2, [r3, #8]
 800aa34:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800aa36:	4b15      	ldr	r3, [pc, #84]	; (800aa8c <MX_TIM2_Init+0x74>)
 800aa38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800aa3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 800aa3e:	4b13      	ldr	r3, [pc, #76]	; (800aa8c <MX_TIM2_Init+0x74>)
 800aa40:	2208      	movs	r2, #8
 800aa42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aa44:	4b11      	ldr	r3, [pc, #68]	; (800aa8c <MX_TIM2_Init+0x74>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800aa4a:	4b10      	ldr	r3, [pc, #64]	; (800aa8c <MX_TIM2_Init+0x74>)
 800aa4c:	220a      	movs	r2, #10
 800aa4e:	60da      	str	r2, [r3, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aa50:	4b0e      	ldr	r3, [pc, #56]	; (800aa8c <MX_TIM2_Init+0x74>)
 800aa52:	2200      	movs	r2, #0
 800aa54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800aa56:	480d      	ldr	r0, [pc, #52]	; (800aa8c <MX_TIM2_Init+0x74>)
 800aa58:	f7f9 ffb6 	bl	80049c8 <HAL_TIM_Base_Init>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d001      	beq.n	800aa66 <MX_TIM2_Init+0x4e>
  {
    Error_Handler();
 800aa62:	f7ff fe5b 	bl	800a71c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aa66:	2300      	movs	r3, #0
 800aa68:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800aa6e:	f107 0314 	add.w	r3, r7, #20
 800aa72:	4619      	mov	r1, r3
 800aa74:	4805      	ldr	r0, [pc, #20]	; (800aa8c <MX_TIM2_Init+0x74>)
 800aa76:	f7fb f887 	bl	8005b88 <HAL_TIMEx_MasterConfigSynchronization>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d001      	beq.n	800aa84 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800aa80:	f7ff fe4c 	bl	800a71c <Error_Handler>
  }

}
 800aa84:	bf00      	nop
 800aa86:	3720      	adds	r7, #32
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	20001b88 	.word	0x20001b88

0800aa90 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b088      	sub	sp, #32
 800aa94:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aa96:	f107 0314 	add.w	r3, r7, #20
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	601a      	str	r2, [r3, #0]
 800aa9e:	605a      	str	r2, [r3, #4]
 800aaa0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800aaa2:	1d3b      	adds	r3, r7, #4
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	601a      	str	r2, [r3, #0]
 800aaa8:	605a      	str	r2, [r3, #4]
 800aaaa:	609a      	str	r2, [r3, #8]
 800aaac:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 800aaae:	4b27      	ldr	r3, [pc, #156]	; (800ab4c <MX_TIM3_Init+0xbc>)
 800aab0:	4a27      	ldr	r2, [pc, #156]	; (800ab50 <MX_TIM3_Init+0xc0>)
 800aab2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80;
 800aab4:	4b25      	ldr	r3, [pc, #148]	; (800ab4c <MX_TIM3_Init+0xbc>)
 800aab6:	2250      	movs	r2, #80	; 0x50
 800aab8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aaba:	4b24      	ldr	r3, [pc, #144]	; (800ab4c <MX_TIM3_Init+0xbc>)
 800aabc:	2200      	movs	r2, #0
 800aabe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 800aac0:	4b22      	ldr	r3, [pc, #136]	; (800ab4c <MX_TIM3_Init+0xbc>)
 800aac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aac6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aac8:	4b20      	ldr	r3, [pc, #128]	; (800ab4c <MX_TIM3_Init+0xbc>)
 800aaca:	2200      	movs	r2, #0
 800aacc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aace:	4b1f      	ldr	r3, [pc, #124]	; (800ab4c <MX_TIM3_Init+0xbc>)
 800aad0:	2200      	movs	r2, #0
 800aad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800aad4:	481d      	ldr	r0, [pc, #116]	; (800ab4c <MX_TIM3_Init+0xbc>)
 800aad6:	f7f9 ffcd 	bl	8004a74 <HAL_TIM_IC_Init>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d001      	beq.n	800aae4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800aae0:	f7ff fe1c 	bl	800a71c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aae4:	2300      	movs	r3, #0
 800aae6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aae8:	2300      	movs	r3, #0
 800aaea:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800aaec:	f107 0314 	add.w	r3, r7, #20
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	4816      	ldr	r0, [pc, #88]	; (800ab4c <MX_TIM3_Init+0xbc>)
 800aaf4:	f7fb f848 	bl	8005b88 <HAL_TIMEx_MasterConfigSynchronization>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800aafe:	f7ff fe0d 	bl	800a71c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800ab02:	2302      	movs	r3, #2
 800ab04:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ab06:	2301      	movs	r3, #1
 800ab08:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ab12:	1d3b      	adds	r3, r7, #4
 800ab14:	2200      	movs	r2, #0
 800ab16:	4619      	mov	r1, r3
 800ab18:	480c      	ldr	r0, [pc, #48]	; (800ab4c <MX_TIM3_Init+0xbc>)
 800ab1a:	f7fa f8f5 	bl	8004d08 <HAL_TIM_IC_ConfigChannel>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d001      	beq.n	800ab28 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800ab24:	f7ff fdfa 	bl	800a71c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800ab28:	2302      	movs	r3, #2
 800ab2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800ab2c:	1d3b      	adds	r3, r7, #4
 800ab2e:	2204      	movs	r2, #4
 800ab30:	4619      	mov	r1, r3
 800ab32:	4806      	ldr	r0, [pc, #24]	; (800ab4c <MX_TIM3_Init+0xbc>)
 800ab34:	f7fa f8e8 	bl	8004d08 <HAL_TIM_IC_ConfigChannel>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d001      	beq.n	800ab42 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800ab3e:	f7ff fded 	bl	800a71c <Error_Handler>
  }

}
 800ab42:	bf00      	nop
 800ab44:	3720      	adds	r7, #32
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	20001ac8 	.word	0x20001ac8
 800ab50:	40000400 	.word	0x40000400

0800ab54 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ab5a:	1d3b      	adds	r3, r7, #4
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	601a      	str	r2, [r3, #0]
 800ab60:	605a      	str	r2, [r3, #4]
 800ab62:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 800ab64:	4b14      	ldr	r3, [pc, #80]	; (800abb8 <MX_TIM6_Init+0x64>)
 800ab66:	4a15      	ldr	r2, [pc, #84]	; (800abbc <MX_TIM6_Init+0x68>)
 800ab68:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80;
 800ab6a:	4b13      	ldr	r3, [pc, #76]	; (800abb8 <MX_TIM6_Init+0x64>)
 800ab6c:	2250      	movs	r2, #80	; 0x50
 800ab6e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab70:	4b11      	ldr	r3, [pc, #68]	; (800abb8 <MX_TIM6_Init+0x64>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 92;
 800ab76:	4b10      	ldr	r3, [pc, #64]	; (800abb8 <MX_TIM6_Init+0x64>)
 800ab78:	225c      	movs	r2, #92	; 0x5c
 800ab7a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ab7c:	4b0e      	ldr	r3, [pc, #56]	; (800abb8 <MX_TIM6_Init+0x64>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800ab82:	480d      	ldr	r0, [pc, #52]	; (800abb8 <MX_TIM6_Init+0x64>)
 800ab84:	f7f9 ff20 	bl	80049c8 <HAL_TIM_Base_Init>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d001      	beq.n	800ab92 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800ab8e:	f7ff fdc5 	bl	800a71c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ab92:	2300      	movs	r3, #0
 800ab94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ab96:	2300      	movs	r3, #0
 800ab98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800ab9a:	1d3b      	adds	r3, r7, #4
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	4806      	ldr	r0, [pc, #24]	; (800abb8 <MX_TIM6_Init+0x64>)
 800aba0:	f7fa fff2 	bl	8005b88 <HAL_TIMEx_MasterConfigSynchronization>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d001      	beq.n	800abae <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800abaa:	f7ff fdb7 	bl	800a71c <Error_Handler>
  }

}
 800abae:	bf00      	nop
 800abb0:	3710      	adds	r7, #16
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	20001b08 	.word	0x20001b08
 800abbc:	40001000 	.word	0x40001000

0800abc0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b09a      	sub	sp, #104	; 0x68
 800abc4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800abc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800abca:	2200      	movs	r2, #0
 800abcc:	601a      	str	r2, [r3, #0]
 800abce:	605a      	str	r2, [r3, #4]
 800abd0:	609a      	str	r2, [r3, #8]
 800abd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800abd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800abd8:	2200      	movs	r2, #0
 800abda:	601a      	str	r2, [r3, #0]
 800abdc:	605a      	str	r2, [r3, #4]
 800abde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800abe0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800abe4:	2200      	movs	r2, #0
 800abe6:	601a      	str	r2, [r3, #0]
 800abe8:	605a      	str	r2, [r3, #4]
 800abea:	609a      	str	r2, [r3, #8]
 800abec:	60da      	str	r2, [r3, #12]
 800abee:	611a      	str	r2, [r3, #16]
 800abf0:	615a      	str	r2, [r3, #20]
 800abf2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800abf4:	1d3b      	adds	r3, r7, #4
 800abf6:	222c      	movs	r2, #44	; 0x2c
 800abf8:	2100      	movs	r1, #0
 800abfa:	4618      	mov	r0, r3
 800abfc:	f001 f94c 	bl	800be98 <memset>

  htim15.Instance = TIM15;
 800ac00:	4b44      	ldr	r3, [pc, #272]	; (800ad14 <MX_TIM15_Init+0x154>)
 800ac02:	4a45      	ldr	r2, [pc, #276]	; (800ad18 <MX_TIM15_Init+0x158>)
 800ac04:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80;
 800ac06:	4b43      	ldr	r3, [pc, #268]	; (800ad14 <MX_TIM15_Init+0x154>)
 800ac08:	2250      	movs	r2, #80	; 0x50
 800ac0a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac0c:	4b41      	ldr	r3, [pc, #260]	; (800ad14 <MX_TIM15_Init+0x154>)
 800ac0e:	2200      	movs	r2, #0
 800ac10:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 0;
 800ac12:	4b40      	ldr	r3, [pc, #256]	; (800ad14 <MX_TIM15_Init+0x154>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ac18:	4b3e      	ldr	r3, [pc, #248]	; (800ad14 <MX_TIM15_Init+0x154>)
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800ac1e:	4b3d      	ldr	r3, [pc, #244]	; (800ad14 <MX_TIM15_Init+0x154>)
 800ac20:	2200      	movs	r2, #0
 800ac22:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac24:	4b3b      	ldr	r3, [pc, #236]	; (800ad14 <MX_TIM15_Init+0x154>)
 800ac26:	2200      	movs	r2, #0
 800ac28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800ac2a:	483a      	ldr	r0, [pc, #232]	; (800ad14 <MX_TIM15_Init+0x154>)
 800ac2c:	f7f9 fecc 	bl	80049c8 <HAL_TIM_Base_Init>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d001      	beq.n	800ac3a <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 800ac36:	f7ff fd71 	bl	800a71c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ac3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac3e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800ac40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ac44:	4619      	mov	r1, r3
 800ac46:	4833      	ldr	r0, [pc, #204]	; (800ad14 <MX_TIM15_Init+0x154>)
 800ac48:	f7fa fa12 	bl	8005070 <HAL_TIM_ConfigClockSource>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d001      	beq.n	800ac56 <MX_TIM15_Init+0x96>
  {
    Error_Handler();
 800ac52:	f7ff fd63 	bl	800a71c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800ac56:	482f      	ldr	r0, [pc, #188]	; (800ad14 <MX_TIM15_Init+0x154>)
 800ac58:	f7f9 fee1 	bl	8004a1e <HAL_TIM_PWM_Init>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d001      	beq.n	800ac66 <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 800ac62:	f7ff fd5b 	bl	800a71c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ac66:	2300      	movs	r3, #0
 800ac68:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800ac6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ac72:	4619      	mov	r1, r3
 800ac74:	4827      	ldr	r0, [pc, #156]	; (800ad14 <MX_TIM15_Init+0x154>)
 800ac76:	f7fa ff87 	bl	8005b88 <HAL_TIMEx_MasterConfigSynchronization>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d001      	beq.n	800ac84 <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 800ac80:	f7ff fd4c 	bl	800a71c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ac84:	2360      	movs	r3, #96	; 0x60
 800ac86:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800ac90:	2300      	movs	r3, #0
 800ac92:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ac94:	2300      	movs	r3, #0
 800ac96:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800aca0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aca4:	2200      	movs	r2, #0
 800aca6:	4619      	mov	r1, r3
 800aca8:	481a      	ldr	r0, [pc, #104]	; (800ad14 <MX_TIM15_Init+0x154>)
 800acaa:	f7fa f8c9 	bl	8004e40 <HAL_TIM_PWM_ConfigChannel>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d001      	beq.n	800acb8 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 800acb4:	f7ff fd32 	bl	800a71c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800acb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800acbc:	2204      	movs	r2, #4
 800acbe:	4619      	mov	r1, r3
 800acc0:	4814      	ldr	r0, [pc, #80]	; (800ad14 <MX_TIM15_Init+0x154>)
 800acc2:	f7fa f8bd 	bl	8004e40 <HAL_TIM_PWM_ConfigChannel>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d001      	beq.n	800acd0 <MX_TIM15_Init+0x110>
  {
    Error_Handler();
 800accc:	f7ff fd26 	bl	800a71c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800acd0:	2300      	movs	r3, #0
 800acd2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800acd4:	2300      	movs	r3, #0
 800acd6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800acd8:	2300      	movs	r3, #0
 800acda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800acdc:	2300      	movs	r3, #0
 800acde:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ace0:	2300      	movs	r3, #0
 800ace2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ace4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ace8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800acea:	2300      	movs	r3, #0
 800acec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800acee:	2300      	movs	r3, #0
 800acf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800acf2:	1d3b      	adds	r3, r7, #4
 800acf4:	4619      	mov	r1, r3
 800acf6:	4807      	ldr	r0, [pc, #28]	; (800ad14 <MX_TIM15_Init+0x154>)
 800acf8:	f7fa ff9c 	bl	8005c34 <HAL_TIMEx_ConfigBreakDeadTime>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d001      	beq.n	800ad06 <MX_TIM15_Init+0x146>
  {
    Error_Handler();
 800ad02:	f7ff fd0b 	bl	800a71c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim15);
 800ad06:	4803      	ldr	r0, [pc, #12]	; (800ad14 <MX_TIM15_Init+0x154>)
 800ad08:	f000 f94c 	bl	800afa4 <HAL_TIM_MspPostInit>

}
 800ad0c:	bf00      	nop
 800ad0e:	3768      	adds	r7, #104	; 0x68
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	20001a88 	.word	0x20001a88
 800ad18:	40014000 	.word	0x40014000

0800ad1c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800ad20:	4b0f      	ldr	r3, [pc, #60]	; (800ad60 <MX_TIM16_Init+0x44>)
 800ad22:	4a10      	ldr	r2, [pc, #64]	; (800ad64 <MX_TIM16_Init+0x48>)
 800ad24:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8;
 800ad26:	4b0e      	ldr	r3, [pc, #56]	; (800ad60 <MX_TIM16_Init+0x44>)
 800ad28:	2208      	movs	r2, #8
 800ad2a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad2c:	4b0c      	ldr	r3, [pc, #48]	; (800ad60 <MX_TIM16_Init+0x44>)
 800ad2e:	2200      	movs	r2, #0
 800ad30:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50;
 800ad32:	4b0b      	ldr	r3, [pc, #44]	; (800ad60 <MX_TIM16_Init+0x44>)
 800ad34:	2232      	movs	r2, #50	; 0x32
 800ad36:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ad38:	4b09      	ldr	r3, [pc, #36]	; (800ad60 <MX_TIM16_Init+0x44>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800ad3e:	4b08      	ldr	r3, [pc, #32]	; (800ad60 <MX_TIM16_Init+0x44>)
 800ad40:	2200      	movs	r2, #0
 800ad42:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ad44:	4b06      	ldr	r3, [pc, #24]	; (800ad60 <MX_TIM16_Init+0x44>)
 800ad46:	2200      	movs	r2, #0
 800ad48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800ad4a:	4805      	ldr	r0, [pc, #20]	; (800ad60 <MX_TIM16_Init+0x44>)
 800ad4c:	f7f9 fe3c 	bl	80049c8 <HAL_TIM_Base_Init>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800ad56:	f7ff fce1 	bl	800a71c <Error_Handler>
  }

}
 800ad5a:	bf00      	nop
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	20001bc8 	.word	0x20001bc8
 800ad64:	40014400 	.word	0x40014400

0800ad68 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a19      	ldr	r2, [pc, #100]	; (800addc <HAL_TIM_PWM_MspInit+0x74>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d12b      	bne.n	800add2 <HAL_TIM_PWM_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800ad7a:	4a19      	ldr	r2, [pc, #100]	; (800ade0 <HAL_TIM_PWM_MspInit+0x78>)
 800ad7c:	4b18      	ldr	r3, [pc, #96]	; (800ade0 <HAL_TIM_PWM_MspInit+0x78>)
 800ad7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ad84:	6613      	str	r3, [r2, #96]	; 0x60
 800ad86:	4b16      	ldr	r3, [pc, #88]	; (800ade0 <HAL_TIM_PWM_MspInit+0x78>)
 800ad88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad8e:	60fb      	str	r3, [r7, #12]
 800ad90:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800ad92:	2200      	movs	r2, #0
 800ad94:	2100      	movs	r1, #0
 800ad96:	2018      	movs	r0, #24
 800ad98:	f7f6 fe67 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800ad9c:	2018      	movs	r0, #24
 800ad9e:	f7f6 fe80 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800ada2:	2200      	movs	r2, #0
 800ada4:	2100      	movs	r1, #0
 800ada6:	2019      	movs	r0, #25
 800ada8:	f7f6 fe5f 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800adac:	2019      	movs	r0, #25
 800adae:	f7f6 fe78 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800adb2:	2200      	movs	r2, #0
 800adb4:	2100      	movs	r1, #0
 800adb6:	201a      	movs	r0, #26
 800adb8:	f7f6 fe57 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800adbc:	201a      	movs	r0, #26
 800adbe:	f7f6 fe70 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800adc2:	2200      	movs	r2, #0
 800adc4:	2100      	movs	r1, #0
 800adc6:	201b      	movs	r0, #27
 800adc8:	f7f6 fe4f 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800adcc:	201b      	movs	r0, #27
 800adce:	f7f6 fe68 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800add2:	bf00      	nop
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	40012c00 	.word	0x40012c00
 800ade0:	40021000 	.word	0x40021000

0800ade4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b08c      	sub	sp, #48	; 0x30
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800adec:	f107 031c 	add.w	r3, r7, #28
 800adf0:	2200      	movs	r2, #0
 800adf2:	601a      	str	r2, [r3, #0]
 800adf4:	605a      	str	r2, [r3, #4]
 800adf6:	609a      	str	r2, [r3, #8]
 800adf8:	60da      	str	r2, [r3, #12]
 800adfa:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae04:	d131      	bne.n	800ae6a <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ae06:	4a35      	ldr	r2, [pc, #212]	; (800aedc <HAL_TIM_IC_MspInit+0xf8>)
 800ae08:	4b34      	ldr	r3, [pc, #208]	; (800aedc <HAL_TIM_IC_MspInit+0xf8>)
 800ae0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae0c:	f043 0301 	orr.w	r3, r3, #1
 800ae10:	6593      	str	r3, [r2, #88]	; 0x58
 800ae12:	4b32      	ldr	r3, [pc, #200]	; (800aedc <HAL_TIM_IC_MspInit+0xf8>)
 800ae14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae16:	f003 0301 	and.w	r3, r3, #1
 800ae1a:	61bb      	str	r3, [r7, #24]
 800ae1c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae1e:	4a2f      	ldr	r2, [pc, #188]	; (800aedc <HAL_TIM_IC_MspInit+0xf8>)
 800ae20:	4b2e      	ldr	r3, [pc, #184]	; (800aedc <HAL_TIM_IC_MspInit+0xf8>)
 800ae22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae24:	f043 0301 	orr.w	r3, r3, #1
 800ae28:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae2a:	4b2c      	ldr	r3, [pc, #176]	; (800aedc <HAL_TIM_IC_MspInit+0xf8>)
 800ae2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae2e:	f003 0301 	and.w	r3, r3, #1
 800ae32:	617b      	str	r3, [r7, #20]
 800ae34:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800ae36:	2303      	movs	r3, #3
 800ae38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae3a:	2302      	movs	r3, #2
 800ae3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae42:	2300      	movs	r3, #0
 800ae44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ae46:	2301      	movs	r3, #1
 800ae48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae4a:	f107 031c 	add.w	r3, r7, #28
 800ae4e:	4619      	mov	r1, r3
 800ae50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae54:	f7f6 fe40 	bl	8001ad8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800ae58:	2200      	movs	r2, #0
 800ae5a:	2100      	movs	r1, #0
 800ae5c:	201c      	movs	r0, #28
 800ae5e:	f7f6 fe04 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800ae62:	201c      	movs	r0, #28
 800ae64:	f7f6 fe1d 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800ae68:	e034      	b.n	800aed4 <HAL_TIM_IC_MspInit+0xf0>
  else if(tim_icHandle->Instance==TIM3)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a1c      	ldr	r2, [pc, #112]	; (800aee0 <HAL_TIM_IC_MspInit+0xfc>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d12f      	bne.n	800aed4 <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ae74:	4a19      	ldr	r2, [pc, #100]	; (800aedc <HAL_TIM_IC_MspInit+0xf8>)
 800ae76:	4b19      	ldr	r3, [pc, #100]	; (800aedc <HAL_TIM_IC_MspInit+0xf8>)
 800ae78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae7a:	f043 0302 	orr.w	r3, r3, #2
 800ae7e:	6593      	str	r3, [r2, #88]	; 0x58
 800ae80:	4b16      	ldr	r3, [pc, #88]	; (800aedc <HAL_TIM_IC_MspInit+0xf8>)
 800ae82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae84:	f003 0302 	and.w	r3, r3, #2
 800ae88:	613b      	str	r3, [r7, #16]
 800ae8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae8c:	4a13      	ldr	r2, [pc, #76]	; (800aedc <HAL_TIM_IC_MspInit+0xf8>)
 800ae8e:	4b13      	ldr	r3, [pc, #76]	; (800aedc <HAL_TIM_IC_MspInit+0xf8>)
 800ae90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae92:	f043 0302 	orr.w	r3, r3, #2
 800ae96:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae98:	4b10      	ldr	r3, [pc, #64]	; (800aedc <HAL_TIM_IC_MspInit+0xf8>)
 800ae9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae9c:	f003 0302 	and.w	r3, r3, #2
 800aea0:	60fb      	str	r3, [r7, #12]
 800aea2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800aea4:	2330      	movs	r3, #48	; 0x30
 800aea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aea8:	2302      	movs	r3, #2
 800aeaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aeac:	2300      	movs	r3, #0
 800aeae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aeb8:	f107 031c 	add.w	r3, r7, #28
 800aebc:	4619      	mov	r1, r3
 800aebe:	4809      	ldr	r0, [pc, #36]	; (800aee4 <HAL_TIM_IC_MspInit+0x100>)
 800aec0:	f7f6 fe0a 	bl	8001ad8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800aec4:	2200      	movs	r2, #0
 800aec6:	2100      	movs	r1, #0
 800aec8:	201d      	movs	r0, #29
 800aeca:	f7f6 fdce 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800aece:	201d      	movs	r0, #29
 800aed0:	f7f6 fde7 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
}
 800aed4:	bf00      	nop
 800aed6:	3730      	adds	r7, #48	; 0x30
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	40021000 	.word	0x40021000
 800aee0:	40000400 	.word	0x40000400
 800aee4:	48000400 	.word	0x48000400

0800aee8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a27      	ldr	r2, [pc, #156]	; (800af94 <HAL_TIM_Base_MspInit+0xac>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d114      	bne.n	800af24 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800aefa:	4a27      	ldr	r2, [pc, #156]	; (800af98 <HAL_TIM_Base_MspInit+0xb0>)
 800aefc:	4b26      	ldr	r3, [pc, #152]	; (800af98 <HAL_TIM_Base_MspInit+0xb0>)
 800aefe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af00:	f043 0310 	orr.w	r3, r3, #16
 800af04:	6593      	str	r3, [r2, #88]	; 0x58
 800af06:	4b24      	ldr	r3, [pc, #144]	; (800af98 <HAL_TIM_Base_MspInit+0xb0>)
 800af08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af0a:	f003 0310 	and.w	r3, r3, #16
 800af0e:	617b      	str	r3, [r7, #20]
 800af10:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800af12:	2200      	movs	r2, #0
 800af14:	2100      	movs	r1, #0
 800af16:	2036      	movs	r0, #54	; 0x36
 800af18:	f7f6 fda7 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800af1c:	2036      	movs	r0, #54	; 0x36
 800af1e:	f7f6 fdc0 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800af22:	e032      	b.n	800af8a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM15)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a1c      	ldr	r2, [pc, #112]	; (800af9c <HAL_TIM_Base_MspInit+0xb4>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d114      	bne.n	800af58 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800af2e:	4a1a      	ldr	r2, [pc, #104]	; (800af98 <HAL_TIM_Base_MspInit+0xb0>)
 800af30:	4b19      	ldr	r3, [pc, #100]	; (800af98 <HAL_TIM_Base_MspInit+0xb0>)
 800af32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af38:	6613      	str	r3, [r2, #96]	; 0x60
 800af3a:	4b17      	ldr	r3, [pc, #92]	; (800af98 <HAL_TIM_Base_MspInit+0xb0>)
 800af3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af42:	613b      	str	r3, [r7, #16]
 800af44:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800af46:	2200      	movs	r2, #0
 800af48:	2100      	movs	r1, #0
 800af4a:	2018      	movs	r0, #24
 800af4c:	f7f6 fd8d 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800af50:	2018      	movs	r0, #24
 800af52:	f7f6 fda6 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
}
 800af56:	e018      	b.n	800af8a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM16)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a10      	ldr	r2, [pc, #64]	; (800afa0 <HAL_TIM_Base_MspInit+0xb8>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d113      	bne.n	800af8a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800af62:	4a0d      	ldr	r2, [pc, #52]	; (800af98 <HAL_TIM_Base_MspInit+0xb0>)
 800af64:	4b0c      	ldr	r3, [pc, #48]	; (800af98 <HAL_TIM_Base_MspInit+0xb0>)
 800af66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af6c:	6613      	str	r3, [r2, #96]	; 0x60
 800af6e:	4b0a      	ldr	r3, [pc, #40]	; (800af98 <HAL_TIM_Base_MspInit+0xb0>)
 800af70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af76:	60fb      	str	r3, [r7, #12]
 800af78:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800af7a:	2200      	movs	r2, #0
 800af7c:	2100      	movs	r1, #0
 800af7e:	2019      	movs	r0, #25
 800af80:	f7f6 fd73 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800af84:	2019      	movs	r0, #25
 800af86:	f7f6 fd8c 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
}
 800af8a:	bf00      	nop
 800af8c:	3718      	adds	r7, #24
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	40001000 	.word	0x40001000
 800af98:	40021000 	.word	0x40021000
 800af9c:	40014000 	.word	0x40014000
 800afa0:	40014400 	.word	0x40014400

0800afa4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b08a      	sub	sp, #40	; 0x28
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afac:	f107 0314 	add.w	r3, r7, #20
 800afb0:	2200      	movs	r2, #0
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	605a      	str	r2, [r3, #4]
 800afb6:	609a      	str	r2, [r3, #8]
 800afb8:	60da      	str	r2, [r3, #12]
 800afba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a23      	ldr	r2, [pc, #140]	; (800b050 <HAL_TIM_MspPostInit+0xac>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d11e      	bne.n	800b004 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800afc6:	4a23      	ldr	r2, [pc, #140]	; (800b054 <HAL_TIM_MspPostInit+0xb0>)
 800afc8:	4b22      	ldr	r3, [pc, #136]	; (800b054 <HAL_TIM_MspPostInit+0xb0>)
 800afca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afcc:	f043 0301 	orr.w	r3, r3, #1
 800afd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800afd2:	4b20      	ldr	r3, [pc, #128]	; (800b054 <HAL_TIM_MspPostInit+0xb0>)
 800afd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afd6:	f003 0301 	and.w	r3, r3, #1
 800afda:	613b      	str	r3, [r7, #16]
 800afdc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = O_PWM_LED3_Pin;
 800afde:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afe4:	2302      	movs	r3, #2
 800afe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afe8:	2300      	movs	r3, #0
 800afea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afec:	2300      	movs	r3, #0
 800afee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800aff0:	2301      	movs	r3, #1
 800aff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(O_PWM_LED3_GPIO_Port, &GPIO_InitStruct);
 800aff4:	f107 0314 	add.w	r3, r7, #20
 800aff8:	4619      	mov	r1, r3
 800affa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800affe:	f7f6 fd6b 	bl	8001ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800b002:	e021      	b.n	800b048 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM15)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a13      	ldr	r2, [pc, #76]	; (800b058 <HAL_TIM_MspPostInit+0xb4>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d11c      	bne.n	800b048 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b00e:	4a11      	ldr	r2, [pc, #68]	; (800b054 <HAL_TIM_MspPostInit+0xb0>)
 800b010:	4b10      	ldr	r3, [pc, #64]	; (800b054 <HAL_TIM_MspPostInit+0xb0>)
 800b012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b014:	f043 0302 	orr.w	r3, r3, #2
 800b018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b01a:	4b0e      	ldr	r3, [pc, #56]	; (800b054 <HAL_TIM_MspPostInit+0xb0>)
 800b01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b01e:	f003 0302 	and.w	r3, r3, #2
 800b022:	60fb      	str	r3, [r7, #12]
 800b024:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = O_PWM_LED2_Pin|O_PWM_LED1_Pin;
 800b026:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800b02a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b02c:	2302      	movs	r3, #2
 800b02e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b030:	2300      	movs	r3, #0
 800b032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b034:	2300      	movs	r3, #0
 800b036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800b038:	230e      	movs	r3, #14
 800b03a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b03c:	f107 0314 	add.w	r3, r7, #20
 800b040:	4619      	mov	r1, r3
 800b042:	4806      	ldr	r0, [pc, #24]	; (800b05c <HAL_TIM_MspPostInit+0xb8>)
 800b044:	f7f6 fd48 	bl	8001ad8 <HAL_GPIO_Init>
}
 800b048:	bf00      	nop
 800b04a:	3728      	adds	r7, #40	; 0x28
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	40012c00 	.word	0x40012c00
 800b054:	40021000 	.word	0x40021000
 800b058:	40014000 	.word	0x40014000
 800b05c:	48000400 	.word	0x48000400

0800b060 <tim_setNewTimeAndStart>:
  /* USER CODE END TIM16_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void tim_setNewTimeAndStart(TIM_TypeDef *tim, uint32_t time){
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
	tim->CR1 &= ~TIM_CR1_CEN;	//Stop counter
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f023 0201 	bic.w	r2, r3, #1
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	601a      	str	r2, [r3, #0]
	tim->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f043 0202 	orr.w	r2, r3, #2
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	601a      	str	r2, [r3, #0]
	tim->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	f023 0201 	bic.w	r2, r3, #1
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	611a      	str	r2, [r3, #16]
	tim->ARR = time;				//Load new time
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	683a      	ldr	r2, [r7, #0]
 800b092:	62da      	str	r2, [r3, #44]	; 0x2c
	tim->EGR |= TIM_EGR_UG;		//Force reload of shadow register -> Start from beginning
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	695b      	ldr	r3, [r3, #20]
 800b098:	f043 0201 	orr.w	r2, r3, #1
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	615a      	str	r2, [r3, #20]
	tim->CR1 &= ~TIM_CR1_UDIS;	//Allow new updates to be triggered
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f023 0202 	bic.w	r2, r3, #2
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	601a      	str	r2, [r3, #0]
	tim->DIER |= TIM_DIER_UIE;	//Enable update interrupts
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	f043 0201 	orr.w	r2, r3, #1
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	60da      	str	r2, [r3, #12]
	tim->CR1 |= TIM_CR1_CEN;		//Enable counter
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f043 0201 	orr.w	r2, r3, #1
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	601a      	str	r2, [r3, #0]
}
 800b0c4:	bf00      	nop
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <tim_stop>:
void tim_stop(TIM_TypeDef *tim){
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
	tim->CR1 &= ~TIM_CR1_CEN;	//Stop counter
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f023 0201 	bic.w	r2, r3, #1
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	601a      	str	r2, [r3, #0]
	tim->CR1 |= TIM_CR1_UDIS; 	//Avoid that update can be triggered
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f043 0202 	orr.w	r2, r3, #2
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	601a      	str	r2, [r3, #0]
	tim->SR &= ~TIM_SR_UIF;		//Kill the last update flag
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	f023 0201 	bic.w	r2, r3, #1
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	611a      	str	r2, [r3, #16]
}
 800b0fc:	bf00      	nop
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b10c:	4b14      	ldr	r3, [pc, #80]	; (800b160 <MX_UART4_Init+0x58>)
 800b10e:	4a15      	ldr	r2, [pc, #84]	; (800b164 <MX_UART4_Init+0x5c>)
 800b110:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b112:	4b13      	ldr	r3, [pc, #76]	; (800b160 <MX_UART4_Init+0x58>)
 800b114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b118:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b11a:	4b11      	ldr	r3, [pc, #68]	; (800b160 <MX_UART4_Init+0x58>)
 800b11c:	2200      	movs	r2, #0
 800b11e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b120:	4b0f      	ldr	r3, [pc, #60]	; (800b160 <MX_UART4_Init+0x58>)
 800b122:	2200      	movs	r2, #0
 800b124:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b126:	4b0e      	ldr	r3, [pc, #56]	; (800b160 <MX_UART4_Init+0x58>)
 800b128:	2200      	movs	r2, #0
 800b12a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b12c:	4b0c      	ldr	r3, [pc, #48]	; (800b160 <MX_UART4_Init+0x58>)
 800b12e:	220c      	movs	r2, #12
 800b130:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b132:	4b0b      	ldr	r3, [pc, #44]	; (800b160 <MX_UART4_Init+0x58>)
 800b134:	2200      	movs	r2, #0
 800b136:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b138:	4b09      	ldr	r3, [pc, #36]	; (800b160 <MX_UART4_Init+0x58>)
 800b13a:	2200      	movs	r2, #0
 800b13c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b13e:	4b08      	ldr	r3, [pc, #32]	; (800b160 <MX_UART4_Init+0x58>)
 800b140:	2200      	movs	r2, #0
 800b142:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b144:	4b06      	ldr	r3, [pc, #24]	; (800b160 <MX_UART4_Init+0x58>)
 800b146:	2200      	movs	r2, #0
 800b148:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b14a:	4805      	ldr	r0, [pc, #20]	; (800b160 <MX_UART4_Init+0x58>)
 800b14c:	f7fa fe08 	bl	8005d60 <HAL_UART_Init>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d001      	beq.n	800b15a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800b156:	f7ff fae1 	bl	800a71c <Error_Handler>
  }

}
 800b15a:	bf00      	nop
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	20001c80 	.word	0x20001c80
 800b164:	40004c00 	.word	0x40004c00

0800b168 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800b16c:	4b14      	ldr	r3, [pc, #80]	; (800b1c0 <MX_USART1_UART_Init+0x58>)
 800b16e:	4a15      	ldr	r2, [pc, #84]	; (800b1c4 <MX_USART1_UART_Init+0x5c>)
 800b170:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 800b172:	4b13      	ldr	r3, [pc, #76]	; (800b1c0 <MX_USART1_UART_Init+0x58>)
 800b174:	4a14      	ldr	r2, [pc, #80]	; (800b1c8 <MX_USART1_UART_Init+0x60>)
 800b176:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b178:	4b11      	ldr	r3, [pc, #68]	; (800b1c0 <MX_USART1_UART_Init+0x58>)
 800b17a:	2200      	movs	r2, #0
 800b17c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 800b17e:	4b10      	ldr	r3, [pc, #64]	; (800b1c0 <MX_USART1_UART_Init+0x58>)
 800b180:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b184:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b186:	4b0e      	ldr	r3, [pc, #56]	; (800b1c0 <MX_USART1_UART_Init+0x58>)
 800b188:	2200      	movs	r2, #0
 800b18a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b18c:	4b0c      	ldr	r3, [pc, #48]	; (800b1c0 <MX_USART1_UART_Init+0x58>)
 800b18e:	220c      	movs	r2, #12
 800b190:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b192:	4b0b      	ldr	r3, [pc, #44]	; (800b1c0 <MX_USART1_UART_Init+0x58>)
 800b194:	2200      	movs	r2, #0
 800b196:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b198:	4b09      	ldr	r3, [pc, #36]	; (800b1c0 <MX_USART1_UART_Init+0x58>)
 800b19a:	2200      	movs	r2, #0
 800b19c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b19e:	4b08      	ldr	r3, [pc, #32]	; (800b1c0 <MX_USART1_UART_Init+0x58>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b1a4:	4b06      	ldr	r3, [pc, #24]	; (800b1c0 <MX_USART1_UART_Init+0x58>)
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b1aa:	4805      	ldr	r0, [pc, #20]	; (800b1c0 <MX_USART1_UART_Init+0x58>)
 800b1ac:	f7fa fdd8 	bl	8005d60 <HAL_UART_Init>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d001      	beq.n	800b1ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800b1b6:	f7ff fab1 	bl	800a71c <Error_Handler>
  }

}
 800b1ba:	bf00      	nop
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	20001c08 	.word	0x20001c08
 800b1c4:	40013800 	.word	0x40013800
 800b1c8:	0003d090 	.word	0x0003d090

0800b1cc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800b1d0:	4b14      	ldr	r3, [pc, #80]	; (800b224 <MX_USART2_UART_Init+0x58>)
 800b1d2:	4a15      	ldr	r2, [pc, #84]	; (800b228 <MX_USART2_UART_Init+0x5c>)
 800b1d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 800b1d6:	4b13      	ldr	r3, [pc, #76]	; (800b224 <MX_USART2_UART_Init+0x58>)
 800b1d8:	4a14      	ldr	r2, [pc, #80]	; (800b22c <MX_USART2_UART_Init+0x60>)
 800b1da:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b1dc:	4b11      	ldr	r3, [pc, #68]	; (800b224 <MX_USART2_UART_Init+0x58>)
 800b1de:	2200      	movs	r2, #0
 800b1e0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800b1e2:	4b10      	ldr	r3, [pc, #64]	; (800b224 <MX_USART2_UART_Init+0x58>)
 800b1e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b1e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b1ea:	4b0e      	ldr	r3, [pc, #56]	; (800b224 <MX_USART2_UART_Init+0x58>)
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b1f0:	4b0c      	ldr	r3, [pc, #48]	; (800b224 <MX_USART2_UART_Init+0x58>)
 800b1f2:	220c      	movs	r2, #12
 800b1f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b1f6:	4b0b      	ldr	r3, [pc, #44]	; (800b224 <MX_USART2_UART_Init+0x58>)
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b1fc:	4b09      	ldr	r3, [pc, #36]	; (800b224 <MX_USART2_UART_Init+0x58>)
 800b1fe:	2200      	movs	r2, #0
 800b200:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b202:	4b08      	ldr	r3, [pc, #32]	; (800b224 <MX_USART2_UART_Init+0x58>)
 800b204:	2200      	movs	r2, #0
 800b206:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b208:	4b06      	ldr	r3, [pc, #24]	; (800b224 <MX_USART2_UART_Init+0x58>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b20e:	4805      	ldr	r0, [pc, #20]	; (800b224 <MX_USART2_UART_Init+0x58>)
 800b210:	f7fa fda6 	bl	8005d60 <HAL_UART_Init>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d001      	beq.n	800b21e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800b21a:	f7ff fa7f 	bl	800a71c <Error_Handler>
  }

}
 800b21e:	bf00      	nop
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	20001cf8 	.word	0x20001cf8
 800b228:	40004400 	.word	0x40004400
 800b22c:	0003d090 	.word	0x0003d090

0800b230 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b08e      	sub	sp, #56	; 0x38
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b23c:	2200      	movs	r2, #0
 800b23e:	601a      	str	r2, [r3, #0]
 800b240:	605a      	str	r2, [r3, #4]
 800b242:	609a      	str	r2, [r3, #8]
 800b244:	60da      	str	r2, [r3, #12]
 800b246:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a52      	ldr	r2, [pc, #328]	; (800b398 <HAL_UART_MspInit+0x168>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d131      	bne.n	800b2b6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b252:	4a52      	ldr	r2, [pc, #328]	; (800b39c <HAL_UART_MspInit+0x16c>)
 800b254:	4b51      	ldr	r3, [pc, #324]	; (800b39c <HAL_UART_MspInit+0x16c>)
 800b256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b258:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b25c:	6593      	str	r3, [r2, #88]	; 0x58
 800b25e:	4b4f      	ldr	r3, [pc, #316]	; (800b39c <HAL_UART_MspInit+0x16c>)
 800b260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b262:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b266:	623b      	str	r3, [r7, #32]
 800b268:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b26a:	4a4c      	ldr	r2, [pc, #304]	; (800b39c <HAL_UART_MspInit+0x16c>)
 800b26c:	4b4b      	ldr	r3, [pc, #300]	; (800b39c <HAL_UART_MspInit+0x16c>)
 800b26e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b270:	f043 0304 	orr.w	r3, r3, #4
 800b274:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b276:	4b49      	ldr	r3, [pc, #292]	; (800b39c <HAL_UART_MspInit+0x16c>)
 800b278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b27a:	f003 0304 	and.w	r3, r3, #4
 800b27e:	61fb      	str	r3, [r7, #28]
 800b280:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b282:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b288:	2302      	movs	r3, #2
 800b28a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b28c:	2300      	movs	r3, #0
 800b28e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b290:	2303      	movs	r3, #3
 800b292:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b294:	2308      	movs	r3, #8
 800b296:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b29c:	4619      	mov	r1, r3
 800b29e:	4840      	ldr	r0, [pc, #256]	; (800b3a0 <HAL_UART_MspInit+0x170>)
 800b2a0:	f7f6 fc1a 	bl	8001ad8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	2034      	movs	r0, #52	; 0x34
 800b2aa:	f7f6 fbde 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b2ae:	2034      	movs	r0, #52	; 0x34
 800b2b0:	f7f6 fbf7 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800b2b4:	e06b      	b.n	800b38e <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART1)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a3a      	ldr	r2, [pc, #232]	; (800b3a4 <HAL_UART_MspInit+0x174>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d130      	bne.n	800b322 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 800b2c0:	4a36      	ldr	r2, [pc, #216]	; (800b39c <HAL_UART_MspInit+0x16c>)
 800b2c2:	4b36      	ldr	r3, [pc, #216]	; (800b39c <HAL_UART_MspInit+0x16c>)
 800b2c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b2ca:	6613      	str	r3, [r2, #96]	; 0x60
 800b2cc:	4b33      	ldr	r3, [pc, #204]	; (800b39c <HAL_UART_MspInit+0x16c>)
 800b2ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2d4:	61bb      	str	r3, [r7, #24]
 800b2d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b2d8:	4a30      	ldr	r2, [pc, #192]	; (800b39c <HAL_UART_MspInit+0x16c>)
 800b2da:	4b30      	ldr	r3, [pc, #192]	; (800b39c <HAL_UART_MspInit+0x16c>)
 800b2dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2de:	f043 0302 	orr.w	r3, r3, #2
 800b2e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b2e4:	4b2d      	ldr	r3, [pc, #180]	; (800b39c <HAL_UART_MspInit+0x16c>)
 800b2e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2e8:	f003 0302 	and.w	r3, r3, #2
 800b2ec:	617b      	str	r3, [r7, #20]
 800b2ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b2f0:	23c0      	movs	r3, #192	; 0xc0
 800b2f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2f4:	2302      	movs	r3, #2
 800b2f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2fc:	2303      	movs	r3, #3
 800b2fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b300:	2307      	movs	r3, #7
 800b302:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b308:	4619      	mov	r1, r3
 800b30a:	4827      	ldr	r0, [pc, #156]	; (800b3a8 <HAL_UART_MspInit+0x178>)
 800b30c:	f7f6 fbe4 	bl	8001ad8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800b310:	2200      	movs	r2, #0
 800b312:	2101      	movs	r1, #1
 800b314:	2025      	movs	r0, #37	; 0x25
 800b316:	f7f6 fba8 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b31a:	2025      	movs	r0, #37	; 0x25
 800b31c:	f7f6 fbc1 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
}
 800b320:	e035      	b.n	800b38e <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART2)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a21      	ldr	r2, [pc, #132]	; (800b3ac <HAL_UART_MspInit+0x17c>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d130      	bne.n	800b38e <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800b32c:	4a1b      	ldr	r2, [pc, #108]	; (800b39c <HAL_UART_MspInit+0x16c>)
 800b32e:	4b1b      	ldr	r3, [pc, #108]	; (800b39c <HAL_UART_MspInit+0x16c>)
 800b330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b336:	6593      	str	r3, [r2, #88]	; 0x58
 800b338:	4b18      	ldr	r3, [pc, #96]	; (800b39c <HAL_UART_MspInit+0x16c>)
 800b33a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b33c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b340:	613b      	str	r3, [r7, #16]
 800b342:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b344:	4a15      	ldr	r2, [pc, #84]	; (800b39c <HAL_UART_MspInit+0x16c>)
 800b346:	4b15      	ldr	r3, [pc, #84]	; (800b39c <HAL_UART_MspInit+0x16c>)
 800b348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b34a:	f043 0301 	orr.w	r3, r3, #1
 800b34e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b350:	4b12      	ldr	r3, [pc, #72]	; (800b39c <HAL_UART_MspInit+0x16c>)
 800b352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b354:	f003 0301 	and.w	r3, r3, #1
 800b358:	60fb      	str	r3, [r7, #12]
 800b35a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800b35c:	230c      	movs	r3, #12
 800b35e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b360:	2302      	movs	r3, #2
 800b362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b364:	2300      	movs	r3, #0
 800b366:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b368:	2303      	movs	r3, #3
 800b36a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b36c:	2307      	movs	r3, #7
 800b36e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b374:	4619      	mov	r1, r3
 800b376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b37a:	f7f6 fbad 	bl	8001ad8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800b37e:	2200      	movs	r2, #0
 800b380:	2100      	movs	r1, #0
 800b382:	2026      	movs	r0, #38	; 0x26
 800b384:	f7f6 fb71 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800b388:	2026      	movs	r0, #38	; 0x26
 800b38a:	f7f6 fb8a 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
}
 800b38e:	bf00      	nop
 800b390:	3738      	adds	r7, #56	; 0x38
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	40004c00 	.word	0x40004c00
 800b39c:	40021000 	.word	0x40021000
 800b3a0:	48000800 	.word	0x48000800
 800b3a4:	40013800 	.word	0x40013800
 800b3a8:	48000400 	.word	0x48000400
 800b3ac:	40004400 	.word	0x40004400

0800b3b0 <uart_enableReceiveInt>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void uart_enableReceiveInt(USART_TypeDef *uartHandler){
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
	uartHandler->CR1 |= USART_CR1_RXNEIE;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f043 0220 	orr.w	r2, r3, #32
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	601a      	str	r2, [r3, #0]
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	490b      	ldr	r1, [pc, #44]	; (800b404 <MX_USB_DEVICE_Init+0x34>)
 800b3d8:	480b      	ldr	r0, [pc, #44]	; (800b408 <MX_USB_DEVICE_Init+0x38>)
 800b3da:	f7fd fe66 	bl	80090aa <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 800b3de:	490b      	ldr	r1, [pc, #44]	; (800b40c <MX_USB_DEVICE_Init+0x3c>)
 800b3e0:	4809      	ldr	r0, [pc, #36]	; (800b408 <MX_USB_DEVICE_Init+0x38>)
 800b3e2:	f7fd fe8d 	bl	8009100 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800b3e6:	490a      	ldr	r1, [pc, #40]	; (800b410 <MX_USB_DEVICE_Init+0x40>)
 800b3e8:	4807      	ldr	r0, [pc, #28]	; (800b408 <MX_USB_DEVICE_Init+0x38>)
 800b3ea:	f7fd fdef 	bl	8008fcc <USBD_CDC_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 800b3ee:	4806      	ldr	r0, [pc, #24]	; (800b408 <MX_USB_DEVICE_Init+0x38>)
 800b3f0:	f000 fc2c 	bl	800bc4c <USBD_LL_BatteryCharging>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d002      	beq.n	800b400 <MX_USB_DEVICE_Init+0x30>
  USBD_Start(&hUsbDeviceFS);
 800b3fa:	4803      	ldr	r0, [pc, #12]	; (800b408 <MX_USB_DEVICE_Init+0x38>)
 800b3fc:	f7fd fe9a 	bl	8009134 <USBD_Start>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b400:	bf00      	nop
 800b402:	bd80      	pop	{r7, pc}
 800b404:	20000904 	.word	0x20000904
 800b408:	20001d70 	.word	0x20001d70
 800b40c:	200007ec 	.word	0x200007ec
 800b410:	200008f4 	.word	0x200008f4

0800b414 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b418:	2200      	movs	r2, #0
 800b41a:	4905      	ldr	r1, [pc, #20]	; (800b430 <CDC_Init_FS+0x1c>)
 800b41c:	4805      	ldr	r0, [pc, #20]	; (800b434 <CDC_Init_FS+0x20>)
 800b41e:	f7fd fdec 	bl	8008ffa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b422:	4905      	ldr	r1, [pc, #20]	; (800b438 <CDC_Init_FS+0x24>)
 800b424:	4803      	ldr	r0, [pc, #12]	; (800b434 <CDC_Init_FS+0x20>)
 800b426:	f7fd fe02 	bl	800902e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b42a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	2000280c 	.word	0x2000280c
 800b434:	20001d70 	.word	0x20001d70
 800b438:	2000200c 	.word	0x2000200c

0800b43c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b43c:	b480      	push	{r7}
 800b43e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b440:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b442:	4618      	mov	r0, r3
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	4603      	mov	r3, r0
 800b454:	6039      	str	r1, [r7, #0]
 800b456:	71fb      	strb	r3, [r7, #7]
 800b458:	4613      	mov	r3, r2
 800b45a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b45c:	79fb      	ldrb	r3, [r7, #7]
 800b45e:	2b23      	cmp	r3, #35	; 0x23
 800b460:	d84a      	bhi.n	800b4f8 <CDC_Control_FS+0xac>
 800b462:	a201      	add	r2, pc, #4	; (adr r2, 800b468 <CDC_Control_FS+0x1c>)
 800b464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b468:	0800b4f9 	.word	0x0800b4f9
 800b46c:	0800b4f9 	.word	0x0800b4f9
 800b470:	0800b4f9 	.word	0x0800b4f9
 800b474:	0800b4f9 	.word	0x0800b4f9
 800b478:	0800b4f9 	.word	0x0800b4f9
 800b47c:	0800b4f9 	.word	0x0800b4f9
 800b480:	0800b4f9 	.word	0x0800b4f9
 800b484:	0800b4f9 	.word	0x0800b4f9
 800b488:	0800b4f9 	.word	0x0800b4f9
 800b48c:	0800b4f9 	.word	0x0800b4f9
 800b490:	0800b4f9 	.word	0x0800b4f9
 800b494:	0800b4f9 	.word	0x0800b4f9
 800b498:	0800b4f9 	.word	0x0800b4f9
 800b49c:	0800b4f9 	.word	0x0800b4f9
 800b4a0:	0800b4f9 	.word	0x0800b4f9
 800b4a4:	0800b4f9 	.word	0x0800b4f9
 800b4a8:	0800b4f9 	.word	0x0800b4f9
 800b4ac:	0800b4f9 	.word	0x0800b4f9
 800b4b0:	0800b4f9 	.word	0x0800b4f9
 800b4b4:	0800b4f9 	.word	0x0800b4f9
 800b4b8:	0800b4f9 	.word	0x0800b4f9
 800b4bc:	0800b4f9 	.word	0x0800b4f9
 800b4c0:	0800b4f9 	.word	0x0800b4f9
 800b4c4:	0800b4f9 	.word	0x0800b4f9
 800b4c8:	0800b4f9 	.word	0x0800b4f9
 800b4cc:	0800b4f9 	.word	0x0800b4f9
 800b4d0:	0800b4f9 	.word	0x0800b4f9
 800b4d4:	0800b4f9 	.word	0x0800b4f9
 800b4d8:	0800b4f9 	.word	0x0800b4f9
 800b4dc:	0800b4f9 	.word	0x0800b4f9
 800b4e0:	0800b4f9 	.word	0x0800b4f9
 800b4e4:	0800b4f9 	.word	0x0800b4f9
 800b4e8:	0800b4f9 	.word	0x0800b4f9
 800b4ec:	0800b4f9 	.word	0x0800b4f9
 800b4f0:	0800b4f9 	.word	0x0800b4f9
 800b4f4:	0800b4f9 	.word	0x0800b4f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b4f8:	bf00      	nop
  }

  return (USBD_OK);
 800b4fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b512:	6879      	ldr	r1, [r7, #4]
 800b514:	4805      	ldr	r0, [pc, #20]	; (800b52c <CDC_Receive_FS+0x24>)
 800b516:	f7fd fd8a 	bl	800902e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b51a:	4804      	ldr	r0, [pc, #16]	; (800b52c <CDC_Receive_FS+0x24>)
 800b51c:	f7fd fd9b 	bl	8009056 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b520:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b522:	4618      	mov	r0, r3
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	20001d70 	.word	0x20001d70

0800b530 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b088      	sub	sp, #32
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a16      	ldr	r2, [pc, #88]	; (800b598 <HAL_PCD_MspInit+0x68>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d125      	bne.n	800b58e <HAL_PCD_MspInit+0x5e>
  
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b542:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b546:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b548:	2302      	movs	r3, #2
 800b54a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b54c:	2300      	movs	r3, #0
 800b54e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b550:	2303      	movs	r3, #3
 800b552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800b554:	230a      	movs	r3, #10
 800b556:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b558:	f107 030c 	add.w	r3, r7, #12
 800b55c:	4619      	mov	r1, r3
 800b55e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b562:	f7f6 fab9 	bl	8001ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b566:	4a0d      	ldr	r2, [pc, #52]	; (800b59c <HAL_PCD_MspInit+0x6c>)
 800b568:	4b0c      	ldr	r3, [pc, #48]	; (800b59c <HAL_PCD_MspInit+0x6c>)
 800b56a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b56c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b570:	6593      	str	r3, [r2, #88]	; 0x58
 800b572:	4b0a      	ldr	r3, [pc, #40]	; (800b59c <HAL_PCD_MspInit+0x6c>)
 800b574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b576:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b57a:	60bb      	str	r3, [r7, #8]
 800b57c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b57e:	2200      	movs	r2, #0
 800b580:	2100      	movs	r1, #0
 800b582:	2043      	movs	r0, #67	; 0x43
 800b584:	f7f6 fa71 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b588:	2043      	movs	r0, #67	; 0x43
 800b58a:	f7f6 fa8a 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b58e:	bf00      	nop
 800b590:	3720      	adds	r7, #32
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	40006800 	.word	0x40006800
 800b59c:	40021000 	.word	0x40021000

0800b5a0 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 2470 	ldr.w	r2, [r3, #1136]	; 0x470
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	4610      	mov	r0, r2
 800b5b8:	f7fd fe05 	bl	80091c6 <USBD_LL_SetupStage>
}
 800b5bc:	bf00      	nop
 800b5be:	3708      	adds	r7, #8
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 0470 	ldr.w	r0, [r3, #1136]	; 0x470
 800b5d6:	78fb      	ldrb	r3, [r7, #3]
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	015b      	lsls	r3, r3, #5
 800b5dc:	4413      	add	r3, r2
 800b5de:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	78fb      	ldrb	r3, [r7, #3]
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	f7fd fe38 	bl	800925c <USBD_LL_DataOutStage>
}
 800b5ec:	bf00      	nop
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 0470 	ldr.w	r0, [r3, #1136]	; 0x470
 800b606:	78fb      	ldrb	r3, [r7, #3]
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	015b      	lsls	r3, r3, #5
 800b60c:	4413      	add	r3, r2
 800b60e:	333c      	adds	r3, #60	; 0x3c
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	78fb      	ldrb	r3, [r7, #3]
 800b614:	4619      	mov	r1, r3
 800b616:	f7fd fe8e 	bl	8009336 <USBD_LL_DataInStage>
}
 800b61a:	bf00      	nop
 800b61c:	3708      	adds	r7, #8
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b082      	sub	sp, #8
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b630:	4618      	mov	r0, r3
 800b632:	f7fd ff9c 	bl	800956e <USBD_LL_SOF>
}
 800b636:	bf00      	nop
 800b638:	3708      	adds	r7, #8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800b63e:	b580      	push	{r7, lr}
 800b640:	b084      	sub	sp, #16
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b646:	2301      	movs	r3, #1
 800b648:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	689b      	ldr	r3, [r3, #8]
 800b64e:	2b02      	cmp	r3, #2
 800b650:	d102      	bne.n	800b658 <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800b652:	2301      	movs	r3, #1
 800b654:	73fb      	strb	r3, [r7, #15]
    break;
 800b656:	e002      	b.n	800b65e <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;
 800b658:	2301      	movs	r3, #1
 800b65a:	73fb      	strb	r3, [r7, #15]
    break;    
 800b65c:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b664:	7bfa      	ldrb	r2, [r7, #15]
 800b666:	4611      	mov	r1, r2
 800b668:	4618      	mov	r0, r3
 800b66a:	f7fd ff4a 	bl	8009502 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b674:	4618      	mov	r0, r3
 800b676:	f7fd ff03 	bl	8009480 <USBD_LL_Reset>
}
 800b67a:	bf00      	nop
 800b67c:	3710      	adds	r7, #16
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
	...

0800b684 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b692:	4618      	mov	r0, r3
 800b694:	f7fd ff45 	bl	8009522 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	699b      	ldr	r3, [r3, #24]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d005      	beq.n	800b6ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b6a0:	4a04      	ldr	r2, [pc, #16]	; (800b6b4 <HAL_PCD_SuspendCallback+0x30>)
 800b6a2:	4b04      	ldr	r3, [pc, #16]	; (800b6b4 <HAL_PCD_SuspendCallback+0x30>)
 800b6a4:	691b      	ldr	r3, [r3, #16]
 800b6a6:	f043 0306 	orr.w	r3, r3, #6
 800b6aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b6ac:	bf00      	nop
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	e000ed00 	.word	0xe000ed00

0800b6b8 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	699b      	ldr	r3, [r3, #24]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d007      	beq.n	800b6d8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b6c8:	4a08      	ldr	r2, [pc, #32]	; (800b6ec <HAL_PCD_ResumeCallback+0x34>)
 800b6ca:	4b08      	ldr	r3, [pc, #32]	; (800b6ec <HAL_PCD_ResumeCallback+0x34>)
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	f023 0306 	bic.w	r3, r3, #6
 800b6d2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b6d4:	f000 fab4 	bl	800bc40 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7fd ff34 	bl	800954c <USBD_LL_Resume>
}
 800b6e4:	bf00      	nop
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	e000ed00 	.word	0xe000ed00

0800b6f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800b6f8:	f7f8 f844 	bl	8003784 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b6fc:	4a2c      	ldr	r2, [pc, #176]	; (800b7b0 <USBD_LL_Init+0xc0>)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
  pdev->pData = &hpcd_USB_FS;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	4a2a      	ldr	r2, [pc, #168]	; (800b7b0 <USBD_LL_Init+0xc0>)
 800b708:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800b70c:	4b28      	ldr	r3, [pc, #160]	; (800b7b0 <USBD_LL_Init+0xc0>)
 800b70e:	4a29      	ldr	r2, [pc, #164]	; (800b7b4 <USBD_LL_Init+0xc4>)
 800b710:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b712:	4b27      	ldr	r3, [pc, #156]	; (800b7b0 <USBD_LL_Init+0xc0>)
 800b714:	2208      	movs	r2, #8
 800b716:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b718:	4b25      	ldr	r3, [pc, #148]	; (800b7b0 <USBD_LL_Init+0xc0>)
 800b71a:	2202      	movs	r2, #2
 800b71c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800b71e:	4b24      	ldr	r3, [pc, #144]	; (800b7b0 <USBD_LL_Init+0xc0>)
 800b720:	2200      	movs	r2, #0
 800b722:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b724:	4b22      	ldr	r3, [pc, #136]	; (800b7b0 <USBD_LL_Init+0xc0>)
 800b726:	2202      	movs	r2, #2
 800b728:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b72a:	4b21      	ldr	r3, [pc, #132]	; (800b7b0 <USBD_LL_Init+0xc0>)
 800b72c:	2200      	movs	r2, #0
 800b72e:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b730:	4b1f      	ldr	r3, [pc, #124]	; (800b7b0 <USBD_LL_Init+0xc0>)
 800b732:	2200      	movs	r2, #0
 800b734:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b736:	4b1e      	ldr	r3, [pc, #120]	; (800b7b0 <USBD_LL_Init+0xc0>)
 800b738:	2200      	movs	r2, #0
 800b73a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b73c:	4b1c      	ldr	r3, [pc, #112]	; (800b7b0 <USBD_LL_Init+0xc0>)
 800b73e:	2200      	movs	r2, #0
 800b740:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b742:	481b      	ldr	r0, [pc, #108]	; (800b7b0 <USBD_LL_Init+0xc0>)
 800b744:	f7f7 f869 	bl	800281a <HAL_PCD_Init>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d001      	beq.n	800b752 <USBD_LL_Init+0x62>
  {
    Error_Handler( );
 800b74e:	f7fe ffe5 	bl	800a71c <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b758:	2318      	movs	r3, #24
 800b75a:	2200      	movs	r2, #0
 800b75c:	2100      	movs	r1, #0
 800b75e:	f7f7 ff1f 	bl	80035a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b768:	2358      	movs	r3, #88	; 0x58
 800b76a:	2200      	movs	r2, #0
 800b76c:	2180      	movs	r1, #128	; 0x80
 800b76e:	f7f7 ff17 	bl	80035a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b778:	23c0      	movs	r3, #192	; 0xc0
 800b77a:	2200      	movs	r2, #0
 800b77c:	2181      	movs	r1, #129	; 0x81
 800b77e:	f7f7 ff0f 	bl	80035a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b788:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b78c:	2200      	movs	r2, #0
 800b78e:	2101      	movs	r1, #1
 800b790:	f7f7 ff06 	bl	80035a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b79a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b79e:	2200      	movs	r2, #0
 800b7a0:	2182      	movs	r1, #130	; 0x82
 800b7a2:	f7f7 fefd 	bl	80035a0 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	2000300c 	.word	0x2000300c
 800b7b4:	40006800 	.word	0x40006800

0800b7b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7f7 f8fc 	bl	80029cc <HAL_PCD_Start>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800b7d8:	7bbb      	ldrb	r3, [r7, #14]
 800b7da:	2b03      	cmp	r3, #3
 800b7dc:	d816      	bhi.n	800b80c <USBD_LL_Start+0x54>
 800b7de:	a201      	add	r2, pc, #4	; (adr r2, 800b7e4 <USBD_LL_Start+0x2c>)
 800b7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e4:	0800b7f5 	.word	0x0800b7f5
 800b7e8:	0800b7fb 	.word	0x0800b7fb
 800b7ec:	0800b801 	.word	0x0800b801
 800b7f0:	0800b807 	.word	0x0800b807
    case HAL_OK :
      usb_status = USBD_OK;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b7f8:	e00b      	b.n	800b812 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b7fa:	2302      	movs	r3, #2
 800b7fc:	73fb      	strb	r3, [r7, #15]
    break;
 800b7fe:	e008      	b.n	800b812 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b800:	2301      	movs	r3, #1
 800b802:	73fb      	strb	r3, [r7, #15]
    break;
 800b804:	e005      	b.n	800b812 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b806:	2302      	movs	r3, #2
 800b808:	73fb      	strb	r3, [r7, #15]
    break;
 800b80a:	e002      	b.n	800b812 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b80c:	2302      	movs	r3, #2
 800b80e:	73fb      	strb	r3, [r7, #15]
    break;
 800b810:	bf00      	nop
  }
  return usb_status;
 800b812:	7bfb      	ldrb	r3, [r7, #15]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	4608      	mov	r0, r1
 800b826:	4611      	mov	r1, r2
 800b828:	461a      	mov	r2, r3
 800b82a:	4603      	mov	r3, r0
 800b82c:	70fb      	strb	r3, [r7, #3]
 800b82e:	460b      	mov	r3, r1
 800b830:	70bb      	strb	r3, [r7, #2]
 800b832:	4613      	mov	r3, r2
 800b834:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b836:	2300      	movs	r3, #0
 800b838:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b83a:	2300      	movs	r3, #0
 800b83c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b844:	78bb      	ldrb	r3, [r7, #2]
 800b846:	883a      	ldrh	r2, [r7, #0]
 800b848:	78f9      	ldrb	r1, [r7, #3]
 800b84a:	f7f7 fa5f 	bl	8002d0c <HAL_PCD_EP_Open>
 800b84e:	4603      	mov	r3, r0
 800b850:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b852:	7bbb      	ldrb	r3, [r7, #14]
 800b854:	2b03      	cmp	r3, #3
 800b856:	d817      	bhi.n	800b888 <USBD_LL_OpenEP+0x6c>
 800b858:	a201      	add	r2, pc, #4	; (adr r2, 800b860 <USBD_LL_OpenEP+0x44>)
 800b85a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b85e:	bf00      	nop
 800b860:	0800b871 	.word	0x0800b871
 800b864:	0800b877 	.word	0x0800b877
 800b868:	0800b87d 	.word	0x0800b87d
 800b86c:	0800b883 	.word	0x0800b883
    case HAL_OK :
      usb_status = USBD_OK;
 800b870:	2300      	movs	r3, #0
 800b872:	73fb      	strb	r3, [r7, #15]
    break;
 800b874:	e00b      	b.n	800b88e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b876:	2302      	movs	r3, #2
 800b878:	73fb      	strb	r3, [r7, #15]
    break;
 800b87a:	e008      	b.n	800b88e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b87c:	2301      	movs	r3, #1
 800b87e:	73fb      	strb	r3, [r7, #15]
    break;
 800b880:	e005      	b.n	800b88e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b882:	2302      	movs	r3, #2
 800b884:	73fb      	strb	r3, [r7, #15]
    break;
 800b886:	e002      	b.n	800b88e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b888:	2302      	movs	r3, #2
 800b88a:	73fb      	strb	r3, [r7, #15]
    break;
 800b88c:	bf00      	nop
  }
  return usb_status;
 800b88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b890:	4618      	mov	r0, r3
 800b892:	3710      	adds	r7, #16
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b8b2:	78fa      	ldrb	r2, [r7, #3]
 800b8b4:	4611      	mov	r1, r2
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7f7 fa88 	bl	8002dcc <HAL_PCD_EP_Close>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800b8c0:	7bbb      	ldrb	r3, [r7, #14]
 800b8c2:	2b03      	cmp	r3, #3
 800b8c4:	d816      	bhi.n	800b8f4 <USBD_LL_CloseEP+0x5c>
 800b8c6:	a201      	add	r2, pc, #4	; (adr r2, 800b8cc <USBD_LL_CloseEP+0x34>)
 800b8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8cc:	0800b8dd 	.word	0x0800b8dd
 800b8d0:	0800b8e3 	.word	0x0800b8e3
 800b8d4:	0800b8e9 	.word	0x0800b8e9
 800b8d8:	0800b8ef 	.word	0x0800b8ef
    case HAL_OK :
      usb_status = USBD_OK;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	73fb      	strb	r3, [r7, #15]
    break;
 800b8e0:	e00b      	b.n	800b8fa <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b8e2:	2302      	movs	r3, #2
 800b8e4:	73fb      	strb	r3, [r7, #15]
    break;
 800b8e6:	e008      	b.n	800b8fa <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ec:	e005      	b.n	800b8fa <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b8ee:	2302      	movs	r3, #2
 800b8f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b8f2:	e002      	b.n	800b8fa <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b8f4:	2302      	movs	r3, #2
 800b8f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b8f8:	bf00      	nop
  }
  return usb_status;  
 800b8fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3710      	adds	r7, #16
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	460b      	mov	r3, r1
 800b90e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b910:	2300      	movs	r3, #0
 800b912:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b914:	2300      	movs	r3, #0
 800b916:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b91e:	78fa      	ldrb	r2, [r7, #3]
 800b920:	4611      	mov	r1, r2
 800b922:	4618      	mov	r0, r3
 800b924:	f7f7 fb1d 	bl	8002f62 <HAL_PCD_EP_SetStall>
 800b928:	4603      	mov	r3, r0
 800b92a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b92c:	7bbb      	ldrb	r3, [r7, #14]
 800b92e:	2b03      	cmp	r3, #3
 800b930:	d816      	bhi.n	800b960 <USBD_LL_StallEP+0x5c>
 800b932:	a201      	add	r2, pc, #4	; (adr r2, 800b938 <USBD_LL_StallEP+0x34>)
 800b934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b938:	0800b949 	.word	0x0800b949
 800b93c:	0800b94f 	.word	0x0800b94f
 800b940:	0800b955 	.word	0x0800b955
 800b944:	0800b95b 	.word	0x0800b95b
    case HAL_OK :
      usb_status = USBD_OK;
 800b948:	2300      	movs	r3, #0
 800b94a:	73fb      	strb	r3, [r7, #15]
    break;
 800b94c:	e00b      	b.n	800b966 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b94e:	2302      	movs	r3, #2
 800b950:	73fb      	strb	r3, [r7, #15]
    break;
 800b952:	e008      	b.n	800b966 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b954:	2301      	movs	r3, #1
 800b956:	73fb      	strb	r3, [r7, #15]
    break;
 800b958:	e005      	b.n	800b966 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b95a:	2302      	movs	r3, #2
 800b95c:	73fb      	strb	r3, [r7, #15]
    break;
 800b95e:	e002      	b.n	800b966 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b960:	2302      	movs	r3, #2
 800b962:	73fb      	strb	r3, [r7, #15]
    break;
 800b964:	bf00      	nop
  }
  return usb_status;  
 800b966:	7bfb      	ldrb	r3, [r7, #15]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3710      	adds	r7, #16
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	460b      	mov	r3, r1
 800b97a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b97c:	2300      	movs	r3, #0
 800b97e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b980:	2300      	movs	r3, #0
 800b982:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b98a:	78fa      	ldrb	r2, [r7, #3]
 800b98c:	4611      	mov	r1, r2
 800b98e:	4618      	mov	r0, r3
 800b990:	f7f7 fb41 	bl	8003016 <HAL_PCD_EP_ClrStall>
 800b994:	4603      	mov	r3, r0
 800b996:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800b998:	7bbb      	ldrb	r3, [r7, #14]
 800b99a:	2b03      	cmp	r3, #3
 800b99c:	d816      	bhi.n	800b9cc <USBD_LL_ClearStallEP+0x5c>
 800b99e:	a201      	add	r2, pc, #4	; (adr r2, 800b9a4 <USBD_LL_ClearStallEP+0x34>)
 800b9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a4:	0800b9b5 	.word	0x0800b9b5
 800b9a8:	0800b9bb 	.word	0x0800b9bb
 800b9ac:	0800b9c1 	.word	0x0800b9c1
 800b9b0:	0800b9c7 	.word	0x0800b9c7
    case HAL_OK :
      usb_status = USBD_OK;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b9b8:	e00b      	b.n	800b9d2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9ba:	2302      	movs	r3, #2
 800b9bc:	73fb      	strb	r3, [r7, #15]
    break;
 800b9be:	e008      	b.n	800b9d2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b9c4:	e005      	b.n	800b9d2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b9c6:	2302      	movs	r3, #2
 800b9c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b9ca:	e002      	b.n	800b9d2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b9cc:	2302      	movs	r3, #2
 800b9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b9d0:	bf00      	nop
  }
  return usb_status; 
 800b9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3710      	adds	r7, #16
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b9ee:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800b9f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	da08      	bge.n	800ba0a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800b9f8:	78fb      	ldrb	r3, [r7, #3]
 800b9fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	015b      	lsls	r3, r3, #5
 800ba02:	4413      	add	r3, r2
 800ba04:	332a      	adds	r3, #42	; 0x2a
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	e008      	b.n	800ba1c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800ba0a:	78fb      	ldrb	r3, [r7, #3]
 800ba0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	015b      	lsls	r3, r3, #5
 800ba14:	4413      	add	r3, r2
 800ba16:	f203 232a 	addw	r3, r3, #554	; 0x22a
 800ba1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3714      	adds	r7, #20
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	460b      	mov	r3, r1
 800ba32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba34:	2300      	movs	r3, #0
 800ba36:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ba42:	78fa      	ldrb	r2, [r7, #3]
 800ba44:	4611      	mov	r1, r2
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7f7 f93b 	bl	8002cc2 <HAL_PCD_SetAddress>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800ba50:	7bbb      	ldrb	r3, [r7, #14]
 800ba52:	2b03      	cmp	r3, #3
 800ba54:	d816      	bhi.n	800ba84 <USBD_LL_SetUSBAddress+0x5c>
 800ba56:	a201      	add	r2, pc, #4	; (adr r2, 800ba5c <USBD_LL_SetUSBAddress+0x34>)
 800ba58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba5c:	0800ba6d 	.word	0x0800ba6d
 800ba60:	0800ba73 	.word	0x0800ba73
 800ba64:	0800ba79 	.word	0x0800ba79
 800ba68:	0800ba7f 	.word	0x0800ba7f
    case HAL_OK :
      usb_status = USBD_OK;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba70:	e00b      	b.n	800ba8a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba72:	2302      	movs	r3, #2
 800ba74:	73fb      	strb	r3, [r7, #15]
    break;
 800ba76:	e008      	b.n	800ba8a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba7c:	e005      	b.n	800ba8a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba7e:	2302      	movs	r3, #2
 800ba80:	73fb      	strb	r3, [r7, #15]
    break;
 800ba82:	e002      	b.n	800ba8a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800ba84:	2302      	movs	r3, #2
 800ba86:	73fb      	strb	r3, [r7, #15]
    break;
 800ba88:	bf00      	nop
  }
  return usb_status;  
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b086      	sub	sp, #24
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	607a      	str	r2, [r7, #4]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	460b      	mov	r3, r1
 800baa2:	72fb      	strb	r3, [r7, #11]
 800baa4:	4613      	mov	r3, r2
 800baa6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baa8:	2300      	movs	r3, #0
 800baaa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baac:	2300      	movs	r3, #0
 800baae:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bab6:	893b      	ldrh	r3, [r7, #8]
 800bab8:	7af9      	ldrb	r1, [r7, #11]
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	f7f7 fa18 	bl	8002ef0 <HAL_PCD_EP_Transmit>
 800bac0:	4603      	mov	r3, r0
 800bac2:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800bac4:	7dbb      	ldrb	r3, [r7, #22]
 800bac6:	2b03      	cmp	r3, #3
 800bac8:	d816      	bhi.n	800baf8 <USBD_LL_Transmit+0x64>
 800baca:	a201      	add	r2, pc, #4	; (adr r2, 800bad0 <USBD_LL_Transmit+0x3c>)
 800bacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad0:	0800bae1 	.word	0x0800bae1
 800bad4:	0800bae7 	.word	0x0800bae7
 800bad8:	0800baed 	.word	0x0800baed
 800badc:	0800baf3 	.word	0x0800baf3
    case HAL_OK :
      usb_status = USBD_OK;
 800bae0:	2300      	movs	r3, #0
 800bae2:	75fb      	strb	r3, [r7, #23]
    break;
 800bae4:	e00b      	b.n	800bafe <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bae6:	2302      	movs	r3, #2
 800bae8:	75fb      	strb	r3, [r7, #23]
    break;
 800baea:	e008      	b.n	800bafe <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800baec:	2301      	movs	r3, #1
 800baee:	75fb      	strb	r3, [r7, #23]
    break;
 800baf0:	e005      	b.n	800bafe <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800baf2:	2302      	movs	r3, #2
 800baf4:	75fb      	strb	r3, [r7, #23]
    break;
 800baf6:	e002      	b.n	800bafe <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800baf8:	2302      	movs	r3, #2
 800bafa:	75fb      	strb	r3, [r7, #23]
    break;
 800bafc:	bf00      	nop
  }
  return usb_status;    
 800bafe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3718      	adds	r7, #24
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b086      	sub	sp, #24
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	607a      	str	r2, [r7, #4]
 800bb12:	461a      	mov	r2, r3
 800bb14:	460b      	mov	r3, r1
 800bb16:	72fb      	strb	r3, [r7, #11]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bb2a:	893b      	ldrh	r3, [r7, #8]
 800bb2c:	7af9      	ldrb	r1, [r7, #11]
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	f7f7 f98e 	bl	8002e50 <HAL_PCD_EP_Receive>
 800bb34:	4603      	mov	r3, r0
 800bb36:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800bb38:	7dbb      	ldrb	r3, [r7, #22]
 800bb3a:	2b03      	cmp	r3, #3
 800bb3c:	d816      	bhi.n	800bb6c <USBD_LL_PrepareReceive+0x64>
 800bb3e:	a201      	add	r2, pc, #4	; (adr r2, 800bb44 <USBD_LL_PrepareReceive+0x3c>)
 800bb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb44:	0800bb55 	.word	0x0800bb55
 800bb48:	0800bb5b 	.word	0x0800bb5b
 800bb4c:	0800bb61 	.word	0x0800bb61
 800bb50:	0800bb67 	.word	0x0800bb67
    case HAL_OK :
      usb_status = USBD_OK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	75fb      	strb	r3, [r7, #23]
    break;
 800bb58:	e00b      	b.n	800bb72 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb5a:	2302      	movs	r3, #2
 800bb5c:	75fb      	strb	r3, [r7, #23]
    break;
 800bb5e:	e008      	b.n	800bb72 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb60:	2301      	movs	r3, #1
 800bb62:	75fb      	strb	r3, [r7, #23]
    break;
 800bb64:	e005      	b.n	800bb72 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb66:	2302      	movs	r3, #2
 800bb68:	75fb      	strb	r3, [r7, #23]
    break;
 800bb6a:	e002      	b.n	800bb72 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800bb6c:	2302      	movs	r3, #2
 800bb6e:	75fb      	strb	r3, [r7, #23]
    break;
 800bb70:	bf00      	nop
  }
  return usb_status; 
 800bb72:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3718      	adds	r7, #24
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	460b      	mov	r3, r1
 800bb86:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bb8e:	78fa      	ldrb	r2, [r7, #3]
 800bb90:	4611      	mov	r1, r2
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7f7 f996 	bl	8002ec4 <HAL_PCD_EP_GetRxCount>
 800bb98:	4603      	mov	r3, r0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3708      	adds	r7, #8
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
	...

0800bba4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	460b      	mov	r3, r1
 800bbae:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bbb0:	78fb      	ldrb	r3, [r7, #3]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d002      	beq.n	800bbbc <HAL_PCDEx_LPM_Callback+0x18>
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d013      	beq.n	800bbe2 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800bbba:	e023      	b.n	800bc04 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	699b      	ldr	r3, [r3, #24]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d007      	beq.n	800bbd4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800bbc4:	f7fe fd21 	bl	800a60a <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bbc8:	4a10      	ldr	r2, [pc, #64]	; (800bc0c <HAL_PCDEx_LPM_Callback+0x68>)
 800bbca:	4b10      	ldr	r3, [pc, #64]	; (800bc0c <HAL_PCDEx_LPM_Callback+0x68>)
 800bbcc:	691b      	ldr	r3, [r3, #16]
 800bbce:	f023 0306 	bic.w	r3, r3, #6
 800bbd2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7fd fcb6 	bl	800954c <USBD_LL_Resume>
    break;
 800bbe0:	e010      	b.n	800bc04 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7fd fc9a 	bl	8009522 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	699b      	ldr	r3, [r3, #24]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d005      	beq.n	800bc02 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bbf6:	4a05      	ldr	r2, [pc, #20]	; (800bc0c <HAL_PCDEx_LPM_Callback+0x68>)
 800bbf8:	4b04      	ldr	r3, [pc, #16]	; (800bc0c <HAL_PCDEx_LPM_Callback+0x68>)
 800bbfa:	691b      	ldr	r3, [r3, #16]
 800bbfc:	f043 0306 	orr.w	r3, r3, #6
 800bc00:	6113      	str	r3, [r2, #16]
    break;   
 800bc02:	bf00      	nop
}
 800bc04:	bf00      	nop
 800bc06:	3708      	adds	r7, #8
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}
 800bc0c:	e000ed00 	.word	0xe000ed00

0800bc10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b083      	sub	sp, #12
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc18:	4b03      	ldr	r3, [pc, #12]	; (800bc28 <USBD_static_malloc+0x18>)
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	370c      	adds	r7, #12
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop
 800bc28:	200017a8 	.word	0x200017a8

0800bc2c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]

}
 800bc34:	bf00      	nop
 800bc36:	370c      	adds	r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bc44:	f7fe fce1 	bl	800a60a <SystemClock_Config>
}
 800bc48:	bf00      	nop
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <USBD_LL_BatteryCharging>:
  *         else return USBD_FAIL if false
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b085      	sub	sp, #20
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bc5a:	60fb      	str	r3, [r7, #12]
  if (hpcd->Init.battery_charging_enable == ENABLE)
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6a1b      	ldr	r3, [r3, #32]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d101      	bne.n	800bc68 <USBD_LL_BatteryCharging+0x1c>
  {
    return USBD_OK;
 800bc64:	2300      	movs	r3, #0
 800bc66:	e000      	b.n	800bc6a <USBD_LL_BatteryCharging+0x1e>
  }
  else
  {
    return USBD_FAIL;
 800bc68:	2302      	movs	r3, #2
  }
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3714      	adds	r7, #20
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr
	...

0800bc78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	4603      	mov	r3, r0
 800bc80:	6039      	str	r1, [r7, #0]
 800bc82:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	2212      	movs	r2, #18
 800bc88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bc8a:	4b03      	ldr	r3, [pc, #12]	; (800bc98 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr
 800bc98:	20000924 	.word	0x20000924

0800bc9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	4603      	mov	r3, r0
 800bca4:	6039      	str	r1, [r7, #0]
 800bca6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	2204      	movs	r2, #4
 800bcac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bcae:	4b03      	ldr	r3, [pc, #12]	; (800bcbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr
 800bcbc:	20000944 	.word	0x20000944

0800bcc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b082      	sub	sp, #8
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	6039      	str	r1, [r7, #0]
 800bcca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bccc:	79fb      	ldrb	r3, [r7, #7]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d105      	bne.n	800bcde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcd2:	683a      	ldr	r2, [r7, #0]
 800bcd4:	4907      	ldr	r1, [pc, #28]	; (800bcf4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcd6:	4808      	ldr	r0, [pc, #32]	; (800bcf8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bcd8:	f7fe f940 	bl	8009f5c <USBD_GetString>
 800bcdc:	e004      	b.n	800bce8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcde:	683a      	ldr	r2, [r7, #0]
 800bce0:	4904      	ldr	r1, [pc, #16]	; (800bcf4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bce2:	4805      	ldr	r0, [pc, #20]	; (800bcf8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bce4:	f7fe f93a 	bl	8009f5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bce8:	4b02      	ldr	r3, [pc, #8]	; (800bcf4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	20003480 	.word	0x20003480
 800bcf8:	0800bec4 	.word	0x0800bec4

0800bcfc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	4603      	mov	r3, r0
 800bd04:	6039      	str	r1, [r7, #0]
 800bd06:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd08:	683a      	ldr	r2, [r7, #0]
 800bd0a:	4904      	ldr	r1, [pc, #16]	; (800bd1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bd0c:	4804      	ldr	r0, [pc, #16]	; (800bd20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bd0e:	f7fe f925 	bl	8009f5c <USBD_GetString>
  return USBD_StrDesc;
 800bd12:	4b02      	ldr	r3, [pc, #8]	; (800bd1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3708      	adds	r7, #8
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	20003480 	.word	0x20003480
 800bd20:	0800bed4 	.word	0x0800bed4

0800bd24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	6039      	str	r1, [r7, #0]
 800bd2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd30:	79fb      	ldrb	r3, [r7, #7]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d105      	bne.n	800bd42 <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	4907      	ldr	r1, [pc, #28]	; (800bd58 <USBD_FS_SerialStrDescriptor+0x34>)
 800bd3a:	4808      	ldr	r0, [pc, #32]	; (800bd5c <USBD_FS_SerialStrDescriptor+0x38>)
 800bd3c:	f7fe f90e 	bl	8009f5c <USBD_GetString>
 800bd40:	e004      	b.n	800bd4c <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800bd42:	683a      	ldr	r2, [r7, #0]
 800bd44:	4904      	ldr	r1, [pc, #16]	; (800bd58 <USBD_FS_SerialStrDescriptor+0x34>)
 800bd46:	4805      	ldr	r0, [pc, #20]	; (800bd5c <USBD_FS_SerialStrDescriptor+0x38>)
 800bd48:	f7fe f908 	bl	8009f5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd4c:	4b02      	ldr	r3, [pc, #8]	; (800bd58 <USBD_FS_SerialStrDescriptor+0x34>)
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3708      	adds	r7, #8
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	20003480 	.word	0x20003480
 800bd5c:	0800bee8 	.word	0x0800bee8

0800bd60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	4603      	mov	r3, r0
 800bd68:	6039      	str	r1, [r7, #0]
 800bd6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd6c:	79fb      	ldrb	r3, [r7, #7]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d105      	bne.n	800bd7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd72:	683a      	ldr	r2, [r7, #0]
 800bd74:	4907      	ldr	r1, [pc, #28]	; (800bd94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd76:	4808      	ldr	r0, [pc, #32]	; (800bd98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd78:	f7fe f8f0 	bl	8009f5c <USBD_GetString>
 800bd7c:	e004      	b.n	800bd88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	4904      	ldr	r1, [pc, #16]	; (800bd94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd82:	4805      	ldr	r0, [pc, #20]	; (800bd98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd84:	f7fe f8ea 	bl	8009f5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd88:	4b02      	ldr	r3, [pc, #8]	; (800bd94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3708      	adds	r7, #8
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	20003480 	.word	0x20003480
 800bd98:	0800bef8 	.word	0x0800bef8

0800bd9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	4603      	mov	r3, r0
 800bda4:	6039      	str	r1, [r7, #0]
 800bda6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bda8:	79fb      	ldrb	r3, [r7, #7]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d105      	bne.n	800bdba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bdae:	683a      	ldr	r2, [r7, #0]
 800bdb0:	4907      	ldr	r1, [pc, #28]	; (800bdd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bdb2:	4808      	ldr	r0, [pc, #32]	; (800bdd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bdb4:	f7fe f8d2 	bl	8009f5c <USBD_GetString>
 800bdb8:	e004      	b.n	800bdc4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	4904      	ldr	r1, [pc, #16]	; (800bdd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bdbe:	4805      	ldr	r0, [pc, #20]	; (800bdd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bdc0:	f7fe f8cc 	bl	8009f5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdc4:	4b02      	ldr	r3, [pc, #8]	; (800bdd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	20003480 	.word	0x20003480
 800bdd4:	0800bf04 	.word	0x0800bf04

0800bdd8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	4603      	mov	r3, r0
 800bde0:	6039      	str	r1, [r7, #0]
 800bde2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_BOSDesc);
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	220c      	movs	r2, #12
 800bde8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800bdea:	4b03      	ldr	r3, [pc, #12]	; (800bdf8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr
 800bdf8:	20000938 	.word	0x20000938

0800bdfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800bdfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800be34 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800be00:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800be02:	e003      	b.n	800be0c <LoopCopyDataInit>

0800be04 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800be04:	4b0c      	ldr	r3, [pc, #48]	; (800be38 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800be06:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800be08:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800be0a:	3104      	adds	r1, #4

0800be0c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800be0c:	480b      	ldr	r0, [pc, #44]	; (800be3c <LoopForever+0xa>)
	ldr	r3, =_edata
 800be0e:	4b0c      	ldr	r3, [pc, #48]	; (800be40 <LoopForever+0xe>)
	adds	r2, r0, r1
 800be10:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800be12:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800be14:	d3f6      	bcc.n	800be04 <CopyDataInit>
	ldr	r2, =_sbss
 800be16:	4a0b      	ldr	r2, [pc, #44]	; (800be44 <LoopForever+0x12>)
	b	LoopFillZerobss
 800be18:	e002      	b.n	800be20 <LoopFillZerobss>

0800be1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800be1a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800be1c:	f842 3b04 	str.w	r3, [r2], #4

0800be20 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800be20:	4b09      	ldr	r3, [pc, #36]	; (800be48 <LoopForever+0x16>)
	cmp	r2, r3
 800be22:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800be24:	d3f9      	bcc.n	800be1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800be26:	f7fe fd33 	bl	800a890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800be2a:	f000 f811 	bl	800be50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800be2e:	f7fe fbc7 	bl	800a5c0 <main>

0800be32 <LoopForever>:

LoopForever:
    b LoopForever
 800be32:	e7fe      	b.n	800be32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800be34:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 800be38:	0800bf74 	.word	0x0800bf74
	ldr	r0, =_sdata
 800be3c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800be40:	20000948 	.word	0x20000948
	ldr	r2, =_sbss
 800be44:	20000948 	.word	0x20000948
	ldr	r3, = _ebss
 800be48:	20003680 	.word	0x20003680

0800be4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800be4c:	e7fe      	b.n	800be4c <ADC1_IRQHandler>
	...

0800be50 <__libc_init_array>:
 800be50:	b570      	push	{r4, r5, r6, lr}
 800be52:	4e0d      	ldr	r6, [pc, #52]	; (800be88 <__libc_init_array+0x38>)
 800be54:	4c0d      	ldr	r4, [pc, #52]	; (800be8c <__libc_init_array+0x3c>)
 800be56:	1ba4      	subs	r4, r4, r6
 800be58:	10a4      	asrs	r4, r4, #2
 800be5a:	2500      	movs	r5, #0
 800be5c:	42a5      	cmp	r5, r4
 800be5e:	d109      	bne.n	800be74 <__libc_init_array+0x24>
 800be60:	4e0b      	ldr	r6, [pc, #44]	; (800be90 <__libc_init_array+0x40>)
 800be62:	4c0c      	ldr	r4, [pc, #48]	; (800be94 <__libc_init_array+0x44>)
 800be64:	f000 f820 	bl	800bea8 <_init>
 800be68:	1ba4      	subs	r4, r4, r6
 800be6a:	10a4      	asrs	r4, r4, #2
 800be6c:	2500      	movs	r5, #0
 800be6e:	42a5      	cmp	r5, r4
 800be70:	d105      	bne.n	800be7e <__libc_init_array+0x2e>
 800be72:	bd70      	pop	{r4, r5, r6, pc}
 800be74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800be78:	4798      	blx	r3
 800be7a:	3501      	adds	r5, #1
 800be7c:	e7ee      	b.n	800be5c <__libc_init_array+0xc>
 800be7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800be82:	4798      	blx	r3
 800be84:	3501      	adds	r5, #1
 800be86:	e7f2      	b.n	800be6e <__libc_init_array+0x1e>
 800be88:	0800bf6c 	.word	0x0800bf6c
 800be8c:	0800bf6c 	.word	0x0800bf6c
 800be90:	0800bf6c 	.word	0x0800bf6c
 800be94:	0800bf70 	.word	0x0800bf70

0800be98 <memset>:
 800be98:	4402      	add	r2, r0
 800be9a:	4603      	mov	r3, r0
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d100      	bne.n	800bea2 <memset+0xa>
 800bea0:	4770      	bx	lr
 800bea2:	f803 1b01 	strb.w	r1, [r3], #1
 800bea6:	e7f9      	b.n	800be9c <memset+0x4>

0800bea8 <_init>:
 800bea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beaa:	bf00      	nop
 800beac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beae:	bc08      	pop	{r3}
 800beb0:	469e      	mov	lr, r3
 800beb2:	4770      	bx	lr

0800beb4 <_fini>:
 800beb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb6:	bf00      	nop
 800beb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beba:	bc08      	pop	{r3}
 800bebc:	469e      	mov	lr, r3
 800bebe:	4770      	bx	lr
